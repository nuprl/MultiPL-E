name: HumanEval_92_any_int
language: py
prompt: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
  \ a function that takes 3 numbers.\n    Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n    Returns false\
  \ in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n\
  \    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n\
  \    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
  \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
  \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
  \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
  \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
  \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
completions: ["    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return x ==\
    \ y + z and is_integer(x) and is_integer(y) and is_integer(z)\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ 3 numbers and returns True if they are all positive.\n\nExamples\n>>> all_positive(1,\
    \ 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\nTrue\n\n>>> all_positive(3.6, -2.2,\
    \ 2)\nFalse\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n\
    </cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n\
    <text>\nProblem 3\nCreate a function that takes 3 numbers and returns True if\
    \ they are all positive, False if they are all negative, and True if they are\
    \ all zero. Return False if any number is NaN.\n\nExamples\n>>> all_positive(1,\
    \ 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\nTrue\n\n>>> all_positive(0, -2,\
    \ -3)\nFalse\n\n>>> all_positive(NaN, -2, -3)\nFalse\n\n>>> all_positive(NaN,\
    \ NaN, NaN)\nFalse\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\n\nExamples\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nWrite a function that takes 3 numbers and returns True\
    \ if any of them is equal to the sum of the other two, and all numbers are integers.\
    \ Return False in any other cases.\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    \n    if type(x) != int or type(y) != int or type(z)\
    \ != int:\n        return False\n    \n    return x == y + z and x % 1 == 0 and\
    \ y % 1 == 0 and z % 1 == 0\n    ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nThe string\
    \ can contain punctuation marks and spaces.\nThe function should ignore punctuation\
    \ and spaces.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and spaces when counting words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation and spaces when counting words.\n\
    The function should ignore case when counting words.\nThe function should ignore\
    \ punctuation and spaces when counting words.\nThe function should ignore case\
    \ when counting words.\nThe function should ignore punctuation and spaces when\
    \ counting words.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and spaces when counting words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation and spaces when counting words.\n\
    The function should ignore case when counting words.\nThe function should ignore\
    \ punctuation and spaces when counting words.\nThe function should ignore case\
    \ when counting words.\nThe function should ignore punctuation and spaces when\
    \ counting words.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and space", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    assert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\n\nExamples\n>>> all_positive(1, 2, 3)\n\
    True\n\n>>> all_positive(-1, -2, -3)\nFalse\n\n>>> all_positive(3.6, -2.2, 2)\n\
    False\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n\nExamples\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n5\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n1\n\
    \n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n2\n\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The\
    \ quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n\
    0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy do", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate a function that takes 3 strings\
    \ and returns true if any of them are equal to the sum of the other two, and all\
    \ strings are equal in length.\nReturns false in any other cases.\n    \nExamples\n\
    \    >>> any_str(\"hello\", \"hello\", \"hello\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"goodbye\", \"hello\")\n    False\n\n    >>> any_str(\"hello\", \"hello\"\
    , \"goodbye\")\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\"\
    )\n    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True)\n\
    \    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False)\n  \
    \  False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, True)\n\
    \    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False, True)\n\
    \    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, False)\n\
    \    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False, False)\n\
    \    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, True,\
    \ True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True,\
    \ False, True)\n    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\"\
    , True, True, False)\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"\
    helloo\", False, True, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\"\
    , \"helloo\", False, False, True)\n    False\n    \n    >>> any_str(\"hello\"\
    , \"hello\", \"helloo\", True, True, True, True)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, True, False, True)\n    False\n    \n  \
    \  >>> any_str(\"hello\", \"hello\", \"helloo\", True, False, True, True)\n  \
    \  True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False, True,\
    \ False, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\"\
    , False, False, True, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\"\
    , \"helloo\", True, True, False, True, True)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, False, True, False, True)\n    True\n  \
    \  \n    >>> any_str(\"", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nWrite a function that\
    \ takes a string and returns the number of vowels contained in the string.\n\n\
    Examples\nvowels(\"hello\") \u279E 2\nvowels(\"helloo\") \u279E 0\nvowels(\"hellooo\"\
    ) \u279E 3\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Create a function that takes\
    \ 3 numbers and returns True if they are all positive, False if they are all negative,\
    \ and True if they are all zero. Return False if any number is NaN.\n\n\n</text>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Write a function that takes a string and returns\
    \ the number of words in the string.\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nWrite a function that takes 3 numbers and returns True\
    \ if any of them is equal to the sum of the other two, and all numbers are integers.\n\
    \nExamples\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nCreate a function\
    \ that takes 3 numbers and returns True if they are all positive, and False if\
    \ they are all negative.\n\nExamples\n>>> all_positive(7, -5, -3)\nTrue\n\n>>>\
    \ all_positive(-7, -5, -3)\nFalse\n\n>>> all_positive(7, 5, -3)\nFalse\n\n>>>\
    \ all_positive(-7, 5, -3)\nFalse\n\n>>> all_positive(7, -5, 3)\nFalse\n\n>>> all_positive(-7,\
    \ -5, 3)\nFalse\n\n>>> all_positive(7, 5, 3)\nFalse\n\n>>> all_positive(-7, 5,\
    \ 3)\nFalse\n\n>>> all_positive(7, -5, -3)\nFalse\n\n>>> all_positive(-7, -5,\
    \ -3)\nFalse\n\n>>> all_positive(7, 5, -3)\nFalse\n\n>>> all_positive(-7, 5, -3)\n\
    False\n\n>>> all_positive(7, 5, 3)\nFalse\n\n>>> all_positive(-7, 5, 3)\nFalse\n\
    \n>>> all_positive(7, -5, 3)\nFalse\n\n>>> all_positive(-7, -5, 3)\nFalse\n\n\
    >>> all_positive(7, 5, 3)\nFalse\n\n>>> all_positive(-7, 5, 3)\nFalse\n\n>>> all_positive(7,\
    \ -5, -3)\nFalse\n\n>>> all_positive(-7, -5, -3)\nFalse\n\n>>> all_positive(7,\
    \ 5, -3)\nFalse\n\n>>> all_positive(-7, 5, -3)\nFalse\n\n>>> all_positive(7, 5,\
    \ 3)\nFalse\n\n>>> all_positive(-7, 5, 3)\nFalse\n\n>>> all_positive(7, -5, 3)\n\
    False\n\n>>> all_positive(-7, -5, 3)\nFalse\n\n>>> all_positive(7, 5, 3)\nFalse\n\
    \n>>> all_positive(-7, 5, 3)\nFalse\n\n>>> all_positive(7, -5, -3)\nFalse\n\n\
    >>> all_positive(-7, -5, -3)\nFalse\n\n>>> all_positive(7, 5, -3)\nFalse\n\n>>>\
    \ all_positive(-7, 5, -3)\nFalse\n\n>>> all_positive(7, 5, 3)\nFalse\n\n>>> all_positive(-7,\
    \ 5, 3)\nFalse\n\n>>> all_positive(7, -5, 3)\nFalse\n\n>>> all_positive(-7, -5,\
    \ 3)\nFalse\n\n>>> all_positive(7, 5, 3)\nFalse\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nCreate a function that takes\
    \ 3 numbers and returns True if they are all positive.\nReturn False if any number\
    \ is negative.\nReturn False if any number is 0.\nReturn False if any number is\
    \ greater than 0.\nReturn False if any number is less than 0.\nReturn False if\
    \ any number is equal to 0.\nReturn False if any number is equal to 0.\nReturn\
    \ False if any number is equal to 0.\nReturn False if any number is equal to 0.\n\
    Return False if any number is equal to 0.\nReturn False if any number is equal\
    \ to 0.\nReturn False if any number is equal to 0.\nReturn False if any number\
    \ is equal to 0.\nReturn False if any number is equal to 0.\nReturn False if any\
    \ number is equal to 0.\nReturn False if any number is equal to 0.\nReturn False\
    \ if any number is equal to 0.\nReturn False if any number is equal to 0.\nReturn\
    \ False if any number is equal to 0.\nReturn False if any number is equal to 0.\n\
    Return False if any number is equal to 0.\nReturn False if any number is equal\
    \ to 0.\nReturn False if any number is equal to 0.\nReturn False if any number\
    \ is equal to 0.\nReturn False if any number is equal to 0.\nReturn False if any\
    \ number is equal to 0.\nReturn False if any number is equal to 0.\nReturn False\
    \ if any number is equal to 0.\nReturn False if any number is equal to 0.\nReturn\
    \ False if any number is equal to 0.\nReturn False if any number is equal to 0.\n\
    Return False if any number is equal to 0.\nReturn False if any number is equal\
    \ to 0.\nReturn False if any number is equal to 0.\nReturn False if any number\
    \ is equal to 0.\nReturn False if any number is equal to 0.\nReturn False if any\
    \ number is equal to 0.\nReturn False if any number is equal to 0.\nReturn False\
    \ if any number is equal to 0.\nReturn False if any number is equal to 0.\nReturn\
    \ False if any number is equal to 0.\nReturn False if any number is equal to 0.\n\
    Return False if any number is equal to 0.\nReturn False if any number is equal\
    \ to 0.\nReturn False if any number is equal to 0.\nReturn False if any number\
    \ is equal to 0.\nReturn False if any number is equal to 0.\nReturn False if any\
    \ number is equal to 0.\nReturn False if any number is equal to 0.\nReturn False\
    \ if any number is equal to 0.\nReturn False if any number is equal to 0.\nReturn\
    \ False if any number is equal to 0.\nReturn False if ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate a function that takes 3 strings\
    \ and returns True if any of them is equal to the sum of the other two, and all\
    \ strings are equal in length.\nReturns False in any other cases.\n    \nExamples\n\
    >>> any_string('a', 'b', 'c')\nTrue\n>>> any_string('a', 'a', 'a')\nTrue\n>>>\
    \ any_string('a', 'a', 'b')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\nFalse\n>>> any_string('a', 'a', 'a')\nFalse\n>>>\
    \ any_string('a', 'a', 'a')\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    \n    if type(x) ==\
    \ int or type(y) == int or type(z) == int:\n        return True\n    else:\n \
    \       return False\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Write a function that takes\
    \ 3 numbers and returns True if they are all positive, and False if they are all\
    \ negative.\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nWrite a function that takes 3 numbers and returns True\
    \ if they are all positive, and False if they are all negative.\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nCreate a function that takes\
    \ 3 numbers and returns True if they are all positive, False if they are all negative,\
    \ and None if they are all zero. \nCreate a function that takes 3 numbers and\
    \ returns True if they are all integers, False if they are all floats, and None\
    \ if they are all non-numbers.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are all zero.\nCreate a function that takes 3 numbers and returns\
    \ True if they are all non-negative and non-zero, False if they are all negative,\
    \ and None if they are ", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\nWrite a function that takes 3 numbers and\
    \ returns True if they are all even, and False if they are all odd.\nWrite a function\
    \ that takes 3 numbers and returns True if they are all positive, and False if\
    \ they are all negative.\nWrite a function that takes 3 numbers and returns True\
    \ if they are all even, and False if they are all odd.\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, and False if they\
    \ are all negative.\nWrite a function that takes 3 numbers and returns True if\
    \ they are all even, and False if they are all odd.\nWrite a function that takes\
    \ 3 numbers and returns True if they are all positive, and False if they are all\
    \ negative.\nWrite a function that takes 3 numbers and returns True if they are\
    \ all even, and False if they are all odd.\nWrite a function that takes 3 numbers\
    \ and returns True if they are all positive, and False if they are all negative.\n\
    Write a function that takes 3 numbers and returns True if they are all even, and\
    \ False if they are all odd.\nWrite a function that takes 3 numbers and returns\
    \ True if they are all positive, and False if they are all negative.\nWrite a\
    \ function that takes 3 numbers and returns True if they are all even, and False\
    \ if they are all odd.\nWrite a function that takes 3 numbers and returns True\
    \ if they are all positive, and False if they are all negative.\nWrite a function\
    \ that takes 3 numbers and returns True if they are all even, and False if they\
    \ are all odd.\nWrite a function that takes 3 numbers and returns True if they\
    \ are all positive, and False if they are all negative.\nWrite a function that\
    \ takes 3 numbers and returns True if they are all even, and False if they are\
    \ all odd.\nWrite a function that takes 3 numbers and returns True if they are\
    \ all positive, and False if they are all negative.\nWrite a function that takes\
    \ 3 numbers and returns True if they are all even, and False if they are all odd.\n\
    Write a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\nWrite a function that takes 3 numbers and\
    \ returns True if they are all even, and False if they are all odd.\nWrite a function\
    \ that takes 3 numbers and returns True if they are all positive, and False if\
    \ they are all negative.\nWrite a function that ", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    \n    if type(x) ==\
    \ int or type(y) == int or type(z) == int:\n        return True\n    else:\n \
    \       return False\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nassert any_int(5, 2, 7) == True\nassert any_int(3,\
    \ 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2,\
    \ 2) == False\n</cell>\n<text>\nProblem 4\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nFor example, the string \"Hello,\
    \ my name is Bob\" has 4 words, but the string \"Hello, my name is Bob\" has 0\
    \ words.\n\nThis function should work for strings with any length.\n\nThe function\
    \ should ignore spaces and punctuation.\n\nThe function should ignore numbers\
    \ and symbols.\n\nThe function should ignore uppercase and lowercase letters.\n\
    \nThe function should ignore spaces and punctuation after a number.\n\nThe function\
    \ should ignore spaces and punctuation after a lowercase letter.\n\nThe function\
    \ should ignore spaces and punctuation after an uppercase letter.\n\nThe function\
    \ should ignore spaces and punctuation after a symbol.\n\nThe function should\
    \ ignore spaces and punctuation after a period.\n\nThe function should ignore\
    \ spaces and punctuation after a comma.\n\nThe function should ignore spaces and\
    \ punctuation after a dash (-).\n\nThe function should ignore spaces and punctuation\
    \ after a question mark (?).\n\nThe function should ignore spaces and punctuation\
    \ after an exclamation mark (!).\n\nThe function should ignore spaces and punctuation\
    \ after a colon (:).\n\nThe function should ignore spaces and punctuation after\
    \ a semicolon (;).\n\nThe function should ignore spaces and punctuation after\
    \ a period.\n\nThe function should ignore spaces and punctuation after a question\
    \ mark (?).\n\nThe function should ignore spaces and punctuation after an exclamation\
    \ mark (!).\n\nThe function should ignore spaces and punctuation after a colon\
    \ (:).\n\nThe function should ignore spaces and punctuation after a semicolon\
    \ (;).\n\nThe function should ignore spaces and punctuation after a period.\n\n\
    The function should ignore spaces and punctuation after a question mark (?).\n\
    \nThe function should ignore spaces and punctuation after an exclamation mark\
    \ (!).\n\nThe function should ignore spaces and punctuation after a colon (:).\n\
    \nThe function should ignore spaces and punctuation after a semicolon (;).\n\n\
    The function should ignore spaces and punctuation after a period.\n\nThe function\
    \ should ignore spaces and punctuation after a question mark (?).\n\nThe function\
    \ should ignore spaces and punctuation after an ex", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Write a function that takes 3 numbers and returns\
    \ True if they are all integers, and False if any of them are not integers.\n\n\
    </text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nassert any_int(5, 2, 7) == True\nassert any_int(3,\
    \ 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2,\
    \ 2) == False\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\n\nExamples\n>>> vowel_count(\"\
    hello\")\n1\n>>> vowel_count(\"a\")\n0\n>>> vowel_count(\"aa\")\n2\n>>> vowel_count(\"\
    aaa\")\n3\n>>> vowel_count(\"aaab\")\n2\n>>> vowel_count(\"aaabb\")\n2\n>>> vowel_count(\"\
    aaabbb\")\n3\n>>> vowel_count(\"aaabbbb\")\n3\n>>> vowel_count(\"aaabbbbcc\")\n\
    3\n>>> vowel_count(\"aaabbbbccd\")\n3\n>>> vowel_count(\"aaabbbbccdde\")\n3\n\
    >>> vowel_count(\"aaabbbbccddef\")\n3\n>>> vowel_count(\"aaabbbbccddefg\")\n3\n\
    >>> vowel_count(\"aaabbbbccddefgh\")\n3\n>>> vowel_count(\"aaabbbbccddefghi\"\
    )\n3\n>>> vowel_count(\"aaabbbbccddefghij\")\n3\n>>> vowel_count(\"aaabbbbccddefghijk\"\
    )\n3\n>>> vowel_count(\"aaabbbbccddefghijkl\")\n3\n>>> vowel_count(\"aaabbbbccddefghijklm\"\
    )\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\")\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\"\
    )\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\")\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\"\
    )\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\")\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\"\
    )\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\")\n3\n>>> vowel_count(\"aaabbbbccddefghijklmn\"\
    )\n3\n>>> vowel_count(\"aaabbbbccddefghijkl", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a string and returns the number of words in the string.\n\nExamples\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n7\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n0\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    0\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n0\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    0\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n0\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    0\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n>>> count_words(\"\
    The quick brown fox ", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x >= 0 and x <= z and y >= 0 and y <= z and z >= 0 and\
    \ z <= z\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Define a function that takes 3 numbers and returns\
    \ True if they are all positive.\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate a function that takes 3 strings\
    \ and returns True if any of them are equal to the sum of the other two, and all\
    \ strings are equal in length. Returns False in any other case.\n\nExamples\n\
    >>> any_string(\"hello\", \"hello\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"hello\", \"world\")\nFalse\n\n>>> any_string(\"hello\", \"hello\", \"helloo\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"\
    hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\"\
    , \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\
    \n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"\
    hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\"\
    , \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\
    \n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"\
    hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\"\
    , \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\
    \n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"\
    hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\"\
    , \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\
    \n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"\
    hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\"\
    , \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\
    \n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"\
    hello\", \"hello\", \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\"\
    , \"helloo\")\nFalse\n\n>>> any_string(\"hello\", \"hello\", \"helloo\")\nFalse\n\
    \n>>> any_string(\"hello\", \"hello\", \"helloo\")", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    \n    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n    \n    ",
  "    return (x == y + z) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a list of numbers and returns the number of positive numbers in the list.\n\
    If there are no positive numbers in the list, return 0.\nIf there are multiple\
    \ positive numbers in the list, return the number of positive numbers in the list.\n\
    \nExamples\n>>> count_positive([1, 2, 3])\n3\n>>> count_positive([-1, -2, -3])\n\
    0\n>>> count_positive([-4, -5, -6])\n2\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    \n    if type(x) != int or type(y)\
    \ != int or type(z) != int:\n        return False\n    \n    if x == y and x ==\
    \ z:\n        return True\n    \n    return False\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z and x != y\
    \ and x != z and y != z\n", "    return (x == y or x == z or y == z) and is_integer(x)\n\
    \n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n", "    \n    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a list of numbers\
    \ and returns the sum of the numbers in the list. \nIf the list is empty, the\
    \ function should return 0.\nIf the list contains non-numeric values, the function\
    \ should return 0.\nIf the list contains only numeric values, the function should\
    \ return the sum of the numbers.\nIf the list contains only strings, the function\
    \ should return 0.\nIf the list contains both strings and numbers, the function\
    \ should return the sum of the numbers.\nIf the list contains both strings and\
    \ non-numeric values, the function should return 0.\nIf the list contains both\
    \ numbers and non-numeric values, the function should return 0.\nIf the list contains\
    \ both strings and numbers, the function should return the sum of the numbers.\n\
    If the list contains both strings and non-numeric values, the function should\
    \ return 0.\nIf the list contains both numbers and non-numeric values, the function\
    \ should return 0.\nIf the list contains both strings and numbers, the function\
    \ should return the sum of the numbers.\nIf the list contains both strings and\
    \ non-numeric values, the function should return 0.\nIf the list contains both\
    \ numbers and non-numeric values, the function should return 0.\nIf the list contains\
    \ both strings and numbers, the function should return the sum of the numbers.\n\
    If the list contains both strings and non-numeric values, the function should\
    \ return 0.\nIf the list contains both numbers and non-numeric values, the function\
    \ should return 0.\nIf the list contains both strings and numbers, the function\
    \ should return the sum of the numbers.\nIf the list contains both strings and\
    \ non-numeric values, the function should return 0.\nIf the list contains both\
    \ numbers and non-numeric values, the function should return 0.\nIf the list contains\
    \ both strings and numbers, the function should return the sum of the numbers.\n\
    If the list contains both strings and non-numeric values, the function should\
    \ return 0.\nIf the list contains both numbers and non-numeric values, the function\
    \ should return 0.\nIf the list contains both strings and numbers, the function\
    \ should return the sum of the numbers.\nIf the list contains both strings and\
    \ non-numeric values, the function should return 0.\nIf the list contains both\
    \ numbers and non-numeric values, the function should return 0.\nIf the list contains\
    \ both strings and numbers, the function should return the sum of the numbers.\n\
    If the list contains both strings and non-numeric values, the function should\
    \ return 0.\nIf the list contains both numbers and non-numeric values, the function\
    \ should return 0.\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ 3 numbers and returns True if they are all positive, False if they are all negative,\
    \ and None if they are all zero. You may assume that the numbers are all integers.\n\
    \nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\n\
    False\n\n>>> all_positive(0, -2, -3)\nNone\n\n>>> all_positive(-5, -6, -7)\nNone\n\
    \n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    The string can contain spaces, commas, or periods.\nThe string can also contain\
    \ numbers.\nThe string can also contain emojis.\nThe string can also contain emoticons.\n\
    The string can also contain URLs.\nThe string can also contain HTML tags.\nThe\
    \ string can also contain special characters.\nThe string can also contain emojis\
    \ and emoticons.\nThe string can also contain URLs and HTML tags.\nThe string\
    \ can also contain special characters and emojis and emoticons.\nThe string can\
    \ also contain URLs, HTML tags, and special characters.\nThe string can also contain\
    \ emojis, emoticons, and special characters.\nThe string can also contain URLs,\
    \ HTML tags, and special characters and emojis.\nThe string can also contain URLs,\
    \ HTML tags, and special characters and emoticons.\nThe string can also contain\
    \ URLs, HTML tags, and special characters and emojis and emoticons.\nThe string\
    \ can also contain URLs, HTML tags, and special characters, emojis, emoticons,\
    \ and special characters.\nThe string can also contain URLs, HTML tags, and special\
    \ characters, emojis, emoticons, and special characters and emojis.\nThe string\
    \ can also contain URLs, HTML tags, and special characters, emojis, emoticons,\
    \ and special characters and emoticons.\nThe string can also contain URLs, HTML\
    \ tags, and special characters, emojis, emoticons, and special characters, emoticons,\
    \ and special characters.\nThe string can also contain URLs, HTML tags, and special\
    \ characters, emojis, emoticons, and special characters, emoticons, and special\
    \ characters and emojis.\nThe string can also contain URLs, HTML tags, and special\
    \ characters, emojis, emoticons, and special characters, emoticons, and special\
    \ characters and emoticons.\nThe string can also contain URLs, HTML tags, and\
    \ special characters, emojis, emoticons, and special characters, emoticons, and\
    \ special characters, emoticons, and special characters.\nThe string can also\
    \ contain URLs, HTML tags, and special characters, emojis, emoticons, and special\
    \ characters, emoticons, and special characters, emoticons, and special characters\
    \ and emojis.\nThe string can also contain URLs, HTML ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z and x != -y\
    \ and x != -z\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7\nWrite a function that takes a string and returns\
    \ the number of words in the string.\n\nExamples\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n12\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n12\n\
    \n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n12\n\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog\")\n12\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n12\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n12\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n12\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n12\n\
    \n>>> count_words(\"The quick brown fox ", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Write a function\
    \ that takes a string and returns the number of vowels contained in the string.\n\
    \n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function that takes\
    \ 3 numbers and returns True if they are all integers, and False if any of them\
    \ are not integers.\n\nExamples\n>>> all_ints(5, 2, 7)\nTrue\n\n>>> all_ints(3,\
    \ 2, 2)\nFalse\n\n>>> all_ints(3, -2, 1)\nFalse\n\n>>> all_ints(3.6, -2.2, 2)\n\
    True\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a list and a number as arguments and returns the list with that number removed\
    \ from it.\n\nExamples\n>>> remove_number([1, 2, 3, 4], 2)\n[1, 3, 4]\n\n>>> remove_number([1,\
    \ 2, 3, 4], 5)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 0)\n[1, 2, 3,\
    \ 4]\n\n>>> remove_number([1, 2, 3, 4], -1)\n[1, 2, 3, 4]\n\n>>> remove_number([1,\
    \ 2, 3, 4], 4)\n[1, 2, 3]\n\n>>> remove_number([1, 2, 3, 4], 6)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 7)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 8)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 9)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 10)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 11)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 12)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 13)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 14)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 15)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 16)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 17)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 18)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 19)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 20)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 21)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 22)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 23)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 24)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 25)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 26)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 27)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 28)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 29)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 30)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 31)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 32)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 33)\n[1, 2, 3, 4]\n\
    \n>>> remove_number([1, 2, 3, 4], 34)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2,\
    \ 3, 4], 35)\n[1, 2, 3, 4]\n\n>>> remove_number([1, 2, 3, 4], 36", "    return\
    \ (x == y or x == z) and is_integer(x) and is_integer(y) and is_integer(z)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    return (x == y or x == z) and is_integer(x) and is_integer(y)\
    \ and is_integer(z)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return\
    \ (x == y or x == z or y == z) and is_integer(x)\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nWrite a function that takes 3 numbers and returns True\
    \ if they are all positive, and False if they are all negative.\n\n\n</text>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Write a function\
    \ that takes 3 numbers and returns True if any of them is greater than the sum\
    \ of the other two, and all numbers are integers.\nReturn False in any other case.\n\
    Examples\nany_greater(5, 2, 7)\nTrue\n\nany_greater(3, 2, 2)\nFalse\n\nany_greater(3,\
    \ -2, 1)\nTrue\n\nany_greater(3.6, -2.2, 2)\nTrue\n\nany_greater(5, -2, 7)\nFalse\n\
    \nany_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5,\
    \ 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\
    \nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\nany_greater(5,\
    \ 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\n\
    any_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2,\
    \ -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\n\
    any_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2,\
    \ 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5,\
    \ 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\
    \nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\nany_greater(5,\
    \ 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\n\
    any_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2,\
    \ -7)\nFalse\n\nany_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\n\
    any_greater(5, 2, 7)\nTrue\n\nany_greater(5, 2, -7)\nFalse\n\nany_greater(5, 2,\
    \ 7)\nTrue\n\nany_", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    assert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe string may contain spaces.\n\nExamples\n>>> count_words(\"There\
    \ are 5 cats and 3 dogs.\")\n5\n>>> count_words(\"There are 5 cats and 3 dogs.\"\
    )\n3\n>>> count_words(\"There are 5 cats and 3 dogs.\")\n0\n>>> count_words(\"\
    There are 5 cats and 3 dogs.\", 2)\n2\n>>> count_words(\"There are 5 cats and\
    \ 3 dogs.\", 3)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\", 4)\n0\n\
    >>> count_words(\"There are 5 cats and 3 dogs.\", 5)\n0\n>>> count_words(\"There\
    \ are 5 cats and 3 dogs.\", 6)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\"\
    , 7)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\", 8)\n0\n>>> count_words(\"\
    There are 5 cats and 3 dogs.\", 9)\n0\n>>> count_words(\"There are 5 cats and\
    \ 3 dogs.\", 10)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\", 11)\n0\n\
    >>> count_words(\"There are 5 cats and 3 dogs.\", 12)\n0\n>>> count_words(\"There\
    \ are 5 cats and 3 dogs.\", 13)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\"\
    , 14)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\", 15)\n0\n>>> count_words(\"\
    There are 5 cats and 3 dogs.\", 16)\n0\n>>> count_words(\"There are 5 cats and\
    \ 3 dogs.\", 17)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\", 18)\n0\n\
    >>> count_words(\"There are 5 cats and 3 dogs.\", 19)\n0\n>>> count_words(\"There\
    \ are 5 cats and 3 dogs.\", 20)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\"\
    , 21)\n0\n>>> count_words(\"There are 5 cats and 3 dogs.\", 22)\n0\n>>> count_words(\"\
    There are 5 cats and 3 dogs.\", 23)\n0\n>>> count_words(\"There are 5 cats and\
    \ 3 dogs.\", 24)\n0\n>>> count_word", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nWrite\
    \ a function that takes 3 numbers and returns True if they are all positive, and\
    \ False if they are all negative.\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n\
    </cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes 3 numbers and returns True if they\
    \ are all positive, and False if they are all negative.\n\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a string and returns the number of words in the string.\n\nExamples\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n8\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n8\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\")\n8\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.\")\n8\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \")\n8\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \")\n8\n\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  \")\n8\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  \")\n8\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  \")\n8\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \"\
    )\n8\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n\
    8\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n8\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n8\n\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  \")\n8\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  \")\n8\n\n>>> count_words(\"The\
    \ quick brown fox jumps over the lazy dog.  \")\n8\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  \")\n8\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n8\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  \")\n8\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n\
    </cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\n\nExamples\nvowels(\"hello\") \u279E 5\n\
    vowels(\"helloooooooo\") \u279E 3\nvowels(\"helloooooooo\") \u279E 3\n\n</text>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x == y + z and x != y and x != z and y != z\n\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return (x == y or x == z or\
    \ y == z) and isinstance(x, int)\n", "    \n    if x == y + z:\n        return\
    \ True\n    else:\n        return False\n    ", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    \n    if x == y and y == z:\n        return True\n    \n\
    \    return False\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return (x == y or x == z or y == z)\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z and x != 0\
    \ and y != 0 and z != 0\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    \n    if type(x) == int or type(y) == int or type(z) == int:\n \
    \       return True\n    else:\n        return False\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    \n    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes 3 numbers and returns True if they are all positive,\
    \ False if they are all negative, and None if they are all zero. \nWrite a function\
    \ that takes 3 numbers and returns True if they are all even, False if they are\
    \ all odd, and None if they are all zero. \nWrite a function that takes 3 numbers\
    \ and returns True if they are all positive, False if they are all negative, and\
    \ None if they are all zero. \nWrite a function that takes 3 numbers and returns\
    \ True if they are all even, False if they are all odd, and None if they are all\
    \ zero. \nWrite a function that takes 3 numbers and returns True if they are all\
    \ positive, False if they are all negative, and None if they are all zero. \n\
    Write a function that takes 3 numbers and returns True if they are all even, False\
    \ if they are all odd, and None if they are all zero. \nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, False if they are\
    \ all negative, and None if they are all zero. \nWrite a function that takes 3\
    \ numbers and returns True if they are all even, False if they are all odd, and\
    \ None if they are all zero. \nWrite a function that takes 3 numbers and returns\
    \ True if they are all positive, False if they are all negative, and None if they\
    \ are all zero. \nWrite a function that takes 3 numbers and returns True if they\
    \ are all even, False if they are all odd, and None if they are all zero. \nWrite\
    \ a function that takes 3 numbers and returns True if they are all positive, False\
    \ if they are all negative, and None if they are all zero. \nWrite a function\
    \ that takes 3 numbers and returns True if they are all even, False if they are\
    \ all odd, and None if they are all zero. \nWrite a function that takes 3 numbers\
    \ and returns True if they are all positive, False if they are all negative, and\
    \ None if they are all zero. \nWrite a function that takes 3 numbers and returns\
    \ True if they are all even, False if they are all odd, and None if they are all\
    \ zero. \nWrite a function that takes 3 numbers and returns True if they are all\
    \ positive, False if they are all negative, and None if they are all zero. \n\
    Write a function that takes 3 numbers and returns True if they are all even, False\
    \ if they are all odd, and None if they are all zero. \nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, False if they are\
    \ all negative, and None if they are ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n\
    \n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
