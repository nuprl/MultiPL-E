name: HumanEval_92_any_int
language: py
prompt: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
  \ a function that takes 3 numbers.\n    Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n    Returns false\
  \ in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n\
  \    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n\
  \    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
  \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
  \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
  \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
  \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
  \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
completions: ["    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return x ==\
    \ y + z and is_integer(x) and is_integer(y) and is_integer(z)\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ 3 numbers and returns True if they are all positive.\n\nExamples\n>>> all_positive(1,\
    \ 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\nTrue\n\n>>> all_positive(3.6, -2.2,\
    \ 2)\nFalse\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n\
    </cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n\
    <text>\nProblem 3\nCreate a function that takes 3 numbers and returns True if\
    \ they are all positive, False if they are all negative, and True if they are\
    \ all zero. Return False if any number is NaN.\n\nExamples\n>>> all_positive(1,\
    \ 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\nTrue\n\n>>> all_positive(0, -2,\
    \ -3)\nFalse\n\n>>> all_positive(NaN, -2, -3)\nFalse\n\n>>> all_positive(NaN,\
    \ NaN, NaN)\nFalse\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\n\nExamples\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nWrite a function that takes 3 numbers and returns True\
    \ if any of them is equal to the sum of the other two, and all numbers are integers.\
    \ Return False in any other cases.\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    \n    if type(x) != int or type(y) != int or type(z)\
    \ != int:\n        return False\n    \n    return x == y + z and x % 1 == 0 and\
    \ y % 1 == 0 and z % 1 == 0\n    ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nThe string\
    \ can contain punctuation marks and spaces.\nThe function should ignore punctuation\
    \ and spaces.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and spaces when counting words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation and spaces when counting words.\n\
    The function should ignore case when counting words.\nThe function should ignore\
    \ punctuation and spaces when counting words.\nThe function should ignore case\
    \ when counting words.\nThe function should ignore punctuation and spaces when\
    \ counting words.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and spaces when counting words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation and spaces when counting words.\n\
    The function should ignore case when counting words.\nThe function should ignore\
    \ punctuation and spaces when counting words.\nThe function should ignore case\
    \ when counting words.\nThe function should ignore punctuation and spaces when\
    \ counting words.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and space", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    assert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\n\nExamples\n>>> all_positive(1, 2, 3)\n\
    True\n\n>>> all_positive(-1, -2, -3)\nFalse\n\n>>> all_positive(3.6, -2.2, 2)\n\
    False\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n\nExamples\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n5\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n1\n\
    \n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n2\n\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The\
    \ quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n\
    0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy do", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate a function that takes 3 strings\
    \ and returns true if any of them are equal to the sum of the other two, and all\
    \ strings are equal in length.\nReturns false in any other cases.\n    \nExamples\n\
    \    >>> any_str(\"hello\", \"hello\", \"hello\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"goodbye\", \"hello\")\n    False\n\n    >>> any_str(\"hello\", \"hello\"\
    , \"goodbye\")\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\"\
    )\n    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True)\n\
    \    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False)\n  \
    \  False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, True)\n\
    \    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False, True)\n\
    \    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, False)\n\
    \    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False, False)\n\
    \    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, True,\
    \ True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True,\
    \ False, True)\n    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\"\
    , True, True, False)\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"\
    helloo\", False, True, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\"\
    , \"helloo\", False, False, True)\n    False\n    \n    >>> any_str(\"hello\"\
    , \"hello\", \"helloo\", True, True, True, True)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, True, False, True)\n    False\n    \n  \
    \  >>> any_str(\"hello\", \"hello\", \"helloo\", True, False, True, True)\n  \
    \  True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", False, True,\
    \ False, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\"\
    , False, False, True, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\"\
    , \"helloo\", True, True, False, True, True)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, False, True, False, True)\n    True\n  \
    \  \n    >>> any_str(\""]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
