name: HumanEval_92_any_int
language: py
results:
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4szzjzec.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4szzjzec.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4szzjzec.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return x == y + z and is_integer(x) and is_integer(y) and is_integer(z)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbz_15sd4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbz_15sd4.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpbz_15sd4.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive.\n\nExamples\n>>>\
    \ all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\nTrue\n\n>>> all_positive(3.6,\
    \ -2.2, 2)\nFalse\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3jlkc85a.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprbijzhu1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmprbijzhu1.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmprbijzhu1.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplo60idp.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpplo60idp.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpplo60idp.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nCreate a function that\
    \ takes 3 numbers and returns True if they are all positive, False if they are\
    \ all negative, and True if they are all zero. Return False if any number is NaN.\n\
    \nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\n\
    True\n\n>>> all_positive(0, -2, -3)\nFalse\n\n>>> all_positive(NaN, -2, -3)\n\
    False\n\n>>> all_positive(NaN, NaN, NaN)\nFalse\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpb7qdk3k5.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfp86v6eh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfp86v6eh.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpfp86v6eh.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyhew1si.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpqyhew1si.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpqyhew1si.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsea2ienz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpsea2ienz.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsea2ienz.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns the number of vowels contained in the string.\n\n\
    Examples\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>>\
    \ vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n\
    >>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"\
    hello\")\n2\n>>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n\
    >>> vowel_count(\"goodbye\")\n0\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    goodbye\")\n0\n>>> vowel_count(\"hello\")\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4xcu5h0v.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nWrite a function that takes 3\
    \ numbers and returns True if any of them is equal to the sum of the other two,\
    \ and all numbers are integers. Return False in any other cases.\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfd9hjno3.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpee7zq_19.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpee7zq_19.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpee7zq_19.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if type(x) != int or type(y) != int or type(z) != int:\n       \
    \ return False\n    \n    return x == y + z and x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0\n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzz9e4p1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpqzz9e4p1.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpqzz9e4p1.py\", line 30,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9ia_29lw.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nThe string can\
    \ contain punctuation marks and spaces.\nThe function should ignore punctuation\
    \ and spaces.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and spaces when counting words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation and spaces when counting words.\n\
    The function should ignore case when counting words.\nThe function should ignore\
    \ punctuation and spaces when counting words.\nThe function should ignore case\
    \ when counting words.\nThe function should ignore punctuation and spaces when\
    \ counting words.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and spaces when counting words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation and spaces when counting words.\n\
    The function should ignore case when counting words.\nThe function should ignore\
    \ punctuation and spaces when counting words.\nThe function should ignore case\
    \ when counting words.\nThe function should ignore punctuation and spaces when\
    \ counting words.\nThe function should ignore case when counting words.\nThe function\
    \ should ignore punctuation and spaces when counting words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation and\
    \ spaces when counting words.\nThe function should ignore case when counting words.\n\
    The function should ignore punctuation and spaces when counting words.\nThe function\
    \ should ignore case when counting words.\nThe function should ignore punctuation\
    \ and space\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n  \
    \  assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpggt005_0.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f4vei8l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3f4vei8l.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp3f4vei8l.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyq_zejf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppyq_zejf.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmppyq_zejf.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nassert any_int(5,\
    \ 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) ==\
    \ True\nassert any_int(3.6, -2.2, 2) == False\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that takes 3 numbers and returns True if they are all positive, and\
    \ False if they are all negative.\n\nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\
    \n>>> all_positive(-1, -2, -3)\nFalse\n\n>>> all_positive(3.6, -2.2, 2)\nFalse\n\
    \n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpr79dgm9l.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns the number of words in the string.\n\nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n5\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n1\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n2\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  \")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n\
    0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The\
    \ quick brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n0\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy do\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmps3b93bm2.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate\
    \ a function that takes 3 strings and returns true if any of them are equal to\
    \ the sum of the other two, and all strings are equal in length.\nReturns false\
    \ in any other cases.\n    \nExamples\n    >>> any_str(\"hello\", \"hello\", \"\
    hello\")\n    True\n    \n    >>> any_str(\"hello\", \"goodbye\", \"hello\")\n\
    \    False\n\n    >>> any_str(\"hello\", \"hello\", \"goodbye\")\n    True\n \
    \   \n    >>> any_str(\"hello\", \"hello\", \"helloo\")\n    False\n    \n   \
    \ >>> any_str(\"hello\", \"hello\", \"helloo\", True)\n    True\n    \n    >>>\
    \ any_str(\"hello\", \"hello\", \"helloo\", False)\n    False\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, True)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", False, True)\n    False\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, False)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", False, False)\n    False\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, True, True)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, False, True)\n    False\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", True, True, False)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", False, True, True)\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"helloo\", False, False, True)\n    False\n    \n    >>>\
    \ any_str(\"hello\", \"hello\", \"helloo\", True, True, True, True)\n    True\n\
    \    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, True, False, True)\n\
    \    False\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\", True, False,\
    \ True, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"helloo\"\
    , False, True, False, True)\n    True\n    \n    >>> any_str(\"hello\", \"hello\"\
    , \"helloo\", False, False, True, True)\n    True\n    \n    >>> any_str(\"hello\"\
    , \"hello\", \"helloo\", True, True, False, True, True)\n    True\n    \n    >>>\
    \ any_str(\"hello\", \"hello\", \"helloo\", True, False, True, False, True)\n\
    \    True\n    \n    >>> any_str(\"\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpi4n0vo98.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
