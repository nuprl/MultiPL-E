name: HumanEval_156_int_to_mini_roman
language: py
prompt: "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive\
  \ integer, obtain its roman numeral equivalent as a string,\n    and return it in\
  \ lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n\
  \    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n\
  \    'cdxxvi'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(19) == 'xix'\n    assert candidate(152)\
  \ == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n\
  \    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4)\
  \ == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n\
  \    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n   \
  \ assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert\
  \ candidate(1000) == 'm'\n\ndef test_check():\n    check(int_to_mini_roman)\n\n\
  test_check()\n"
completions: ["    roman = roman_to_int(number)\n    return int_to_mini_roman(roman)\n\
    \n", "    roman = roman_numerals(number)\n    return roman[0].lower() + ''.join(roman[1:])\n\
    \n", "    if number < 1:\n        raise ValueError(\"Invalid input: number must\
    \ be positive\")\n    if number < 400:\n        return str(number)\n    if number\
    \ < 900:\n        return str(number - 100) + MICRORO\n    if number < 1999:\n\
    \        return str(number - 200) + MILLION\n    if number < 4999:\n        return\
    \ str(number - 400) + BILLION\n    if number < 9999:\n        return str(number\
    \ - 500) + MILLION\n    if number < 99999:\n        return str(number - 600) +\
    \ BILLION\n    if number < 999999:\n        return str(number - 700) + MILLION\n\
    \    if number < 9999999:\n        return str(number - 800) + BILLION\n    if\
    \ number < 99999999:\n        return str(number - 900) + MILLION\n    if number\
    \ < 99999999999:\n        return str(number - 1000) + BILLION\n    raise ValueError(\"\
    Invalid input: number too large\")\n\n", "    roman_numerals = {\n        1: \"\
    I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n        100:\
    \ \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    roman_numerals_reverse\
    \ = {v: k for k, v in roman_numerals.items()}\n    roman_numerals_reverse.update({0:\
    \ \"\"})\n    roman_numerals_reverse.update({1000: \"M\"})\n    roman_numerals_reverse.update({500:\
    \ \"D\"})\n    roman_numerals_reverse.update({100: \"C\"})\n    roman_numerals_reverse.update({50:\
    \ \"L\"})\n    roman_numerals_reverse.update({10: \"X\"})\n    roman_numerals_reverse.update({5:\
    \ \"V\"})\n    roman_numerals_reverse.update({1: \"I\"})\n\n    if number < 1:\n\
    \        raise ValueError(\"Invalid input\")\n\n    if number < 500:\n       \
    \ return roman_numerals[number]\n\n    if number < 1000:\n        number_to_return\
    \ = number // 100\n        number_to_return = int_to_mini_roman(number_to_return)\n\
    \        number_to_return = roman_numerals[number_to_return]\n        number_to_return\
    \ = number_to_return + roman_numerals[number % 100]\n        return number_to_return\n\
    \n    if number < 5000:\n        number_to_return = number // 1000\n        number_to_return\
    \ = int_to_mini_roman(number_to_return)\n        number_to_return = roman_numerals[number_to_return]\n\
    \        number_to_return = number_to_return + roman_numerals[number % 1000]\n\
    \        number_to_return = number_to_return + roman_numerals[number // 100]\n\
    \        return number_to_return\n\n    if number < 10000:\n        number_to_return\
    \ = number // 10000\n        number_to_return = int_to_mini_roman(number_to_return)\n\
    \        number_to_return = roman_numerals[number_to_return]\n        number_to_return\
    \ = number_to_return + roman_numerals[number % 10000]\n        number_to_return\
    \ = number_to_return + roman_numerals[number // 1000]\n        number_to_return\
    \ = number_to_return + roman_numerals[number // 100]\n        number_to_return\
    \ = number_to_return + roman_numerals[number // 10]\n        number_to_return\
    \ = number_to_return + roman_numerals[number % 10]\n        return number_to_return\n\
    \n    if number < ", "    roman = roman_to_int()\n    roman = roman[number]\n\
    \    return roman.lower()\n\n", "    roman = roman_numerals(number)\n    roman\
    \ = roman[::-1]\n    roman = roman.translate({ord(x): None for x in \"IV\"})\n\
    \    roman = roman.translate({ord(x): None for x in \"IX\"})\n    roman = roman.translate({ord(x):\
    \ None for x in \"XL\"})\n    roman = roman.translate({ord(x): None for x in \"\
    XC\"})\n    roman = roman.translate({ord(x): None for x in \"CD\"})\n    roman\
    \ = roman.translate({ord(x): None for x in \"CM\"})\n    roman = roman.translate({ord(x):\
    \ None for x in \"M\"})\n    roman = roman.translate({ord(x): None for x in \"\
    D\"})\n    roman = roman.translate({ord(x): None for x in \"CM\"})\n    roman\
    \ = roman.translate({ord(x): None for x in \"M\"})\n    roman = roman.translate({ord(x):\
    \ None for x in \"D\"})\n    roman = roman.translate({ord(x): None for x in \"\
    CM\"})\n    roman = roman.translate({ord(x): None for x in \"M\"})\n    roman\
    \ = roman.translate({ord(x): None for x in \"D\"})\n    roman = roman.translate({ord(x):\
    \ None for x in \"CM\"})\n    roman = roman.translate({ord(x): None for x in \"\
    M\"})\n    roman = roman.translate({ord(x): None for x in \"D\"})\n    roman =\
    \ roman.translate({ord(x): None for x in \"CM\"})\n    roman = roman.translate({ord(x):\
    \ None for x in \"M\"})\n    roman = roman.translate({ord(x): None for x in \"\
    D\"})\n    roman = roman.translate({ord(x): None for x in \"CM\"})\n    roman\
    \ = roman.translate({ord(x): None for x in \"M\"})\n    roman = roman.translate({ord(x):\
    \ None for x in \"D\"})\n    roman = roman.translate({ord(x): None for x in \"\
    CM\"})\n    roman = roman.translate({ord(x): None for x in \"M\"})\n    roman\
    \ = roman.translate({ord(x): None for x in \"D\"})\n    roman = roman.translate({ord(x):\
    \ None for x in \"CM\"})\n    roman = roman", "    roman = roman_numerals(number)\n\
    \    roman = roman.lower()\n    return roman\n\n", "    roman = roman_numeral_to_roman(number)\n\
    \    return roman.lower()\n\n", "    roman = \"\"\n    numerals = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    while number > 0:\n        roman\
    \ += numerals[number % 10]\n        number //= 10\n    return roman.lower()\n\n",
  "    roman = ''\n    numerals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1]\n    while number > 0:\n        roman += numerals[number % 10]\n     \
    \   number //= 10\n    return roman.lower()\n\n", "    roman_numerals = {\n  \
    \      1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n\
    \        100: \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    if\
    \ number < 1:\n        raise ValueError(\"Invalid input\")\n    if number < 5:\n\
    \        return roman_numerals[number]\n    if number < 10:\n        return roman_numerals[number]\n\
    \    if number < 50:\n        return roman_numerals[number]\n    if number < 100:\n\
    \        return roman_numerals[number]\n    if number < 500:\n        return roman_numerals[number]\n\
    \    if number < 1000:\n        return roman_numerals[number]\n    if number <\
    \ 5000:\n        return roman_numerals[number]\n    if number < 10000:\n     \
    \   return roman_numerals[number]\n    if number < 50000:\n        return roman_numerals[number]\n\
    \    if number < 100000:\n        return roman_numerals[number]\n    if number\
    \ < 500000:\n        return roman_numerals[number]\n    if number < 1000000:\n\
    \        return roman_numerals[number]\n    if number < 5000000:\n        return\
    \ roman_numerals[number]\n    if number < 10000000:\n        return roman_numerals[number]\n\
    \    if number < 50000000:\n        return roman_numerals[number]\n    if number\
    \ < 100000000:\n        return roman_numerals[number]\n    if number < 500000000:\n\
    \        return roman_numerals[number]\n    if number < 1000000000:\n        return\
    \ roman_numerals[number]\n    if number < 5000000000:\n        return roman_numerals[number]\n\
    \    if number < 10000000000:\n        return roman_numerals[number]\n    if number\
    \ < 50000000000:\n        return roman_numerals[number]\n    if number < 100000000000:\n\
    \        return roman_numerals[number]\n    if number < 500000000000:\n      \
    \  return roman_numerals[number]\n    if number < 1000000000000:\n        return\
    \ roman_numerals[number]\n    if number < 5000000000000:\n        return roman_numerals[number]\n\
    \    if number < 10000000000000:\n        return roman_numerals[number]\n    if\
    \ number < 50000000000000:\n        return roman_numerals[number]\n    if number\
    \ < 100000000000000:\n        return roman_numerals[number]\n    if number < 500000000000000:\n\
    \        return roman_numerals[number", "    roman = \"\"\n    roman_numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed = [\"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.append(\"\
    I\")\n    roman_numerals_reversed.append(\"V\")\n    roman_numerals_reversed.append(\"\
    IV\")\n    roman_numerals_reversed.append(\"I\")\n    roman_numerals_reversed.append(\"\
    V\")\n    roman_numerals_reversed.append(\"IV\")\n    roman_numerals_reversed.append(\"\
    I\")\n    roman_numerals_reversed.append(\"V\")\n    roman_numerals_reversed.append(\"\
    IV\")\n    roman_numerals_reversed.append(\"I\")\n    roman_numerals_reversed.append(\"\
    V\")\n    roman_numerals_reversed.append(\"IV\")\n    roman_numerals_reversed.append(\"\
    I\")\n    roman_numerals_reversed.append(\"V\")\n    roman_numerals_reversed.append(\"\
    IV\")\n    roman_numerals_reversed.append(\"I\")\n    roman_numerals_reversed.append(\"\
    V\")\n    roman_numerals_reversed.append(\"IV\")\n    roman_numerals_reversed.append(\"\
    I\")\n    roman_numerals_reversed.append(\"V\")\n    roman_numerals_reversed.append(\"\
    IV\")\n    roman_numerals_reversed.append(\"I\")\n    roman_numerals_reversed.append(\"\
    V\")\n    roman_numerals_reversed.append(\"IV\")\n    roman_numerals_reversed.append(\"\
    I\")\n    roman_numerals_reversed.append(\"V\")\n    roman_numerals_reversed.append(\"\
    IV\")\n    roman_numerals_reversed.append(\"I\")\n    roman_numerals_reversed.append(\"\
    V\")\n    roman_numerals_reversed.append(\"IV\")\n    roman_numerals_reversed.append(\"\
    I\")\n    roman_numerals_reversed.append(\"V\")\n    roman_numerals_reversed.append(\"\
    IV\")\n    roman_numerals_reversed.append(\"I\")\n    roman_numerals_reversed.append(\"\
    V\")\n    roman_numeral", "    roman = \"\"\n    numerals = [1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    while number > 0:\n        roman += numerals[number\
    \ % 10]\n        number //= 10\n    return roman.lower()\n\n", "    roman = roman_numerals(number)\n\
    \    return roman.lower()\n\n", "    roman = roman_numerals(number)\n    return\
    \ roman.lower()\n\n", "    roman_numerals = [\n        '',\n        'i',\n   \
    \     'ii',\n        'iii',\n        'iv',\n        'v',\n        'vi',\n    \
    \    'vii',\n        'viii',\n        'ix',\n        'x',\n        'xi',\n   \
    \     'xii',\n        'xiii',\n        'xiv',\n        'xv',\n        'xvi',\n\
    \        'xvii',\n        'xviii',\n        'xix',\n        'xx',\n        'xxi',\n\
    \        'xxii',\n        'xxiii',\n        'xxiv',\n        'xxv',\n        'xxvi',\n\
    \        'xxvii',\n        'xxviii',\n        'xxix',\n        'xxx',\n      \
    \  'xxxx',\n        'xxxxx',\n    ]\n    roman_numerals_reversed = [\n       \
    \ '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n\
    \        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'x',\n\
    \        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n        'xv',\n\
    \        'xvi',\n        'xvii',\n        'xviii',\n        'xix',\n        'xx',\n\
    \        'xxi',\n        'xxii',\n        'xxiii',\n        'xxiv',\n        'xxv',\n\
    \        'xxvi',\n        'xxvii',\n        'xxviii',\n        'xxix',\n     \
    \   'xxx',\n        'xxxx',\n        'xxxxx',\n    ]\n    roman_numerals_reversed\
    \ = [\n        '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n\
    \        'v',\n        'vi',\n        'vii',\n        'viii',\n        'ix',\n\
    \        'x',\n        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n\
    \        'xv',\n        'xvi',\n        'xvii',\n        'xviii',\n        'xix',\n\
    \        'xx',\n        'xxi',\n        'xxii',\n        'xxiii',\n        'xxiv',\n\
    \        'xxv',\n        'xxvi',\n        'xxvii',\n        'xxviii',\n      \
    \  'xxix',\n        'xxx',\n        'xxxx',\n        'xxxxx',\n    ]\n    roman_numerals_reversed\
    \ = [\n        '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n\
    \        'v',\n        'vi',\n        'vii',\n        '", "    roman = roman_to_int(number)\n\
    \    return int_to_mini_roman(roman)\n\n", "    roman = roman_numerals(number)\n\
    \    return roman[0].lower() + roman[1:]\n\n", "    roman_numerals = [\n     \
    \   '',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n\
    \        'vi',\n        'vii',\n        'viii',\n        'ix',\n        'x',\n\
    \        'xi',\n        'xii',\n        'xiii',\n        'xiv',\n        'xv',\n\
    \        'xvi',\n        'xvii',\n        'xviii',\n        'xix',\n        'xx',\n\
    \        'xxi',\n        'xxii',\n        'xxiii',\n        'xxiv',\n        'xxv',\n\
    \        'xxvi',\n        'xxvii',\n        'xxviii',\n        'xxix',\n     \
    \   'xxx',\n        'xxxx',\n        'xxxxx',\n    ]\n    if number < 1:\n   \
    \     raise ValueError(\"Invalid input: number must be positive.\")\n    if number\
    \ > 1000:\n        raise ValueError(\"Invalid input: number must be less than\
    \ 1000.\")\n    roman_numerals_reversed = list(reversed(roman_numerals))\n   \
    \ roman_numerals_reversed.insert(0, roman_numerals_reversed[0])\n    roman_numerals_reversed.insert(1,\
    \ roman_numerals_reversed[1])\n    roman_numerals_reversed.insert(2, roman_numerals_reversed[2])\n\
    \    roman_numerals_reversed.insert(3, roman_numerals_reversed[3])\n    roman_numerals_reversed.insert(4,\
    \ roman_numerals_reversed[4])\n    roman_numerals_reversed.insert(5, roman_numerals_reversed[5])\n\
    \    roman_numerals_reversed.insert(6, roman_numerals_reversed[6])\n    roman_numerals_reversed.insert(7,\
    \ roman_numerals_reversed[7])\n    roman_numerals_reversed.insert(8, roman_numerals_reversed[8])\n\
    \    roman_numerals_reversed.insert(9, roman_numerals_reversed[9])\n    roman_numerals_reversed.insert(10,\
    \ roman_numerals_reversed[10])\n    roman_numerals_reversed.insert(11, roman_numerals_reversed[11])\n\
    \    roman_numerals_reversed.insert(12, roman_numerals_reversed[12])\n    roman_numerals_reversed.insert(13,\
    \ roman_numerals_reversed[13])\n    roman_numerals_reversed.insert(14, roman_numerals_reversed[14])\n\
    \    roman_numerals_reversed.insert(15, roman_numerals_reversed[15", "    roman\
    \ = roman_to_int(number)\n    return int_to_mini_roman(roman)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
