name: HumanEval_0_has_close_elements
language: py
prompt: "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold:\
  \ float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers\
  \ closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0,\
  \ 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
  \ 2.0], 0.3)\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
  \ 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n\
  \    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0,\
  \ 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)\
  \ == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\ndef\
  \ test_check():\n    check(has_close_elements)\n\ntest_check()\n"
completions: ["    numbers_set = set(numbers)\n    for number in numbers:\n      \
    \  if number in numbers_set:\n            numbers_set.remove(number)\n       \
    \ else:\n            return False\n    return True\n", "    \n    numbers_set\
    \ = set(numbers)\n    \n    if len(numbers_set) < 2:\n        return False\n \
    \   \n    diffs = [abs(x - y) for x, y in zip(numbers[:-1], numbers[1:])]\n  \
    \  \n    return any([diff <= threshold for diff in diffs])\n", "    \n    numbers_set\
    \ = set(numbers)\n    \n    if len(numbers_set) < 2:\n        return False\n \
    \   \n    sorted_numbers = sorted(numbers)\n    \n    previous_value = sorted_numbers[0]\n\
    \    \n    for number in sorted_numbers[1:]:\n        if abs(number - previous_value)\
    \ < threshold:\n            return True\n        \n        previous_value = number\n\
    \    \n    return False\n", "    numbers = sorted(numbers)\n    threshold = float(threshold)\n\
    \    \n    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i + 1] -\
    \ numbers[i] < threshold:\n            return False\n        i += 1\n    return\
    \ True\n", "    \n    distances = [abs(x - y) for x, y in zip(numbers[:-1], numbers[1:])]\n\
    \    \n    return any(d <= threshold for d in distances)\n", "    numbers_set\
    \ = set(numbers)\n    for num in numbers:\n        if num in numbers_set:\n  \
    \          numbers_set.remove(num)\n        else:\n            return False\n\
    \    return True\n", "    numbers = sorted(numbers)\n    i = 0\n    while i <\
    \ len(numbers) - 1:\n        if numbers[i + 1] - numbers[i] < threshold:\n   \
    \         return True\n        i += 1\n    return False\n", "    length = len(numbers)\n\
    \    if length < 2:\n        return False\n    \n    i = 0\n    while i < length\
    \ - 1:\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n           \
    \ return True\n        i += 1\n    return False\n", "    numbers.sort()\n    i\
    \ = 0\n    while i < len(numbers) - 1:\n        if numbers[i + 1] - numbers[i]\
    \ < threshold:\n            return True\n        i += 1\n    return False\n",
  "    numbers = sorted(numbers)\n    i = 0\n    while i < len(numbers) - 1:\n   \
    \     if numbers[i + 1] - numbers[i] < threshold:\n            return True\n \
    \       i += 1\n    return False\n", "    numbers_set = set(numbers)\n    for\
    \ n in numbers:\n        if n in numbers_set:\n            numbers_set.remove(n)\n\
    \        else:\n            return False\n    return True\n", "    numbers_set\
    \ = set(numbers)\n    numbers_set.add(threshold)\n    return len(numbers_set)\
    \ == len(numbers)\n", "    numbers.sort()\n    threshold = threshold * -1\n  \
    \  return abs(numbers[0] - numbers[1]) < threshold\n", "    numbers_set = set(numbers)\n\
    \    for num in numbers:\n        if num in numbers_set:\n            numbers_set.remove(num)\n\
    \        else:\n            return False\n    return True\n", "    \n    numbers_set\
    \ = set(numbers)\n    \n    for number in numbers:\n        if number in numbers_set:\n\
    \            numbers_set.remove(number)\n        else:\n            return False\n\
    \    return True\n", "    numbers = sorted(numbers)\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > threshold:\n            return False\n        if numbers[i]\
    \ < threshold:\n            return True\n    return False\n", "    numbers_set\
    \ = set(numbers)\n    numbers_set.add(threshold)\n    return len(numbers_set)\
    \ == len(numbers)\n", "    numbers = sorted(numbers)\n    threshold = threshold\
    \ * 0.5\n    i = 0\n    while i < len(numbers) - 1:\n        j = i + 1\n     \
    \   while j < len(numbers):\n            if abs(numbers[i] - numbers[j]) < threshold:\n\
    \                return True\n            j += 1\n        i += 1\n    return False\n",
  "    numbers = sorted(numbers)\n    threshold = abs(threshold)\n    i = 0\n    while\
    \ i < len(numbers) - 1:\n        j = i + 1\n        while j < len(numbers):\n\
    \            if numbers[j] - numbers[i] < threshold:\n                return True\n\
    \            j += 1\n        i += 1\n    return False\n", "    \n    numbers =\
    \ sorted(numbers)\n    \n    i = 0\n    \n    while i < len(numbers) - 1:\n  \
    \      if numbers[i + 1] - numbers[i] < threshold:\n            return False\n\
    \        i += 1\n    \n    return True\n", "    numbers = sorted(numbers)\n  \
    \  threshold = float(threshold)\n    return abs(numbers[-1] - numbers[0]) < threshold\n",
  "    numbers_set = set(numbers)\n    return len(numbers_set) == 1 or min(numbers_set)\
    \ - max(numbers_set) < threshold\n", "    numbers_set = set(numbers)\n    numbers_set.add(threshold)\n\
    \    return len(numbers_set) == len(numbers)\n", "    numbers = sorted(numbers)\n\
    \    threshold = threshold * 1.0\n    return abs(numbers[-1] - numbers[0]) < threshold\n",
  "    numbers_sorted = sorted(numbers)\n    threshold = threshold * len(numbers)\n\
    \    return numbers_sorted[0] < numbers_sorted[-1] and \\\n           abs(numbers_sorted[0]\
    \ - numbers_sorted[-1]) < threshold\n", "    numbers_set = set(numbers)\n    for\
    \ n in numbers:\n        if n in numbers_set:\n            numbers_set.remove(n)\n\
    \            if len(numbers_set) == 0:\n                return True\n    return\
    \ False\n", "    \n    numbers = sorted(numbers)\n    \n    i = 0\n    j = i +\
    \ 1\n    \n    while j < len(numbers):\n        if abs(numbers[i] - numbers[j])\
    \ < threshold:\n            return True\n        \n        j += 1\n        \n\
    \    return False\n", "    numbers_set = set(numbers)\n    return len(numbers_set\
    \ - set(filter(lambda x: abs(x - threshold) < threshold, numbers_set))) > 0\n",
  "    numbers = sorted(numbers)\n    threshold = threshold * threshold\n    i = 0\n\
    \    while i < len(numbers) - 1:\n        j = i + 1\n        while j < len(numbers):\n\
    \            if abs(numbers[i] - numbers[j]) < threshold:\n                return\
    \ True\n            j += 1\n        i += 1\n    return False\n", "    \n    distances\
    \ = []\n    for number in numbers:\n        distances.append(abs(number - threshold))\n\
    \    return len(distances) == len(set(distances))\n", "    numbers_set = set(numbers)\n\
    \    for n in numbers:\n        if n in numbers_set:\n            numbers_set.remove(n)\n\
    \            if len(numbers_set) == 0:\n                return True\n    return\
    \ False\n", "    numbers = sorted(numbers)\n    threshold = threshold * 0.5\n\
    \    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i + 1] - numbers[i]\
    \ < threshold:\n            return True\n        i += 1\n    return False\n",
  "    \n    numbers_sorted = sorted(numbers)\n    \n    i = 0\n    \n    while i\
    \ < len(numbers_sorted) - 1:\n        \n        j = i + 1\n        \n        while\
    \ j < len(numbers_sorted):\n            \n            if numbers_sorted[j] - numbers_sorted[i]\
    \ < threshold:\n                \n                return True\n            \n\
    \            j += 1\n        \n        i += 1\n    \n    return False\n</cell>\n\
    <cell>", "    \n    numbers_set = set(numbers)\n    \n    if len(numbers_set)\
    \ == 1:\n        return True\n    \n    numbers_set.discard(threshold)\n    \n\
    \    if len(numbers_set) == 1:\n        return True\n    \n    numbers_set.discard(numbers[0])\n\
    \    \n    if len(numbers_set) == 1:\n        return True\n    \n    numbers_set.discard(numbers[-1])\n\
    \    \n    if len(numbers_set) == 1:\n        return True\n    \n    return False\n",
  "    \n    numbers_sorted = sorted(numbers)\n    \n    i = 0\n    \n    while i\
    \ < len(numbers_sorted) - 1:\n        \n        j = i + 1\n        \n        while\
    \ j < len(numbers_sorted):\n            \n            if numbers_sorted[j] - numbers_sorted[i]\
    \ < threshold:\n                \n                i += 1\n                \n \
    \           else:\n                \n                j += 1\n                \n\
    \        if j == len(numbers_sorted):\n            \n            return True\n\
    \            \n    return False\n    ", "    numbers_sorted = sorted(numbers)\n\
    \    threshold = threshold * threshold\n    return any(abs(a - b) < threshold\
    \ for a, b in zip(numbers_sorted, numbers_sorted[1:]))\n", "    numbers = sorted(numbers)\n\
    \    length = len(numbers)\n    if length < 2:\n        return False\n    \n \
    \   i = 0\n    while i < length - 1:\n        j = i + 1\n        while j < length:\n\
    \            if numbers[j] - numbers[i] < threshold:\n                return True\n\
    \            j += 1\n        i += 1\n    return False\n", "    numbers = sorted(numbers)\n\
    \    i = 0\n    while i < len(numbers) - 1:\n        j = i + 1\n        while\
    \ j < len(numbers):\n            if abs(numbers[i] - numbers[j]) < threshold:\n\
    \                return True\n            j += 1\n        i += 1\n    return False\n",
  "    numbers_set = set(numbers)\n    for n in numbers:\n        if n in numbers_set:\n\
    \            numbers_set.remove(n)\n        else:\n            return False\n\
    \    return True\n", "    length = len(numbers)\n    if length < 2:\n        return\
    \ False\n    \n    i = 0\n    while i < length - 1:\n        if numbers[i] > numbers[i\
    \ + 1]:\n            return False\n        i += 1\n    return True\n", "    \n\
    \    numbers = sorted(numbers)\n    \n    i = 0\n    while i < len(numbers) -\
    \ 1:\n        \n        j = i + 1\n        while j < len(numbers):\n         \
    \   \n            if abs(numbers[i] - numbers[j]) < threshold:\n             \
    \   return True\n            \n            j += 1\n        \n        i += 1\n\
    \    \n    return False\n", "    numbers = sorted(numbers)\n    i = 0\n    while\
    \ i < len(numbers) - 1:\n        if numbers[i + 1] - numbers[i] < threshold:\n\
    \            return False\n        i += 1\n    return True\n", "    numbers =\
    \ sorted(numbers)\n    length = len(numbers)\n    if length < 2:\n        return\
    \ False\n    \n    i = 0\n    while i < length - 1:\n        j = i + 1\n     \
    \   while j < length - 1:\n            if abs(numbers[i] - numbers[j]) < threshold:\n\
    \                return True\n            j += 1\n        i += 1\n    return False\n",
  "    numbers_set = set(numbers)\n    return any(abs(numbers[i] - numbers[j]) < threshold\
    \ for j in range(len(numbers)-1) for i in range(j))\n", "    numbers_sorted =\
    \ sorted(numbers)\n    threshold = threshold * threshold\n    return numbers_sorted[0]\
    \ < threshold and numbers_sorted[-1] < threshold\n", "    numbers = sorted(numbers)\n\
    \    i = 0\n    j = i + 1\n    while j < len(numbers):\n        if abs(numbers[i]\
    \ - numbers[j]) < threshold:\n            return True\n        elif numbers[i]\
    \ > numbers[j]:\n            j += 1\n        else:\n            i += 1\n    return\
    \ False\n", "    numbers_set = set(numbers)\n    for num in numbers:\n       \
    \ if num in numbers_set:\n            numbers_set.remove(num)\n        else:\n\
    \            return False\n    return True\n", "    \n    length = len(numbers)\n\
    \    if length < 2:\n        return False\n    \n    numbers.sort()\n    \n  \
    \  i = 0\n    j = length - 1\n    \n    while i < j:\n        if abs(numbers[i]\
    \ - numbers[j]) < threshold:\n            return True\n        elif numbers[i]\
    \ > numbers[j]:\n            i += 1\n        else:\n            j -= 1\n    return\
    \ False\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
