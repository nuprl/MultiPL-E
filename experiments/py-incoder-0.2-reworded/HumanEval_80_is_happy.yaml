name: HumanEval_80_is_happy
language: py
prompt: "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your\
  \ task is to check if the string is happy or not.\n    A string is happy if its\
  \ length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
  \    >>> is_happy(a)\n    False\n    >>> is_happy(aa)\n    False\n    >>> is_happy(abcd)\n\
  \    True\n    >>> is_happy(aabb)\n    False\n    >>> is_happy(adb)\n    True\n\
  \    >>> is_happy(xyy)\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a') == False\n    assert candidate('aa')\
  \ == False\n    assert candidate('abcd') == True\n    assert candidate('aabb') ==\
  \ False\n    assert candidate('adb') == True\n    assert candidate('xyy') == False\n\
  \    assert candidate('iopaxpoi') == True\n    assert candidate('iopaxioi') == False\n\
  \ndef test_check():\n    check(is_happy)\n\ntest_check()\n"
completions: ["    if len(s) >= 3:\n        for i in range(3, len(s)):\n         \
    \   if s[i] != s[i-1]:\n                return False\n    return True\n\n", " \
    \   return len(s) >= 3 and all(len(set(s[i:i + 3])) == 3 for i in range(len(s)\
    \ - 1))\n\n", "    if len(s) <= 3:\n        return True\n    seen = set()\n  \
    \  for letter in s:\n        if letter in seen:\n            return False\n  \
    \      seen.add(letter)\n    return True\n\n", "    return len(s) >= 3 and all(len(set(s[i:i\
    \ + 3])) == 3 for i in range(len(s) - 1))\n\n", "    if len(s) < 3:\n        return\
    \ False\n    seen = set()\n    for letter in s:\n        if letter in seen:\n\
    \            return False\n        seen.add(letter)\n    return True\n\n", " \
    \   if len(s) >= 3:\n        count = 0\n        for i in range(len(s) - 2):\n\
    \            if s[i] != s[i + 1]:\n                count += 1\n            else:\n\
    \                count += 1\n            if count > 2:\n                return\
    \ False\n    return True\n\n", "    if len(s) < 3:\n        return False\n   \
    \ seen = set()\n    for letter in s:\n        if letter in seen:\n           \
    \ return False\n        seen.add(letter)\n    return True\n\n", "    return len(s)\
    \ >= 3 and all(len(set(s[i:i + 3])) == 3 for i in range(len(s) - 1))\n\n", " \
    \   return len(s) >= 3 and all(c in s for c in s[-3:]) and len(set(s)) == len(s)\n\
    \n", "    if len(s) <= 3:\n        return True\n    seen = set()\n    for letter\
    \ in s:\n        if letter in seen:\n            return False\n        seen.add(letter)\n\
    \    return True\n\n", "    if len(s) <= 3:\n        return True\n    seen = set()\n\
    \    for letter in s:\n        if letter in seen:\n            return False\n\
    \        seen.add(letter)\n    return True\n\n", "    if len(s) < 3:\n       \
    \ return False\n    seen = set()\n    for letter in s:\n        if letter in seen:\n\
    \            return False\n        seen.add(letter)\n    return True\n\n", " \
    \   if len(s) >= 3:\n        for i in range(0, len(s) - 3):\n            if s[i]\
    \ != s[i + 1] != s[i + 2] != s[i + 3]:\n                return False\n       \
    \ return True\n    else:\n        return False\n\n", "    return len(s) >= 3 and\
    \ all(c in s for c in s[-3::3])\n\n", "    if len(s) <= 3:\n        return True\n\
    \    seen = set()\n    for letter in s:\n        if letter in seen:\n        \
    \    return False\n        seen.add(letter)\n    return True\n\n", "    if len(s)\
    \ <= 3:\n        return True\n    seen = set()\n    for letter in s:\n       \
    \ if letter in seen:\n            return False\n        seen.add(letter)\n   \
    \ return True\n\n", "    if len(s) <= 3:\n        return True\n    seen = set()\n\
    \    for c in s:\n        if c in seen:\n            return False\n        seen.add(c)\n\
    \    return True\n\n", "    return len(s) >= 3 and all(len(set(s[i:i + 3])) ==\
    \ 3 for i in range(len(s) - 1))\n\n", "    if len(s) <= 3:\n        return True\n\
    \    char_set = set()\n    for c in s:\n        if c not in char_set:\n      \
    \      char_set.add(c)\n            if len(char_set) == 3:\n                return\
    \ True\n    return False\n\n", "    if len(s) < 3:\n        return False\n   \
    \ seen = set()\n    for letter in s:\n        if letter in seen:\n           \
    \ return False\n        seen.add(letter)\n    return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
