language: py
name: HumanEval_14_all_prefixes
results:
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdr4kd32.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpcdr4kd32.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_len = 0\n    for c in string:\n        if c == '_':\n\
    \            prefixes.append(c)\n            prefix_len += 1\n        else:\n\
    \            prefix_len += 1\n            prefixes.append(c[:prefix_len])\n  \
    \  return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ug1dnqe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9ug1dnqe.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9ug1dnqe.py\", line\
    \ 21, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split('')]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp0e839vy0.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp0e839vy0.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split('')]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n        prefixes.append(string[:prefix_length])\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_6e2fba.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6_6e2fba.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6_6e2fba.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwxymnt22.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpwxymnt22.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split('')]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp0e839vy0.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp0e839vy0.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split('')]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split('')]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp0e839vy0.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp0e839vy0.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split('')]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwxymnt22.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpwxymnt22.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for s in string:\n        prefixes.append(s)\n\
    \        prefix_length += len(s)\n    return prefixes[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jwnk57i.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8jwnk57i.py\", line 21,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp8jwnk57i.py\", line\
    \ 17, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split('')]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp0e839vy0.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp0e839vy0.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp0e839vy0.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split('')]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_len = 0\n    for c in string:\n        if c.isalpha():\n\
    \            prefixes.append(c)\n            prefix_len += 1\n        else:\n\
    \            prefix_len -= 1\n            if prefix_len == 0:\n              \
    \  break\n    return prefixes\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n\
    \    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodli12ie.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpodli12ie.py\", line 26,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpodli12ie.py\", line\
    \ 22, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdr4kd32.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpcdr4kd32.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for c in string:\n        prefix_length\
    \ = prefix_length * 2\n        if prefix_length >= len(string):\n            prefixes.append(string[:prefix_length])\n\
    \            break\n        prefixes.append(string[:prefix_length])\n        prefix_length\
    \ = prefix_length - 1\n    return prefixes\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef\
    \ test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzju02xbl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzju02xbl.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpzju02xbl.py\", line\
    \ 21, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for c in string:\n        prefixes.append(string[:prefix_length])\n\
    \        prefix_length += 1\n    return prefixes\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd',\
    \ 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\
    \ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c.isalpha():\n\
    \            prefixes.append(c)\n            prefix_length += 1\n        else:\n\
    \            prefix_length -= 1\n            if prefix_length == 0:\n        \
    \        prefixes.append('')\n    return prefixes\n\ndef check(candidate):\n \
    \   assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2j8gg54.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk2j8gg54.py\", line 26,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpk2j8gg54.py\", line\
    \ 22, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ += len(c)\n            prefixes.append(c * prefix_length)\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmbj1gl7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzmbj1gl7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpzmbj1gl7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_len = 0\n    for c in string:\n        if c == '_':\n\
    \            prefix_len += 1\n        else:\n            prefix_len = 0\n    \
    \        prefixes.append(string[:prefix_len])\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxqrz39b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqxqrz39b.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpqxqrz39b.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.takewhile(lambda s: len(s) <= len(string), itertools.accumulate(string.split(),\
    \ lambda x, y: x + y)))\n\ndef check(candidate):\n    assert candidate('') ==\
    \ []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83ah_75g.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmp83ah_75g.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp83ah_75g.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmp83ah_75g.py\"\
    , line 8, in all_prefixes\n    return list(itertools.takewhile(lambda s: len(s)\
    \ <= len(string), itertools.accumulate(string.split(), lambda x, y: x + y)))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1\n        prefixes.append(string[:prefix_length])\n    return\
    \ prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c * prefix_length)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90k8qdt7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1\n        if prefix_length >= len(string):\n            prefixes.append(string[:prefix_length])\n\
    \            break\n        prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wgu09i5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9wgu09i5.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9wgu09i5.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdr4kd32.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpcdr4kd32.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(string[:prefix_length])\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp652hjcn5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp652hjcn5.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp652hjcn5.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c not\
    \ in prefixes:\n            prefixes.append(c)\n            prefix_length += 1\n\
    \        else:\n            prefix_length = max(prefix_length, len(prefixes[-1]))\n\
    \            prefixes[-1] += c\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2aut9ivr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2aut9ivr.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp2aut9ivr.py\", line\
    \ 21, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c not\
    \ in prefixes:\n            prefixes.append(c)\n            prefix_length += 1\n\
    \        else:\n            prefix_length = max(prefix_length, len(prefixes[-1]))\n\
    \            prefixes[-1] += c\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2aut9ivr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2aut9ivr.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp2aut9ivr.py\", line\
    \ 21, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c.isalpha():\n\
    \            prefix_length += 1\n        else:\n            prefix_length = 0\n\
    \        prefixes.append(string[:prefix_length])\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw4z9oayn.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpw4z9oayn.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpw4z9oayn.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx5dhwg91.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpr76bebwq.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpr76bebwq.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpr76bebwq.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659805192
