name: HumanEval_95_check_dict_case
language: py
prompt: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n\
  \    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_dict_case({\
  \ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_dict_case({\
  \ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_dict_case({\
  \ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({\
  \ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
  \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
  \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
  \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
  \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
  \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
  \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
  test_check()\n"
completions: ["    \n    if not dict:\n        return False\n    \n    for key in\
    \ dict:\n        if not isinstance(key, str):\n            return False\n    \
    \    \n        if key.lower() not in dict:\n            return False\n       \
    \ \n        if key.upper() not in dict:\n            return False\n        \n\
    \    return True\n", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    for k in dict:\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if not isinstance(dict,\
    \ dict):\n        return False\n    \n    for key, value in dict.items():\n  \
    \      if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n    return True\n", "   \
    \ if not dict:\n        return False\n    for k in dict.keys():\n        if not\
    \ isinstance(k, str):\n            return False\n    return True\n", "    if not\
    \ dict:\n        return False\n    for k in dict:\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    for k in dict.keys():\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    \n    for k in dict.keys():\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    for k in dict.keys():\n        if not isinstance(k, str):\n     \
    \       return False\n    return True\n", "    if not dict:\n        return False\n\
    \    for k in dict:\n        if not isinstance(k, str):\n            return False\n\
    \    return True\n", "    if not dict:\n        return False\n    \n    for k\
    \ in dict.keys():\n        if not isinstance(k, str):\n            return False\n\
    \    return True\n", "    if not isinstance(dict, dict):\n        return False\n\
    \    \n    for key, value in dict.items():\n        if not isinstance(key, str):\n\
    \            return False\n        if not isinstance(value, str):\n          \
    \  return False\n    return True\n", "    if not dict:\n        return False\n\
    \    for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    return True\n", "    if not dict:\n        return False\n    for\
    \ k in dict:\n        if not isinstance(k, str):\n            return False\n \
    \   return True\n", "    \n    if not dict:\n        return False\n    \n    for\
    \ k in dict.keys():\n        if not isinstance(k, str):\n            return False\n\
    \    \n    for k in dict.keys():\n        if k.isupper():\n            continue\n\
    \        else:\n            return False\n    \n    return True\n", "    if not\
    \ dict:\n        return False\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    for k in dict:\n        if not isinstance(k, str):\n \
    \           return False\n    return True\n", "    for k in dict.keys():\n   \
    \     if not isinstance(k, str):\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    for k in dict.keys():\n        if not\
    \ isinstance(k, str):\n            return False\n    return True\n", "    \n \
    \   if not dict:\n        return False\n    \n    for key, value in dict.items():\n\
    \        if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n    return True\n</cell>\n\
    <cell>\ncheck_dict_case({ 'a': 'apple', 'B': 'banana' })\n</cell>\n<cell>\ncheck_dict_case({\
    \ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n</cell>\n<cell>\ncheck_dict_case({\
    \ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n</cell>\n<cell>\ncheck_dict_case({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n</cell>\n<cell>\ncheck_dict_case({\
    \ 'STATE': 'NC', 'ZIP': '12345' })\n</cell>\n<text>\nExercise 2: Write a function\
    \ that takes a dictionary as an argument and returns a dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case.\n\n</text>\n\
    <cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
