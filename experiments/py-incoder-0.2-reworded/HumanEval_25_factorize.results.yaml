language: py
name: HumanEval_25_factorize
results:
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmxqlv3a.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpvmxqlv3a.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpvmxqlv3a.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n //= i\n\
    \        else:\n            factors.append(i)\n            factors.append(n //\
    \ i)\n            factors.append(i)\n            factors.append(n // i)\n    \
    \        factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factors.append(i)\n         \
    \   factors.append(n // i)\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factors.append(i)\n            factors.append(n // i)\n \
    \           factors.append(i)\n            factors.append(n // i)\n          \
    \  factors.append(i)\n            factors.append(n // i)\n            factors.append(i)\n\
    \            factors.append(n \ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8_1i37ty.py\", line 102\n    def check(candidate):\n \
    \   ^\nSyntaxError: invalid syntax\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    factorization = [i for\
    \ i in range(1, n) if n % i == 0]\n    \n    for f in factorization:\n       \
    \ factors.append(f)\n        \n    factors.sort()\n    \n    return factors\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnrl8cmhe.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnrl8cmhe.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnrl8cmhe.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for factor in range(2,\
    \ n+1):\n        if n % factor == 0:\n            factors.append(factor)\n   \
    \         factors.append(n // factor)\n    \n    factorization = [factors]\n \
    \   \n    return factorization\n\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93iql7uv.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp93iql7uv.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp93iql7uv.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    if n == 1:\n       \
    \ factors.append(n)\n        factorization.append(n)\n        return factorization\n\
    \    \n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n\
    \            factorization.append(i)\n            factorization.append(n // i)\n\
    \            \n    return factorization\n\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbj3r6k1.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptbj3r6k1.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmptbj3r6k1.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n        i += 1\n    factors.append(n)\n    factorization.extend(factors)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmper73dctf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmper73dctf.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmper73dctf.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    if n == 1:\n       \
    \ factors.append(1)\n        factors.append(1)\n        factors.append(1)\n  \
    \      factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factors.append(1)\n        factors.append(1)\n        factors.append(1)\n\
    \        factor\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert\
    \ candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57)\
    \ == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76defh2_.py\", line\
    \ 131, in <module>\n    test_check()\n  File \"/tmp/tmp76defh2_.py\", line 129,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp76defh2_.py\", line 119,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for factor in range(2,\
    \ n+1):\n        if n % factor == 0:\n            factors.append(factor)\n   \
    \         factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor//factor)\n            factors.append(factor)\n\
    \            factors.append(factor\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsbxvflvc.py\", line 100\n    factors.append(factor\n \
    \                 ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    \n    return factorization\n\ndef check(candidate):\n    assert candidate(2)\
    \ == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2,\
    \ 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3,\
    \ 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpulh5iezg.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpulh5iezg.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpulh5iezg.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        factors.append(i)\n        \n    for factor in factors:\n        factorization\
    \ = []\n        \n        for i in range(2, factor+1):\n            if factor\
    \ % i == 0:\n                factorization.append(i)\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factorization.append(factor)\n\
    \        factorization.sort()\n        factorization.reverse()\n        \n   \
    \     factorization.append(factor)\n        factorization.sort()\n        factorization.reverse()\n\
    \        \n        factorization.append(factor)\n        factorization.sort()\n\
    \        factorization.reverse()\n        \n        factor\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39blanw6.py\", line\
    \ 137, in <module>\n    test_check()\n  File \"/tmp/tmp39blanw6.py\", line 135,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp39blanw6.py\", line 125,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ //= factor\n        else:\n            factor += 1\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659748293
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        i += 1\n    if factors:\n        factors.append(n)\n        factorization.append(factors)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3pz6ork.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpe3pz6ork.py\", line 40,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpe3pz6ork.py\", line 30,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n = n // i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1d3bnuqx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp1d3bnuqx.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp1d3bnuqx.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for factor in range(2,\
    \ n+1):\n        if n % factor == 0:\n            factors.append(factor)\n   \
    \         factors.append(factor * factor)\n            factors.append(factor *\
    \ factor * factor)\n            factors.append(factor * factor * factor * factor)\n\
    \            factors.append(factor * factor * factor * factor * factor)\n    \
    \        factors.append(factor * factor * factor * factor * factor * factor)\n\
    \            factors.append(factor * factor * factor * factor * factor * factor\
    \ * factor)\n            factors.append(factor * factor * factor * factor * factor\
    \ * factor * factor * factor)\n            factors.append(factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor)\n            factors.append(factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor * factor)\n\
    \            factors.append(factor * factor * factor * factor * factor * factor\
    \ * factor * factor * factor * factor * factor)\n            factors.append(factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor * factor\
    \ * factor * factor)\n            factors.append(factor * factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor)\n \
    \           factors.append(factor * factor * factor * factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor * factor)\n          \
    \  factors.append(factor * factor * factor * factor * factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor)\n            factors.append(factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor * factor\
    \ * factor * factor * factor)\n            factors.append(factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor * factor\
    \ * factor)\n            factors.append(factor * factor * factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor)\n \
    \           factors.append(factor * factor * factor * factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor * factor)\n          \
    \  factors.append(factor * factor * factor * factor * factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor)\n            factors.append(factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor * factor\
    \ * factor * factor * factor)\n            factors.append(factor * factor * factor\
    \ * factor * factor * factor * factor * factor * factor * factor * factor * factor\
    \ * factor)\n            factors.append(factor * factor * factor * \ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0k36sk6r.py\", line 41\n    factors.append(factor * factor\
    \ * factor * \n                  ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            n //= i\n\
    \        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n\
    \        factors.append(1)\n    factorization.extend(factors)\n    return factorization\n\
    \ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyuenv9t0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyuenv9t0.py\", line 40,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpyuenv9t0.py\", line 30,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for factor in range(2,\
    \ n+1):\n        if n % factor == 0:\n            factors.append(factor)\n   \
    \         factors.append(n // factor)\n            factorization.append(factors)\n\
    \            factors = []\n    \n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi72klvk_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpi72klvk_.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpi72klvk_.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    i = 2\n    while i *\
    \ i <= n:\n        if n % i:\n            factors.append(i)\n            n //=\
    \ i\n        else:\n            factors.append(i)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \            factors.append(1)\n            factors.append(1)\n            factors.append(1)\n\
    \ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbldzflf.py\", line\
    \ 132, in <module>\n    test_check()\n  File \"/tmp/tmpnbldzflf.py\", line 130,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnbldzflf.py\", line 120,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo95mdpcx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpo95mdpcx.py\", line 36,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpo95mdpcx.py\", line 26,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        i += 1\n    if factors:\n        factors.append(n)\n        factorization.append(factors)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3pz6ork.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpe3pz6ork.py\", line 40,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpe3pz6ork.py\", line 30,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factor = 1\n    while factor <= n:\n       \
    \ if n % factor == 0:\n            factorization.append(factor)\n            n\
    \ = n // factor\n        else:\n            factor += 1\n    factorization.append(n)\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n        i += 1\n    factorization = [factors]\n    return factorization\n\
    \ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqay1o5ge.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqay1o5ge.py\", line 36,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpqay1o5ge.py\", line 26,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \    return factorization\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n\
    \    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19,\
    \ 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo95mdpcx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpo95mdpcx.py\", line 36,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpo95mdpcx.py\", line 26,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n            factorization.append(factors)\n            factors = []\n\
    \        else:\n            i += 1\n    if factors:\n        factors.append(n)\n\
    \        factorization.append(factors)\n    return factorization\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepd48_bp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpepd48_bp.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpepd48_bp.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for i in range(2, n+1):\n\
    \        if n % i == 0:\n            factors.append(i)\n            factors.append(n\
    \ // i)\n    \n    factorization = [x for x, y in zip(factors, factorization)\
    \ if y != 0]\n    \n    return factorization\n\ndef check(candidate):\n    assert\
    \ candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8)\
    \ == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4gix592d.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4gix592d.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp4gix592d.py\", line 27,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i\
    \ == 0:\n            n //= i\n            factors.append(i)\n        if n > 1:\n\
    \            factors.append(n)\n            n = i\n        i += 1\n    if n >\
    \ 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2nbgykb_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2nbgykb_.py\", line 39,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmp2nbgykb_.py\", line 32,\
    \ in check\n    assert candidate(57) == [3, 19]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            factorization.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    if n > 1:\n        factorization.append(n)\n    return\
    \ factorization\n\ndef check(candidate):\n    assert candidate(2) == [2]\n   \
    \ assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert\
    \ candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n   \
    \ assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577)\
    \ == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n\
    \    check(factorize)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnns7b393.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnns7b393.py\", line 37,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpnns7b393.py\", line 28,\
    \ in check\n    assert candidate(4) == [2, 2]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    factors = []\n    \n    for factor in range(2,\
    \ n+1):\n        if n % factor == 0:\n            factors.append(factor)\n   \
    \         factors.append(factor//factor)\n    \n    factorization = [factors]\n\
    \    \n    for factor in factors:\n        if factor not in factorization:\n \
    \           factorization.append(factor)\n    \n    return factorization\n\ndef\
    \ check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) ==\
    \ [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3,\
    \ 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpammy3eum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpammy3eum.py\", line 41,\
    \ in test_check\n    check(factorize)\n  File \"/tmp/tmpammy3eum.py\", line 31,\
    \ in check\n    assert candidate(2) == [2]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748288
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = []\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\
    def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
    \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) ==\
    \ [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n \
    \   assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\
    \"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n\
    \    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert\
    \ candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249)\
    \ == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n \
    \   assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2,\
    \ 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
