name: HumanEval_140_fix_spaces
language: py
prompt: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces('\
  \ Example')\n    'Example'\n    >>> fix_spaces(' Example 1')\n    'Example_1'\n\
  \    >>> fix_spaces(' Example 2')\n    '_Example_2'\n    >>> fix_spaces(' Example\
  \ 3')\n    '_Example-3'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
  \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
  \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
  \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
  \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
completions: ["    return re.sub(' +', '_', text)\n\n", "    \n    return re.sub('\
    \ +', ' ', text)\n\n", "    return re.sub(' +', '_', text)\n\n", "    return re.sub(r'\\\
    s+', '_', text)\n\n", "    return re.sub(' +', ' ', text)\n", "    return re.sub('\
    \ +', '_', text)\n\n", "    return re.sub(' +', ' ', text).strip()\n", "    return\
    \ re.sub('\\s+', '_', text)\n\n", "    return re.sub('\\s+', '_', text).strip('-')\n",
  "    return re.sub(' +', ' ', text)\n", "    return re.sub(r'\\s+', '_', text)\n",
  "    return re.sub(' +', ' ', text).strip()\n", "    return re.sub(' +', ' ', text).strip()\n\
    \n", "    \n    words = text.split()\n    \n    if len(words) == 1:\n        return\
    \ text\n    \n    words = [w for w in words if w != ' ']\n    \n    if len(words)\
    \ == 1:\n        return text\n    \n    words = [w.replace(' ', '_') for w in\
    \ words]\n    \n    if len(words) == 1:\n        return text\n    \n    words\
    \ = [w.replace(' ', '-') for w in words]\n    \n    return ' '.join(words)\n\n",
  "    return re.sub(' +', '_', text)\n\n", "    return re.sub(' +', '_', text)\n\n",
  "    return re.sub(' +', ' ', text).strip()\n\n", "    return re.sub(' +', ' ',\
    \ text).strip()\n", "    return re.sub('\\s+', '_', text)\n\n", "    \n    return\
    \ re.sub(' +', ' ', text)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
