name: HumanEval_61_correct_bracketing
language: py
prompt: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a\
  \ string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
  \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
  \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
  \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
  \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
  \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
  \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
  \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    stack = []\n    for char in brackets:\n        if char == '(':\n\
    \            stack.append(char)\n        elif char == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    stack = []\n    for char in brackets:\n\
    \        if char == '(':\n            stack.append(char)\n        elif char ==\
    \ ')':\n            if len(stack) == 0:\n                return False\n      \
    \      else:\n                stack.pop()\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for char in brackets:\n        if char == '(':\n         \
    \   stack.append(char)\n        elif char == ')':\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                stack.pop()\n\
    \        else:\n            return False\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for char in brackets:\n        if char == '(':\n         \
    \   stack.append(char)\n        elif char == ')':\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    stack = []\n    for char in brackets:\n\
    \        if char == '(':\n            stack.append(char)\n        elif char ==\
    \ ')':\n            if len(stack) == 0:\n                return False\n      \
    \      else:\n                stack.pop()\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n", "    stack = []\n    for\
    \ char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    stack = []\n    for char in brackets:\n        if char == '(':\n\
    \            stack.append(char)\n        elif char == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    stack = []\n    for char in brackets:\n\
    \        if char == '(':\n            stack.append(char)\n        elif char ==\
    \ ')':\n            if len(stack) == 0:\n                return False\n      \
    \      else:\n                stack.pop()\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    stack = []\n    for c in brackets:\n        if c == '(':\n \
    \           stack.append(c)\n        elif c == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \        else:\n            return False\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n", "    stack = []\n    for\
    \ char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    stack = []\n    for char in brackets:\n        if char == '(':\n\
    \            stack.append(char)\n        elif char == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \        else:\n            return False\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    stack = []\n    for char in brackets:\n        if char == '(':\n\
    \            stack.append(char)\n        elif char == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    stack = []\n    for char in brackets:\n\
    \        if char == '(':\n            stack.append(char)\n        elif char ==\
    \ ')':\n            if len(stack) == 0:\n                return False\n      \
    \      else:\n                stack.pop()\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for char in brackets:\n        if char == '(':\n         \
    \   stack.append(char)\n        elif char == ')':\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    stack = []\n    for char in brackets:\n\
    \        if char == '(':\n            stack.append(char)\n        elif char ==\
    \ ')':\n            if len(stack) == 0:\n                return False\n      \
    \      else:\n                stack.pop()\n    return len(stack) == 0\n\n", " \
    \   stack = []\n    for char in brackets:\n        if char == '(':\n         \
    \   stack.append(char)\n        elif char == ')':\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
