name: HumanEval_128_prod_signs
language: py
results:
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sign = 1\n\
    \    for x in arr:\n        prod *= x\n        sign *= -1 if x < 0 else 1\n  \
    \  return prod * sign\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yk3m56s.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yk3m56s.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7yk3m56s.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        sign *= x\n        prod *= sign\n    return prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcp1jjtt_.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcp1jjtt_.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcp1jjtt_.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    sign = 1\n    prod = 1\n    for x in arr:\n        sign *= x\n\
    \        prod *= sign\n    return prod\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ohfcara.py\"\
    , line 39, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ohfcara.py\"\
    , line 37, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ohfcara.py\"\
    , line 27, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    sign = 1\n    prod = 1\n    for x in arr:\n        sign *= x\n\
    \        prod *= sign\n    return prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9m8l7ltx.py\"\
    , line 38, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9m8l7ltx.py\"\
    , line 36, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9m8l7ltx.py\"\
    , line 26, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        if x < 0:\n            sign *= -1\n            prod\
    \ *= -1\n        elif x > 0:\n            sign *= 1\n            prod *= 1\n \
    \       else:\n            sign *= 0\n            prod *= 0\n    return sign *\
    \ prod * prod_signs(arr[1:])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0wrb3r9.py\"\
    , line 47, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0wrb3r9.py\"\
    , line 45, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0wrb3r9.py\"\
    , line 35, in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0wrb3r9.py\"\
    , line 32, in prod_signs\n    return sign * prod * prod_signs(arr[1:])\n  File\
    \ \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0wrb3r9.py\", line 32,\
    \ in prod_signs\n    return sign * prod * prod_signs(arr[1:])\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0wrb3r9.py\"\
    , line 32, in prod_signs\n    return sign * prod * prod_signs(arr[1:])\n  [Previous\
    \ line repeated 1 more time]\nTypeError: unsupported operand type(s) for *: 'int'\
    \ and 'NoneType'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        sign *= x\n        prod *= sign\n    return prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3o_bjtso.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3o_bjtso.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3o_bjtso.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sign = 1\n\
    \    for x in arr:\n        prod *= sign\n        if x < 0:\n            sign\
    \ = -1\n        else:\n            sign = 1\n    return prod * sum(abs(x) for\
    \ x in arr)\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphds4iq4j.py\"\
    , line 43, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphds4iq4j.py\"\
    , line 41, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphds4iq4j.py\"\
    , line 31, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sign = 1\n\
    \    for x in arr:\n        prod *= x\n        sign *= -1 if x < 0 else 1\n  \
    \  return prod * sign\n\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgkfn2kg.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgkfn2kg.py\"\
    , line 39, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgkfn2kg.py\"\
    , line 29, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    signs = [1 if x > 0 else\
    \ -1 for x in arr]\n    return sum(abs(x * y) for x, y in zip(arr, signs))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw72o2avd.py\"\
    , line 37, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw72o2avd.py\"\
    , line 35, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw72o2avd.py\"\
    , line 25, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        sign *= x\n        prod *= sign\n    return prod\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy76ycyn.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy76ycyn.py\"\
    , line 39, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy76ycyn.py\"\
    , line 29, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n\n    signs = [1 if x > 0 else\
    \ -1 for x in arr]\n    prod = 1\n    for x in signs:\n        prod *= x\n   \
    \ return prod\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_0vsqpt.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_0vsqpt.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_0vsqpt.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for i in arr:\n        sign *= i\n        prod *= sign\n    return prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5v6p8rv.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5v6p8rv.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5v6p8rv.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    signs = [1 if x > 0 else -1 for x in arr]\n    return sum(abs(x\
    \ * sign) for x, sign in zip(arr, signs))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcp9zi4g.py\"\
    , line 34, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcp9zi4g.py\"\
    , line 32, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcp9zi4g.py\"\
    , line 22, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        sign *= x\n        prod *= sign\n    return prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacqkvwx9.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacqkvwx9.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacqkvwx9.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        sign *= x\n        prod *= sign\n    return prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhimstd8.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhimstd8.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhimstd8.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        if x < 0:\n            sign *= -1\n            prod\
    \ *= -1\n        elif x == 0:\n            prod *= 0\n        else:\n        \
    \    prod *= sign\n            sign *= -1\n    return prod * sign\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcikis3eh.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcikis3eh.py\"\
    , line 44, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcikis3eh.py\"\
    , line 34, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sign = 1\n\
    \    for x in arr:\n        if x < 0:\n            sign *= -1\n            prod\
    \ *= -1\n        elif x == 0:\n            sign *= 0\n            prod *= 0\n\
    \        else:\n            sign *= 1\n            prod *= x\n    return sign\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnexpj0cg.py\"\
    , line 48, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnexpj0cg.py\"\
    , line 46, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnexpj0cg.py\"\
    , line 36, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        if x < 0:\n            sign *= -1\n            prod\
    \ *= -1\n        elif x == 0:\n            sign *= 0\n            prod *= 0\n\
    \        else:\n            sign *= 1\n            prod *= x\n    return sign\
    \ * prod\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8micz17.py\"\
    , line 47, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8micz17.py\"\
    , line 45, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8micz17.py\"\
    , line 35, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        sign *= x\n        prod *= sign\n    return prod\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ia4jsdx.py\"\
    , line 41, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ia4jsdx.py\"\
    , line 39, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ia4jsdx.py\"\
    , line 29, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n\
    \    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n\
    \    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sign = 1\n\
    \    for x in arr:\n        prod *= x\n        sign *= 1 if x > 0 else -1 if x\
    \ < 0 else 0\n    return sign * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47_2zao6.py\"\
    , line 40, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47_2zao6.py\"\
    , line 38, in test_check\n    check(prod_signs)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47_2zao6.py\"\
    , line 28, in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
