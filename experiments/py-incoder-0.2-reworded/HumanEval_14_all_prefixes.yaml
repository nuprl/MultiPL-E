name: HumanEval_14_all_prefixes
language: py
prompt: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
  \    \"\"\" Return list of all prefixes from shortest to longest of the input string\n\
  \    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
  \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
  \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
completions: ["    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    return list(itertools.accumulate(string.split()))\n",
  "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    prefix_len = 0\n    for c in\
    \ string:\n        if c == '_':\n            prefixes.append(c)\n            prefix_len\
    \ += 1\n        else:\n            prefix_len += 1\n            prefixes.append(c[:prefix_len])\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n", "    return list(itertools.accumulate([len(s) for s in\
    \ string.split('')]))\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    prefix_length = 0\n    for c in string:\n        if c == '_':\n  \
    \          prefix_length += 1\n        else:\n            prefix_length = 0\n\
    \        prefixes.append(string[:prefix_length])\n    return prefixes\n", "  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for s in string:\n        prefixes.append(s)\n\
    \        prefixes.extend(all_prefixes(s))\n    return prefixes\n", "    prefixes\
    \ = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n", "    prefixes = []\n    for c in string:\n        prefixes.append(c)\n\
    \        prefixes.extend(all_prefixes(c))\n    return prefixes\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
