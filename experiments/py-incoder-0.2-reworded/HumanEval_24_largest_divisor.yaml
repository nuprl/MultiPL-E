name: HumanEval_24_largest_divisor
language: py
prompt: "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find\
  \ the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n\
  \    5\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7)\
  \ == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert\
  \ candidate(49) == 7\n\ndef test_check():\n    check(largest_divisor)\n\ntest_check()\n"
completions: ["    factors = []\n    for i in range(1, n + 1):\n        if n % i ==\
    \ 0:\n            factors.append(i)\n    return max(factors)\n\n", "    divisor\
    \ = 1\n    while n % divisor == 0:\n        divisor *= 2\n    return divisor\n\
    \n", "    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n\
    \            divisors.append(i)\n    return max(divisors)\n\n", "    i = 2\n \
    \   largest_divisor = 1\n    while i <= n:\n        if n % i == 0:\n         \
    \   largest_divisor = i\n        i += 1\n    return largest_divisor\n\n", "  \
    \  divisor = 1\n    while n % divisor == 0:\n        divisor += 1\n    return\
    \ divisor\n\n", "    divisor = 1\n    while n % divisor == 0:\n        divisor\
    \ *= 2\n    return divisor\n\n", "    divisor = 1\n    while n % divisor == 0:\n\
    \        divisor *= 2\n    return divisor\n\n", "    i = 2\n    factors = []\n\
    \    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n        else:\n            i += 1\n    if n > 1:\n     \
    \   factors.append(n)\n    return max(factors)\n\n", "    divisor = 1\n    while\
    \ n % divisor == 0:\n        divisor *= 2\n    return divisor\n\n", "    i = 2\n\
    \    while i * i <= n:\n        if n % i == 0:\n            return i\n       \
    \ i += 1\n    return n\n\n", "    divisor = 1\n    while n % divisor == 0:\n \
    \       divisor *= 2\n    return divisor\n\n", "    i = 2\n    while i * i <=\
    \ n:\n        if n % i == 0:\n            return i\n        i += 1\n    return\
    \ n\n\n", "    divisor = 1\n    while n % divisor == 0:\n        divisor *= 2\n\
    \    return divisor\n\n", "    divisor = 1\n    while n % divisor == 0:\n    \
    \    divisor *= 2\n    return divisor\n\n", "    i = 2\n    while i * i <= n:\n\
    \        if n % i == 0:\n            return i\n        i += 1\n    return n\n\n",
  "    divisor = 1\n    while n % divisor == 0:\n        divisor += 1\n    return\
    \ divisor\n\n", "    divisor = 1\n    while n % divisor == 0:\n        divisor\
    \ *= 2\n    return divisor\n\n", "    factors = []\n    i = 2\n    while i <=\
    \ n:\n        if n % i == 0:\n            factors.append(i)\n            n //=\
    \ i\n        else:\n            i += 1\n    return factors[-1]\n\n", "    divisor\
    \ = 1\n    while n % divisor == 0:\n        divisor += 1\n    return divisor\n\
    \n", "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return\
    \ i\n        i += 1\n    return n\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
