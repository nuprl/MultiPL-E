name: HumanEval_90_next_smallest
language: py
prompt: "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) ->\
  \ Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a\
  \ function next_smallest() that returns the 2nd smallest element of the list.\n\
  \    Return None if there is no such element.\n    >>> next_smallest([1, 2, 3, 4,\
  \ 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
  \    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert\
  \ candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert\
  \ candidate([1, 1]) == None\n    assert candidate([1, 1, 1, 1, 0]) == 1\n    assert\
  \ candidate([1, 1]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n\
  def test_check():\n    check(next_smallest)\n\ntest_check()\n"
completions: ["    smallest = lst[0]\n    smallest_index = -1\n    smallest_index\
    \ = 0\n    for index, value in enumerate(lst):\n        if value < smallest:\n\
    \            smallest = value\n            smallest_index = index\n    if smallest_index\
    \ != -1:\n        return lst[smallest_index + 1]\n    return None\n", "    smallest\
    \ = lst[0]\n    for x in lst[1:]:\n        if x < smallest:\n            smallest\
    \ = x\n    return smallest\n", "    smallest = lst[0]\n    smallest_index = 0\n\
    \    for index, value in enumerate(lst):\n        if value < smallest:\n     \
    \       smallest = value\n            smallest_index = index\n    if smallest_index\
    \ == 0:\n        return None\n    return lst[smallest_index + 1]\n", "    smallest\
    \ = lst[0]\n    smallest_index = -1\n    smallest_value = lst[0]\n    for index,\
    \ value in enumerate(lst):\n        if value < smallest_value:\n            smallest_value\
    \ = value\n            smallest_index = index\n    if smallest_index == -1:\n\
    \        return None\n    return lst[smallest_index + 1]\n", "    smallest = lst[0]\n\
    \    smallest_index = 0\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n\
    \            smallest = lst[i]\n            smallest_index = i\n    return lst[smallest_index\
    \ + 1]\n", "    smallest = lst[0]\n    for x in lst[1:]:\n        if x < smallest:\n\
    \            smallest = x\n    return smallest\n", "    smallest = lst[0]\n  \
    \  smallest_index = 0\n    smallest_value = lst[0]\n    for index, value in enumerate(lst):\n\
    \        if value < smallest_value:\n            smallest_index = index\n    \
    \        smallest_value = value\n    if smallest_index == len(lst) - 1:\n    \
    \    return None\n    return lst[smallest_index + 1]\n", "    smallest = lst[0]\n\
    \    smallest_index = 0\n    smallest_value = lst[0]\n    for index, value in\
    \ enumerate(lst):\n        if value < smallest_value:\n            smallest_index\
    \ = index\n            smallest_value = value\n    return smallest_value\n", " \
    \   smallest = lst[0]\n    smallest_index = -1\n    for i in range(len(lst)):\n\
    \        if lst[i] < smallest:\n            smallest = lst[i]\n            smallest_index\
    \ = i\n    return smallest_index\n", "    smallest = lst[0]\n    second_smallest\
    \ = lst[1]\n    for num in lst[2:]:\n        if num < smallest:\n            second_smallest\
    \ = smallest\n            smallest = num\n        elif num > second_smallest:\n\
    \            second_smallest = num\n    return second_smallest\n", "    smallest\
    \ = lst[0]\n    smallest_index = -1\n    smallest_index = 0\n    for index, value\
    \ in enumerate(lst):\n        if value < smallest:\n            smallest = value\n\
    \            smallest_index = index\n    if smallest_index == -1:\n        return\
    \ None\n    else:\n        return lst[smallest_index + 1]\n", "    smallest =\
    \ lst[0]\n    for x in lst[1:]:\n        if x < smallest:\n            smallest\
    \ = x\n    return smallest\n", "    smallest = lst[0]\n    smallest_index = 0\n\
    \    for index, value in enumerate(lst):\n        if value < smallest:\n     \
    \       smallest = value\n            smallest_index = index\n    return smallest\n",
  "    smallest = lst[0]\n    smallest_index = 0\n    for index, value in enumerate(lst):\n\
    \        if value < smallest:\n            smallest = value\n            smallest_index\
    \ = index\n    return lst[smallest_index + 1]\n", "    smallest = lst[0]\n   \
    \ for x in lst[1:]:\n        if x < smallest:\n            smallest = x\n    return\
    \ smallest\n", "    smallest = lst[0]\n    for num in lst[1:]:\n        if num\
    \ < smallest:\n            smallest = num\n    return smallest\n", "    smallest\
    \ = lst[0]\n    smallest_index = 0\n    for index, value in enumerate(lst):\n\
    \        if value < smallest:\n            smallest = value\n            smallest_index\
    \ = index\n    return lst[smallest_index + 1]\n", "    smallest = lst[0]\n   \
    \ smallest_index = 0\n    smallest_value = lst[0]\n    for index, value in enumerate(lst):\n\
    \        if value < smallest_value:\n            smallest_index = index\n    \
    \        smallest_value = value\n    if smallest_index != 0:\n        return lst[smallest_index\
    \ - 1]\n    else:\n        return None\n", "    lst = sorted(lst)\n    if len(lst)<2:\n\
    \        return None\n    return lst[1]\n", "    smallest = lst[0]\n    second_smallest\
    \ = lst[1]\n    for num in lst[2:]:\n        if num < smallest:\n            second_smallest\
    \ = smallest\n            smallest = num\n        elif num < second_smallest:\n\
    \            second_smallest = num\n    return second_smallest\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
