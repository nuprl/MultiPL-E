language: rs
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::with_capacity(l.len());\n\
    \    for elt in l {\n        if elt > 0 {\n            v.push(elt);\n        }\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.iter().all(|&x| x > 0) {\n        l\n\
    \    } else {\n        vec![]\n    }\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpnc6h3yct.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.filter(|x| x > 0).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp5pbv19mx.rs:7:7\n\
    \    |\n7   |       l.filter(|x| x > 0).cloned()\n    |         ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.is_empty() {\n        vec![]\n    } else\
    \ {\n        l.iter().filter(|&x| x >= 0).collect()\n    }\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8nllmws8.rs:10:35\n   |\n\
    10 |         l.iter().filter(|&x| x >= 0).collect()\n   |                    \
    \               ^\n   |                                   |\n   |            \
    \                       expected `&isize`, found integer\n   |               \
    \                    help: consider borrowing here: `&0`\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmp8nllmws8.rs:10:38\n     |\n10   |         l.iter().filter(|&x|\
    \ x >= 0).collect()\n     |                                      ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = l;\n    v.sort(|a, b| a > b);\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpxpe6yixk.rs:8:7\n    |\n8   |     v.sort(|a, b| a > b);\n    |\
    \       ^^^^ ------------ supplied 1 argument\n    |       |\n    |       expected\
    \ 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.filter(|x| x >= 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpsa2v761k.rs:7:7\n\
    \    |\n7   |       l.filter(|x| x >= 0).collect()\n    |         ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.len() > 0 {\n        l.iter().filter(|x|\
    \ x > 0).collect()\n    } else {\n        l.iter().cloned().collect()\n    }\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpduvuzjcm.rs:8:33\n  |\n8 |\
    \         l.iter().filter(|x| x > 0).collect()\n  |                          \
    \       ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpduvuzjcm.rs:8:36\n\
    \     |\n8    |         l.iter().filter(|x| x > 0).collect()\n     |         \
    \                           ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_l = l;\n    new_l.iter().filter(|x|\
    \ x > 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfrkydy5a.rs:8:33\n  |\n8 |\
    \     new_l.iter().filter(|x| x > 0).cloned().collect()\n  |                 \
    \                ^ expected `&&isize`, found integer\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&&x| x >= 0).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvuhx1oqw.rs:7:5\n  |\n6 |\
    \ fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                        \
    \           ---------- expected `Vec<isize>` because of return type\n7 |     l.iter().filter(|&&x|\
    \ x >= 0).collect::<Vec<_>>()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.is_empty() {\n        return l;\n    }\n\
    \    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    let mut neg_inclusive\
    \ = false;\n    let mut neg = 0;\n    for &x in &v {\n        if x == 0 {\n  \
    \          continue;\n        }\n        neg_inclusive = if neg_inclusive { true\
    \ } else { x < 0 };\n        neg += x;\n    }\n    if neg_inclusive {\n      \
    \  let mut i = 0;\n        for &x in &v {\n            if x == 0 {\n         \
    \       continue;\n            }\n            i += x;\n            if i >= neg\
    \ {\n                v.swap(i, i-1);\n                break;\n            }\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps1t6ad4r.rs:28:24\n   |\n\
    28 |                 v.swap(i, i-1);\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n28 |                 v.swap(i.try_into().unwrap(),\
    \ i-1);\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps1t6ad4r.rs:28:27\n   |\n28 |                 v.swap(i,\
    \ i-1);\n   |                           ^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n28 |                 v.swap(i, (i-1).try_into().unwrap());\n\
    \   |                           +   +++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|e| e > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4dpm2ylu.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|e| e > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp4dpm2ylu.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|e| e > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_vec = l.to_vec();\n    new_vec.iter().for_each(|x|\
    \ *x = *x if *x > 0);\n    new_vec\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmpdhk4npfj.rs:8:41\n  |\n8 |     new_vec.iter().for_each(|x|\
    \ *x = *x if *x > 0);\n  |                                         ^^ expected\
    \ one of 8 possible tokens\n\nerror: expected `;`, found `new_vec`\n --> /tmp/tmpdhk4npfj.rs:8:52\n\
    \  |\n8 |     new_vec.iter().for_each(|x| *x = *x if *x > 0);\n  |           \
    \                                         ^ help: add `;` here\n9 |     new_vec\n\
    \  |     ------- unexpected token\n\nerror: aborting due to 2 previous errors\n\
    \n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&i| i > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr1dqxjt3.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&i| i > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpr1dqxjt3.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&i| i > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp026b0hdg.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect::<Vec<_>>()\n  |                  \
    \             ^\n  |                               |\n  |                    \
    \           expected `&isize`, found integer\n  |                            \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp026b0hdg.rs:7:5\n  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                                   ---------- expected `Vec<isize>` because\
    \ of return type\n7 |     l.iter().filter(|&x| x >= 0).collect::<Vec<_>>()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n             found struct\
    \ `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&i| i > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr1dqxjt3.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&i| i > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpr1dqxjt3.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&i| i > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    l.iter().for_each(|e|\
    \ *e >= 0).for_each(|e| res.push(*e));\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmtfxpjaa.rs:8:27\n  |\n8 |\
    \     l.iter().for_each(|e| *e >= 0).for_each(|e| res.push(*e));\n  |        \
    \                   ^^^^^^^ expected `()`, found `bool`\n\nerror[E0599]: `()`\
    \ is not an iterator\n --> /tmp/tmpmtfxpjaa.rs:8:36\n  |\n8 |     l.iter().for_each(|e|\
    \ *e >= 0).for_each(|e| res.push(*e));\n  |                                  \
    \  ^^^^^^^^ `()` is not an iterator\n  |\n  = note: the following trait bounds\
    \ were not satisfied:\n          `(): Iterator`\n          which is required by\
    \ `&mut (): Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    for v in l {\n\
    \        if v > 0 {\n            result.push(v);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| *x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4h8xkf5k.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| *x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp4h8xkf5k.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| *x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph0sqo01h.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).cloned().collect()\n  |                    \
    \          ^\n  |                              |\n  |                        \
    \      expected `&isize`, found integer\n  |                              help:\
    \ consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut n = l.len();\n    while n > 0 {\n \
    \       l.swap(0, n);\n        n -= 1;\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpracoplhc.rs:9:9\n  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                 - help: consider changing this to be mutable: `mut l`\n\
    ...\n9 |         l.swap(0, n);\n  |         ^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.len() >= 0 {\n        l.iter().map(|x|\
    \ x + 1).collect()\n    } else {\n        l\n    }\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, -1, 5, 6, 7]`,\n right: `[4, 5, 6]`', /tmp/tmpf5emi0jv.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ans = vec![];\n    for e in l.iter().filter(|&x|\
    \ x >= 0) {\n        ans.push(e);\n    }\n    return ans;\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmperd3f5s1.rs:8:40\n  |\n8 |\
    \     for e in l.iter().filter(|&x| x >= 0) {\n  |                           \
    \             ^\n  |                                        |\n  |           \
    \                             expected `&isize`, found integer\n  |          \
    \                              help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmperd3f5s1.rs:11:12\n   |\n6  | fn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                   ----------\
    \ expected `Vec<isize>` because of return type\n...\n11 |     return ans;\n  \
    \ |            ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut m = l.len();\n    while m > 0 {\n \
    \       let a = l[m - 1];\n        if a < 0 {\n            l = l.drain(m - 1,\
    \ 1);\n        } else {\n            break;\n        }\n        m--;\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpcojy1sdd.rs:15:12\n\
    \   |\n15 |         m--;\n   |            ^ expected expression\n\nerror[E0061]:\
    \ this function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpcojy1sdd.rs:11:19\n\
    \     |\n11   |             l = l.drain(m - 1, 1);\n     |                   ^^^^^\
    \ -----  - supplied 2 arguments\n     |                   |\n     |          \
    \         expected 1 argument\n     |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcojy1sdd.rs:11:17\n   |\n6  |\
    \ fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |                    ----------\
    \ expected due to this parameter type\n...\n11 |             l = l.drain(m - 1,\
    \ 1);\n   |                 ^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `std::vec::Drain`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \     found struct `std::vec::Drain<'_, isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut r = vec![];\n    for &n in l {\n  \
    \      if n > 0 {\n            r.push(n);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpft7bo3zu.rs:8:9\n  |\n8 |\
    \     for &n in l {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> = l.iter().filter(|&x|\
    \ x > 0).collect();\n    ret.reverse();\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6xl2emg7.rs:7:56\n  |\n7 |\
    \     let mut ret: Vec<isize> = l.iter().filter(|&x| x > 0).collect();\n  |  \
    \                                                      ^\n  |                \
    \                                        |\n  |                              \
    \                          expected `&isize`, found integer\n  |             \
    \                                           help: consider borrowing here: `&0`\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp6xl2emg7.rs:7:59\n     |\n7\
    \    |     let mut ret: Vec<isize> = l.iter().filter(|&x| x > 0).collect();\n\
    \     |                                                           ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| *x >= 0).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy2k9x0nw.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >= 0).collect::<Vec<_>>()\n  |                  \
    \             ^\n  |                               |\n  |                    \
    \           expected `&isize`, found integer\n  |                            \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpy2k9x0nw.rs:7:5\n  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                                   ---------- expected `Vec<isize>` because\
    \ of return type\n7 |     l.iter().filter(|x| *x >= 0).collect::<Vec<_>>()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n             found struct\
    \ `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|v| v > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7j5_zv5w.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|v| v > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp7j5_zv5w.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|v| v > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in\
    \ l {\n        if i >= 0 {\n            result.push(i);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmp440jcbw1.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut positive = Vec::new();\n    positive.extend_from_slice(l.iter().filter(|&x|\
    \ x >= 0).collect::<Vec<_>>());\n    positive\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcqd6z5sq.rs:8:58\n  |\n8 |\
    \     positive.extend_from_slice(l.iter().filter(|&x| x >= 0).collect::<Vec<_>>());\n\
    \  |                                                          ^\n  |         \
    \                                                 |\n  |                     \
    \                                     expected `&isize`, found integer\n  |  \
    \                                                        help: consider borrowing\
    \ here: `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcqd6z5sq.rs:8:32\n\
    \  |\n8 |     positive.extend_from_slice(l.iter().filter(|&x| x >= 0).collect::<Vec<_>>());\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                |\n  |                                expected\
    \ `&[_]`, found struct `Vec`\n  |                                help: consider\
    \ borrowing here: `&l.iter().filter(|&x| x >= 0).collect::<Vec<_>>()`\n  |\n \
    \ = note: expected reference `&[_]`\n                found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpkog10xwg.rs:7:7\n\
    \    |\n7   |       l.filter(|&x| x > 0).collect()\n    |         ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&i| i > 0).cloned()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo4gd5n0h.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&i| i > 0).cloned()\n  |                              ^\n\
    \  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpo4gd5n0h.rs:7:5\n\
    \  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    7 |     l.iter().filter(|&i| i > 0).cloned()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpo4gd5n0h.rs:7:21: 7:31]>>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|e| e >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpewxzxzb3.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|e| e >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpewxzxzb3.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|e| e >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&n| n > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3grazew.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&n| n > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpc3grazew.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&n| n > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = l;\n    for (i, &v) in res.iter().enumerate()\
    \ {\n        if v < 0 {\n            res.swap(i, res.len());\n            break;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `res` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpmz34sm9d.rs:10:25\n   |\n10 |             res.swap(i,\
    \ res.len());\n   |             ------------^^^^^^^^^-\n   |             |   |\
    \       |\n   |             |   |       immutable borrow occurs here\n   |   \
    \          |   mutable borrow later used by call\n   |             mutable borrow\
    \ occurs here\n   |\nhelp: try adding a local storing this argument...\n  -->\
    \ /tmp/tmpmz34sm9d.rs:10:25\n   |\n10 |             res.swap(i, res.len());\n\
    \   |                         ^^^^^^^^^\nhelp: ...and then using that local as\
    \ the argument to this call\n  --> /tmp/tmpmz34sm9d.rs:10:13\n   |\n10 |     \
    \        res.swap(i, res.len());\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut positive = l.to_vec();\n    positive.sort();\n\
    \    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp6vrwl5hw.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut n = 0;\n    let mut res = Vec::new();\n\
    \    l.iter().for_each(|x| {\n        if x > 0\n            || (x == 0 && n <\
    \ 0)\n            || (x == 0 && n == 0)\n        {\n            if x >= 0 {\n\
    \                res.push(x);\n            }\n            n = x;\n        } else\
    \ {\n            res.push(x);\n        }\n    });\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvk6gvmb.rs:10:16\n   |\n\
    10 |         if x > 0\n   |                ^\n   |                |\n   |    \
    \            expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpgvk6gvmb.rs:11:19\n   |\n11 |             || (x == 0 && n < 0)\n\
    \   |                   ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  -->\
    \ /tmp/tmpgvk6gvmb.rs:12:19\n   |\n12 |             || (x == 0 && n == 0)\n  \
    \ |                   ^^ no implementation for `&isize == {integer}`\n   |\n \
    \  = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvk6gvmb.rs:14:21\n\
    \   |\n14 |             if x >= 0 {\n   |                     ^\n   |        \
    \             |\n   |                     expected `&isize`, found integer\n \
    \  |                     help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgvk6gvmb.rs:17:17\n   |\n7  |     let mut n\
    \ = 0;\n   |                 - expected due to this value\n...\n17 |         \
    \    n = x;\n   |                 ^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n17 |             n = *x;\n   |    \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvk6gvmb.rs:22:5\n\
    \   |\n6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.len() == 0 {\n        vec![]\n    } else\
    \ {\n        l.iter().filter(|&x| x > 0).collect()\n    }\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq5k11s1x.rs:10:34\n   |\n\
    10 |         l.iter().filter(|&x| x > 0).collect()\n   |                     \
    \             ^\n   |                                  |\n   |               \
    \                   expected `&isize`, found integer\n   |                   \
    \               help: consider borrowing here: `&0`\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpq5k11s1x.rs:10:37\n     |\n10   |         l.iter().filter(|&x|\
    \ x > 0).collect()\n     |                                     ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    new_list.push(0);\
    \ // Avoid negative numbers\n    let mut i = 0;\n    while i < l.len() {\n   \
    \     if l[i] > 0 {\n            new_list.push(l[i]);\n        }\n        i +=\
    \ 1;\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpwfxkn1ms.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut l = l.iter().map(|&x| x > 0).collect();\n    l.sort();\n \
    \   l\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp7sqs8f4i.rs:11:5\n\
    \   |\n10 |     let mut l = l.iter().map(|&x| x > 0).collect();\n   |        \
    \ ----- consider giving `l` a type\n11 |     l.sort();\n   |     ^ cannot infer\
    \ type\n   |\n   = note: type must be known at this point\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut out = Vec::with_capacity(l.len());\n\
    \    for i in l {\n        if i > 0 {\n            out.push(i);\n        }\n \
    \   }\n    out\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.iter().any(|&x| x < 0) {\n        l.iter().filter(|&x|\
    \ x >= 0).collect()\n    } else {\n        l\n    }\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp60c7gtla.rs:8:35\n  |\n8 |\
    \         l.iter().filter(|&x| x >= 0).collect()\n  |                        \
    \           ^\n  |                                   |\n  |                  \
    \                 expected `&isize`, found integer\n  |                      \
    \             help: consider borrowing here: `&0`\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmp60c7gtla.rs:8:38\n     |\n8    |         l.iter().filter(|&x|\
    \ x >= 0).collect()\n     |                                      ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut a = l;\n    a.sort();\n    a.iter().filter(|x|\
    \ x > 0).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnl1h4c2m.rs:9:29\n  |\n9 |\
    \     a.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpnl1h4c2m.rs:9:32\n\
    \     |\n9    |     a.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut x = l.iter().cloned().collect::<Vec<_>>();\n\
    \    x.sort_unstable();\n    x.iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp40pm7lhv.rs:9:30\n  |\n9 |\
    \     x.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp40pm7lhv.rs:9:33\n\
    \     |\n9    |     x.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut positive = Vec::new();\n    for x in\
    \ l {\n        if x > 0 {\n            positive.push(x);\n        }\n    }\n \
    \   positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.is_empty() {\n        return l;\n    }\n\
    \    let mut it = l.iter().filter(|&x| x > 0);\n    it.take_while(|&x| x < 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv41ww_o_.rs:10:43\n   |\n\
    10 |     let mut it = l.iter().filter(|&x| x > 0);\n   |                     \
    \                      ^\n   |                                           |\n \
    \  |                                           expected `&isize`, found integer\n\
    \   |                                           help: consider borrowing here:\
    \ `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv41ww_o_.rs:11:28\n  \
    \ |\n11 |     it.take_while(|&x| x < 0).collect()\n   |                      \
    \      ^\n   |                            |\n   |                            expected\
    \ `&isize`, found integer\n   |                            help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpv41ww_o_.rs:11:31\n\
    \     |\n11   |     it.take_while(|&x| x < 0).collect()\n     |              \
    \                 ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut n: isize = 0;\n    let mut i = 0;\n\
    \    let mut len = l.len();\n    while n < 1 && i < len {\n        n += l[i++];\n\
    \    }\n    l.split_at_mut(n - 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpjr74ljjf.rs:11:17\n\
    \   |\n11 |         n += l[i++];\n   |                 ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n11 |         n += l[{ let tmp\
    \ = i; i += 1; tmp }];\n   |                +++++++++++  ~~~~~~~~~~~~~~~\n11 -\
    \         n += l[i++];\n11 +         n += l[i += 1];\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjr74ljjf.rs:13:20\n   |\n13 |     l.split_at_mut(n - 1).collect()\n\
    \   |                    ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     l.split_at_mut((n - 1).try_into().unwrap()).collect()\n\
    \   |                    +     +++++++++++++++++++++\n\nerror[E0599]: `(&mut [isize],\
    \ &mut [isize])` is not an iterator\n  --> /tmp/tmpjr74ljjf.rs:13:27\n   |\n13\
    \ |     l.split_at_mut(n - 1).collect()\n   |                           ^^^^^^^\
    \ `(&mut [isize], &mut [isize])` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `(&mut [isize], &mut [isize]):\
    \ Iterator`\n           which is required by `&mut (&mut [isize], &mut [isize]):\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize>;\n    for i in l {\n\
    \        if i < 0 {\n            if v.is_empty() {\n                v = vec![i];\n\
    \            } else {\n                v.push(i);\n            }\n        }\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0381]: borrow of possibly-uninitialized variable: `v`\n  --> /tmp/tmpt2runp2_.rs:10:16\n\
    \   |\n10 |             if v.is_empty() {\n   |                ^^^^^^^^^^^^ use\
    \ of possibly-uninitialized `v`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0381`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    while i < l.len() {\n \
    \       if l[i] > 0 {\n            i += 1;\n        } else {\n            l.remove(i);\n\
    \        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpsc6mpnlk.rs:12:13\n   |\n6  | fn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n   |                 - help: consider changing this to be mutable:\
    \ `mut l`\n...\n12 |             l.remove(i);\n   |             ^^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut is_positive\
    \ = true;\n    for (i, &value) in l.iter().enumerate() {\n        if is_positive\
    \ {\n            result.push(value);\n        } else {\n            result.push(-value);\n\
    \        }\n        is_positive = (value < 0);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 4, -5, -6]`,\n right: `[4, 5, 6]`', /tmp/tmp9egt36l0.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut l = l.iter().filter(|x| x > 0).collect::<Vec<_>>();\n\
    \    l.sort();\n    l\n}\n\nfn main() {\n    let candidate = get_positive;\n \
    \   assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr5vu0y9b.rs:7:41\n  |\n7 |\
    \     let mut l = l.iter().filter(|x| x > 0).collect::<Vec<_>>();\n  |       \
    \                                  ^ expected `&&isize`, found integer\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpr5vu0y9b.rs:9:5\n  |\n6 | fn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                   ----------\
    \ expected `Vec<isize>` because of return type\n...\n9 |     l\n  |     ^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n     \
    \        found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    while i < l.len() {\n \
    \       if l[i] < 0 {\n            i += 1;\n        } else {\n            return\
    \ l.iter().cloned().collect();\n        }\n    }\n    l.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpmq6a47pw.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut l = l.iter().filter(|&x| x > 0).collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb2uwzbza.rs:7:42\n  |\n7 |\
    \     let mut l = l.iter().filter(|&x| x > 0).collect::<Vec<_>>();\n  |      \
    \                                    ^\n  |                                  \
    \        |\n  |                                          expected `&isize`, found\
    \ integer\n  |                                          help: consider borrowing\
    \ here: `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpb2uwzbza.rs:9:5\n\
    \  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n9 |     l\n  |     ^ expected `isize`, found `&isize`\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n             found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n    let mut i = 0;\n\
    \    while i < l.len() {\n        if l[i] > 0 {\n            v.push(l[i]);\n \
    \       }\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&v| v > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbmnw7165.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&v| v > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpbmnw7165.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&v| v > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.is_empty() {\n        return l;\n    }\n\
    \    let mut r = l.iter().cloned().collect();\n    for a in &mut r {\n       \
    \ if a > 0 {\n            *a = -a;\n        }\n    }\n    r\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpsmm_liop.rs:13:13\n\
    \   |\n11 |     for a in &mut r {\n   |              ------ the element type for\
    \ this iterator is not specified\n12 |         if a > 0 {\n13 |             *a\
    \ = -a;\n   |             ^^ cannot infer type\n   |\n   = note: type must be\
    \ known at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l == vec![] {\n        return vec![];\n\
    \    }\n\n    let mut positive = Vec::new();\n    let mut last = -1;\n    for\
    \ x in l {\n        if x <= 0 {\n            positive.push(last);\n          \
    \  positive.push(x);\n            last = x;\n        } else {\n            last\
    \ = x;\n        }\n    }\n\n    positive.push(last);\n\n    positive\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -1, -1, -2, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp5xd9gphh.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_vec = l.clone();\n    new_vec.iter_mut().for_each(|x|\
    \ if x < 0 { x = -x; } );\n    new_vec\n}\n\nfn main() {\n    let candidate =\
    \ get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5,\
    \ 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplwnon3jz.rs:8:44\n  |\n8 |\
    \     new_vec.iter_mut().for_each(|x| if x < 0 { x = -x; } );\n  |           \
    \                                 ^\n  |                                     \
    \       |\n  |                                            expected `&mut isize`,\
    \ found integer\n  |                                            help: consider\
    \ mutably borrowing here: `&mut 0`\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `&mut isize`\n --> /tmp/tmplwnon3jz.rs:8:52\n  |\n8 |     new_vec.iter_mut().for_each(|x|\
    \ if x < 0 { x = -x; } );\n  |                                               \
    \     ^^ cannot apply unary operator `-`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_list = vec![];\n    for &x in l\
    \ {\n        if x >= 0 {\n            new_list.push(x);\n        }\n    }\n  \
    \  new_list\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpodjf2oax.rs:8:9\n  |\n8 |\
    \     for &x in l {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut positive\
    \ = 0;\n    let mut negative = 0;\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < l.len() {\n        if l[i] < 0 {\n            negative += l[i] -\
    \ positive;\n        } else {\n            positive += l[i] - negative;\n    \
    \    }\n        result.push(l[i]);\n        i += 1;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp_4kttjrm.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut positives = vec![];\n    for i in l\
    \ {\n        if i > 0 {\n            positives.push(i);\n        }\n    }\n  \
    \  positives\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|&i| i > 0)\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp90fa9ccx.rs:8:26\n  |\n8 |\
    \         .filter(|&i| i > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmp90fa9ccx.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    if v.len()\
    \ == 0 || v[0] < 0 {\n        v\n    } else {\n        v\n    }\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp3f9mauwo.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| *x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx97sf4i5.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpx97sf4i5.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|x| *x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|&x| x > 0)\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpraphumy2.rs:8:26\n  |\n8 |\
    \         .filter(|&x| x > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpraphumy2.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    v.sort();\n    v.filter(|&x| x > 0);\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp75l5e59u.rs:9:7\n\
    \    |\n9   |       v.filter(|&x| x > 0);\n    |         ^^^^^^ `Vec<isize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = l;\n    v.iter_mut().for_each(|&x|\
    \ *x += 1);\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7ot3o13l.rs:8:28\n  |\n8 |\
    \     v.iter_mut().for_each(|&x| *x += 1);\n  |                            ^--\n\
    \  |                            ||\n  |                            |expected due\
    \ to this\n  |                            types differ in mutability\n  |    \
    \                        help: did you mean `x`: `&&mut isize`\n  |\n  = note:\
    \ expected mutable reference `&mut isize`\n                     found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    let mut pos =\
    \ 0;\n    let mut neg = 0;\n\n    for n in l {\n        if n >= 0 {\n        \
    \    pos += 1;\n        } else {\n            neg += 1;\n        }\n        result.push(n);\n\
    \    }\n    if pos > neg {\n        result\n    } else {\n        result\n   \
    \         .iter()\n            .filter(|&n| n < 0)\n            .collect::<Vec<_>>()\n\
    \    }\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxz6lbw30.rs:24:30\n   |\n\
    24 |             .filter(|&n| n < 0)\n   |                              ^\n  \
    \ |                              |\n   |                              expected\
    \ `&isize`, found integer\n   |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxz6lbw30.rs:22:9\n\
    \   |\n6  |   fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |           \
    \                          ---------- expected `Vec<isize>` because of return\
    \ type\n...\n22 | /         result\n23 | |             .iter()\n24 | |       \
    \      .filter(|&n| n < 0)\n25 | |             .collect::<Vec<_>>()\n   | |________________________________^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut r = l.clone();\n    for x in &r {\n\
    \        if x >= 0 {\n            continue;\n        }\n        r.push(*x);\n\
    \    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxgaxnn4_.rs:9:17\n  |\n9 |\
    \         if x >= 0 {\n  |                 ^\n  |                 |\n  |     \
    \            expected `&isize`, found integer\n  |                 help: consider\
    \ borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut neg = false;\n    l.iter().for_each(|&x|\
    \ {\n        if x == 0 {\n            if neg {\n                return false;\n\
    \            }\n            neg = true;\n        } else {\n            neg = false;\n\
    \        }\n    });\n    l\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6n6feoyt.rs:11:24\n   |\n\
    11 |                 return false;\n   |                        ^^^^^ expected\
    \ `()`, found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|v| v > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7j5_zv5w.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|v| v > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp7j5_zv5w.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|v| v > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&n| n > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3grazew.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&n| n > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpc3grazew.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&n| n > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = vec![0; l.len()];\n    v.iter_mut().for_each(|i|\
    \ if i < 0 { i += 1 });\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpclexo007.rs:8:38\n  |\n8 |\
    \     v.iter_mut().for_each(|i| if i < 0 { i += 1 });\n  |                   \
    \                   ^\n  |                                      |\n  |       \
    \                               expected `&mut _`, found integer\n  |        \
    \                              help: consider mutably borrowing here: `&mut 0`\n\
    \  |\n  = note: expected mutable reference `&mut _`\n                        \
    \  found type `{integer}`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&mut {integer}`\n --> /tmp/tmpclexo007.rs:8:42\n  |\n8 |\
    \     v.iter_mut().for_each(|i| if i < 0 { i += 1 });\n  |                   \
    \                       -^^^^^\n  |                                          |\n\
    \  |                                          cannot use `+=` on type `&mut {integer}`\n\
    \  |\nhelp: `+=` can be used on `{integer}`, you can dereference `i`\n  |\n8 |\
    \     v.iter_mut().for_each(|i| if i < 0 { *i += 1 });\n  |                  \
    \                        +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = l;\n    for (i, &val) in result.iter().enumerate()\
    \ {\n        if val < 0 {\n            result.swap_remove(i);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `result` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpu_dp2z0a.rs:10:13\n   |\n8  |     for (i, &val)\
    \ in result.iter().enumerate() {\n   |                      -------------------------\n\
    \   |                      |\n   |                      immutable borrow occurs\
    \ here\n   |                      immutable borrow later used here\n9  |     \
    \    if val < 0 {\n10 |             result.swap_remove(i);\n   |             ^^^^^^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n   \
    \ let len = l.len();\n    for i in 0..len {\n        if l[i] > 0 {\n         \
    \   ret.push(l[i]);\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut r = l.iter().filter(|&x| x >= 0);\n\
    \    if r.is_empty() {\n        r.clone()\n    } else {\n        r\n    }\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph3tw2_cn.rs:7:43\n  |\n7 |\
    \     let mut r = l.iter().filter(|&x| x >= 0);\n  |                         \
    \                  ^\n  |                                           |\n  |   \
    \                                        expected `&isize`, found integer\n  |\
    \                                           help: consider borrowing here: `&0`\n\
    \nerror[E0599]: no method named `is_empty` found for struct `Filter` in the current\
    \ scope\n --> /tmp/tmph3tw2_cn.rs:8:10\n  |\n8 |     if r.is_empty() {\n  |  \
    \        ^^^^^^^^ method not found in `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmph3tw2_cn.rs:7:33:\
    \ 7:44]>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmph3tw2_cn.rs:9:9\n  |\n\
    6 | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                      \
    \             ---------- expected `Vec<isize>` because of return type\n7 |   \
    \  let mut r = l.iter().filter(|&x| x >= 0);\n  |                            \
    \     ----------- the found closure\n8 |     if r.is_empty() {\n9 |         r.clone()\n\
    \  |         ^^^^^^^^^ expected struct `Vec`, found struct `Filter`\n  |\n  =\
    \ note: expected struct `Vec<isize>`\n             found struct `Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmph3tw2_cn.rs:7:33: 7:44]>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph3tw2_cn.rs:11:9\n   |\n6  | fn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                   ---------- expected\
    \ `Vec<isize>` because of return type\n7  |     let mut r = l.iter().filter(|&x|\
    \ x >= 0);\n   |                                 ----------- the found closure\n\
    ...\n11 |         r\n   |         ^ expected struct `Vec`, found struct `Filter`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmph3tw2_cn.rs:7:33: 7:44]>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x > 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyyk3p00l.rs:7:34\n  |\n7 |\
    \     l.into_iter().filter(|x| x > 0).collect()\n  |                         \
    \         ^\n  |                                  |\n  |                     \
    \             expected `&isize`, found integer\n  |                          \
    \        help: consider borrowing here: `&0`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.iter().any(|&x| *x <= 0) {\n        l.iter().filter(|&x|\
    \ *x > 0).cloned()\n    } else {\n        l\n    }\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpyocu9eec.rs:7:26\n\
    \  |\n7 |     if l.iter().any(|&x| *x <= 0) {\n  |                          ^^\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpyocu9eec.rs:8:9\n  |\n6 | fn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                   ----------\
    \ expected `Vec<isize>` because of return type\n7 |     if l.iter().any(|&x| *x\
    \ <= 0) {\n8 |         l.iter().filter(|&x| *x > 0).cloned()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpyocu9eec.rs:8:25: 8:36]>>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|&x| x > 0)\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpraphumy2.rs:8:26\n  |\n8 |\
    \         .filter(|&x| x > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpraphumy2.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| *x >  0).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8ifh12py.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >  0).collect::<Vec<_>>()\n  |                  \
    \             ^\n  |                               |\n  |                    \
    \           expected `&isize`, found integer\n  |                            \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp8ifh12py.rs:7:5\n  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                                   ---------- expected `Vec<isize>` because\
    \ of return type\n7 |     l.iter().filter(|x| *x >  0).collect::<Vec<_>>()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n             found struct\
    \ `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&v| v >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz5c0987e.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&v| v >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpz5c0987e.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&v| v >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut r = l.iter().cloned().collect::<Vec<_>>();\n    r.sort();\n\
    \    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpq6xpm_4m.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut positive: Vec<isize> = Vec::new();\n\
    \    positive.extend_from_slice(l);\n    for el in positive {\n        if el <\
    \ 0 {\n            positive.remove(el);\n        }\n    }\n    positive\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxl4mmdwt.rs:8:32\n  |\n8 |\
    \     positive.extend_from_slice(l);\n  |                                ^\n \
    \ |                                |\n  |                                expected\
    \ `&[isize]`, found struct `Vec`\n  |                                help: consider\
    \ borrowing here: `&l`\n  |\n  = note: expected reference `&[isize]`\n       \
    \         found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl4mmdwt.rs:11:29\n\
    \   |\n11 |             positive.remove(el);\n   |                           \
    \  ^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n11 |      \
    \       positive.remove(el.try_into().unwrap());\n   |                       \
    \        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = vec![0; l.len()];\n    for\
    \ i in l.iter().take(l.len() - 1) {\n        if l[i] > 0 {\n            result.push(*i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpb4mkxgqj.rs:9:12\n\
    \  |\n9 |         if l[i] > 0 {\n  |            ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::with_capacity(l.len());\n\
    \    for i in l {\n        if i > 0 {\n            res.push(i);\n        }\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|v| v > 0)\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp676mcca0.rs:8:25\n  |\n8 |\
    \         .filter(|v| v > 0)\n  |                         ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmp676mcca0.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| *x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4h8xkf5k.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| *x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp4h8xkf5k.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| *x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter_map(|x| if x > 0 { Some(x)\
    \ } else { None }).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvr2ea8js.rs:7:36\n  |\n7 |\
    \     l.iter().filter_map(|x| if x > 0 { Some(x) } else { None }).collect()\n\
    \  |                                    ^\n  |                               \
    \     |\n  |                                    expected `&isize`, found integer\n\
    \  |                                    help: consider borrowing here: `&0`\n\n\
    error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over\
    \ elements of type `&isize`\n    --> /tmp/tmpvr2ea8js.rs:7:65\n     |\n7    |\
    \     l.iter().filter_map(|x| if x > 0 { Some(x) } else { None }).collect()\n\
    \     |                                                                 ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    while i < l.len() {\n \
    \       if l[i] < 0 {\n            i += 1;\n        } else {\n            l.remove(i);\n\
    \        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp5ai0y6hs.rs:12:13\n   |\n6  | fn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n   |                 - help: consider changing this to be mutable:\
    \ `mut l`\n...\n12 |             l.remove(i);\n   |             ^^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|x| x > 0)\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuond5u50.rs:8:25\n  |\n8 |\
    \         .filter(|x| x > 0)\n  |                         ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmpuond5u50.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 0
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> = vec![];\n    for\
    \ i in l {\n        if i > 0 {\n            ret.push(i);\n        }\n    }\n \
    \   ret\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut r = l;\n    for &i in r {\n       \
    \ if i < 0 {\n            i = -i\n        }\n    }\n    r\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdp5vtycz.rs:8:9\n  |\n8 |\
    \     for &i in r {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter_map(|&x| if x > 0 { Some(x)\
    \ } else { None })\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvkqgzcpb.rs:7:5\n  |\n6 |\
    \ fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                        \
    \           ---------- expected `Vec<isize>` because of return type\n7 |     l.iter().filter_map(|&x|\
    \ if x > 0 { Some(x) } else { None })\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `FilterMap`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `FilterMap<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmpvkqgzcpb.rs:7:25: 7:64]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&i| i > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr1dqxjt3.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&i| i > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpr1dqxjt3.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&i| i > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut negs: Vec<isize> = Vec::new();\n  \
    \  let mut n: isize = 0;\n    let mut i = 0;\n    while i < l.len() {\n      \
    \  if l[i] < 0 {\n            negs.push(-l[i]);\n            i += 1;\n       \
    \ } else {\n            n = l[i];\n            i += 1;\n        }\n    }\n   \
    \ negs\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[4, 5, 6]`', /tmp/tmp4c0i38u8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.iter().any(|e| e < 0)\n        l.iter()\n\
    \            .filter(|e| e > 0)\n            .cloned()\n            .collect::<Vec<_>>()\n\
    \    } else {\n        l\n    }\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpsrffd2g9.rs:15:1\n\
    \   |\n12 |     } else {\n   |            - this opening brace...\n13 |      \
    \   l\n14 |     }\n   |     - ...matches this closing brace\n15 | }\n   | ^ unexpected\
    \ closing delimiter\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter_map(|i| i.is_positive()).collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwzk40czp.rs:7:29\n  |\n7 |\
    \     l.iter().filter_map(|i| i.is_positive()).collect()\n  |                \
    \             ^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n7 |     l.iter().filter_map(|i| Some(i.is_positive())).collect()\n\
    \  |                             +++++               +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = vec![];\n    for i\
    \ in l {\n        if i >= 0 {\n            v.push(i);\n        }\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpbgtcspp8.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    let mut positive = Vec::new();\n\
    \    for x in l {\n        if x >= 0 {\n            positive.push(x + i);\n  \
    \      } else {\n            positive.push(x);\n        }\n        i += 1;\n \
    \   }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n   \
    \ assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 6, 8, 10]`,\n right: `[4, 5, 6]`', /tmp/tmpg136ysh9.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.filter(|x| x >= 0)\n}\n\nfn main() {\n  \
    \  let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp8x8c00oc.rs:7:7\n\
    \    |\n7   |       l.filter(|x| x >= 0)\n    |         ^^^^^^ `Vec<isize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.into_iter().filter(|x| x >= 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg_gsxlmf.rs:7:35\n  |\n7 |\
    \     l.into_iter().filter(|x| x >= 0).collect()\n  |                        \
    \           ^\n  |                                   |\n  |                  \
    \                 expected `&isize`, found integer\n  |                      \
    \             help: consider borrowing here: `&0`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|e| e >= 0)\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk7ei2oqs.rs:8:26\n  |\n8 |\
    \         .filter(|e| e >= 0)\n  |                          ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmpk7ei2oqs.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&n| n > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3grazew.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&n| n > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpc3grazew.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&n| n > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut a = l.clone(); // shallow copy\n  \
    \  for (i, e) in a.iter().enumerate() {\n        if e < 0 {\n            a.remove(i);\n\
    \        }\n    }\n    a\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyjt0r85d.rs:9:16\n  |\n9 |\
    \         if e < 0 {\n  |                ^\n  |                |\n  |        \
    \        expected `&isize`, found integer\n  |                help: consider borrowing\
    \ here: `&0`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| *x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx97sf4i5.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpx97sf4i5.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|x| *x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut m = vec![];\n    m.reserve(l.len());\n\
    \    for (i, &v) in l.into_iter().enumerate() {\n        if v > 0 {\n        \
    \    m += [i];\n        }\n    }\n    m.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5xziz_oz.rs:9:13\n  |\n9 |\
    \     for (i, &v) in l.into_iter().enumerate() {\n  |             ^^     -------------------------\
    \ this expression has type `Option<(usize, isize)>`\n  |             |\n  |  \
    \           expected `isize`, found reference\n  |             help: you can probably\
    \ remove the explicit borrow: `v`\n  |\n  = note:   expected type `isize`\n  \
    \        found reference `&_`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<_>`\n  --> /tmp/tmp5xziz_oz.rs:11:13\n   |\n\
    11 |             m += [i];\n   |             -^^^^^^^\n   |             |\n  \
    \ |             cannot use `+=` on type `Vec<_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut positive = Vec::with_capacity(l.len());\n\
    \    for n in l.iter() {\n        if n > 0 {\n            positive.push(*n);\n\
    \        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmkt4b1ip.rs:9:16\n  |\n9 |\
    \         if n > 0 {\n  |                ^\n  |                |\n  |        \
    \        expected `&isize`, found integer\n  |                help: consider borrowing\
    \ here: `&0`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> = vec![0; l.len()];\n\
    \    for i in 0..l.len() {\n        if l[i] > 0 {\n            ret[i] = l[i];\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpkc7w97fr.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = l;\n    let mut is_positive\
    \ = true;\n    for v in result {\n        if v < 0 {\n            is_positive\
    \ = false;\n        } else {\n            result.iter_mut().filter(|&x| x > 0).collect::<Vec<_>>();\n\
    \        }\n    }\n    if is_positive {\n        result\n    } else {\n      \
    \  result.iter_mut().filter(|&x| x < 0).collect::<Vec<_>>();\n    }\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc2qrtsjm.rs:13:47\n   |\n\
    13 |             result.iter_mut().filter(|&x| x > 0).collect::<Vec<_>>();\n \
    \  |                                               ^\n   |                   \
    \                            |\n   |                                         \
    \      expected `&mut isize`, found integer\n   |                            \
    \                   help: consider mutably borrowing here: `&mut 0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc2qrtsjm.rs:19:43\n   |\n19 |         result.iter_mut().filter(|&x|\
    \ x < 0).collect::<Vec<_>>();\n   |                                          \
    \ ^\n   |                                           |\n   |                  \
    \                         expected `&mut isize`, found integer\n   |         \
    \                                  help: consider mutably borrowing here: `&mut\
    \ 0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc2qrtsjm.rs:18:12\n   |\n\
    18 |       } else {\n   |  ____________^\n19 | |         result.iter_mut().filter(|&x|\
    \ x < 0).collect::<Vec<_>>();\n20 | |     }\n   | |_____^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.filter(|x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpnysnnfq2.rs:7:7\n\
    \    |\n7   |       l.filter(|x| x > 0).collect()\n    |         ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&n| n > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3grazew.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&n| n > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpc3grazew.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&n| n > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_l = l;\n    new_l = l.iter().filter(|x|\
    \ x > 0).collect();\n    new_l\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4jn402qm.rs:8:37\n  |\n8 |\
    \     new_l = l.iter().filter(|x| x > 0).collect();\n  |                     \
    \                ^ expected `&&isize`, found integer\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmp4jn402qm.rs:8:40\n     |\n8    |     new_l = l.iter().filter(|x|\
    \ x > 0).collect();\n     |                                        ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> = l;\n    for (i, elem)\
    \ in ret.into_iter().enumerate() {\n        if elem < 0 {\n            ret.remove(i);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `ret`\n   --> /tmp/tmp3_m25w6b.rs:10:13\n\
    \    |\n7   |     let mut ret: Vec<isize> = l;\n    |         ------- move occurs\
    \ because `ret` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    8   |     for (i, elem) in ret.into_iter().enumerate() {\n    |              \
    \            ----------- `ret` moved due to this method call\n9   |         if\
    \ elem < 0 {\n10  |             ret.remove(i);\n    |             ^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `ret`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n    l.sort_unstable();\n  \
    \  let mut i = 0;\n    while i < l.len() && l[i] < 0 {\n        i += 1;\n    }\n\
    \    l.drain(..i)\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppmzltcal.rs:13:5\n   |\n\
    6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    13 |     l.drain(..i)\n   |     ^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `std::vec::Drain`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \     found struct `std::vec::Drain<'_, isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l == vec![] {\n        vec![]\n    } else\
    \ {\n        let mut res = vec![];\n        let mut positive = 0;\n        let\
    \ mut negative = 0;\n        for n in l {\n            if n >= 0 {\n         \
    \       res.push(positive);\n                positive += n;\n            } else\
    \ {\n                res.push(negative);\n                negative += n;\n   \
    \         }\n        }\n        res\n    }\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, -1, 0, 4, 9]`,\n right: `[4, 5, 6]`', /tmp/tmpmijzxsn1.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut r = vec![];\n    r.extend(l.iter().filter(|x|\
    \ *x >= 0));\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n   \
    \ assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu_7uwk7b.rs:8:40\n  |\n8 |\
    \     r.extend(l.iter().filter(|x| *x >= 0));\n  |                           \
    \             ^\n  |                                        |\n  |           \
    \                             expected `&isize`, found integer\n  |          \
    \                              help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_l = l;\n    new_l.iter().filter_map(|x|\n\
    \        if x > 0 {\n            Some(x)\n        } else {\n            None\n\
    \        }\n    ).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpydy6mim5.rs:9:16\n  |\n9 |\
    \         if x > 0 {\n  |                ^\n  |                |\n  |        \
    \        expected `&isize`, found integer\n  |                help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpydy6mim5.rs:14:7\n\
    \     |\n14   |     ).collect()\n     |       ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).cloned()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7sq9u21n.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).cloned()\n  |                             ^ expected\
    \ `&&isize`, found integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7sq9u21n.rs:7:5\n\
    \  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    7 |     l.iter().filter(|x| x > 0).cloned()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmp7sq9u21n.rs:7:21: 7:30]>>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp66tj25r1.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp66tj25r1.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|v| *v >= 0).collect()\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr11_9u7d.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|v| *v >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpr11_9u7d.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|v| *v >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut s = l.to_vec();\n    s.sort_unstable();\n\
    \    for x in s.iter().take(s.len() - 1) {\n        if x < 0 {\n            continue;\n\
    \        }\n        break;\n    }\n    s.iter().filter(|&x| x > 0) as Vec<_>\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe828l2ar.rs:10:16\n   |\n\
    10 |         if x < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe828l2ar.rs:15:30\n\
    \   |\n15 |     s.iter().filter(|&x| x > 0) as Vec<_>\n   |                  \
    \            ^\n   |                              |\n   |                    \
    \          expected `&isize`, found integer\n   |                            \
    \  help: consider borrowing here: `&0`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut new_l = l;\n    new_l.iter().for_each(|n|\
    \ {\n        if n > 0 {\n            return;\n        }\n    });\n    new_l\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdrlqhbbb.rs:9:16\n  |\n9 |\
    \         if n > 0 {\n  |                ^\n  |                |\n  |        \
    \        expected `&isize`, found integer\n  |                help: consider borrowing\
    \ here: `&0`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|&x| x > 0)\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpraphumy2.rs:8:26\n  |\n8 |\
    \         .filter(|&x| x > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpraphumy2.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|x| *x > 0)\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpacgpqxzk.rs:8:26\n  |\n8 |\
    \         .filter(|x| *x > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpacgpqxzk.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|v| v > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7j5_zv5w.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|v| v > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp7j5_zv5w.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|v| v > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.filter(|x| x >= 0)\n}\n\nfn main() {\n  \
    \  let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp8x8c00oc.rs:7:7\n\
    \    |\n7   |       l.filter(|x| x >= 0)\n    |         ^^^^^^ `Vec<isize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = l;\n    let len = v.len();\n  \
    \  v.sort();\n    let mut i = 0;\n    while i < len {\n        if v[i] < 0 {\n\
    \            v.remove(i);\n            i += 1;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpep__8ir4.rs:12:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter_map(|&x| if x >= 0 { Some(x)\
    \ } else { None })\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7a5kj5lp.rs:7:5\n  |\n6 |\
    \ fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                        \
    \           ---------- expected `Vec<isize>` because of return type\n7 |     l.iter().filter_map(|&x|\
    \ if x >= 0 { Some(x) } else { None })\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `FilterMap`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `FilterMap<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmp7a5kj5lp.rs:7:25: 7:65]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter()\n        .filter(|&x| x > 0)\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpraphumy2.rs:8:26\n  |\n8 |\
    \         .filter(|&x| x > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpraphumy2.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl1ykin6q.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpl1ykin6q.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = l.clone();\n    v.sort();\n   \
    \ v.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0lxgd3o5.rs:9:31\n  |\n9 |\
    \     v.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0lxgd3o5.rs:9:34\n\
    \     |\n9    |     v.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vwjr9q6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0vwjr9q6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 101
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.iter().filter(|&x| *x <= 0).count() >\
    \ 0 { l } else { Vec::new() }\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp070xb60z.rs:12:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.filter(|&x| x >= 0).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp5t3c40ox.rs:7:7\n\
    \    |\n7   |       l.filter(|&x| x >= 0).collect::<Vec<_>>()\n    |         ^^^^^^\
    \ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<isize>: Iterator`\n            which is\
    \ required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n \
    \           which is required by `&mut [isize]: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    if l.len() > 0 {\n        l.iter().filter_map(|i|\
    \ {\n            match i {\n                i if i > 0 => Some(i),\n         \
    \       _ => None,\n            }\n        }).collect()\n    } else {\n      \
    \  l\n    }\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9e52xkwi.rs:10:26\n   |\n\
    10 |                 i if i > 0 => Some(i),\n   |                          ^\n\
    \   |                          |\n   |                          expected `&isize`,\
    \ found integer\n   |                          help: consider borrowing here:\
    \ `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp9e52xkwi.rs:13:12\n     |\n\
    13   |         }).collect()\n     |            ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp45np5k2y.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp45np5k2y.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028193
- exit_code: 1
  program: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
    \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n    l.iter().filter(|&x| x > 0).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph0sqo01h.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).cloned().collect()\n  |                    \
    \          ^\n  |                              |\n  |                        \
    \      expected `&isize`, found integer\n  |                              help:\
    \ consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028193
