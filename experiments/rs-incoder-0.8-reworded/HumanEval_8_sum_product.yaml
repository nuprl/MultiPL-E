name: HumanEval_8_sum_product
language: rs
prompt: "/// For a given vector of integers, return a tuple consisting of a sum and\
  \ a product of all the integers in a vector.\n/// Empty sum should be equal to 0\
  \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
  \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
  \ Vec<isize>) -> (isize, isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
  \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
  \ (10, 10));\n}\n"
completions: ["    numbers.iter().cloned().zip(numbers.iter().cloned()).map(|(a, b)|\
    \ a + b).collect::<Vec<_>>()\n        .iter().cloned().zip(numbers.iter().cloned()).map(|(a,\
    \ b)| a * b).collect::<Vec<_>>()\n        .sum::<isize>() / numbers.iter().cloned().len()\n\
    \        .product::<isize>() / numbers.iter().cloned().len()", "    let mut sum\
    \ = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        (0, 1);\n    }\n\n    let mut sum = numbers[0];\n    let mut product\
    \ = 1;\n    for n in &numbers[1..] {\n        sum += n;\n        product *= n;\n\
    \    }\n    (sum, product)", "    if numbers.is_empty() {\n        (0, 1);\n \
    \   } else {\n        let mut sum = 0;\n        let mut product = 1;\n       \
    \ for n in numbers {\n            sum += n;\n            product *= n;\n     \
    \   }\n        (sum, product);\n    }", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n   \
    \ }\n    (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n    let mut result: isize = 0;\n    let mut product: isize = 1;\n    for\
    \ n in numbers {\n        result += n;\n        product *= n;\n    }\n    (result,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)", "    numbers.iter().cloned().zip(numbers.iter().cloned()).map(|&(a,\
    \ _)| {\n        let mut sum = 0;\n        let mut prod = 1;\n        for n in\
    \ numbers.iter() {\n            *sum += *n;\n            *prod *= *n;\n      \
    \  }\n        (sum, prod)\n    }).collect()", "    if numbers.is_empty() {\n \
    \       return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product = 1;\n\
    \    for number in numbers {\n        sum += number;\n        product *= number;\n\
    \    }\n    (sum, product)", "    if numbers.is_empty() {\n        (0, 1);\n \
    \   } else {\n        let mut product_sum = 0;\n        for number in numbers\
    \ {\n            product_sum += number;\n        }\n        (product_sum, product_sum\
    \ * numbers.len());\n    }", "    let mut sum = numbers[0];\n    let mut product\
    \ = numbers[0];\n    for (i, &e) in numbers.iter().enumerate() {\n        sum\
    \ += e;\n        product *= e;\n    }\n    (sum, product)", "    let mut sum_prod\
    \ = 0;\n    let mut num = 1;\n    for num in numbers {\n        sum_prod += num;\n\
    \    }\n    (sum_prod, num * sum_prod);", "    let mut product = 1;\n    let mut\
    \ sum = 0;\n\n    for n in numbers {\n        sum += n;\n        product *= n;\n\
    \    }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for number in numbers {\n        sum += number;\n        product *= number;\n\
    \    }\n    (sum, product)", "    let mut sum: isize = 0;\n    let mut product:\
    \ isize = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n\
    \    }\n    (sum, product)", "    numbers.iter().fold((0, 1), |(sum, product),\
    \ value| {\n        (sum + value, product * value)\n    })", "    let mut sum\
    \ = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for num in numbers {\n        sum += num;\n     \
    \   product *= num;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for num in numbers.iter() {\n        sum += num;\n   \
    \     product *= num;\n    }\n    (sum, product)", "    numbers.iter().cloned().enumerate().map(|(i,\
    \ el)| (el, i)).fold(\n        (vec!(0, 0), vec!(1, 1)),\n        |(sum, product),\
    \ el| {\n            (sum.iter_mut().sum::<isize>().unwrap() + el, product.iter_mut().product::<isize>().unwrap()\
    \ * el)\n        },\n    )", "    numbers.iter().fold(\n        (i, 1),\n    \
    \    |sum_, i| {\n            (sum_ * i, sum_ * i + i)\n        }\n    )", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers.iter() {\n        sum\
    \ += *n;\n        product *= *n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        (0, 0)\n    } else {\n        let mut sum = 0;\n        let mut product\
    \ = 1;\n        for num in numbers {\n            sum += num;\n            product\
    \ *= num;\n        }\n        (sum, product)\n    }", "    numbers.iter().cloned().fold((0,\
    \ 1), |(sum, product), n| {\n        (sum + n, product * n)\n    })", "    let\
    \ mut sum_ = 0, prod_ = 1;\n    for num in numbers {\n        sum_ += num;\n \
    \       prod_ *= num;\n    }\n    (sum_, prod_)", "    let mut sum_num = 0;\n\
    \    let mut prod_num = 1;\n\n    for n in numbers {\n        sum_num += n;\n\
    \        prod_num *= n;\n    }\n\n    (sum_num, prod_num)", "    let mut sum =\
    \ 0;\n    let mut prod = 1;\n    for n in numbers.iter() {\n        sum += n;\n\
    \        prod *= n;\n    }\n    (sum, prod)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for num in numbers {\n        sum += num;\n        product\
    \ *= num;\n    }\n    (sum, product)", "    if numbers.is_empty() {\n        return\
    \ (0, 1);\n    }\n\n    let mut sum = 0;\n    let mut prod = 1;\n    for i in\
    \ numbers {\n        sum += i;\n        prod *= i;\n    }\n\n    (sum, prod)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let mut sum: isize = 0;\n    let mut product: isize = 1;\n    for number in\
    \ numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum,\
    \ product)", "    numbers.iter().cloned().fold((0, 0), |(sum, product), number|\
    \ {\n        (sum + number, product * number)\n    })", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut running_sum = 0;\n    let mut\
    \ running_product = 1;\n    for n in numbers {\n        running_sum += n;\n  \
    \      running_product *= n;\n    }\n    (running_sum, running_product)", "  \
    \  if numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut running_sum\
    \ = 0;\n    let mut running_product = 1;\n\n    for i in numbers.iter() {\n  \
    \      running_sum += i;\n        running_product *= i;\n    }\n    (running_sum,\
    \ running_product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ &n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    numbers.iter().map(|n| {\n        if n == 0 {\n            (0..).sum().unwrap()\n\
    \        } else {\n            n * n\n        }\n    }).product().unwrap()", " \
    \   let mut sum_: isize = 0;\n    let mut prod_: isize = 1;\n    for &n in numbers\
    \ {\n        sum_ += n;\n        prod_ *= n;\n    }\n    (sum_, prod_)", "   \
    \ if numbers.is_empty() {\n        return (0, 0);\n    }\n\n    let mut sum =\
    \ 0;\n    let mut product = 1;\n\n    for number in numbers {\n        sum +=\
    \ number;\n        product *= number;\n    }\n\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (1, 1);\n    }\n\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n\n    for number in numbers {\n        sum += number;\n        product\
    \ *= number;\n    }\n\n    (sum, product)", '    numbers.iter().sum::<isize>()
    / numbers.iter().product::<isize>()', "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    if numbers.is_empty() {\n        (0, 1);\n    }\
    \ else {\n        let mut sum = 0;\n        let mut product = 1;\n        for\
    \ n in numbers {\n            sum += n;\n            product *= n;\n        }\n\
    \        (sum, product);\n    }", "    let mut product = isize::one();\n    let\
    \ mut sum = 0;\n    for n in numbers {\n        sum += n;\n        product *=\
    \ n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product =\
    \ 1;\n\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n\n    (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n    let mut res = 0;\n    let mut product = 1;\n    for number in numbers.iter()\
    \ {\n        res += number;\n        product *= number;\n    }\n    (res, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers.iter()\
    \ {\n        sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for num in numbers {\n    \
    \    sum += num;\n        product *= num;\n    }\n    (sum, product)", "    if\
    \ numbers.is_empty() {\n        (0isize, 1isize);\n    } else {\n        let mut\
    \ sum = 0isize;\n        let mut product = 1isize;\n\n        for num in numbers\
    \ {\n            sum += num;\n            product *= num;\n        }\n       \
    \ (sum, product)\n    }", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for (index, item) in numbers.iter().enumerate()\
    \ {\n        sum += item;\n        product *= item;\n    }\n    (sum, product)",
  "    let mut sum = numbers[0] as isize;\n    let mut product = 1;\n    for number\
    \ in numbers.iter() {\n        sum += number;\n        product *= number;\n  \
    \  }\n    (sum, product)", "    if numbers.is_empty() {\n        (0, 1);\n   \
    \ }\n    else {\n        let mut sum = 0;\n        let mut product = 1;\n    \
    \    for n in numbers {\n            sum += n;\n            product *= n;\n  \
    \      }\n        (sum, product)\n    }", "    let mut sum = vec![0; numbers.len()];\n\
    \    let mut product = vec![1; numbers.len()];\n    for i in numbers {\n     \
    \   sum[i] += 1;\n        product[i] *= i;\n    }\n    (sum.sum(), product.product())",
  "    if numbers.is_empty() {\n        (0,1)\n    } else {\n        let mut sum =\
    \ 0;\n        let mut product = 1;\n        for n in numbers {\n            sum\
    \ += n;\n            product *= n;\n        }\n        (sum, product)\n    }",
  "    if numbers.is_empty() {\n        return (0, 0);\n    }\n    let mut product_sum\
    \ = numbers.iter().product().sum();\n    let mut sum_numbers = numbers.iter().sum();\n\
    \    (sum_numbers, product_sum)", "    assert!(numbers != &[]);\n    numbers.iter().fold((0,\
    \ 0), |(sum, product), number| {\n        (sum + number, product * number)\n \
    \   })", "    let mut sum = 0;\n    let mut product = 1;\n\n    for n in numbers\
    \ {\n        sum = sum + n;\n        product = product * n;\n    }\n\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum: isize = 0;\n    let mut product: isize = 1;\n\n    for (i, &number)\
    \ in numbers.iter().enumerate() {\n        sum += number;\n        product *=\
    \ number;\n    }\n\n    (sum, product)", "    let mut sum = vec![0];\n    let\
    \ mut product = vec![1.];\n\n    for (i, element) in numbers.iter().enumerate()\
    \ {\n        sum.push(element + sum[i]);\n        product.push(element * product[i]);\n\
    \    }\n\n    (sum[0], product[0])", '    (numbers.iter().sum(), numbers.iter().product())',
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let mut sum_ = 0; let mut prod_ = 1;\n    for n in numbers {\n        sum_\
    \ += n;\n        prod_ *= n;\n    }\n    (sum_, prod_)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for &num in numbers {\n        sum += *num;\n \
    \       product *= *num;\n    }\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n\n    for n in numbers {\n        sum += *n;\n    \
    \    product *= *n;\n    }\n\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for x in numbers {\n        sum += x;\n        product *= x;\n   \
    \ }\n\n    (sum, product)", "    let mut result = vec![0, 1];\n    let mut product\
    \ = vec![1];\n    for n in numbers.iter() {\n        result.push(n);\n       \
    \ product = n * product;\n    }\n    (result.iter().sum(), product.iter().sum())",
  "    assert!(numbers.len() > 0);\n    if numbers.len() == 1 {\n        return (numbers[0],\
    \ numbers[0]);\n    }\n    if numbers.len() == 2 {\n        return numbers[0],\
    \ numbers[1];\n    }\n    if numbers.len() == 3 {\n        return numbers[0],\
    \ numbers[1] * numbers[2];\n    }\n    if numbers.len() == 4 {\n        return\
    \ numbers[0], numbers[1] * numbers[2] * numbers[3] * numbers[4];\n    }\n    let\
    \ mut first_product = 1;\n    for i in numbers {\n        first_product *= i;\n\
    \    }\n    let mut second_product = 1;\n    for i in numbers {\n        second_product\
    \ *= i;\n    }\n    return (first_product + second_product, first_product * second_product);",
  "    if numbers.is_empty() {\n        (0isize, 1isize)\n    } else if numbers.len()\
    \ == 1 {\n        (0, numbers.first())\n    } else {\n        (numbers.iter().map(|x|\
    \ x * x).sum(), numbers.iter().map(|x| x * x).product())\n    }", "    let mut\
    \ sum = numbers[0];\n    let mut prod = numbers[0];\n    for &n in numbers {\n\
    \        sum += n;\n        prod *= n;\n    }\n    (sum, prod)", "    numbers.iter().fold((0,\
    \ 1), |(sum, product), number| {\n        (sum + number, product * number)\n \
    \   })", "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers.iter()\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for num in numbers {\n   \
    \     sum += num;\n        product *= num;\n    }\n    (sum, product)", "    if\
    \ numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut sum = 0;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers.iter() {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)", "    numbers.iter().fold((0,\
    \ 1), |(sum, product), number| {\n        match number {\n            0 => (sum,\
    \ product),\n            _ => (sum + number, product * number),\n        }\n \
    \   })", "    if numbers.is_empty() {\n        return (0, 1);\n    }\n    let\
    \ mut product = numbers.iter().product();\n    let sum = numbers.iter().sum();\n\
    \    (sum, product)", "    assert!(numbers.len() > 0);\n    let mut sum = 0;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n\n    for num in numbers {\n        sum += num;\n        product\
    \ *= num;\n    }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers.iter() {\n        sum += n;\n        product *= n;\n\
    \    }\n    (sum, product)", "    let mut total = 0;\n    let mut product = 1;\n\
    \    for i in numbers {\n        total = total + i;\n        product = product\
    \ * i;\n    }\n    (total, product)", "    assert!(!numbers.is_empty());\n   \
    \ let mut total = 0;\n    let mut prod = 1;\n    for &i in numbers {\n       \
    \ total += i;\n        prod *= i;\n    }\n    (total, prod)", "    let mut sum_\
    \ = 0isize;\n    let mut product_ = 1isize;\n    for n in numbers {\n        sum_\
    \ += n;\n        product_ *= n;\n    }\n    (sum_, product_)", "    if numbers.is_empty()\
    \ {\n        (0, 1)\n    } else {\n        let mut sum: isize = 0;\n        let\
    \ mut product: isize = 1;\n        for i in numbers.iter() {\n            sum\
    \ += i;\n            product *= i;\n        }\n        (sum, product)\n    }",
  '    (numbers[..numbers.len()].sum(), numbers[..numbers.len()].product())', "  \
    \  if numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut product\
    \ = 1;\n    let mut sum = 0;\n    for i in numbers.iter() {\n        sum += i;\n\
    \        product *= i;\n    }\n    (sum, product)", "    assert!(numbers.len()\
    \ > 0);\n    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers.iter()\
    \ {\n        sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    if numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut sum: isize\
    \ = 0;\n    let mut product: isize = 1;\n    for i in numbers {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += *n;\n        product *= *n;\n \
    \   }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for &i in numbers {\n        sum += i;\n        product *= i;\n    }\n  \
    \  (sum, product)", "    numbers.iter().fold((0, 0), |(sum, product), i| {\n \
    \       (sum + i, product * i)\n    })", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for x in numbers {\n        sum += x;\n        product *= x;\n   \
    \ }\n    (sum, product)", "    assert!(numbers.size() > 0);\n    let mut result\
    \ = 0;\n    let mut product = 1;\n    for n in numbers {\n        result += n;\n\
    \        product *= n;\n    }\n    (result, product)", "    let mut sum = numbers[0];\n\
    \    let mut product = numbers[0];\n    for number in numbers {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for i in numbers.iter() {\n        sum\
    \ += i;\n        product *= i;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        (0, 1);\n    } else {\n        let mut product_of_all_numbers = 1;\n\
    \        let mut sum_of_all_numbers = 0;\n        for number in numbers {\n  \
    \          sum_of_all_numbers += number;\n            product_of_all_numbers =\
    \ number * product_of_all_numbers;\n        }\n        (sum_of_all_numbers, product_of_all_numbers);\n\
    \    }", '    (numbers[0], numbers.iter().map(|x| x * x).sum())', "    let mut\
    \ product = numbers[0];\n    let mut sum = numbers[0];\n\n    for i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n\n    (sum, product)", " \
    \   numbers\n        .iter()\n        .map(|number| {\n            if number >\
    \ 0 {\n                (number, number * number)\n            } else {\n     \
    \           (number, 1)\n            }\n        })\n        .sum::<(isize, isize)>()\n\
    \        .unwrap()", "    let mut sum: isize = 0;\n    let mut product: isize\
    \ = 1;\n\n    for n in numbers {\n        sum += n;\n        product *= n;\n \
    \   }\n\n    (sum, product)", "    if numbers.is_empty() {\n        (0,1)\n  \
    \  } else {\n        (numbers[0], numbers[0] * numbers[1] + numbers[1])\n    }",
  "    if numbers.is_empty() {\n        return (0, 1);\n    }\n\n    let mut sum =\
    \ 0;\n    let mut product = 1;\n\n    for i in numbers {\n        sum += i;\n\
    \        product *= i;\n    }\n\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for number in numbers {\n        sum += number;\n\
    \        product *= number;\n    }\n    (sum, product)", "    let mut total =\
    \ 0;\n    let mut prod = 1;\n    for i in numbers {\n        total = total + i;\n\
    \        prod = prod * i;\n    }\n    (total, prod)", "    let mut sum = 0;\n\
    \    let mut prod = 1;\n    for n in numbers {\n        sum += n;\n        prod\
    \ *= n;\n    }\n    (sum, prod)", "    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers.iter() {\n        sum = sum + n;\n        product =\
    \ product * n;\n    }\n    (sum, product)", "    if numbers.is_empty() {\n   \
    \     (0, 1);\n    }\n    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ x in numbers {\n        sum += x;\n        product *= x;\n    }\n    (sum, product)",
  "    let mut sum_product = (0, 1);\n    for n in numbers {\n        sum_product\
    \ += n;\n        sum_product *= n;\n    }\n    sum_product", "    let mut sum\
    \ = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for &n in numbers {\n        sum +=\
    \ n;\n        product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    numbers.iter().cloned().fold(\n\
    \        (vec!(0, 1), 1),\n        |(sum, product), num| match num {\n       \
    \     0 => (sum.clone(), product),\n            other => (sum.clone() + other,\
    \ product * other),\n        },\n    )", "    if numbers.is_empty() {\n      \
    \  return (0,1);\n    }\n    let mut sum = numbers[0];\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n \
    \   }\n\n    let mut sum = 0;\n    let mut product = 1;\n\n    for &x in &numbers\
    \ {\n        sum += x;\n        product *= x;\n    }\n\n    (sum, product)", " \
    \   if numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut total\
    \ = numbers[0];\n    let mut prod = 1;\n    for &num in &numbers[1:] {\n     \
    \   prod *= num;\n        total += num;\n    }\n    (total, prod)", "    numbers.iter().cloned().fold((0,\
    \ 1),\n                                  |(sum, product), n| {\n             \
    \                         let sum = sum + n;\n                               \
    \       let product = product * n;\n                                      (sum,\
    \ product)\n                                  })", "    let mut sum = 0;\n   \
    \ let mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers.iter() {\n        sum += number;\n        product\
    \ *= number;\n    }\n    (sum, product)", "    let mut product_sum = 1;\n    let\
    \ mut sum_ = 0;\n\n    for num in numbers {\n        sum_ += num;\n        product_sum\
    \ *= num;\n    }\n\n    (sum_, product_sum)", "    numbers.iter().fold((0, 0),\
    \ |(sum, prod)| {\n        (sum.1.checked_add(number), prod.checked_mul(number).unwrap())\n\
    \    }).1", "    let mut sum_ = 0 as isize;\n    let mut product_ = 1isize as\
    \ isize;\n    for number in numbers {\n        sum_ += number;\n        product_\
    \ *= number;\n    }\n    (sum_, product_)", "    let mut sum = numbers.iter().cloned().fold((0,\
    \ 0), |(a, b), &x| {\n        (b[0] + x, b[1] + x)\n    });\n    let product =\
    \ numbers.iter().cloned().fold((1, 0), |(a, b), &x| {\n        (b[0] * x, b[1]\
    \ * x)\n    });\n    (sum.0, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n\n    for n in numbers {\n        sum += n;\n        product *= n;\n \
    \   }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n   \
    \ (sum, product)", "    assert!(numbers != &[0]);\n    assert!(numbers != &[0,\
    \ 1]);\n    assert!(numbers != &[0, 1, 2]);\n    assert!(numbers != &[0, 1, 2]);\n\
    \    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers.iter() {\n\
    \        sum += i;\n        product *= i;\n    }\n    (sum, product)", "    numbers.iter()\n\
    \        .map(|x| x * x)\n        .sum()\n        .cloned()\n        .product()\n\
    \        .unwrap()", '    (numbers.iter().sum(), numbers.iter().product())', " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)", "    numbers.iter().fold((0,\
    \ 0), (sum, product)) => {\n        let mut sum2 = sum;\n        let mut product2\
    \ = product;\n        sum2 += &*numbers[..];\n        product2 *= &*numbers[..];\n\
    \        (sum2, product2)\n    };\n    (sum, product)", "    let mut sum: isize\
    \ = 0;\n    let mut product: isize = 1;\n    for number in numbers {\n       \
    \ sum += number;\n        product *= number;\n    }\n    (sum, product)", "  \
    \  if numbers.is_empty() {\n        return (0, 1);\n    }\n\n    let mut product\
    \ = numbers[0];\n    let mut sum = 0;\n\n    for n in numbers {\n        sum +=\
    \ n;\n        product *= n;\n    }\n\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        (0, 1);\n    }\n\n    let mut product = 1;\n\n    let mut sum = 0;\n\
    \n    for number in numbers {\n        sum += number;\n        product *= number;\n\
    \    }\n\n    (sum, product)", "    if numbers.is_empty() {\n        return (0,\
    \ 0);\n    }\n\n    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n\n    (sum, product)", " \
    \   numbers.iter().fold((0, 1), |(sum, prod)| {\n        (sum + prod, sum * prod)\n\
    \    })", "    numbers.iter().fold((0, 1), |(sum, prod), n| {\n        (sum +\
    \ n, prod * n)\n    })", "    let mut sum = 0;\n    let mut product = 1;\n   \
    \ for num in numbers.iter() {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)", "    if numbers.is_empty() {\n        (0, 1);\n \
    \   } else {\n        let mut sum = 0;\n        let mut product = 1;\n       \
    \ for &n in numbers {\n            sum += n;\n            product *= n;\n    \
    \    }\n        (sum, product);\n    }", "    numbers.iter().cloned().zip(numbers.iter().cloned().cloned()).cloned().fold(0,\
    \ |x, y| {\n        match x {\n            Some(y) => y + y,\n            None\
    \ => y,\n        }\n    }) * numbers.iter().cloned().cloned().fold(1, |x, y| x\
    \ * y)", "    if numbers.is_empty() {\n        return (0, 0);\n    }\n    let\
    \ mut sum = numbers.iter().sum::<isize>();\n    let mut prod = numbers.iter().product::<isize>();\n\
    \    (sum, prod)", "    let mut sum_product = (numbers[0], numbers[0]);\n    for\
    \ i in numbers[1..].iter() {\n        sum_product = sum_product\n            .checked_add(&i)\n\
    \            .expect(\"sum_product should have valid elements\");\n    }\n   \
    \ sum_product", "    let mut sum: isize = 0;\n    let mut product: isize = 1;\n\
    \n    for n in numbers {\n        sum = sum + n;\n        product = product *\
    \ n;\n    }\n\n    (sum, product)", "    let mut sum_product = vec![0, 1];\n \
    \   for number in numbers {\n        let mut prod = 1;\n        for _ in 0..number\
    \ {\n            prod *= number;\n        }\n        sum_product[0] += prod;\n\
    \        sum_product[1] += prod;\n    }\n    (sum_product[0], sum_product[1])",
  "    let mut sum: isize = 0;\n    let mut product: isize = 1;\n\n    for x in numbers\
    \ {\n        sum += x;\n        product *= x;\n    }\n\n    (sum, product)", " \
    \   let mut sum: isize = 0;\n    let mut product: isize = 1;\n\n    for number\
    \ in numbers {\n        sum += number;\n        product *= number;\n    }\n\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers.iter() {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    if numbers.is_empty() {\n        (0,1)\n    } else {\n\
    \        let mut sum_product = 0;\n        let mut sum = 0;\n        for num in\
    \ numbers {\n            sum += num;\n            sum_product += num * num;\n\
    \        }\n        (sum, sum_product)\n    }", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n\n    for x in numbers {\n        sum += x;\n        product\
    \ *= x;\n    }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n\n    for n in numbers.iter() {\n        sum += n;\n        product *=\
    \ n;\n    }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    if numbers.is_empty() {\n        return\
    \ (0, 1);\n    }\n\n    let mut sum = 0;\n    let mut product = 1;\n    for n\
    \ in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    let mut product = 1;\n    let mut sum = 0;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n      \
    \  sum += i;\n        product *= i;\n    }\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', "    if numbers.is_empty() {\n        return (1, 1);\n\
    \    }\n    let mut sum = numbers[0] as isize;\n    let mut prod = 1;\n    for\
    \ i in numbers.iter().rev() {\n        sum = sum + i;\n        prod *= i;\n  \
    \  }\n    (sum, prod)", "    if numbers.is_empty() {\n        (0, 1);\n    }\n\
    \n    let mut total_product = 1;\n    let mut total_sum = 0;\n    let mut iter\
    \ = numbers.iter().cloned();\n    let mut product = 1;\n    for n in iter {\n\
    \        total_product *= n;\n        total_sum += n;\n        product = total_product\
    \ / total_sum;\n    }\n    (total_sum, product)", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n\n    for number in numbers {\n        sum += number;\n        product\
    \ *= number;\n    }\n\n    (sum, product)", "    numbers.iter().fold((0, 1), |(sum,\
    \ product), i| {\n        (sum + i, product * i)\n    })", "    numbers\n    \
    \    .iter()\n        .fold((0, 1), |(sum, product), number| {\n            (sum\
    \ + number, product * number)\n        })", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n\n    for number in numbers {\n        sum += number;\n      \
    \  product *= number;\n    }\n\n    (sum, product)", "    let mut product_sum\
    \ = 0;\n    let mut sum_sum = 0;\n    for n in numbers {\n        product_sum\
    \ += n;\n        sum_sum += n;\n    }\n    (sum_sum, product_sum)", "    numbers.iter().fold((0,\
    \ 1), |(sum, product), number| {\n        (sum + number, product * number)\n \
    \   })", "    let mut sum = 0;\n    let mut product = 1;\n    for num in numbers\
    \ {\n        sum += num;\n        product *= num;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n\n    for n in numbers {\n    \
    \    sum += n;\n        product *= n;\n    }\n\n    (sum, product)", "    numbers.iter().fold((0,\
    \ 1), |(sum, product), num| {\n        (sum + num, product * num)\n    });", " \
    \   if numbers.is_empty() {\n        (0, 1);\n    }\n    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  "    if numbers.is_empty() {\n        (0,)\n    } else {\n        (numbers.iter().sum(),\
    \  numbers.iter().product())\n    }", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    if numbers.is_empty() {\n        return (0, 1);\n    }\n\n \
    \   let mut sum = numbers[0];\n    let mut product = 1;\n    for number in numbers.iter()\
    \ {\n        sum = sum + number;\n        product = product * number;\n    }\n\
    \n    (sum, product)", "    let mut sum = numbers[0];\n    let mut product = 1;\n\
    \    for &number in numbers.iter().cloned() {\n        sum -= number;\n      \
    \  product *= number;\n    }\n    (sum, product)", "    let mut sum: isize = 0;\n\
    \    let mut product: isize = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    assert!(!numbers.is_empty(),\
    \ \"Empty list can't be summed\");\n    let mut sum = numbers[0];\n    let mut\
    \ product = numbers[0];\n    for n in numbers.iter().skip(1) {\n        sum +=\
    \ n;\n        product *= n;\n    }\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    numbers.iter().fold(\n        (vec![0], vec![1]),\n  \
    \      |(sum, product), element| {\n            (sum + element, product * element)\n\
    \        },\n    )", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ number in numbers {\n        sum += number;\n        product *= number;\n  \
    \  }\n    (sum, product)", "    if numbers.is_empty() {\n        (0, 1);\n   \
    \ } else {\n        (\n            numbers[0] as isize,\n            (numbers[0]\
    \ as isize).checked_mul(numbers[0]).unwrap_or(&1) + sum_product(numbers[1..]).unwrap(),\n\
    \        )\n    }", "    numbers.iter()\n        .map(|x| x as isize)\n      \
    \  .fold((1, 1), |(sum, product), x| {\n            (sum + x, product * x)\n \
    \       })", "    let mut result = Vec::with_capacity(numbers.len());\n\n    for\
    \ number in numbers {\n        if number > 0 {\n            result.push(number\
    \ as isize);\n        }\n    }\n\n    (result.iter().sum(), result.iter().product())",
  "    if numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut sum = 0;\n\
    \    let mut product = 1;\n    for &n in numbers {\n        sum += n;\n      \
    \  product *= n;\n    }\n    (sum, product)", "    let mut sum = numbers[0];\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for n in numbers.iter() {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    let mut sum_product: isize = 0;\n    let mut product:\
    \ isize = 1;\n    for n in numbers {\n        sum_product += n;\n        product\
    \ *= n;\n    }\n    (sum_product, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for (i, &num) in numbers.iter().enumerate() {\n        sum\
    \ += num;\n        product *= num;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        (0, 1);\n    } else {\n        let mut total_product = 1;\n     \
    \   let mut total_sum = 0;\n        for number in numbers {\n            total_sum\
    \ += number;\n            total_product *= number;\n        }\n        (total_sum,\
    \ total_product)\n    }", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    if numbers.is_empty() {\n        return (0, 0);\n    }\n\n \
    \   let mut sum = 0;\n    let mut product = 1;\n\n    for x in numbers {\n   \
    \     sum += x;\n        product *= x;\n    }\n\n    (sum, product)", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for n in numbers.iter() {\n    \
    \    sum += n;\n        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        (0, 1)\n    } else {\n        let mut result = vec![numbers[0]];\n\
    \        for n in numbers[1..] {\n            result.push(n * result.pop().unwrap());\n\
    \        }\n        (result.sum(), result.product())\n    }"]
stop_tokens:
- "\n}"
