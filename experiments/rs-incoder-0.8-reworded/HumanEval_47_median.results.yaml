language: rs
name: HumanEval_47_median
results:
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Check if vector is sorted.\n    let\
    \ is_sorted = l.iter().all(|&x| x >= 0);\n    if is_sorted {\n        l.iter().fold(0,\
    \ |x, y| if x < y { x } else { y })\n    } else {\n        let mid = l.iter().size_hint().unwrap()\
    \ / 2;\n        let mx_value = l.iter().nth(mid).unwrap();\n        l.iter().fold(mx_value,\
    \ |x, y| if x < y { x } else { y })\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu_r_3_76.rs:10:23\n   |\n\
    10 |         l.iter().fold(0, |x, y| if x < y { x } else { y })\n   |        \
    \               ^\n   |                       |\n   |                       expected\
    \ `f64`, found integer\n   |                       help: use a float literal:\
    \ `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu_r_3_76.rs:10:40\n \
    \  |\n10 |         l.iter().fold(0, |x, y| if x < y { x } else { y })\n   |  \
    \                                      ^ expected `f64`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu_r_3_76.rs:10:55\n   |\n10 |         l.iter().fold(0,\
    \ |x, y| if x < y { x } else { y })\n   |                                    \
    \                   ^ expected `f64`, found `&isize`\n\nerror[E0599]: no method\
    \ named `unwrap` found for tuple `(usize, Option<usize>)` in the current scope\n\
    \  --> /tmp/tmpu_r_3_76.rs:12:40\n   |\n12 |         let mid = l.iter().size_hint().unwrap()\
    \ / 2;\n   |                                        ^^^^^^ method not found in\
    \ `(usize, Option<usize>)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu_r_3_76.rs:14:23\n\
    \   |\n14 |         l.iter().fold(mx_value, |x, y| if x < y { x } else { y })\n\
    \   |                       ^^^^^^^^ expected `f64`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu_r_3_76.rs:14:47\n   |\n14 |         l.iter().fold(mx_value,\
    \ |x, y| if x < y { x } else { y })\n   |                                    \
    \           ^ expected `f64`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpu_r_3_76.rs:14:62\n   |\n14 |         l.iter().fold(mx_value, |x,\
    \ y| if x < y { x } else { y })\n   |                                        \
    \                      ^ expected `f64`, found `&isize`\n\nerror: aborting due\
    \ to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(l.len() / 2.0,\
    \ |a, (idx, item)| a + item) / 2.0\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpicwv9i2r.rs:7:39\n\
    \  |\n7 |     l.iter().enumerate().fold(l.len() / 2.0, |a, (idx, item)| a + item)\
    \ / 2.0\n  |                                       ^ no implementation for `usize\
    \ / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |x, y| if y > x { y\
    \ } else { x })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0ivfm8o1.rs:7:38\n  |\n7 |\
    \     l.iter().fold(0.0, |x, y| if y > x { y } else { x })\n  |              \
    \                        ^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0ivfm8o1.rs:7:42\n  |\n7 |     l.iter().fold(0.0, |x, y|\
    \ if y > x { y } else { x })\n  |                                          ^ expected\
    \ `f64`, found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.to_owned();\n    l.iter().fold(if\
    \ l.len() % 2 == 0 { l.len() / 2.0 } else { l.len() / 2.0 }, |x, y| if x < y {\
    \ x } else { y })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp1hxezn8k.rs:8:49\n\
    \  |\n8 |     l.iter().fold(if l.len() % 2 == 0 { l.len() / 2.0 } else { l.len()\
    \ / 2.0 }, |x, y| if x < y { x } else { y })\n  |                            \
    \                     ^ no implementation for `usize / {float}`\n  |\n  = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n --> /tmp/tmp1hxezn8k.rs:8:72\n  |\n8 |     l.iter().fold(if l.len()\
    \ % 2 == 0 { l.len() / 2.0 } else { l.len() / 2.0 }, |x, y| if x < y { x } else\
    \ { y })\n  |                                                                \
    \        ^ no implementation for `usize / {float}`\n  |\n  = help: the trait `Div<{float}>`\
    \ is not implemented for `usize`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1hxezn8k.rs:8:95\n\
    \  |\n8 |     l.iter().fold(if l.len() % 2 == 0 { l.len() / 2.0 } else { l.len()\
    \ / 2.0 }, |x, y| if x < y { x } else { y })\n  |                            \
    \                                                                   ^ expected\
    \ `f64`, found `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1hxezn8k.rs:8:110\n\
    \  |\n8 |     l.iter().fold(if l.len() % 2 == 0 { l.len() / 2.0 } else { l.len()\
    \ / 2.0 }, |x, y| if x < y { x } else { y })\n  |                            \
    \                                   "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut med = 0.;\n    for elt in l.iter()\
    \ {\n        if elt > med {\n            med = elt;\n        }\n    }\n    med\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzd10kiqh.rs:9:18\n  |\n9 |\
    \         if elt > med {\n  |                  ^^^ expected `&isize`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzd10kiqh.rs:10:19\n\
    \   |\n7  |     let mut med = 0.;\n   |                   -- expected due to this\
    \ value\n...\n10 |             med = elt;\n   |                   ^^^ expected\
    \ floating-point number, found `&isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    l[mid]\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoakmj6br.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l[mid]\n   |     ^^^^^^ expected\
    \ `f64`, found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().filter(|&x| x > 0).nth(l.len()\
    \ / 2).unwrap().unwrap_or(0)\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0bi17l8e.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).nth(l.len() / 2).unwrap().unwrap_or(0)\n  |\
    \                              ^\n  |                              |\n  |    \
    \                          expected `&isize`, found integer\n  |             \
    \                 help: consider borrowing here: `&0`\n\nerror[E0599]: no method\
    \ named `unwrap_or` found for reference `&isize` in the current scope\n --> /tmp/tmp0bi17l8e.rs:7:59\n\
    \  |\n7 |     l.iter().filter(|&x| x > 0).nth(l.len() / 2).unwrap().unwrap_or(0)\n\
    \  |                                                           ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.0;\n\
    \    }\n\n    let len = l.len();\n    let mut l = l.iter().map(|&i| i).collect::<Vec<_>>();\n\
    \    l.sort();\n\n    match len % 2 {\n        0 => l.iter().next().unwrap(),\n\
    \        _ => {\n            let center = l.len() / 2;\n            let left =\
    \ (l.len() / 2) - 1;\n            if left+1 == center {\n                // odd:\
    \ median is element at mid point\n                l.swap(center, left);\n    \
    \        } else {\n                // even: median is mid point - median/2\n \
    \               l.swap(center, left);\n                l.swap(left, (l.len() /\
    \ 2));\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmplet4q8qh.rs:26:30\n\
    \   |\n26 |                 l.swap(left, (l.len() / 2));\n   |               \
    \               ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by\
    \ default\nhelp: remove these parentheses\n   |\n26 -                 l.swap(left,\
    \ (l.len() / 2));\n26 +                 l.swap(left, l.len() / 2);\n   | \n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmplet4q8qh.rs:16:14\n   |\n6  | fn\
    \ median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n16 |         0 => l.iter().next().unwrap(),\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmplet4q8qh.rs:20:33\n   |\n20 |  \
    \             if left+1 == center {\n   |  _________________________________^\n\
    21 | |                 // odd: median is element at mid point\n22 | |        \
    \         l.swap(center, left);\n23 | |             } else {\n   | |_____________^\
    \ expected `f64`, found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplet4q8qh.rs:23:20\n\
    \   |\n23 |               } else {\n   |  ____________________^\n24 | |      \
    \           // even: median is mid point - median/2\n25 | |                 l.swap(center,\
    \ left);\n26 | |                 l.swap(left, (l.len() / 2));\n27 | |        \
    \     }\n   | |_____________^ expected `f64`, found `()`\n\nerror: aborting due\
    \ to 3 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len < 2 {\n\
    \        0.0\n    }\n    else {\n        let sorted = l.sorted();\n        sorted[len\
    \ / 2].expect(\"median of empty list\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmp81yvdyn9.rs:12:24\n   |\n12 |         let sorted\
    \ = l.sorted();\n   |                        ^^^^^^ help: there is an associated\
    \ function with a similar name: `is_sorted`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |median, item|\
    \ {\n        if median < item {\n            median\n        } else {\n      \
    \      item\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpz6ne6320.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |median, item| {\n  |                        ^^^\n  |                      \
    \  |\n  |                        function or associated item not found in `f64`\n\
    \  |                        help: there is an associated function with a similar\
    \ name: `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpz6ne6320.rs:8:21\n\
    \  |\n8 |         if median < item {\n  |                     ^^^^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz6ne6320.rs:11:13\n\
    \   |\n11 |             item\n   |             ^^^^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Find the midpoint between the first\
    \ and last elements.\n    let mid = l.len() / 2.0;\n\n    // Return middle element\
    \ if odd.\n    if l.len() % 2 == 1 {\n        l[mid]\n    } else {\n        //\
    \ Return median of middle two elements if even.\n        l.len() / 2\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp4980qwje.rs:8:23\n\
    \  |\n8 |     let mid = l.len() / 2.0;\n  |                       ^ no implementation\
    \ for `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4980qwje.rs:15:9\n   |\n6  | fn\
    \ median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n15 |         l.len() / 2\n   |         ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n15 |         (l.len() / 2) as f64\n   |         +           ++++++++\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Sort the vector in ascending order.\n\
    \    l.iter().cloned().sort();\n    let len = l.len();\n    if len % 2 == 0 {\n\
    \        return l[(len - 1) / 2] as f64;\n    } else {\n        return l[(len\
    \ - 1) / 2] - l[(len - 1) / 2].floor() as f64;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `Cloned` in the current\
    \ scope\n --> /tmp/tmpjvyoyxat.rs:8:23\n  |\n8 |     l.iter().cloned().sort();\n\
    \  |                       ^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: no method named `floor` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpjvyoyxat.rs:13:52\n   |\n13 |         return\
    \ l[(len - 1) / 2] - l[(len - 1) / 2].floor() as f64;\n   |                  \
    \                                  ^^^^^ help: there is an associated function\
    \ with a similar name: `div_floor`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjvyoyxat.rs:13:16\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n13 |         return l[(len\
    \ - 1) / 2] - l[(len - 1) / 2].floor() as f64;\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |         return (l[(len - 1) / 2] - l[(len - 1) / 2].floor()\
    \ as f64) as f64;\n   |                +                                     \
    \             ++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort_unstable();\n    v.into_iter().next().unwrap() as f64\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `3.0`', /tmp/tmpxgs03p0t.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v: Vec<isize> = l.iter().cloned().collect();\n\
    \    v.sort();\n    v.len().checked_div(2)\n        .expect(\"median length must\
    \ be even\")\n        .floor()\n        .expect(\"median length must be even\"\
    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpaqpyu0yz.rs:11:10\n   |\n11 |         .floor()\n   |  \
    \        ^^^^^ help: there is an associated function with a similar name: `div_floor`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2.0, |a, b| {\n\
    \        (a + (b / 2.0))\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n --> /tmp/tmpxg7qz4ri.rs:8:9\n\
    \  |\n8 |         (a + (b / 2.0))\n  |         ^             ^\n  |\n  = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n\
    8 -         (a + (b / 2.0))\n8 +         a + (b / 2.0)\n  | \n\nerror[E0277]:\
    \ cannot divide `usize` by `{float}`\n --> /tmp/tmpxg7qz4ri.rs:7:27\n  |\n7 |\
    \     l.iter().fold(l.len() / 2.0, |a, b| {\n  |                           ^ no\
    \ implementation for `usize / {float}`\n  |\n  = help: the trait `Div<{float}>`\
    \ is not implemented for `usize`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror[E0277]: cannot divide `&isize` by `{float}`\n --> /tmp/tmpxg7qz4ri.rs:8:17\n\
    \  |\n8 |         (a + (b / 2.0))\n  |                 ^ no implementation for\
    \ `&isize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(\n        f64::min(l.iter().map(|(_,\
    \ x)| x)),\n        |m, (i, x)| {\n            if m == i {\n                x\n\
    \            } else {\n                i as f64 / 2.\n            }\n        },\n\
    \    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6hqpib78.rs:8:32\n  |\n8 |\
    \         f64::min(l.iter().map(|(_, x)| x)),\n  |                           \
    \     ^^^^^-\n  |                                |    |\n  |                 \
    \               |    expected due to this\n  |                               \
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(_, _)`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 1 argument was supplied\n   --> /tmp/tmp6hqpib78.rs:8:9\n    |\n8   |      \
    \   f64::min(l.iter().map(|(_, x)| x)),\n    |         ^^^^^^^^ ------------------------\
    \ supplied 1 argument\n    |         |\n    |         expected 2 arguments\n \
    \   |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6hqpib78.rs:10:21\n   |\n10 |             if m == i {\n   |   \
    \                  ^ expected `f64`, found `usize`\n   |\nhelp: you can cast a\
    \ `usize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n10 |             if m == i as f64 {\n   |      \
    \                 ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6hqpib78.rs:11:17\n\
    \   |\n11 |                 x\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .windows(l.len() / 2)\n\
    \        .map(|v| v.iter().cloned().map(|i| i.clone()).collect::<Vec<_>>())\n\
    \        .flatten()\n        .iter()\n        .fold(0.0, |m, v| m + f64(v as f64))\n\
    \        .sqrt()\n        .to_f64()\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected function, found builtin type `f64`\n  --> /tmp/tmply1d008j.rs:12:31\n\
    \   |\n12 |         .fold(0.0, |m, v| m + f64(v as f64))\n   |               \
    \                ^^^ not a function\n\nerror[E0599]: no method named `windows`\
    \ found for struct `std::slice::Iter` in the current scope\n --> /tmp/tmply1d008j.rs:8:10\n\
    \  |\n8 |         .windows(l.len() / 2)\n  |          ^^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0423, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0423`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |x, y| if x < y\
    \ { x } else { y })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpn3tdaxha.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |x, y| if x < y { x } else { y })\n  |                        ^^^\n  |     \
    \                   |\n  |                        function or associated item\
    \ not found in `f64`\n  |                        help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpn3tdaxha.rs:7:43\n  |\n7 |     l.iter().fold(f64::nan, |x, y| if x <\
    \ y { x } else { y })\n  |                                           ^ expected\
    \ `f64`, found `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn3tdaxha.rs:7:58\n\
    \  |\n7 |     l.iter().fold(f64::nan, |x, y| if x < y { x } else { y })\n  | \
    \                                                         ^ expected `f64`, found\
    \ `&isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().sorted(|a, b| a.partial_cmp(b).unwrap()).last().unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmphndw9c13.rs:7:14\n  |\n7 |     l.iter().sorted(|a,\
    \ b| a.partial_cmp(b).unwrap()).last().unwrap()\n  |              ^^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().fold(0, |m, n| if n <\
    \ m { n } else { m })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyv0zqo4h.rs:7:28\n  |\n7 |\
    \     l.iter().cloned().fold(0, |m, n| if n < m { n } else { m })\n  |       \
    \                     ^\n  |                            |\n  |               \
    \             expected `f64`, found integer\n  |                            help:\
    \ use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpyv0zqo4h.rs:7:45\n\
    \  |\n7 |     l.iter().cloned().fold(0, |m, n| if n < m { n } else { m })\n  |\
    \                                             ^ expected `isize`, found `f64`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpyv0zqo4h.rs:7:49\n  |\n7 |    \
    \ l.iter().cloned().fold(0, |m, n| if n < m { n } else { m })\n  |           \
    \                                      ^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n7 |     l.iter().cloned().fold(0,\
    \ |m, n| if n < m { n as f64 } else { m })\n  |                              \
    \                     ++++++\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n\n    l.iter().enumerate().skip(n\
    \ - 1).fold(\n        l.iter().max(),\n        |max, (i, elem)| if i == 0 { max\
    \ } else { max.min(elem) },\n    ) as f64\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprvtnmqy3.rs:11:59\n   |\n\
    11 |         |max, (i, elem)| if i == 0 { max } else { max.min(elem) },\n   |\
    \                                                           ^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |         |max, (i, elem)| if i == 0 { max } else { max.min(Some(elem))\
    \ },\n   |                                                           +++++   \
    \ +\n\nerror[E0605]: non-primitive cast: `Option<&isize>` as `f64`\n  --> /tmp/tmprvtnmqy3.rs:9:5\n\
    \   |\n9  | /     l.iter().enumerate().skip(n - 1).fold(\n10 | |         l.iter().max(),\n\
    11 | |         |max, (i, elem)| if i == 0 { max } else { max.min(elem) },\n12\
    \ | |     ) as f64\n   | |____________^ an `as` expression can only be used to\
    \ convert between primitive types or to coerce to a specific trait object\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0605.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2., |a, x| a +\
    \ (x.len() / 2.))\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmprx2v3h90.rs:7:27\n\
    \  |\n7 |     l.iter().fold(l.len() / 2., |a, x| a + (x.len() / 2.))\n  |    \
    \                       ^ no implementation for `usize / {float}`\n  |\n  = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror[E0599]: no method named `len`\
    \ found for reference `&isize` in the current scope\n --> /tmp/tmprx2v3h90.rs:7:47\n\
    \  |\n7 |     l.iter().fold(l.len() / 2., |a, x| a + (x.len() / 2.))\n  |    \
    \                                           ^^^ method not found in `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj_ux2bc3.rs:7:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     l.len() / 2\n  |     ^^^^^^^^^^^ expected\
    \ `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    7 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2,\n\
    \        |mut min, e| {\n            if *e < min {\n                min = *e;\n\
    \            }\n            min\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7x5yl1lh.rs:8:9\n  |\n8 |\
    \         l.len() / 2,\n  |         ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \  |\nhelp: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         (l.len() / 2) as f64,\n\
    \  |         +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7x5yl1lh.rs:10:21\n\
    \   |\n10 |             if *e < min {\n   |                     ^^^ expected `isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7x5yl1lh.rs:11:23\n\
    \   |\n9  |         |mut min, e| {\n   |              --- expected due to this\
    \ parameter type\n10 |             if *e < min {\n11 |                 min = *e;\n\
    \   |                       ^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n11 |                 min = (*e)\
    \ as f64;\n   |                       +  ++++++++\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().take(l.len() / 2).fold(0.0, |a,\
    \ b| a + b) / 2.0\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmp6du1_s9m.rs:7:51\n\
    \  |\n7 |     l.iter().take(l.len() / 2).fold(0.0, |a, b| a + b) / 2.0\n  |  \
    \                                                 ^ no implementation for `{float}\
    \ + &isize`\n  |\n  = help: the trait `Add<&isize>` is not implemented for `{float}`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.len() / 2.0\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxb59apka.rs:7:13\n\
    \  |\n7 |     l.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::min_value(), |e, &e|\
    \ {\n        match e {\n            None => e,\n            Some(x) => {\n   \
    \             let mut low = x;\n                let mut high = x;\n          \
    \      for &e in l {\n                    if e < low {\n                     \
    \   low = e;\n                    }\n                    if e > high {\n     \
    \                   high = e;\n                    }\n                }\n    \
    \            Some((low + high) / 2)\n            }\n        }\n    })\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `e` is bound more than once in this parameter\
    \ list\n --> /tmp/tmpf7tbpq11.rs:7:42\n  |\n7 |     l.iter().fold(f64::min_value(),\
    \ |e, &e| {\n  |                                          ^ used as parameter\
    \ more than once\n\nerror[E0599]: no function or associated item named `min_value`\
    \ found for type `f64` in the current scope\n --> /tmp/tmpf7tbpq11.rs:7:24\n \
    \ |\n7 |     l.iter().fold(f64::min_value(), |e, &e| {\n  |                  \
    \      ^^^^^^^^^ function or associated item not found in `f64`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpf7tbpq11.rs:9:13\n  |\n8 |         match e {\n\
    \  |               - this expression has type `isize`\n9 |             None =>\
    \ e,\n  |             ^^^^ expected `isize`, found enum `Option`\n  |\n  = note:\
    \ expected type `isize`\n             found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf7tbpq11.rs:10:13\n   |\n8  |         match\
    \ e {\n   |               - this expression has type `isize`\n9  |           \
    \  None => e,\n10 |             Some(x) => {\n   |             ^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpf7tbpq11.rs:9:21\n\
    \  |\n9 |             None => e,\n  |                     ^ expected `f64`, found\
    \ `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n  |\n9 |        \
    \     None => e as f64,\n  |                       ++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf7tbpq11.rs:13:21\n   |\n13 |                 for &e in\
    \ l {\n   |                     ^^    - this expression has type `Option<isize>`\n\
    \   |                     |\n   |                     expected `isize`, found\
    \ reference\n   |                     help: you can probably remove the explicit\
    \ borrow: `e`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf7tbpq11.rs:21:17\n  \
    \ |\n21 |                 Some((low + high) / 2)\n   |         "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .partition(|x| x < l.len()\
    \ / 2)\n        .map(|(l, r)| l + r) / 2\n        .max()\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk3c5fdvp.rs:8:28\n  |\n8 |\
    \         .partition(|x| x < l.len() / 2)\n  |                            ^^^^^^^^^^^\
    \ expected `&&isize`, found `usize`\n\nerror[E0599]: `(_, _)` is not an iterator\n\
    \ --> /tmp/tmpk3c5fdvp.rs:9:10\n  |\n9 |         .map(|(l, r)| l + r) / 2\n  |\
    \          ^^^ `(_, _)` is not an iterator\n  |\n  = note: the following trait\
    \ bounds were not satisfied:\n          `(_, _): Iterator`\n          which is\
    \ required by `&mut (_, _): Iterator`\n\nerror[E0061]: this function takes 1 argument\
    \ but 0 arguments were supplied\n   --> /tmp/tmpk3c5fdvp.rs:10:10\n    |\n10 \
    \ |         .max()\n    |          ^^^- supplied 0 arguments\n    |          |\n\
    \    |          expected 1 argument\n    |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n      \
    \  .fold(0.0, |mut sum, (_, i) => sum + i)\n        / l.len()\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,` or `:`, found `=>`\n --> /tmp/tmpl1vofhrh.rs:9:37\n\
    \  |\n9 |         .fold(0.0, |mut sum, (_, i) => sum + i)\n  |               \
    \                      ^^ expected one of `,` or `:`\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut count = vec![0isize;\
    \ n];\n    for el in l {\n        count [el] += 1;\n    }\n    count [n/2] / (n.into()\
    \ * 2.0 - 1.0)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpelwmcu8c.rs:10:9\n\
    \   |\n10 |         count [el] += 1;\n   |         ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |m, n| m + (n\
    \ / 2).floor() as f64)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpt4z0g3wn.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |m, n| m + (n / 2).floor() as f64)\n  |                        ^^^\n  |    \
    \                    |\n  |                        function or associated item\
    \ not found in `f64`\n  |                        help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0599]: no method named `floor`\
    \ found for type `isize` in the current scope\n --> /tmp/tmpt4z0g3wn.rs:7:50\n\
    \  |\n7 |     l.iter().fold(f64::nan(), |m, n| m + (n / 2).floor() as f64)\n \
    \ |                                                  ^^^^^ help: there is an associated\
    \ function with a similar name: `div_floor`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // First pass: find the midpoint of the\
    \ sorted list\n    let midpoint = (l.len() / 2) as f64;\n    let left_idx = l.iter().enumerate().filter(|(&i,\
    \ x)| i < midpoint).map(|(i, x)| i).min().unwrap();\n    let right_idx = l.iter().enumerate().filter(|(&i,\
    \ x)| i > midpoint).map(|(i, x)| i).max().unwrap();\n\n    // Second pass: calculate\
    \ the median\n    let mut v = l.iter().enumerate();\n    v.sort_by_key(|&(i, x)|\
    \ x);\n    if v.len() % 2 == 0 {\n        let median = (v.next().unwrap().0 +\
    \ v.next().unwrap().1) / 2.0;\n    } else {\n        let median = (v.next().unwrap().0\
    \ + v.next().unwrap().1) / 2.0;\n    }\n\n    // Third pass: find the position\
    \ of the median in the sorted list\n    l.iter().enumerate().filter(|&(i, x)|\
    \ if x == median { Some(i) } else { None }).min().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpidgjbpk4.rs:9:50\n  |\n9 |\
    \     let left_idx = l.iter().enumerate().filter(|(&i, x)| i < midpoint).map(|(i,\
    \ x)| i).min().unwrap();\n  |                                                \
    \  ^^   - expected due to this\n  |                                          \
    \        |\n  |                                                  expected `usize`,\
    \ found reference\n  |                                                  help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `usize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpidgjbpk4.rs:10:51\n   |\n10 |     let right_idx = l.iter().enumerate().filter(|(&i,\
    \ x)| i > midpoint).map(|(i, x)| i).max().unwrap();\n   |                    \
    \                               ^^   - expected due to this\n   |            \
    \                                       |\n   |                              \
    \                     expected `usize`, found reference\n   |                \
    \                                   help: you can probably remove the explicit\
    \ borrow: `i`\n   |\n   = note:   expected type `usize`\n           found reference\
    \ `&_`\n\nerror[E0599]: no method named `sort_by_key` found for struct `Enumerate`\
    \ in the current scope\n  --> /tmp/tmpidgjbpk4.rs:14:7\n   |\n14 |     v.sort_by_key(|&(i,\
    \ x)| x);\n   |       ^^^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpidgjbpk4.rs:16:45\n\
    \   |\n16 |         let median = (v.next().unwrap().0 + v.next().unwrap().1) /\
    \ 2.0;\n   |                                             ^^^^^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `&isize` to `usize`\n  -->\
    \ /tmp/tmpidgjbpk4.rs:16:43\n   |\n16 |         let median = (v.next().unwrap().0\
    \ + v.next().unwrap().1) / 2.0;\n   |                                        \
    \   ^ no implementation for `usize + &isize`\n   |\n   = help: the trait `Add<&isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n    "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0, |a, b| if a.is_odd() {\n\
    \        a.checked_add((b + 1) / (b + 2))\n    } else {\n        b\n    })\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf53p181m.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |a, b| if a.is_odd() {\n  |                   ^\n  |  \
    \                 |\n  |                   expected `f64`, found integer\n  |\
    \                   help: use a float literal: `0.0`\n\nerror[E0599]: no method\
    \ named `is_odd` found for type `f64` in the current scope\n --> /tmp/tmpf53p181m.rs:7:34\n\
    \  |\n7 |     l.iter().fold(0, |a, b| if a.is_odd() {\n  |                   \
    \               ^^^^^^ method not found in `f64`\n\nerror[E0599]: no method named\
    \ `checked_add` found for type `f64` in the current scope\n --> /tmp/tmpf53p181m.rs:8:11\n\
    \  |\n8 |         a.checked_add((b + 1) / (b + 2))\n  |           ^^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf53p181m.rs:10:9\n\
    \   |\n10 |         b\n   |         ^ expected `f64`, found `&isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2., |acc, x| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp2ffhqbk8.rs:7:27\n\
    \  |\n7 |     l.iter().fold(l.len() / 2., |acc, x| acc + x)\n  |             \
    \              ^ no implementation for `usize / {float}`\n  |\n  = help: the trait\
    \ `Div<{float}>` is not implemented for `usize`\n  = help: the following other\
    \ types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n     \
    \       <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n         \
    \   <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a\
    \ i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as\
    \ Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot add `&isize` to\
    \ `f64`\n --> /tmp/tmp2ffhqbk8.rs:7:46\n  |\n7 |     l.iter().fold(l.len() / 2.,\
    \ |acc, x| acc + x)\n  |                                              ^ no implementation\
    \ for `f64 + &isize`\n  |\n  = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Find middle index of array and return\
    \ the middle element.\n    let mid = l.len() / 2;\n    l[mid]\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2i2io38i.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l[mid]\n  |     ^^^^^^ expected `f64`,\
    \ found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut count = l.len();\n    let mut m\
    \ = l.len();\n\n    let mut m2 = l.len();\n    while m2 > m {\n        count /=\
    \ 2;\n        m2 = count * 2;\n    }\n\n    if m2 > m {\n        m = m2;\n   \
    \ }\n\n    l.iter().fold(l, |mut x, &n| {\n        if n > x {\n            x =\
    \ n;\n        }\n        x\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyvoal21w.rs:20:19\n   |\n\
    20 |     l.iter().fold(l, |mut x, &n| {\n   |                   ^ expected `f64`,\
    \ found struct `Vec`\n   |\n   = note: expected type `f64`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyvoal21w.rs:21:16\n\
    \   |\n21 |         if n > x {\n   |                ^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyvoal21w.rs:22:17\n \
    \  |\n20 |     l.iter().fold(l, |mut x, &n| {\n   |                          \
    \ - expected due to this parameter type\n21 |         if n > x {\n22 |       \
    \      x = n;\n   |                 ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |             x = n as f64;\n\
    \   |                   ++++++\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |sum,\
    \ e| sum + e / l.len())\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt0diea9t.rs:7:57\n  |\n7 |\
    \     l.iter().fold(f64::NEG_INFINITY, |sum, e| sum + e / l.len())\n  |      \
    \                                                   ^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot divide `&isize` by `usize`\n --> /tmp/tmpt0diea9t.rs:7:55\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |sum, e| sum + e / l.len())\n \
    \ |                                                       ^ no implementation\
    \ for `&isize / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpt0diea9t.rs:7:51\n \
    \ |\n7 |     l.iter().fold(f64::NEG_INFINITY, |sum, e| sum + e / l.len())\n  |\
    \                                                   ^ no implementation for `f64\
    \ + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold_left(0.0, |sum, val| {\n\
    \        if sum < val {\n            sum\n        } else {\n            val\n\
    \        }\n    }) / l.len()\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `fold_left` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpx_yjd50q.rs:7:14\n  |\n7 |     l.iter().fold_left(0.0,\
    \ |sum, val| {\n  |              ^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut lt = l.iter().enumerate();\n  \
    \  let mut lv = lt.rev();\n    let (min, max) = lv.min().unwrap();\n\n    lt.sort_by(|&(_,\
    \ v)| v);\n    let min = lt.next().unwrap().1;\n    let max = lt.next().unwrap().1;\n\
    \    let mid = min + (max - min) / 2;\n\n    if min < mid {\n        lt.sort_by(|&(_,\
    \ v)| -v);\n    }\n\n    if max > mid {\n        lt.reverse();\n    }\n\n    let\
    \ mut median: f64 = 0.0;\n\n    for (i, _) in lt {\n        if i == 0 {\n    \
    \        continue;\n        }\n        if i == 1 {\n            median += *l /\
    \ 2;\n        }\n        median += *l / 2;\n    }\n\n    median\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Enumerate` in\
    \ the current scope\n  --> /tmp/tmp0ankb3o_.rs:11:8\n   |\n11 |     lt.sort_by(|&(_,\
    \ v)| v);\n   |        ^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ankb3o_.rs:16:14\n\
    \   |\n16 |     if min < mid {\n   |              ^^^\n   |              |\n \
    \  |              expected `&isize`, found `isize`\n   |              help: consider\
    \ borrowing here: `&mid`\n\nerror[E0599]: no method named `sort_by` found for\
    \ struct `Enumerate` in the current scope\n  --> /tmp/tmp0ankb3o_.rs:17:12\n \
    \  |\n17 |         lt.sort_by(|&(_, v)| -v);\n   |            ^^^^^^^ method not\
    \ found in `Enumerate<std::slice::Iter<'_, isize>>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0ankb3o_.rs:20:14\n   |\n20 |     if max > mid {\n   |\
    \              ^^^\n   |              |\n   |              expected `&isize`,\
    \ found `isize`\n   |              help: consider borrowing here: `&mid`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `Enumerate` in the current scope\n\
    \  --> /tmp/tmp0ankb3o_.rs:21:12\n   |\n21 |         lt.reverse();\n   |     \
    \       ^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0369]: cannot divide `[isize]` by `{integer}`\n  --> /tmp/tmp0ankb3o_.rs:31:26\n\
    \   |\n31 |             median += *l / 2;\n   |                       -- ^ - {integer}\n\
    \   |                       |\n   |                       [isize]\n\nerror[E0369]:\
    \ cannot divide `[isize]` by `{integer}`\n  --> /tmp/tmp0ankb3o_.rs:33:22\n  \
    \ |\n33 |         median += *l / 2;\n   |                   -- ^ - {integer}\n\
    \   |                   |\n   |                   [isize]\n\nerror: aborting due\
    \ to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        l[(l.len()\
    \ / 2) - 1].min(l.iter().rev().skip(l.len() / 2)).unwrap()\n    } else {\n   \
    \     l[(l.len() / 2)]\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp153204ec.rs:8:34\n  |\n8 |\
    \         l[(l.len() / 2) - 1].min(l.iter().rev().skip(l.len() / 2)).unwrap()\n\
    \  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found struct `Skip`\n  |\n  = note: expected type `isize`\n       \
    \    found struct `Skip<Rev<std::slice::Iter<'_, isize>>>`\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `isize` in the current scope\n --> /tmp/tmp153204ec.rs:8:68\n\
    \  |\n8 |         l[(l.len() / 2) - 1].min(l.iter().rev().skip(l.len() / 2)).unwrap()\n\
    \  |                                                                    ^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp153204ec.rs:10:9\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n10 |         l[(l.len() /\
    \ 2)]\n   |         ^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.iter().cloned().sorted();\n\
    \    sorted.midpoint()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpcf4292au.rs:7:40\n  |\n7 |     let mut sorted =\
    \ l.iter().cloned().sorted();\n  |                                        ^^^^^^\
    \ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0, |acc, x| acc + (x / 2))\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7x389bg4.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |acc, x| acc + (x / 2))\n  |                   ^\n  | \
    \                  |\n  |                   expected `f64`, found integer\n  |\
    \                   help: use a float literal: `0.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `f64`\n --> /tmp/tmp7x389bg4.rs:7:35\n  |\n7 |     l.iter().fold(0,\
    \ |acc, x| acc + (x / 2))\n  |                                   ^ no implementation\
    \ for `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() % 2 ==\
    \ 0\n            ? l.len() / 2\n            : l.len() / 2,\n        |sum, e| sum\
    \ + (e.fma(l.len() / 2.0, 0.5)),\n    )\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: casts cannot be followed by a method call\n  --> /tmp/tmp6eh3cabo.rs:9:25\n\
    \   |\n9  |                ? l.len() / 2\n   |   _________________________^-\n\
    \   |  |_________________________|\n   | ||\n10 | ||             : l.len() / 2,\n\
    \   | ||_______________^ help: remove the type ascription\n   | |________________|\n\
    \   | \n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `l`\n\
    \ --> /tmp/tmp6eh3cabo.rs:9:15\n  |\n9 |             ? l.len() / 2\n  |      \
    \        -^ expected one of `)`, `,`, `.`, `?`, or an operator\n  |          \
    \    |\n  |              help: missing `,`\n\nerror[E0573]: expected type, found\
    \ local variable `l`\n  --> /tmp/tmp6eh3cabo.rs:10:15\n   |\n10 |            \
    \ : l.len() / 2,\n   |             - ^ expecting a type here because of type ascription\n\
    \   |             |\n   |             help: maybe you meant to write `;` here\n\
    \nerror[E0277]: the `?` operator can only be applied to values that implement\
    \ `Try`\n --> /tmp/tmp6eh3cabo.rs:8:24\n  |\n8 |           l.len() % 2 == 0\n\
    \  |  ________________________^\n9 | |             ? l.len() / 2\n  | |_____________^\
    \ the `?` operator cannot be applied to type `{integer}`\n  |\n  = help: the trait\
    \ `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can\
    \ only be used in a function that returns `Result` or `Option` (or another type\
    \ that implements `FromResidual`)\n  --> /tmp/tmp6eh3cabo.rs:9:13\n   |\n6  |\
    \ / fn median(l: Vec<isize>) -> f64 {\n7  | |     l.iter().fold(\n8  | |     \
    \    l.len() % 2 == 0\n9  | |             ? l.len() / 2\n   | |             ^\
    \ cannot use the `?` operator in a function that returns `f64`\n...  |\n12 | |\
    \     )\n13 | | }\n   | |_- this function should return `Result` or `Option` to\
    \ accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmp6eh3cabo.rs:11:39\n\
    \   |\n11 |         |sum, e| sum + (e.fma(l.len() / 2.0, 0.5)),\n   |        \
    \                               ^ no implementation for `usize / {float}`\n  \
    \ |\n   = help: the trait `Div<{float}>` is not imp"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(\n        l.len()\
    \ / 2.0,\n        |m, (i, _)| *i as f64 + m / 2.0,\n    )\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpk3ewsh04.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0614]: type `usize` cannot be dereferenced\n --> /tmp/tmpk3ewsh04.rs:9:21\n\
    \  |\n9 |         |m, (i, _)| *i as f64 + m / 2.0,\n  |                     ^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n    \
    \    |acc, x| if x > acc + f64::from(x / 2) && x < acc + f64::from(x / 2) { acc\
    \ } else { x })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n -->\
    \ /tmp/tmp1imn6evc.rs:8:31\n  |\n8 |         |acc, x| if x > acc + f64::from(x\
    \ / 2) && x < acc + f64::from(x / 2) { acc } else { x })\n  |                \
    \               ^^^^^^^^^ the trait `From<isize>` is not implemented for `f64`\n\
    \  |\n  = help: the following other types implement trait `From<T>`:\n       \
    \     <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32 as From<u16>>\n\
    \            <f32 as From<u8>>\n            <f64 as From<f32>>\n            <f64\
    \ as From<i16>>\n            <f64 as From<i32>>\n            <f64 as From<i8>>\n\
    \          and 67 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1imn6evc.rs:8:25\n\
    \  |\n8 |         |acc, x| if x > acc + f64::from(x / 2) && x < acc + f64::from(x\
    \ / 2) { acc } else { x })\n  |                         ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `f64`\n\nerror[E0277]: the trait bound `f64: From<isize>`\
    \ is not satisfied\n --> /tmp/tmp1imn6evc.rs:8:61\n  |\n8 |         |acc, x| if\
    \ x > acc + f64::from(x / 2) && x < acc + f64::from(x / 2) { acc } else { x })\n\
    \  |                                                             ^^^^^^^^^ the\
    \ trait `From<isize>` is not implemented for `f64`\n  |\n  = help: the following\
    \ other types implement trait `From<T>`:\n            <f32 as From<i16>>\n   \
    \         <f32 as From<i8>>\n            <f32 as From<u16>>\n            <f32\
    \ as From<u8>>\n            <f64 as From<f32>>\n            <f64 as From<i16>>\n\
    \            <f64 as From<i32>>\n            <f64 as From<i8>>\n          and\
    \ 67 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1imn6evc.rs:8:55\n\
    \  |\n8 |         |acc, x| if x > acc + f64::from(x / 2) && x < acc + f64::from(x\
    \ / 2) { acc } else { x })\n  |                                              \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&isize`, found `f64`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1imn6evc.rs:8:93\n  |\n8 |         |acc, x| if\
    \ x > acc + f64::from(x / 2) && x < acc + f64::from(x / 2) { acc } else { x })\n\
    \  |                                                   "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::INFINITY, |res, e| {\n\
    \        if res < e {\n            res\n        } else {\n            res\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7w3hl5bo.rs:8:18\n  |\n8 |\
    \         if res < e {\n  |                  ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        f64::MAX\n \
    \   } else {\n        let mut mid = l.len() / 2;\n        let a = l[mid..].iter().cloned().collect::<Vec<_>>();\n\
    \        mid = a.iter().position(|e| *e < l.iter().last().unwrap()).unwrap_or(mid);\n\
    \        mid\n            .iter()\n            .zip(l.iter().cloned().collect::<Vec<_>>())\n\
    \            .map(|&(aa, bb)| *bb + (*aa < *bb))\n            .max()\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplgh__pgf.rs:12:42\n   |\n\
    12 |         mid = a.iter().position(|e| *e < l.iter().last().unwrap()).unwrap_or(mid);\n\
    \   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         mid = a.iter().position(|e| *e < *l.iter().last().unwrap()).unwrap_or(mid);\n\
    \   |                                          +\n\nerror[E0599]: no method named\
    \ `iter` found for type `usize` in the current scope\n  --> /tmp/tmplgh__pgf.rs:14:14\n\
    \   |\n14 |             .iter()\n   |              ^^^^ method not found in `usize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .fold(0.0, |sum, num|\
    \ sum + num / l.len())\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpab2qdgbc.rs:8:43\n  |\n8 |\
    \         .fold(0.0, |sum, num| sum + num / l.len())\n  |                    \
    \                       ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot divide `&isize` by `usize`\n --> /tmp/tmpab2qdgbc.rs:8:41\n  |\n8 | \
    \        .fold(0.0, |sum, num| sum + num / l.len())\n  |                     \
    \                    ^ no implementation for `&isize / usize`\n  |\n  = help:\
    \ the trait `Div<usize>` is not implemented for `&isize`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot add `isize`\
    \ to `f64`\n --> /tmp/tmpab2qdgbc.rs:8:35\n  |\n8 |         .fold(0.0, |sum, num|\
    \ sum + num / l.len())\n  |                                   ^ no implementation\
    \ for `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0f64, |acc, x| acc + x /\
    \ 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmps98kt145.rs:7:38\n\
    \  |\n7 |     l.iter().fold(0f64, |acc, x| acc + x / 2)\n  |                 \
    \                     ^ no implementation for `f64 + isize`\n  |\n  = help: the\
    \ trait `Add<isize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().map(|(i,\
    \ _)| (l.len() - i).sqrt()).filter(|x| *x != 0.0)\n        .nth(l.len() / 2).unwrap_or(0.0)\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `usize` in the current\
    \ scope\n --> /tmp/tmptx5o5z68.rs:7:62\n  |\n7 |     l.iter().cloned().enumerate().map(|(i,\
    \ _)| (l.len() - i).sqrt()).filter(|x| *x != 0.0)\n  |                       \
    \                                       ^^^^ method not found in `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.sort_unstable();\n    let\
    \ mid = l.len() / 2;\n    l.iter_mut().enumerate().for_each(|(i, v)| {\n     \
    \   if i < mid {\n            *i += 1;\n        } else {\n            *i = *i\
    \ / 2;\n        }\n    });\n    l.iter().fold(0.0, |sum, v| sum + v)\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for unit type `()` in the current\
    \ scope\n --> /tmp/tmphxtzy1hh.rs:8:17\n  |\n8 |     let mid = l.len() / 2;\n\
    \  |                 ^^^ method not found in `()`\n\nerror[E0599]: no method named\
    \ `iter_mut` found for unit type `()` in the current scope\n --> /tmp/tmphxtzy1hh.rs:9:7\n\
    \  |\n9 |     l.iter_mut().enumerate().for_each(|(i, v)| {\n  |       ^^^^^^^^\
    \ method not found in `()`\n\nerror[E0599]: no method named `iter` found for unit\
    \ type `()` in the current scope\n  --> /tmp/tmphxtzy1hh.rs:16:7\n   |\n16 | \
    \    l.iter().fold(0.0, |sum, v| sum + v)\n   |       ^^^^ method not found in\
    \ `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.len() / 2.0\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxb59apka.rs:7:13\n\
    \  |\n7 |     l.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold1(|a, e| {\n        (a + e)\
    \ / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `fold1` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpn3e3yuju.rs:7:14\n  |\n7 |     l.iter().fold1(|a,\
    \ e| {\n  |              ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.iter().fold(0.0f64,\
    \ |a, b| {\n            a > b ? a : b\n        }),\n        |a, b| {\n       \
    \     a > b ? a : b\n        })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \ --> /tmp/tmpiwo9kb8q.rs:9:21\n  |\n9 |             a > b ? a : b\n  |      \
    \               ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror:\
    \ expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n  --> /tmp/tmpiwo9kb8q.rs:12:21\n\
    \   |\n12 |             a > b ? a : b\n   |                     ^ expected one\
    \ of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to 2 previous errors\n\
    \n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n      \
    \  .fold(0, |a, (i, v)| {\n            a.min(|a, b| if a > b { a } else { b })\n\
    \        })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp98d6gf2x.rs:9:15\n  |\n9 |\
    \         .fold(0, |a, (i, v)| {\n  |               ^\n  |               |\n \
    \ |               expected `f64`, found integer\n  |               help: use a\
    \ float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp98d6gf2x.rs:10:19\n\
    \   |\n10 |             a.min(|a, b| if a > b { a } else { b })\n   |        \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found closure\n \
    \  |\n   = note: expected type `f64`\n           found closure `[closure@/tmp/tmp98d6gf2x.rs:10:19:\
    \ 10:51]`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l is vec::IntoIter<isize> || panic!(\"\
    median requires a vector of isizes\");\n    let len = l.len();\n    if len ==\
    \ 0 {\n        return panic!(\"median requires non-empty vector\");\n    }\n \
    \   if len == 1 {\n        return l[0];\n    }\n\n    let mut middle = len / 2;\n\
    \    let mut a = l[middle - 1];\n    let mut b = l[middle];\n    while a < b {\n\
    \        middle = middle / 2;\n        a = l[middle - 1];\n        b = l[middle];\n\
    \    }\n    let mut c = a;\n    while a <= b {\n        c = c + 1;\n        a\
    \ = a + 1;\n    }\n    c / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `is`\n --> /tmp/tmpjom9gu7k.rs:7:7\n  |\n7 |     l is vec::IntoIter<isize>\
    \ || panic!(\"median requires a vector of isizes\");\n  |       ^^ expected one\
    \ of 8 possible tokens\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() <= 1 {\n        0\n    } else\
    \ {\n        let l = l.iter().cloned().collect::<Vec<_>>();\n        let len =\
    \ l.len();\n        let mid = len / 2;\n        l.sort_unstable();\n        let\
    \ l0 = l[mid..].iter().cloned().collect::<Vec<_>>();\n        let l1 = l[0..mid].iter().cloned().collect::<Vec<_>>();\n\
    \        let l2 = l[mid..len].iter().cloned().collect::<Vec<_>>();\n        let\
    \ mut l = l0.iter_mut().zip(l1.iter_mut()).zip(l2.iter_mut()).map(|(a,b,c)| *a\
    \ + std::cmp::max(*b,*c)).collect::<Vec<_>>();\n        l.iter().cloned().reduce(std::cmp::max);\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj4q87y7z.rs:8:9\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     if l.len() <= 1 {\n8 |         0\n  |\
    \         ^\n  |         |\n  |         expected `f64`, found integer\n  |   \
    \      help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj4q87y7z.rs:17:78\n   |\n17 |         let mut l = l0.iter_mut().zip(l1.iter_mut()).zip(l2.iter_mut()).map(|(a,b,c)|\
    \ *a + std::cmp::max(*b,*c)).collect::<Vec<_>>();\n   |                      \
    \                                                        ^^^^^^-\n   |       \
    \                                                                       |    \
    \ |\n   |                                                                    \
    \          |     expected due to this\n   |                                  \
    \                                            expected a tuple with 2 elements,\
    \ found one with 3 elements\n   |\n   = note: expected tuple `((&mut isize, &mut\
    \ isize), &mut isize)`\n              found tuple `(_, _, _)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj4q87y7z.rs:9:12\n   |\n9  |       } else {\n\
    \   |  ____________^\n10 | |         let l = l.iter().cloned().collect::<Vec<_>>();\n\
    11 | |         let len = l.len();\n12 | |         let mid = len / 2;\n...  |\n\
    18 | |         l.iter().cloned().reduce(std::cmp::max);\n19 | |     }\n   | |_____^\
    \ expected `f64`, found `()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Find the median.\n    let mut s = l.len()\
    \ / 2;\n    if l.len() % 2 == 1 {\n        s = s + 1;\n    }\n    l.iter().cloned().sorted().first().unwrap()\
    \ + l.iter().cloned().sorted().last().unwrap() / (s.into() + 1)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmphgjssrhz.rs:12:23\n   |\n12 |     l.iter().cloned().sorted().first().unwrap()\
    \ + l.iter().cloned().sorted().last().unwrap() / (s.into() + 1)\n   |        \
    \               ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0599]: no method named `sorted` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmphgjssrhz.rs:12:69\n   |\n12 |     l.iter().cloned().sorted().first().unwrap()\
    \ + l.iter().cloned().sorted().last().unwrap() / (s.into() + 1)\n   |        \
    \                                                             ^^^^^^ method not\
    \ found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold_left(\n        l.len() /\
    \ 2,\n        |acc, x| if x > acc {\n            x\n        } else {\n       \
    \     acc\n        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `fold_left` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp4402rm0t.rs:7:14\n  |\n7 |     l.iter().fold_left(\n\
    \  |              ^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.into_iter().fold(l.len() / 2, |a, b|\
    \ if *b < a { a } else { b })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvno5_e5o.rs:7:24\n  |\n7 |\
    \     l.into_iter().fold(l.len() / 2, |a, b| if *b < a { a } else { b })\n  |\
    \                        ^^^^^^^^^^^ expected `f64`, found `usize`\n  |\nhelp:\
    \ you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n7 |     l.into_iter().fold((l.len()\
    \ / 2) as f64, |a, b| if *b < a { a } else { b })\n  |                       \
    \ +           ++++++++\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \ --> /tmp/tmpvno5_e5o.rs:7:47\n  |\n7 |     l.into_iter().fold(l.len() / 2, |a,\
    \ b| if *b < a { a } else { b })\n  |                                        \
    \       ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvno5_e5o.rs:7:67\n\
    \  |\n7 |     l.into_iter().fold(l.len() / 2, |a, b| if *b < a { a } else { b\
    \ })\n  |                                                                   ^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n7 |     l.into_iter().fold(l.len() / 2, |a, b| if *b < a { a } else { b\
    \ as f64 })\n  |                                                             \
    \        ++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, x| sum + f64::from(x.unwrap()))\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpzio7kk0o.rs:7:51\n  |\n7 |     l.iter().fold(0.0,\
    \ |sum, x| sum + f64::from(x.unwrap()))\n  |                                 \
    \                  ^^^^^^ method not found in `&isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    (l.len() / 2) as f64\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpymx15mdt.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    v.len() / 2.0\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpb8w9_2kf.rs:9:13\n\
    \  |\n9 |     v.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut a = l.iter().cloned().sorted();\n\
    \    let mut s = a.next().unwrap();\n    let mut m = 0;\n    for x in a {\n  \
    \      if x < s {\n            m = x;\n        } else {\n            s = x;\n\
    \        }\n    }\n    m\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpkfgft2x7.rs:7:35\n  |\n7 |     let mut a = l.iter().cloned().sorted();\n\
    \  |                                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkfgft2x7.rs:17:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n17 |     m\n   |     ^ expected\
    \ `f64`, found integer\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2., |a, b| {\n\
    \        if a < b {\n            a as f64\n        } else {\n            b as\
    \ f64\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp_naclgd7.rs:7:27\n\
    \  |\n7 |     l.iter().fold(l.len() / 2., |a, b| {\n  |                      \
    \     ^ no implementation for `usize / {float}`\n  |\n  = help: the trait `Div<{float}>`\
    \ is not implemented for `usize`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_naclgd7.rs:8:16\n\
    \  |\n8 |         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\
    \nerror[E0606]: casting `&isize` as `f64` is invalid\n  --> /tmp/tmp_naclgd7.rs:11:13\n\
    \   |\n11 |             b as f64\n   |             -^^^^^^^\n   |            \
    \ |\n   |             cannot cast `&isize` as `f64`\n   |             help: dereference\
    \ the expression: `*b`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0606.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut lower = l.iter().min().unwrap();\n\
    \    let mut upper = l.iter().max().unwrap();\n\n    if l.len() == 0 {\n     \
    \   std::panic!(\"median with empty input\");\n    }\n    if lower == upper {\n\
    \        0.0\n    }\n    else if lower == std::i32::MIN as f64 {\n        l.len()\
    \ / 2\n    }\n    else if upper == std::i32::MAX as f64 {\n        l.len() / 2\n\
    \    }\n    else {\n        let mid = l.len() / 2;\n        l.len() > mid ? mid\n\
    \            : l.len() < mid ? l.len() / 2 : mid\n    }\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `mid`\n\
    \  --> /tmp/tmp8oyrke90.rs:24:25\n   |\n24 |         l.len() > mid ? mid\n   |\
    \                         ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8oyrke90.rs:16:22\n   |\n16 |\
    \     else if lower == std::i32::MIN as f64 {\n   |                      ^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror[E0277]: can't compare `&isize` with `f64`\n\
    \  --> /tmp/tmp8oyrke90.rs:16:19\n   |\n16 |     else if lower == std::i32::MIN\
    \ as f64 {\n   |                   ^^ no implementation for `&isize == f64`\n\
    \   |\n   = help: the trait `PartialEq<f64>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8oyrke90.rs:17:9\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n17 |         l.len() / 2\n\
    \   |         ^^^^^^^^^^^ expected `f64`, found `usize`\n   |\nhelp: you can cast\
    \ a `usize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n17 |         (l.len() / 2) as f64\n   |        \
    \ +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8oyrke90.rs:19:22\n\
    \   |\n19 |     else if upper == std::i32::MAX as f64 {\n   |                \
    \      ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror[E0277]: can't\
    \ compare `&isize` with `f64`\n  --> /tmp/tmp8oyrke90.rs:19:19\n   |\n19 |   \
    \  else if upper == std::i32::MAX as f64 {\n   |                   ^^ no implementation\
    \ for `&isize == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n           "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut i = l.len() / 2;\n    match l.len()\
    \ % 2 {\n        0 => l[i],\n        1 => l.iter().skip(i).fold(l[i], |a, b| a\
    \ + b),\n        _ => l.iter().skip(i).take(i).fold(l[i], |a, b| a + b),\n   \
    \ }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpux1e6aeu.rs:9:14\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |         0 => l[i],\n  |             \
    \ ^^^^ expected `f64`, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpux1e6aeu.rs:10:36\n   |\n10 |         1 => l.iter().skip(i).fold(l[i],\
    \ |a, b| a + b),\n   |                                    ^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    10 |         1 => l.iter().skip(i).fold(l[i] as f64, |a, b| a + b),\n   |    \
    \                                     ++++++\n\nerror[E0277]: cannot add `&isize`\
    \ to `f64`\n  --> /tmp/tmpux1e6aeu.rs:10:51\n   |\n10 |         1 => l.iter().skip(i).fold(l[i],\
    \ |a, b| a + b),\n   |                                                   ^ no\
    \ implementation for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpux1e6aeu.rs:11:44\n\
    \   |\n11 |         _ => l.iter().skip(i).take(i).fold(l[i], |a, b| a + b),\n\
    \   |                                            ^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n11 |         _ =>\
    \ l.iter().skip(i).take(i).fold(l[i] as f64, |a, b| a + b),\n   |            \
    \                                     ++++++\n\nerror[E0277]: cannot add `&isize`\
    \ to `f64`\n  --> /tmp/tmpux1e6aeu.rs:11:59\n   |\n11 |         _ => l.iter().skip(i).take(i).fold(l[i],\
    \ |a, b| a + b),\n   |   "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    (l.len() + 1) as f64 / 2\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n --> /tmp/tmpq2rama9_.rs:7:26\n\
    \  |\n7 |     (l.len() + 1) as f64 / 2\n  |                          ^ no implementation\
    \ for `f64 / {integer}`\n  |\n  = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n7\
    \ |     (l.len() + 1) as f64 / 2.0\n  |                             ++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 1 {\n        // If odd\
    \ number of elements\n        l.len() / 2.0\n    } else {\n        let mut mid\
    \ = l.len() / 2;\n        let mut l_sorted = l.iter().cloned().sorted();\n   \
    \     let l_median = l_sorted.mid(mid);\n        l_median.len() / 2\n    }\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp89zkcicj.rs:9:17\n\
    \  |\n9 |         l.len() / 2.0\n  |                 ^ no implementation for `usize\
    \ / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0599]: no method\
    \ named `sorted` found for struct `Cloned` in the current scope\n  --> /tmp/tmp89zkcicj.rs:12:46\n\
    \   |\n12 |         let mut l_sorted = l.iter().cloned().sorted();\n   |     \
    \                                         ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdrddmun3.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut vec: Vec<_> = l.iter().cloned().collect();\n\
    \    vec.sort_unstable_by_key(|x| *x);\n    vec.len() / 2.0\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp1ftmufwl.rs:9:15\n\
    \  |\n9 |     vec.len() / 2.0\n  |               ^ no implementation for `usize\
    \ / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() <= 1 {\n        l.first().unwrap()\n\
    \    } else {\n        l.iter().cloned().sorted().last().unwrap()\n    }\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpha7mzpbt.rs:8:9\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     if l.len() <= 1 {\n8 |         l.first().unwrap()\n\
    \  |         ^^^^^^^^^^^^^^^^^^ expected `f64`, found `&isize`\n\nerror[E0599]:\
    \ no method named `sorted` found for struct `Cloned` in the current scope\n  -->\
    \ /tmp/tmpha7mzpbt.rs:10:27\n   |\n10 |         l.iter().cloned().sorted().last().unwrap()\n\
    \   |                           ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.iter().copied().collect::<Vec<_>>();\n\
    \    let n = l.len();\n    if n < 2 {\n        return l[0];\n    }\n    let mut\
    \ middle = n / 2;\n    if n % 2 == 0 {\n        middle += 1;\n    }\n    let first_pivot\
    \ = l.split_at_mut(middle).iter().copied().collect::<Vec<_>>();\n    let mut second_pivot\
    \ = l.split_at_mut(middle + 1).iter().copied().collect::<Vec<_>>();\n    let mut\
    \ res = 0.0f64;\n    for i in first_pivot {\n        res += i;\n    }\n    for\
    \ i in second_pivot {\n        res += i;\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw87mudzg.rs:10:16\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |         return l[0];\n   |         \
    \       ^^^^ expected `f64`, found `isize`\n\nerror[E0599]: no method named `iter`\
    \ found for tuple `(&mut [isize], &mut [isize])` in the current scope\n  --> /tmp/tmpw87mudzg.rs:16:46\n\
    \   |\n16 |     let first_pivot = l.split_at_mut(middle).iter().copied().collect::<Vec<_>>();\n\
    \   |                                              ^^^^ method not found in `(&mut\
    \ [isize], &mut [isize])`\n\nerror[E0599]: no method named `iter` found for tuple\
    \ `(&mut [isize], &mut [isize])` in the current scope\n  --> /tmp/tmpw87mudzg.rs:17:55\n\
    \   |\n17 |     let mut second_pivot = l.split_at_mut(middle + 1).iter().copied().collect::<Vec<_>>();\n\
    \   |                                                       ^^^^ method not found\
    \ in `(&mut [isize], &mut [isize])`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Compute median of middle two elements.\n\
    \    // If l is odd or has only one element, just return it.\n    let (left, right)\
    \ = l.split_last_mut(2);\n    if left.len() == 1 {\n        return left[0];\n\
    \    }\n    if right.len() == 1 {\n        return right[0];\n    }\n    let mid\
    \ = (left.len() / 2.) + (right.len() / 2.);\n    if left.len() <= right.len()\
    \ {\n        return left[mid];\n    } else {\n        return right[mid];\n   \
    \ }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp1m4b20kd.rs:9:27\n    |\n9   |     let (left, right) = l.split_last_mut(2);\n\
    \    |                           ^^^^^^^^^^^^^^ - supplied 1 argument\n    | \
    \                          |\n    |                           expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp1m4b20kd.rs:9:9\n  |\n9 |     let (left, right) = l.split_last_mut(2);\n\
    \  |         ^^^^^^^^^^^^^   ------------------- this expression has type `Option<(&mut\
    \ isize, &mut [isize])>`\n  |         |\n  |         expected enum `Option`, found\
    \ tuple\n  |\n  = note: expected enum `Option<(&mut isize, &mut [isize])>`\n \
    \           found tuple `(_, _)`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |x, y| f64::from(x.partial_cmp(y).unwrap().median()))\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprv6_p6ts.rs:7:55\n  |\n7 |\
    \     l.iter().fold(0.0, |x, y| f64::from(x.partial_cmp(y).unwrap().median()))\n\
    \  |                                                       ^ expected `f64`, found\
    \ `isize`\n  |\n  = note: expected reference `&f64`\n             found reference\
    \ `&isize`\n\nerror[E0599]: no method named `median` found for enum `std::cmp::Ordering`\
    \ in the current scope\n --> /tmp/tmprv6_p6ts.rs:7:67\n  |\n7 |     l.iter().fold(0.0,\
    \ |x, y| f64::from(x.partial_cmp(y).unwrap().median()))\n  |                 \
    \                                                  ^^^^^^ method not found in\
    \ `std::cmp::Ordering`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let len = l.iter().cloned().count();\n    let mut min_value = std::i32::MAX;\n\
    \    let mut max_value = std::i32::MIN;\n    let mut max_pos = 0;\n    let mut\
    \ min_pos = 0;\n    for i in 0..len {\n        if l[i] < min_value {\n       \
    \     min_value = l[i];\n            min_pos = i;\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n            max_pos = i;\n   \
    \     }\n    }\n\n    if len % 2 == 1 {\n        // even\n        let mid = len\
    \ / 2;\n        let a = l[mid];\n        let b = l[len - mid - 1];\n        if\
    \ a < b {\n            min_pos = mid;\n        } else {\n            max_pos =\
    \ mid;\n        }\n    } else {\n        // odd\n        let mid = len / 2;\n\
    \        let a = l[mid];\n        let b = l[len - mid - 1];\n        if a > b\
    \ {\n            max_pos = mid;\n        } else {\n            min_pos = mid;\n\
    \        }\n    }\n\n    // linear search to find the median\n    let mut middle\
    \ = len / 2;\n    while len > 1 {\n        let middle = middle/2;\n        if\
    \ min_value == l[middle] {\n            min_pos = middle;\n        } else if max_value\
    \ == l[middle] {\n            max_pos = middle;\n        } else {\n          \
    \  break;\n        }\n        len -= middle;\n    }\n\n    len\n        .checked_sub(min_pos)\n\
    \        .checked_add(max_pos - min_pos)\n        .checked_div(2)\n        .unwrap_or(std::i32::MAX)\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphrazit2l.rs:14:19\n   |\n\
    14 |         if l[i] < min_value {\n   |                   ^^^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n14 |         if l[i] < min_value.try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphrazit2l.rs:15:25\n   |\n9  |     let mut min_value = std::i32::MAX;\n\
    \   |                         ------------- expected due to this value\n...\n\
    15 |             min_value = l[i];\n   |                         ^^^^ expected\
    \ `i32`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrazit2l.rs:18:19\n\
    \   |\n18 |         if l[i] > max_value {\n   |                   ^^^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n18 |         if l[i] > max_value.try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphrazit2l.rs:19:25\n   |\n10 |     let mut max_value = std::i32::MIN;\n\
    \   |                         ------------- expected due to this value\n...\n\
    19 |             max_value = l[i];\n   |                         ^^^^ expected\
    \ `i32`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrazit2l.rs:50:25\n\
    \   |\n50 |         if min_value == l[middle] {\n   |                        \
    \ ^^^^^^^^^ expected `i32`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `i32` and panic if the converted value doesn't fit\n   |\n50 |       \
    \  if min_value == l[middle].try_into().unwrap() {\n   |                     \
    \             ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrazit2l.rs:52:32\n\
    \   |\n52 |         } else if max_value == l[middle] {\n   |                 \
    \               ^^^^^^^^^ expected `i32`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `i32` and panic if the converted value doesn't fit\n   |\n\
    52 |         } else if max_value =="
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Calculate the median using the median\
    \ of medians algorithm.\n    // See https://en.wikipedia.org/wiki/Median#Medians_of_medians.\n\
    \    let mut l = l.to_vec();\n    let mut len = l.len();\n    if len == 0 {\n\
    \        return 0.0;\n    }\n    let mut mid = len / 2;\n    let mut res = 0.0f64;\n\
    \    while let Some(elem) = l.get_mut(mid) {\n        if elem < res {\n      \
    \      res = elem;\n        }\n        mid -= 1;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5evqxj3q.rs:17:19\n   |\n\
    17 |         if elem < res {\n   |                   ^^^ expected `&mut isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5evqxj3q.rs:18:19\n\
    \   |\n15 |     let mut res = 0.0f64;\n   |                   ------ expected\
    \ due to this value\n...\n18 |             res = elem;\n   |                 \
    \  ^^^^ expected `f64`, found `&mut isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() <= 1 {\n        return l.iter().max().unwrap_or(0.0);\n\
    \    }\n    let mut n = l.len();\n    let mut center = l.iter().fold(0.0, |center,\
    \ x| {\n        if x < center { x } else { center }\n    });\n    if n < 2 {\n\
    \        return center;\n    }\n    let mut q = n/2;\n    let mut i = 0;\n   \
    \ let mut min_j = n - 1;\n    while i < min_j {\n        if l[i] < center { i\
    \ += 1; }\n        else { min_j -= 1; }\n    }\n    if center == l[i] {\n    \
    \    return l[i];\n    }\n    if l[min_j] == center {\n        return l[min_j];\n\
    \    }\n    let mut j = min_j;\n    while j > i {\n        let min_i = i + 1;\n\
    \        let min_p = center;\n        if min_i < n {\n            if l[min_i]\
    \ < center {\n                min_p = l[min_i];\n                min_i = i;\n\
    \            }\n        }\n        if l[j] < min_p {\n            return l[j];\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    return center;\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptjgokh9s.rs:8:41\n  |\n8 |\
    \         return l.iter().max().unwrap_or(0.0);\n  |                         \
    \                ^^^ expected `&isize`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmptjgokh9s.rs:8:16\n  |\n6 | fn median(l: Vec<isize>)\
    \ -> f64 {\n  |                             --- expected `f64` because of return\
    \ type\n7 |     if l.len() <= 1 {\n8 |         return l.iter().max().unwrap_or(0.0);\n\
    \  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptjgokh9s.rs:12:16\n   |\n12 |\
    \         if x < center { x } else { center }\n   |                ^^^^^^ expected\
    \ `&isize`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptjgokh9s.rs:12:25\n   |\n12 |         if x < center { x } else { center\
    \ }\n   |                         ^ expected floating-point number, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptjgokh9s.rs:21:19\n   |\n21 |\
    \         if l[i] < center { i += 1; }\n   |                   ^^^^^^ expected\
    \ `isize`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptjgokh9s.rs:24:18\n   |\n24 |     if center == l[i] {\n   |        \
    \          ^^^^ expected floating-point number, found `isize`\n\nerror[E0277]:\
    \ can't compare `{float}` with `isize`\n  --> /tmp/tmptjgokh9s.rs:24:15\n   |\n\
    24 |     if center == l[i] {\n   |               ^^ no implementation for `{float}\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptjgokh9s.rs:27:20\n\
    \   |\n27 |     if l[min_j] == center {\n   |                    ^^^^^^ expected\
    \ `isize`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptjgokh9s.rs:35:27\n   |\n35 |             i"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::INFINITY, (|a, x| {\n\
    \        if a > x {\n            a\n        } else {\n            x\n        }\n\
    \    }) + f64::INFINITY) / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `f64` to `[closure@/tmp/tmp9awamqis.rs:7:34: 13:7]`\n\
    \  --> /tmp/tmp9awamqis.rs:13:8\n   |\n7  |       l.iter().fold(f64::INFINITY,\
    \ (|a, x| {\n   |  __________________________________-\n8  | |         if a >\
    \ x {\n9  | |             a\n10 | |         } else {\n11 | |             x\n12\
    \ | |         }\n13 | |     }) + f64::INFINITY) / 2\n   | |      - ^ -------------\
    \ f64\n   | |______|\n   |        [closure@/tmp/tmp9awamqis.rs:7:34: 13:7]\n\n\
    error[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmp9awamqis.rs:13:25\n\
    \   |\n13 |     }) + f64::INFINITY) / 2\n   |                         ^ no implementation\
    \ for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n13 |     }) + f64::INFINITY) / 2.0\n   |                       \
    \     ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.len() / 2;\n    let mut l\
    \ = l[..m];\n    l.sort();\n    l[m..].iter().fold(0.0, |a, b| f64::max(b, a)\
    \ / f64::max(a, b))\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmpztobjqu7.rs:8:9\n  |\n8 |     let mut l = l[..m];\n\
    \  |         ^^^^^ doesn't have a size known at compile-time\n  |\n  = help: the\
    \ trait `Sized` is not implemented for `[isize]`\n  = note: all local variables\
    \ must have a statically known size\n  = help: unsized locals are gated as an\
    \ unstable feature\nhelp: consider borrowing here\n  |\n8 |     let mut l = &l[..m];\n\
    \  |                 +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztobjqu7.rs:10:45\n\
    \   |\n10 |     l[m..].iter().fold(0.0, |a, b| f64::max(b, a) / f64::max(a, b))\n\
    \   |                                             ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpztobjqu7.rs:10:65\n   |\n10 |\
    \     l[m..].iter().fold(0.0, |a, b| f64::max(b, a) / f64::max(a, b))\n   |  \
    \                                                               ^ expected `f64`,\
    \ found `&isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, &x|\
    \ a + (x / 2))\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmp4es5hl15.rs:7:48\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |a, &x| a + (x / 2))\n  |     \
    \                                           ^ no implementation for `f64 + isize`\n\
    \  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().map(|(_, e)| {\n \
    \       assert!(e % 2 == 0);\n        e / 2\n    }).max().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq78qsy8w.rs:7:5\n   |\n6\
    \  |   fn median(l: Vec<isize>) -> f64 {\n   |                               ---\
    \ expected `f64` because of return type\n7  | /     l.iter().enumerate().map(|(_,\
    \ e)| {\n8  | |         assert!(e % 2 == 0);\n9  | |         e / 2\n10 | |   \
    \  }).max().unwrap()\n   | |_____________________^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     }).max().unwrap()\
    \ as f64\n   |                       ++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut r = vec![l.len() as f64].into_iter().map(|&v|\
    \ v as f64).sum();\n    for v in l {\n        if r < v {\n            r = v;\n\
    \        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfha5c_9b.rs:7:55\n  |\n7 |\
    \     let mut r = vec![l.len() as f64].into_iter().map(|&v| v as f64).sum();\n\
    \  |                                                       ^--\n  |          \
    \                                             ||\n  |                        \
    \                               |expected due to this\n  |                   \
    \                                    expected `f64`, found reference\n  |    \
    \                                                   help: did you mean `v`: `&f64`\n\
    \  |\n  = note:   expected type `f64`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpfha5c_9b.rs:7:69\n\
    \     |\n7    |     let mut r = vec![l.len() as f64].into_iter().map(|&v| v as\
    \ f64).sum();\n     |                                                        \
    \             ^^^ the trait `Sum<f64>` is not implemented for `isize`\n     |\n\
    \     = help: the following other types implement trait `Sum<A>`:\n          \
    \     <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfha5c_9b.rs:13:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |\
    \                             --- expected `f64` because of return type\n...\n\
    13 |     r\n   |     ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n13 |     r as f64\n   |       ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().filter_map(|(i,\
    \ e)|\n        if i < l.len() / 2 {\n            Some(e * 2.0 / l.len())\n   \
    \     } else {\n            None\n        }\n    ).collect()\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n --> /tmp/tmpf1w_7kr_.rs:9:20\n\
    \  |\n9 |             Some(e * 2.0 / l.len())\n  |                    ^ no implementation\
    \ for `isize * {float}`\n  |\n  = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n  = help: the following other types implement trait `Mul<Rhs>`:\n\
    \            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n      \
    \      <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n          \
    \  <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a\
    \ i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\
    \nerror[E0277]: a value of type `f64` cannot be built from an iterator over elements\
    \ of type `_`\n    --> /tmp/tmpf1w_7kr_.rs:13:7\n     |\n13   |     ).collect()\n\
    \     |       ^^^^^^^ value of type `f64` cannot be built from `std::iter::Iterator<Item=_>`\n\
    \     |\n     = help: the trait `FromIterator<_>` is not implemented for `f64`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Sort and find the middle\n    let mut\
    \ s = l.iter().sorted();\n    match s.len() {\n        0 => 0.0,\n        _ =>\
    \ s[s.len() / 2].0 + s[s.len() / 2].1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp66b_3d7u.rs:8:26\n  |\n8 |     let mut s\
    \ = l.iter().sorted();\n  |                          ^^^^^^ method not found in\
    \ `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold_left(\n        vec![1],\n\
    \        |mut v, e| {\n            if v[0] == e {\n                v\n       \
    \     } else {\n                vec![v.iter().next().unwrap(), e].into_iter()\n\
    \            }\n        },\n    )\n    .iter()\n    .fold(\n        vec![],\n\
    \        |mut v, e| {\n            if v[0] == e {\n                v.push(*e);\n\
    \            } else {\n                let x = v.pop();\n                v.push(*e\
    \ + x / 2);\n            }\n        },\n    )\n    .into_iter()\n    .collect()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `fold_left` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpaajxswjp.rs:7:14\n  |\n7 |     l.iter().fold_left(\n\
    \  |              ^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.len() / 2.0\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxb59apka.rs:7:13\n\
    \  |\n7 |     l.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.len() as f64;\n    s.check();\n\
    \    let mut mid = s.floor();\n    if l.len() % 2 == 0 {\n        while l [mid..mid+2]\
    \ > s.iter().map(|x| x as f64).max().unwrap() {\n            mid = (mid + s.iter().map(|x|\
    \ x as f64).max().unwrap() + 1) / 2;\n        }\n    } else {\n        while l\
    \ [mid..mid+2] < s.iter().map(|x| x as f64).min().unwrap() {\n            mid\
    \ = (mid + s.iter().map(|x| x as f64).min().unwrap() - 1) / 2;\n        }\n  \
    \  }\n    l.iter().map(|x| x as f64).filter(|x| x % 2 == 0).max().unwrap()\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `check` found for type `f64` in the current\
    \ scope\n --> /tmp/tmpoje1ftwa.rs:8:7\n  |\n8 |     s.check();\n  |       ^^^^^\
    \ method not found in `f64`\n\nerror[E0277]: cannot add `{integer}` to `f64`\n\
    \  --> /tmp/tmpoje1ftwa.rs:11:26\n   |\n11 |         while l [mid..mid+2] > s.iter().map(|x|\
    \ x as f64).max().unwrap() {\n   |                          ^ no implementation\
    \ for `f64 + {integer}`\n   |\n   = help: the trait `Add<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         while l [mid..mid+2.0] > s.iter().map(|x| x as f64).max().unwrap()\
    \ {\n   |                            ++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `std::ops::Range<f64>`\n  --> /tmp/tmpoje1ftwa.rs:11:15\n   |\n\
    11 |         while l [mid..mid+2] > s.iter().map(|x| x as f64).max().unwrap()\
    \ {\n   |               ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `std::ops::Range<f64>`\n   = help: the following other types implement trait\
    \ `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<f64>>` for\
    \ `Vec<isize>`\n\nerror[E0599]: no method named `iter` found for type `f64` in\
    \ the current scope\n  --> /tmp/tmpoje1ftwa.rs:11:34\n   |\n11 |         while\
    \ l [mid..mid+2] > s.iter().map(|x| x as f64).max().unwrap() {\n   |         \
    \                         ^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `iter` found for type `f64` in "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    l.len()\
    \ / 2.0\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpuki2mnat.rs:9:13\n\
    \  |\n9 |     l.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    (l.len() / 2) as f64\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpymx15mdt.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort_unstable();\n\
    \    if l.len() == 1 {\n        l.iter().next().unwrap()\n    } else {\n     \
    \   l.iter()\n            .windows(2)\n            .map(|x| x.iter().next().unwrap())\n\
    \            .filter(|x| x.is_some())\n            .median()\n            .unwrap()\n\
    \            .unwrap()\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmqxnjtkp.rs:10:9\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |         l.iter().next().unwrap()\n \
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&isize`\n\nerror[E0599]:\
    \ no method named `windows` found for struct `std::slice::Iter` in the current\
    \ scope\n  --> /tmp/tmpmqxnjtkp.rs:13:14\n   |\n13 |             .windows(2)\n\
    \   |              ^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n      \
    \  .filter((i, v) => i % 2 == 0)\n        .fold(\n            (0..l.len() / 2).fold(f64::NAN,\
    \ f64::NAN),\n            |prev, index| {\n                let mut v = prev;\n\
    \                if index < 2 * index {\n                    v += v[index];\n\
    \                }\n                v\n            },\n        )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \ --> /tmp/tmpbsqo6gdj.rs:9:24\n  |\n9 |         .filter((i, v) => i % 2 == 0)\n\
    \  |                        ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2.0, |acc, val|\
    \ {\n        // round the result to nearest even number\n        acc.floor() as\
    \ f64 + acc.fract() * (l.len() - acc.floor() as f64) / l.len() as f64\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpafgi_f5n.rs:7:27\n\
    \  |\n7 |     l.iter().fold(l.len() / 2.0, |acc, val| {\n  |                 \
    \          ^ no implementation for `usize / {float}`\n  |\n  = help: the trait\
    \ `Div<{float}>` is not implemented for `usize`\n  = help: the following other\
    \ types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n     \
    \       <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n         \
    \   <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a\
    \ i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as\
    \ Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot subtract `f64`\
    \ from `usize`\n --> /tmp/tmpafgi_f5n.rs:9:53\n  |\n9 |         acc.floor() as\
    \ f64 + acc.fract() * (l.len() - acc.floor() as f64) / l.len() as f64\n  |   \
    \                                                  ^ no implementation for `usize\
    \ - f64`\n  |\n  = help: the trait `Sub<f64>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut l = l.into_iter().collect::<Vec<_>>();\n\
    \    l.sort();\n\n    if n % 2 == 0 {\n        l.iter().fold(\n            Some(l.len()\
    \ / 2),\n            |x, y| if x <= y { Some(x) } else { Some(y) },\n        )\n\
    \    } else {\n        l.iter().fold(\n            Some(l.len() / 2),\n      \
    \      |x, y| if x >= y { Some(x) } else { Some(y) },\n        )\n    }\n    .unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_jr65gk.rs:14:28\n   |\n\
    14 |             |x, y| if x <= y { Some(x) } else { Some(y) },\n   |        \
    \                    ^ expected enum `Option`, found `&isize`\n   |\n   = note:\
    \   expected enum `Option<usize>`\n           found reference `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj_jr65gk.rs:14:37\n   |\n14 |             |x,\
    \ y| if x <= y { Some(x) } else { Some(y) },\n   |                           \
    \          ^ expected `usize`, found enum `Option`\n   |\n   = note: expected\
    \ type `usize`\n              found enum `Option<usize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj_jr65gk.rs:14:54\n   |\n14 |             |x, y| if x <=\
    \ y { Some(x) } else { Some(y) },\n   |                                      \
    \                ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj_jr65gk.rs:19:28\n   |\n19 |             |x, y| if x >=\
    \ y { Some(x) } else { Some(y) },\n   |                            ^ expected\
    \ enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<usize>`\n\
    \           found reference `&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj_jr65gk.rs:19:37\n   |\n19 |             |x, y| if x >= y { Some(x)\
    \ } else { Some(y) },\n   |                                     ^ expected `usize`,\
    \ found enum `Option`\n   |\n   = note: expected type `usize`\n              found\
    \ enum `Option<usize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_jr65gk.rs:19:54\n\
    \   |\n19 |             |x, y| if x >= y { Some(x) } else { Some(y) },\n   | \
    \                                                     ^ expected `usize`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_jr65gk.rs:11:5\n\
    \   |\n6  |   fn median(l: Vec<isize>) -> f64 {\n   |                        \
    \       --- expected `f64` because of return type\n...\n11 | /     if n % 2 ==\
    \ 0 {\n12 | |         l.iter().fold(\n13 | |             Some(l.len() / 2),\n\
    14 | |             |x, y| if x <= y { Some(x) } else { Some(y) },\n...  |\n21\
    \ | |     }\n22 | |     .unwrap()\n   | |_____________^ expected `f64`, fo"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    l.sort_unstable();\n    let mut middle = l.len() / 2;\n    let lower = if\
    \ l.len() % 2 == 0 {\n        middle\n    } else {\n        middle - 1\n    };\n\
    \    let upper = middle + 1;\n    l.swap(lower, upper);\n    let mut mid = 0;\n\
    \    for i in 0..l.len() {\n        if i == lower || i == upper {\n          \
    \  continue;\n        }\n        if mid == 0 || l[i] < l[mid - 1] {\n        \
    \    l[i] = l[mid];\n            mid += 1;\n        } else {\n            l[i]\
    \ = l[mid - 1];\n            mid -= 1;\n        }\n    }\n    l[middle - 1]\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2i186w00.rs:30:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n30 |     l[middle - 1]\n   |     ^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0, |a, &x| a.checked_add((*x).abs().floor()\
    \ as f64) / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdcwt7snq.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |a, &x| a.checked_add((*x).abs().floor() as f64) / 2)\n\
    \  |                   ^\n  |                   |\n  |                   expected\
    \ `f64`, found integer\n  |                   help: use a float literal: `0.0`\n\
    \nerror[E0599]: no method named `checked_add` found for type `f64` in the current\
    \ scope\n --> /tmp/tmpdcwt7snq.rs:7:32\n  |\n7 |     l.iter().fold(0, |a, &x|\
    \ a.checked_add((*x).abs().floor() as f64) / 2)\n  |                         \
    \       ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpdcwt7snq.rs:7:44\n  |\n7 |     l.iter().fold(0,\
    \ |a, &x| a.checked_add((*x).abs().floor() as f64) / 2)\n  |                 \
    \                           ^^^^\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() <= 1 {\n        return l[0];\n\
    \    }\n    let mut s = l.iter().fold(0.0, |mut s, e| s + e);\n    l.sort_unstable();\n\
    \    s / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpazgwdott.rs:8:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     if l.len() <= 1 {\n8 |         return\
    \ l[0];\n  |                ^^^^ expected `f64`, found `isize`\n\nerror[E0277]:\
    \ cannot add `&isize` to `{float}`\n  --> /tmp/tmpazgwdott.rs:10:49\n   |\n10\
    \ |     let mut s = l.iter().fold(0.0, |mut s, e| s + e);\n   |              \
    \                                   ^ no implementation for `{float} + &isize`\n\
    \   |\n   = help: the trait `Add<&isize>` is not implemented for `{float}`\n \
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \  <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot divide `{float}` by `usize`\n  --> /tmp/tmpazgwdott.rs:12:7\n   |\n12\
    \ |     s / l.len()\n   |       ^ no implementation for `{float} / usize`\n  \
    \ |\n   = help: the trait `Div<usize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0, |sum, e| sum + e) as f64\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15.0`,\n right: `3.0`', /tmp/tmpeu1pt6js.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() > 1 {\n        let mut q: f64\
    \ = l.len() / 2.0;\n        let mut l0: Vec<isize> = l.clone();\n        l0.sort();\n\
    \        let mut l1: Vec<isize> = l.clone();\n        l1.sort();\n        while\
    \ l0.len() > 0 && l1.len() > 0 {\n            let mut l0i = l0.len() - 1;\n  \
    \          let mut l1i = l1.len() - 1;\n            if l0i < l1i {\n         \
    \       if l0i < q {\n                    l0.pop();\n                    q -=\
    \ l0i;\n                } else {\n                    l1.pop();\n            \
    \        q -= l1i;\n                }\n            } else {\n                if\
    \ l1i < q {\n                    l1.pop();\n                    q -= l1i;\n  \
    \              } else {\n                    l0.pop();\n                    q\
    \ -= l0i;\n                }\n            }\n        }\n        q\n    } else\
    \ {\n        l.len() / 2\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpdfglhdgk.rs:8:34\n\
    \  |\n8 |         let mut q: f64 = l.len() / 2.0;\n  |                       \
    \           ^ no implementation for `usize / {float}`\n  |\n  = help: the trait\
    \ `Div<{float}>` is not implemented for `usize`\n  = help: the following other\
    \ types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n     \
    \       <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n         \
    \   <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a\
    \ i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as\
    \ Div<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdfglhdgk.rs:17:26\n   |\n17 |                 if l0i < q {\n   |   \
    \                       ^ expected `usize`, found `f64`\n\nerror[E0277]: cannot\
    \ subtract-assign `usize` from `f64`\n  --> /tmp/tmpdfglhdgk.rs:19:23\n   |\n\
    19 |                     q -= l0i;\n   |                       ^^ no implementation\
    \ for `f64 -= usize`\n   |\n   = help: the trait `SubAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract-assign `usize` from `f64`\n  -->\
    \ /tmp/tmpdfglhdgk.rs:22:23\n   |\n22 |                     q -= l1i;\n   |  \
    \                     ^^ no implementation for `f64 -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n  "
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |median, item| {\n            median - f64::from(item) / f64::from(l.len()\
    \ - 1.0)\n        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmph2vi6pv2.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n  --> /tmp/tmph2vi6pv2.rs:10:22\n\
    \   |\n10 |             median - f64::from(item) / f64::from(l.len() - 1.0)\n\
    \   |                      ^^^^^^^^^ the trait `From<&isize>` is not implemented\
    \ for `f64`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <f32 as From<i16>>\n             <f32 as From<i8>>\n           \
    \  <f32 as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0277]: cannot subtract\
    \ `{float}` from `usize`\n  --> /tmp/tmph2vi6pv2.rs:10:58\n   |\n10 |        \
    \     median - f64::from(item) / f64::from(l.len() - 1.0)\n   |              \
    \                                            ^ no implementation for `usize -\
    \ {float}`\n   |\n   = help: the trait `Sub<{float}>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return -1.0;\n\
    \    }\n\n    if l.len() <= 1 {\n        return l[0] as f64;\n    }\n\n    let\
    \ mut count = 0;\n    let mut min_val = l[0];\n    for v in l.iter().skip(1) {\n\
    \        min_val = std::cmp::min(min_val, v);\n        count += 1;\n    }\n\n\
    \    if count / 2 <= 1 {\n        min_val\n    } else {\n        let mut m = (min_val\
    \ + l[l.len() - 1]) / 2.0;\n        let i = 1;\n        for v in l.iter().skip(1)\
    \ {\n            if std::cmp::min(v, (m + v) / 2.0) < m {\n                m =\
    \ v as f64;\n                i += 1;\n            }\n        }\n        i / 2.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn_g6cpkt.rs:18:42\n   |\n\
    18 |         min_val = std::cmp::min(min_val, v);\n   |                      \
    \                    ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n18 |         min_val = std::cmp::min(min_val,\
    \ *v);\n   |                                          +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn_g6cpkt.rs:23:9\n   |\n6  | fn median(l: Vec<isize>) ->\
    \ f64 {\n   |                             --- expected `f64` because of return\
    \ type\n...\n23 |         min_val\n   |         ^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n23 |      \
    \   min_val as f64\n   |                 ++++++\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpn_g6cpkt.rs:25:48\n   |\n25 |         let\
    \ mut m = (min_val + l[l.len() - 1]) / 2.0;\n   |                            \
    \                    ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn_g6cpkt.rs:29:21\n   |\n25 |         let mut m = (min_val\
    \ + l[l.len() - 1]) / 2.0;\n   |                     --------------------------------\
    \ expected due to this value\n...\n29 |                 m = v as f64;\n   |  \
    \                   ^^^^^^^^ expected `&isize`, found `f64`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpn_g6cpkt.rs:28:41\n   |\n28 |   \
    \          if std::cmp::min(v, (m + v) / 2.0) < m {\n   |                    \
    \                     ^ no implementation for `isize / {float}`\n   |\n   = help"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut q = (l.len() + 1) >> 1;\n    loop\
    \ {\n        if l.len() < 2 {\n            break;\n        }\n        q = q /\
    \ 2.0;\n        let mut med = l[q as usize / 2];\n        for (i, &v) in l.iter().enumerate()\
    \ {\n            if v < med {\n                med = v;\n            }\n     \
    \   }\n        q = q * 2;\n    }\n    med\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `med` in this scope\n  --> /tmp/tmpjz_rcyjv.rs:21:5\n\
    \   |\n21 |     med\n   |     ^^^ not found in this scope\n\nerror[E0277]: cannot\
    \ divide `usize` by `{float}`\n  --> /tmp/tmpjz_rcyjv.rs:12:15\n   |\n12 |   \
    \      q = q / 2.0;\n   |               ^ no implementation for `usize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `usize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.is_odd()\
    \ ? a : ((a + b) / 2.0 - a)\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \ --> /tmp/tmpe7dc48mz.rs:8:22\n  |\n8 |         b.is_odd() ? a : ((a + b) / 2.0\
    \ - a)\n  |                      ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut len = l.len();\n    if len < 2\
    \ {\n        return l[0];\n    }\n    let half = len / 2;\n    l.sort_unstable();\n\
    \    l.partition(|&i| i < half);\n    l.iter().filter(|&i| i >= half).fold(l[0],\
    \ |a, b| {\n        if a < b {\n            a\n        } else {\n            b\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzypaltvb.rs:9:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |         return l[0];\n  |           \
    \     ^^^^ expected `f64`, found `isize`\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmpzypaltvb.rs:13:7\n    |\n13  |       l.partition(|&i|\
    \ i < half);\n    |         ^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzypaltvb.rs:14:31\n\
    \   |\n14 |     l.iter().filter(|&i| i >= half).fold(l[0], |a, b| {\n   |    \
    \                           ^^^^ expected `&isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzypaltvb.rs:14:42\n   |\n14 |     l.iter().filter(|&i|\
    \ i >= half).fold(l[0], |a, b| {\n   |                                       \
    \   ^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n14 |     l.iter().filter(|&i| i >= half).fold(l[0] as f64,\
    \ |a, b| {\n   |                                               ++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzypaltvb.rs:15:16\n   |\n15 |         if a <\
    \ b {\n   |                ^ expected `f64`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzypaltvb.rs:18:13\n   |\n18 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n      \
    \  .fold(l.len() / 2.0 - l[0] / 2.0, |acc, (n, _)| {\n            acc.checked_add(n\
    \ * n as f64).unwrap();\n            acc\n        })\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpziamzhuj.rs:9:23\n\
    \  |\n9 |         .fold(l.len() / 2.0 - l[0] / 2.0, |acc, (n, _)| {\n  |     \
    \                  ^ no implementation for `usize / {float}`\n  |\n  = help: the\
    \ trait `Div<{float}>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n --> /tmp/tmpziamzhuj.rs:9:36\n  |\n9 |         .fold(l.len()\
    \ / 2.0 - l[0] / 2.0, |acc, (n, _)| {\n  |                                   \
    \ ^ no implementation for `isize / {float}`\n  |\n  = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror[E0599]: no method named `checked_add` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpziamzhuj.rs:10:17\n   |\n10 |          \
    \   acc.checked_add(n * n as f64).unwrap();\n   |                 ^^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0277]: cannot multiply `usize` by `f64`\n\
    \  --> /tmp/tmpziamzhuj.rs:10:31\n   |\n10 |             acc.checked_add(n * n\
    \ as f64).unwrap();\n   |                               ^ no implementation for\
    \ `usize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \    "
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.iter().fold(f64::max, |a,\
    \ b| a.max(b));\n    m / f64::from(l.len())\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `max` exists for fn item `fn(f64, f64) -> f64\
    \ {core::f64::<impl f64>::max}`, but its trait bounds were not satisfied\n -->\
    \ /tmp/tmpg_voyt0a.rs:7:50\n  |\n7 |     let mut m = l.iter().fold(f64::max, |a,\
    \ b| a.max(b));\n  |                                                - ^^^ method\
    \ cannot be called on `fn(f64, f64) -> f64 {core::f64::<impl f64>::max}` due to\
    \ unsatisfied trait bounds\n  |                                              \
    \  |\n  |                                                this is a function, perhaps\
    \ you wish to call it\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `fn(f64, f64) -> f64 {core::f64::<impl f64>::max}: Ord`\n         \
    \ which is required by `&fn(f64, f64) -> f64 {core::f64::<impl f64>::max}: Ord`\n\
    \          `fn(f64, f64) -> f64 {core::f64::<impl f64>::max}: Ord`\n         \
    \ which is required by `&mut fn(f64, f64) -> f64 {core::f64::<impl f64>::max}:\
    \ Ord`\n          `fn(f64, f64) -> f64 {core::f64::<impl f64>::max}: Iterator`\n\
    \          which is required by `&mut fn(f64, f64) -> f64 {core::f64::<impl f64>::max}:\
    \ Iterator`\n\nerror[E0277]: the trait bound `f64: From<usize>` is not satisfied\n\
    \ --> /tmp/tmpg_voyt0a.rs:8:9\n  |\n8 |     m / f64::from(l.len())\n  |      \
    \   ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n  |\n  = help:\
    \ the following other types implement trait `From<T>`:\n            <f32 as From<i16>>\n\
    \            <f32 as From<i8>>\n            <f32 as From<u16>>\n            <f32\
    \ as From<u8>>\n            <f64 as From<f32>>\n            <f64 as From<i16>>\n\
    \            <f64 as From<i32>>\n            <f64 as From<i8>>\n          and\
    \ 67 others\n\nerror[E0369]: cannot divide `fn(f64, f64) -> f64 {core::f64::<impl\
    \ f64>::max}` by `f64`\n --> /tmp/tmpg_voyt0a.rs:8:7\n  |\n8 |     m / f64::from(l.len())\n\
    \  |     - ^ ------------------ f64\n  |     |\n  |     fn(f64, f64) -> f64 {core::f64::<impl\
    \ f64>::max}\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369, E0599.\nFor more information about an error, try\
    \ `rustc -"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = (l.len() + 1) >> 1;\n    m\
    \ += std::cmp::min(l.len() / 2, 1);\n    (l.len() - m).min(m).median()\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `median` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpj0mjc01u.rs:9:26\n  |\n9 |     (l.len() - m).min(m).median()\n\
    \  |                          ^^^^^^ method not found in `usize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.iter().min(),\n\
    \        |mut min, elem| {\n            if elem < min {\n                min =\
    \ elem;\n            }\n            min\n        },\n    )\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplo_whcan.rs:8:9\n  |\n8 |\
    \         l.iter().min(),\n  |         ^^^^^^^^^^^^^^ expected `f64`, found enum\
    \ `Option`\n  |\n  = note: expected type `f64`\n             found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplo_whcan.rs:10:23\n   |\n10 |\
    \             if elem < min {\n   |                       ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplo_whcan.rs:11:23\n\
    \   |\n9  |         |mut min, elem| {\n   |              --- expected due to this\
    \ parameter type\n10 |             if elem < min {\n11 |                 min =\
    \ elem;\n   |                       ^^^^ expected `f64`, found `&isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().map(|(i, x)| {\n \
    \       if x.len() > i {\n            x.len() as f64 / f64::from(x.len())\n  \
    \      } else {\n            x.len() as f64 / f64::from(1.0).sqrt()\n        }\n\
    \    }).sum() / f64::from(l.len())\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmpuygmfpxj.rs:8:14\n  |\n8 |         if x.len() >\
    \ i {\n  |              ^^^ method not found in `&isize`\n\nerror[E0599]: no method\
    \ named `len` found for reference `&isize` in the current scope\n --> /tmp/tmpuygmfpxj.rs:9:15\n\
    \  |\n9 |             x.len() as f64 / f64::from(x.len())\n  |               ^^^\
    \ method not found in `&isize`\n\nerror[E0599]: no method named `len` found for\
    \ reference `&isize` in the current scope\n --> /tmp/tmpuygmfpxj.rs:9:42\n  |\n\
    9 |             x.len() as f64 / f64::from(x.len())\n  |                     \
    \                     ^^^ method not found in `&isize`\n\nerror[E0599]: no method\
    \ named `len` found for reference `&isize` in the current scope\n  --> /tmp/tmpuygmfpxj.rs:11:15\n\
    \   |\n11 |             x.len() as f64 / f64::from(1.0).sqrt()\n   |         \
    \      ^^^ method not found in `&isize`\n\nerror[E0277]: the trait bound `f64:\
    \ From<usize>` is not satisfied\n  --> /tmp/tmpuygmfpxj.rs:13:16\n   |\n13 | \
    \    }).sum() / f64::from(l.len())\n   |                ^^^^^^^^^ the trait `From<usize>`\
    \ is not implemented for `f64`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <f32 as From<i16>>\n             <f32 as From<i8>>\n\
    \             <f32 as From<u16>>\n             <f32 as From<u8>>\n           \
    \  <f64 as From<f32>>\n             <f64 as From<i16>>\n             <f64 as From<i32>>\n\
    \             <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len < 2 {\n\
    \        return l.len() as f64;\n    }\n    let pivot = len / 2;\n    let mut\
    \ left = l.iter().take(pivot).collect::<Vec<isize>>();\n    let right = l.iter().skip(pivot).collect::<Vec<isize>>();\n\
    \    left + median(right)\n}\n\nfn main() {\n    let candidate = median;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmprru31i08.rs:12:41\n     |\n\
    12   |     let mut left = l.iter().take(pivot).collect::<Vec<isize>>();\n    \
    \ |                                         ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n    --> /tmp/tmprru31i08.rs:13:38\n\
    \     |\n13   |     let right = l.iter().skip(pivot).collect::<Vec<isize>>();\n\
    \     |                                      ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0369]: cannot add `f64` to `Vec<isize>`\n\
    \  --> /tmp/tmprru31i08.rs:14:10\n   |\n14 |     left + median(right)\n   |  \
    \   ---- ^ ------------- f64\n   |     |\n   |     Vec<isize>\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().take(l.len() / 2).fold(f64::nan,\
    \ |sum, e| sum + e / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpkcfcbfvr.rs:7:42\n  |\n7 |     l.iter().take(l.len()\
    \ / 2).fold(f64::nan, |sum, e| sum + e / 2)\n  |                             \
    \             ^^^\n  |                                          |\n  |       \
    \                                   function or associated item not found in `f64`\n\
    \  |                                          help: there is an associated function\
    \ with a similar name: `is_nan`\n\nerror[E0277]: cannot add `isize` to `f64`\n\
    \ --> /tmp/tmpkcfcbfvr.rs:7:60\n  |\n7 |     l.iter().take(l.len() / 2).fold(f64::nan,\
    \ |sum, e| sum + e / 2)\n  |                                                 \
    \           ^ no implementation for `f64 + isize`\n  |\n  = help: the trait `Add<isize>`\
    \ is not implemented for `f64`\n  = help: the following other types implement\
    \ trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as\
    \ Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n\
    \            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n      \
    \      <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().windowed(l.len() / 2).fold(0.0,\
    \ |a, b| {\n        b.iter().enumerate().fold(a, |mut c, (_, e)| {\n         \
    \   *c = math.max(0.0, *c + e / b.len());\n            a\n        })\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `math` in this scope\n --> /tmp/tmplovla9f3.rs:9:18\n\
    \  |\n9 |             *c = math.max(0.0, *c + e / b.len());\n  |             \
    \     ^^^^ not found in this scope\n\nerror[E0599]: no method named `windowed`\
    \ found for struct `std::slice::Iter` in the current scope\n --> /tmp/tmplovla9f3.rs:7:14\n\
    \  |\n7 |     l.iter().windowed(l.len() / 2).fold(0.0, |a, b| {\n  |         \
    \     ^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().sorted().fold(0.0, |m, x| if *x.floor()\
    \ < m { *x.floor() } else { m })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp5qkbutcx.rs:7:14\n  |\n7 |     l.iter().sorted().fold(0.0,\
    \ |m, x| if *x.floor() < m { *x.floor() } else { m })\n  |              ^^^^^^\
    \ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, &x| a.min(|b| b\
    \ if x < b else x))\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: missing condition for `if` expression\n --> /tmp/tmp1u3lh1c1.rs:7:46\n\
    \  |\n7 |     l.iter().fold(0.0, |a, &x| a.min(|b| b if x < b else x))\n  |  \
    \                                            ^ expected if condition here\n\n\
    error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found\
    \ keyword `if`\n --> /tmp/tmp1u3lh1c1.rs:7:44\n  |\n7 |     l.iter().fold(0.0,\
    \ |a, &x| a.min(|b| b if x < b else x))\n  |                                 \
    \           ^^ expected one of 8 possible tokens\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp1u3lh1c1.rs:7:38\n  |\n7 |     l.iter().fold(0.0, |a, &x| a.min(|b|\
    \ b if x < b else x))\n  |                                      ^^^^^ expected\
    \ `f64`, found closure\n  |\n  = note: expected type `f64`\n          found closure\
    \ `[closure@/tmp/tmp1u3lh1c1.rs:7:38: 7:43]`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort_unstable();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcm0qh42x.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    l.iter()\n      \
    \  .enumerate()\n        .filter(|(_, x)| x % 2 == 0)\n        .filter(|(_, x)|\
    \ x < n)\n        .map(|(_, x)| x.to_f64() / n as f64)\n        .max()\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6w3i3pkp.rs:10:28\n\
    \   |\n10 |         .filter(|(_, x)| x % 2 == 0)\n   |                       \
    \   - ^ - {integer}\n   |                          |\n   |                   \
    \       &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n10 |         .filter(|(_, x)| *x % 2 == 0)\n   |                      \
    \    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6w3i3pkp.rs:11:30\n  \
    \ |\n11 |         .filter(|(_, x)| x < n)\n   |                              ^\
    \ expected `&&isize`, found `usize`\n\nerror[E0599]: no method named `to_f64`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmp6w3i3pkp.rs:12:25\n\
    \   |\n12 |         .map(|(_, x)| x.to_f64() / n as f64)\n   |               \
    \          ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6w3i3pkp.rs:8:5\n   |\n6  |   fn median(l: Vec<isize>) -> f64 {\n\
    \   |                               --- expected `f64` because of return type\n\
    7  |       let n = l.len();\n8  | /     l.iter()\n9  | |         .enumerate()\n\
    10 | |         .filter(|(_, x)| x % 2 == 0)\n11 | |         .filter(|(_, x)| x\
    \ < n)\n12 | |         .map(|(_, x)| x.to_f64() / n as f64)\n13 | |         .max()\n\
    \   | |______________^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<_>`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(math.f64::NEG, |a, b| {\n\
    \        if *a > *b {\n            a\n        } else {\n            b\n      \
    \  }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: invalid const generic expression\n  --> /tmp/tmpppprd10p.rs:7:34\n\
    \   |\n7  |       l.iter().fold(math.f64::NEG, |a, b| {\n   |  __________________________________^\n\
    8  | |         if *a > *b {\n9  | |             a\n10 | |         } else {\n11\
    \ | |             b\n12 | |         }\n13 | |     })\n   | |_____^\n   |\nhelp:\
    \ expressions must be enclosed in braces to be used as const generic arguments\n\
    \   |\n7  ~     l.iter().fold(math.f64::NEG, { |a, b| {\n8  |         if *a >\
    \ *b {\n9  |             a\n10 |         } else {\n11 |             b\n12 |  \
    \       }\n ...\n\nerror: expected one of `(`, `)`, `,`, `.`, `?`, or an operator,\
    \ found `::`\n --> /tmp/tmpppprd10p.rs:7:27\n  |\n7 |     l.iter().fold(math.f64::NEG,\
    \ |a, b| {\n  |                           -^\n  |                           |\n\
    \  |                           expected one of `(`, `)`, `,`, `.`, `?`, or an\
    \ operator\n  |                           help: missing `,`\n\nerror[E0425]: cannot\
    \ find value `math` in this scope\n --> /tmp/tmpppprd10p.rs:7:19\n  |\n7 |   \
    \  l.iter().fold(math.f64::NEG, |a, b| {\n  |                   ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `NEG` in the crate root\n -->\
    \ /tmp/tmpppprd10p.rs:7:29\n  |\n7 |     l.iter().fold(math.f64::NEG, |a, b| {\n\
    \  |                             ^^^ not found in the crate root\n\nerror[E0061]:\
    \ this function takes 2 arguments but 3 arguments were supplied\n    --> /tmp/tmpppprd10p.rs:7:14\n\
    \     |\n7    |       l.iter().fold(math.f64::NEG, |a, b| {\n     |  ______________^^^^_-------------__-\n\
    \     | |              |\n     | |              expected 2 arguments\n8    | |\
    \         if *a > *b {\n9    | |             a\n10   | |         } else {\n11\
    \   | |             b\n12   | |         }\n13   | |     })\n     | |_____- supplied\
    \ 3 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n      \
    \  .filter(|&(i, _)| i < l.len() / 2)\n        .fold(\n            l.len() as\
    \ f64,\n            |x, y| {\n                f64::from(x.0) / f64::from(y.0)\
    \ + f64::from(x.1) / f64::from(y.1)\n            },\n        )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `f64` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmp_mq1elu2.rs:13:29\n   |\n13 |                 f64::from(x.0) /\
    \ f64::from(y.0) + f64::from(x.1) / f64::from(y.1)\n   |                     \
    \        ^\n\nerror[E0277]: the trait bound `f64: From<usize>` is not satisfied\n\
    \  --> /tmp/tmp_mq1elu2.rs:13:34\n   |\n13 |                 f64::from(x.0) /\
    \ f64::from(y.0) + f64::from(x.1) / f64::from(y.1)\n   |                     \
    \             ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0610]: `f64` is a primitive\
    \ type and therefore doesn't have fields\n  --> /tmp/tmp_mq1elu2.rs:13:63\n  \
    \ |\n13 |                 f64::from(x.0) / f64::from(y.0) + f64::from(x.1) / f64::from(y.1)\n\
    \   |                                                               ^\n\nerror[E0277]:\
    \ the trait bound `f64: From<&isize>` is not satisfied\n  --> /tmp/tmp_mq1elu2.rs:13:68\n\
    \   |\n13 |                 f64::from(x.0) / f64::from(y.0) + f64::from(x.1) /\
    \ f64::from(y.1)\n   |                                                       \
    \             ^^^^^^^^^ the trait `From<&isize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold((l.len() / 2).min(l.iter().sum()\
    \ / 2), (l.len() / 2))\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n --> /tmp/tmpchvu1hn6.rs:7:58\n\
    \  |\n7 |     l.iter().fold((l.len() / 2).min(l.iter().sum() / 2), (l.len() /\
    \ 2))\n  |                                                          ^        \
    \   ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n  |\n7 -     l.iter().fold((l.len() / 2).min(l.iter().sum() / 2),\
    \ (l.len() / 2))\n7 +     l.iter().fold((l.len() / 2).min(l.iter().sum() / 2),\
    \ l.len() / 2)\n  | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpchvu1hn6.rs:7:19\n\
    \  |\n7 |     l.iter().fold((l.len() / 2).min(l.iter().sum() / 2), (l.len() /\
    \ 2))\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n  |\n7 |\
    \     l.iter().fold((l.len() / 2).min(l.iter().sum() / 2) as f64, (l.len() / 2))\n\
    \  |                                                         ++++++\n\nerror[E0277]:\
    \ expected a `FnMut<(f64, &isize)>` closure, found `usize`\n    --> /tmp/tmpchvu1hn6.rs:7:14\n\
    \     |\n7    |     l.iter().fold((l.len() / 2).min(l.iter().sum() / 2), (l.len()\
    \ / 2))\n     |              ^^^^ expected an `FnMut<(f64, &isize)>` closure,\
    \ found `usize`\n     |\n     = help: the trait `FnMut<(f64, &isize)>` is not\
    \ implemented for `usize`\nnote: required by a bound in `fold`\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    (l as f64).median()\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `median` found for type `f64` in the current\
    \ scope\n --> /tmp/tmpv5flrr_n.rs:7:16\n  |\n7 |     (l as f64).median()\n  |\
    \                ^^^^^^ help: there is an associated function with a similar name:\
    \ `min`\n\nerror[E0605]: non-primitive cast: `Vec<isize>` as `f64`\n --> /tmp/tmpv5flrr_n.rs:7:5\n\
    \  |\n7 |     (l as f64).median()\n  |     ^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0605.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |x, y| {\n  \
    \      x.checked_add(y).unwrap().into()\n    }).unwrap()\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpk12q_bug.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |x, y| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |acc, e| acc + e) /\
    \ l.len() as f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpisqxavqv.rs:7:37\n\
    \  |\n7 |     l.iter().fold(0.0, |acc, e| acc + e) / l.len() as f64\n  |     \
    \                                ^ no implementation for `{float} + &isize`\n\
    \  |\n  = help: the trait `Add<&isize>` is not implemented for `{float}`\n  =\
    \ help: the following other types implement trait `Add<Rhs>`:\n            <&'a\
    \ f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as\
    \ Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n      \
    \  .take(l.len() / 2)\n        .map(|(i, v)| (v as f64 - l[i as usize]) / l[i\
    \ as usize])\n        .sum() as f64\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `isize` from `f64`\n  --> /tmp/tmpvogpesgb.rs:10:33\n\
    \   |\n10 |         .map(|(i, v)| (v as f64 - l[i as usize]) / l[i as usize])\n\
    \   |                                 ^ no implementation for `f64 - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0606]: casting\
    \ `&isize` as `f64` is invalid\n  --> /tmp/tmpvogpesgb.rs:10:24\n   |\n10 |  \
    \       .map(|(i, v)| (v as f64 - l[i as usize]) / l[i as usize])\n   |      \
    \                  -^^^^^^^\n   |                        |\n   |             \
    \           cannot cast `&isize` as `f64`\n   |                        help: dereference\
    \ the expression: `*v`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0606.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    match len {\n \
    \       0 => panic!(\"no elements\"),\n        _ => if len % 2 == 0 { l.len()\
    \ / 2.0 } else { l.len() / 2.0 },\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmpxay6gqhm.rs:10:40\n\
    \   |\n10 |         _ => if len % 2 == 0 { l.len() / 2.0 } else { l.len() / 2.0\
    \ },\n   |                                        ^ no implementation for `usize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmpxay6gqhm.rs:10:63\n\
    \   |\n10 |         _ => if len % 2 == 0 { l.len() / 2.0 } else { l.len() / 2.0\
    \ },\n   |                                                               ^ no\
    \ implementation for `usize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // median of 0 elements is the same as\
    \ 0\n    if l.len() == 0 {\n        return 0.0;\n    }\n\n    let mut v = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    v.sort();\n    v.dedup();\n    match v.len() {\n        0 => 0.0,\n     \
    \   1 => l[0] as f64,\n        _ => {\n            let mid = v.len() / 2;\n  \
    \          match v.len() {\n                0 => l[0] as f64,\n              \
    \  1 => {\n                    if v[0] == l[0] {\n                        return\
    \ l[0] as f64\n                    } else {\n                        return (v[mid]\
    \ + (l[mid] - v[mid]) / 2.0) as f64\n                    }\n                }\n\
    \                n => {\n                    // find the median of the left and\
    \ right half\n                    let mid = n / 2;\n                    if v[mid]\
    \ < l[mid] {\n                        if v[mid] < (l[mid] - v[mid]) / 2 {\n  \
    \                          return v[mid]\n                        } else {\n \
    \                           return l[mid]\n                        }\n       \
    \             } else {\n                        if v[mid] < (l[mid] - v[mid])\
    \ / 2 {\n                            return l[mid]\n                        }\
    \ else {\n                            return v[mid]\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpiztst04b.rs:26:60\n\
    \   |\n26 |                         return (v[mid] + (l[mid] - v[mid]) / 2.0)\
    \ as f64\n   |                                                            ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiztst04b.rs:34:36\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n34 |                     \
    \        return v[mid]\n   |                                    ^^^^^^ expected\
    \ `f64`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0, |a, &x| a + x / 2)\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwsaqk0be.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |a, &x| a + x / 2)\n  |                   ^\n  |      \
    \             |\n  |                   expected `f64`, found integer\n  |    \
    \               help: use a float literal: `0.0`\n\nerror[E0277]: cannot add `isize`\
    \ to `f64`\n --> /tmp/tmpwsaqk0be.rs:7:32\n  |\n7 |     l.iter().fold(0, |a, &x|\
    \ a + x / 2)\n  |                                ^ no implementation for `f64\
    \ + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.0\n\
    \    }\n    l.iter().fold(0.0, |sum, el| {\n        let mut value = *el;\n   \
    \     if value == *sum {\n            return *el;\n        } else {\n        \
    \    *sum += value;\n            return value;\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpdpugh7nd.rs:12:21\n\
    \   |\n12 |         if value == *sum {\n   |                     ^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdpugh7nd.rs:13:20\n   |\n13 |             return\
    \ *el;\n   |                    ^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |             return (*el) as\
    \ f64;\n   |                    +   ++++++++\n\nerror[E0614]: type `f64` cannot\
    \ be dereferenced\n  --> /tmp/tmpdpugh7nd.rs:15:13\n   |\n15 |             *sum\
    \ += value;\n   |             ^^^^\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0.0, |a, b| a\
    \ + b) / l.len();\n    l.iter().skip(l.len() / 2).fold(s | s, |s, &x| s + (*x).abs()\
    \ / 2);\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmplzi42l65.rs:7:45\n\
    \  |\n7 |     let mut s = l.iter().fold(0.0, |a, b| a + b) / l.len();\n  |   \
    \                                          ^ no implementation for `{float} +\
    \ &isize`\n  |\n  = help: the trait `Add<&isize>` is not implemented for `{float}`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot\
    \ divide `{float}` by `usize`\n --> /tmp/tmplzi42l65.rs:7:50\n  |\n7 |     let\
    \ mut s = l.iter().fold(0.0, |a, b| a + b) / l.len();\n  |                   \
    \                               ^ no implementation for `{float} / usize`\n  |\n\
    \  = help: the trait `Div<usize>` is not implemented for `{float}`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n --> /tmp/tmplzi42l65.rs:8:56\n  |\n8 |     l.iter().skip(l.len()\
    \ / 2).fold(s | s, |s, &x| s + (*x).abs() / 2);\n  |                         \
    \                               ^^^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmplzi42l65.rs:6:29\n\
    \  |\n6 | fn median(l: Vec<isize>) -> f64 {\n  |    ------                   ^^^\
    \ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n7 |     let mut s = l.iter().fold(0.0,\
    \ |a, b| a + b) / l.len();\n8 |     l.iter().skip(l.len() / 2).fold(s | s, |s,\
    \ &x| s + (*x).abs() / 2);\n  |                                              \
    \                         - help:"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n\n    if len == 0 {\n\
    \        0.0\n    }\n    if len == 1 {\n        l[0]\n    }\n    let mut middle:\
    \ f64 = l.iter()\n        .enumerate()\n        .next()\n        .unwrap()\n \
    \       .1;\n\n    for x in l {\n        if x < middle {\n            middle =\
    \ x;\n        }\n    }\n    middle\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp28bvliy_.rs:10:9\n   |\n\
    9  | /     if len == 0 {\n10 | |         0.0\n   | |         ^^^ expected `()`,\
    \ found floating-point number\n11 | |     }\n   | |_____- expected this to be\
    \ `()`\n   |\nhelp: you might have meant to return this value\n   |\n10 |    \
    \     return 0.0;\n   |         ++++++    +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp28bvliy_.rs:13:9\n   |\n12 | /     if len == 1 {\n13 | |      \
    \   l[0]\n   | |         ^^^^ expected `()`, found `isize`\n14 | |     }\n   |\
    \ |_____- expected this to be `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp28bvliy_.rs:15:27\n\
    \   |\n15 |       let mut middle: f64 = l.iter()\n   |  _____________________---___^\n\
    \   | |                     |\n   | |                     expected due to this\n\
    16 | |         .enumerate()\n17 | |         .next()\n18 | |         .unwrap()\n\
    19 | |         .1;\n   | |__________^ expected `f64`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp28bvliy_.rs:22:16\n   |\n22 |         if x <\
    \ middle {\n   |                ^^^^^^ expected `isize`, found `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp28bvliy_.rs:23:22\n   |\n15 |     let mut middle:\
    \ f64 = l.iter()\n   |                     --- expected due to this type\n...\n\
    23 |             middle = x;\n   |                      ^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n23 |      \
    \       middle = x as f64;\n   |                        ++++++\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut count = l.len();\n    if count\
    \ == 0 {\n        return 0;\n    }\n    let mut mid = count / 2;\n    let mut\
    \ l: Vec<_> = l.to_vec();\n    let mut max = l.iter().max();\n    let mut min\
    \ = l.iter().min();\n    if count % 2 == 1 {\n        mid = mid.saturating_add((count\
    \ - 1) / 2);\n    }\n    match count {\n        1 => l[mid],\n        2 => l[mid]\
    \ + l[mid].clone(),\n        3 => l[mid] + l[mid].clone() * 2,\n        _ => {\n\
    \            count = ((count - 1) / 2);\n            mid = mid.saturating_add(count\
    \ / 2);\n            let mut new_count = count - 1;\n            let mut new_mid\
    \ = mid.saturating_add(new_count / 2);\n            while new_count > 0 {\n  \
    \              if l[new_mid] >= max {\n                    new_count -= 1;\n \
    \                   let temp = new_mid;\n                    new_mid = temp.saturating_add(new_count\
    \ / 2);\n                } else {\n                    max = max(max, l[new_mid]);\n\
    \                    new_mid = new_mid.saturating_add(new_count / 2);\n      \
    \          }\n            }\n            while new_count < count {\n         \
    \       if l[new_mid] <= min {\n                    new_count += 1;\n        \
    \            let temp = new_mid;\n                    new_mid = temp.saturating_add(new_count\
    \ / 2);\n                } else {\n                    min = min(min, l[new_mid]);\n\
    \                    new_mid = new_mid.saturating_add(new_count / 2);\n      \
    \          }\n            }\n        }\n    }\n    l[mid].clone() * 0.5\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp7_y2zkvp.rs:23:21\n\
    \   |\n23 |             count = ((count - 1) / 2);\n   |                     ^\
    \               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n23 -             count = ((count - 1) / 2);\n\
    23 +             count = (count - 1) / 2;\n   | \n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp7_y2zkvp.rs:9:16\n  |\n6 | fn median(l: Vec<isize>) -> f64 {\n \
    \ |                             --- expected `f64` because of return type\n...\n\
    9 |         return 0;\n  |                ^\n  |                |\n  |       \
    \         expected `f64`, found integer\n  |                help: use a float\
    \ literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7_y2zkvp.rs:28:34\n\
    \   |\n28 |                 if l[new_mid] >= max {\n   |                     \
    \             ^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nerror[E0618]: expected\
    \ function, found enum variant `max`\n  --> /tmp/tmp7_y2zkvp.rs:33:27\n   |\n\
    13 |     let mut max = l.iter().max();\n   |         ------- `max` defined here\n\
    ...\n33 |                     max = max(max, l[new_mid]);\n   |              \
    \             ^^^-----------------\n   |                           |\n   |   \
    \                        call expression requires function\n   |\nhelp: `max`\
    \ is a unit variant, you need to write it without the parentheses\n   |\n33 -\
    \                     max = max(max, l[new_mid]);\n33 +                     max\
    \ = max;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7_y2zkvp.rs:38:34\n\
    \   |\n38 |                 if l[new_mid] <= min {\n   |                     \
    \             ^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nerror[E0618]: expected\
    \ function, found enum variant `min`\n  --> /tmp/tmp7_y2zkvp.rs:43:27\n   |\n\
    14 |     let mut min = l.iter().min();\n   |         ------- `min` defined here\n\
    ...\n43 |                     min = min(min, l[new_mid])"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.len() / 2.0\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxb59apka.rs:7:13\n\
    \  |\n7 |     l.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n      \
    \  .fold(\n            (0.5, 0),\n            |(mut sum, mut idx), x| {\n    \
    \            if *idx < x.0 { sum += *idx; }\n                *idx += 1;\n    \
    \            (sum, idx)\n            },\n        )\n        .1\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpnolp4bd5.rs:12:20\n\
    \   |\n12 |                 if *idx < x.0 { sum += *idx; }\n   |             \
    \       ^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpnolp4bd5.rs:12:40\n\
    \   |\n12 |                 if *idx < x.0 { sum += *idx; }\n   |             \
    \                           ^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmpnolp4bd5.rs:13:17\n   |\n13 |                 *idx += 1;\n   |\
    \                 ^^^^\n   |\nhelp: parentheses are required to parse this as\
    \ an expression\n   |\n12 |                 (if *idx < x.0 { sum += *idx; })\n\
    \   |                 +                              +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnolp4bd5.rs:7:5\n   |\n6  |   fn median(l: Vec<isize>)\
    \ -> f64 {\n   |                               --- expected `f64` because of return\
    \ type\n7  | /     l.iter()\n8  | |         .enumerate()\n9  | |         .fold(\n\
    10 | |             (0.5, 0),\n...  |\n16 | |         )\n17 | |         .1\n  \
    \ | |__________^ expected `f64`, found integer\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |acc, x| if x.is_nan()\
    \ || acc.is_nan() { f64::nan() } else { acc })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpiz6x66dv.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |acc, x| if x.is_nan() || acc.is_nan() { f64::nan() } else { acc })\n  |   \
    \                     ^^^\n  |                        |\n  |                 \
    \       function or associated item not found in `f64`\n  |                  \
    \      help: there is an associated function with a similar name: `is_nan`\n\n\
    error[E0599]: no method named `is_nan` found for reference `&isize` in the current\
    \ scope\n --> /tmp/tmpiz6x66dv.rs:7:45\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |acc, x| if x.is_nan() || acc.is_nan() { f64::nan() } else { acc })\n  |   \
    \                                          ^^^^^^ method not found in `&isize`\n\
    \nerror[E0599]: no function or associated item named `nan` found for type `f64`\
    \ in the current scope\n --> /tmp/tmpiz6x66dv.rs:7:77\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |acc, x| if x.is_nan() || acc.is_nan() { f64::nan() } else { acc })\n  |   \
    \                                                                          ^^^\n\
    \  |                                                                         \
    \    |\n  |                                                                  \
    \           function or associated item not found in `f64`\n  |              \
    \                                                               help: there is\
    \ an associated function with a similar name: `is_nan`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2.0, |a, b| if\
    \ b == 0 || a == b.floor() {\n        a\n    } else {\n        b.floor()\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpzvw_3rb7.rs:7:27\n\
    \  |\n7 |     l.iter().fold(l.len() / 2.0, |a, b| if b == 0 || a == b.floor()\
    \ {\n  |                           ^ no implementation for `usize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n --> /tmp/tmpzvw_3rb7.rs:7:46\n  |\n7 |     l.iter().fold(l.len()\
    \ / 2.0, |a, b| if b == 0 || a == b.floor() {\n  |                           \
    \                   ^^ no implementation for `&isize == {integer}`\n  |\n  = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n  = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n            f32\n\
    \            f64\n            i128\n            i16\n            i32\n       \
    \     i64\n            i8\n            isize\n          and 6 others\n\nerror[E0599]:\
    \ no method named `floor` found for reference `&isize` in the current scope\n\
    \ --> /tmp/tmpzvw_3rb7.rs:7:61\n  |\n7 |     l.iter().fold(l.len() / 2.0, |a,\
    \ b| if b == 0 || a == b.floor() {\n  |                                      \
    \                       ^^^^^ help: there is an associated function with a similar\
    \ name: `div_floor`\n\nerror[E0599]: no method named `floor` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmpzvw_3rb7.rs:10:11\n   |\n10 | \
    \        b.floor()\n   |           ^^^^^ help: there is an associated function\
    \ with a similar name: `div_floor`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut r = l.len() / 2;\n    if l.len()\
    \ % 2 != 0 {\n        r = r + 1;\n    }\n    l.iter_mut().skip(r).fold(l.iter().median(),\
    \ |a, b| {\n        a.partial_sort_reverse();\n        a.last().unwrap().partial_sort_reverse();\n\
    \        a.last().unwrap() + b.last().unwrap()\n    })\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `median` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp8pqnjdxg.rs:11:40\n   |\n11 |     l.iter_mut().skip(r).fold(l.iter().median(),\
    \ |a, b| {\n   |                                        ^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method named `partial_sort_reverse`\
    \ found for type `f64` in the current scope\n  --> /tmp/tmp8pqnjdxg.rs:12:11\n\
    \   |\n12 |         a.partial_sort_reverse();\n   |           ^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: `f64` is not an iterator\n  --> /tmp/tmp8pqnjdxg.rs:13:11\n\
    \   |\n13 |         a.last().unwrap().partial_sort_reverse();\n   |          \
    \ ^^^^ `f64` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `f64: Iterator`\n           which is required by\
    \ `&mut f64: Iterator`\n\nerror[E0599]: `f64` is not an iterator\n  --> /tmp/tmp8pqnjdxg.rs:14:11\n\
    \   |\n14 |         a.last().unwrap() + b.last().unwrap()\n   |           ^^^^\
    \ `f64` is not an iterator\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `f64: Iterator`\n           which is required by `&mut\
    \ f64: Iterator`\n\nerror[E0599]: `&mut isize` is not an iterator\n  --> /tmp/tmp8pqnjdxg.rs:14:31\n\
    \   |\n14 |         a.last().unwrap() + b.last().unwrap()\n   |              \
    \                 ^^^^ `&mut isize` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `isize: Iterator`\n           which\
    \ is required by `&mut isize: Iterator`\n           `&mut isize: Iterator`\n \
    \          which is required by `&mut &mut isize: Iterator`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut vec: Vec<isize> = l.to_owned();\n\
    \    vec.sort_unstable();\n    vec[vec.len() / 2].to_owned()\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3c2ioooh.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     vec[vec.len() / 2].to_owned()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n9 |     vec[vec.len() / 2].to_owned()\
    \ as f64\n  |                                   ++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().windows(2).map(|x| x.iter().min()).unwrap_or_else(||\
    \ l.iter().min())\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp0n5vn8yz.rs:7:14\n  |\n7 |     l.iter().windows(2).map(|x|\
    \ x.iter().min()).unwrap_or_else(|| l.iter().min())\n  |              ^^^^^^^\
    \ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // O(n log n) algorithm\n    l.iter().rev().windowed(2).fold(\n\
    \        0.0,\n        |a, b| {\n            match (a.last() + b.last()).unwrap_or(a.len()\
    \ + b.len()) {\n                // median between two equal values\n         \
    \       0 => {\n                    let mid: isize = (a.len() + b.len()) / 2;\n\
    \                    a.last().unwrap_or(mid) as f64 / 2\n                }\n \
    \               a.len() => {\n                    a.last().unwrap_or(a.len() as\
    \ f64) / 2 as f64\n                }\n                b.len() => {\n         \
    \           b.last().unwrap_or(b.len() as f64) / 2 as f64\n                }\n\
    \                // median between two non-equal values\n                1 =>\
    \ {\n                    let mid: isize = (b.len() + a.len()) / 2;\n         \
    \           b.last().unwrap_or(mid) as f64 / 2\n                }\n          \
    \      a.len() > b.len() => {\n                    b.last().unwrap_or(b.len()\
    \ as f64) / 2 as f64\n                }\n                a.len() < b.len() =>\
    \ {\n                    a.last().unwrap_or(a.len() as f64) / 2 as f64\n     \
    \           }\n            }\n        },\n    )\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found `.`\n  --> /tmp/tmp3rywjyvq.rs:17:18\n\
    \   |\n17 |                 a.len() => {\n   |                  ^ expected one\
    \ of `=>`, `@`, `if`, or `|`\n\nerror[E0599]: no method named `windowed` found\
    \ for struct `Rev` in the current scope\n --> /tmp/tmp3rywjyvq.rs:8:20\n  |\n\
    8 |     l.iter().rev().windowed(2).fold(\n  |                    ^^^^^^^^ method\
    \ not found in `Rev<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        f64::MAX\n \
    \   } else if l.len() == 1 {\n        l[0]\n    } else {\n        let mut mid\
    \ = l.len() / 2;\n        std::cmp::min(mid, l.len() - 1).map(|i| l[i])\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvn0_wvu6.rs:10:9\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |         l[0]\n   |         ^^^^ expected\
    \ `f64`, found `isize`\n\nerror[E0599]: `usize` is not an iterator\n  --> /tmp/tmpvn0_wvu6.rs:13:41\n\
    \   |\n13 |         std::cmp::min(mid, l.len() - 1).map(|i| l[i])\n   |      \
    \                                   ^^^ `usize` is not an iterator\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `usize: Iterator`\n\
    \           which is required by `&mut usize: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.iter().min().unwrap();\n\
    \    for e in l.iter().skip(1) {\n        if e < m {\n            m = e;\n   \
    \     }\n    }\n    m\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpru6qoil4.rs:13:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n13 |     m\n   |     ^ expected `f64`, found\
    \ `&isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<f64>>();\n\
    \    l.sort_unstable();\n    l.into_iter().next().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpsnwwvhhl.rs:7:35\n     |\n7 \
    \   |     let mut l = l.iter().cloned().collect::<Vec<f64>>();\n     |       \
    \                            ^^^^^^^ value of type `Vec<f64>` cannot be built\
    \ from `std::iter::Iterator<Item=isize>`\n     |\n     = help: the trait `FromIterator<isize>`\
    \ is not implemented for `Vec<f64>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpsnwwvhhl.rs:8:7\n\
    \     |\n8    |     l.sort_unstable();\n     |       ^^^^^^^^^^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n     |\n     = help: the following other types\
    \ implement trait `Ord`:\n               i128\n               i16\n          \
    \     i32\n               i64\n               i8\n               isize\n     \
    \          u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    let mid = v.len() / 2;\n    v.insert(mid, mid);\n    if v.len()\
    \ % 2 == 0 {\n        v.push((v[0] + v[v.len() - 1]) * 0.5);\n    }\n    v.iter().fold(0.0,\
    \ |sum, val| sum + val / 2.0)\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ozpztnd.rs:10:19\n   |\n\
    10 |     v.insert(mid, mid);\n   |                   ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n10 |     v.insert(mid, mid.try_into().unwrap());\n\
    \   |                      ++++++++++++++++++++\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmp2ozpztnd.rs:12:40\n   |\n12 |         v.push((v[0]\
    \ + v[v.len() - 1]) * 0.5);\n   |                                        ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot divide `&isize` by `{float}`\n\
    \  --> /tmp/tmp2ozpztnd.rs:14:45\n   |\n14 |     v.iter().fold(0.0, |sum, val|\
    \ sum + val / 2.0)\n   |                                             ^ no implementation\
    \ for `&isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::min_value(), |mut m,\
    \ &x| {\n        if m > x {\n            m\n        } else {\n            x\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `min_value` found for\
    \ type `f64` in the current scope\n --> /tmp/tmpp__g7w7z.rs:7:24\n  |\n7 |   \
    \  l.iter().fold(f64::min_value(), |mut m, &x| {\n  |                        ^^^^^^^^^\
    \ function or associated item not found in `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpp__g7w7z.rs:8:16\n  |\n8 |         if m > x {\n  |             \
    \   ^ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n  |\n8 |         if m > x as f64 {\n  |                  ++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp__g7w7z.rs:11:13\n   |\n11 |\
    \             x\n   |             ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n11 |             x as f64\n   |\
    \               ++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NINF, |sum, e| sum +\
    \ e)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no associated item named `NINF` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpsczc1c76.rs:7:24\n  |\n7 |     l.iter().fold(f64::NINF,\
    \ |sum, e| sum + e)\n  |                        ^^^^ associated item not found\
    \ in `f64`\n\nerror[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmpsczc1c76.rs:7:43\n\
    \  |\n7 |     l.iter().fold(f64::NINF, |sum, e| sum + e)\n  |                \
    \                           ^ no implementation for `f64 + &isize`\n  |\n  = help:\
    \ the trait `Add<&isize>` is not implemented for `f64`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj_ux2bc3.rs:7:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     l.len() / 2\n  |     ^^^^^^^^^^^ expected\
    \ `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    7 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977771
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut n: isize = 0;\n    let mut mid:\
    \ isize = 0;\n    for i in l {\n        if n < i {\n            n = i;\n     \
    \   }\n        mid += 1;\n        if mid > l.len() / 2 {\n            return mid;\n\
    \        }\n    }\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0p3au75j.rs:14:18\n   |\n\
    14 |         if mid > l.len() / 2 {\n   |                  ^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |         if mid > (l.len()\
    \ / 2).try_into().unwrap() {\n   |                  +           +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0p3au75j.rs:15:20\n   |\n15 |\
    \             return mid;\n   |                    ^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |            \
    \ return mid as f64;\n   |                        ++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0p3au75j.rs:18:5\n   |\n6  | fn median(l: Vec<isize>) ->\
    \ f64 {\n   |                             --- expected `f64` because of return\
    \ type\n...\n18 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found\
    \ `usize`\n   |\nhelp: you can cast a `usize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n18 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().rev().sum().unwrap() / 2.0\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpqdwgvyl2.rs:7:20\n\
    \  |\n7 |     l.iter().rev().sum().unwrap() / 2.0\n  |                    ^^^\
    \ cannot infer type for type parameter `S` declared on the associated function\
    \ `sum`\n  |\n  = note: type must be known at this point\nhelp: consider specifying\
    \ the type argument in the method call\n  |\n7 |     l.iter().rev().sum::<S>().unwrap()\
    \ / 2.0\n  |                       +++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() as f64\
    \ / 2.0,\n        |prev, cur| prev + (cur as f64 / 2),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n --> /tmp/tmplzt0v5n2.rs:9:40\n\
    \  |\n9 |         |prev, cur| prev + (cur as f64 / 2),\n  |                  \
    \                      ^ no implementation for `f64 / {integer}`\n  |\n  = help:\
    \ the trait `Div<{integer}>` is not implemented for `f64`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\nhelp: consider using a floating-point\
    \ literal by writing it with `.0`\n  |\n9 |         |prev, cur| prev + (cur as\
    \ f64 / 2.0),\n  |                                           ++\n\nerror[E0606]:\
    \ casting `&isize` as `f64` is invalid\n --> /tmp/tmplzt0v5n2.rs:9:29\n  |\n9\
    \ |         |prev, cur| prev + (cur as f64 / 2),\n  |                        \
    \     ---^^^^^^^\n  |                             |\n  |                     \
    \        cannot cast `&isize` as `f64`\n  |                             help:\
    \ dereference the expression: `*cur`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l .sorted() . f64::div(l.len() as f64 +\
    \ 1) .ceil()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `.`\n\
    \ --> /tmp/tmpdcvk98x_.rs:7:29\n  |\n7 |     l .sorted() . f64::div(l.len() as\
    \ f64 + 1) .ceil()\n  |                             ^\n  |                   \
    \          |\n  |                             expected one of 7 possible tokens\n\
    \  |                             help: missing `,`\n\nerror: expected one of `!`,\
    \ `)`, `+`, `,`, `->`, or `::`, found keyword `as`\n --> /tmp/tmpdcvk98x_.rs:7:36\n\
    \  |\n7 |     l .sorted() . f64::div(l.len() as f64 + 1) .ceil()\n  |        \
    \                            ^^ expected one of `!`, `)`, `+`, `,`, `->`, or `::`\n\
    \nerror: expected one of `(`, `.`, `;`, `?`, `}`, or an operator, found `::`\n\
    \ --> /tmp/tmpdcvk98x_.rs:7:22\n  |\n7 |     l .sorted() . f64::div(l.len() as\
    \ f64 + 1) .ceil()\n  |                      ^^ expected one of `(`, `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror: aborting due to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2.\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpb58zsgy1.rs:9:13\n\
    \  |\n9 |     l.len() / 2.\n  |             ^ no implementation for `usize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut count = l.len();\n    if count\
    \ < 2 {\n        return std::mem::transmute::<f64, usize>(*l.iter().next().unwrap());\n\
    \    }\n    let mut sum = 0;\n    let mut mid = 0;\n    let mut low_idx = 0;\n\
    \    let mut high_idx = count - 1;\n    while low_idx < high_idx {\n        let\
    \ (low, high) = if low_idx < high_idx {\n            (&mut sum, &mut mid)\n  \
    \      } else {\n            (&mut mid, &mut sum)\n        };\n        let mut\
    \ lower = &mut l;\n        let mut higher = &mut l;\n        if low_idx < high_idx\
    \ {\n            lower = &mut l[low_idx..high_idx + 1];\n            higher =\
    \ &mut l[..low_idx + high_idx - 1];\n        }\n        let (l_mid, l_sum) = low.iter().cloned().rev().fold(0,\
    \ |sum, el| {\n            sum + el\n        });\n        let (h_mid, h_sum) =\
    \ higher.iter().cloned().rev().fold(0, |sum, el| {\n            sum + el\n   \
    \     });\n        let mut sum = (l_mid + h_mid + l_sum + h_sum) / 4.0;\n    \
    \    let mut mid = l_mid + h_mid;\n        if l_mid < h_mid {\n            low_idx\
    \ += 1;\n            high_idx -= 1;\n        } else {\n            low_idx -=\
    \ 1;\n            high_idx += 1;\n        }\n    }\n    return std::mem::transmute::<f64,\
    \ usize>(*l.iter().next().unwrap());\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpga6_roh6.rs:9:50\n  |\n9 |\
    \         return std::mem::transmute::<f64, usize>(*l.iter().next().unwrap());\n\
    \  |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |         return std::mem::transmute::<f64, usize>((*l.iter().next().unwrap())\
    \ as f64);\n  |                                                  +           \
    \              ++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmpga6_roh6.rs:9:16\n\
    \  |\n6 | fn median(l: Vec<isize>) -> f64 {\n  |                             ---\
    \ expected `f64` because of return type\n...\n9 |         return std::mem::transmute::<f64,\
    \ usize>(*l.iter().next().unwrap());\n  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |         return std::mem::transmute::<f64, usize>(*l.iter().next().unwrap())\
    \ as f64;\n  |                                                               \
    \              ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpga6_roh6.rs:24:21\n\
    \   |\n21 |         let mut lower = &mut l;\n   |                         ------\
    \ expected due to this value\n...\n24 |             lower = &mut l[low_idx..high_idx\
    \ + 1];\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found slice `[isize]`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n              found mutable reference `&mut [isize]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpga6_roh6.rs:25:22\n   |\n22 |         let mut\
    \ higher = &mut l;\n   |                          ------ expected due to this\
    \ value\n...\n25 |             higher = &mut l[..low_idx + high_idx - 1];\n  \
    \ |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found slice `[isize]`\n   |\n   = note: exp"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(0.0, |mut sum,\
    \ (_, num)| {\n        *sum += num;\n        sum\n    }) / l.len()\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{float}` cannot be dereferenced\n --> /tmp/tmp75ml958l.rs:8:9\n\
    \  |\n8 |         *sum += num;\n  |         ^^^^\n\nerror[E0277]: cannot divide\
    \ `{float}` by `usize`\n  --> /tmp/tmp75ml958l.rs:10:8\n   |\n10 |     }) / l.len()\n\
    \   |        ^ no implementation for `{float} / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `{float}`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |median,\
    \ el| {\n        if el >= median {\n            el\n        } else {\n       \
    \     median\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2j3okc16.rs:8:18\n  |\n8 |\
    \         if el >= median {\n  |                  ^^^^^^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2j3okc16.rs:9:13\n  |\n\
    9 |             el\n  |             ^^ expected `f64`, found `&isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Sort the vector\n    l.iter().sort().take(l.len()\
    \ / 2).fold(0.0, |s, &x| s + f64::from(x / 2))\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpbc78ds6s.rs:8:14\n  |\n8 |     l.iter().sort().take(l.len()\
    \ / 2).fold(0.0, |s, &x| s + f64::from(x / 2))\n  |              ^^^^ method not\
    \ found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() < 2 {\n        return l.iter().min().unwrap();\n\
    \    }\n    let mut midpoint = l.len() / 2;\n    let mut median_element = 0;\n\
    \    for i in 0..midpoint.min(midpoint) {\n        median_element = if i < midpoint\
    \ {\n            l[i]\n        } else {\n            l.get_mut(midpoint + i).unwrap()\n\
    \        };\n    }\n    median_element\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyqq543bf.rs:8:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     if l.len() < 2 {\n8 |         return l.iter().min().unwrap();\n\
    \  |                ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyqq543bf.rs:16:13\n   |\n16 |  \
    \           l.get_mut(midpoint + i).unwrap()\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&mut isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n16 |             *l.get_mut(midpoint + i).unwrap()\n   |     \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqq543bf.rs:19:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n19 |     median_element\n\
    \   |     ^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     median_element as f64\n   |           \
    \         ++++++\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l as f64\n        .iter()\n        .fold(0.0f64,\
    \ |a, b| {\n            a + (b as f64) / 2.0\n        })\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: casts cannot be followed by a method call\n --> /tmp/tmpk66jryyt.rs:7:5\n\
    \  |\n7 |     l as f64\n  |     ^^^^^^^^\n  |\nhelp: try surrounding the expression\
    \ in parentheses\n  |\n7 |     (l as f64)\n  |     +        +\n\nerror[E0599]:\
    \ no method named `iter` found for type `f64` in the current scope\n --> /tmp/tmpk66jryyt.rs:8:10\n\
    \  |\n8 |         .iter()\n  |          ^^^^ method not found in `f64`\n\nerror[E0605]:\
    \ non-primitive cast: `Vec<isize>` as `f64`\n --> /tmp/tmpk66jryyt.rs:7:5\n  |\n\
    7 |     l as f64\n  |     ^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0605.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().filter(|&(x, _)| x\
    \ < l.len() / 2).map(|(_, x)| x).median().unwrap_or(0.0)\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `median` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmp4murwhe3.rs:7:76\n  |\n7 |     l.iter().enumerate().filter(|&(x,\
    \ _)| x < l.len() / 2).map(|(_, x)| x).median().unwrap_or(0.0)\n  |          \
    \                                                                  ^^^^^^ method\
    \ not found in `Map<Filter<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp4murwhe3.rs:7:33:\
    \ 7:58]>, [closure@/tmp/tmp4murwhe3.rs:7:64: 7:74]>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut n = l.len();\n    if n % 2 == 0\
    \ {\n        return l.iter().skip(n / 2).reduce(f64::median).unwrap();\n    }\n\
    \n    let mut median = f64::MAX;\n    let mut index = 0;\n    for i in l.iter().skip(n\
    \ / 2) {\n        median =\n            l.iter().skip(index).take(n - index).reduce(f64::median).unwrap()\n\
    \            + median;\n        index += 1;\n    }\n    median\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `median` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpx6qqy3qn.rs:9:49\n  |\n9 |        \
    \ return l.iter().skip(n / 2).reduce(f64::median).unwrap();\n  |             \
    \                                    ^^^^^^\n  |                             \
    \                    |\n  |                                                 function\
    \ or associated item not found in `f64`\n  |                                 \
    \                help: there is an associated function with a similar name: `min`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpx6qqy3qn.rs:9:16\n  |\n6 | fn median(l:\
    \ Vec<isize>) -> f64 {\n  |                             --- expected `f64` because\
    \ of return type\n...\n9 |         return l.iter().skip(n / 2).reduce(f64::median).unwrap();\n\
    \  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `&isize`\n\nerror[E0599]: no function or associated item named\
    \ `median` found for type `f64` in the current scope\n  --> /tmp/tmpx6qqy3qn.rs:16:62\n\
    \   |\n16 |             l.iter().skip(index).take(n - index).reduce(f64::median).unwrap()\n\
    \   |                                                              ^^^^^^\n  \
    \ |                                                              |\n   |     \
    \                                                         function or associated\
    \ item not found in `f64`\n   |                                              \
    \                help: there is an associated function with a similar name: `min`\n\
    \nerror[E0277]: cannot add `f64` to `&isize`\n  --> /tmp/tmpx6qqy3qn.rs:17:13\n\
    \   |\n17 |             + median;\n   |             ^ no implementation for `&isize\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \          "
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len == 0 {\n\
    \        0.0\n    } else {\n        let middle = len / 2;\n        l.iter().enumerate().for_each(|(idx,\
    \ val)|{\n            if idx - middle < 0 {\n                panic!(\"median index\
    \ should be >= 0\");\n            }\n            if idx + 1 > middle {\n     \
    \           panic!(\"median index should be < len\");\n            }\n       \
    \     assert!(val == l[idx - middle] || val == l[idx + 1]);\n        });\n   \
    \     l.iter().enumerate().for_each(|(idx, val)|{\n            if idx == middle\
    \ {\n                val\n            } else {\n                (val + l[middle\
    \ - idx] - l[middle + idx]) / 2\n            }\n        })\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpj2hl9w18.rs:19:25\n\
    \   |\n19 |             assert!(val == l[idx - middle] || val == l[idx + 1]);\n\
    \   |                         ^^ no implementation for `&isize == isize`\n   |\n\
    \   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpj2hl9w18.rs:19:51\n\
    \   |\n19 |             assert!(val == l[idx - middle] || val == l[idx + 1]);\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj2hl9w18.rs:23:17\n\
    \   |\n22 | /             if idx == middle {\n23 | |                 val\n   |\
    \ |                 ^^^ expected `()`, found `&isize`\n24 | |             } else\
    \ {\n25 | |                 (val + l[middle - idx] - l[middle + idx]) / 2\n26\
    \ | |             }\n   | |_____________- expected this to be `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj2hl9w18.rs:25:17\n   |\n22 | /            \
    \ if idx == middle {\n23 | |                 val\n24 | |             } else {\n\
    25 | |                 (val + l[middle - idx] - l[middle + idx]) / 2\n   | | \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`,\
    \ found `isize`\n26 | |             }\n   | |             -- help: consider using\
    \ a semicolon here\n   | |_____________|\n   |               expected this to\
    \ be `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj2hl9w18.rs:21:9\n\
    \   |\n6  |   fn median(l: Vec<isize>) -> f64 {\n  "
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.iter().skip(l.len()\
    \ / 2).fold(l[2..].iter().max().unwrap_or(l[l.len() / 2]),\n            |a, b|\
    \ {\n                // if either one is negative, we choose the negative\n  \
    \              // one as the median\n                if a < b {\n            \
    \        -b\n                } else {\n                    a\n               \
    \ }\n            },\n    )\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpc9ug3vry.rs:7:18\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \       - closing delimiter possibly meant for this\n7  |     l.iter().fold(\n\
    \   |                  ^ unclosed delimiter\n...\n19 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc9ug3vry.rs:8:71\n\
    \  |\n8 |         l.iter().skip(l.len() / 2).fold(l[2..].iter().max().unwrap_or(l[l.len()\
    \ / 2]),\n  |                                                                \
    \       ^^^^^^^^^^^^^^\n  |                                                  \
    \                     |\n  |                                                 \
    \                      expected `&isize`, found `isize`\n  |                 \
    \                                                      help: consider borrowing\
    \ here: `&l[l.len() / 2]`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 1 argument was supplied\n    --> /tmp/tmpc9ug3vry.rs:7:14\n     |\n7    |  \
    \     l.iter().fold(\n     |                ^^^^ expected 2 arguments\n8    |\
    \ /         l.iter().skip(l.len() / 2).fold(l[2..].iter().max().unwrap_or(l[l.len()\
    \ / 2]),\n9    | |             |a, b| {\n10   | |                 // if either\
    \ one is negative, we choose the negative\n11   | |                 // one as\
    \ the median\n...    |\n17   | |             },\n18   | |     )\n     | |_____-\
    \ supplied 1 argument\n     |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut min_value = l[0];\n    let mut\
    \ min_idx = l.iter().enumerate().find(|(e, _)| e < min_value);\n    let mut max_value\
    \ = l[0];\n    let mut max_idx = l.iter().enumerate().find(|(e, _)| e > max_value);\n\
    \n    for idx in l.iter().enumerate().rev() {\n        match min_idx {\n     \
    \       Some(m) if m.0 + m.1 < idx => min_value = l[m.0 + m.1],\n            _\
    \ => (),\n        }\n\n        match max_idx {\n            Some(m) if m.0 + m.1\
    \ > idx => max_value = l[m.0 + m.1],\n            _ => (),\n        }\n    }\n\
    \n    (max_value.0, (min_value.0, (max_idx.0 + max_idx.1, (min_idx.0 + min_idx.1,\
    \ l.len() ))))\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7qhk86w2.rs:8:62\n  |\n8 |\
    \     let mut min_idx = l.iter().enumerate().find(|(e, _)| e < min_value);\n \
    \ |                                                              ^^^^^^^^^ expected\
    \ `&usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7qhk86w2.rs:10:62\n\
    \   |\n10 |     let mut max_idx = l.iter().enumerate().find(|(e, _)| e > max_value);\n\
    \   |                                                              ^^^^^^^^^ expected\
    \ `&usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7qhk86w2.rs:14:30\n\
    \   |\n14 |             Some(m) if m.0 + m.1 < idx => min_value = l[m.0 + m.1],\n\
    \   |                              ^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `&isize` to `usize`\n  --> /tmp/tmp7qhk86w2.rs:14:28\n   |\n14 |\
    \             Some(m) if m.0 + m.1 < idx => min_value = l[m.0 + m.1],\n   |  \
    \                          ^ no implementation for `usize + &isize`\n   |\n  \
    \ = help: the trait `Add<&isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7qhk86w2.rs:14:36\n   |\n14 |             Some(m) if m.0\
    \ + m.1 < idx => min_value = l[m.0 + m.1],\n   |                             \
    \       ^^^ expected `usize`, found tuple\n   |\n   = note: expected type `usize`\n\
    \             found tuple `(usize, &isize)`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7qhk86w2.rs:14:63\n   |\n14 |             Some(m) if m.0 + m.1\
    \ < idx => min_value = l[m.0 + m.1],\n   |                                   \
    \                            ^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `&isize` to `usize`\n  --> /tmp/tmp7qhk86w2.rs:14:61\n   |\n14 |\
    \             Some(m) if m.0"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len().checked_div(2).unwrap();\n    l[(l.len() - 1)/2].checked_div(2).unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wy_0zc7.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l[(l.len() - 1)/2].checked_div(2).unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     l[(l.len()\
    \ - 1)/2].checked_div(2).unwrap() as f64\n   |                               \
    \                 ++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.into_iter().fold(0.0, |acc, x| acc +\
    \ x)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmp4ikl7p08.rs:7:42\n\
    \  |\n7 |     l.into_iter().fold(0.0, |acc, x| acc + x)\n  |                 \
    \                         ^ no implementation for `f64 + isize`\n  |\n  = help:\
    \ the trait `Add<isize>` is not implemented for `f64`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    if n == 0 {\n   \
    \     return 0;\n    }\n    let mut m = l[n / 2];\n    for (i, el) in l.iter_mut().enumerate()\
    \ {\n        if *el < *m {\n            m = el;\n        }\n    }\n    m\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpac1le2tg.rs:9:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |         return 0;\n  |              \
    \  ^\n  |                |\n  |                expected `f64`, found integer\n\
    \  |                help: use a float literal: `0.0`\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpac1le2tg.rs:13:18\n   |\n13 |        \
    \ if *el < *m {\n   |                  ^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpac1le2tg.rs:14:17\n   |\n11 |     let mut m = l[n / 2];\n   | \
    \                -------- expected due to this value\n...\n14 |             m\
    \ = el;\n   |                 ^^ expected `isize`, found `&mut isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             m = *el;\n   |\
    \                 +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpac1le2tg.rs:17:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n17 |     m\n   |     ^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |     m as f64\n   |       ++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    l.sort();\n    l.len()/2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpao5eriz_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len()/2\n  |     ^^^^^^^^^ expected\
    \ `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    9 |     (l.len()/2) as f64\n  |     +         ++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut lower = l.iter().skip(l.len() /\
    \ 2).take(l.len() / 2).collect::<Vec<_>>();\n    let mut upper = l.iter().skip(l.len()\
    \ / 2).take(l.len() / 2).collect::<Vec<_>>();\n    lower = lower.iter().filter(|x|\
    \ *x < *lower[0]).collect::<Vec<_>>();\n    upper = upper.iter().filter(|x| *x\
    \ < *upper[0]).collect::<Vec<_>>();\n    lower.iter().filter(|x| *x > *lower[0]).collect::<Vec<_>>().min(|a,\
    \ b| a.partial_cmp(&b).unwrap_or(1))\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbstgumz8.rs:9:42\n  |\n9 |\
    \     lower = lower.iter().filter(|x| *x < *lower[0]).collect::<Vec<_>>();\n \
    \ |                                          ^^^^^^^^^ expected `&&isize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbstgumz8.rs:9:13\n \
    \ |\n7 |     let mut lower = l.iter().skip(l.len() / 2).take(l.len() / 2).collect::<Vec<_>>();\n\
    \  |                     ----------------------------------------------------------------\
    \ expected due to this value\n8 |     let mut upper = l.iter().skip(l.len() /\
    \ 2).take(l.len() / 2).collect::<Vec<_>>();\n9 |     lower = lower.iter().filter(|x|\
    \ *x < *lower[0]).collect::<Vec<_>>();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected struct `Vec<&isize>`\n\
    \             found struct `Vec<&&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbstgumz8.rs:10:42\n   |\n10 |     upper = upper.iter().filter(|x|\
    \ *x < *upper[0]).collect::<Vec<_>>();\n   |                                 \
    \         ^^^^^^^^^ expected `&&isize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbstgumz8.rs:10:13\n   |\n8  |     let mut upper = l.iter().skip(l.len()\
    \ / 2).take(l.len() / 2).collect::<Vec<_>>();\n   |                     ----------------------------------------------------------------\
    \ expected due to this value\n9  |     lower = lower.iter().filter(|x| *x < *lower[0]).collect::<Vec<_>>();\n\
    10 |     upper = upper.iter().filter(|x| *x < *upper[0]).collect::<Vec<_>>();\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<&isize>`\n\
    \              found struct `Vec<&&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbstgumz8.rs:11:34\n   |\n11 |     lower.iter().filter(|x| *x >\
    \ *lower[0]).collect::<Vec<_>>().min(|a, b| a.partial_cmp(&b).unwrap_or(1))\n\
    \   |                                  ^^^^^^^^^ expected `&&isize`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbstgumz"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().windowed(2).min().next().unwrap_or(l.iter().min())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windowed` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpyj7ecm9a.rs:7:14\n  |\n7 |     l.iter().windowed(2).min().next().unwrap_or(l.iter().min())\n\
    \  |              ^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // use rand to avoid some problems with\
    \ unstable algorithms\n    let mut rng = rand::thread_rng();\n    let mut arr\
    \ = l.to_vec();\n    arr.sort_unstable();\n    let sz = arr.len() as isize;\n\
    \    if sz <= 1 { 0.0 }\n    else {\n        let mid = sz / 2.0;\n        arr[(sz\
    \ + mid) / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `rand`\n\
    \ --> /tmp/tmp3trhahq7.rs:8:19\n  |\n8 |     let mut rng = rand::thread_rng();\n\
    \  |                   ^^^^ use of undeclared crate or module `rand`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp3trhahq7.rs:14:22\n   |\n\
    14 |         let mid = sz / 2.0;\n   |                      ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().map(|(i,\
    \ _)| l.len() - i / 2).unwrap().sum::<f64>() / l.len() as f64\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmp221qcllr.rs:7:65\n  |\n7 |     l.iter().cloned().enumerate().map(|(i,\
    \ _)| l.len() - i / 2).unwrap().sum::<f64>() / l.len() as f64\n  |           \
    \                                                      ^^^^^^ method not found\
    \ in `Map<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp221qcllr.rs:7:39:\
    \ 7:63]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold((l.len() / 2).floor() as\
    \ isize, |a, b| {\n        if a > b {\n            (b, a)\n        } else {\n\
    \            (a, b)\n        }\n    }).0\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpc534vbx4.rs:7:33\n  |\n7 |     l.iter().fold((l.len() /\
    \ 2).floor() as isize, |a, b| {\n  |                                 ^^^^^ help:\
    \ there is an associated function with a similar name: `div_floor`\n\nerror[E0277]:\
    \ can't compare `(&isize, &isize)` with `&isize`\n --> /tmp/tmpc534vbx4.rs:8:14\n\
    \  |\n8 |         if a > b {\n  |              ^ no implementation for `(&isize,\
    \ &isize) < &isize` and `(&isize, &isize) > &isize`\n  |\n  = help: the trait\
    \ `PartialOrd<&isize>` is not implemented for `(&isize, &isize)`\n  = help: the\
    \ following other types implement trait `PartialOrd<Rhs>`:\n            ()\n \
    \           (A, B, C, D, E, F, G, H, I, J, K, L)\n            (B, C, D, E, F,\
    \ G, H, I, J, K, L)\n            (C, D, E, F, G, H, I, J, K, L)\n            (D,\
    \ E, F, G, H, I, J, K, L)\n            (E, F, G, H, I, J, K, L)\n            (F,\
    \ G, H, I, J, K, L)\n            (G, H, I, J, K, L)\n          and 5 others\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpc534vbx4.rs:8:9\n   |\n8  | /  \
    \       if a > b {\n9  | |             (b, a)\n10 | |         } else {\n11 | |\
    \             (a, b)\n12 | |         }\n   | |_________^ expected `&isize`, found\
    \ tuple\n   |\n   = note: expected reference `&isize`\n                  found\
    \ tuple `(&isize, &isize)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc534vbx4.rs:11:13\n\
    \   |\n11 |             (a, b)\n   |             ^^^^^^ expected `&isize`, found\
    \ tuple\n   |\n   = note: expected reference `&isize`\n                  found\
    \ tuple `(&isize, &isize)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc534vbx4.rs:7:5\n\
    \   |\n6  |   fn median(l: Vec<isize>) -> f64 {\n   |                        \
    \       --- expected `f64` because of return type\n7  | /     l.iter().fold((l.len()\
    \ / 2).floor() as isize, |a, b| {\n8  | |         if a > b {\n9  | |         \
    \    (b, a)\n10 | |         } else {\n11 | |             (a, b)\n12 | |      \
    \   }\n13 | |     }).0\n   | |________^ expected `f64`, found `&isize`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    v.len()\n        .checked_div(2)\n        .expect(\"len {}\
    \ should be even\", v)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \   --> /tmp/tmpi6yqanfq.rs:11:10\n    |\n11  |         .expect(\"len {} should\
    \ be even\", v)\n    |          ^^^^^^ -----------------------  - supplied 2 arguments\n\
    \    |          |\n    |          expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi6yqanfq.rs:9:5\n\
    \   |\n6  |   fn median(l: Vec<isize>) -> f64 {\n   |                        \
    \       --- expected `f64` because of return type\n...\n9  | /     v.len()\n10\
    \ | |         .checked_div(2)\n11 | |         .expect(\"len {} should be even\"\
    , v)\n   | |___________________________________________^ expected `f64`, found\
    \ `usize`\n   |\nhelp: you can cast a `usize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n11 |      \
    \   .expect(\"len {} should be even\", v) as f64\n   |                       \
    \                      ++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    (l.len() % 2).fold(l.iter().next().unwrap(), l.iter().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `usize` is not an iterator\n --> /tmp/tmpgbivklrr.rs:9:19\n\
    \  |\n9 |     (l.len() % 2).fold(l.iter().next().unwrap(), l.iter().next().unwrap())\n\
    \  |                   ^^^^ `usize` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `usize: Iterator`\n          which\
    \ is required by `&mut usize: Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort_unstable_by_key(|x| x);\n    v.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2fzdb0hi.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     v.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (v.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.0\n\
    \    }\n    let mut sorted_l = l;\n    sorted_l.sort();\n\n    if l.len() % 2\
    \ == 1 {\n        let mid = l.len() / 2;\n        sorted_l[mid]\n    } else {\n\
    \        l.len() / 2\n    }\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppaikaed8.rs:15:9\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n15 |         sorted_l[mid]\n   |        \
    \ ^^^^^^^^^^^^^ expected `f64`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppaikaed8.rs:17:9\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n17 |         l.len() / 2\n   |         ^^^^^^^^^^^ expected `f64`, found\
    \ `usize`\n   |\nhelp: you can cast a `usize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n17 |      \
    \   (l.len() / 2) as f64\n   |         +           ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len < 1 {\n\
    \        return std::f64::NAN;\n    }\n\n    let sorted_list = l.iter().sorted();\n\
    \    sorted_list[len / 2 - 1].unwrap()\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpgbyhkoj6.rs:12:32\n   |\n12 |     let sorted_list\
    \ = l.iter().sorted();\n   |                                ^^^^^^ method not\
    \ found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(l.len() / 2.0,\
    \ |a, b| {\n        if b == 0 {\n            a\n        } else {\n           \
    \ (b.0 as f64).floor() + a.0\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpwfbdjevb.rs:7:39\n\
    \  |\n7 |     l.iter().enumerate().fold(l.len() / 2.0, |a, b| {\n  |         \
    \                              ^ no implementation for `usize / {float}`\n  |\n\
    \  = help: the trait `Div<{float}>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpwfbdjevb.rs:8:17\n  |\n8 |         if b == 0 {\n  |            \
    \     ^ expected tuple, found integer\n  |\n  = note: expected tuple `(usize,\
    \ &isize)`\n              found type `{integer}`\n\nerror[E0610]: `f64` is a primitive\
    \ type and therefore doesn't have fields\n  --> /tmp/tmpwfbdjevb.rs:11:38\n  \
    \ |\n11 |             (b.0 as f64).floor() + a.0\n   |                       \
    \               ^\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0610.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    if l.len() < 2 {\n        return l.len().reciprocal();\n \
    \   }\n    let mid = l.len() / 2;\n    let mut lower = l[0];\n    let mut upper\
    \ = l[mid];\n    loop {\n        loop {\n            let mut iter_mid_lower =\
    \ l.iter_mut().skip(mid).take(mid).cloned().collect::<Vec<_>>();\n           \
    \ let mut iter_mid_upper = iter_mid_lower.clone();\n            if iter_mid_lower.len()\
    \ > iter_mid_upper.len() {\n                iter_mid_lower.sort();\n         \
    \       iter_mid_upper.sort();\n            }\n            if iter_mid_lower.len()\
    \ > iter_mid_upper.len() {\n                if iter_mid_lower[0] == iter_mid_upper[0]\
    \ {\n                    return iter_mid_lower[0];\n                } else {\n\
    \                    lower = iter_mid_lower[0];\n                    upper = iter_mid_upper[0];\n\
    \                    mid = l.len() / 2;\n                }\n            } else\
    \ {\n                if iter_mid_lower[mid] == iter_mid_upper[mid] {\n       \
    \             return iter_mid_lower[mid];\n                } else {\n        \
    \            lower = iter_mid_lower[mid];\n                    upper = iter_mid_upper[mid];\n\
    \                    mid = l.len() / 2;\n                }\n            }\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reciprocal` found for type `usize` in the\
    \ current scope\n  --> /tmp/tmpf4e9xpex.rs:10:24\n   |\n10 |         return l.len().reciprocal();\n\
    \   |                        ^^^^^^^^^^ method not found in `usize`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::iter::Take<Skip<std::slice::IterMut<'_, isize>>>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpf4e9xpex.rs:17:71\n     |\n17   |\
    \             let mut iter_mid_lower = l.iter_mut().skip(mid).take(mid).cloned().collect::<Vec<_>>();\n\
    \     |                                                                      \
    \ ^^^^^^ types differ in mutability\n     |\n     = note:      expected reference\
    \ `&_`\n             found mutable reference `&mut isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::iter::Take<Skip<std::slice::IterMut<'_,\
    \ isize>>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpf4e9xpex.rs:17:80\n\
    \   |\n17 |                let mut iter_mid_lower = l.iter_mut().skip(mid).take(mid).cloned().collect::<Vec<_>>();\n\
    \   |                                                                        \
    \           ^^^^^^^ method cannot be called on `Cloned<std::iter::Take<Skip<std::slice::IterMut<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<std::iter::Take<Skip<std::slice::IterMut<'_,\
    \ isize>>> as Iterator>::Item = &_`\n           which is required by `Cloned<std::iter::Take<Skip<std::slice::IterMut<'_,\
    \ isize>>>>: Iterator`\n           `Cloned<std::iter::Take<Skip<std::slice::IterMut<'_,\
    \ isize>>>>: Iterator`\n           which is required by `&mut Cloned<std::iter::Take<Skip<std::slice::IterMut<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut n = l.len();\n    n /= 2;\n   \
    \ let mut m = l.len() / 2;\n    if n == 0 {\n        return 0.;\n    }\n    loop\
    \ {\n        if l[m] < l[m + 1] {\n            let tmp = l[m];\n            l[m]\
    \ = l[m + 1];\n            l[m + 1] = tmp;\n        } else {\n            let\
    \ tmp = l[m + 1];\n            l[m + 1] = l[m];\n            l[m] = tmp;\n   \
    \     }\n        m += 1;\n        if m >= n {\n            break;\n        }\n\
    \    }\n    l[m]\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4v8jepqo.rs:28:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n28 |     l[m]\n   |     ^^^^ expected `f64`,\
    \ found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |t, el| t + el / l.len())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuwax59ln.rs:7:41\n  |\n7 |\
    \     l.iter().fold(0.0, |t, el| t + el / l.len())\n  |                      \
    \                   ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ divide `&isize` by `usize`\n --> /tmp/tmpuwax59ln.rs:7:39\n  |\n7 |     l.iter().fold(0.0,\
    \ |t, el| t + el / l.len())\n  |                                       ^ no implementation\
    \ for `&isize / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpuwax59ln.rs:7:34\n \
    \ |\n7 |     l.iter().fold(0.0, |t, el| t + el / l.len())\n  |               \
    \                   ^ no implementation for `f64 + isize`\n  |\n  = help: the\
    \ trait `Add<isize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n          and 48 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().rev().skip(l.len() / 2).fold(l.iter().cloned().max(),\
    \ |a, b| a.max() < (b as f64).max())\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp89j_hyl5.rs:7:43\n  |\n7 |\
    \     l.iter().rev().skip(l.len() / 2).fold(l.iter().cloned().max(), |a, b| a.max()\
    \ < (b as f64).max())\n  |                                           ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n  |\n  = note: expected type `f64`\n  \
    \           found enum `Option<isize>`\n\nerror[E0061]: this function takes 1\
    \ argument but 0 arguments were supplied\n   --> /tmp/tmp89j_hyl5.rs:7:77\n  \
    \  |\n7   |     l.iter().rev().skip(l.len() / 2).fold(l.iter().cloned().max(),\
    \ |a, b| a.max() < (b as f64).max())\n    |                                  \
    \                                           ^^^- supplied 0 arguments\n    | \
    \                                                                            |\n\
    \    |                                                                       \
    \      expected 1 argument\n    |\nnote: associated function defined here\n\n\
    error[E0061]: this function takes 1 argument but 0 arguments were supplied\n \
    \  --> /tmp/tmp89j_hyl5.rs:7:96\n    |\n7   |     l.iter().rev().skip(l.len()\
    \ / 2).fold(l.iter().cloned().max(), |a, b| a.max() < (b as f64).max())\n    |\
    \                                                                            \
    \                    ^^^- supplied 0 arguments\n    |                        \
    \                                                                        |\n \
    \   |                                                                        \
    \                        expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmp89j_hyl5.rs:7:75\n\
    \  |\n6 | fn median(l: Vec<isize>) -> f64 {\n  |                             ---\
    \ expected `f64` because of return type\n7 |     l.iter().rev().skip(l.len() /\
    \ 2).fold(l.iter().cloned().max(), |a, b| a.max() < (b as f64).max())\n  |   \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `bool`\n\nerror[E0606]: casting `&isize` as `f64` is invalid\n\
    \ --> /tmp/tmp89j_hyl5.rs:7:85\n  |\n7 |     l.iter"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().fold(f64::median(), |sum,\
    \ el| sum + el) / l.len()\n}\n\nfn main() {\n    let candidate = median;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `median` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpj3yfzbm7.rs:7:33\n  |\n7 |     l.iter().cloned().fold(f64::median(),\
    \ |sum, el| sum + el) / l.len()\n  |                                 ^^^^^^\n\
    \  |                                 |\n  |                                 function\
    \ or associated item not found in `f64`\n  |                                 help:\
    \ there is an associated function with a similar name: `min`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(\n        ||\
    \ l.len() / 2,\n        |acc, &(i, val)| {\n            if i > acc.0 {\n     \
    \           acc\n            } else {\n                let mut mid = (acc + i)\
    \ / 2;\n                if val < mid.0 {\n                    mid\n          \
    \      } else {\n                    val\n                }\n            }\n \
    \       },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeeelz_5h.rs:8:9\n  |\n8 |\
    \         || l.len() / 2,\n  |         ^^^^^^^^^^^^^^ expected `f64`, found closure\n\
    \  |\n  = note: expected type `f64`\n          found closure `[closure@/tmp/tmpeeelz_5h.rs:8:9:\
    \ 8:23]`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpeeelz_5h.rs:9:15\n  |\n\
    9 |         |acc, &(i, val)| {\n  |               ^^^^^^^^-\n  |             \
    \  |       |\n  |               |       expected due to this\n  |            \
    \   expected tuple, found reference\n  |\n  = note:  expected tuple `(usize, &isize)`\n\
    \          found reference `&_`\n\nerror[E0610]: `f64` is a primitive type and\
    \ therefore doesn't have fields\n  --> /tmp/tmpeeelz_5h.rs:10:24\n   |\n10 | \
    \            if i > acc.0 {\n   |                        ^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0610.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut n = l.len();\n    if n % 2 == 1\
    \ {\n        l[l.len() / 2] = l[l.len() / 2] / 2.0 + l[l.len() / 2] / 2.0;\n \
    \   }\n    else {\n        l[l.len() / 2]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n --> /tmp/tmp0scth1q1.rs:9:41\n\
    \  |\n9 |         l[l.len() / 2] = l[l.len() / 2] / 2.0 + l[l.len() / 2] / 2.0;\n\
    \  |                                         ^ no implementation for `isize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `isize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n --> /tmp/tmp0scth1q1.rs:9:64\n  |\n9 |       \
    \  l[l.len() / 2] = l[l.len() / 2] / 2.0 + l[l.len() / 2] / 2.0;\n  |        \
    \                                                        ^ no implementation for\
    \ `isize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0scth1q1.rs:8:19\n   |\n8  | \
    \      if n % 2 == 1 {\n   |  ___________________^\n9  | |         l[l.len() /\
    \ 2] = l[l.len() / 2] / 2.0 + l[l.len() / 2] / 2.0;\n10 | |     }\n   | |_____^\
    \ expected `f64`, found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0scth1q1.rs:12:9\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n12 |         l[l.len() / 2]\n\
    \   |         ^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc -"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |median, x| if median == l.len() / 2.0 { return x } else { median + x\
    \ },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpcbkdwfz_.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpcbkdwfz_.rs:9:42\n\
    \  |\n9 |         |median, x| if median == l.len() / 2.0 { return x } else { median\
    \ + x },\n  |                                          ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpcbkdwfz_.rs:9:57\n  |\n9 |    \
    \     |median, x| if median == l.len() / 2.0 { return x } else { median + x },\n\
    \  |                                                         ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmpcbkdwfz_.rs:9:75\n\
    \  |\n9 |         |median, x| if median == l.len() / 2.0 { return x } else { median\
    \ + x },\n  |                                                                \
    \           ^ no implementation for `f64 + &isize`\n  |\n  = help: the trait `Add<&isize>`\
    \ is not implemented for `f64`\n  = help: the following other types implement\
    \ trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as\
    \ Add<f64>>\n            <&'a i128 as Add<"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() > 1 {\n        let middle =\
    \ l.len() / 2;\n        let median1 = l[middle];\n        let median2 = l[middle\
    \ + 1];\n        (median1 + median2) / 2.0\n    } else {\n        l[0]\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpghpy8khz.rs:11:29\n\
    \   |\n11 |         (median1 + median2) / 2.0\n   |                          \
    \   ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghpy8khz.rs:13:9\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n13 |         l[0]\n   |  \
    \       ^^^^ expected `f64`, found `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] < m {\n            m = l[i];\n        }\n    }\n    m\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptwdqzxnh.rs:13:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n13 |     m\n   |     ^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n13 |     m\
    \ as f64\n   |       ++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| sum + e / 2)\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmp1l_1_7mo.rs:7:37\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, e| sum + e / 2)\n  |                  \
    \                   ^ no implementation for `f64 + isize`\n  |\n  = help: the\
    \ trait `Add<isize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.iter().filter(|&x| x > 0).count();\n\
    \    len / 2.0\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpey3l5jpy.rs:7:40\n  |\n7 |\
    \     let len = l.iter().filter(|&x| x > 0).count();\n  |                    \
    \                    ^\n  |                                        |\n  |    \
    \                                    expected `&isize`, found integer\n  |   \
    \                                     help: consider borrowing here: `&0`\n\n\
    error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpey3l5jpy.rs:8:9\n\
    \  |\n8 |     len / 2.0\n  |         ^ no implementation for `usize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect();\n\
    \    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 1 {\n      \
    \  v.swap(0, mid);\n    }\n    v.into_iter().fold(0, |acc, x| acc + x)\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpmj16lsr8.rs:8:5\n \
    \ |\n7 |     let mut v = l.iter().cloned().collect();\n  |         ----- consider\
    \ giving `v` a type\n8 |     v.sort();\n  |     ^ cannot infer type\n  |\n  =\
    \ note: type must be known at this point\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(0.0, |sum, (i,\
    \ item)| sum + f64(item) / (i + 1))\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected function, found builtin type `f64`\n --> /tmp/tmp08on0639.rs:7:59\n\
    \  |\n7 |     l.iter().enumerate().fold(0.0, |sum, (i, item)| sum + f64(item)\
    \ / (i + 1))\n  |                                                           ^^^\
    \ not a function\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0423`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n\n    if n < 2 {\n  \
    \      return l[n/2];\n    }\n\n    // median of medians\n    // https://en.wikipedia.org/wiki/Median-of-medians\n\
    \n    let mid = l.len() / 2;\n    let mut l1 = l.subslice(0..mid);\n    let mut\
    \ l2 = l.subslice(mid..);\n\n    // sort left half\n    l1.sort_unstable();\n\n\
    \    // sort right half\n    l2.sort_unstable();\n\n    let mut m1 = median(l1);\n\
    \    let mut m2 = median(l2);\n\n    while m2 < m1 {\n        l2.swap(0, mid);\n\
    \        l2.swap(mid, mid-1);\n        l2.swap(mid-1, mid);\n        l2.swap(mid,\
    \ mid+1);\n\n        l1.swap(0, mid);\n        l1.swap(mid, mid-1);\n        l1.swap(mid-1,\
    \ mid);\n        l1.swap(mid, mid+1);\n\n        m1 = m1;\n        m2 = m2;\n\
    \    }\n\n    return m1;\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp18ve0zvr.rs:10:16\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |         return l[n/2];\n   |       \
    \         ^^^^^^ expected `f64`, found `isize`\n\nerror[E0599]: no method named\
    \ `subslice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp18ve0zvr.rs:17:20\n\
    \   |\n17 |     let mut l1 = l.subslice(0..mid);\n   |                    ^^^^^^^^\
    \ help: there is an associated function with a similar name: `splice`\n\nerror[E0599]:\
    \ no method named `subslice` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmp18ve0zvr.rs:18:20\n   |\n18 |     let mut l2 = l.subslice(mid..);\n\
    \   |                    ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `splice`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        // Note: median\
    \ is defined only for sorted data.\n        l.len() % 2 == 0 ? l.len() / 2.0 :\
    \ (l.len() - l.len() / 2.0),\n        |a, b| a.checked_add(b).ok() / 2.0,\n  \
    \  )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `.`\n\
    \ --> /tmp/tmp6uj71fd7.rs:9:46\n  |\n9 |         l.len() % 2 == 0 ? l.len() /\
    \ 2.0 : (l.len() - l.len() / 2.0),\n  |                                      \
    \    -   ^\n  |                                          |   |\n  |          \
    \                                |   expected one of 7 possible tokens\n  |  \
    \                                        |   help: missing `,`\n  |          \
    \                                tried to parse a type due to this\n\nerror: expected\
    \ one of `!`, `)`, `+`, `,`, `->`, or `::`, found `-`\n --> /tmp/tmp6uj71fd7.rs:9:53\n\
    \  |\n9 |         l.len() % 2 == 0 ? l.len() / 2.0 : (l.len() - l.len() / 2.0),\n\
    \  |                                                     ^ expected one of `!`,\
    \ `)`, `+`, `,`, `->`, or `::`\n\nerror: expected one of `)`, `,`, `.`, `?`, or\
    \ an operator, found `l`\n --> /tmp/tmp6uj71fd7.rs:9:28\n  |\n9 |         l.len()\
    \ % 2 == 0 ? l.len() / 2.0 : (l.len() - l.len() / 2.0),\n  |                 \
    \          -^ expected one of `)`, `,`, `.`, `?`, or an operator\n  |        \
    \                   |\n  |                           help: missing `,`\n\nerror:\
    \ expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n --> /tmp/tmp6uj71fd7.rs:9:69\n\
    \  |\n9 |         l.len() % 2 == 0 ? l.len() / 2.0 : (l.len() - l.len() / 2.0),\n\
    \  |                                                                     ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to 4 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len == 0 {\n\
    \        return 0.0; // special case\n    }\n    // sort, get middle element\n\
    \    let mut mid = l.len() / 2;\n    l.sort_unstable();\n    let i = mid;\n  \
    \  let mut a = l[i];\n    for j in 1..mid {\n        if l[j] < a {\n         \
    \   a = l[j];\n        }\n    }\n    return a;\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptnxuq_9r.rs:21:12\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n21 |     return a;\n   |            ^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    21 |     return a as f64;\n   |              ++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0f64, |a, b| std::cmp::Ordering::Less(a,\
    \ b)).mid\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found enum variant `std::cmp::Ordering::Less`\n\
    \ --> /tmp/tmpuuhvakq7.rs:7:32\n  |\n7 |     l.iter().fold(0f64, |a, b| std::cmp::Ordering::Less(a,\
    \ b)).mid\n  |                                ^^^^^^^^^^^^^^^^^^^^^^^^------\n\
    \  |                                |\n  |                                call\
    \ expression requires function\n  |\nhelp: `std::cmp::Ordering::Less` is a unit\
    \ variant, you need to write it without the parentheses\n  |\n7 -     l.iter().fold(0f64,\
    \ |a, b| std::cmp::Ordering::Less(a, b)).mid\n7 +     l.iter().fold(0f64, |a,\
    \ b| std::cmp::Ordering::Less).mid\n  | \n\nerror[E0610]: `f64` is a primitive\
    \ type and therefore doesn't have fields\n --> /tmp/tmpuuhvakq7.rs:7:64\n  |\n\
    7 |     l.iter().fold(0f64, |a, b| std::cmp::Ordering::Less(a, b)).mid\n  |  \
    \                                                              ^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0610, E0618.\n\
    For more information about an error, try `rustc --explain E0610`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().sorted().median()\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpm6votii4.rs:7:23\n  |\n7 |     l.iter().cloned().sorted().median()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    l.iter().fold(\n\
    \        l.iter().skip(len/2).take(len/2).count() as f64 * 1.0 / len as f64,\n\
    \        (l, r) => {\n            l + (r - l) as f64\n        }\n    )\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \  --> /tmp/tmpvjm71277.rs:10:16\n   |\n10 |         (l, r) => {\n   |       \
    \         ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0f64, 0.);\n\
    \    let mut m = 0;\n    let len = l.len();\n    for i in 0..len {\n        if\
    \ s <= l[i/2] {\n            m = i;\n        }\n        s += l[i];\n    }\n  \
    \  m + 1.\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(f64, &isize)>` closure, found `{float}`\n\
    \    --> /tmp/tmpyjmgsjq_.rs:7:37\n     |\n7    |     let mut s = l.iter().fold(0f64,\
    \ 0.);\n     |                          ----       ^^ expected an `FnMut<(f64,\
    \ &isize)>` closure, found `{float}`\n     |                          |\n    \
    \ |                          required by a bound introduced by this call\n   \
    \  |\n     = help: the trait `FnMut<(f64, &isize)>` is not implemented for `{float}`\n\
    note: required by a bound in `fold`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyjmgsjq_.rs:11:17\n\
    \   |\n11 |         if s <= l[i/2] {\n   |                 ^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |         if s <= l[i/2] as f64 {\n   |                        ++++++\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `f64`\n  --> /tmp/tmpyjmgsjq_.rs:14:11\n   |\n\
    14 |         s += l[i];\n   |           ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add `{float}` to `usize`\n  --> /tmp/tmpyjmgsjq_.rs:16:7\n\
    \   |\n16 |     m + 1.\n   |       ^ no implementation for `usize + {float}`\n\
    \   |\n   = help: the trait `Add<{float}>` is not implemented for `usize`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().map(|&x| x.abs()).fold(f64::MIN,\
    \ f64::MAX).unwrap() / 2.0\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(f64, isize)>` closure, found `f64`\n \
    \   --> /tmp/tmp4xanb6vh.rs:7:32\n     |\n7    |     l.iter().map(|&x| x.abs()).fold(f64::MIN,\
    \ f64::MAX).unwrap() / 2.0\n     |                                ^^^^ expected\
    \ an `FnMut<(f64, isize)>` closure, found `f64`\n     |\n     = help: the trait\
    \ `FnMut<(f64, isize)>` is not implemented for `f64`\nnote: required by a bound\
    \ in `fold`\n\nerror[E0599]: no method named `unwrap` found for type `f64` in\
    \ the current scope\n --> /tmp/tmp4xanb6vh.rs:7:57\n  |\n7 |     l.iter().map(|&x|\
    \ x.abs()).fold(f64::MIN, f64::MAX).unwrap() / 2.0\n  |                      \
    \                                   ^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().fold(\n \
    \       l.iter().sorted().nth(l.len() / 2).unwrap().unwrap() as f64,\n       \
    \ |acc, elt| acc + elt,\n    )\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpcj1yilf3.rs:8:18\n  |\n8 |         l.iter().sorted().nth(l.len()\
    \ / 2).unwrap().unwrap() as f64,\n  |                  ^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror[E0277]: cannot add `(usize, isize)`\
    \ to `f64`\n --> /tmp/tmpcj1yilf3.rs:9:24\n  |\n9 |         |acc, elt| acc + elt,\n\
    \  |                        ^ no implementation for `f64 + (usize, isize)`\n \
    \ |\n  = help: the trait `Add<(usize, isize)>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut n = l.len();\n    loop {\n    \
    \    if n % 2 == 0 {\n            n /= 2;\n        } else {\n            n = n\
    \ / 2 + 1;\n        }\n        let mid = l.len() - n;\n        if l.len() % 2\
    \ == 0 {\n            if l[mid] <= l[mid + 1] {\n                return l[mid];\n\
    \            } else {\n                return l[mid - 1] + 1.0_f64 / 2.0_f64;\n\
    \            }\n        } else {\n            if l[mid] >= l[mid + 1] {\n    \
    \            return l[mid];\n            } else {\n                return l[mid\
    \ - 1] + 1.0_f64 / 2.0_f64;\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd39dr4ql.rs:17:24\n   |\n\
    17 |                 return l[mid];\n   |                        ^^^^^^ expected\
    \ `f64`, found `isize`\n\nerror[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpd39dr4ql.rs:19:35\n\
    \   |\n19 |                 return l[mid - 1] + 1.0_f64 / 2.0_f64;\n   |     \
    \                              ^ no implementation for `isize + f64`\n   |\n \
    \  = help: the trait `Add<f64>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `f64` to `isize`\n  --> /tmp/tmpd39dr4ql.rs:25:35\n   |\n25 |          \
    \       return l[mid - 1] + 1.0_f64 / 2.0_f64;\n   |                         \
    \          ^ no implementation for `isize + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977772
