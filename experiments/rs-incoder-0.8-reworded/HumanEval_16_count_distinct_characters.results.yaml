language: rs
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counts:\
    \ HashMap<u32, isize> = HashMap::new();\n    for (i, char) in string.chars().enumerate()\
    \ {\n        if let Some(c) = counts.entry(char.as_bytes()).or_insert(0) {\n \
    \           counts[char.as_bytes()] += 1;\n        }\n    }\n    counts.values().iter().sum()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp5ed8udss.rs:7:21\n\
    \  |\n7 |     let mut counts: HashMap<u32, isize> = HashMap::new();\n  |     \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp5ed8udss.rs:7:43\n\
    \  |\n7 |     let mut counts: HashMap<u32, isize> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror[E0599]: no method named `as_bytes` found for type `char` in the\
    \ current scope\n --> /tmp/tmp5ed8udss.rs:9:44\n  |\n9 |         if let Some(c)\
    \ = counts.entry(char.as_bytes()).or_insert(0) {\n  |                        \
    \                    ^^^^^^^^ method not found in `char`\n\nerror[E0599]: no method\
    \ named `as_bytes` found for type `char` in the current scope\n  --> /tmp/tmp5ed8udss.rs:10:25\n\
    \   |\n10 |             counts[char.as_bytes()] += 1;\n   |                  \
    \       ^^^^^^^^ method not found in `char`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter(|c| !c.is_whitespace())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_lowercase())\n   \
    \     .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7wa8ppc.rs:7:5\n   |\n6\
    \  |   fn count_distinct_characters(string: String) -> isize {\n   |         \
    \                                          ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|c|\
    \ !c.is_whitespace())\n10 | |         .filter(|c| !c.is_ascii_uppercase())\n11\
    \ | |         .filter(|c| !c.is_ascii_lowercase())\n12 | |         .count()\n\
    \   | |________________^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n12 |         .count().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps1c9w5p0.rs:7:36\n  |\n7 |\
    \     string.chars().filter(|c| c >= 'a' && c <= 'z').count()\n  |           \
    \                         ^^^\n  |                                    |\n  | \
    \                                   expected `&char`, found `char`\n  |      \
    \                              help: consider borrowing here: `&'a'`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmps1c9w5p0.rs:7:48\n  |\n7 |     string.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count()\n  |                                         \
    \       ^^^\n  |                                                |\n  |       \
    \                                         expected `&char`, found `char`\n  |\
    \                                                help: consider borrowing here:\
    \ `&'z'`\n\nerror[E0308]: mismatched types\n --> /tmp/tmps1c9w5p0.rs:7:5\n  |\n\
    6 | fn count_distinct_characters(string: String) -> isize {\n  |             \
    \                                    ----- expected `isize` because of return\
    \ type\n7 |     string.chars().filter(|c| c >= 'a' && c <= 'z').count()\n  | \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| c\
    \ >= 'a' && c <= 'z').count().try_into().unwrap()\n  |                       \
    \                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for c in string.chars() {\n        if let Some(c) = c.to_ascii_lowercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsg5dmxxj.rs:9:16\n  |\n9 |\
    \         if let Some(c) = c.to_ascii_lowercase() {\n  |                ^^^^^^^\
    \   ---------------------- this expression has type `char`\n  |              \
    \  |\n  |                expected `char`, found enum `Option`\n  |\n  = note:\
    \ expected type `char`\n             found enum `Option<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_chars:\
    \ Vec<char> = Vec::new();\n    for c in string.chars() {\n        let lower =\
    \ c.to_lowercase();\n        let upper = c.to_uppercase();\n        if distinct_chars.contains(&lower)\
    \ && distinct_chars.contains(&upper) {\n            continue;\n        }\n   \
    \     distinct_chars.push(c);\n    }\n    distinct_chars.iter().cloned().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptd6qvzx5.rs:11:36\n   |\n\
    11 |         if distinct_chars.contains(&lower) && distinct_chars.contains(&upper)\
    \ {\n   |                                    ^^^^^^ expected `char`, found struct\
    \ `ToLowercase`\n   |\n   = note: expected reference `&char`\n              found\
    \ reference `&ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptd6qvzx5.rs:11:71\n\
    \   |\n11 |         if distinct_chars.contains(&lower) && distinct_chars.contains(&upper)\
    \ {\n   |                                                                    \
    \   ^^^^^^ expected `char`, found struct `ToUppercase`\n   |\n   = note: expected\
    \ reference `&char`\n              found reference `&ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptd6qvzx5.rs:16:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n16 |     distinct_chars.iter().cloned().count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     distinct_chars.iter().cloned().count().try_into().unwrap()\n\
    \   |                                           ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars_seen:\
    \ HashSet<char> = HashSet::new();\n    for char in string.chars() {\n        chars_seen.insert(char);\n\
    \    }\n    chars_seen.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp495c1p_e.rs:7:25\n\
    \  |\n7 |     let mut chars_seen: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp495c1p_e.rs:7:41\n\
    \  |\n7 |     let mut chars_seen: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counts\
    \ = HashMap::new();\n    for c in string.chars().cloned() {\n        counts.entry(c).or_insert(0);\n\
    \        counts.entry(c.to_ascii_lowercase()).or_insert(0);\n        counts.entry(c.to_ascii_uppercase()).or_insert(0);\n\
    \        counts.entry(c.to_ascii_ascii_lowercase()).or_insert(0);\n        counts.entry(c.to_ascii_ascii_uppercase()).or_insert(0);\n\
    \        counts.entry(c.to_ascii_digits()).or_insert(0);\n        counts.entry(c.to_ascii_ascii_digits()).or_insert(0);\n\
    \        counts.entry(c.to_ascii_ascii_ascii_digits()).or_insert(0);\n    }\n\
    \    counts.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpvbf27pcm.rs:7:22\n  |\n7 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0271]: type\
    \ mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n    --> /tmp/tmpvbf27pcm.rs:8:29\n\
    \     |\n8    |     for c in string.chars().cloned() {\n     |               \
    \              ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpvbf27pcm.rs:8:14\n  |\n8 |     for c in string.chars().cloned()\
    \ {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \  |\n  = note:   expected type `char`\n          found reference `&_`\n  = note:\
    \ required because of the requirements on the impl of `Iterator` for `Cloned<Chars<'_>>`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `Cloned<Chars<'_>>`\n\nerror[E0271]: type mismatch resolving `<Chars<'_>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpvbf27pcm.rs:8:14\n  |\n8 |     for c\
    \ in string.chars().cloned() {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found reference\n  |\n  = note:   expected type `char`\n          found\
    \ reference `&_`\n  = note: required because of the requirements on the impl of\
    \ `Iterator` for `Cloned<Chars<'_>>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut n\
    \ = 0;\n    for i in string.chars().map(|c| c.to_ascii_lowercase().chars().count())\
    \ {\n        n += i;\n    }\n    n\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n --> /tmp/tmp1u6uaphz.rs:8:60\n  |\n8 |     for i in string.chars().map(|c|\
    \ c.to_ascii_lowercase().chars().count()) {\n  |                             \
    \                               ^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|&c|\
    \ *c >= 'a' && *c <= 'z').count() + string.chars().filter(|&c| *c >= 'A' && *c\
    \ <= 'Z').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpc8lbrex3.rs:7:32\n\
    \  |\n7 |     string.chars().filter(|&c| *c >= 'a' && *c <= 'z').count() + string.chars().filter(|&c|\
    \ *c >= 'A' && *c <= 'Z').count()\n  |                                ^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n --> /tmp/tmpc8lbrex3.rs:7:45\n  |\n7 |\
    \     string.chars().filter(|&c| *c >= 'a' && *c <= 'z').count() + string.chars().filter(|&c|\
    \ *c >= 'A' && *c <= 'Z').count()\n  |                                       \
    \      ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpc8lbrex3.rs:7:93\n\
    \  |\n7 |     string.chars().filter(|&c| *c >= 'a' && *c <= 'z').count() + string.chars().filter(|&c|\
    \ *c >= 'A' && *c <= 'Z').count()\n  |                                       \
    \                                                      ^^\n\nerror[E0614]: type\
    \ `char` cannot be dereferenced\n --> /tmp/tmpc8lbrex3.rs:7:106\n  |\n7 |    \
    \ string.chars().filter(|&c| *c >= 'a' && *c <= 'z').count() + string.chars().filter(|&c|\
    \ *c >= 'A' && *c <= 'Z').count()\n  |                                       \
    \                                                                   ^^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpc8lbrex3.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|&c|\
    \ *c >= 'a' && *c <= 'z').count() + string.chars().filter(|&c| *c >= 'A' && *c\
    \ <= 'Z').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|&c|\
    \ *c >= 'a' && *c <= 'z').count() + string.chars().filter(|&c| *c >= 'A' && *c\
    \ <= 'Z').count()).try_into().unwrap()\n  |     +                            \
    \                                                                            \
    \               ++++++++++++"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count() + string.chars().filter(|c| c.is_ascii_uppercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0qzzn4df.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count() + string.chars().filter(|c|\
    \ c.is_ascii_uppercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count() + string.chars().filter(|c| c.is_ascii_uppercase()).count()).try_into().unwrap()\n\
    \  |     +                                                                   \
    \                                                  +++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count() + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaldieo5o.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count() + 1\n  |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count() + 1).try_into().unwrap()\n  |     +        \
    \                                                     +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() + (string.chars().filter(|c| *c >= 'a' && *c\
    \ <= 'z').count() as isize)\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbjghr4cg.rs:7:65\n  |\n7 |\
    \     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count() + (string.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').count() as isize)\n  |                             \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbjghr4cg.rs:7:5\n\
    \  |\n6 | fn count_distinct_characters(string: String) -> isize {\n  |       \
    \                                          ----- expected `isize` because of return\
    \ type\n7 |     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count() + (string.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').count() as isize)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() + (string.chars().filter(|c| *c >= 'a' && *c\
    \ <= 'z').count() as isize)).try_into().unwrap()\n  |     +                  \
    \                                                                            \
    \                                  +++++++++++++++++++++\n\nerror[E0277]: cannot\
    \ add `isize` to `usize`\n --> /tmp/tmpbjghr4cg.rs:7:63\n  |\n7 |     string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() + (string.chars().filter(|c| *c >= 'a' && *c\
    \ <= 'z').count() as isize)\n  |                                             \
    \                  ^ no implementation for `usize + isize`\n  |\n  = help: the\
    \ trait `Add<isize>` is not implemented for `usize`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n "
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count() + 1\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobo3s2sw.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count() + 1\n  |  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count() + 1).try_into().unwrap()\n  |     +       \
    \                                                       +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != 'X').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr9vpj2el.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != 'X').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != 'X').count().try_into().unwrap()\n  |                                \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counter:\
    \ isize = 0;\n    for c in string.chars() {\n        if c.to_lowercase() == c\
    \ {\n            counter = counter + 1;\n        }\n    }\n    counter\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: binary operation `==` cannot be applied to type `ToLowercase`\n\
    \ --> /tmp/tmp78voc6h6.rs:9:29\n  |\n9 |         if c.to_lowercase() == c {\n\
    \  |            ---------------- ^^ - char\n  |            |\n  |            ToLowercase\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_alphabetic()).count().into()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: From<usize>` is not satisfied\n -->\
    \ /tmp/tmpsph_d8ni.rs:7:58\n  |\n7 |     string.chars().filter(|c| c.is_alphabetic()).count().into()\n\
    \  |                                                          ^^^^ the trait `From<usize>`\
    \ is not implemented for `isize`\n  |\n  = help: the following other types implement\
    \ trait `From<T>`:\n            <f32 as From<i16>>\n            <f32 as From<i8>>\n\
    \            <f32 as From<u16>>\n            <f32 as From<u8>>\n            <f64\
    \ as From<f32>>\n            <f64 as From<i16>>\n            <f64 as From<i32>>\n\
    \            <f64 as From<i8>>\n          and 67 others\n  = note: required because\
    \ of the requirements on the impl of `Into<isize>` for `usize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj8t24pdh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_alphanumeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count().try_into().unwrap()\n  |                     \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct_by_ref().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct_by_ref` found for struct `Chars`\
    \ in the current scope\n --> /tmp/tmpxc388xlr.rs:7:20\n  |\n7 |     string.chars().distinct_by_ref().count()\n\
    \  |                    ^^^^^^^^^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_digit()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpfd42qka6.rs:7:34\n    |\n7   |     string.chars().filter(|c| !c.is_digit()).count()\n\
    \    |                                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                                  |\n    |                                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfd42qka6.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_digit()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_digit()).count().try_into().unwrap()\n\
    \  |                                                     ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().count(|c|\
    \ *c >= 'A' && *c <= 'Z' || *c >= 'a' && *c <= 'z')\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp2t3cdm4z.rs:7:27\n\
    \  |\n7 |     string.chars().count(|c| *c >= 'A' && *c <= 'Z' || *c >= 'a' &&\
    \ *c <= 'z')\n  |                           ^ consider giving this closure parameter\
    \ a type\n  |\n  = note: type must be known at this point\n\nerror[E0061]: this\
    \ function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp2t3cdm4z.rs:7:20\n\
    \    |\n7   |     string.chars().count(|c| *c >= 'A' && *c <= 'Z' || *c >= 'a'\
    \ && *c <= 'z')\n    |                    ^^^^^ ----------------------------------------------------\
    \ supplied 1 argument\n    |                    |\n    |                    expected\
    \ 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2t3cdm4z.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().count(|c| *c\
    \ >= 'A' && *c <= 'Z' || *c >= 'a' && *c <= 'z')\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|c|\
    \ *c >= 'A' && *c <= 'Z' || *c >= 'a' && *c <= 'z').try_into().unwrap()\n  | \
    \                                                                            \
    \  ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0282, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut dist:\
    \ isize = 0;\n    let mut string_c = string.length();\n    let mut last_char:\
    \ char;\n    for _ in 0 .. string.len() {\n        let mut first_char: char;\n\
    \        if let Some(first_char) = string.as_bytes().to_first() {\n          \
    \  last_char = first_char;\n        } else {\n            // No characters.\n\
    \            dist++;\n            break;\n        }\n        // Find out the next\
    \ character.\n        if let Some(next_char) = string.as_bytes().to_next() {\n\
    \            last_char = next_char;\n        } else {\n            // Last character\
    \ is repeated.\n            dist += 2;\n        }\n        // Update the count\
    \ for the character.\n        let mut char_count = string.chars().filter(|c| c.to_ascii_lowercase().get(0)\
    \ != first_char).count() + 1;\n        if char_count > dist {\n            dist\
    \ = char_count;\n        }\n    }\n    dist\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpq1kvpek7.rs:16:17\n\
    \   |\n16 |             dist++;\n   |                 ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n16 |             { let tmp = dist; dist\
    \ += 1; tmp };\n   |             +++++++++++     ~~~~~~~~~~~~~~~~~~\n16 -    \
    \         dist++;\n16 +             dist += 1;\n   | \n\nerror[E0599]: no method\
    \ named `length` found for struct `String` in the current scope\n --> /tmp/tmpq1kvpek7.rs:8:31\n\
    \  |\n8 |     let mut string_c = string.length();\n  |                       \
    \        ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror[E0599]: no method named `to_first` found for reference `&[u8]` in the\
    \ current scope\n  --> /tmp/tmpq1kvpek7.rs:12:53\n   |\n12 |         if let Some(first_char)\
    \ = string.as_bytes().to_first() {\n   |                                     \
    \                ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `first`\n\nerror[E0599]: no method named `to_next` found for reference\
    \ `&[u8]` in the current scope\n  --> /tmp/tmpq1kvpek7.rs:20:52\n   |\n20 |  \
    \       if let Some(next_char) = string.as_bytes().to_next() {\n   |         \
    \                                           ^^^^^^^ method not found in `&[u8]`\n\
    \nerror[E0599]: no method named `get` found for type `char` in the current scope\n\
    \  --> /tmp/tmpq1kvpek7.rs:27:79\n   |\n27 |         let mut char_count = string.chars().filter(|c|\
    \ c.to_ascii_lowercase().get(0) != first_char).count() + 1;\n   |            \
    \                                                                   ^^^ method\
    \ not found in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq1kvpek7.rs:28:25\n\
    \   |\n28 |         if char_count > dist {\n   |                         ^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         if\
    \ char_count > dist.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq1kvpek7.rs:29:20\n   |"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().fold(0,\
    \ |acc, x| acc + x.len_utf8());\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzeyfdv3o.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = usize::MAX;\n    for (i, c) in string.chars().enumerate() {\n        result\
    \ = std::cmp::max(result, c + 1);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `char`\n --> /tmp/tmpakcdzb6c.rs:9:42\n\
    \  |\n9 |         result = std::cmp::max(result, c + 1);\n  |                \
    \                        - ^ - {integer}\n  |                                \
    \        |\n  |                                        char\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpakcdzb6c.rs:11:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n11 |     result\n   |     ^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n11 |     result.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut length\
    \ = 0usize;\n    for c in string.chars() {\n        length = length + c.len_utf8();\n\
    \    }\n    length\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxfmmrno5.rs:11:5\n   |\n\
    6  | fn count_distinct_characters(string: String) -> isize {\n   |           \
    \                                      ----- expected `isize` because of return\
    \ type\n...\n11 |     length\n   |     ^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     length.try_into().unwrap()\n   |         \
    \  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_1iuaiiv.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii()).count().try_into().unwrap()\n  |                            \
    \                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj8t24pdh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_alphanumeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count().try_into().unwrap()\n  |                     \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c).distinct().count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn5ens32r.rs:7:31\n  |\n7 |\
    \     string.chars().filter(|c| *c).distinct().count()\n  |                  \
    \             ^^ expected `bool`, found `char`\n\nerror[E0599]: no method named\
    \ `distinct` found for struct `Filter` in the current scope\n --> /tmp/tmpn5ens32r.rs:7:35\n\
    \  |\n7 |     string.chars().filter(|c| *c).distinct().count()\n  |          \
    \                         ^^^^^^^^ method not found in `Filter<Chars<'_>, [closure@/tmp/tmpn5ens32r.rs:7:27:\
    \ 7:33]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .into_iter()\n        .map(|&c| char::to_ascii_lowercase().find(c).unwrap())\n\
    \        .filter(|c| c != Some(0))\n        .count()\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp67cyeeah.rs:8:10\n    |\n8 \
    \  |           .into_iter()\n    |            ^^^^^^^^^\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `String: IntoIterator`\n            `&String:\
    \ Iterator`\n            which is required by `&String: IntoIterator`\n      \
    \      `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror[E0061]: this function takes\
    \ 1 argument but 0 arguments were supplied\n    --> /tmp/tmp67cyeeah.rs:9:19\n\
    \     |\n9    |         .map(|&c| char::to_ascii_lowercase().find(c).unwrap())\n\
    \     |                   ^^^^^^^^^^^^^^^^^^^^^^^^-- supplied 0 arguments\n  \
    \   |                   |\n     |                   expected 1 argument\n    \
    \ |\nnote: associated function defined here\n\nerror[E0599]: no method named `find`\
    \ found for type `char` in the current scope\n --> /tmp/tmp67cyeeah.rs:9:46\n\
    \  |\n9 |         .map(|&c| char::to_ascii_lowercase().find(c).unwrap())\n  |\
    \                                              ^^^^ method not found in `char`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpn9hm12py.rs:7:20\n  |\n7 |     string.chars().distinct().count()\
    \ + 1\n  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut num_distinct\
    \ = 0;\n    for c in string.chars().cloned() {\n        if let Some(_) = (*c as\
    \ usize) {\n            num_distinct += 1;\n        }\n    }\n    num_distinct\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `let` scrutinee expression\n -->\
    \ /tmp/tmp7gf4va6o.rs:9:26\n  |\n9 |         if let Some(_) = (*c as usize) {\n\
    \  |                          ^           ^\n  |\n  = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n  |\n9 -         if let Some(_)\
    \ = (*c as usize) {\n9 +         if let Some(_) = *c as usize {\n  | \n\nerror[E0271]:\
    \ type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n    --> /tmp/tmp7gf4va6o.rs:8:29\n\
    \     |\n8    |     for c in string.chars().cloned() {\n     |               \
    \              ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmp7gf4va6o.rs:8:14\n  |\n8 |     for c in string.chars().cloned()\
    \ {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \  |\n  = note:   expected type `char`\n          found reference `&_`\n  = note:\
    \ required because of the requirements on the impl of `Iterator` for `Cloned<Chars<'_>>`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `Cloned<Chars<'_>>`\n\nerror[E0271]: type mismatch resolving `<Chars<'_>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmp7gf4va6o.rs:8:14\n  |\n8 |     for c\
    \ in string.chars().cloned() {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found reference\n  |\n  = note:   expected type `char`\n          found\
    \ reference `&_`\n  = note: required because of the requirements on the impl of\
    \ `Iterator` for `Cloned<Chars<'_>>`\n\nerror: aborting due to 3 previous errors;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0271`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter(|&c| !c.is_ascii_letter())\n        .count();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for type `char` in\
    \ the current scope\n --> /tmp/tmpbltmpo6u.rs:9:25\n  |\n9 |         .filter(|&c|\
    \ !c.is_ascii_letter())\n  |                         ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpbltmpo6u.rs:6:49\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |    -------------------------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|&x|\
    \ *x == x).count() + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpo4nxad6u.rs:7:32\n\
    \  |\n7 |     string.chars().filter(|&x| *x == x).count() + 1\n  |           \
    \                     ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpo4nxad6u.rs:7:5\n\
    \  |\n6 | fn count_distinct_characters(string: String) -> isize {\n  |       \
    \                                          ----- expected `isize` because of return\
    \ type\n7 |     string.chars().filter(|&x| *x == x).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|&x|\
    \ *x == x).count() + 1).try_into().unwrap()\n  |     +                       \
    \                        +++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter(|c| c.is_ascii())\n        .fold(0, |acc, c|\
    \ acc + c.len_utf8());\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2vgu7f8t.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counts\
    \ = String::new();\n    let mut char = string.chars().collect::<String>().join();\n\
    \n    for c in char.chars() {\n        if !counts.contains(&c) {\n           \
    \ counts.push(c.to_string());\n        }\n    }\n\n    counts.chars().count().cloned()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpj6hhls8r.rs:8:55\n  |\n8 |     let mut char = string.chars().collect::<String>().join();\n\
    \  |                                                       ^^^^ method not found\
    \ in `String`\n\nerror[E0599]: `usize` is not an iterator\n  --> /tmp/tmpj6hhls8r.rs:16:28\n\
    \   |\n16 |     counts.chars().count().cloned()\n   |                        \
    \    ^^^^^^ `usize` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `usize: Iterator`\n           which is required\
    \ by `&mut usize: Iterator`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpc5_934jd.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c > 'z').count() + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1jmn0ahz.rs:7:35\n  |\n7 |\
    \     string.chars().filter(|c| c > 'z').count() + 1\n  |                    \
    \               ^^^\n  |                                   |\n  |            \
    \                       expected `&char`, found `char`\n  |                  \
    \                 help: consider borrowing here: `&'z'`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp1jmn0ahz.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| c\
    \ > 'z').count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ c > 'z').count() + 1).try_into().unwrap()\n  |     +                       \
    \                       +++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppia696rg.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii_lower()).count() as isize\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_lower` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmpfb6kq_si.rs:7:33\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lower()).count() as isize\n  |                                 ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_count\
    \ = 0;\n    let mut prev_char = 0;\n\n    for &c in string.chars() {\n       \
    \ if c == prev_char {\n            char_count += 1;\n        } else {\n      \
    \      char_count = 1;\n            prev_char = c;\n        }\n    }\n\n    char_count\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfl8vh6ke.rs:10:9\n   |\n\
    10 |     for &c in string.chars() {\n   |         ^^    -------------- this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count:\
    \ usize = 0;\n    for (i, &c) in string.chars().enumerate() {\n        if i !=\
    \ 0 {\n            count += c;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0kzfoz6p.rs:8:13\n  |\n8 |\
    \     for (i, &c) in string.chars().enumerate() {\n  |             ^^     --------------------------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected `char`, found reference\n  |             help: you can probably\
    \ remove the explicit borrow: `c`\n  |\n  = note:   expected type `char`\n   \
    \       found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0kzfoz6p.rs:13:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n13 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_hash:\
    \ HashSet<char> = HashSet::new();\n    string.chars().for_each(|c| char_hash.insert(c));\n\
    \    char_hash.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmprsn852td.rs:7:24\n\
    \  |\n7 |     let mut char_hash: HashSet<char> = HashSet::new();\n  |        \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmprsn852td.rs:7:40\n\
    \  |\n7 |     let mut char_hash: HashSet<char> = HashSet::new();\n  |        \
    \                                ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ c as u32).filter(|c| c > 0xff).count() + 1\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpravx2t5x.rs:7:53\n  |\n7 |\
    \     string.chars().map(|c| c as u32).filter(|c| c > 0xff).count() + 1\n  | \
    \                                                    ^^^^\n  |               \
    \                                      |\n  |                                \
    \                     expected `&u32`, found integer\n  |                    \
    \                                 help: consider borrowing here: `&0xff`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpravx2t5x.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().map(|c| c as\
    \ u32).filter(|c| c > 0xff).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().map(|c|\
    \ c as u32).filter(|c| c > 0xff).count() + 1).try_into().unwrap()\n  |     + \
    \                                                                +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counter:\
    \ usize = 0;\n    for ch in string.chars() {\n        if *ch >= 'A' && *ch <=\
    \ 'Z' {\n            counter += 1;\n        }\n        if *ch >= 'a' && *ch <=\
    \ 'z' {\n            counter += 1;\n        }\n        if *ch >= '0' && *ch <=\
    \ '9' {\n            counter += 1;\n        }\n        if *ch >= '1' && *ch <=\
    \ '9' {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp767y9xw6.rs:9:12\n\
    \  |\n9 |         if *ch >= 'A' && *ch <= 'Z' {\n  |            ^^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n --> /tmp/tmp767y9xw6.rs:9:26\n  |\n9 |\
    \         if *ch >= 'A' && *ch <= 'Z' {\n  |                          ^^^\n\n\
    error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp767y9xw6.rs:12:12\n\
    \   |\n12 |         if *ch >= 'a' && *ch <= 'z' {\n   |            ^^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmp767y9xw6.rs:12:26\n   |\n\
    12 |         if *ch >= 'a' && *ch <= 'z' {\n   |                          ^^^\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp767y9xw6.rs:15:12\n\
    \   |\n15 |         if *ch >= '0' && *ch <= '9' {\n   |            ^^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmp767y9xw6.rs:15:26\n   |\n\
    15 |         if *ch >= '0' && *ch <= '9' {\n   |                          ^^^\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp767y9xw6.rs:18:12\n\
    \   |\n18 |         if *ch >= '1' && *ch <= '9' {\n   |            ^^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmp767y9xw6.rs:18:26\n   |\n\
    18 |         if *ch >= '1' && *ch <= '9' {\n   |                          ^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp767y9xw6.rs:22:5\n   |\n6  | fn\
    \ count_distinct_characters(string: String) -> isize {\n   |                 \
    \                                ----- expected `isize` because of return type\n\
    ...\n22 |     counter\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n22 |     counter.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 9 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // 1. Convert\
    \ the string to a hash of chars, using case-insensitive comparison\n    // 2.\
    \ Traverse the hash, and count the distinct characters\n    let mut char_map =\
    \ HashMap::new();\n    for c in string.chars() {\n        char_map.entry(c).or_insert(0);\n\
    \        char_map.entry(c.to_lowercase()).or_insert(0);\n        char_map.entry(c.to_uppercase()).or_insert(0);\n\
    \    }\n\n    char_map.iter().filter(|&(_, count)| count > 1).count()\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpl8fa8d3i.rs:9:24\n  |\n9 |     let mut char_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuagdscrq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != *c.to_ascii_lowercase()).count()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp8dmhwqgw.rs:7:37\n\
    \  |\n7 |     string.chars().filter(|c| *c != *c.to_ascii_lowercase()).count()\n\
    \  |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp8dmhwqgw.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| *c\
    \ != *c.to_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != *c.to_ascii_lowercase()).count().try_into().unwrap()\n  |            \
    \                                                         ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter(|c| c.is_alphabetic())\n        .count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwtz1aa04.rs:7:5\n   |\n6\
    \  |   fn count_distinct_characters(string: String) -> isize {\n   |         \
    \                                          ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|c|\
    \ c.is_alphabetic())\n10 | |         .count()\n   | |________________^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuagdscrq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter_map(|c|\n\
    \        match c {\n            c if c.is_alpha() => Some(c.to_ascii_lowercase()),\n\
    \            c if c.is_digit() => Some(c.to_ascii_lowercase()),\n            c\
    \ if c.is_ascii_alphanumeric() => Some(c.to_ascii_lowercase()),\n            _\
    \ => None,\n        }\n    ).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_alpha` found for type `char` in the current\
    \ scope\n --> /tmp/tmp80go2jot.rs:9:20\n  |\n9 |             c if c.is_alpha()\
    \ => Some(c.to_ascii_lowercase()),\n  |                    ^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_alphabetic`\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp80go2jot.rs:10:20\n\
    \    |\n10  |             c if c.is_digit() => Some(c.to_ascii_lowercase()),\n\
    \    |                    ^^^^^^^^- supplied 0 arguments\n    |              \
    \      |\n    |                    expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp80go2jot.rs:7:5\n\
    \   |\n6  |   fn count_distinct_characters(string: String) -> isize {\n   |  \
    \                                                 ----- expected `isize` because\
    \ of return type\n7  | /     string.chars().filter_map(|c|\n8  | |         match\
    \ c {\n9  | |             c if c.is_alpha() => Some(c.to_ascii_lowercase()),\n\
    10 | |             c if c.is_digit() => Some(c.to_ascii_lowercase()),\n...  |\n\
    13 | |         }\n14 | |     ).count()\n   | |_____________^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     ).count().try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut seen:\
    \ HashSet<_> = HashSet::new();\n    for c in string.chars() {\n        if !seen.contains(c)\
    \ {\n            seen.insert(c).unwrap();\n        } else {\n            seen.insert(c.to_ascii_lowercase()).unwrap();\n\
    \        }\n    }\n    seen.reduce(0)\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpywrt6a73.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpywrt6a73.rs:7:32\n  |\n7 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpup9dvqek.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj8t24pdh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_alphanumeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count().try_into().unwrap()\n  |                     \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_count\
    \ = HashMap::new();\n    for char in string.chars() {\n        char_count.entry(char).or_insert(0usize)\
    \ = char_count.entry(char).or_insert(0usize) + 1;\n    }\n    char_count.iter().map(|(char_key,\
    \ char_value)| *char_value).sum()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpv5nihclz.rs:7:26\n  |\n7 |     let mut char_count = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0070]:\
    \ invalid left-hand side of assignment\n --> /tmp/tmpv5nihclz.rs:9:50\n  |\n9\
    \ |         char_count.entry(char).or_insert(0usize) = char_count.entry(char).or_insert(0usize)\
    \ + 1;\n  |         ---------------------------------------- ^\n  |         |\n\
    \  |         cannot assign to this expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0070, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0070`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = HashMap::<Char, isize>::new();\n    for c in string.chars() {\n        count.entry(*c).or_insert(0)\
    \ += 1;\n    }\n    count.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp59k9y04k.rs:7:21\n  |\n7 |     let mut count = HashMap::<Char, isize>::new();\n\
    \  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0412]:\
    \ cannot find type `Char` in this scope\n --> /tmp/tmp59k9y04k.rs:7:31\n  |\n\
    7 |     let mut count = HashMap::<Char, isize>::new();\n  |                  \
    \             ^^^^\n  |\nhelp: a builtin type with a similar name exists\n  |\n\
    7 |     let mut count = HashMap::<char, isize>::new();\n  |                  \
    \             ~~~~\nhelp: you might be missing a type parameter\n  |\n6 | fn count_distinct_characters<Char>(string:\
    \ String) -> isize {\n  |                             ++++++\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n --> /tmp/tmp59k9y04k.rs:9:21\n  |\n9 |\
    \         count.entry(*c).or_insert(0) += 1;\n  |                     ^^\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n --> /tmp/tmp59k9y04k.rs:9:38\n  |\n9\
    \ |         count.entry(*c).or_insert(0) += 1;\n  |         ----------------------------\
    \ ^^\n  |         |\n  |         cannot assign to this expression\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0067, E0412,\
    \ E0433, E0614.\nFor more information about an error, try `rustc --explain E0067`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter(|c| !c.is_ascii_letter())\n        .filter(|c|\
    \ !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c|\
    \ !c.is_ascii_whitespace())\n        .count()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmp0_yez73a.rs:9:24\n  |\n9 |         .filter(|c|\
    \ !c.is_ascii_letter())\n  |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmp0_yez73a.rs:11:24\n   |\n11 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0_yez73a.rs:7:5\n\
    \   |\n6  |   fn count_distinct_characters(string: String) -> isize {\n   |  \
    \                                                 ----- expected `isize` because\
    \ of return type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|c|\
    \ !c.is_ascii_letter())\n10 | |         .filter(|c| !c.is_ascii_digit())\n11 |\
    \ |         .filter(|c| !c.is_ascii_symbol())\n12 | |         .filter(|c| !c.is_ascii_whitespace())\n\
    13 | |         .count()\n   | |________________^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         .count().try_into().unwrap()\n   |   \
    \              ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg6pdn3l0.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_lowercase()).count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter_map(|c|\
    \ match c {\n        c => Some((c, c)),\n        _ => None,\n    }).count();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdrtaj50k.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = 0;\n    for c in string.chars() {\n        match c.to_ascii_lowercase() {\n\
    \            None => continue,\n            Some(_c) => { result += 1; }\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfiq1kal9.rs:10:13\n   |\n\
    9  |         match c.to_ascii_lowercase() {\n   |               ----------------------\
    \ this expression has type `char`\n10 |             None => continue,\n   |  \
    \           ^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfiq1kal9.rs:11:13\n   |\n9  |         match c.to_ascii_lowercase()\
    \ {\n   |               ---------------------- this expression has type `char`\n\
    10 |             None => continue,\n11 |             Some(_c) => { result += 1;\
    \ }\n   |             ^^^^^^^^ expected `char`, found enum `Option`\n   |\n  \
    \ = note: expected type `char`\n              found enum `Option<_>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppia696rg.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count().unwrap()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpf5sgunhd.rs:7:20\n  |\n7 |     string.chars().distinct().count().unwrap()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0615]: attempted to take value of method `is_ascii_lowercase` on\
    \ type `&char`\n --> /tmp/tmpb5iutumx.rs:7:34\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase).count()\n  |                                  ^^^^^^^^^^^^^^^^^^\
    \ method, not a field\n  |\nhelp: use parentheses to call the method\n  |\n7 |\
    \     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |        \
    \                                            ++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpb5iutumx.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_ascii_lowercase).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_ascii_lowercase).count().try_into().unwrap()\n\
    \  |                                                             ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut unique_chars\
    \ = HashMap::new();\n\n    for ch in string.chars() {\n        let mut key = ch.to_lowercase();\n\
    \n        if !key.is_ascii_uppercase() {\n            // Ignore non-ascii chars.\n\
    \            continue;\n        }\n\n        // We only care about unique chars.\n\
    \        if !unique_chars.contains_key(&key) {\n            unique_chars.insert(key,\
    \ 1);\n        } else {\n            let count = unique_chars.get_mut(&key).unwrap()\
    \ + 1;\n            unique_chars.insert(key, count);\n        }\n    }\n\n   \
    \ unique_chars.into_iter().map(|(_, count)| count).sum()\n}\n\nfn main() {\n \
    \   let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpbo0_jffu.rs:7:28\n  |\n7 |     let mut unique_chars = HashMap::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0599]:\
    \ no method named `is_ascii_uppercase` found for struct `ToLowercase` in the current\
    \ scope\n  --> /tmp/tmpbo0_jffu.rs:12:17\n   |\n12 |         if !key.is_ascii_uppercase()\
    \ {\n   |                 ^^^^^^^^^^^^^^^^^^ method not found in `ToLowercase`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut occurrences\
    \ = HashMap::new();\n    for character in string.chars().collect::<String>() {\n\
    \        if let Some(count) = (occurrences.entry(character.to_ascii_lowercase()).or_insert(0)).as_mut()\
    \ {\n            *count += 1;\n        }\n    }\n\n    occurrences.values().iter().map(|c|\
    \ c.unwrap_or(0)).sum()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp_bfwf2te.rs:7:27\n  |\n7 |     let mut occurrences = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0277]:\
    \ `String` is not an iterator\n --> /tmp/tmp_bfwf2te.rs:8:22\n  |\n8 |     for\
    \ character in string.chars().collect::<String>() {\n  |                     \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` is not an iterator; try calling\
    \ `.chars()` or `.bytes()`\n  |\n  = help: the trait `Iterator` is not implemented\
    \ for `String`\n  = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for c in string.chars() {\n        if string.contains(&c) {\n    \
    \        count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n    --> /tmp/tmp7ypejiwg.rs:9:28\n\
    \     |\n9    |         if string.contains(&c) {\n     |                   --------\
    \ ^^ expected an `Fn<(char,)>` closure, found `char`\n     |                 \
    \  |\n     |                   required by a bound introduced by this call\n \
    \    |\n     = help: the trait `Fn<(char,)>` is not implemented for `char`\n \
    \    = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&char`\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `&char`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider dereferencing here\n     |\n9    |         if string.contains(*&c)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_1iuaiiv.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii()).count().try_into().unwrap()\n  |                            \
    \                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut num_chars\
    \ = 0;\n    let mut char_to_idx = HashMap::new();\n    for (idx, char) in string.chars().enumerate()\
    \ {\n        if !char_to_idx.contains_key(&char) {\n            num_chars += 1;\n\
    \            char_to_idx.insert(char, idx);\n        }\n    }\n    num_chars\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpt1pzdjdf.rs:8:27\n  |\n8 |     let mut char_to_idx = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() + string.chars().filter(|c| *c >= 'a' && *c\
    \ <= 'z').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6lt6kfrh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count() + string.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() + string.chars().filter(|c| *c >= 'a' && *c\
    \ <= 'z').count()).try_into().unwrap()\n  |     +                            \
    \                                                                            \
    \             +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg6pdn3l0.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_lowercase()).count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_alphabetic()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmy2_zvaf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_alphabetic()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_alphabetic()).count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuagdscrq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = 0;\n\n    for ch in string.chars() {\n        match ch {\n            Some('X')\
    \ => result += 1,\n            Some('y') => result += 2,\n            Some('Z')\
    \ => result += 4,\n            Some('z') => result += 8,\n            Some('b')\
    \ => result += 16,\n            Some('m') => result += 32,\n            Some('s')\
    \ => result += 64,\n            _ => {}\n        }\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwlf8zd1j.rs:11:13\n   |\n\
    10 |         match ch {\n   |               -- this expression has type `char`\n\
    11 |             Some('X') => result += 1,\n   |             ^^^^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwlf8zd1j.rs:12:13\n\
    \   |\n10 |         match ch {\n   |               -- this expression has type\
    \ `char`\n11 |             Some('X') => result += 1,\n12 |             Some('y')\
    \ => result += 2,\n   |             ^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwlf8zd1j.rs:13:13\n   |\n10 |\
    \         match ch {\n   |               -- this expression has type `char`\n\
    ...\n13 |             Some('Z') => result += 4,\n   |             ^^^^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwlf8zd1j.rs:14:13\n\
    \   |\n10 |         match ch {\n   |               -- this expression has type\
    \ `char`\n...\n14 |             Some('z') => result += 8,\n   |             ^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwlf8zd1j.rs:15:13\n   |\n10 |         match ch {\n   |             \
    \  -- this expression has type `char`\n...\n15 |             Some('b') => result\
    \ += 16,\n   |             ^^^^^^^^^ expected `char`, found enum `Option`\n  \
    \ |\n   = note: expected type `char`\n              found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwlf8zd1j.rs:16:13\n   |\n10 |  \
    \       match ch {\n   |               -- this expression has type `char`\n...\n\
    16 |             Some('m') => result += 32,\n   |             ^^^^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<_>`\n\nerror[E0308]: misma"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter_map(|c|\
    \ c as usize).distinct().count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplqhgpgg5.rs:7:35\n  |\n7 |\
    \     string.chars().filter_map(|c| c as usize).distinct().count()\n  |      \
    \                             ^^^^^^^^^^ expected enum `Option`, found `usize`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `usize`\nhelp:\
    \ try wrapping the expression in `Some`\n  |\n7 |     string.chars().filter_map(|c|\
    \ Some(c as usize)).distinct().count()\n  |                                  \
    \ +++++          +\n\nerror[E0599]: no method named `distinct` found for struct\
    \ `FilterMap` in the current scope\n --> /tmp/tmplqhgpgg5.rs:7:47\n  |\n7 |  \
    \   string.chars().filter_map(|c| c as usize).distinct().count()\n  |        \
    \                                       ^^^^^^^^ method not found in `FilterMap<Chars<'_>,\
    \ [closure@/tmp/tmplqhgpgg5.rs:7:31: 7:45]>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppia696rg.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count() as isize\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmplny9cqzy.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counter\
    \ = 0;\n    for c in string.chars() {\n        if c.to_ascii_lowercase().is_none()\
    \ {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_none` found for type `char` in the current\
    \ scope\n --> /tmp/tmpuobb33d4.rs:9:35\n  |\n9 |         if c.to_ascii_lowercase().is_none()\
    \ {\n  |                                   ^^^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter_map(|c|\
    \ c.to_ascii_lowercase().ok()).count() + string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for type `char` in the current\
    \ scope\n --> /tmp/tmpq1vztv6h.rs:7:58\n  |\n7 |     string.chars().filter_map(|c|\
    \ c.to_ascii_lowercase().ok()).count() + string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    \  |                                                          ^^ method not found\
    \ in `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpq1vztv6h.rs:7:5\n\
    \  |\n6 | fn count_distinct_characters(string: String) -> isize {\n  |       \
    \                                          ----- expected `isize` because of return\
    \ type\n7 |     string.chars().filter_map(|c| c.to_ascii_lowercase().ok()).count()\
    \ + string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter_map(|c|\
    \ c.to_ascii_lowercase().ok()).count() + string.chars().filter(|c| !c.is_ascii_lowercase()).count()).try_into().unwrap()\n\
    \  |     +                                                                   \
    \                                                            +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii()).distinct().count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Filter` in the\
    \ current scope\n --> /tmp/tmpglkxp3gy.rs:7:46\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii()).distinct().count()\n  |                                     \
    \         ^^^^^^^^ method not found in `Filter<Chars<'_>, [closure@/tmp/tmpglkxp3gy.rs:7:27:\
    \ 7:44]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for c in string.chars() {\n        if let Some(c) = (c.as_bytes()).to_lowercase()\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_bytes` found for type `char` in the current\
    \ scope\n --> /tmp/tmp28f3sn5e.rs:9:29\n  |\n9 |         if let Some(c) = (c.as_bytes()).to_lowercase()\
    \ {\n  |                             ^^^^^^^^ method not found in `char`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    if string.is_empty()\
    \ {\n        return 0;\n    }\n    let mut count = 0;\n    let mut prev: &str\
    \ = string[..];\n    for c in string.chars() {\n        if c == prev {\n     \
    \       count += 1;\n        }\n        prev = c;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyr06oyje.rs:11:26\n   |\n\
    11 |     let mut prev: &str = string[..];\n   |                   ----   ^^^^^^^^^^\n\
    \   |                   |      |\n   |                   |      expected `&str`,\
    \ found `str`\n   |                   |      help: consider borrowing here: `&string[..]`\n\
    \   |                   expected due to this\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyr06oyje.rs:13:17\n   |\n13 |         if c == prev {\n   |    \
    \             ^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyr06oyje.rs:16:16\n   |\n11 |     let mut prev: &str = string[..];\n\
    \   |                   ---- expected due to this type\n...\n16 |         prev\
    \ = c;\n   |                ^ expected `&str`, found `char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .iter()\n        .filter_map(|c| c.chars().count())\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp85ki8pm3.rs:8:10\n  |\n8 |         .iter()\n  |        \
    \  ^^^^ method not found in `String`\n  |\nhelp: because of the in-memory representation\
    \ of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n\
    \  |\n8 |         .chars()\n  |          ~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != '\\u{FFFF}').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpic05e9k7.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != '\\u{FFFF}').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != '\\u{FFFF}').count().try_into().unwrap()\n  |                        \
    \                                ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter(|&c| !c.is_whitespace())\n        .filter(|c|\
    \ !c.is_lowercase())\n        .filter(|c| !c.is_uppercase())\n        .count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktg6h7xl.rs:7:5\n   |\n6\
    \  |   fn count_distinct_characters(string: String) -> isize {\n   |         \
    \                                          ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|&c|\
    \ !c.is_whitespace())\n10 | |         .filter(|c| !c.is_lowercase())\n11 | | \
    \        .filter(|c| !c.is_uppercase())\n12 | |         .count()\n   | |________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars_set\
    \ = String::new();\n    for &char in string {\n        chars_set.insert(char.to_lowercase()).unwrap();\n\
    \    }\n    chars_set.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n --> /tmp/tmpb6f_tl1b.rs:8:18\n\
    \  |\n8 |     for &char in string {\n  |                  ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n  |\n  = help: the trait\
    \ `Iterator` is not implemented for `String`\n  = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `String`\n\nerror[E0061]: this\
    \ function takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmpb6f_tl1b.rs:9:19\n\
    \     |\n9    |         chars_set.insert(char.to_lowercase()).unwrap();\n    \
    \ |                   ^^^^^^ ------------------- supplied 1 argument\n     | \
    \                  |\n     |                   expected 2 arguments\n     |\n\
    note: associated function defined here\n\nerror[E0599]: no method named `unwrap`\
    \ found for unit type `()` in the current scope\n --> /tmp/tmpb6f_tl1b.rs:9:47\n\
    \  |\n9 |         chars_set.insert(char.to_lowercase()).unwrap();\n  |       \
    \                                        ^^^^^^ method not found in `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb6f_tl1b.rs:11:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n11 |     chars_set.len()\n   |\
    \     ^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    11 |     chars_set.len().try_into().unwrap()\n   |                    ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter_map(|c| {\n            match c.to_ascii_lowercase()\
    \ {\n                Some(l) => Some(1),\n                None => None,\n    \
    \        }\n        })\n        .filter(|x| x.is_some())\n        .count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgow6ujjm.rs:11:17\n   |\n\
    10 |             match c.to_ascii_lowercase() {\n   |                   ----------------------\
    \ this expression has type `char`\n11 |                 Some(l) => Some(1),\n\
    \   |                 ^^^^^^^ expected `char`, found enum `Option`\n   |\n   =\
    \ note: expected type `char`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgow6ujjm.rs:12:17\n   |\n10 |             match\
    \ c.to_ascii_lowercase() {\n   |                   ---------------------- this\
    \ expression has type `char`\n11 |                 Some(l) => Some(1),\n12 | \
    \                None => None,\n   |                 ^^^^ expected `char`, found\
    \ enum `Option`\n   |\n   = note: expected type `char`\n              found enum\
    \ `Option<_>`\n\nerror[E0599]: no method named `is_some` found for reference `&{integer}`\
    \ in the current scope\n  --> /tmp/tmpgow6ujjm.rs:15:23\n   |\n15 |         .filter(|x|\
    \ x.is_some())\n   |                       ^^^^^^^ method not found in `&{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgow6ujjm.rs:7:5\n   |\n6  |  \
    \ fn count_distinct_characters(string: String) -> isize {\n   |              \
    \                                     ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter_map(|c|\
    \ {\n10 | |             match c.to_ascii_lowercase() {\n...  |\n15 | |       \
    \  .filter(|x| x.is_some())\n16 | |         .count()\n   | |________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut characters\
    \ = HashMap::<u8, usize>::new();\n    for character in string.chars() {\n    \
    \    if characters.contains_key(&character.to_ascii_lowercase()) {\n         \
    \   characters.entry(character.to_ascii_lowercase()).or_insert(0) += 1;\n    \
    \    } else {\n            characters.entry(character.to_ascii_lowercase()).or_insert(1);\n\
    \        }\n    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp200dwb7o.rs:7:26\n  |\n7 |     let mut characters = HashMap::<u8, usize>::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n  --> /tmp/tmp200dwb7o.rs:10:75\n   |\n\
    10 |             characters.entry(character.to_ascii_lowercase()).or_insert(0)\
    \ += 1;\n   |             -------------------------------------------------------------\
    \ ^^\n   |             |\n   |             cannot assign to this expression\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0067, E0433.\nFor more information about an error, try `rustc --explain E0067`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_digit()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpfd42qka6.rs:7:34\n    |\n7   |     string.chars().filter(|c| !c.is_digit()).count()\n\
    \    |                                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                                  |\n    |                                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfd42qka6.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_digit()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_digit()).count().try_into().unwrap()\n\
    \  |                                                     ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|&x|\
    \ x >= 'a' && x <= 'z').count() + string.chars().filter(|&x| x >= 'A' && x <=\
    \ 'Z').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9vsm2xao.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|&x| x >= 'a' && x <= 'z').count() + string.chars().filter(|&x|\
    \ x >= 'A' && x <= 'Z').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|&x|\
    \ x >= 'a' && x <= 'z').count() + string.chars().filter(|&x| x >= 'A' && x <=\
    \ 'Z').count()).try_into().unwrap()\n  |     +                               \
    \                                                                            \
    \        +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut cnt\
    \ = 0;\n    let mut char_iter = string.char_indices();\n\n    while let Some(i)\
    \ = char_iter.next() {\n        cnt += char_iter.filter(|c| c.is_ascii_lowercase()).count()\
    \ - 1;\n    }\n\n    cnt\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_lowercase` found for reference\
    \ `&(usize, char)` in the current scope\n  --> /tmp/tmpy4q6cx_0.rs:11:39\n   |\n\
    11 |         cnt += char_iter.filter(|c| c.is_ascii_lowercase()).count() - 1;\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ method not found\
    \ in `&(usize, char)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy4q6cx_0.rs:14:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n14 |     cnt\n   |     ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |     cnt.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ c.to_ascii_lowercase().chars()).filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n --> /tmp/tmp_7o280um.rs:7:51\n  |\n7 |     string.chars().map(|c| c.to_ascii_lowercase().chars()).filter(|c|\
    \ c.is_ascii_lowercase()).count()\n  |                                       \
    \            ^^^^^ method not found in `char`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_7o280um.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().map(|c| c.to_ascii_lowercase().chars()).filter(|c|\
    \ c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().map(|c|\
    \ c.to_ascii_lowercase().chars()).filter(|c| c.is_ascii_lowercase()).count().try_into().unwrap()\n\
    \  |                                                                         \
    \                             ++++++++++++++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_alphabetic()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmy2_zvaf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_alphabetic()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_alphabetic()).count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpup9dvqek.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ c.to_ascii_lowercase().len_utf8()).fold(0, |m, _| m + 1)\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpbhg24m0v.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != c).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwup8r5y6.rs:7:37\n  |\n7 |\
    \     string.chars().filter(|c| *c != c).count()\n  |                        \
    \             ^ expected `char`, found `&char`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n7 |     string.chars().filter(|c| *c != *c).count()\n  |  \
    \                                   +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpwup8r5y6.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| *c != c).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     string.chars().filter(|c| *c != c).count().try_into().unwrap()\n\
    \  |                                               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_counts\
    \ = HashMap::new();\n    for &c in string.chars() {\n        let count = char_counts.entry(c).or_default()\
    \ + 1;\n        char_counts.entry(c).and_modify(|x| *x += count).or_insert(count);\n\
    \    }\n    char_counts.iter().filter(|(_, count)| count > 1).count()\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp2_mqi7ss.rs:7:27\n  |\n7 |     let mut char_counts = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2_mqi7ss.rs:8:9\n  |\n8 |     for &c in string.chars()\
    \ {\n  |         ^^    -------------- this expression has type `Option<char>`\n\
    \  |         |\n  |         expected `char`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `c`\n  |\n  = note:   expected\
    \ type `char`\n          found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuagdscrq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c == c).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmiuh_i0h.rs:7:37\n  |\n7 |\
    \     string.chars().filter(|c| *c == c).count()\n  |                        \
    \             ^ expected `char`, found `&char`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n7 |     string.chars().filter(|c| *c == *c).count()\n  |  \
    \                                   +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpmiuh_i0h.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| *c == c).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     string.chars().filter(|c| *c == c).count().try_into().unwrap()\n\
    \  |                                               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .flat_map(|c| c.to_lowercase().chars().distinct().count())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for struct `ToLowercase` in\
    \ the current scope\n --> /tmp/tmpwpn09r5b.rs:9:40\n  |\n9 |         .flat_map(|c|\
    \ c.to_lowercase().chars().distinct().count())\n  |                          \
    \              ^^^^^ method not found in `ToLowercase`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_histogram\
    \ = HashMap::new();\n\n    for c in string.chars() {\n        match char_histogram.entry(c)\
    \ {\n            Occupied(entry) => {\n                *entry.get_mut() += 1;\n\
    \            },\n            Vacant(entry) => {\n                entry.insert(1);\n\
    \            }\n        }\n    }\n    char_histogram.len()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp45zgrqab.rs:7:30\n  |\n7 |     let mut char_histogram = HashMap::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror[E0531]: cannot find tuple struct or tuple variant `Occupied` in this scope\n\
    \  --> /tmp/tmp45zgrqab.rs:11:13\n   |\n11 |             Occupied(entry) => {\n\
    \   |             ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ one of these items\n   |\n1  | use std::collections::btree_map::Entry::Occupied;\n\
    \   |\n1  | use std::collections::hash_map::Entry::Occupied;\n   |\n1  | use std::collections::hash_map::RawEntryMut::Occupied;\n\
    \   |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Vacant` in this\
    \ scope\n  --> /tmp/tmp45zgrqab.rs:14:13\n   |\n14 |             Vacant(entry)\
    \ => {\n   |             ^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::collections::btree_map::Entry::Vacant;\n\
    \   |\n1  | use std::collections::hash_map::Entry::Vacant;\n   |\n1  | use std::collections::hash_map::RawEntryMut::Vacant;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0531.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpxyo60dc8.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct_by_ref().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct_by_ref` found for struct `Chars`\
    \ in the current scope\n --> /tmp/tmpxc388xlr.rs:7:20\n  |\n7 |     string.chars().distinct_by_ref().count()\n\
    \  |                    ^^^^^^^^^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpup9dvqek.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_char_count\
    \ = HashMap::new();\n    string.chars().for_each(|c| {\n        if distinct_char_count.contains_key(&c)\
    \ {\n            distinct_char_count.insert(*c, (*distinct_char_count.get_mut(&c)\
    \ + 1));\n        } else {\n            distinct_char_count.insert(*c, 1);\n \
    \       }\n    });\n    distinct_char_count.len()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpkhhyq22_.rs:7:35\n  |\n7 |     let mut distinct_char_count = HashMap::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nwarning: unnecessary parentheses around method argument\n  --> /tmp/tmpkhhyq22_.rs:10:44\n\
    \   |\n10 |             distinct_char_count.insert(*c, (*distinct_char_count.get_mut(&c)\
    \ + 1));\n   |                                            ^                  \
    \                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n10 -             distinct_char_count.insert(*c,\
    \ (*distinct_char_count.get_mut(&c) + 1));\n10 +             distinct_char_count.insert(*c,\
    \ *distinct_char_count.get_mut(&c) + 1);\n   | \n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n  --> /tmp/tmpkhhyq22_.rs:10:40\n   |\n10 |             distinct_char_count.insert(*c,\
    \ (*distinct_char_count.get_mut(&c) + 1));\n   |                             \
    \           ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpkhhyq22_.rs:12:40\n\
    \   |\n12 |             distinct_char_count.insert(*c, 1);\n   |             \
    \                           ^^\n\nerror: aborting due to 3 previous errors; 1\
    \ warning emitted\n\nSome errors have detailed explanations: E0433, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp89rhzjfv.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_uppercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp6giqz5t.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_uppercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_uppercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // We could\
    \ use a HashSet and do `let mut set = HashSet::new(); set.insert(string.chars());\
    \ set.len()`\n    // but this requires iterating over the entire string twice\
    \ - once to count the number of characters, and\n    // another to iterate over\
    \ the entire string again to check each character.\n    let mut chars_counter:\
    \ usize = 0;\n    for c in string.chars() {\n        let _ = c.to_ascii_lowercase();\n\
    \        chars_counter += 1;\n    }\n    chars_counter\n}\n\nfn main() {\n   \
    \ let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvsamskaa.rs:15:5\n   |\n\
    6  | fn count_distinct_characters(string: String) -> isize {\n   |           \
    \                                      ----- expected `isize` because of return\
    \ type\n...\n15 |     chars_counter\n   |     ^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |     chars_counter.try_into().unwrap()\n\
    \   |                  ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut i\
    \ = 0;\n    for ch in string.chars() {\n        let count = if *ch >= 'A' && *ch\
    \ <= 'Z' { *ch - 'A' + 1 } else { *ch - 'a' + 1 };\n        if count != i {\n\
    \            i = count;\n        }\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpb82xqtc3.rs:9:24\n\
    \  |\n9 |         let count = if *ch >= 'A' && *ch <= 'Z' { *ch - 'A' + 1 } else\
    \ { *ch - 'a' + 1 };\n  |                        ^^^\n\nerror[E0614]: type `char`\
    \ cannot be dereferenced\n --> /tmp/tmpb82xqtc3.rs:9:38\n  |\n9 |         let\
    \ count = if *ch >= 'A' && *ch <= 'Z' { *ch - 'A' + 1 } else { *ch - 'a' + 1 };\n\
    \  |                                      ^^^\n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n --> /tmp/tmpb82xqtc3.rs:9:51\n  |\n9 |         let count =\
    \ if *ch >= 'A' && *ch <= 'Z' { *ch - 'A' + 1 } else { *ch - 'a' + 1 };\n  | \
    \                                                  ^^^\n\nerror[E0614]: type `char`\
    \ cannot be dereferenced\n --> /tmp/tmpb82xqtc3.rs:9:74\n  |\n9 |         let\
    \ count = if *ch >= 'A' && *ch <= 'Z' { *ch - 'A' + 1 } else { *ch - 'a' + 1 };\n\
    \  |                                                                         \
    \ ^^^\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_count:\
    \ isize = 0;\n    let mut char_set = char::CharSet::new();\n    for c in string.chars()\
    \ {\n        char_set.insert(c.to_ascii_lowercase());\n        char_count += char_set.len();\n\
    \    }\n    char_count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0223]: ambiguous associated type\n --> /tmp/tmprfi0__0j.rs:8:24\n\
    \  |\n8 |     let mut char_set = char::CharSet::new();\n  |                  \
    \      ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<char as Trait>::CharSet`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0223`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut cnt:\
    \ isize = 0;\n    let mut char_counts: Vec<_> = string\n        .chars()\n   \
    \     .filter(|c| !c.is_whitespace())\n        .cloned()\n        .collect();\n\
    \    while char_count > 0 {\n        cnt += 1;\n        char_count -= char_counts.iter().filter(|c|\
    \ c.is_ascii_lowercase()).count();\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `char_count` in this scope\n  --> /tmp/tmps9x2gu64.rs:13:11\n\
    \   |\n13 |     while char_count > 0 {\n   |           ^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `char_counts`\n\nerror[E0425]: cannot find\
    \ value `char_count` in this scope\n  --> /tmp/tmps9x2gu64.rs:15:9\n   |\n15 |\
    \         char_count -= char_counts.iter().filter(|c| c.is_ascii_lowercase()).count();\n\
    \   |         ^^^^^^^^^^ help: a local variable with a similar name exists: `char_counts`\n\
    \nerror[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmps9x2gu64.rs:10:17:\
    \ 10:39]> as Iterator>::Item == &_`\n    --> /tmp/tmps9x2gu64.rs:11:10\n     |\n\
    11   |         .cloned()\n     |          ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<Filter<Chars<'_>, [closure@/tmp/tmps9x2gu64.rs:10:17:\
    \ 10:39]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmps9x2gu64.rs:12:10\n\
    \   |\n12 |            .collect();\n   |             ^^^^^^^ method cannot be\
    \ called on `Cloned<Filter<Chars<'_>, [closure@/tmp/tmps9x2gu64.rs:10:17: 10:39]>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<Filter<Chars<'_>, [closure@/tmp/tmps9x2gu64.rs:10:17:\
    \ 10:39]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmps9x2gu64.rs:10:17: 10:39]>>: Iterator`\n           `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmps9x2gu64.rs:10:17: 10:39]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<Chars<'_>, [closure@/tmp/tmps9x2gu64.rs:10:17:\
    \ 10:39]>>: Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ {\n        c.to_ascii_lowercase()\n            .iter()\n            .filter_map(|l|\
    \ l.chars().count())\n            .max()\n            .unwrap_or(1)\n    }).sum()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `char` in the current\
    \ scope\n --> /tmp/tmpj08rt_s_.rs:9:14\n  |\n9 |             .iter()\n  |    \
    \          ^^^^ method not found in `char`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().count(|c|\
    \ !c.is_digit() && c != '.')\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp4rrrzffg.rs:7:27\n\
    \  |\n7 |     string.chars().count(|c| !c.is_digit() && c != '.')\n  |       \
    \                    ^ consider giving this closure parameter a type\n  |\n  =\
    \ note: type must be known at this point\n\nerror[E0061]: this function takes\
    \ 0 arguments but 1 argument was supplied\n   --> /tmp/tmp4rrrzffg.rs:7:20\n \
    \   |\n7   |     string.chars().count(|c| !c.is_digit() && c != '.')\n    |  \
    \                  ^^^^^ ----------------------------- supplied 1 argument\n \
    \   |                    |\n    |                    expected 0 arguments\n  \
    \  |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp4rrrzffg.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().count(|c| !c.is_digit()\
    \ && c != '.')\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|c|\
    \ !c.is_digit() && c != '.').try_into().unwrap()\n  |                        \
    \                                ++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0061, E0282, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuagdscrq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counter\
    \ = 0;\n    for c in string.chars() {\n        counter += c >= 'A' && c <= 'Z'\
    \ ? (c - 'A' + 1) : 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected type, found `1`\n --> /tmp/tmp8gzyzp58.rs:9:59\n  |\n9\
    \ |         counter += c >= 'A' && c <= 'Z' ? (c - 'A' + 1) : 1;\n  |        \
    \                                                 - ^ expected type\n  |     \
    \                                                    |\n  |                  \
    \                                       tried to parse a type due to this\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut unique_chars:\
    \ HashSet<Char> = HashSet::new();\n    for c in string.chars() {\n        unique_chars.insert(c);\n\
    \    }\n    unique_chars.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpxm7fkjmq.rs:7:27\n\
    \  |\n7 |     let mut unique_chars: HashSet<Char> = HashSet::new();\n  |     \
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0412]: cannot\
    \ find type `Char` in this scope\n --> /tmp/tmpxm7fkjmq.rs:7:35\n  |\n7 |    \
    \ let mut unique_chars: HashSet<Char> = HashSet::new();\n  |                 \
    \                  ^^^^\n  |\nhelp: a builtin type with a similar name exists\n\
    \  |\n7 |     let mut unique_chars: HashSet<char> = HashSet::new();\n  |     \
    \                              ~~~~\nhelp: you might be missing a type parameter\n\
    \  |\n6 | fn count_distinct_characters<Char>(string: String) -> isize {\n  | \
    \                            ++++++\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `HashSet`\n --> /tmp/tmpxm7fkjmq.rs:7:43\n  |\n7 |     let mut\
    \ unique_chars: HashSet<Char> = HashSet::new();\n  |                         \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z').count()\n}\n\nfn main() {\n  \
    \  let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg0ag515m.rs:7:36\n  |\n7 |\
    \     string.chars().filter(|c| c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z').count()\n\
    \  |                                    ^^^\n  |                             \
    \       |\n  |                                    expected `&char`, found `char`\n\
    \  |                                    help: consider borrowing here: `&'A'`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpg0ag515m.rs:7:48\n  |\n7 |    \
    \ string.chars().filter(|c| c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z').count()\n\
    \  |                                                ^^^\n  |                 \
    \                               |\n  |                                       \
    \         expected `&char`, found `char`\n  |                                \
    \                help: consider borrowing here: `&'Z'`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpg0ag515m.rs:7:60\n  |\n7 |     string.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z').count()\n  |                 \
    \                                           ^^^\n  |                         \
    \                                   |\n  |                                   \
    \                         expected `&char`, found `char`\n  |                \
    \                                            help: consider borrowing here: `&'a'`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpg0ag515m.rs:7:72\n  |\n7 |    \
    \ string.chars().filter(|c| c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z').count()\n\
    \  |                                                                        ^^^\n\
    \  |                                                                        |\n\
    \  |                                                                        expected\
    \ `&char`, found `char`\n  |                                                 \
    \                       help: consider borrowing here: `&'z'`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpg0ag515m.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return typ"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter_map(|c| match c.to_ascii_lowercase() {\n   \
    \         Some('z') => Some(1),\n            Some(c) => None,\n            None\
    \ => None,\n        })\n        .count()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgquhbqzk.rs:10:13\n   |\n\
    9  |         .filter_map(|c| match c.to_ascii_lowercase() {\n   |            \
    \                   ---------------------- this expression has type `char`\n10\
    \ |             Some('z') => Some(1),\n   |             ^^^^^^^^^ expected `char`,\
    \ found enum `Option`\n   |\n   = note: expected type `char`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgquhbqzk.rs:11:13\n\
    \   |\n9  |         .filter_map(|c| match c.to_ascii_lowercase() {\n   |     \
    \                          ---------------------- this expression has type `char`\n\
    10 |             Some('z') => Some(1),\n11 |             Some(c) => None,\n  \
    \ |             ^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note:\
    \ expected type `char`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgquhbqzk.rs:12:13\n   |\n9  |         .filter_map(|c|\
    \ match c.to_ascii_lowercase() {\n   |                               ----------------------\
    \ this expression has type `char`\n...\n12 |             None => None,\n   | \
    \            ^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgquhbqzk.rs:7:5\n   |\n6  |   fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                   -----\
    \ expected `isize` because of return type\n7  | /     string\n8  | |         .chars()\n\
    9  | |         .filter_map(|c| match c.to_ascii_lowercase() {\n10 | |        \
    \     Some('z') => Some(1),\n...  |\n13 | |         })\n14 | |         .count()\n\
    \   | |________________^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n14 |         .count().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut distinct_chars\
    \ = 1;\n    for c in string.chars() {\n        if *c != *c.to_lowercase() {\n\
    \            distinct_chars += 1;\n        }\n    }\n    return distinct_chars;\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp8t55x02t.rs:9:12\n\
    \  |\n9 |         if *c != *c.to_lowercase() {\n  |            ^^\n\nerror[E0614]:\
    \ type `ToLowercase` cannot be dereferenced\n --> /tmp/tmp8t55x02t.rs:9:18\n \
    \ |\n9 |         if *c != *c.to_lowercase() {\n  |                  ^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikgne62d.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    if string.chars().count()\
    \ > 128 {\n        128\n    } else {\n        let mut map = HashMap::new();\n\
    \        for ch in string.chars() {\n            if let Some(count) = map.entry(ch.to_lowercase()).or_insert(0)\
    \ {\n                count += 1;\n            }\n        }\n        map.len()\n\
    \    }\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpdytorhv4.rs:10:23\n   |\n10 |         let mut map = HashMap::new();\n\
    \   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_count\
    \ = 0usize;\n    for c in string.chars() {\n        let mut char_code = char_count;\n\
    \        let mut is_case_insensitive = false;\n        let mut is_lower_case =\
    \ true;\n        let mut is_upper_case = true;\n        if c.is_case_insensitive()\
    \ {\n            is_case_insensitive = true;\n            char_code &= !0x3u8;\n\
    \        }\n        if c.is_lowercase() {\n            is_lower_case = true;\n\
    \            char_code &= !0x3u8;\n        }\n        if c.is_uppercase() {\n\
    \            is_upper_case = true;\n            char_code &= !0x3u8;\n       \
    \ }\n        char_code |= c.code();\n        char_count |= (char_code % 255) as\
    \ u8;\n    }\n    char_count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_case_insensitive` found for type `char`\
    \ in the current scope\n  --> /tmp/tmpy4c42g5p.rs:13:14\n   |\n13 |         if\
    \ c.is_case_insensitive() {\n   |              ^^^^^^^^^^^^^^^^^^^ method not\
    \ found in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy4c42g5p.rs:15:26\n\
    \   |\n15 |             char_code &= !0x3u8;\n   |                          ^^^^^^\
    \ expected `usize`, found `u8`\n\nerror[E0277]: no implementation for `usize &=\
    \ u8`\n  --> /tmp/tmpy4c42g5p.rs:15:23\n   |\n15 |             char_code &= !0x3u8;\n\
    \   |                       ^^ no implementation for `usize &= u8`\n   |\n   =\
    \ help: the trait `BitAndAssign<u8>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `BitAndAssign<Rhs>`:\n           \
    \  <i128 as BitAndAssign<&i128>>\n             <i128 as BitAndAssign>\n      \
    \       <i16 as BitAndAssign<&i16>>\n             <i16 as BitAndAssign>\n    \
    \         <i32 as BitAndAssign<&i32>>\n             <i32 as BitAndAssign>\n  \
    \           <i64 as BitAndAssign<&i64>>\n             <i64 as BitAndAssign>\n\
    \           and 16 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy4c42g5p.rs:19:26\n\
    \   |\n19 |             char_code &= !0x3u8;\n   |                          ^^^^^^\
    \ expected `usize`, found `u8`\n\nerror[E0277]: no implementation for `usize &=\
    \ u8`\n  --> /tmp/tmpy4c42g5p.rs:19:23\n   |\n19 |             char_code &= !0x3u8;\n\
    \   |                       ^^ no implementation for `usize &= u8`\n   |\n   =\
    \ help: the trait `BitAndAssign<u8>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `BitAndAssign<Rhs>`:\n           \
    \  <i128 as BitAndAssign<&i128>>\n             <i128 as BitAndAssign>\n      \
    \       <i16 as BitAndAssign<&i16>>\n             <i16 as BitAndAssign>\n    \
    \         <i32 as BitAndAssign<&i32>>\n             <i32 as BitAndAssign>\n  \
    \           <i64 as BitAndAssign<&i64>>\n             <i64 as BitAndAssign>\n\
    \           and 16 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy4c42g5p.rs:23:26\n\
    \   |\n23 |             char_code &= !0x3u8;\n   |    "
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikgne62d.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    let mut lowercase_count = 0;\n    let mut uppercase_count = 0;\n \
    \   for (i, c) in string.chars().enumerate() {\n        if !c.is_ascii_lowercase()\
    \ {\n            count += 1;\n        }\n        if !c.is_ascii_uppercase() {\n\
    \            count += 1;\n        }\n        if !c.is_ascii() {\n            count\
    \ += 1;\n        }\n        if i == 0 {\n            if !c.is_ascii_lowercase()\
    \ {\n                lowercase_count += 1;\n            }\n            if !c.is_ascii_uppercase()\
    \ {\n                uppercase_count += 1;\n            }\n        }\n    }\n\
    \    count + (lowercase_count + uppercase_count)\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `5`', /tmp/tmpn5afdjj0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).filter(|c| !c.is_ascii_uppercase()).count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9z5zfd2j.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).filter(|c| !c.is_ascii_uppercase()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).filter(|c| !c.is_ascii_uppercase()).count().try_into().unwrap()\n\
    \  |                                                                         \
    \                          ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().map(|c|\
    \ c.to_ascii_lowercase()).distinct().count()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmp2rmze_9z.rs:7:52\n  |\n7 |     string.chars().map(|c|\
    \ c.to_ascii_lowercase()).distinct().count()\n  |                            \
    \                        ^^^^^^^^ method not found in `Map<Chars<'_>, [closure@/tmp/tmp2rmze_9z.rs:7:24:\
    \ 7:50]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut i\
    \ = 0;\n    let mut result = usize::MAX;\n    for character in string.chars()\
    \ {\n        i += 1;\n        let mut char = character;\n        char.downcase();\n\
    \        if char == result {\n            continue;\n        }\n        result\
    \ = char;\n    }\n    i\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `downcase` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpnzxd00sr.rs:12:14\n   |\n12 |         char.downcase();\n\
    \   |              ^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnzxd00sr.rs:13:20\n   |\n13 |         if char == result\
    \ {\n   |                    ^^^^^^ expected `char`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnzxd00sr.rs:16:18\n   |\n8  |     let mut result\
    \ = usize::MAX;\n   |                      ---------- expected due to this value\n\
    ...\n16 |         result = char;\n   |                  ^^^^ expected `usize`,\
    \ found `char`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_uppercase()).count() + string.chars().filter(|c| c.is_uppercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprbc9iucd.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_uppercase()).count() + string.chars().filter(|c|\
    \ c.is_uppercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ !c.is_uppercase()).count() + string.chars().filter(|c| c.is_uppercase()).count()).try_into().unwrap()\n\
    \  |     +                                                                   \
    \                                       +++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut string\
    \ = string.toLowerCase();\n    let mut chars = vec![];\n    for i in string.chars()\
    \ {\n        if chars.contains(&i) && chars.len() > 1 {\n            chars.remove(&i);\n\
    \        }\n        chars.push(&i);\n    }\n    chars.len()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `toLowerCase` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpme961om_.rs:7:29\n  |\n7 |     let mut string\
    \ = string.toLowerCase();\n  |                             ^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `to_lowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpme961om_.rs:11:26\n   |\n11 |             chars.remove(&i);\n\
    \   |                          ^^ expected `usize`, found reference\n   |\n  \
    \ = note:   expected type `usize`\n           found reference `&_`\nhelp: consider\
    \ removing the borrow\n   |\n11 -             chars.remove(&i);\n11 +        \
    \     chars.remove(i);\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme961om_.rs:13:20\n\
    \   |\n13 |         chars.push(&i);\n   |                    ^^ cyclic type of\
    \ infinite size\n   |\nhelp: consider removing the borrow\n   |\n13 -        \
    \ chars.push(&i);\n13 +         chars.push(i);\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpme961om_.rs:15:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n15 |     chars.len()\n   |   \
    \  ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n15\
    \ |     chars.len().try_into().unwrap()\n   |                ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counter:\
    \ usize = 0;\n    for c in string.chars() {\n        counter = if c.to_ascii_lowercase().contains(&c.to_ascii_uppercase())\
    \ {\n            counter + 1\n        } else {\n            counter\n        };\n\
    \    }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `contains` found for type `char` in the current\
    \ scope\n --> /tmp/tmp66u7bkfp.rs:9:45\n  |\n9 |         counter = if c.to_ascii_lowercase().contains(&c.to_ascii_uppercase())\
    \ {\n  |                                             ^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp66u7bkfp.rs:15:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n15 |     counter\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |     counter.try_into().unwrap()\n  \
    \ |            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuagdscrq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter_map(|c|\
    \ {\n        Some(*c)\n    }).count().unwrap_or(0)\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp9pw0v5cy.rs:8:14\n\
    \  |\n8 |         Some(*c)\n  |              ^^\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `usize` in the current scope\n --> /tmp/tmp9pw0v5cy.rs:9:16\n\
    \  |\n9 |     }).count().unwrap_or(0)\n  |                ^^^^^^^^^ method not\
    \ found in `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .filter(|c| c.is_alphabetic())\n        .count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwtz1aa04.rs:7:5\n   |\n6\
    \  |   fn count_distinct_characters(string: String) -> isize {\n   |         \
    \                                          ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|c|\
    \ c.is_alphabetic())\n10 | |         .count()\n   | |________________^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // Convert\
    \ the string to a character array\n    let chars: Vec<u8> = string.chars().collect();\n\
    \    chars.iter().map(|c| c.to_lowercase()).distinct().count()\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<u8>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp5s9lc471.rs:8:41\n     |\n8  \
    \  |     let chars: Vec<u8> = string.chars().collect();\n     |              \
    \                           ^^^^^^^ value of type `Vec<u8>` cannot be built from\
    \ `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<u8>`\n     = help: the trait `FromIterator<T>` is\
    \ implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]:\
    \ no method named `to_lowercase` found for reference `&u8` in the current scope\n\
    \ --> /tmp/tmp5s9lc471.rs:9:28\n  |\n9 |     chars.iter().map(|c| c.to_lowercase()).distinct().count()\n\
    \  |                            ^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_ascii_lowercase`\n\nerror[E0599]: no method named `distinct`\
    \ found for struct `Map` in the current scope\n --> /tmp/tmp5s9lc471.rs:9:44\n\
    \  |\n9 |     chars.iter().map(|c| c.to_lowercase()).distinct().count()\n  | \
    \                                           ^^^^^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ u8>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuagdscrq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().count(|x|\
    \ x.is_alphabetic(char::Lowercase) || x.is_alphabetic(char::Uppercase))\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpjo6lc4y9.rs:7:27\n\
    \  |\n7 |     string.chars().count(|x| x.is_alphabetic(char::Lowercase) || x.is_alphabetic(char::Uppercase))\n\
    \  |                           ^ consider giving this closure parameter a type\n\
    \  |\n  = note: type must be known at this point\n\nerror[E0599]: no associated\
    \ item named `Lowercase` found for type `char` in the current scope\n --> /tmp/tmpjo6lc4y9.rs:7:52\n\
    \  |\n7 |     string.chars().count(|x| x.is_alphabetic(char::Lowercase) || x.is_alphabetic(char::Uppercase))\n\
    \  |                                                    ^^^^^^^^^\n  |       \
    \                                             |\n  |                         \
    \                           associated item not found in `char`\n  |         \
    \                                           help: there is an associated function\
    \ with a similar name: `is_lowercase`\n\nerror[E0599]: no associated item named\
    \ `Uppercase` found for type `char` in the current scope\n --> /tmp/tmpjo6lc4y9.rs:7:88\n\
    \  |\n7 |     string.chars().count(|x| x.is_alphabetic(char::Lowercase) || x.is_alphabetic(char::Uppercase))\n\
    \  |                                                                         \
    \               ^^^^^^^^^\n  |                                               \
    \                                         |\n  |                             \
    \                                                           associated item not\
    \ found in `char`\n  |                                                       \
    \                                 help: there is an associated function with a\
    \ similar name: `is_uppercase`\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n   --> /tmp/tmpjo6lc4y9.rs:7:20\n    |\n7   | \
    \    string.chars().count(|x| x.is_alphabetic(char::Lowercase) || x.is_alphabetic(char::Uppercase))\n\
    \    |                    ^^^^^ ------------------------------------------------------------------------\
    \ supplied 1 argument\n    |                    |\n    |                    expected\
    \ 0 arguments\n    |\nnote: associated function defined h"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .map(|c| {\n            use std::ascii_lowercase;\n\
    \            use std::ascii_uppercase;\n\n            c as usize + ascii_lowercase.len()\
    \ as usize + ascii_uppercase.len() as usize\n        })\n        .filter(|u| u\
    \ != 0)\n        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::ascii_lowercase`\n  --> /tmp/tmpdzktxh_t.rs:10:17\n\
    \   |\n10 |             use std::ascii_lowercase;\n   |                 ^^^^^^^^^^^^^^^^^^^^\
    \ no `ascii_lowercase` in the root\n\nerror[E0432]: unresolved import `std::ascii_uppercase`\n\
    \  --> /tmp/tmpdzktxh_t.rs:11:17\n   |\n11 |             use std::ascii_uppercase;\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^ no `ascii_uppercase` in the root\n\n\
    error[E0277]: can't compare `&usize` with `{integer}`\n  --> /tmp/tmpdzktxh_t.rs:15:23\n\
    \   |\n15 |         .filter(|u| u != 0)\n   |                       ^^ no implementation\
    \ for `&usize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&usize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdzktxh_t.rs:7:5\n   |\n6  |   fn count_distinct_characters(string: String)\
    \ -> isize {\n   |                                                   ----- expected\
    \ `isize` because of return type\n7  | /     string\n8  | |         .chars()\n\
    9  | |         .map(|c| {\n10 | |             use std::ascii_lowercase;\n... \
    \ |\n15 | |         .filter(|u| u != 0)\n16 | |         .count()\n   | |________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0432.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut occurrences\
    \ = HashSet::new();\n    for c in string.chars() {\n        if occurrences.contains_key(&c)\
    \ {\n            occurrences.remove(&c);\n        } else {\n            occurrences.insert(c);\n\
    \        }\n    }\n    occurrences.len()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpz0xjtjte.rs:7:27\n  |\n7 |     let mut occurrences = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char\
    \ = string.chars();\n    let mut count = 0;\n    while char.next() != Some(None)\
    \ {\n        if char.next().is_none() {\n            break;\n        }\n     \
    \   if char.next().unwrap().is_lowercase() {\n            count += 1;\n      \
    \  }\n        if char.next().unwrap().is_uppercase() {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqbri68oj.rs:9:31\n  |\n9 |\
    \     while char.next() != Some(None) {\n  |                               ^^^^\
    \ expected `char`, found enum `Option`\n  |\n  = note: expected type `char`\n\
    \             found enum `Option<_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut chars\
    \ = Vec::new();\n    string.encode_utf8(&mut |b| chars.push(b));\n    let mut\
    \ count = chars.len();\n    let mut prev_char = chars.first().unwrap();\n    for\
    \ &x in chars.iter() {\n        if x == prev_char {\n            count += 1;\n\
    \        } else {\n            count = 1;\n        }\n        prev_char = x\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `encode_utf8` found for struct `String` in\
    \ the current scope\n --> /tmp/tmp6gaovslr.rs:8:12\n  |\n8 |     string.encode_utf8(&mut\
    \ |b| chars.push(b));\n  |            ^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `encode_utf16`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6gaovslr.rs:17:21\n   |\n17 |         prev_char = x\n   |     \
    \                ^\n   |                     |\n   |                     cyclic\
    \ type of infinite size\n   |                     help: consider borrowing here:\
    \ `&x`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6gaovslr.rs:19:5\n   |\n\
    6  | fn count_distinct_characters(string: String) -> isize {\n   |           \
    \                                      ----- expected `isize` because of return\
    \ type\n...\n19 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count().saturating_add(1)\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp46lsyapy.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count().saturating_add(1)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().saturating_add(1).try_into().unwrap()\n  |     \
    \                                                                       ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != ' ').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgd9ibt35.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != ' ').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != ' ').count().try_into().unwrap()\n  |                                \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut result\
    \ = 0;\n    for c in string.chars() {\n        let char_c = c.to_lowercase();\n\
    \        if !char_c.is_ascii() {\n            return result;\n        }\n    \
    \    result += char_c.len_utf8();\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii` found for struct `ToLowercase`\
    \ in the current scope\n  --> /tmp/tmplocfbl95.rs:10:20\n   |\n10 |         if\
    \ !char_c.is_ascii() {\n   |                    ^^^^^^^^ method not found in `ToLowercase`\n\
    \nerror[E0599]: no method named `len_utf8` found for struct `ToLowercase` in the\
    \ current scope\n  --> /tmp/tmplocfbl95.rs:13:26\n   |\n13 |         result +=\
    \ char_c.len_utf8();\n   |                          ^^^^^^^^ method not found\
    \ in `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut length\
    \ = 0;\n    for c in string.chars() {\n        let mut distinct_chars = 1;\n \
    \       while distinct_chars <= length {\n            let char = string.chars().nth(distinct_chars).unwrap();\n\
    \            if let Some(c) = char.casefold() {\n                distinct_chars\
    \ += c.len_utf8();\n            } else {\n                break;\n           \
    \ }\n        }\n        length = distinct_chars;\n    }\n    length\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `casefold` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd3gxk9tv.rs:12:35\n   |\n12 |             if let Some(c)\
    \ = char.casefold() {\n   |                                   ^^^^^^^^ method\
    \ not found in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd3gxk9tv.rs:20:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n20 |     length\n   |     ^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     length.try_into().unwrap()\n   |         \
    \  ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    count_distinct_characters_1(string.chars())\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_distinct_characters_1` in this\
    \ scope\n --> /tmp/tmpbwn24uun.rs:7:5\n  |\n7 |     count_distinct_characters_1(string.chars())\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut count\
    \ = 0;\n    for c in string.chars() {\n        let mut cased_c = c.to_lowercase();\n\
    \        count += if cased_c.is_ascii() {\n            match c.as_bytes().iter().filter(|c|\
    \ *c >= b'A' && c <= b'Z').count() {\n                true => c.to_ascii_lowercase().chars().filter(|c|\
    \ *c >= b'a' && c <= b'z').count(),\n                false => 0,\n           \
    \ }\n        } else {\n            match c.as_bytes().iter().filter(|c| *c >=\
    \ b'a' && c <= b'z').count() {\n                true => c.to_ascii_uppercase().chars().filter(|c|\
    \ *c >= b'A' && c <= b'Z').count(),\n                false => 0,\n           \
    \ }\n        };\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii` found for struct `ToLowercase`\
    \ in the current scope\n  --> /tmp/tmpsfw0yn65.rs:10:29\n   |\n10 |         count\
    \ += if cased_c.is_ascii() {\n   |                             ^^^^^^^^ method\
    \ not found in `ToLowercase`\n\nerror[E0599]: no method named `as_bytes` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpsfw0yn65.rs:11:21\n   |\n\
    11 |             match c.as_bytes().iter().filter(|c| *c >= b'A' && c <= b'Z').count()\
    \ {\n   |                     ^^^^^^^^ method not found in `char`\n\nerror[E0599]:\
    \ no method named `chars` found for type `char` in the current scope\n  --> /tmp/tmpsfw0yn65.rs:12:48\n\
    \   |\n12 |                 true => c.to_ascii_lowercase().chars().filter(|c|\
    \ *c >= b'a' && c <= b'z').count(),\n   |                                    \
    \            ^^^^^ method not found in `char`\n\nerror[E0599]: no method named\
    \ `as_bytes` found for type `char` in the current scope\n  --> /tmp/tmpsfw0yn65.rs:16:21\n\
    \   |\n16 |             match c.as_bytes().iter().filter(|c| *c >= b'a' && c <=\
    \ b'z').count() {\n   |                     ^^^^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `chars` found for type `char` in the current scope\n\
    \  --> /tmp/tmpsfw0yn65.rs:17:48\n   |\n17 |                 true => c.to_ascii_uppercase().chars().filter(|c|\
    \ *c >= b'A' && c <= b'Z').count(),\n   |                                    \
    \            ^^^^^ method not found in `char`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    // To deal\
    \ with empty string, use 0\n    let mut count = 0;\n    for ch in string.chars()\
    \ {\n        if *ch >= 'a' && *ch <= 'z' && *ch != 'A' && *ch != 'Z' {\n     \
    \       count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp4txdoher.rs:10:12\n\
    \   |\n10 |         if *ch >= 'a' && *ch <= 'z' && *ch != 'A' && *ch != 'Z' {\n\
    \   |            ^^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  -->\
    \ /tmp/tmp4txdoher.rs:10:26\n   |\n10 |         if *ch >= 'a' && *ch <= 'z' &&\
    \ *ch != 'A' && *ch != 'Z' {\n   |                          ^^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmp4txdoher.rs:10:40\n   |\n\
    10 |         if *ch >= 'a' && *ch <= 'z' && *ch != 'A' && *ch != 'Z' {\n   | \
    \                                       ^^^\n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n  --> /tmp/tmp4txdoher.rs:10:54\n   |\n10 |         if *ch\
    \ >= 'a' && *ch <= 'z' && *ch != 'A' && *ch != 'Z' {\n   |                   \
    \                                   ^^^\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpn9hm12py.rs:7:20\n  |\n7 |     string.chars().distinct().count()\
    \ + 1\n  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut map\
    \ = HashMap::new();\n\n    for c in string.chars() {\n        match map.entry(c)\
    \ {\n            Occupied::Vacant(v) => {\n                v.insert(0);\n    \
    \        }\n            Occupied::Occupied(mut occupying_count) => {\n       \
    \         occupying_count.0 += 1;\n            }\n        }\n    }\n\n    map.len()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Occupied`\n  -->\
    \ /tmp/tmpjlfdbb03.rs:11:13\n   |\n11 |             Occupied::Vacant(v) => {\n\
    \   |             ^^^^^^^^ use of undeclared type `Occupied`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Occupied`\n  --> /tmp/tmpjlfdbb03.rs:14:13\n\
    \   |\n14 |             Occupied::Occupied(mut occupying_count) => {\n   |   \
    \          ^^^^^^^^ use of undeclared type `Occupied`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpjlfdbb03.rs:7:19\n\
    \  |\n7 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not\
    \ found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use\
    \ std::collections::HashMap;\n  |\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_map\
    \ = HashMap::new();\n\n    for c in string.chars() {\n        if !char_map.contains_key(&c)\
    \ {\n            char_map.insert(c, 1);\n        } else {\n            char_map.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n\n    char_map.len()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp2g7i2nyp.rs:7:24\n  |\n7 |     let mut char_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n  --> /tmp/tmp2g7i2nyp.rs:13:44\n   |\n\
    13 |             char_map.entry(c).or_insert(0) += 1;\n   |             ------------------------------\
    \ ^^\n   |             |\n   |             cannot assign to this expression\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0067, E0433.\nFor more information about an error, try `rustc --explain E0067`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|&c|\
    \ c < 'A' || c > 'Z').count() + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm5j7riz7.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|&c| c < 'A' || c > 'Z').count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|&c|\
    \ c < 'A' || c > 'Z').count() + 1).try_into().unwrap()\n  |     +            \
    \                                              +++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut current_char:\
    \ Char;\n    let mut counter: usize = 0;\n\n    for c in string.chars() {\n  \
    \      if c.is_uppercase() {\n            current_char = c;\n        } else if\
    \ c.is_lowercase() {\n            current_char = Char::lowercase(c);\n       \
    \ } else {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Char`\n  --> /tmp/tmpcxytnody.rs:14:28\n\
    \   |\n14 |             current_char = Char::lowercase(c);\n   |             \
    \               ^^^^ use of undeclared type `Char`\n\nerror[E0412]: cannot find\
    \ type `Char` in this scope\n --> /tmp/tmpcxytnody.rs:7:27\n  |\n7 |     let mut\
    \ current_char: Char;\n  |                           ^^^^ help: a builtin type\
    \ with a similar name exists (notice the capitalization): `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcxytnody.rs:19:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n19 |     counter\n   |     ^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     counter.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    count_distinct_characters(&string.as_str())\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpch7089b6.rs:7:31\n  |\n7 |\
    \     count_distinct_characters(&string.as_str())\n  |                       \
    \        ^^^^^^^^^^^^^^^^ expected struct `String`, found `&&str`\n  |\nhelp:\
    \ try using a conversion method\n  |\n7 |     count_distinct_characters((&string.as_str()).to_string())\n\
    \  |                               +                +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != '\\0').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzn4rv0rg.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != '\\0').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != '\\0').count().try_into().unwrap()\n  |                              \
    \                    ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c < ' ').count() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp5wz2plh3.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|&c|\
    \ !c.is_ascii_uppercase()).count() + string.chars().filter(|&c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz42y7dut.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|&c| !c.is_ascii_uppercase()).count() + string.chars().filter(|&c|\
    \ !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|&c|\
    \ !c.is_ascii_uppercase()).count() + string.chars().filter(|&c| !c.is_ascii_lowercase()).count()).try_into().unwrap()\n\
    \  |     +                                                                   \
    \                                                      +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_counts\
    \ = HashMap::new();\n    for c in string.chars() {\n        let char_count = char_counts.entry(c).or_insert(0);\n\
    \        *char_count += 1;\n    }\n    char_counts.len()\n}\n\nfn main() {\n \
    \   let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpk_d0w8q9.rs:7:27\n  |\n7 |     let mut char_counts = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != 0).distinct().count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptmsrlixk.rs:7:37\n  |\n7 |\
    \     string.chars().filter(|c| *c != 0).distinct().count()\n  |             \
    \                        ^ expected `char`, found `u8`\n\nerror[E0599]: no method\
    \ named `distinct` found for struct `Filter` in the current scope\n --> /tmp/tmptmsrlixk.rs:7:40\n\
    \  |\n7 |     string.chars().filter(|c| *c != 0).distinct().count()\n  |     \
    \                                   ^^^^^^^^ method not found in `Filter<Chars<'_>,\
    \ [closure@/tmp/tmptmsrlixk.rs:7:27: 7:38]>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut counter\
    \ = 0;\n\n    for c in string.chars() {\n        counter += string.chars().filter(|c|\
    \ !c.is_alphabetic()).count() as usize;\n    }\n\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf12r7ut5.rs:13:5\n   |\n\
    6  | fn count_distinct_characters(string: String) -> isize {\n   |           \
    \                                      ----- expected `isize` because of return\
    \ type\n...\n13 |     counter\n   |     ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     counter.try_into().unwrap()\n   |        \
    \    ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c != CHAR_UNASSIGNED).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `CHAR_UNASSIGNED` in this scope\n --> /tmp/tmpjx_gf_ny.rs:7:37\n\
    \  |\n7 |     string.chars().filter(|c| *c != CHAR_UNASSIGNED).count()\n  |  \
    \                                   ^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpjx_gf_ny.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| *c\
    \ != CHAR_UNASSIGNED).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != CHAR_UNASSIGNED).count().try_into().unwrap()\n  |                    \
    \                                         ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().fold(0,\
    \ |acc, c| acc + (c as u8)).unwrap_or(0)\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for type `u8` in the current\
    \ scope\n --> /tmp/tmpku7dk9ve.rs:7:54\n  |\n7 |     string.chars().fold(0, |acc,\
    \ c| acc + (c as u8)).unwrap_or(0)\n  |                                      \
    \                ^^^^^^^^^ method not found in `u8`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct_chars().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct_chars` found for struct `Chars`\
    \ in the current scope\n --> /tmp/tmplmt8feg9.rs:7:20\n  |\n7 |     string.chars().distinct_chars().count()\n\
    \  |                    ^^^^^^^^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ *c <= '_').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3qu6u2n.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c <= '_').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c <= '_').count().try_into().unwrap()\n  |                                \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut set\
    \ = String::new();\n    for c in string.chars() {\n        set.insert(c.to_string());\n\
    \    }\n    set.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpl7sz_3ko.rs:9:13\n     |\n9    |         set.insert(c.to_string());\n\
    \     |             ^^^^^^ ------------- supplied 1 argument\n     |         \
    \    |\n     |             expected 2 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl7sz_3ko.rs:11:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n11 |     set.len()\n   |     ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |     set.len().try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    let mut char_map\
    \ = HashMap::new();\n    char_map.insert(string.chars().next().unwrap(), 1);\n\
    \n    for c in string.chars() {\n        if let Some(count) = char_map.get(c)\
    \ {\n            *count += 1;\n        }\n        char_map.insert(c, 1);\n   \
    \ }\n    char_map.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpmc8zdic_.rs:7:24\n  |\n7 |     let mut char_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwx4d8gns.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_lowercase()).count().try_into().unwrap()\n  |                         \
    \                               ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string\n \
    \       .chars()\n        .map(|c| c.to_ascii_lowercase().len_utf8())\n      \
    \  .sum()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<usize>` is not satisfied\n  \
    \  --> /tmp/tmp51czbqa1.rs:10:10\n     |\n10   |         .sum()\n     |      \
    \    ^^^ the trait `Sum<usize>` is not implemented for `isize`\n     |\n     =\
    \ help: the following other types implement trait `Sum<A>`:\n               <f32\
    \ as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976721
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"\
    xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n\
    /// 4\nfn count_distinct_characters(string: String) -> isize {\n    string.chars().distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp6zc52px4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976720
