language: rs
name: HumanEval_102_choose_num
results:
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut low = x;\n        let mut high = y;\n        let mut\
    \ ans: isize = 0;\n        \n        while low != high {\n            let mid\
    \ = (low + high) / 2;\n            if mid % 2 == 0 {\n                low = mid\
    \ + 1;\n            } else {\n                ans = mid;\n                low\
    \ = mid - 1;\n                high = mid - 1;\n                break;\n      \
    \      }\n        }\n        ans\n    }\n}\n\nfn main() {\n    let candidate =\
    \ choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `14`', /tmp/tmpsye7evbw.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    match (x % y, x % 2) {\n        (0x, _) =>\
    \ (\n            x + (if x < y { x - y } else { y - x })\n        ) / 2,\n   \
    \     (1x, _) => x,\n        _ => (-1) - x,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0768]: no valid digits found for number\n  --> /tmp/tmpo31n78li.rs:11:10\n\
    \   |\n11 |         (0x, _) => (\n   |          ^^\n\nerror: invalid suffix `x`\
    \ for number literal\n  --> /tmp/tmpo31n78li.rs:14:10\n   |\n14 |         (1x,\
    \ _) => x,\n   |          ^^ invalid suffix `x`\n   |\n   = help: the suffix must\
    \ be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0768`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= 0 || y <= 0 || x >= y {\n        return\
    \ -1;\n    }\n    \n    if x <= y {\n        x,y = y,x;\n    }\n    \n    for\
    \ i in 0..x {\n        if i%2 == 0 {\n            return i;\n        }\n    }\n\
    \    \n    for i in x..y {\n        if i%2 == 0 {\n            return i;\n   \
    \     }\n    }\n    \n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `:`, found `=`\n  --> /tmp/tmp_t_lqpmj.rs:15:13\n   |\n\
    15 |         x,y = y,x;\n   |            -^\n   |            |\n   |         \
    \   help: replace equals symbol with a colon: `:`\n\nerror: expected one of `,`\
    \ or `}`, found `;`\n  --> /tmp/tmp_t_lqpmj.rs:15:18\n   |\n14 |     if x <= y\
    \ {\n   |             - while parsing this struct\n15 |         x,y = y,x;\n \
    \  |                  ^ expected one of `,` or `}`\n\nerror: struct literals are\
    \ not allowed here\n  --> /tmp/tmp_t_lqpmj.rs:14:13\n   |\n14 |       if x <=\
    \ y {\n   |  _____________^\n15 | |         x,y = y,x;\n16 | |     }\n   | |_____^\n\
    \   |\nhelp: surround the struct literal with parentheses\n   |\n14 ~     if x\
    \ <= (y {\n15 |         x,y = y,x;\n16 ~     })\n   |\n\nerror: expected `{`,\
    \ found keyword `for`\n  --> /tmp/tmp_t_lqpmj.rs:18:5\n   |\n14 |     if x <=\
    \ y {\n   |     -- this `if` expression has a condition, but no block\n...\n18\
    \ |     for i in 0..x {\n   |     ^^^ expected `{`\n   |\nhelp: try placing this\
    \ code inside a block\n   |\n18 ~     { for i in 0..x {\n19 |         if i%2 ==\
    \ 0 {\n20 |             return i;\n21 |         }\n22 ~     } }\n   |\n\nerror:\
    \ aborting due to 4 previous errors\n\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: implement this function\n    if x\
    \ > y {\n        (x, y) = (y, x)\n    }\n    \n    for i in 0..y {\n        if\
    \ x%i == 0 {\n            \n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp8okpfyxn.rs:12:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n12 |         (x, y)\
    \ = (y, x)\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n  --> /tmp/tmp8okpfyxn.rs:12:13\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                \
    \         - help: consider making this binding mutable: `mut y`\n...\n12 |   \
    \      (x, y) = (y, x)\n   |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        let mut a = x;\n      \
    \  let mut b = y;\n        let mut c = 0;\n        while a < b {\n           \
    \ let c = a / 2;\n            if c % 2 != 0 {\n                break;\n      \
    \      }\n            a = c;\n            b = b << 1;\n        }\n        c +=\
    \ 1;\n        if c == x {\n            c\n        } else {\n            c\n  \
    \      }\n    } else {\n        let mut a = y;\n        let mut b = x;\n     \
    \   let mut c = 0;\n        while a < b {\n            let c = a / 2;\n      \
    \      if c % 2 != 0 {\n                break;\n            }\n            a =\
    \ c;\n            b = b << 1;\n        }\n        c += 1;\n        if c == y {\n\
    \            c\n        } else {\n            c\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpfj0fksu8.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let x_even = x % 2 == 0;\n    let y_even =\
    \ y % 2 == 0;\n\n    let x_odd = !x_even;\n    let y_odd = !y_even;\n\n    if\
    \ x_even {\n        return if y_even {\n            x\n        } else {\n    \
    \        y\n        }\n    } else {\n        return if y_even {\n            y\n\
    \        } else {\n            x\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmp43lw0nlr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    while x <= y {\n        if x as isize / 2 &\
    \ 1 == 0 {\n            return x;\n        } else {\n            x -= 1;\n   \
    \     }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpe3whfcx1.rs:14:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n14 |             x\
    \ -= 1;\n   |             ^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let num = if x > y { x } else { y };\n    if\
    \ num < 2 * x {\n        -1\n    } else if num < 2 * y {\n        num\n    } else\
    \ {\n        choose_num(x + 1, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp58smdbyv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y <= x {\n        return -1;\n    }\n\n\
    \    let mut x: isize = 1;\n    while x * 2 <= y {\n        x += 1;\n    }\n\n\
    \    while x != 1 {\n        if y % x == 0 {\n            return x;\n        }\n\
    \n        x += 1;\n    }\n\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmp7d508dbk.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    assert!(x >= 0 && y >= 0);\n\n    let mut max:\
    \ isize = 0;\n    let mut current: isize = 0;\n\n    if y > x {\n        for x_pos\
    \ in (0..x).rev() {\n            max = x_pos as isize;\n            current =\
    \ x_pos + 1;\n            assert!(current > max);\n            if current % 2\
    \ == 0 {\n                max = current;\n            }\n        }\n    } else\
    \ {\n        for y_pos in (0..y).rev() {\n            max = y_pos as isize;\n\
    \            current = y_pos + 1;\n            assert!(current > max);\n     \
    \       if current % 2 == 0 {\n                max = current;\n            }\n\
    \        }\n    }\n\n    max - 1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpnrqetded.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        return -1\n    }\n   \
    \ let mut x: usize = x;\n    let mut y: usize = y;\n    while x > 0 {\n      \
    \  let r = x / 2;\n        if x % 2 == 0 {\n            x = r\n        } else\
    \ {\n            y = r;\n        }\n    }\n    return y\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf9bqkink.rs:13:24\n   |\n\
    13 |     let mut x: usize = x;\n   |                -----   ^ expected `usize`,\
    \ found `isize`\n   |                |\n   |                expected due to this\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     let mut x: usize = x.try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf9bqkink.rs:14:24\n   |\n14 |     let mut y: usize = y;\n\
    \   |                -----   ^ expected `usize`, found `isize`\n   |         \
    \       |\n   |                expected due to this\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    14 |     let mut y: usize = y.try_into().unwrap();\n   |                     \
    \    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf9bqkink.rs:23:12\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                       ----- expected `isize` because of return type\n...\n23\
    \ |     return y\n   |            ^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n23 |     return y.try_into().unwrap()\n   |             ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let x_even: isize = x.checked_mul(x).unwrap();\n\
    \    let y_even: isize = y.checked_mul(y).unwrap();\n    if x_even.is_zero() &&\
    \ y_even.is_zero() {\n        return -1;\n    }\n    let z: isize = x_even.max_val().unwrap()\
    \ - y_even.max_val().unwrap() + 1;\n    z.checked_mul(z).unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpxj1fysrt.rs:12:15\n   |\n12 |     if x_even.is_zero() &&\
    \ y_even.is_zero() {\n   |               ^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpxj1fysrt.rs:12:35\n   |\n12 |     if x_even.is_zero() &&\
    \ y_even.is_zero() {\n   |                                   ^^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `max_val` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpxj1fysrt.rs:15:27\n   |\n15 |     let z:\
    \ isize = x_even.max_val().unwrap() - y_even.max_val().unwrap() + 1;\n   |   \
    \                        ^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `max_val` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpxj1fysrt.rs:15:55\n   |\n15 |     let z: isize = x_even.max_val().unwrap()\
    \ - y_even.max_val().unwrap() + 1;\n   |                                     \
    \                  ^^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        let left = x;\n      \
    \  let right = y;\n        let mid = left.checked_mul(right).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        let diff = left.checked_sub(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        if diff.abs() >= right.checked_mul(2).ok_or(OutOfRangeError::new(\"\
    out of range\"))? {\n            return mid;\n        }\n        let tmp = right.checked_add(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        return choose_num(left, tmp);\n    }\n    if y <=\
    \ x {\n        let left = y;\n        let right = x;\n        let mid = left.checked_mul(right).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        let diff = left.checked_sub(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        if diff.abs() >= right.checked_mul(2).ok_or(OutOfRangeError::new(\"\
    out of range\"))? {\n            return mid;\n        }\n        let tmp = right.checked_add(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        return choose_num(tmp, left);\n    }\n    let tmp\
    \ = x.checked_mul(2).ok_or(OutOfRangeError::new(\"out of range\"))?;\n    let\
    \ left = (x - y).checked_div(tmp);\n    let right = x + y.checked_div(tmp);\n\
    \    right.ok_or(OutOfRangeError::new(\"out of range\"))?\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `OutOfRangeError`\n\
    \  --> /tmp/tmp78_sab3l.rs:13:49\n   |\n13 |         let mid = left.checked_mul(right).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n   |                                                 ^^^^^^^^^^^^^^^\
    \ use of undeclared type `OutOfRangeError`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `OutOfRangeError`\n  --> /tmp/tmp78_sab3l.rs:14:48\n\
    \   |\n14 |         let diff = left.checked_sub(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n   |                                                ^^^^^^^^^^^^^^^\
    \ use of undeclared type `OutOfRangeError`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `OutOfRangeError`\n  --> /tmp/tmp78_sab3l.rs:15:53\n\
    \   |\n15 |         if diff.abs() >= right.checked_mul(2).ok_or(OutOfRangeError::new(\"\
    out of range\"))? {\n   |                                                    \
    \ ^^^^^^^^^^^^^^^ use of undeclared type `OutOfRangeError`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `OutOfRangeError`\n  --> /tmp/tmp78_sab3l.rs:18:48\n\
    \   |\n18 |         let tmp = right.checked_add(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n   |                                                ^^^^^^^^^^^^^^^\
    \ use of undeclared type `OutOfRangeError`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `OutOfRangeError`\n  --> /tmp/tmp78_sab3l.rs:24:49\n\
    \   |\n24 |         let mid = left.checked_mul(right).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n   |                                                 ^^^^^^^^^^^^^^^\
    \ use of undeclared type `OutOfRangeError`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `OutOfRangeError`\n  --> /tmp/tmp78_sab3l.rs:25:48\n\
    \   |\n25 |         let diff = left.checked_sub(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n   |                                                ^^^^^^^^^^^^^^^\
    \ use of undeclared type `OutOfRangeError`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `OutOfRangeError`\n  --> /tmp/tmp78_sab3l.rs:26:53\n\
    \   |\n26 |         if diff.abs() >= right.checked_"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        y // 2\n    } else\
    \ if y % 2 == 0 {\n        x // 2 - 1\n    } else {\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpar071m54.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y >\
    \ zigzag_search(x, y) {\n        zigzag_search(x, y)\n    } else {\n        0\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `zigzag_search` in this scope\n  -->\
    \ /tmp/tmphhtag4p6.rs:12:19\n   |\n12 |     } else if y > zigzag_search(x, y)\
    \ {\n   |                   ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `zigzag_search` in this scope\n  --> /tmp/tmphhtag4p6.rs:13:9\n\
    \   |\n13 |         zigzag_search(x, y)\n   |         ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else {\n        if x <= y {\n            -1\n        } else if x == y {\n  \
    \          x\n        } else {\n            choose_num(x - 1, y)\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpjdqet5ij.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let max_number = x + y;\n    if max_number\
    \ >= 64 {\n        -1\n    } else {\n        loop {\n            let mut num =\
    \ 2 * x;\n            if num > y {\n                break;\n            }\n  \
    \          if num + 2 > max_number {\n                continue;\n            }\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n            }\n            num = num / 2;\n            if num % 2 == 0\
    \ {\n                return num;\n            }\n            num = num / 2;\n\
    \            if num % 2 == 0 {\n                return num;\n            }\n \
    \           num = num / 2;\n            if num % 2 == 0 {\n                return\
    \ num;\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmppq695u_2.rs:136:3\n\
    \    |\n9   | fn choose_num(x: isize, y: isize) -> isize {\n    |            \
    \                                - unclosed delimiter\n...\n13  |     } else {\n\
    \    |            - unclosed delimiter\n14  |         loop {\n    |          \
    \    - unclosed delimiter\n...\n122 |             if num % 2 == 0 {\n    |   \
    \                          - this delimiter might not be properly closed...\n\
    123 |                 return num;\n124 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n136 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppq695u_2.rs:17:17\n   |\n9  | fn choose_num(x: isize, y:\
    \ isize) -> isize {\n   |                                      ----- expected\
    \ `isize` because of return type\n...\n17 |                 break;\n   |     \
    \            ^^^^^\n   |                 |\n   |                 expected `isize`,\
    \ found `()`\n   |                 help: give it a value of the expected type:\
    \ `break 42`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min = x;\n    let mut max = y;\n  \
    \  while min <= max {\n        let mut mid = min + ((max - min) / 2);\n      \
    \  let is_even = (mid % 2) == 0;\n        match is_even {\n            true =>\
    \ return mid,\n            false => return -1,\n        }\n        match mid {\n\
    \            0 => max = mid - 1,\n            _ => min = mid + 1,\n        }\n\
    \    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp3wbka5ew.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let even = y % 2 == 0;\n        let max = (x + (if even {1}\
    \ else - 1)) >> 1;\n        if max < y {\n            choose_num(y, max)\n   \
    \     } else {\n            max\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `-`\n  --> /tmp/tmpzyfk888d.rs:14:42\n   |\n\
    14 |         let max = (x + (if even {1} else - 1)) >> 1;\n   |              \
    \                            ^ expected `{`\n   |\nhelp: try placing this code\
    \ inside a block\n   |\n14 |         let max = (x + (if even {1} else { - 1 }))\
    \ >> 1;\n   |                                          +     +\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        let tmp = y;\n        y\
    \ = x;\n        x = tmp;\n    }\n\n    if x % 2 == 0 {\n        x\n    } else\
    \ if y % 2 == 0 {\n        y\n    } else {\n        x + (y - x)/2\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpw0g2e2tm.rs:12:9\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n12 |  \
    \       y = x;\n   |         ^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `x`\n  --> /tmp/tmpw0g2e2tm.rs:13:9\n  \
    \ |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               - help:\
    \ consider making this binding mutable: `mut x`\n...\n13 |         x = tmp;\n\
    \   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut n = (x as usize + y as usize) / 2;\n\
    \n    if n == 0 {\n        return -1;\n    }\n\n    loop {\n        if x % 2 ==\
    \ 0 && y % 2 == 0 {\n            return n;\n        }\n\n        if x % 2 == 0\
    \ {\n            x = n / 2;\n        }\n\n        if y % 2 == 0 {\n          \
    \  y = n / 2;\n        }\n\n        n = ((x as usize + y as usize) / 2);\n   \
    \ }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp6p1oeous.rs:29:13\n\
    \   |\n29 |         n = ((x as usize + y as usize) / 2);\n   |             ^ \
    \                            ^\n   |\n   = note: `#[warn(unused_parens)]` on by\
    \ default\nhelp: remove these parentheses\n   |\n29 -         n = ((x as usize\
    \ + y as usize) / 2);\n29 +         n = (x as usize + y as usize) / 2;\n   | \n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6p1oeous.rs:18:20\n   |\n18 |\
    \             return n;\n   |                    ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n18 |             return n.try_into().unwrap();\n  \
    \ |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6p1oeous.rs:22:17\n   |\n9  | fn choose_num(x: isize, y: isize)\
    \ -> isize {\n   |                  ----- expected due to this parameter type\n\
    ...\n22 |             x = n / 2;\n   |                 ^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6p1oeous.rs:26:17\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \             ----- expected due to this parameter type\n...\n26 |           \
    \  y = n / 2;\n   |                 ^^^^^ expected `isize`, found `usize`\n\n\
    error: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_even = x as usize;\n    let mut\
    \ min_even = y as usize;\n    \n    while max_even < min_even {\n        let mut\
    \ max_even = max_even * 2;\n        let mut min_even = min_even / 2;\n    }\n\
    \    \n    if max_even + min_even % 2 == 0 {\n        return max_even\n    } else\
    \ {\n        return -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv957edqo.rs:19:16\n   |\n\
    9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                      \
    \                ----- expected `isize` because of return type\n...\n19 |    \
    \     return max_even\n   |                ^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |         return max_even.try_into().unwrap()\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    (x * x + y * y) % 2 == 0 ? (x * x + y * y)\
    \ / 2 : -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `-`\n  --> /tmp/tmpskqwupri.rs:10:54\n   |\n\
    10 |     (x * x + y * y) % 2 == 0 ? (x * x + y * y) / 2 : -1\n   |           \
    \                                         - ^ expected type\n   |            \
    \                                        |\n   |                             \
    \                       tried to parse a type due to this\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // Make sure x > y\n    if x > y {\n      \
    \  (x, y) = (y, x)\n    }\n\n    // Calculate the first even number between x\
    \ and y\n    let mut even_x = x;\n    let mut even_y = y;\n    while even_x <=\
    \ even_y {\n        if even_x % 2 != 0 {\n            even_x += 1;\n        }\
    \ else {\n            even_y = even_x + 1;\n        }\n    }\n    // Return the\
    \ biggest even number between x and y if x is not even\n    // and -1 if there\
    \ is no such number\n    if even_x != x {\n        even_x\n    } else {\n    \
    \    -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpywqm4sfy.rs:12:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n12 |         (x, y)\
    \ = (y, x)\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n  --> /tmp/tmpywqm4sfy.rs:12:13\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                \
    \         - help: consider making this binding mutable: `mut y`\n...\n12 |   \
    \      (x, y) = (y, x)\n   |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        x\n    } else {\n    \
    \    let mut xn = x;\n        let mut yn = y;\n        while xn >= yn {\n    \
    \        if xn % 2 == 0 {\n                xn /= 2;\n            } else {\n  \
    \              yn /= 2;\n            }\n        }\n        xn\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp4q2037n4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut min_even = x;\n        let mut min_even_bigger = y;\n\
    \        let mut min_odd = x;\n        let mut min_odd_bigger = y;\n\n       \
    \ let mut i = x;\n        let mut j = y;\n\n        let mut even = 1;\n      \
    \  let mut odd = 1;\n\n        while i <= j {\n            if i % 2 == 0 {\n \
    \               if even > min_even {\n                    min_even = even;\n \
    \                   min_even_bigger = min_even_bigger;\n                }\n  \
    \              even *= 2;\n                i += 1;\n            } else {\n   \
    \             if odd > min_odd {\n                    min_odd = odd;\n       \
    \             min_odd_bigger = min_odd_bigger;\n                }\n          \
    \      odd *= 2;\n                j -= 1;\n            }\n        }\n\n      \
    \  if even == min_even {\n            if min_even > min_odd_bigger {\n       \
    \         min_even = min_even_bigger;\n            } else {\n                min_even\
    \ = min_odd_bigger;\n            }\n        }\n\n        if odd > min_odd_bigger\
    \ {\n            min_odd = min_odd_bigger;\n        }\n\n        min_even\n  \
    \  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpsgza4k_f.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    loop {\n        if x == y {\n            return\
    \ -1;\n        }\n\n        let mut x = x;\n        let mut y = y;\n\n       \
    \ loop {\n            if x % 2 == 0 && y % 2 == 0 {\n                return x;\n\
    \            }\n\n            if x % 2 == 0 {\n                x /= 2;\n     \
    \       }\n            \n            if y % 2 == 0 {\n                y /= 2;\n\
    \            }\n\n            if x == y {\n                return -1;\n      \
    \      }\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min_x: usize = x;\n    let mut min_y:\
    \ usize = y;\n    let mut max_x: usize = x;\n    let mut max_y: usize = y;\n \
    \   loop {\n        if min_x > min_y {\n            if min_x > y {\n         \
    \       min_x = y;\n            } else {\n                min_x = x;\n       \
    \     }\n        } else {\n            if min_y > x {\n                min_y =\
    \ x;\n            } else {\n                min_y = y;\n            }\n      \
    \  }\n        if max_x > max_y {\n            if max_x > y {\n               \
    \ max_x = y;\n            } else {\n                max_x = x;\n            }\n\
    \        } else {\n            if max_y > x {\n                max_y = x;\n  \
    \          } else {\n                max_y = y;\n            }\n        }\n  \
    \      if min_x == max_x {\n            return min_y;\n        }\n        if min_y\
    \ == max_y {\n            return min_x;\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg7j8am74.rs:10:28\n   |\n\
    10 |     let mut min_x: usize = x;\n   |                    -----   ^ expected\
    \ `usize`, found `isize`\n   |                    |\n   |                    expected\
    \ due to this\n   |\nhelp: you can convert an `isize` to a `usize` and panic if\
    \ the converted value doesn't fit\n   |\n10 |     let mut min_x: usize = x.try_into().unwrap();\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg7j8am74.rs:11:28\n   |\n11 |     let mut min_y: usize\
    \ = y;\n   |                    -----   ^ expected `usize`, found `isize`\n  \
    \ |                    |\n   |                    expected due to this\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n11 |     let mut min_y: usize = y.try_into().unwrap();\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg7j8am74.rs:12:28\n   |\n12 |     let mut max_x: usize\
    \ = x;\n   |                    -----   ^ expected `usize`, found `isize`\n  \
    \ |                    |\n   |                    expected due to this\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |     let mut max_x: usize = x.try_into().unwrap();\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg7j8am74.rs:13:28\n   |\n13 |     let mut max_y: usize\
    \ = y;\n   |                    -----   ^ expected `usize`, found `isize`\n  \
    \ |                    |\n   |                    expected due to this\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n13 |     let mut max_y: usize = y.try_into().unwrap();\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg7j8am74.rs:16:24\n   |\n16 |             if min_x > y\
    \ {\n   |                        ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted valu"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        -1\n    } else {\n   \
    \     x.checked_add(y).unwrap() as isize\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `14`', /tmp/tmp_wzryeqm.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp89c1bxin.rs:11:9\n   |\n\
    9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                      \
    \                ----- expected `isize` because of return type\n10 |     if x\
    \ < y {\n11 |         (x, y)\n   |         ^^^^^^ expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(isize, isize)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp89c1bxin.rs:13:9\n   |\n9  | fn\
    \ choose_num(x: isize, y: isize) -> isize {\n   |                            \
    \          ----- expected `isize` because of return type\n...\n13 |         (y,\
    \ x)\n   |         ^^^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ type `isize`\n             found tuple `(isize, isize)`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        // x is greater than y,\
    \ there is no such number\n        -1\n    } else {\n        if x % 2 == 0 {\n\
    \            let y = x + 1;\n            loop {\n                if y >= y {\n\
    \                    return x - 1;\n                }\n                y = y +\
    \ 2;\n            }\n        } else {\n            let x = x - 1;\n          \
    \  loop {\n                if x <= 0 {\n                    return -1;\n     \
    \           }\n                x = x + 2;\n            }\n        }\n    }\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `y`\n  --> /tmp/tmpyqdjm2e0.rs:20:17\n\
    \   |\n15 |             let y = x + 1;\n   |                 -\n   |         \
    \        |\n   |                 first assignment to `y`\n   |               \
    \  help: consider making this binding mutable: `mut y`\n...\n20 |            \
    \     y = y + 2;\n   |                 ^^^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror[E0384]: cannot assign twice to immutable variable `x`\n  -->\
    \ /tmp/tmpyqdjm2e0.rs:28:17\n   |\n23 |             let x = x - 1;\n   |     \
    \            -\n   |                 |\n   |                 first assignment\
    \ to `x`\n   |                 help: consider making this binding mutable: `mut\
    \ x`\n...\n28 |                 x = x + 2;\n   |                 ^^^^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num_x = x;\n    let mut num_y = y;\n\
    \    loop {\n        if num_y >= num_x {\n            return num_x;\n        }\n\
    \        let mut num_x = num_y;\n        num_y += 1;\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp8tqo33f2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // find smallest even number larger than x\
    \ and smaller than y\n    loop {\n        if x % 2 == 0 {\n            x = x +\
    \ 1;\n        } else {\n            x = x + 2;\n        }\n        if y % 2 ==\
    \ 0 {\n            y = y + 1;\n        } else {\n            y = y + 2;\n    \
    \    }\n        if x <= y {\n            break\n        }\n    }\n\n    // return\
    \ x if it is evenly divisible by 2\n    if x % 2 == 0 {\n        return x\n  \
    \  }\n    // return -1 if there's no even number\n    return -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpgsvycf9t.rs:13:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n13 |             x\
    \ = x + 1;\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpgsvycf9t.rs:15:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n15 |             x\
    \ = x + 2;\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpgsvycf9t.rs:18:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n18 |  \
    \           y = y + 1;\n   |             ^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpgsvycf9t.rs:20:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n20 |  \
    \           y = y + 2;\n   |             ^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n        .iter()\n        .fold(|a, b| {\n            if\
    \ a % 2 == 0 && b % 2 == 0 {\n                a\n            } else {\n      \
    \          b\n            }\n        }, -1)\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmp8ya9r94x.rs:15:10\n   |\n15 |         .iter()\n\
    \   |          ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // Start from here to search for the biggest\
    \ even number\n    let mut x = x as usize;\n    let mut y = y as usize;\n    loop\
    \ {\n        // Find a number in range [x, y]\n        while x * x <= y {\n  \
    \          x += 1;\n        }\n        while y * y <= x {\n            y += 1;\n\
    \        }\n        if x * y == y {\n            return x;\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptsh5f_r3.rs:22:20\n   |\n\
    22 |             return x;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n22 |             return x.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut z = y;\n    if x < z {\n        z =\
    \ x;\n    }\n    loop {\n        if z % 2 == 0 {\n            return z;\n    \
    \    }\n        z -= 2;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpk9a6ye1x.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x % 2 == 0 {\n        x\n    } else {\n\
    \        if y % 2 == 0 {\n            y\n        } else {\n            choose_num(x\
    \ + 1, y)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpx0jzqujz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    use self::Even::*;\n\n    if y < x {\n    \
    \    choose_num(x, y)\n    } else {\n        if y == x {\n            return -1;\n\
    \        }\n        let mut x = x;\n        let mut y = y;\n        while y >\
    \ 0 {\n            let remainder = x % y;\n            if remainder == 0 {\n \
    \               return x;\n            }\n            x = y;\n            y =\
    \ remainder;\n        }\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `self::Even`\n  --> /tmp/tmpmjf1m2tu.rs:10:15\n\
    \   |\n10 |     use self::Even::*;\n   |               ^^^^ maybe a missing crate\
    \ `Even`?\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        -1\n    } else {\n   \
    \     let mut num_min = 0;\n        let mut num_max = y;\n        while num_min\
    \ < num_max {\n            let mut min_max = match num_min {\n               \
    \ 0 | 1 => return num_min,\n                2 | 3 => return num_max - 1,\n   \
    \             _ => num_min + 1,\n            };\n            num_min = min_max;\n\
    \        }\n        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp6lejga01.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let min_num = std::cmp::min(x as isize, y as\
    \ isize);\n    let max_num = std::cmp::max(x as isize, y as isize);\n    if min_num\
    \ >= max_num {\n        return -1;\n    }\n    for n in 0..=max_num {\n      \
    \  if n % 2 == 0 {\n            return n;\n        }\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmprr9jc_1l.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut i = y;\n    while i <= x {\n      \
    \  i <<= 1;\n        if i <= x && i <= y {\n            i += 1;\n        }\n \
    \   }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp90m_suud.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_num = 0;\n    let mut min_num =\
    \ 0;\n    while max_num < x || min_num > y {\n        if max_num == 0 {\n    \
    \        max_num = y;\n            min_num = x;\n        }\n        let mut i\
    \ = min_num;\n        while i <= max_num {\n            if i % 2 == 0 {\n    \
    \            break;\n            }\n            i += 1;\n        }\n        let\
    \ mut j = min_num;\n        while j > max_num {\n            j -= 1;\n       \
    \     if j % 2 == 0 {\n                break;\n            }\n        }\n    \
    \    if j > max_num {\n            max_num = j;\n        }\n        if i <= min_num\
    \ {\n            min_num = i;\n        }\n    }\n    max_num\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpyy73cxuo.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        let x = x.to_owned();\n\
    \        let y = y.to_owned();\n        std::cmp::max(x, y)\n    } else {\n  \
    \      let x = x.to_owned();\n        let y = y.to_owned();\n        std::cmp::max(y,\
    \ x)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmp2v70ffib.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    assert!(x >= y);\n    let mut x = x;\n    let\
    \ mut y = y;\n    let mut z = x;\n    while z < y {\n        if z & 1 == 0 {\n\
    \            y = z;\n        } else {\n            x = z;\n        }\n       \
    \ z = x + 1;\n    }\n    x\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: x >= y'', /tmp/tmpdj3x20sn.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976099
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        x\n    } else if x < y\
    \ {\n        choose_num(x + 2, y)\n    } else {\n        choose_num(x, y + 2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        let z = x + ((y - x) /\
    \ 2);\n        if z % 2 == 0 {\n            return z;\n        }\n    }\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp6eqd76gf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    assert!(x >= 0 && y > 0, \"The x and y must\
    \ be greater than zero\");\n\n    let mut v = x;\n    while v < y {\n        v\
    \ = (v * 3) + 2;\n    }\n    if v < y {\n        v\n    } else {\n        -1\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpyhpixki7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        -1\n    } else {\n    \
    \    x + 1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp241cfk29.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        return x;\n    }\n   \
    \ if x >= y {\n        return y;\n    }\n    let mut x: isize = x;\n    let mut\
    \ y: isize = y;\n    loop {\n        if x % 2 == 0 {\n            x /= 2;\n  \
    \      } else {\n            y /= 2;\n            if y == 0 {\n              \
    \  return x;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpk54he46d.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < 0 || y <= x {\n        return -1\n \
    \   }\n\n    let mut z = x + y;\n    let mut m: isize = x;\n\n    while m % 2\
    \ != 0 {\n        z = z;\n        m += 1;\n    }\n\n    z - m\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpwawl_h41.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    (x / 2) * (x + y / 2) + (x % 2) * y\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `114`,\n right: `14`', /tmp/tmp0v_l_8ok.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut num: isize = 0;\n        let mut temp: isize = x;\n        while\
    \ temp <= y {\n            let mut temp = temp * 2;\n            if temp > num\
    \ {\n                num = temp;\n            }\n        }\n        num\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpss3ycs9w.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut range: isize = 0usize;\n    let mut\
    \ max_even: isize = -1;\n    while x < y {\n        if x % 2 == 0 && y % 2 ==\
    \ 0 {\n            range += 2usize;\n        }\n        if x % 2 == 0 {\n    \
    \        max_even = x;\n        }\n        if y % 2 == 0 {\n            max_even\
    \ = y;\n        }\n        x /= 2usize;\n        y /= 2usize;\n    }\n    if range\
    \ == 0 {\n        max_even = -1\n    }\n    max_even\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptys6alaz.rs:10:28\n   |\n\
    10 |     let mut range: isize = 0usize;\n   |                    -----   ^^^^^^\
    \ expected `isize`, found `usize`\n   |                    |\n   |           \
    \         expected due to this\n   |\nhelp: change the type of the numeric literal\
    \ from `usize` to `isize`\n   |\n10 |     let mut range: isize = 0isize;\n   |\
    \                             ~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptys6alaz.rs:14:22\n\
    \   |\n14 |             range += 2usize;\n   |                      ^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n\
    \  --> /tmp/tmptys6alaz.rs:14:19\n   |\n14 |             range += 2usize;\n  \
    \ |                   ^^ no implementation for `isize += usize`\n   |\n   = help:\
    \ the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptys6alaz.rs:22:14\n   |\n22 |         x /= 2usize;\n  \
    \ |              ^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ divide-assign `isize` by `usize`\n  --> /tmp/tmptys6alaz.rs:22:11\n   |\n22\
    \ |         x /= 2usize;\n   |           ^^ no implementation for `isize /= usize`\n\
    \   |\n   = help: the trait `DivAssign<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `DivAssign<Rhs>`:\n    \
    \         <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n        \
    \     <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n            \
    \ <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n             <i16\
    \ as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num: isize = x;\n    for &i in (0..y-1).collect::<Vec<_>>()\
    \ {\n        if ((num & 1) == 0) {\n            return num;\n        }\n     \
    \   num /= 2;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4vrogbmj.rs:12:12\n\
    \   |\n12 |         if ((num & 1) == 0) {\n   |            ^              ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n12 -         if ((num & 1) == 0) {\n12 +         if (num & 1) == 0 {\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4vrogbmj.rs:11:9\n   |\n\
    11 |     for &i in (0..y-1).collect::<Vec<_>>() {\n   |         ^^    ----------------------------\
    \ this expression has type `Option<isize>`\n   |         |\n   |         expected\
    \ `isize`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `i`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut biggest_number = x;\n    loop {\n \
    \       if y > biggest_number {\n            biggest_number = y;\n        }\n\
    \        biggest_number -= 1;\n        if biggest_number < x {\n            break;\n\
    \        }\n    }\n    biggest_number\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        x\n    }\n    else if\
    \ x < y {\n        if x % 2 == 0 {\n            x / 2\n        }\n        else\
    \ {\n            choose_num(y, x - 1)\n        }\n    }\n    else {\n        if\
    \ y % 2 == 0 {\n            y / 2\n        }\n        else {\n            choose_num(x,\
    \ y - 1)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmprvefy9e2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut n: isize = 1;\n    for num in 1..=y\
    \ {\n        if n % 2 == 0 && num * 2 <= x {\n            n = num * 2;\n     \
    \   }\n    }\n    if n > x {\n        n = x;\n    }\n    n\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmp_o7psr4v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y { return x; }\n    if x < y {\n \
    \       // x is bigger than y\n        if x % 2 == 0 {\n            x / 2\n  \
    \      } else {\n            x + 1\n        }\n    } else if x > y {\n       \
    \ // y is bigger than x\n        if y % 2 == 0 {\n            y / 2\n        }\
    \ else {\n            y - 1\n        }\n    } else {\n        // x and y are equal\n\
    \        0\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmptphnm9me.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        -1\n    } else if x <=\
    \ y {\n        x\n    } else {\n        match x % 2 {\n            0 => y,\n \
    \           1 => x,\n            _ => {\n                let mut x = x - 1;\n\
    \                let mut y = y - 1;\n                while x >= y {\n        \
    \            x = x - 2;\n                    y = y - 2;\n                }\n \
    \               x + (y + 1)\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp7xuem6la.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        return -1\n    }\n   \
    \ for i in 0..(x+y-1) {\n        if i%2 == 0 {\n            return i;\n      \
    \  }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpmve8evm6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut range: Vec<isize> = vec![x, y];\n \
    \   let mut current: isize = 0;\n    let mut current_min = x;\n    let mut current_max\
    \ = y;\n    loop {\n        let mut next = current_min;\n        let mut next\
    \ = next;\n        while next <= current_max {\n            next = next + 1;\n\
    \            if next > current_max {\n                next = 1;\n            }\n\
    \            if next % 2 == 0 {\n                break;\n            }\n     \
    \   }\n        let mut next = next;\n        while next <= current_max {\n   \
    \         next = next + 1;\n            if next > current_max {\n            \
    \    next = 1;\n            }\n            if next % 2 != 0 {\n              \
    \  break;\n            }\n        }\n        if next == current_max {\n      \
    \      break;\n        }\n        range.push(next);\n        current_min = next;\n\
    \    }\n    range.sort();\n    range[0]\n}\n\nfn main() {\n    let candidate =\
    \ choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpf47ughak.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_i = x;\n    let mut max_j = y;\n\
    \    if y > x {\n        loop {\n            let mut i_next = x + 1;\n       \
    \     let mut j_next = y + 1;\n            while i_next < max_i && j_next < max_j\
    \ {\n                let i = i_next;\n                let j = j_next;\n      \
    \          let res = i_next + j_next;\n                if res > max_i {\n    \
    \                max_i = res;\n                }\n                if res < max_j\
    \ {\n                    max_j = res;\n                }\n                if i\
    \ == max_i {\n                    break;\n                }\n                if\
    \ j == max_j {\n                    break;\n                }\n              \
    \  i_next = i + 1;\n                j_next = j + 1;\n            }\n         \
    \   if i_next > max_i {\n                break;\n            }\n            if\
    \ j_next > max_j {\n                break;\n            }\n            x = i_next;\n\
    \            y = j_next;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpmfw9e_su.rs:41:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n41 |             x\
    \ = i_next;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpmfw9e_su.rs:42:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n42 |  \
    \           y = j_next;\n   |             ^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        (x * x + y * (y - 1))\
    \ / 2\n    } else {\n        (x + 1) * x / 2 + (y - 1) * y / 2\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `177`,\n right: `14`', /tmp/tmpugv4p_36.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min_num = std::cmp::min(x, y);\n  \
    \  let mut max_num = std::cmp::max(x, y);\n    while max_num - min_num > 2 {\n\
    \        let mut mid = (min_num + max_num) / 2;\n        if mid % 2 == 0 {\n \
    \           min_num = mid;\n        } else {\n            max_num = mid;\n   \
    \     }\n    }\n    min_num\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpz0y0kw9m.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut i = y;\n    let mut num = 0;\n    while (i <= x) && (!is_even(i))\
    \ {\n        i += 2;\n        num += 2;\n    }\n    num\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_even` in this scope\n  --> /tmp/tmpege6e7fg.rs:15:25\n\
    \   |\n15 |     while (i <= x) && (!is_even(i)) {\n   |                      \
    \   ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if y >= x {\n            return -1;\n        }\n        let z = (x\
    \ * y) / 2;\n        if z % 2 == 0 {\n            x = z;\n        } else {\n \
    \           y = z;\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpmv77n8xx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        return -1;\n    }\n\n\
    \    if x <= y {\n        return x - 1;\n    }\n\n    for i in x..y {\n      \
    \  if i % 2 != 0 {\n            return i - 1;\n        }\n    }\n\n    -1\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11`,\n right: `14`', /tmp/tmpc5oohlx1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut m = std::cmp::min(x, y);\n    \n  \
    \  if m == x { \n        while m == x && m != y {\n            m += 1;\n     \
    \   }\n    } else {\n        while m != x && m == y {\n            m -= 1;\n \
    \       }\n    }\n    m\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `14`', /tmp/tmps154iru5.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num: isize = 0;\n    let mut counter\
    \ = 1;\n    while counter < y {\n        if num == x {\n            break;\n \
    \       }\n        if num > x {\n            break;\n        }\n        if num\
    \ <= y {\n            num = num * 2;\n        }\n        else {\n            num\
    \ = num / 2;\n        }\n        counter++;\n    }\n    counter;\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmplyjai486.rs:25:16\n\
    \   |\n25 |         counter++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n25 |         { let tmp = counter; counter\
    \ += 1; tmp };\n   |         +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n25 -  \
    \       counter++;\n25 +         counter += 1;\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplyjai486.rs:9:38\n   |\n9  | fn choose_num(x: isize, y:\
    \ isize) -> isize {\n   |    ----------                        ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n...\n27 |     counter;\n   |           \
    \ - help: remove this semicolon\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    while x > y && y > 0 {\n        let mut x =\
    \ x - y;\n        let mut y = y - x;\n        if x % 2 == 0 {\n            x =\
    \ x / 2;\n        } else {\n            x = x + 1;\n            y = y - 1;\n \
    \       }\n    }\n    if x > y { x } else { y }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpt2jfwyho.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x < 2 * y {\n     \
    \       (x as isize) / y\n        } else {\n            0\n        }\n    } else\
    \ {\n        (y as isize) / x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp06rah7gz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        if y % 2 == 0 {\n     \
    \       y\n        } else {\n            -1\n        }\n    } else {\n       \
    \ if x % 2 == 0 {\n            x\n        } else {\n            -1\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp7nxvl39j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        let tmp = x;\n        x\
    \ = y;\n        y = tmp;\n    }\n    if y == 0 || x == 0 {\n        -1\n    }\
    \ else if y % 2 == 0 {\n        x - (y / 2)\n    } else {\n        x + 1 + ((y\
    \ / 2) + (y % 2))\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpnmetbj32.rs:12:9\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n12 |         x = y;\n\
    \   |         ^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot\
    \ assign to immutable argument `y`\n  --> /tmp/tmpnmetbj32.rs:13:9\n   |\n9  |\
    \ fn choose_num(x: isize, y: isize) -> isize {\n   |                         -\
    \ help: consider making this binding mutable: `mut y`\n...\n13 |         y = tmp;\n\
    \   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x == 0 {\n        \
    \    x\n        } else {\n            x\n        }\n    } else {\n        if y\
    \ == 0 {\n            y\n        } else {\n            y\n        }\n    }\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpud2g6cm1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        return -1\n    }\n   \
    \ for i in 1..y {\n        if x % i == 0 {\n            return i\n        }\n\
    \    }\n    return -1\n}\n\nfn main() {\n    let candidate = choose_num;\n   \
    \ assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4ommjoor.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    for _ in 0..y {\n\
    \        if result % 2 == 0 {\n            break;\n        }\n        result /=\
    \ 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpacvm3ulf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        return -1;\n    }\n  \
    \  for i in x..y {\n        if i % 2 == 0 {\n            return i;\n        }\n\
    \    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpt4iq_q5v.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y <= x || y <= x {\n        return -1;\n\
    \    }\n    let mut max_even: isize = 0;\n    let mut max_odd: isize = 0;\n  \
    \  for i in 0..y {\n        if y % 2 == 0 {\n            if x % 2 == 0 {\n   \
    \             let num = i + (x-1)*2;\n                if num > max_even {\n  \
    \                  max_even = num;\n                }\n            } else {\n\
    \                let num = i + (x-1)*2;\n                if num > max_even {\n\
    \                    max_even = num;\n                }\n            }\n     \
    \   } else {\n            if x % 2 == 1 {\n                let num = i + (x-1)*2;\n\
    \                if num > max_even {\n                    max_even = num;\n  \
    \              }\n            } else {\n                let num = i + (x-1)*2;\n\
    \                if num > max_even {\n                    max_even = num;\n  \
    \              }\n            }\n        }\n    }\n    for i in 0..y {\n     \
    \   if y % 2 == 0 {\n            if x % 2 == 1 {\n                let num = i\
    \ + (x-1)*2;\n                if num > max_odd {\n                    max_odd\
    \ = num;\n                }\n            } else {\n                let num = i\
    \ + (x-1)*2;\n                if num > max_odd {\n                    max_odd\
    \ = num;\n                }\n            }\n        } else {\n            if x\
    \ % 2 == 0 {\n                let num = i + (x-1)*2;\n                if num >\
    \ max_odd {\n                    max_odd = num;\n                }\n         \
    \   } else {\n                let num = i + (x-1)*2;\n                if num >\
    \ max_odd {\n                    max_odd = num;\n                }\n         \
    \   }\n        }\n    }\n    if max_even > max_odd {\n        return max_even;\n\
    \    } else {\n        return max_odd;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmpb0een2i1.rs:78:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let x: i32 = x as i32;\n    let y: i32 = y\
    \ as i32;\n    let mut x_: i32 = x;\n    let mut y_: i32 = y;\n    while x_ <\
    \ y_ {\n        let mut tmp: i32 = (x_ * x_ + y_ * y_) mod 2_147_483_648;\n  \
    \      if tmp > 2_147_483_648 { tmp = 2_147_483_648 };\n        if tmp < x_ {\
    \ tmp = x_ };\n        x_ = tmp;\n        y_ = tmp % y_;\n    };\n    x_\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found keyword\
    \ `mod`\n  --> /tmp/tmp58txklv0.rs:15:48\n   |\n15 |         let mut tmp: i32\
    \ = (x_ * x_ + y_ * y_) mod 2_147_483_648;\n   |                             \
    \                   ^^^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp58txklv0.rs:21:5\n   |\n9  | fn\
    \ choose_num(x: isize, y: isize) -> isize {\n   |                            \
    \          ----- expected `isize` because of return type\n...\n21 |     x_\n \
    \  |     ^^ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n21 |     x_.try_into().unwrap()\n\
    \   |       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y >= x {\n        -1\n    } else {\n   \
    \     let mut result = x;\n        if y % 2 == 0 {\n            while result %\
    \ 2 != 0 {\n                result = result / 2;\n            }\n        } else\
    \ {\n            while result % 2 != 0 {\n                result = result * 2;\n\
    \            }\n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmppjkei76f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n    \
    \        x\n        } else if y % 2 == 0 {\n            y\n        } else {\n\
    \            choose_num(x + 1, y + 1)\n        }\n    } else {\n        if y %\
    \ 2 == 0 {\n            y\n        } else {\n            choose_num(x + 1, y +\
    \ 1)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp8rs3hvmv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut biggest_even = -1;\n    let mut smaller\
    \ = x.saturating_sub(y);\n    while smaller < y && biggest_even == -1 { \n   \
    \     if biggest_even < smaller { biggest_even = smaller; }\n        smaller +=\
    \ x;\n    }\n    biggest_even\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `14`', /tmp/tmpy6wjqgr_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    assert!(x > 0 && x < y, \"The given range is\
    \ invalid.\");\n    let mut max_num = if y > x {\n        x // if x is the smaller\
    \ range, then the max number is the smaller one.\n    } else {\n        y // if\
    \ y is the smaller range, then the max number is the smaller one.\n    };\n  \
    \  let mut max_num_in_range = max_num;\n    for i in 1..max_num_in_range {\n \
    \       if max_num_in_range % i == 0 {\n            max_num_in_range = i;\n  \
    \      }\n    }\n    if max_num_in_range == x {\n        max_num\n    } else {\n\
    \        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpmgpfky2r.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y { choose_num(y, x); } else if x ==\
    \ y { return x; }\n    \n    (x, y)\n        .iter()\n        .take_while(|&x|\
    \ *x <= *y)\n        .max()\n        .unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmp7yz6h1ex.rs:13:10\n   |\n13 |         .iter()\n\
    \   |          ^^^^ method not found in `(isize, isize)`\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmp7yz6h1ex.rs:14:32\n   |\n14 |\
    \         .take_while(|&x| *x <= *y)\n   |                                ^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y - 1)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976105
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    loop {\n        if x == y { \n            return\
    \ -1\n        } else if x > y { \n            return -1\n        }\n        \n\
    \        if x % 2 == 0 {\n            x = x / 2\n        } else {\n          \
    \  x = x * 3 + 1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpge30h0_8.rs:18:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n18 |             x\
    \ = x / 2\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpge30h0_8.rs:20:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n20 |             x\
    \ = x * 3 + 1\n   |             ^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        let tmp = x;\n        x\
    \ = y;\n        y = tmp;\n    }\n\n    let mut x: isize = 1;\n    let mut y: isize\
    \ = 1;\n\n    while x <= y {\n        if x % 2 == 0 {\n            x += 1;\n \
    \       } else {\n            y += 1;\n        }\n\n        if x > y {\n     \
    \       let tmp = x;\n            x = y;\n            y = tmp;\n        }\n  \
    \  }\n\n    if x == y {\n        x\n    } else {\n        -1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n  --> /tmp/tmpjzeq8fr1.rs:12:9\n\
    \   |\n12 |         x = y;\n   |         ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n  --> /tmp/tmpjzeq8fr1.rs:13:9\n   |\n\
    13 |         y = tmp;\n   |         ^\n   |\n   = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0384]: cannot assign to immutable argument `x`\n\
    \  --> /tmp/tmpjzeq8fr1.rs:12:9\n   |\n9  | fn choose_num(x: isize, y: isize)\
    \ -> isize {\n   |               - help: consider making this binding mutable:\
    \ `mut x`\n...\n12 |         x = y;\n   |         ^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpjzeq8fr1.rs:13:9\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n13 |  \
    \       y = tmp;\n   |         ^^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, x + 1)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976105
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\n\
    \    if y >= x {\n        0\n    } else if x == 0 || y <= 0 || x >= y {\n    \
    \    -1\n    } else {\n        let mut n = x;\n        while n > y {\n       \
    \     n /= 2;\n        }\n        n\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkhp6mfdk.rs:11:9\n   |\n\
    10 | /     if y > x {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n12 | |     }\n   | |_____- expected this to be\
    \ `()`\n   |\nhelp: consider using a semicolon here\n   |\n11 |         choose_num(y,\
    \ x);\n   |                         +\nhelp: consider using a semicolon here\n\
    \   |\n12 |     };\n   |      +\nhelp: you might have meant to return this value\n\
    \   |\n11 |         return choose_num(y, x);\n   |         ++++++            \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    for i in 1..(y - x) {\n        if x%i == 0\
    \ {\n            return i;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpx7f6p3h6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        let mut xx = x;\n     \
    \   let mut yy = y;\n        xx = xx - xx % yy;\n        yy = yy - yy % xx;\n\
    \        if xx == 0 {\n            return yy;\n        } else if yy == 0 {\n \
    \           return xx;\n        } else {\n            return xx + (yy / xx);\n\
    \        }\n    } else {\n        let mut xx = x;\n        let mut yy = y;\n \
    \       xx = xx - yy % xx;\n        yy = yy - xx % yy;\n        if xx == 0 {\n\
    \            return yy;\n        } else if yy == 0 {\n            return xx;\n\
    \        } else {\n            return yy + (xx / yy);\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpry5rmv73.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min = std::cmp::min(x, y);\n    let\
    \ mut max = std::cmp::max(x, y);\n    let mut mid: isize = 0;\n    let mut counter:\
    \ isize = 0;\n    loop {\n        let m = (min + max) / 2;\n        if m % 2 ==\
    \ 0 {\n            mid = m;\n            break;\n        }\n        if min >=\
    \ y {\n            break;\n        }\n        counter++;\n        if counter >\
    \ 10000 {\n            break;\n        }\n        if max < x {\n            break;\n\
    \        }\n        if max < x && min < y {\n            max = m;\n        } else\
    \ {\n            min = m;\n        }\n    }\n    if counter == 0 {\n        return\
    \ -1;\n    }\n    return mid;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpg5aajgll.rs:23:16\n\
    \   |\n23 |         counter++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n23 |         { let tmp = counter; counter\
    \ += 1; tmp };\n   |         +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n23 -  \
    \       counter++;\n23 +         counter += 1;\n   | \n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let x_even = if x % 2 == 0 { return -1; }\n\
    \    x / 2;\n    let y_even = if y % 2 == 0 { return -1; }\n    y / 2;\n    match\
    \ x_even, y_even {\n        (0, 0) => x,\n        (x, y) => {\n            let\
    \ mut min = x as isize;\n            let mut max = y as isize;\n            while\
    \ min <= max {\n                let mid = (min + max) / 2;\n                if\
    \ min % 2 == 0 && mid % 2 != 0 { return -1; }\n                if max % 2 == 0\
    \ && mid % 2 == 0 { return -1; }\n                if mid % 2 == 0 && min % 2 !=\
    \ 0 { return -1; }\n                if mid % 2 == 0 && max % 2 != 0 { return -1;\
    \ }\n                if mid % 2 != 0 && min % 2 != 0 { return -1; }\n        \
    \        if mid % 2 != 0 && max % 2 != 0 { return -1; }\n                min =\
    \ mid + 1;\n                max = mid - 1;\n            }\n            min\n \
    \       }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `x`\n  --> /tmp/tmpk_flofhs.rs:10:46\n   |\n\
    10 |     let x_even = if x % 2 == 0 { return -1; }\n   |                     \
    \                         ^ help: add `;` here\n11 |     x / 2;\n   |     - unexpected\
    \ token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmpk_flofhs.rs:12:46\n \
    \  |\n12 |     let y_even = if y % 2 == 0 { return -1; }\n   |               \
    \                               ^ help: add `;` here\n13 |     y / 2;\n   |  \
    \   - unexpected token\n\nerror: expected one of `!`, `.`, `::`, `?`, `{`, or\
    \ an operator, found `,`\n  --> /tmp/tmpk_flofhs.rs:14:17\n   |\n14 |     match\
    \ x_even, y_even {\n   |     -----       ^ expected one of `!`, `.`, `::`, `?`,\
    \ `{`, or an operator\n   |     |\n   |     while parsing this `match` expression\n\
    \nerror: aborting due to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        y -= 1;\n    }\n    let\
    \ mut min_max: (isize, isize);\n    if x < y {\n        min_max = (y, x);\n  \
    \  } else {\n        min_max = (x, y);\n    }\n    let mut num: isize = 0;\n \
    \   for _ in 0..min_max[0] {\n        num += 1;\n    }\n    for _ in 0..min_max[1]\
    \ {\n        num += 1;\n    }\n    while num > 2 {\n        if num % 2 == 0 {\n\
    \            num -= 2;\n        } else {\n            num /= 2;\n        }\n \
    \   }\n    num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `(isize, isize)`\n  -->\
    \ /tmp/tmpg5damqh_.rs:20:17\n   |\n20 |     for _ in 0..min_max[0] {\n   |   \
    \              ^^^^^^^^^^ help: to access tuple elements, use: `min_max.0`\n\n\
    error[E0608]: cannot index into a value of type `(isize, isize)`\n  --> /tmp/tmpg5damqh_.rs:23:17\n\
    \   |\n23 |     for _ in 0..min_max[1] {\n   |                 ^^^^^^^^^^ help:\
    \ to access tuple elements, use: `min_max.1`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut n = x;\n    let mut m = y;\n\n    loop\
    \ {\n        match n % m {\n            0 => return n,\n            a => {\n \
    \               n = m;\n                m += a;\n            }\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to add with overflow'', /tmp/tmpc_fwqwb5.rs:18:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    let\
    \ mut ans = -1;\n\n    loop {\n        // if x is greater than or equal to y,\
    \ return -1 because there\n        // is no even number in that range\n      \
    \  if x >= y {\n            return ans;\n        }\n\n        // if x is greater\
    \ than y, then check if y is even\n        if y % 2 == 0 {\n            return\
    \ ans;\n        }\n\n        // if y is even, then check if x is odd\n       \
    \ if x % 2 == 1 {\n            return ans;\n        }\n\n        ans += 1;\n \
    \       x /= 2;\n        y /= 2;\n    }\n}\n\nfn main() {\n    let candidate =\
    \ choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpa7oi25jq.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .take_while(|&x| x < y)\n    .max()\n\
    \    .unwrap_or(-1)\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpjy7lqci1.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x == y { x }\n    \
    \    else {\n            let mut low = x;\n            let mut high = y;\n   \
    \         loop {\n                let mid = (((low + high) / 2) + low) as usize;\n\
    \                if mid < x {\n                    low = mid + 1;\n          \
    \      } else {\n                    high = mid - 1;\n                }\n    \
    \            if low == high {\n                    return mid;\n             \
    \   }\n            }\n        }\n    } else {\n        if y == x { y }\n     \
    \   else {\n            let mut low = y;\n            let mut high = x;\n    \
    \        loop {\n                let mid = (((low + high) / 2) + high) as usize;\n\
    \                if mid < y {\n                    low = mid + 1;\n          \
    \      } else {\n                    high = mid - 1;\n                }\n    \
    \            if low == high {\n                    return mid;\n             \
    \   }\n            }\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9u4lh325.rs:11:21\n   |\n\
    11 |           if x == y { x }\n   |           -           ^ expected `()`, found\
    \ `isize`\n   |  _________|\n   | |\n12 | |         else {\n13 | |           \
    \  let mut low = x;\n14 | |             let mut high = y;\n...  |\n25 | |    \
    \         }\n26 | |         }\n   | |_________- expected this to be `()`\n   |\n\
    help: you might have meant to return this value\n   |\n11 |         if x == y\
    \ { return x; }\n   |                     ++++++  +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9u4lh325.rs:17:26\n   |\n17 |                 if mid <\
    \ x {\n   |                          ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n17 |                 if mid < x.try_into().unwrap() {\n \
    \  |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9u4lh325.rs:18:27\n   |\n13 |             let mut low =\
    \ x;\n   |                           - expected due to this value\n...\n18 | \
    \                    low = mid + 1;\n   |                           ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9u4lh325.rs:20:28\n\
    \   |\n14 |             let mut high = y;\n   |                            - expected\
    \ due to this value\n...\n20 |                     high = mid - 1;\n   |     \
    \                       ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9u4lh325.rs:23:28\n   |\n23 |              \
    \       return mid;\n   |                            ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n23 |                     return mid.try_into().unwrap();\n\
    \   |                               ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9u4lh325.rs:28:21\n   |\n28 |           if y == x { y }\n\
    \   |           -           ^ expected `()`, found `isize`\n   |  _________|\n\
    \   | |\n29 | |         else {\n30 | |             let mut lo"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    assert!(x == y);\n    let x_even = x % 2 ==\
    \ 0;\n    let y_even = y % 2 == 0;\n    if x_even && y_even {\n        x\n   \
    \ } else if x_even {\n        y\n    } else {\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: x == y'', /tmp/tmpew1oa4h5.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut a = x;\n    let mut b = y;\n    let\
    \ mut c = 1;\n    let mut d = 1;\n    let mut s = 1;\n    let mut z = 0;\n\n \
    \   while d < b {\n        if b - d < 3 {\n            if d + 4 <= b {\n     \
    \           z = c + 4;\n            }\n            \n            // when `d` is\
    \ divisible by 3 `s` is 2\n            if d % 3 == 0 {\n                s *= 2;\n\
    \            }\n        } else {\n            z = c + 5;\n        }\n        c\
    \ = d;\n        d = z;\n        b -= s;\n    }\n    \n    if b == 0 {\n      \
    \  if c == x {\n            return -1\n        } else {\n            return c\n\
    \        }\n    } else {\n        return -1\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpweeclp7v.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y <= x {\n        return -1;\n    }\n  \
    \  \n    let mut x = x;\n    let mut y = y;\n\n    while x <= y {\n        if\
    \ x % 2 == 0 {\n            x /= 2;\n        } else {\n            y /= 2;\n \
    \       }\n    }\n    y\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpmkalntog.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x >= 15 && y >= 15\
    \ {\n            return 4\n        } else if x > 15 {\n            return 3\n\
    \        } else if y > 15 {\n            return 2\n        } else {\n        \
    \    return 1\n        }\n    } else {\n        if y >= 15 {\n            return\
    \ 3\n        } else if y > 15 {\n            return 2\n        } else {\n    \
    \        return 1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmp_4w8uwg6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    for i in &range(x, y + 1) {\n        if i.is_multiple_of(2)\
    \ {\n            return i;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8cvn14j2.rs:10:15\n\
    \   |\n10 |     for i in &range(x, y + 1) {\n   |               ^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use\
    \ std::slice::range;\n   |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x).unwrap()\n\
    \    } else {\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpw7df28da.rs:11:26\n   |\n11 |         choose_num(y, x).unwrap()\n\
    \   |                          ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let x_even = x % 2 == 0;\n    let y_even =\
    \ y % 2 == 0;\n    if x_even && y_even {\n        if x == y {\n            return\
    \ x;\n        } else if x == y || x > y {\n            return -1;\n        } else\
    \ {\n            return y;\n        }\n    } else if x_even && !y_even {\n   \
    \     if x == y {\n            return x;\n        } else if x > y {\n        \
    \    return x;\n        } else {\n            return -1;\n        }\n    } else\
    \ if !x_even && y_even {\n        if x == y {\n            return x;\n       \
    \ } else if x > y {\n            return y;\n        } else {\n            return\
    \ -1;\n        }\n    } else {\n        return -1;\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpa8xe4k9t.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let n = x;\n        let mut even = x;\n        while even %\
    \ 2 == 0 {\n            even += 1;\n        }\n        n -= even;\n        even\
    \ = y;\n        while even % 2 == 0 {\n            even += 1;\n        }\n   \
    \     n -= even;\n        n - 1\n    }\n}\n\nfn main() {\n    let candidate =\
    \ choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp72nuvbu3.rs:18:9\n\
    \   |\n13 |         let n = x;\n   |             -\n   |             |\n   | \
    \            first assignment to `n`\n   |             help: consider making this\
    \ binding mutable: `mut n`\n...\n18 |         n -= even;\n   |         ^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `n`\n  --> /tmp/tmp72nuvbu3.rs:23:9\n   |\n13 |      \
    \   let n = x;\n   |             -\n   |             |\n   |             first\
    \ assignment to `n`\n   |             help: consider making this binding mutable:\
    \ `mut n`\n...\n23 |         n -= even;\n   |         ^^^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    loop {\n        if\
    \ result < y {\n            result *= 2;\n            if result < y {\n      \
    \          return result;\n            }\n        } else {\n            result\
    \ /= 2;\n            if result < x {\n                return result;\n       \
    \     }\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976105
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let (min, max) = if x > y { (y, x) } else {\
    \ (x, y) };\n\n    for i in (min .. max).step_by(2) {\n        if i % 2 == 0 {\n\
    \            return i;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpz1mpujl9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else if x == y {\n        x\n    } else {\n        choose_num(x - y, y + x)\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to add with overflow'', /tmp/tmphn3vi9gy.rs:15:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min_num = x;\n    let mut max_num =\
    \ y;\n    \n    // find the smallest even number greater or equal to min_num\n\
    \    while min_num % 2 == 0 {\n        min_num += 1;\n    }\n    \n    // find\
    \ the smallest even number greater than or equal to max_num\n    while max_num\
    \ % 2 == 0 {\n        max_num += 1;\n    }\n    \n    // if there is no even number\
    \ in that range\n    if min_num > max_num {\n        return -1;\n    }\n    \n\
    \    // if there is no even number in that range\n    if min_num == max_num {\n\
    \        return min_num;\n    }\n    \n    // find the biggest odd number between\
    \ min_num and max_num\n    while max_num % 2 == 1 {\n        max_num -= 1;\n \
    \   }\n    \n    return max_num;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `-1`', /tmp/tmprk0r19r3.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        // x must be smaller than\
    \ y\n        -1\n    } else {\n        ((x / y) * y).ceil()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ceil` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6ewde3su.rs:14:23\n   |\n14 |         ((x / y) * y).ceil()\n\
    \   |                       ^^^^ help: there is an associated function with a\
    \ similar name: `div_ceil`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: i32 = x;\n    let mut y: i32 = y;\n\
    \n    // The \"if\" condition below is not really necessary, but for \n    //\
    \ readability, it was included.\n    if x == y {\n        if x > y {\n       \
    \     return -1;\n        } else {\n            return x;\n        }\n    }\n\n\
    \    // The \"if\" condition below is not really necessary, but for \n    // readability,\
    \ it was included.\n    if x > y {\n        (x, y) = (y, x);\n    }\n\n    loop\
    \ {\n        if x % 2 == 0 {\n            // The \"if\" condition below is not\
    \ really necessary, but for \n            // readability, it was included.\n \
    \           if y % 2 == 0 {\n                (x, y) = (y, x);\n            } else\
    \ {\n                return x;\n            }\n        } else {\n            y\
    \ -= 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt35s_vz7.rs:10:22\n   |\n\
    10 |     let mut x: i32 = x;\n   |                ---   ^ expected `i32`, found\
    \ `isize`\n   |                |\n   |                expected due to this\n \
    \  |\nhelp: you can convert an `isize` to an `i32` and panic if the converted\
    \ value doesn't fit\n   |\n10 |     let mut x: i32 = x.try_into().unwrap();\n\
    \   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt35s_vz7.rs:11:22\n   |\n11 |     let mut y: i32 = y;\n   |   \
    \             ---   ^ expected `i32`, found `isize`\n   |                |\n \
    \  |                expected due to this\n   |\nhelp: you can convert an `isize`\
    \ to an `i32` and panic if the converted value doesn't fit\n   |\n11 |     let\
    \ mut y: i32 = y.try_into().unwrap();\n   |                       ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt35s_vz7.rs:19:20\n   |\n9  |\
    \ fn choose_num(x: isize, y: isize) -> isize {\n   |                         \
    \             ----- expected `isize` because of return type\n...\n19 |       \
    \      return x;\n   |                    ^ expected `isize`, found `i32`\n  \
    \ |\nhelp: you can convert an `i32` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n19 |             return x.try_into().unwrap();\n   |    \
    \                 ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    loop {\n        let result = if x % 2 == 0\
    \ && y % 2 == 0 {\n            x / 2 \n        } else {\n            -1\n    \
    \    };\n        if x < y {\n            return result;\n        }\n        x\
    \ = y;\n        y = result;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpg5jjzbwo.rs:19:9\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n19 |         x = y;\n\
    \   |         ^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot\
    \ assign to immutable argument `y`\n  --> /tmp/tmpg5jjzbwo.rs:20:9\n   |\n9  |\
    \ fn choose_num(x: isize, y: isize) -> isize {\n   |                         -\
    \ help: consider making this binding mutable: `mut y`\n...\n20 |         y = result;\n\
    \   |         ^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut y = y;\n        while x <= y {\n            if y % 2\
    \ == 0 {\n                break;\n            }\n            y /= 2;\n       \
    \ }\n        if y == x {\n            -1\n        } else {\n            x\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp2usoh1ba.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        -1\n    } else {\n   \
    \     debug_assert!(x < y);\n        if x % 2 == 0 {\n            x\n        }\
    \ else {\n            choose_num(x - 2, y - 1)\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmplz2lk23u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    use std::cmp::Ordering;\n    \n    if x > y\
    \ {\n        (x, y) = (y, x);\n    }\n\n    // We have to use `isize` here because\
    \ `usize` does not implement `Ord`\n    // and therefore `Ordering::is_less` does\
    \ not work in the following \n    // line \n    let order = Ordering::Less;\n\n\
    \    if x < y {\n        for number in 1..(x+y) / 2 {\n            if number %\
    \ 2 == 0 {\n                return number;\n            }\n        }\n    } else\
    \ if x < y {\n        for number in 1..(y+x) / 2 {\n            if number % 2\
    \ == 0 {\n                return number;\n            }\n        }\n    } else\
    \ {\n        for number in 1..(x+y) / 2 {\n            if number % 2 == 0 {\n\
    \                return number;\n            }\n        }\n    }\n\n    -1\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `order`\n  --> /tmp/tmpzjjx175r.rs:19:9\n   |\n\
    19 |     let order = Ordering::Less;\n   |         ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_order`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `x`\n  -->\
    \ /tmp/tmpzjjx175r.rs:13:10\n   |\n9  | fn choose_num(x: isize, y: isize) -> isize\
    \ {\n   |               - help: consider making this binding mutable: `mut x`\n\
    ...\n13 |         (x, y) = (y, x);\n   |          ^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpzjjx175r.rs:13:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n13 |  \
    \       (x, y) = (y, x);\n   |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        return -1;\n    }\n  \
    \  if x % 2 == 0 {\n        choose_num(x / 2, y)\n    } else {\n        choose_num(x\
    \ / 2 + 1, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976105
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        return -1\n    }\n   \
    \ if x > y {\n        (x, y) = (y, x)\n    }\n    for i in 0..(y-x) {\n      \
    \  let mut t = i;\n        while t < x {\n            t += 2;\n        }\n   \
    \     if t > x {\n            return t\n        }\n    }\n    return -1\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp9so2mv_1.rs:14:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n14 |         (x, y)\
    \ = (y, x)\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n  --> /tmp/tmp9so2mv_1.rs:14:13\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                \
    \         - help: consider making this binding mutable: `mut y`\n...\n14 |   \
    \      (x, y) = (y, x)\n   |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        return -1\n    }\n   \
    \ let mut biggest_num: isize = x;\n    for n in (1..y).rev() {\n        if biggest_num\
    \ % n == 0 {\n            biggest_num = n;\n        }\n    }\n    biggest_num\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpe4urr28c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    debug_assert!(x < y);\n\n    let mut num1 =\
    \ x;\n    let mut num2 = y;\n\n    // while there are still numbers in num1 and\
    \ num2\n    while num1 != 0 || num2 != 0 {\n        // if num1 has a bigger even\
    \ number\n        if num1 % 2 == 0 {\n            num1 /= 2;\n            // add\
    \ 1 to num2\n            num2 += 1;\n            // continue while num1 has a\
    \ bigger even number\n            continue;\n        }\n        // else num2 has\
    \ a bigger even number\n        if num2 % 2 == 0 {\n            num2 /= 2;\n \
    \           // add 1 to num1\n            num1 += 1;\n            // continue\
    \ while num2 has a bigger even number\n            continue;\n        }\n    \
    \    // else num1 is even\n        num1 /= 2;\n        // num2 is even\n     \
    \   num2 /= 2;\n        // add 1 to num1\n        num1 += 1;\n        // add 1\
    \ to num2\n        num2 += 1;\n    }\n    num1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976105
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut high = x;\n    let mut low = y;\n \
    \   while low > high {\n        if low % 2 == 0 {\n            high = high / 2;\n\
    \        } else {\n            low = low / 2;\n        }\n    }\n    if low ==\
    \ high {\n        -1\n    } else {\n        high\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmph1a_a48p.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else if y == x {\n        x\n    } else {\n        let mut y = y;\n        while\
    \ y % 2 != 0 {\n            y = y / 2;\n        }\n        y\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpnw_pag3f.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut ans = if x <= y { x } else { y };\n\
    \    if y % 2 == 0 { ans += 1 };\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpd0x7yot5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    while y > x {\n        if x % 2 == 0 && y %\
    \ 2 == 0 {\n            x = x + 1;\n            y = y - 1;\n        } else if\
    \ x % 2 == 0 && y % 2 == 1 {\n            x = x + 1;\n        } else {\n     \
    \       y = y - 1;\n        }\n    }\n    y\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp74q32cul.rs:12:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n12 |             x\
    \ = x + 1;\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmp74q32cul.rs:13:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n13 |  \
    \           y = y - 1;\n   |             ^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp74q32cul.rs:15:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n15 |             x\
    \ = x + 1;\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmp74q32cul.rs:17:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n17 |  \
    \           y = y - 1;\n   |             ^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // TODO: replace with range check\n    let\
    \ mut candidate = x;\n    while candidate < y && candidate % 2 == 0 {\n      \
    \  candidate += 1;\n    }\n    if candidate >= y {\n        -1\n    } else {\n\
    \        candidate\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `14`', /tmp/tmpjkkjr6rj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) => {\n         \
    \   let max = find_max(x, y)\n            if max < x {\n                max\n\
    \            } else {\n                x - max\n            }\n        }\n   \
    \ } else {\n        (y, x) => {\n            let max = find_max(x, y)\n      \
    \      if max < y {\n                max\n            } else {\n             \
    \   y - max\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n\
    \  --> /tmp/tmpy5v5xn4x.rs:11:16\n   |\n11 |         (x, y) => {\n   |       \
    \         ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: expected\
    \ one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n  --> /tmp/tmpy5v5xn4x.rs:20:16\n\
    \   |\n20 |         (y, x) => {\n   |                ^^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        choose_num(y, x)\n    }\n\
    \    if x == y {\n        x\n    } else {\n        if x % 2 == 0 {\n         \
    \   if y % 2 == 0 {\n                x\n            } else {\n               \
    \ -1\n            }\n        } else {\n            if y % 2 == 0 {\n         \
    \       y\n            } else {\n                -1\n            }\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpai7g_3kn.rs:11:9\n   |\n\
    10 | /     if x > y {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n12 | |     }\n   | |_____- expected this to be\
    \ `()`\n   |\nhelp: consider using a semicolon here\n   |\n11 |         choose_num(y,\
    \ x);\n   |                         +\nhelp: consider using a semicolon here\n\
    \   |\n12 |     };\n   |      +\nhelp: you might have meant to return this value\n\
    \   |\n11 |         return choose_num(y, x);\n   |         ++++++            \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   y\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmptpoaqkd7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y < x {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x = x;\n    let mut y = y;\n    loop {\n        let mid = x as usize\
    \ / 2 as isize;\n        if y >= mid {\n            x -= mid as isize;\n     \
    \       return x;\n        }\n        y -= mid as isize;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpow9yxtj3.rs:16:32\n   |\n\
    16 |         let mid = x as usize / 2 as isize;\n   |                        \
    \        ^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot divide\
    \ `usize` by `isize`\n  --> /tmp/tmpow9yxtj3.rs:16:30\n   |\n16 |         let\
    \ mid = x as usize / 2 as isize;\n   |                              ^ no implementation\
    \ for `usize / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow9yxtj3.rs:17:17\n\
    \   |\n17 |         if y >= mid {\n   |                 ^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |         if y >= mid.try_into().unwrap()\
    \ {\n   |                    ++++++++++++++++++++\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    match y > x {\n        true => -1,\n      \
    \  false => match y / 2 {\n            1 => x,\n            y => y,\n        },\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmptg533lk3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let x = x as usize;\n    let y = y as usize;\n\
    \    if x < y {\n        let z = y - x;\n        x + (z as isize) / 2\n    } else\
    \ {\n        let z = x - y;\n        y + (z as isize) / 2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp3r7wb95.rs:14:13\n   |\n\
    14 |         x + (z as isize) / 2\n   |             ^^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp3r7wb95.rs:14:9\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                       ----- expected `isize` because of return type\n...\n14\
    \ |         x + (z as isize) / 2\n   |         ^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |         (x + (z as isize) / 2).try_into().unwrap()\n\
    \   |         +                    +++++++++++++++++++++\n\nerror[E0277]: cannot\
    \ add `isize` to `usize`\n  --> /tmp/tmpp3r7wb95.rs:14:11\n   |\n14 |        \
    \ x + (z as isize) / 2\n   |           ^ no implementation for `usize + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp3r7wb95.rs:17:13\n   |\n17 |         y + (z\
    \ as isize) / 2\n   |             ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp3r7wb95.rs:17:9\n   |\n9  | fn\
    \ choose_num(x: isize, y: isize) -> isize {\n   |                            \
    \          ----- expected `isize` because of return type\n...\n17 |         y\
    \ + (z as isize) / 2\n   |         ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |         (y + (z as isize) / 2).try_into().unwrap()\n\
    \   |         +                    +++++++++++++++++++++\n\nerror[E0277]: cannot\
    \ add `isize` to `usize`\n  -->"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        -1\n    } else {\n   \
    \     let mut m = *y;\n        if m % 2 == 1 {\n            if m < x {\n     \
    \           while m % 2 == 1 {\n                    m += 1;\n                }\n\
    \            }\n        } else {\n            while m % 2 == 0 {\n           \
    \     m += 1;\n            }\n        }\n        m\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpj3khac9_.rs:13:21\n\
    \   |\n13 |         let mut m = *y;\n   |                     ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    while y > x {\n        let mut mid = x.checked_add(y).unwrap();\n\
    \        if mid % 2 == 0 {\n            mid = mid.try_add(1, &mut x).unwrap();\n\
    \        } else if mid % 3 == 0 {\n            mid = mid.try_add(1, &mut x).unwrap();\n\
    \        } else if mid % 5 == 0 {\n            mid = mid.try_add(1, &mut x).unwrap();\n\
    \        }\n        x = mid;\n        y = x.checked_add(y).unwrap();\n    }\n\
    \    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `try_add` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1gyzjw5j.rs:13:23\n   |\n13 |             mid = mid.try_add(1,\
    \ &mut x).unwrap();\n   |                       ^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `try_add` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1gyzjw5j.rs:15:23\n   |\n15 |             mid = mid.try_add(1,\
    \ &mut x).unwrap();\n   |                       ^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `try_add` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1gyzjw5j.rs:17:23\n   |\n17 |             mid = mid.try_add(1,\
    \ &mut x).unwrap();\n   |                       ^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        return -1;\n    }\n  \
    \  for n in 1..(y + 1) {\n        if n % 2 == 0 {\n            return n;\n   \
    \     }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgumxmdrf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    use core::cmp::min;\n    if x > y {\n     \
    \   (x, y) = (y, x)\n    }\n    for n in 1..=y {\n        if n % 2 == 0 && n >\
    \ x {\n            return n;\n        }\n    }\n    return -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n  --> /tmp/tmp12e0yz2a.rs:10:9\n\
    \   |\n10 |     use core::cmp::min;\n   |         ^^^^ maybe a missing crate `core`?\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min_num = x as i64;\n    let mut max_num\
    \ = y as i64;\n    if max_num < min_num {\n        let temp = min_num;\n     \
    \   min_num = max_num;\n        max_num = temp;\n    }\n    while max_num - min_num\
    \ > 2 {\n        let mut mid = (min_num + max_num) / 2;\n        if mid % 2 ==\
    \ 0 {\n            min_num = mid;\n        } else {\n            max_num = mid;\n\
    \        }\n    }\n    while max_num > 0 {\n        if max_num % 2 == 0 {\n  \
    \          return max_num;\n        }\n        max_num -= 1;\n    }\n    -1\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr3fuf2xh.rs:27:20\n   |\n\
    27 |             return max_num;\n   |                    ^^^^^^^ expected `isize`,\
    \ found `i64`\n   |\nhelp: you can convert an `i64` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n27 |             return max_num.try_into().unwrap();\n\
    \   |                           ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    debug!(\"choose_num({}, {})\", x, y);\n   \
    \ if x < y {\n        std::mem::swap(&x, &y);\n    }\n    debug_assert!(x > 0);\n\
    \    debug_assert!(y > 0);\n\n    let mut result = -1;\n    if x > y {\n     \
    \   loop {\n            let a = x / 2;\n            if a > 0 {\n             \
    \   result = a;\n                x -= a;\n            } else {\n             \
    \   let b = x / 2;\n                if b > y {\n                    result = b;\n\
    \                    break;\n                } else {\n                    x =\
    \ b;\n                }\n            }\n        }\n    } else {\n        loop\
    \ {\n            let a = y / 2;\n            if a > 0 {\n                result\
    \ = a;\n                y -= a;\n            } else {\n                let b =\
    \ y / 2;\n                if b > x {\n                    result = b;\n      \
    \              break;\n                } else {\n                    y = b;\n\
    \                }\n            }\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `debug` in this scope\n  --> /tmp/tmpm60tr107.rs:10:5\n\
    \   |\n10 |     debug!(\"choose_num({}, {})\", x, y);\n   |     ^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm60tr107.rs:12:24\n   |\n12 |         std::mem::swap(&x,\
    \ &y);\n   |                        ^^ types differ in mutability\n   |\n   =\
    \ note: expected mutable reference `&mut _`\n                      found reference\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm60tr107.rs:12:28\n\
    \   |\n12 |         std::mem::swap(&x, &y);\n   |                            ^^\
    \ types differ in mutability\n   |\n   = note: expected mutable reference `&mut\
    \ _`\n                      found reference `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let x_mod = x % 2;\n        let y_mod = y % 2;\n        if x_mod\
    \ > y_mod {\n            choose_num(y, x)\n        } else {\n            choose_num(x,\
    \ y)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976106
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    while x <= y {\n        let num = if x % 2\
    \ == 0 { x } else { x - 1 };\n        if num >= y && num % 2 != 0 {\n        \
    \    return num;\n        }\n        x = x + 1;\n    }\n    return -1;\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpqb8uqn_t.rs:15:9\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n15 |         x = x\
    \ + 1;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        x\n    } else {\n    \
    \    let mut x: isize = x;\n        let mut y: isize = y;\n        loop {\n  \
    \          if x % 2 == 0 {\n                x /= 2;\n            } else {\n  \
    \              y /= 2;\n            }\n            if x >= y {\n             \
    \   break;\n            }\n        }\n        x\n    }\n}\n\nfn main() {\n   \
    \ let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmp_qmuzd1v.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    loop {\n        \n        if x >= y {\n   \
    \         \n            return -1;\n        }\n        \n        let mut i = x;\n\
    \        let mut j = y;\n        \n        while i >= j {\n            \n    \
    \        if i % 2 == 0 {\n                \n                j += 1;\n        \
    \    \n            } else {\n                \n                i -= 1;\n     \
    \       }\n        }\n        \n        if i < j {\n            \n           \
    \ return i;\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpf2kuy4kc.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    (x + ((y - 1) / 2)).try_clone().unwrap().unwrap_or(-1)\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `try_clone` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpkn6t3qyk.rs:10:25\n   |\n10 |     (x + ((y - 1)\
    \ / 2)).try_clone().unwrap().unwrap_or(-1)\n   |                         ^^^^^^^^^\
    \ help: there is an associated function with a similar name: `to_le`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    (0..y).find(|i| i % 2 == 0)\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp684gcwkg.rs:10:5\n   |\n\
    9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                      \
    \                ----- expected `isize` because of return type\n10 |     (0..y).find(|i|\
    \ i % 2 == 0)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = 0;\n        let mut y = 1;\n\n        while x <\
    \ y {\n            let z = (x / y) * y;\n            x /= y;\n            y =\
    \ z;\n        }\n\n        if x == y {\n            x\n        } else {\n    \
    \        -1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpu2a4zq0i.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min_i = if x < y {\n        x\n   \
    \ } else {\n        y\n    };\n    let mut max_i = if x < y {\n        y\n   \
    \ } else {\n        x\n    };\n    while min_i <= max_i {\n        let mut min_i\
    \ = if min_i < min_i + 2 {\n            min_i + 2\n        } else {\n        \
    \    min_i\n        };\n        let mut max_i = if min_i > max_i - 2 {\n     \
    \       max_i - 2\n        } else {\n            max_i\n        };\n        if\
    \ min_i <= max_i {\n            if max_i % 2 == 0 {\n                return max_i\n\
    \            }\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976106
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    for i in 1..y {\n\
    \        if result % 2 == 0 {\n            return result;\n        }\n       \
    \ result *= 2;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmps9a42lw0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .filter(|&x| x.is_even())\n    .max()\n\
    \    .unwrap_or(-1)\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpfad9ym9d.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // We are going to loop over all the numbers\
    \ from 1 to y inclusive\n    // and check if each number is even.\n    // If any\
    \ of those numbers doesn't satisfy the condition, then we return\n    // -1. \n\
    \    for num in 1..y {\n        if num % 2 == 0 {\n            return num;\n \
    \       }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `14`', /tmp/tmpbgf6r641.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else if x > y {\n        choose_num(x, y)\n    } else {\n        if x % 2 ==\
    \ 0 {\n            x\n        } else {\n            y\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976106
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    match (x, y) {\n        (i, _) => if i%2 ==\
    \ 0 { i } else { return -1 },\n        _ => -1,\n    }\n}\n\nfn main() {\n   \
    \ let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp6fud4gb7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut counter = 0;\n    let mut even = false;\n\
    \    let mut x: isize = x;\n    let mut y: isize = y;\n    let mut even_counter\
    \ = 0;\n    while even_counter < 2 || x > y {\n        if x == y {\n         \
    \   counter = counter + 1;\n        }\n        if even {\n            x /= 2;\n\
    \            even ^= true;\n        } else {\n            y *= 2;\n          \
    \  even ^= false;\n        }\n        even_counter = even_counter + 1;\n    }\n\
    \    counter\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmph2frt82i.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let max_num = if x%2 == 0 {\n        x\n  \
    \  } else {\n        y\n    };\n    if max_num > 50 {\n        max_num - 10\n\
    \    } else {\n        max_num + 10\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `22`,\n right: `14`', /tmp/tmp4y24d3ok.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y <= x {\n        return -1;\n    }\n  \
    \  let mut x = x;\n    let mut y = y;\n    let mut found = false;\n    while !found\
    \ && x % 2 == 0 && y % 2 == 0 {\n        x /= 2;\n        y /= 2;\n        if\
    \ x == y {\n            found = true;\n        }\n    }\n    if found {\n    \
    \    x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate =\
    \ choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpvmyf2az0.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= 0 || y <= 0 {\n        return -1;\n\
    \    }\n    let mut num: isize = 1;\n    for n in &(1..y) {\n        if n % 2\
    \ != 0 {\n            break;\n        }\n        num *= 2;\n    }\n    for n in\
    \ &(1..x).rev() {\n        if n % 2 == 0 {\n            break;\n        }\n  \
    \      num *= 2;\n    }\n    num\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&std::ops::Range<isize>` is not an iterator\n  --> /tmp/tmp5pylos1b.rs:14:14\n\
    \   |\n14 |     for n in &(1..y) {\n   |              -^^^^^^\n   |          \
    \    |\n   |              `&std::ops::Range<isize>` is not an iterator\n   | \
    \             help: consider removing the leading `&`-reference\n   |\n   = help:\
    \ the trait `Iterator` is not implemented for `&std::ops::Range<isize>`\n   =\
    \ note: `Iterator` is implemented for `&mut std::ops::Range<isize>`, but not for\
    \ `&std::ops::Range<isize>`\n   = note: required because of the requirements on\
    \ the impl of `IntoIterator` for `&std::ops::Range<isize>`\n\nerror[E0277]: `&Rev<std::ops::Range<isize>>`\
    \ is not an iterator\n  --> /tmp/tmp5pylos1b.rs:20:14\n   |\n20 |     for n in\
    \ &(1..x).rev() {\n   |              -^^^^^^^^^^^^\n   |              |\n   |\
    \              `&Rev<std::ops::Range<isize>>` is not an iterator\n   |       \
    \       help: consider removing the leading `&`-reference\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `&Rev<std::ops::Range<isize>>`\n   =\
    \ note: `Iterator` is implemented for `&mut std::iter::Rev<std::ops::Range<isize>>`,\
    \ but not for `&std::iter::Rev<std::ops::Range<isize>>`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `&Rev<std::ops::Range<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min_num = x;\n    let mut max_num =\
    \ y;\n\n    for num in min_num..=max_num {\n        if num % 2 == 0 {\n      \
    \      return num;\n        }\n\n        if num < min_num {\n            min_num\
    \ = num;\n        }\n        if num > max_num {\n            max_num = num;\n\
    \        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpa3tw9z16.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        -1\n    } else if x >\
    \ y {\n        x\n    } else {\n        y\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmp01wb_vcz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    for i in (x + 1)..(y + 1) {\n        if ((i\
    \ % 2) == 0 && i != y) {\n            return i;\n        }\n    }\n    -1\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `34`,\n right: `12354`', /tmp/tmpbxynj7xm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y - 1)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976106
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    match x.checked_sub(y) {\n        Some(y) =>\n\
    \            if y % 2 == 0 {\n                if y == 0 {\n                  \
    \  return -1;\n                }\n                y / 2\n            } else {\n\
    \                x / 2\n            },\n        _ => return -1,\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmppef64e8d.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < 0 || y < 0 {\n        return -1;\n \
    \   }\n\n    loop {\n        let a = x as isize;\n        let b = y as isize;\n\
    \n        let d = b - a;\n        if d < 0 {\n            a = a + 1;\n       \
    \     b = b - 1;\n        } else {\n            let mut x = a;\n            a\
    \ = b - 1;\n            b = x;\n        }\n\n        if a % 2 == 0 {\n       \
    \     return a;\n        }\n\n        // otherwise choose a\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `b` is never read\n  --> /tmp/tmpq519zmjc.rs:21:13\n\
    \   |\n21 |             b = b - 1;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `b` is never read\n  --> /tmp/tmpq519zmjc.rs:25:13\n   |\n\
    25 |             b = x;\n   |             ^\n   |\n   = help: maybe it is overwritten\
    \ before being read?\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpq519zmjc.rs:23:17\n\
    \   |\n23 |             let mut x = a;\n   |                 ----^\n   |     \
    \            |\n   |                 help: remove this `mut`\n   |\n   = note:\
    \ `#[warn(unused_mut)]` on by default\n\nerror[E0384]: cannot assign twice to\
    \ immutable variable `a`\n  --> /tmp/tmpq519zmjc.rs:20:13\n   |\n15 |        \
    \ let a = x as isize;\n   |             -\n   |             |\n   |          \
    \   first assignment to `a`\n   |             help: consider making this binding\
    \ mutable: `mut a`\n...\n20 |             a = a + 1;\n   |             ^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `b`\n  --> /tmp/tmpq519zmjc.rs:21:13\n   |\n16 |     \
    \    let b = y as isize;\n   |             -\n   |             |\n   |       \
    \      first assignment to `b`\n   |             help: consider making this binding\
    \ mutable: `mut b`\n...\n21 |             b = b - 1;\n   |             ^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `a`\n  --> /tmp/tmpq519zmjc.rs:24:13\n   |\n15 |     \
    \    let a = x as isize;\n   |             -\n   |             |\n   |       \
    \      first assignment to `a`\n   |             help: consider making this binding\
    \ mutable: `mut a`\n...\n24 |             a = b - 1;\n   |             ^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `b`\n  --> /tmp/tmpq519zmjc.rs:25:13\n   |\n16 |     \
    \    let b = y as isize;\n   |             -\n   |             |\n   |       \
    \      first assignment to `b`\n   |   "
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min_num: isize;\n    let mut max_num\
    \ = y;\n    \n    while max_num > x {\n        min_num = max_num;\n        max_num\
    \ += 1;\n    }\n    \n    if max_num == x {\n        max_num = max_num + 1; //\
    \ this makes a corner case where we have the same number in both ranges\n    }\n\
    \    \n    min_num\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `max_num` is never read\n  --> /tmp/tmpr6i1m_83.rs:19:9\n\
    \   |\n19 |         max_num = max_num + 1; // this makes a corner case where we\
    \ have the same number in both ranges\n   |         ^^^^^^^\n   |\n   = note:\
    \ `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0381]: use of possibly-uninitialized variable:\
    \ `min_num`\n  --> /tmp/tmpr6i1m_83.rs:22:5\n   |\n22 |     min_num\n   |    \
    \ ^^^^^^^ use of possibly-uninitialized `min_num`\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0381`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    let\
    \ mut max = x;\n    while x != y {\n        if max % 2 == 0 {\n            max\
    \ /= 2;\n        } else {\n            max = max - 1;\n        }\n        x /=\
    \ 2;\n        y /= 2;\n    }\n    max\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpsco0v3mj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x);\n    }\n\
    \    for i in (1..x).step_by(2) {\n        if ((i) as i32 % 2) == 0 {\n      \
    \      return i;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `y` is never read\n  --> /tmp/tmpom6_2koh.rs:11:13\n\
    \   |\n11 |         (x, y) = (y, x);\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `x`\n  --> /tmp/tmpom6_2koh.rs:11:10\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x);\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpom6_2koh.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x);\n   |             ^ cannot assign to\
    \ immutable argument\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut evens: Vec<isize> = vec![1, 2, 4, 8,\
    \ 16, 32, 64, 128];\n    evens = evens.iter().filter(|&x| x <= y).collect();\n\
    \    evens = evens.iter().filter(|&x| x > y).collect();\n    evens = evens.iter().filter(|&x|\
    \ x % 2 == 0).collect();\n    let mut even = evens.iter().max().unwrap();\n  \
    \  if even < x || even > y {\n        even = -1;\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn4umns0j.rs:11:43\n   |\n\
    11 |     evens = evens.iter().filter(|&x| x <= y).collect();\n   |           \
    \                                ^\n   |                                     \
    \      |\n   |                                           expected `&isize`, found\
    \ `isize`\n   |                                           help: consider borrowing\
    \ here: `&y`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpn4umns0j.rs:11:46\n\
    \     |\n11   |     evens = evens.iter().filter(|&x| x <= y).collect();\n    \
    \ |                                              ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn4umns0j.rs:12:42\n\
    \   |\n12 |     evens = evens.iter().filter(|&x| x > y).collect();\n   |     \
    \                                     ^\n   |                                \
    \          |\n   |                                          expected `&isize`,\
    \ found `isize`\n   |                                          help: consider\
    \ borrowing here: `&y`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpn4umns0j.rs:12:45\n\
    \     |\n12   |     evens = evens.iter().filter(|&x| x > y).collect();\n     |\
    \                                             ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpn4umns0j.rs:13:50\n\
    \     |\n13   |     evens = ev"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        choose_num(y, x)\n   \
    \ }\n    if x == y {\n        x\n    } else {\n        (x * y + x) / (y * y)\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphh4kv5_2.rs:11:9\n   |\n\
    10 | /     if x <= y {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n12 | |     }\n   | |_____- expected this to be\
    \ `()`\n   |\nhelp: consider using a semicolon here\n   |\n11 |         choose_num(y,\
    \ x);\n   |                         +\nhelp: consider using a semicolon here\n\
    \   |\n12 |     };\n   |      +\nhelp: you might have meant to return this value\n\
    \   |\n11 |         return choose_num(y, x);\n   |         ++++++            \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        return -1;\n    }\n  \
    \  let mut result = x;\n    while result == result + 1 { result += 2; }\n    if\
    \ result == y {\n        return result;\n    }\n    while result > y {\n     \
    \   result -= 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpx9wohcwu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    while y > x {\n        let (max, index) = (y,\
    \ x); // find larger number\n        if max % 2 == 0 {\n            x = index;\
    \ // remember index\n        } else {\n            y = index; // remember index\n\
    \        }\n    }\n\n    y as isize\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpdugvoj__.rs:13:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n13 |             x\
    \ = index; // remember index\n   |             ^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpdugvoj__.rs:15:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n...\n15 |  \
    \           y = index; // remember index\n   |             ^^^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    assert!((x < y) && (y < 1000));\n    loop {\n\
    \        let mut num_x = x;\n        let mut num_y = y;\n        match num_x %\
    \ num_y {\n            0 => return num_y,\n            _ => num_x -= num_y,\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976106
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max = x;\n    if y > max {\n      \
    \  max = y;\n    }\n\n    // Loop over the numbers from x to y until a number\
    \ is found.\n    for i in 0..max {\n        if isEven(i) {\n            max =\
    \ i;\n        }\n    }\n\n    // Return the number if it is evenly divisible by\
    \ 2.\n    if isEven(max) {\n        max\n    } else {\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isEven` in this scope\n  --> /tmp/tmp0fgzl8fi.rs:17:12\n\
    \   |\n17 |         if isEven(i) {\n   |            ^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `isEven` in this scope\n  --> /tmp/tmp0fgzl8fi.rs:23:8\n\
    \   |\n23 |     if isEven(max) {\n   |        ^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        -1\n    } else {\n   \
    \     let mut res = x;\n        let mut i = y;\n        while i != res {\n   \
    \         if res * res == i {\n                return res;\n            }\n  \
    \          res -= i;\n            i += i;\n        }\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmphvybkpke.rs:16:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976101
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num = x;\n    let mut i = 0;\n    while\
    \ num < y {\n        if num % 2 == 0 {\n            num += 1;\n        } else\
    \ {\n            num -= 1;\n        }\n        i += 1;\n    }\n    if i == 0 {\n\
    \        -1\n    } else {\n        num\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976106
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut n = x;\n    while n < y {\n       \
    \ let mut d = 1;\n        while d < n {\n            if n%d == 0 {\n         \
    \       n = n + d;\n            } else {\n                d = d + 1;\n       \
    \     }\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976106
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    (x + y).checked_div_by(2).unwrap_or(-1)\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_div_by` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmprnbt60ra.rs:10:13\n   |\n10 |     (x + y).checked_div_by(2).unwrap_or(-1)\n\
    \   |             ^^^^^^^^^^^^^^ help: there is an associated function with a\
    \ similar name: `checked_div`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        let x = x;\n        let\
    \ y = y;\n        let (low, high) = if x + y > 0 {\n            (y, x)\n     \
    \   } else {\n            (1, y)\n        };\n\n        // If y >= high - low,\
    \ then we get exactly x because high - low is \n        // less than or equal\
    \ to y. \n        if x >= (high - low) {\n            return x;\n        }\n\n\
    \        // If x <= high - low, then we get exactly y because high - low is \n\
    \        // less than or equal to y. \n        if x <= (high - low) {\n      \
    \      return y;\n        }\n\n        // We know that x <= high - low and y <=\
    \ high - low, so we can find \n        // the middle point.\n        if high -\
    \ low == 2 {\n            if x + y == 0 {\n                return -1;\n      \
    \      }\n            return (x + y / 2);\n        }\n\n        if x + y == 0\
    \ {\n            return -1;\n        }\n        if x <= high - low * 2 && y <=\
    \ high - low * 2 {\n            return (x + y / 2);\n        }\n\n        // We\
    \ know that y <= high - low, so we can find x by finding \n        // the two\
    \ middle points.\n        \n        // The code below is just a straightforward\
    \ implementation of the \n        // method presented in the paper \n        //\
    \ \"A Fast Algorithm for Finding the Longest Common Subsequence \n        // Using\
    \ the Floyd-Warshall Algorithm\"\n        // by Jonathan Kehayias. \n        let\
    \ mut mx: f32 = 1.0;\n        let mut mx_idx: i32 = 0;\n\n        // find mx first\n\
    \        for i in 0..(high - low) {\n            if i == low {\n             \
    \   mx = (x + y + 1);\n                mx_idx = 0;\n            } else {\n   \
    \             let x_ij: f32 = (((high - low) * x) + i) / high;\n             \
    \   let y_ij: f32 = (((high - low) * y) + i) / high;\n                mx = std::cmp::max(mx,\
    \ x_ij);\n                mx = std::cmp::max(mx, y_ij);\n                mx_idx\
    \ += 1;\n            }\n        }\n        \n        // Then find the two middle\
    \ points for x and y.\n        for i in 0..(high - low) {\n            let x_idx\
    \ = if i == low {\n                mx_idx\n            } else {\n            \
    \    mx_idx - i;\n            };\n\n            let y_idx = if i == low {\n  \
    \              mx_idx - 1\n            } else {\n                mx_idx + i;\n\
    \            };\n\n            mx_idx = x_idx;\n            mx = std::cmp::max(mx,\
    \ (x + y + 1));\n            mx_idx = y_idx;\n            mx = std::cmp::max(mx,\
    \ (x + y + 1));\n        }\n\n        if m\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp0wjsx1q8.rs:105:3\n\
    \    |\n9   | fn choose_num(x: isize, y: isize) -> isize {\n    |            \
    \                                - unclosed delimiter\n10  |     if x < y {\n\
    \    |              - this delimiter might not be properly closed...\n...\n93\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    105 | }\n    |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp0wjsx1q8.rs:93:1\n\
    \   |\n92 |         if m\n   |         -- this `if` expression has a condition,\
    \ but no block\n93 | }\n   | ^ expected `{`\n\nwarning: unnecessary parentheses\
    \ around `return` value\n  --> /tmp/tmp0wjsx1q8.rs:37:20\n   |\n37 |         \
    \    return (x + y / 2);\n   |                    ^         ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    37 -             return (x + y / 2);\n37 +             return x + y / 2;\n   |\
    \ \n\nwarning: unnecessary parentheses around `return` value\n  --> /tmp/tmp0wjsx1q8.rs:44:20\n\
    \   |\n44 |             return (x + y / 2);\n   |                    ^       \
    \  ^\n   |\nhelp: remove these parentheses\n   |\n44 -             return (x +\
    \ y / 2);\n44 +             return x + y / 2;\n   | \n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmp0wjsx1q8.rs:61:22\n   |\n61 |         \
    \        mx = (x + y + 1);\n   |                      ^         ^\n   |\nhelp:\
    \ remove these parentheses\n   |\n61 -                 mx = (x + y + 1);\n61 +\
    \                 mx = x + y + 1;\n   | \n\nwarning: unnecessary parentheses around\
    \ function argument\n  --> /tmp/tmp0wjsx1q8.rs:87:36\n   |\n87 |             mx\
    \ = std::cmp::max(mx, (x + y + 1));\n   |                                    ^\
    \         ^\n   |\nhelp: remove these parentheses\n   |\n87 -             mx =\
    \ std::cmp::max(mx, (x + y + 1));\n87 +             mx = std::cmp::max(mx, x +\
    \ y + 1);\n   | \n\nwarning: unnecessary parentheses around function argument\n\
    \  --> /tmp/tmp0wjsx1q8.rs:89:36\n   |\n89 |             mx = std::cmp::max(mx,\
    \ (x + y + 1));\n   |                                    ^         ^\n   |"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x >= y {\n        return -1;\n    }\n  \
    \  for num in 0..(x+y) {\n        if num % 2 == 0 {\n            return num;\n\
    \        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpw9omk1vt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        choose_num_small(x, y)\n\
    \    } else {\n        choose_num_large(x, y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `choose_num_small` in this scope\n \
    \ --> /tmp/tmpim32s_s8.rs:11:9\n   |\n11 |         choose_num_small(x, y)\n  \
    \ |         ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `choose_num_large` in this scope\n  --> /tmp/tmpim32s_s8.rs:13:9\n\
    \   |\n13 |         choose_num_large(x, y)\n   |         ^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmhhtmovz.rs:11:9\n   |\n\
    9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                      \
    \                ----- expected `isize` because of return type\n10 |     if x\
    \ > y {\n11 |         (x, y)\n   |         ^^^^^^ expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(isize, isize)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmhhtmovz.rs:13:9\n   |\n9  | fn\
    \ choose_num(x: isize, y: isize) -> isize {\n   |                            \
    \          ----- expected `isize` because of return type\n...\n13 |         (y,\
    \ x)\n   |         ^^^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ type `isize`\n             found tuple `(isize, isize)`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    match (x % 2, y % 2) {\n        (false, false)\
    \ => return -1,\n        (true, false) => return x,\n        (false, true) =>\
    \ return y,\n        (_, true) => return -1,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt9qporw7.rs:11:10\n   |\n\
    10 |     match (x % 2, y % 2) {\n   |           -------------- this expression\
    \ has type `(isize, isize)`\n11 |         (false, false) => return -1,\n   | \
    \         ^^^^^ expected `isize`, found `bool`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt9qporw7.rs:11:17\n   |\n10 |     match (x % 2, y % 2) {\n   |\
    \           -------------- this expression has type `(isize, isize)`\n11 |   \
    \      (false, false) => return -1,\n   |                 ^^^^^ expected `isize`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9qporw7.rs:12:10\n\
    \   |\n10 |     match (x % 2, y % 2) {\n   |           -------------- this expression\
    \ has type `(isize, isize)`\n11 |         (false, false) => return -1,\n12 | \
    \        (true, false) => return x,\n   |          ^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9qporw7.rs:12:16\n\
    \   |\n10 |     match (x % 2, y % 2) {\n   |           -------------- this expression\
    \ has type `(isize, isize)`\n11 |         (false, false) => return -1,\n12 | \
    \        (true, false) => return x,\n   |                ^^^^^ expected `isize`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9qporw7.rs:13:10\n\
    \   |\n10 |     match (x % 2, y % 2) {\n   |           -------------- this expression\
    \ has type `(isize, isize)`\n...\n13 |         (false, true) => return y,\n  \
    \ |          ^^^^^ expected `isize`, found `bool`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt9qporw7.rs:13:17\n   |\n10 |     match (x % 2, y % 2)\
    \ {\n   |           -------------- this expression has type `(isize, isize)`\n\
    ...\n13 |         (false, true) => return y,\n   |                 ^^^^ expected\
    \ `isize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9qporw7.rs:14:13\n\
    \   |\n10 |     match (x % 2, y % 2) {\n   |           -------------- this expression\
    \ has type `(isize, isize)`\n...\n14 |         (_, true) => return -1,\n   | \
    \            ^^^^ expected `isize`, found `bool`\n\nerror: aborting due to 7 previous\
    \ errors\n\nFor more information about this error, tr"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    use std::cmp::Ordering;\n    if x > y {\n \
    \       (x, y)\n    } else {\n        (y, x)\n    }\n        .iter()\n       \
    \ .cloned()\n        .fold(\n            || if x <= 1 { -1 } else { 0 },\n   \
    \         |a, b| {\n                if a > b {\n                    a\n      \
    \          } else {\n                    b\n                }\n            }\n\
    \        )\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpy2r161h3.rs:10:9\n\
    \   |\n10 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method\
    \ named `iter` found for tuple `(isize, isize)` in the current scope\n  --> /tmp/tmpy2r161h3.rs:16:10\n\
    \   |\n16 |         .iter()\n   |          ^^^^ method not found in `(isize, isize)`\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    (x / 2 % 2, y / 2 % 2).max(|a, b| a.cmp(b).unwrap())\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmplpau98y2.rs:10:33\n\
    \   |\n10 |     (x / 2 % 2, y / 2 % 2).max(|a, b| a.cmp(b).unwrap())\n   |   \
    \                              ^ consider giving this closure parameter a type\n\
    \   |\n   = note: type must be known at this point\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplpau98y2.rs:10:5\n   |\n9  | fn choose_num(x: isize, y:\
    \ isize) -> isize {\n   |                                      ----- expected\
    \ `isize` because of return type\n10 |     (x / 2 % 2, y / 2 % 2).max(|a, b| a.cmp(b).unwrap())\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(isize, isize)`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0282, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut even = 0;\n    let mut biggest = y;\n\
    \    for num in 1..(y+1) {\n        if x % num == 0 {\n            even += 1;\n\
    \            if even > biggest {\n                biggest = even;\n          \
    \  }\n        }\n    }\n    biggest\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpqwv67jzd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_num: isize = x;\n    let mut min_num\
    \ = y;\n    loop {\n        if max_num < min_num {\n            return -1;\n \
    \       }\n        if max_num % 2 == 0 {\n            max_num -= 2;\n        }\
    \ else {\n            max_num -= 1;\n        }\n        min_num -= 2;\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkdf9705_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut biggest = if y < x {\n        x\n \
    \   } else {\n        y\n    };\n    \n    for i in 1..biggest {\n        if x\
    \ % i == 0 && y % i == 0 {\n            biggest = i;\n            break;\n   \
    \     }\n    }\n    \n    biggest\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpwewhn2gx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    (*x)/2 + if x < y { x - y } else { y - x }\
    \ + 1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp7drxiowi.rs:10:5\n\
    \   |\n10 |     (*x)/2 + if x < y { x - y } else { y - x } + 1\n   |     ^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else if y == x {\n        x\n    } else {\n        x + 1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpahhubrvl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    loop {\n        let x_int = x as i32;\n   \
    \     let y_int = y as i32;\n        if x_int >= y_int {\n            return x_int;\n\
    \        }\n        else {\n            return y_int;\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgw8ptcto.rs:14:20\n   |\n\
    14 |             return x_int;\n   |                    ^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n14 |             return x_int.try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else {\n        if y % 2 == 0 {\n            x\n        } else {\n         \
    \   -1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpo5l9p7tl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    assert!(x <= y, \"x must be less than or equal\
    \ to y\");\n    let mut min_num = x;\n    let mut max_num = y;\n    while max_num\
    \ >= min_num {\n        let mut current_num = min_num;\n        let mut flag =\
    \ true;\n        while flag {\n            if current_num & 1 == 0 {\n       \
    \         return -1;\n            }\n            current_num = current_num >>\
    \ 1;\n            flag = false;\n        }\n        min_num = current_num;\n \
    \       max_num = max_num - 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpldf2mets.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        return -1;\n    }\n  \
    \  if x > y {\n        (x, y) = (y, x);\n    }\n    for z in 0..y {\n        if\
    \ x * z + 2 % y == x {\n            return x;\n        }\n    }\n    return -1;\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmph7v2ch61.rs:14:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n14 |         (x, y)\
    \ = (y, x);\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n  --> /tmp/tmph7v2ch61.rs:14:13\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                \
    \         - help: consider making this binding mutable: `mut y`\n...\n14 |   \
    \      (x, y) = (y, x);\n   |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    if\
    \ x < y {\n        (x, y) = (y, x);\n    }\n    let mut z = 1;\n    while y <\
    \ z {\n        z = z * 2;\n    }\n    while x < z {\n        x = x * 2;\n    }\n\
    \    while y > z {\n        y = y - z\n    }\n    x\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmp1r9440ei.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    if\
    \ x < y {\n        (x, y) = (y, x);\n    };\n    \n    if y % 2 == 0 {\n     \
    \   return y;\n    };\n\n    let mut z = x;\n    z -= 1;\n    while z < y {\n\
    \        z += y;\n    }\n\n    return z;\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp0dyfaxus.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    // We want x and y to be positive number\n\
    \    if x < y {\n        (x, y) = (y, x);\n    }\n    let mut max_even = x;\n\
    \    let mut max_odd = y;\n    while max_even % 2 == 0 {\n        max_even /=\
    \ 2;\n    }\n    while max_odd % 2 == 0 {\n        max_odd /= 2;\n    }\n    if\
    \ max_even < max_odd {\n        max_odd += 1;\n    }\n    -1\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `max_odd` is never read\n  --> /tmp/tmp5sz4nh9x.rs:23:9\n\
    \   |\n23 |         max_odd += 1;\n   |         ^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `x`\n  --> /tmp/tmp5sz4nh9x.rs:12:10\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n...\n12 |         (x, y)\
    \ = (y, x);\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n  --> /tmp/tmp5sz4nh9x.rs:12:13\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                \
    \         - help: consider making this binding mutable: `mut y`\n...\n12 |   \
    \      (x, y) = (y, x);\n   |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        choose_num(y, x)\n    }\
    \ else if x <= 0 {\n        -1\n    } else {\n        let mut x = 0\n        let\
    \ mut y = 0\n        let mut x_min = x as isize;\n        let mut x_max = x as\
    \ isize;\n        let mut y_min = y as isize;\n        let mut y_max = y as isize;\n\
    \        loop {\n            if x_min >= y_min {\n                x += 1;\n  \
    \              continue // next x or next y\n            }\n            if x_max\
    \ <= y_max {\n                y += 1;\n                continue // next x or next\
    \ y\n            }\n            if x <= y_min {\n                x -= 1;\n   \
    \             continue // next x or next y\n            }\n            if x >=\
    \ y_max {\n                y -= 1;\n                continue // next x or next\
    \ y\n            }\n            if x == y {\n                return x;\n     \
    \       }\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8ma0nffq.rs:15:22\n\
    \   |\n15 |         let mut x = 0\n   |                      ^ help: add `;` here\n\
    16 |         let mut y = 0\n   |         --- unexpected token\n\nerror: expected\
    \ `;`, found keyword `let`\n  --> /tmp/tmp8ma0nffq.rs:16:22\n   |\n16 |      \
    \   let mut y = 0\n   |                      ^ help: add `;` here\n17 |      \
    \   let mut x_min = x as isize;\n   |         --- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8ma0nffq.rs:11:9\n   |\n10 | /     if y > x\
    \ {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^ expected\
    \ `()`, found `isize`\n12 | |     } else if x <= 0 {\n13 | |         -1\n... \
    \ |\n41 | |         }\n42 | |     }\n   | |_____- expected this to be `()`\n \
    \  |\nhelp: consider using a semicolon here\n   |\n11 |         choose_num(y,\
    \ x);\n   |                         +\nhelp: consider using a semicolon here\n\
    \   |\n42 |     };\n   |      +\nhelp: you might have meant to return this value\n\
    \   |\n11 |         return choose_num(y, x);\n   |         ++++++            \
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ma0nffq.rs:13:9\n  \
    \ |\n12 |       } else if x <= 0 {\n   |  ____________-\n13 | |         -1\n \
    \  | |         ^^ expected `()`, found integer\n14 | |     } else {\n15 | |  \
    \       let mut x = 0\n...  |\n41 | |         }\n42 | |     }\n   | |_____- expected\
    \ this to be `()`\n   |\nhelp: you might have meant to return this value\n   |\n\
    13 |         return -1;\n   |         ++++++   +\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = (x as isize) >> 1;\n   \
    \ let mut y: isize = (y as isize) >> 1;\n\n    while x > y && x % 2 == 0 {\n \
    \       x /= 2;\n    }\n\n    while y > x && y % 2 == 0 {\n        y /= 2;\n \
    \   }\n\n    if x > y {\n        x\n    } else {\n        y\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `14`', /tmp/tmp9nm9p3hp.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y > x {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .take_while(|&x| x < y)\n    .next()\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpypmanx4n.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut min = x;\n    let mut max = y;\n  \
    \  if min < max {\n        while min < max && min % 2 == 0 {\n            min\
    \ += 1;\n        }\n        while max > min && max % 2 == 0 {\n            max\
    \ -= 1;\n        }\n        if min >= max {\n            return -1;\n        }\n\
    \    }\n    min\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `14`', /tmp/tmpr0p8dero.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y < x {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut min_x = x;\n        let mut max_x = x; \n        let\
    \ mut min_y = y;\n        let mut max_y = y; \n        loop {\n            if\
    \ min_y > max_y { \n                max_y = max_x; \n                min_y = min_x;\
    \ \n            } else if min_x == max_x { \n                return min_x; \n\
    \            } else {\n                if min_x == max_y { \n                \
    \    min_x++; \n                    if min_x == max_x { \n                   \
    \     return min_x; \n                    }\n                } else {\n      \
    \              let mut temp = min_x;\n                    min_x = min_y; \n  \
    \                  min_y = temp; \n                }\n            }\n        }\n\
    \    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpal3arc7h.rs:25:26\n\
    \   |\n25 |                     min_x++; \n   |                          ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n25 |       \
    \              { let tmp = min_x; min_x += 1; tmp }; \n   |                  \
    \   +++++++++++      ~~~~~~~~~~~~~~~~~~~\n25 -                     min_x++; \n\
    25 +                     min_x += 1; \n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpal3arc7h.rs:11:9\n   |\n10 | /     if y < x {\n11 | |         choose_num(y,\
    \ x)\n   | |         ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n12 | |   \
    \  } else {\n13 | |         let mut min_x = x;\n...  |\n35 | |         }\n36 |\
    \ |     }\n   | |_____- expected this to be `()`\n   |\nhelp: consider using a\
    \ semicolon here\n   |\n11 |         choose_num(y, x);\n   |                 \
    \        +\nhelp: consider using a semicolon here\n   |\n36 |     };\n   |   \
    \   +\nhelp: you might have meant to return this value\n   |\n11 |         return\
    \ choose_num(y, x);\n   |         ++++++                 +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x == y {\n        return -1\n    }\n   \
    \ \n    let mid = if x < y { x + y } else {y - x};\n\n    if mid < 2 {\n     \
    \   return mid\n    }\n\n    let mut min = 0;\n    let mut max = mid;\n\n    while\
    \ min < max {\n        if min % 2 == 0 {\n            if max % 2 == 0 {\n    \
    \            // even\n                min = min + 1;\n                max = max\
    \ - 1;\n            } else {\n                // odd\n                min = min\
    \ + 1;\n                max = max - 1;\n            }\n        } else if max %\
    \ 2 == 0 {\n            // odd\n            min = min + 1;\n            max =\
    \ max - 1;\n        } else {\n            // even\n            min = min + 1;\n\
    \            max = max - 1;\n        }\n    }\n\n    min\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6194`,\n right: `12354`', /tmp/tmpqimj539u.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if y <= x {\n        -1\n    } else {\n   \
    \     if ((y as f64).is_integer()) {\n            if ((x as f64).is_integer())\
    \ {\n                ((x as f64) as isize)\n            } else {\n           \
    \     if ((y as f64).is_positive()) {\n                    ((x as f64).ceil()\
    \ as isize)\n                } else {\n                    ((x as f64).floor()\
    \ as isize)\n                }\n            }\n        } else {\n            if\
    \ ((y as f64).is_positive()) {\n                ((y as f64).floor() as isize)\n\
    \            } else {\n                ((y as f64).ceil() as isize)\n        \
    \    }\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphdq_1u01.rs:13:12\n\
    \   |\n13 |         if ((y as f64).is_integer()) {\n   |            ^        \
    \               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n13 -         if ((y as f64).is_integer()) {\n\
    13 +         if (y as f64).is_integer() {\n   | \n\nwarning: unnecessary parentheses\
    \ around `if` condition\n  --> /tmp/tmphdq_1u01.rs:14:16\n   |\n14 |         \
    \    if ((x as f64).is_integer()) {\n   |                ^                   \
    \    ^\n   |\nhelp: remove these parentheses\n   |\n14 -             if ((x as\
    \ f64).is_integer()) {\n14 +             if (x as f64).is_integer() {\n   | \n\
    \nwarning: unnecessary parentheses around block return value\n  --> /tmp/tmphdq_1u01.rs:15:17\n\
    \   |\n15 |                 ((x as f64) as isize)\n   |                 ^    \
    \               ^\n   |\nhelp: remove these parentheses\n   |\n15 -          \
    \       ((x as f64) as isize)\n15 +                 (x as f64) as isize\n   |\
    \ \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphdq_1u01.rs:17:20\n\
    \   |\n17 |                 if ((y as f64).is_positive()) {\n   |            \
    \        ^                        ^\n   |\nhelp: remove these parentheses\n  \
    \ |\n17 -                 if ((y as f64).is_positive()) {\n17 +              \
    \   if (y as f64).is_positive() {\n   | \n\nwarning: unnecessary parentheses around\
    \ block return value\n  --> /tmp/tmphdq_1u01.rs:18:21\n   |\n18 |            \
    \         ((x as f64).ceil() as isize)\n   |                     ^           \
    \               ^\n   |\nhelp: remove these parentheses\n   |\n18 -          \
    \           ((x as f64).ceil() as isize)\n18 +                     (x as f64).ceil()\
    \ as isize\n   | \n\nwarning: unnecessary parentheses around block return value\n\
    \  --> /tmp/tmphdq_1u01.rs:20:21\n   |\n20 |                     ((x as f64).floor()\
    \ as isize)\n   |                     ^                           ^\n   |\nhelp:\
    \ remove these parentheses\n   |\n20 -                     ((x as f64).floor()\
    \ as isize)\n20 +                     (x as f64)."
  stdout: ''
  timestamp: 1659976102
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else if y < x {\n        choose_num(x, y)\n    } else {\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976107
