language: rs
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut iter = numbers.iter();\n    let mut i = 0;\n    while\
    \ i < numbers.len() {\n        if iter[i] == *iter[i as usize] {\n           \
    \ i += 1;\n        } else {\n            iter.swap(i, 0);\n            i += 1;\n\
    \        }\n    }\n    iter\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `std::slice::Iter<'_, isize>`\n\
    \ --> /tmp/tmp0w9qpxlr.rs:9:12\n  |\n9 |         if iter[i] == *iter[i as usize]\
    \ {\n  |            ^^^^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `std::slice::Iter<'_, isize>`\n --> /tmp/tmp0w9qpxlr.rs:9:24\n  |\n9 |     \
    \    if iter[i] == *iter[i as usize] {\n  |                        ^^^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `swap` found for struct `std::slice::Iter` in\
    \ the current scope\n  --> /tmp/tmp0w9qpxlr.rs:12:18\n   |\n12 |             iter.swap(i,\
    \ 0);\n   |                  ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0w9qpxlr.rs:16:5\n   |\n5  | fn\
    \ remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                               ---------- expected `Vec<isize>` because of return\
    \ type\n...\n16 |     iter\n   |     ^^^^ expected struct `Vec`, found struct\
    \ `std::slice::Iter`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `std::slice::Iter<'_, isize>`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut hash_set = HashSet::<isize>::new();\n    numbers.dedup();\n\
    \    let mut vec: Vec<isize> = Vec::new();\n    for x in numbers {\n        if\
    \ !hash_set.add(x) {\n            vec.push(x);\n        }\n    }\n    vec\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpc9zkne0g.rs:6:24\n  |\n6 |     let mut hash_set = HashSet::<isize>::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup_by(|a, b| a == b as isize)\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&mut isize` with `isize`\n --> /tmp/tmplgzu9ziv.rs:6:31\n\
    \  |\n6 |     numbers.dedup_by(|a, b| a == b as isize)\n  |                  \
    \             ^^ no implementation for `&mut isize == isize`\n  |\n  = help: the\
    \ trait `PartialEq<isize>` is not implemented for `&mut isize`\n  = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n            f32\n \
    \           f64\n            i128\n            i16\n            i32\n        \
    \    i64\n            i8\n            isize\n          and 6 others\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmplgzu9ziv.rs:6:5\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                           \
    \   ---------- expected `Vec<isize>` because of return type\n6 |     numbers.dedup_by(|a,\
    \ b| a == b as isize)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n    \
    \      found unit type `()`\nnote: method `dedup_by` modifies its receiver in-place\n\
    \ --> /tmp/tmplgzu9ziv.rs:6:13\n  |\n6 |     numbers.dedup_by(|a, b| a == b as\
    \ isize)\n  |     ------- ^^^^^^^^ this call modifies `numbers` in-place\n  |\
    \     |\n  |     you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `dedup_by`\n\nerror[E0606]:\
    \ casting `&mut isize` as `isize` is invalid\n --> /tmp/tmplgzu9ziv.rs:6:34\n\
    \  |\n6 |     numbers.dedup_by(|a, b| a == b as isize)\n  |                  \
    \                -^^^^^^^^^\n  |                                  |\n  |     \
    \                             cannot cast `&mut isize` as `isize`\n  |       \
    \                           help: dereference the expression: `*b`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \n    for num in numbers {\n        if !seen.contains(num) {\n            result.push(num);\n\
    \            seen.insert(num);\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnau8j3h4.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup_by(|a, b| a == b)\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8oastt_5.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup_by(|a, b| a == b)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\nnote: method `dedup_by` modifies its receiver\
    \ in-place\n --> /tmp/tmp8oastt_5.rs:6:13\n  |\n6 |     numbers.dedup_by(|a, b|\
    \ a == b)\n  |     ------- ^^^^^^^^ this call modifies `numbers` in-place\n  |\
    \     |\n  |     you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `dedup_by`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    seen =\
    \ seen.into_iter().collect();\n\n    let mut numbers = numbers\n        .into_iter()\n\
    \        .filter(|&x| {\n            if seen.insert(x).is_none() {\n         \
    \       false\n            } else {\n                true\n            }\n   \
    \     })\n        .collect();\n    numbers.sort_unstable();\n    numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp742isg_1.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp742isg_1.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter()\n        .cloned()\n        .fold(vec![], |mut\
    \ vec: Vec<isize>, number| {\n            if !vec.contains(number) {\n       \
    \         vec.push(number);\n            }\n            vec\n        })\n    \
    \    .clone()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0lpagify.rs:9:30\n  |\n9 |\
    \             if !vec.contains(number) {\n  |                              ^^^^^^\n\
    \  |                              |\n  |                              expected\
    \ `&isize`, found `isize`\n  |                              help: consider borrowing\
    \ here: `&number`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = numbers.clone();\n    loop {\n        let\
    \ idx = result.iter().position(|&x| x == result.iter().next().unwrap()).unwrap();\n\
    \        result.remove(idx);\n        if result.is_empty() {\n            break;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnv9p02dh.rs:8:52\n  |\n8 |\
    \         let idx = result.iter().position(|&x| x == result.iter().next().unwrap()).unwrap();\n\
    \  |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n\
    \  |\n8 |         let idx = result.iter().position(|&x| x == *result.iter().next().unwrap()).unwrap();\n\
    \  |                                                    +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n    }\n\n\
    \    let mut seen: HashSet<isize> = HashSet::new();\n    let mut newvec = Vec::new();\n\
    \    for n in numbers {\n        if !seen.insert(n).unwrap() {\n            newvec.push(n);\n\
    \        }\n    }\n    return newvec;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp08l423oq.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp08l423oq.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut numbers_copy = numbers.clone();\n\n    numbers_copy.sort_unstable();\n\
    \    let mut first_occurrence = numbers_copy[0];\n    let mut last_occurrence\
    \ = numbers_copy[0];\n\n    for number in numbers_copy.iter().take_while(|&x|\
    \ x != first_occurrence) {\n        if number == last_occurrence {\n         \
    \   first_occurrence = number;\n        }\n        last_occurrence = number;\n\
    \    }\n\n    numbers_copy.remove(&first_occurrence);\n    numbers_copy\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpxmup5h38.rs:16:57\n\
    \   |\n16 |     for number in numbers_copy.iter().take_while(|&x| x != first_occurrence)\
    \ {\n   |                                                         ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxmup5h38.rs:18:32\n   |\n13 |     let mut first_occurrence = numbers_copy[0];\n\
    \   |                                --------------- expected due to this value\n\
    ...\n18 |             first_occurrence = number;\n   |                       \
    \         ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n18 |             first_occurrence = *number;\n   |       \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxmup5h38.rs:20:27\n\
    \   |\n14 |     let mut last_occurrence = numbers_copy[0];\n   |             \
    \                  --------------- expected due to this value\n...\n20 |     \
    \    last_occurrence = number;\n   |                           ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    20 |         last_occurrence = *number;\n   |                           +\n\n\
    error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpxmup5h38.rs:17:19\n\
    \   |\n17 |         if number == last_occurrence {\n   |                   ^^\
    \ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxmup5h38.rs:23:"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut to_remove = Vec::new();\n    for n in numbers {\n\
    \        if to_remove.contains(&n) {\n            continue;\n        }\n     \
    \   to_remove.push(n);\n    }\n    let mut result = Vec::new();\n    for i in\
    \ numbers {\n        if !to_remove.contains(&i) {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp_2ovebof.rs:14:14\n\
    \    |\n5   | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    |\
    \                      ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n6   |     let mut to_remove = Vec::new();\n\
    7   |     for n in numbers {\n    |              ------- `numbers` moved due to\
    \ this implicit call to `.into_iter()`\n...\n14  |     for i in numbers {\n  \
    \  |              ^^^^^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `numbers`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for n in &numbers {\n    |              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup();\n  \
    \  let mut result: Vec<isize> = vec![];\n    for num in numbers {\n        if\
    \ seen.insert(num).is_some() {\n            result.push(num);\n        }\n   \
    \ }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp6rtj3l35.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp6rtj3l35.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n\n    for\
    \ n in numbers {\n        if seen.insert(n).is_none() {\n            continue;\n\
    \        }\n\n        numbers.remove(n);\n    }\n\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpg2rbtui8.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpg2rbtui8.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg2rbtui8.rs:13:24\n   |\n13 |         numbers.remove(n);\n\
    \   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |         numbers.remove(n.try_into().unwrap());\n   |       \
    \                  ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp0rer3ag_.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_set = HashSet::new();\n    for n in numbers\
    \ {\n        if !unique_set.insert(n).inserted {\n            continue;\n    \
    \    }\n        numbers.remove(&n);\n    }\n    numbers\n}\n\nfn main() {\n  \
    \  let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp053m5z7_.rs:6:26\n  |\n6 |     let mut unique_set = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp053m5z7_.rs:11:24\n   |\n11 |         numbers.remove(&n);\n\
    \   |                        ^^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut result: Vec<isize> = vec![];\n\n    for &n in numbers {\n       \
    \ if result.iter().all(|&x| x == n) {\n            continue;\n        }\n\n  \
    \      vec!result.push(n);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `result`\n  --> /tmp/tmpnin5jis9.rs:17:13\n\
    \   |\n17 |         vec!result.push(n);\n   |             ^^^^^^ expected one\
    \ of `(`, `[`, or `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnin5jis9.rs:12:9\n\
    \   |\n12 |     for &n in numbers {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `n`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n    let\
    \ mut seen = HashSet::new();\n    for n in numbers.iter() {\n        if seen.insert(n).is_some()\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpuuvmb1zy.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuuvmb1zy.rs:13:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n13 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().cloned().filter(|&x| numbers.iter().any(|y|\
    \ x == y)).cloned().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy_7x_vc7.rs:6:69\n  |\n6 |\
    \     numbers.iter().cloned().filter(|&x| numbers.iter().any(|y| x == y)).cloned().collect()\n\
    \  |                                                                     ^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     numbers.iter().cloned().filter(|&x| numbers.iter().any(|y| x == *y)).cloned().collect()\n\
    \  |                                                                     +\n\n\
    error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item\
    \ == &&_`\n --> /tmp/tmpy_7x_vc7.rs:6:73\n  |\n6 |     numbers.iter().cloned().filter(|&x|\
    \ numbers.iter().any(|y| x == y)).cloned().collect()\n  |                    \
    \                                                     ^^^^^^ expected reference,\
    \ found `isize`\n  |\n  = note: expected reference `&&_`\n             found reference\
    \ `&isize`\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\n  = note: 1 redundant requirement\
    \ hidden\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpy_7x_vc7.rs:6:36:\
    \ 6:71]>`\n\nerror[E0631]: type mismatch in closure arguments\n --> /tmp/tmpy_7x_vc7.rs:6:73\n\
    \  |\n6 |     numbers.iter().cloned().filter(|&x| numbers.iter().any(|y| x ==\
    \ y)).cloned().collect()\n  |                                    -----------------------------------\
    \  ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n  |               \
    \                     |\n  |                                    found signature\
    \ of `for<'r> fn(&'r isize) -> _`\n  |\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpy_7x_vc7.rs:6:36:\
    \ 6:71]>`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpy_7x_vc7.rs:6:36: 6:71]>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpy_7x_vc7.rs"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    seen.reserve(numbers.len());\n\
    \    for n in numbers {\n        if !seen.insert(n).is_some() {\n            seen.insert(n);\n\
    \        }\n    }\n    numbers.iter().filter(|&n| !seen.contains(&n)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpjjblmz28.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpjjblmz28.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]: a\
    \ value of type `Vec<isize>` cannot be built from an iterator over elements of\
    \ type `&isize`\n    --> /tmp/tmpjjblmz28.rs:13:52\n     |\n13   |     numbers.iter().filter(|&n|\
    \ !seen.contains(&n)).collect()\n     |                                      \
    \              ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter()\n        .cloned()\n        .enumerate()\n\
    \        .filter_map(|(index, num)| {\n            if index == 0 {\n         \
    \       Some(num)\n            } else {\n                if *num == numbers[index\
    \ - 1] {\n                    None\n                } else {\n               \
    \     Some(num)\n                }\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpxqsbjhrn.rs:13:20\n\
    \   |\n13 |                 if *num == numbers[index - 1] {\n   |            \
    \        ^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    numbers.iter().for_each(|number|\n\
    \        if numbers_set.insert(number).is_some() {\n            numbers_set.remove(number);\n\
    \        }\n    );\n    numbers_set.into_iter().map(|number| number).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpoh3vnrnu.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwvdledwx.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup()\n  |     ^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmpwvdledwx.rs:6:13\n\
    \  |\n6 |     numbers.dedup()\n  |     ------- ^^^^^ this call modifies `numbers`\
    \ in-place\n  |     |\n  |     you probably want to use this value after calling\
    \ the method...\n  = note: ...instead of the `()` output of method `dedup`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup_by().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpjnno24n_.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpjnno24n_.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpjnno24n_.rs:7:13\n\
    \     |\n7    |     numbers.dedup_by().collect::<Vec<_>>()\n     |           \
    \  ^^^^^^^^- supplied 0 arguments\n     |             |\n     |             expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0599]:\
    \ `()` is not an iterator\n --> /tmp/tmpjnno24n_.rs:7:24\n  |\n7 |     numbers.dedup_by().collect::<Vec<_>>()\n\
    \  |                        ^^^^^^^ `()` is not an iterator\n  |\n  = note: the\
    \ following trait bounds were not satisfied:\n          `(): Iterator`\n     \
    \     which is required by `&mut (): Iterator`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0412, E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut uniques: Vec<usize>\
    \ = vec![];\n\n    for (i, n) in numbers.into_iter().enumerate() {\n        if\
    \ uniques.iter().find(|x| *x == n).is_some() {\n            continue;\n      \
    \  }\n\n        uniques.push(*n);\n        result.push(*n);\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12qcznf9.rs:10:42\n   |\n\
    10 |         if uniques.iter().find(|x| *x == n).is_some() {\n   |           \
    \                               ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ can't compare `&usize` with `isize`\n  --> /tmp/tmp12qcznf9.rs:10:39\n   |\n\
    10 |         if uniques.iter().find(|x| *x == n).is_some() {\n   |           \
    \                            ^^ no implementation for `&usize == isize`\n   |\n\
    \   = help: the trait `PartialEq<isize>` is not implemented for `&usize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp12qcznf9.rs:14:22\n\
    \   |\n14 |         uniques.push(*n);\n   |                      ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp12qcznf9.rs:15:21\n   |\n\
    15 |         result.push(*n);\n   |                     ^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashMap<isize, bool> = HashMap::new();\n   \
    \ numbers.sort_unstable();\n    for number in numbers {\n        if seen.contains_key(&number)\
    \ {\n            numbers.remove(number);\n        } else {\n            seen.insert(number,\
    \ true);\n        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp_yb3hxi7.rs:6:19\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_yb3hxi7.rs:6:42\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_yb3hxi7.rs:10:28\n   |\n10 |\
    \             numbers.remove(number);\n   |                            ^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |           \
    \  numbers.remove(number.try_into().unwrap());\n   |                         \
    \         ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().filter_map(|&num| {\n        if numbers.iter().any(|&x|\
    \ x == num) {\n            return None;\n        } else {\n            num\n \
    \       }\n    }).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplqsfvlgo.rs:10:13\n   |\n\
    10 |             num\n   |             ^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<_>`\n              found type `isize`\n\
    help: try wrapping the expression in `Some`\n   |\n10 |             Some(num)\n\
    \   |             +++++   +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_seen = HashSet::new();\n    numbers.dedup();\n\
    \    numbers_seen.insert(numbers.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>());\n\
    \    let numbers_seen = numbers_seen.values();\n    numbers\n        .iter()\n\
    \        .filter(|number| !numbers_seen.contains(&number))\n        .cloned()\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgpyc5zfl.rs:6:28\n  |\n6 |     let mut numbers_seen = HashSet::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    for number\
    \ in numbers {\n        if seen.insert(number).is_none() {\n            numbers.remove(number);\n\
    \        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpbmmij4py.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpbmmij4py.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpbmmij4py.rs:9:28\n  |\n9 |             numbers.remove(number);\n\
    \  |                            ^^^^^^ expected `usize`, found `isize`\n  |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n  |\n9 |             numbers.remove(number.try_into().unwrap());\n\
    \  |                                  ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0412,\
    \ E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n\n    for i in numbers.iter() {\n\
    \        if result.iter().find(|&x| x == i).is_none() {\n            result.push(i);\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmphc8fkvyt.rs:9:38\n\
    \  |\n9 |         if result.iter().find(|&x| x == i).is_none() {\n  |        \
    \                              ^^ no implementation for `&isize == isize`\n  |\n\
    \  = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n  = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n            f32\n\
    \            f64\n            i128\n            i16\n            i32\n       \
    \     i64\n            i8\n            isize\n          and 6 others\n  = note:\
    \ required because of the requirements on the impl of `PartialEq<&isize>` for\
    \ `&&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc8fkvyt.rs:14:5\n\
    \   |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |  \
    \                                            ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.iter().cloned().collect();\n   \
    \ numbers.dedup();\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpnsjv0six.rs:7:5\n \
    \ |\n6 |     let mut numbers = numbers.iter().cloned().collect();\n  |       \
    \  ----------- consider giving `numbers` a type\n7 |     numbers.dedup();\n  |\
    \     ^^^^^^^ cannot infer type\n  |\n  = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut hashmap: HashMap<isize, isize> = HashMap::new();\n\
    \    for n in numbers {\n        if !hashmap.contains_key(n) {\n            hashmap.insert(n,\
    \ n);\n        } else {\n            *hashmap.get_mut(n) = *hashmap.get_mut(n)\
    \ + 1;\n        }\n    }\n    hashmap.values()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp24koabha.rs:6:22\n\
    \  |\n6 |     let mut hashmap: HashMap<isize, isize> = HashMap::new();\n  |  \
    \                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp24koabha.rs:6:46\n\
    \  |\n6 |     let mut hashmap: HashMap<isize, isize> = HashMap::new();\n  |  \
    \                                            ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    let mut last = Vec::<isize>::new();\n\
    \    let mut first = true;\n    for &number in &numbers {\n        if first {\n\
    \            first = false;\n            last.push(number);\n        } else {\n\
    \            if *number == *last.last() {\n                last.pop();\n     \
    \           last.push(number);\n            } else {\n                res.push(number);\n\
    \                last.push(number);\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp2j0y4hme.rs:14:16\n\
    \   |\n14 |             if *number == *last.last() {\n   |                ^^^^^^^\n\
    \nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmp2j0y4hme.rs:14:27\n\
    \   |\n14 |             if *number == *last.last() {\n   |                   \
    \        ^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    for (index, value) in numbers.iter().enumerate()\
    \ {\n        if set.insert(value).is_ok() {\n            numbers.remove(index);\n\
    \        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpj7rvjlsu.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for i in numbers {\n        if seen.insert(i).is_some() {\n            res.push(i);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp2c61cn1n.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for n in numbers {\n        if !seen.insert(n).unwrap() {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpolwvh2af.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    numbers.iter().for_each(|x|\
    \ numbers_set.insert(x));\n\n    numbers.iter().map(|x| x).filter(|x| numbers_set.contains(&x)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpe4xuxahq.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpe4xuxahq.rs:9:68\n     |\n9    |     numbers.iter().map(|x|\
    \ x).filter(|x| numbers_set.contains(&x)).collect()\n     |                  \
    \                                                  ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    numbers.sort();\n\
    \    let mut index = 0;\n    let mut result = vec![];\n    let mut seen = vec![];\n\
    \    for number in numbers {\n        if seen.contains(&number) {\n          \
    \  continue;\n        }\n        seen.push(number);\n        result.push(number);\n\
    \        if index == numbers.len() - 1 {\n            break;\n        }\n    \
    \    index = index + 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmptrgv0j5n.rs:17:21\n\
    \    |\n6   |     let mut numbers = numbers.to_vec();\n    |         -----------\
    \ move occurs because `numbers` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n11  |     for number in numbers {\n    |            \
    \       ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n17  |         if index == numbers.len() - 1 {\n    |                    \
    \ ^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `numbers`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n11  |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        if !set.insert(number) {\n            result.push(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnxfzpwlr.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n    }\n\
    \    let mut counts = Vec::new();\n    for i in numbers.iter() {\n        counts.push(i);\n\
    \    }\n    numbers.iter().filter_map(|&n| *n as isize).filter(|n| counts[n] >\
    \ 1)\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp0bf45plo.rs:13:36\n\
    \   |\n13 |     numbers.iter().filter_map(|&n| *n as isize).filter(|n| counts[n]\
    \ > 1)\n   |                                    ^^\n\nerror[E0277]: the type `[&isize]`\
    \ cannot be indexed by `&_`\n  --> /tmp/tmp0bf45plo.rs:13:60\n   |\n13 |     numbers.iter().filter_map(|&n|\
    \ *n as isize).filter(|n| counts[n] > 1)\n   |                               \
    \                             ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[&isize]>` is not implemented\
    \ for `&_`\n   = note: required because of the requirements on the impl of `Index<&_>`\
    \ for `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0bf45plo.rs:13:5\n\
    \   |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |  \
    \                                            ---------- expected `Vec<isize>`\
    \ because of return type\n...\n13 |     numbers.iter().filter_map(|&n| *n as isize).filter(|n|\
    \ counts[n] > 1)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Filter`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Filter<FilterMap<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmp0bf45plo.rs:13:31: 13:47]>, [closure@/tmp/tmp0bf45plo.rs:13:56:\
    \ 13:73]>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().filter(|&n| !numbers.contains(&n)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpmi2ki4ci.rs:6:55\n     |\n6\
    \    |     numbers.iter().filter(|&n| !numbers.contains(&n)).collect()\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers\n\
    \        .into_iter()\n        .filter(|number| seen.insert(number).is_ok())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpfe5qyvha.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpfe5qyvha.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = Vec::new();\n\n    for &n in numbers {\n   \
    \     if out.contains(&n) {\n            continue;\n        }\n\n        out.push(n);\n\
    \    }\n\n    out\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdvu9q24q.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    numbers.dedup();\n    set.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpxyuy6sx_.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen_set = HashSet::new();\n    for n in numbers {\n\
    \        if !seen_set.insert(n).is_inserted {\n            numbers.remove(n);\n\
    \        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpz23gblqv.rs:6:24\n  |\n6 |     let mut seen_set = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz23gblqv.rs:9:28\n  |\n9 |             numbers.remove(n);\n\
    \  |                            ^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |             numbers.remove(n.try_into().unwrap());\n  |      \
    \                       ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for number in numbers {\n        if seen.insert(number).is_none() {\n   \
    \         result.push(number);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmppph9ys8l.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .dedup()\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpt6g7qsr5.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().filter_map(|i| if *i != *numbers.iter().any(|j|\
    \ *j == i {\n        *j\n    }) {\n        Some(*i)\n    } else {\n        None\n\
    \    })\n    .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `*`\n --> /tmp/tmpb8kxdjb3.rs:7:9\n \
    \ |\n6 |     numbers.iter().filter_map(|i| if *i != *numbers.iter().any(|j| *j\
    \ == i {\n  |                                                                \
    \          - while parsing this struct\n7 |         *j\n  |         ^ expected\
    \ identifier\n\nerror[E0574]: expected struct, variant or union type, found local\
    \ variable `i`\n --> /tmp/tmpb8kxdjb3.rs:6:74\n  |\n6 |     numbers.iter().filter_map(|i|\
    \ if *i != *numbers.iter().any(|j| *j == i {\n  |                            \
    \                                              ^ not a struct, variant or union\
    \ type\n\nerror[E0614]: type `bool` cannot be dereferenced\n --> /tmp/tmpb8kxdjb3.rs:6:44\n\
    \  |\n6 |       numbers.iter().filter_map(|i| if *i != *numbers.iter().any(|j|\
    \ *j == i {\n  |  ____________________________________________^\n7 | |       \
    \  *j\n8 | |     }) {\n  | |______^\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0574, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0574`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .dedup()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpvocltovk.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().cloned().dedup().collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmppgu_31on.rs:6:29\n  |\n6 |     numbers.iter().cloned().dedup().collect()\n\
    \  |                             ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // Sort the numbers in descending order and find the duplicates\n\
    \    let mut numbers: Vec<isize> = numbers.iter().cloned().collect();\n    numbers.sort_unstable();\n\
    \    let mut duplicates: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while\
    \ i != numbers.len() {\n        if numbers.contains(&numbers[i]) {\n         \
    \   duplicates.push(numbers[i]);\n        }\n        i += 1;\n    }\n    numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2, 3, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpciuhabq6.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n\n    for number in\
    \ numbers {\n        if numbers_set.insert(number).is_some() {\n            numbers_set.insert(number);\n\
    \        } else {\n            numbers_set.insert(number);\n        }\n    }\n\
    \n    numbers_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpd88f3i_x.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // Use a set and let it handle the duplicate elements.\n \
    \   let mut seen: HashSet<_> = HashSet::new();\n    for &n in numbers {\n    \
    \    if seen.insert(n).is_some() {\n            continue;\n        }\n       \
    \ seen.remove(n);\n        numbers.remove(n);\n    }\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpa7jqlpf9.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpa7jqlpf9.rs:7:32\n  |\n7 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa7jqlpf9.rs:8:9\n  |\n8 |     for &n in numbers {\n  |         ^^\
    \    ------- this expression has type `Option<isize>`\n  |         |\n  |    \
    \     expected `isize`, found reference\n  |         help: you can probably remove\
    \ the explicit borrow: `n`\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    for n in numbers\
    \ {\n        if !numbers_set.insert(n).is_ok() {\n            numbers_set.insert(0);\n\
    \        }\n    }\n    numbers.iter().filter_map(|x| {\n        if numbers.contains(&x)\
    \ {\n            Some(x)\n        } else {\n            None\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpddklpciw.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpddklpciw.rs:18:8\n     |\n18   |     }).collect()\n\
    \     |        ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut uniques = Vec::new();\n    uniques.reserve(numbers.len());\n\
    \    for &n in numbers {\n        if !uniques.contains(&n) {\n            uniques.push(n);\n\
    \        }\n    }\n    uniques\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc2ehy72p.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut new_numbers = Vec::new();\n    let mut current_number = numbers[0];\n\
    \    for n in numbers {\n        if n == current_number {\n            continue;\n\
    \        }\n\n        if new_numbers.len() > 0 {\n            new_numbers.insert(new_numbers.len()\
    \ - 1, n);\n        } else {\n            new_numbers.push(n);\n        }\n  \
    \  }\n\n    return new_numbers;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 2]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpp1piit9w.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<_> = Vec::new();\n    let mut seen: HashSet<_>\
    \ = HashSet::new();\n    for i in numbers {\n        if seen.insert(i).is_none()\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp_1v01080.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp_1v01080.rs:7:32\n  |\n7 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashMap<isize, isize> = HashMap::new();\n  \
    \  for num in numbers {\n        if seen.contains_key(&num) {\n            continue;\n\
    \        }\n\n        seen.insert(num, num);\n    }\n\n    let mut output: Vec<isize>\
    \ = Vec::new();\n    for num in seen.keys() {\n        output.push(num);\n   \
    \ }\n\n    output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp05ayvcai.rs:6:19\n\
    \  |\n6 |     let mut seen: HashMap<isize, isize> = HashMap::new();\n  |     \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp05ayvcai.rs:6:43\n\
    \  |\n6 |     let mut seen: HashMap<isize, isize> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    numbers.dedup();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpg2ylow2_.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut hashmap: HashMap<isize, isize> = HashMap::new();\n\
    \    for number in numbers {\n        hashmap.entry(number).or_insert(0);\n  \
    \  }\n    let mut unique = Vec::new();\n    for (_, number) in hashmap {\n   \
    \     unique.push(number);\n    }\n    unique\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpmbyq65_b.rs:6:22\n\
    \  |\n6 |     let mut hashmap: HashMap<isize, isize> = HashMap::new();\n  |  \
    \                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpmbyq65_b.rs:6:46\n\
    \  |\n6 |     let mut hashmap: HashMap<isize, isize> = HashMap::new();\n  |  \
    \                                            ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().filter(|&x| numbers.iter().filter(|&y| x ==\
    \ y).count() == 1).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp1rdlkx6k.rs:6:81\n     |\n6\
    \    |     numbers.iter().filter(|&x| numbers.iter().filter(|&y| x == y).count()\
    \ == 1).collect()\n     |                                                    \
    \                             ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .filter(|&n| numbers.iter().any(|&m|\
    \ m == n))\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpc4q_m9wm.rs:8:17\n\
    \    |\n5   | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    |\
    \                      ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n6   |     numbers\n7   |        \
    \ .into_iter()\n    |          ----------- `numbers` moved due to this method\
    \ call\n8   |         .filter(|&n| numbers.iter().any(|&m| m == n))\n    |   \
    \              ^^^^ ------- borrow occurs due to use in closure\n    |       \
    \          |\n    |                 value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = vec![];\n\n    for number in numbers.iter()\
    \ {\n        if new_numbers.iter().filter(|&n| n == number).count() == 0 {\n \
    \           new_numbers.push(number);\n        }\n    }\n\n    new_numbers\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmpcq1u42pj.rs:9:45\n\
    \  |\n9 |         if new_numbers.iter().filter(|&n| n == number).count() == 0\
    \ {\n  |                                             ^^ no implementation for\
    \ `&isize == isize`\n  |\n  = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n  = note: required because of the requirements on the impl of `PartialEq<&isize>`\
    \ for `&&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq1u42pj.rs:14:5\n\
    \   |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |  \
    \                                            ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     new_numbers\n   |     ^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.clone();\n    let mut unique: Vec<isize>\
    \ = Vec::new();\n    loop {\n        let mut i = 0;\n        for number in numbers\
    \ {\n            if unique.contains(&number) {\n                i += 1;\n    \
    \        }\n            unique.push(number);\n            if i == numbers.len()\
    \ {\n                break;\n            }\n        }\n        numbers = numbers.iter().filter(|&number|\
    \ !unique.contains(&number)).collect();\n    }\n    numbers\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unreachable expression\n  --> /tmp/tmpslhcttel.rs:21:5\n   |\n\
    8  | /     loop {\n9  | |         let mut i = 0;\n10 | |         for number in\
    \ numbers {\n11 | |             if unique.contains(&number) {\n...  |\n19 | |\
    \         numbers = numbers.iter().filter(|&number| !unique.contains(&number)).collect();\n\
    20 | |     }\n   | |_____- any code following this expression is unreachable\n\
    21 |       numbers\n   |       ^^^^^^^ unreachable expression\n   |\n   = note:\
    \ `#[warn(unreachable_code)]` on by default\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpslhcttel.rs:19:78\n\
    \     |\n19   |         numbers = numbers.iter().filter(|&number| !unique.contains(&number)).collect();\n\
    \     |                                                                      \
    \        ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // Create a set from the vector\n    let mut seen = HashSet::new();\n\
    \n    // Iterate over the input and remove all numbers that appear more than once\n\
    \    for i in numbers.iter() {\n        if seen.contains(&i) {\n            numbers.remove(i);\n\
    \        }\n        else {\n            seen.insert(i);\n        }\n    }\n\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmph160tlkw.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph160tlkw.rs:12:28\n   |\n12 |             numbers.remove(i);\n\
    \   |                            ^ expected `usize`, found `&isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .clone()\n        .group_by(|&n|\
    \ n)\n        .into_iter()\n        .filter_map(|(_, group)| group.count().unwrap_or(0))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `group_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpl3mcyy4b.rs:9:10\n  |\n9 |         .group_by(|&n|\
    \ n)\n  |          ^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut uniques: Vec<isize> = vec![];\n    let mut iter = numbers.iter();\n\
    \    let mut cur = iter.next();\n    while !cur.is_done() {\n        if uniques.contains(&cur)\
    \ {\n            iter = iter.next();\n            continue;\n        }\n\n   \
    \     uniques.push(cur);\n        cur = iter.next();\n    }\n\n    uniques\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_done` found for enum `Option` in the\
    \ current scope\n  --> /tmp/tmps4ig1n1c.rs:13:16\n   |\n13 |     while !cur.is_done()\
    \ {\n   |                ^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_none`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps4ig1n1c.rs:14:29\n\
    \   |\n14 |         if uniques.contains(&cur) {\n   |                        \
    \     ^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected reference\
    \ `&isize`\n              found reference `&Option<&isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps4ig1n1c.rs:15:20\n   |\n11 |     let mut iter = numbers.iter();\n\
    \   |                    -------------- expected due to this value\n...\n15 |\
    \             iter = iter.next();\n   |                    ^^^^^^^^^^^ expected\
    \ struct `std::slice::Iter`, found enum `Option`\n   |\n   = note: expected struct\
    \ `std::slice::Iter<'_, isize>`\n                found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps4ig1n1c.rs:19:22\n   |\n19 |\
    \         uniques.push(cur);\n   |                      ^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = numbers;\n    std::mem::swap(out, numbers.iter().cloned().filter(|&n|\
    \ {\n        !out.contains(&n)\n    }).cloned().collect());\n    out\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp22bno98v.rs:7:20\n  |\n7 |\
    \     std::mem::swap(out, numbers.iter().cloned().filter(|&n| {\n  |         \
    \           ^^^\n  |                    |\n  |                    expected `&mut\
    \ _`, found struct `Vec`\n  |                    help: consider mutably borrowing\
    \ here: `&mut out`\n  |\n  = note: expected mutable reference `&mut _`\n     \
    \                   found struct `Vec<isize>`\n\nerror[E0271]: type mismatch resolving\
    \ `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n --> /tmp/tmp22bno98v.rs:9:8\n\
    \  |\n9 |     }).cloned().collect());\n  |        ^^^^^^ expected reference, found\
    \ `isize`\n  |\n  = note: expected reference `&&_`\n             found reference\
    \ `&isize`\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\n  = note: 1 redundant requirement\
    \ hidden\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp22bno98v.rs:7:56:\
    \ 9:6]>`\n\nerror[E0631]: type mismatch in closure arguments\n --> /tmp/tmp22bno98v.rs:9:8\n\
    \  |\n7 |     std::mem::swap(out, numbers.iter().cloned().filter(|&n| {\n  | \
    \                                                       ---- found signature of\
    \ `for<'r> fn(&'r isize) -> _`\n8 |         !out.contains(&n)\n9 |     }).cloned().collect());\n\
    \  |        ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp22bno98v.rs:7:56: 9:6]>`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmp22bno98v.rs:7:56: 9:6]>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmp22bno98v.rs:9:17\n   |\n9  |        }).cloned().collect());\n \
    \  |                    ^^^^^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp22bno98v.rs:7:56: 9:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: "
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \n    numbers.dedup();\n\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp9rs1kpw0.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut\
    \ ret: Vec<isize> = Vec::new();\n    for n in numbers.iter() {\n        if !seen.insert(n).unwrap()\
    \ {\n            ret.push(n);\n        }\n    }\n    ret\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp9dz4eqh1.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp9dz4eqh1.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9dz4eqh1.rs:10:22\n   |\n10 |             ret.push(n);\n\
    \   |                      ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n10 |             ret.push(*n);\n   |       \
    \               +\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0412, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    for num in numbers {\n \
    \       if !unique.contains(&num) {\n            unique.push(num);\n        }\n\
    \    }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppazkbgm6.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers.iter()\
    \ {\n        if !result.contains(&n) {\n            result.push(n);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo5rvlcr8.rs:12:5\n   |\n\
    5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                     ---------- expected `Vec<isize>` because\
    \ of return type\n...\n12 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter()\n        .cloned()\n        .dedup()\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpfvnexu7b.rs:8:10\n  |\n8 |         .dedup()\n  |\
    \          ^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut uniques = Vec::new();\n    for n in numbers {\n  \
    \      if !uniques.contains(&n) {\n            uniques.push(n);\n        }\n \
    \   }\n    uniques\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1j77jgbw.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976045
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut counts: HashMap<isize,\
    \ usize> = HashMap::new();\n    for number in numbers {\n        if counts.contains_key(&number)\
    \ {\n            continue;\n        }\n        counts.insert(number, 1);\n   \
    \     result.push(number);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp72c9am6e.rs:7:21\n\
    \  |\n7 |     let mut counts: HashMap<isize, usize> = HashMap::new();\n  |   \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp72c9am6e.rs:7:45\n\
    \  |\n7 |     let mut counts: HashMap<isize, usize> = HashMap::new();\n  |   \
    \                                          ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.clone();\n    let mut seen = HashSet::new();\n\
    \    for n in numbers.iter() {\n        if seen.insert(n).is_err() {\n       \
    \     numbers.remove(n);\n        }\n    }\n    numbers\n}\n\nfn main() {\n  \
    \  let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmparkp153b.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmparkp153b.rs:10:28\n   |\n10 |             numbers.remove(n);\n\
    \   |                            ^ expected `usize`, found `&isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut seen\
    \ = HashSet::new();\n    for number in numbers {\n        if seen.insert(number).is_some()\
    \ {\n            output.push(number);\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp8j7k_egv.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut hash: HashSet<isize>\
    \ = HashSet::new();\n    for number in numbers {\n        if !hash.insert(number).unwrap_or(false)\
    \ {\n            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpewbrrmfs.rs:7:19\n\
    \  |\n7 |     let mut hash: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpewbrrmfs.rs:7:36\n  |\n7 |  \
    \   let mut hash: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .group_by(|&i| i)\n\
    \        .map(|(index, group)| group.iter().take(index).collect())\n        .flatten()\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `group_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpd27mh9cr.rs:8:10\n  |\n8 |         .group_by(|&i|\
    \ i)\n  |          ^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut current = vec![];\n    for n in numbers {\n      \
    \  if !current.contains(&n) {\n            current.push(n.clone());\n        }\n\
    \    }\n    current\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgsysnmgk.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.clone();\n    numbers.dedup();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2t6xiage.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = BTreeMap::new();\n    let mut ret = Vec::new();\n\
    \    for number in numbers {\n        if !seen.contains_key(&number) {\n     \
    \       ret.push(number);\n            seen.insert(number);\n        }\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeMap`\n -->\
    \ /tmp/tmp0vz_xyv3.rs:6:20\n  |\n6 |     let mut seen = BTreeMap::new();\n  |\
    \                    ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut current_number = numbers[0];\n    let mut result = vec![];\n\n  \
    \  for (number, other) in numbers.iter().cloned().zip(numbers.iter().cloned())\
    \ {\n        if number == current_number {\n            continue;\n        }\n\
    \        if number > current_number {\n            result.push(current_number);\n\
    \            current_number = number;\n        } else {\n            result.push(other);\n\
    \        }\n    }\n    result.push(current_number);\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2, 3, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpf80lsdb1.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = vec![];\n    let mut seen = vec![];\n    for\
    \ n in numbers {\n        if !seen.contains(&n) {\n            seen.push(&n);\n\
    \            out.push(n);\n        }\n    }\n    out\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy5b05mj2.rs:10:23\n   |\n\
    10 |             seen.push(&n);\n   |                       ^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider removing the borrow\n   |\n10 -       \
    \      seen.push(&n);\n10 +             seen.push(n);\n   | \n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    for &number in\
    \ &numbers {\n        if ret.iter().all(|x| x == number) {\n            ret.remove(number);\n\
    \        }\n        else {\n            ret.push(number);\n        }\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmpk9u7v_74.rs:8:33\n\
    \  |\n8 |         if ret.iter().all(|x| x == number) {\n  |                  \
    \               ^^ no implementation for `&isize == isize`\n  |\n  = help: the\
    \ trait `PartialEq<isize>` is not implemented for `&isize`\n  = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n            f32\n           \
    \ f64\n            i128\n            i16\n            i32\n            i64\n \
    \           i8\n            isize\n          and 6 others\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk9u7v_74.rs:9:24\n  |\n9 |             ret.remove(number);\n\
    \  |                        ^^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |             ret.remove(number.try_into().unwrap());\n  |     \
    \                         ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .group_by(|n| n)\n\
    \        .filter_map(|(k, v)| v.into_iter().filter_map(|v| Some(v)).count().max(1).unwrap_or(0))\n\
    \        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `group_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp885wq6bo.rs:8:10\n  |\n8 |         .group_by(|n|\
    \ n)\n  |          ^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&n|\
    \ numbers.iter().any(|&x| x == n))\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp69y5wjz_.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut first = numbers.next();\n    let mut last: usize = numbers.last().unwrap();\n\
    \    let mut duplicates = 0;\n    while numbers.any() {\n        if numbers.any(|&n|\
    \ n == last.clone()) {\n            duplicates += 1;\n        } else {\n     \
    \       numbers.push(first);\n        }\n        first = numbers.next();\n   \
    \     last = numbers.last();\n    }\n    numbers.drain(..).cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpavk9w6ds.rs:6:43\n     |\n6    |     let mut numbers\
    \ = numbers.into_iter().cloned().collect::<Vec<_>>();\n     |                \
    \                           ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpavk9w6ds.rs:6:52\n   |\n6  |       let mut numbers\
    \ = numbers.into_iter().cloned().collect::<Vec<_>>();\n   |                  \
    \                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut current_number = numbers.clone();\n    let mut to_remove\
    \ = Vec::new();\n    for num in current_number {\n        if to_remove.contains(num)\
    \ {\n            continue;\n        }\n        to_remove.push(num);\n    }\n \
    \   current_number.retain(|x| !to_remove.contains(x));\n    current_number\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5kwx3891.rs:9:31\n  |\n9 |\
    \         if to_remove.contains(num) {\n  |                               ^^^\n\
    \  |                               |\n  |                               expected\
    \ reference, found `isize`\n  |                               help: consider borrowing\
    \ here: `&num`\n  |\n  = note: expected reference `&_`\n                  found\
    \ type `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&n|\
    \ !numbers.iter().any(|&x| *x == n))\n        .collect()\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpmmd9qit0.rs:9:47\n\
    \  |\n9 |         .filter(|&n| !numbers.iter().any(|&x| *x == n))\n  |       \
    \                                        ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp0rer3ag_.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers;\n    numbers.sort_unstable();\n\
    \    let mut last = numbers[0];\n    while let Some(next) = numbers.iter().skip(numbers.iter().position(|x|\
    \ x == last)).next() {\n        last = next;\n    }\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmp7g_ugz16.rs:9:78\n\
    \  |\n9 |     while let Some(next) = numbers.iter().skip(numbers.iter().position(|x|\
    \ x == last)).next() {\n  |                                                  \
    \                            ^^ no implementation for `&isize == isize`\n  |\n\
    \  = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n  = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n            f32\n\
    \            f64\n            i128\n            i16\n            i32\n       \
    \     i64\n            i8\n            isize\n          and 6 others\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp7g_ugz16.rs:9:48\n  |\n9 |     while let Some(next)\
    \ = numbers.iter().skip(numbers.iter().position(|x| x == last)).next() {\n  |\
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found enum `Option`\n  |\n  = note: expected type `usize`\n\
    \             found enum `Option<usize>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp7g_ugz16.rs:10:16\n   |\n8  |     let mut last = numbers[0];\n \
    \  |                    ---------- expected due to this value\n9  |     while\
    \ let Some(next) = numbers.iter().skip(numbers.iter().position(|x| x == last)).next()\
    \ {\n10 |         last = next;\n   |                ^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \ last = *next;\n   |                +\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&x|\
    \ numbers.iter().any(|y| x == y))\n        .cloned()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx106xm6j.rs:9:50\n  |\n9 |\
    \         .filter(|&x| numbers.iter().any(|y| x == y))\n  |                  \
    \                                ^ expected `isize`, found `&isize`\n  |\nhelp:\
    \ consider dereferencing the borrow\n  |\n9 |         .filter(|&x| numbers.iter().any(|y|\
    \ x == *y))\n  |                                                  +\n\nerror[E0271]:\
    \ type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item ==\
    \ &&_`\n  --> /tmp/tmpx106xm6j.rs:10:10\n   |\n10 |         .cloned()\n   |  \
    \        ^^^^^^ expected reference, found `isize`\n   |\n   = note: expected reference\
    \ `&&_`\n              found reference `&isize`\n   = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpx106xm6j.rs:9:17: 9:52]>`\n\nerror[E0631]: type mismatch\
    \ in closure arguments\n  --> /tmp/tmpx106xm6j.rs:10:10\n   |\n9  |         .filter(|&x|\
    \ numbers.iter().any(|y| x == y))\n   |                 -----------------------------------\
    \ found signature of `for<'r> fn(&'r isize) -> _`\n10 |         .cloned()\n  \
    \ |          ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n   |\n  \
    \ = note: required because of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpx106xm6j.rs:9:17: 9:52]>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx106xm6j.rs:6:5\n   |\n5  |   fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \      ---------- expected `Vec<isize>` because of return type\n6  | /     numbers\n\
    7  | |         .iter()\n8  | |         .cloned()\n9  | |         .filter(|&x|\
    \ numbers.iter().any(|y| x == y))\n10 | |         .cloned()\n   | |_________________^\
    \ expected struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Cloned<Filter<"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut number = numbers.clone();\n    number.sort_unstable();\n\
    \    let mut index = 0;\n    let mut number_index = 0;\n    let mut last_value\
    \ = numbers[index];\n    while number_index < number.len() {\n        while number_index\
    \ != number.len() && numbers[number_index] == numbers[number_index + 1] {\n  \
    \          last_value = numbers[number_index];\n            numbers[number_index]\
    \ = numbers[number_index + 1];\n            number_index += 1;\n        }\n  \
    \      index += 1;\n        if last_value != numbers[index] {\n            numbers[index]\
    \ = last_value;\n        }\n        number_index += 1;\n    }\n    numbers\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpkk5hd5qd.rs:14:13\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                      ------- help: consider\
    \ changing this to be mutable: `mut numbers`\n...\n14 |             numbers[number_index]\
    \ = numbers[number_index + 1];\n   |             ^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `numbers` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpkk5hd5qd.rs:19:13\n   |\n5  | fn remove_duplicates(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                      ------- help: consider changing this\
    \ to be mutable: `mut numbers`\n...\n19 |             numbers[index] = last_value;\n\
    \   |             ^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    numbers.dedup();\n   \
    \ let mut result = vec![];\n    for (index, number) in numbers.iter().enumerate()\
    \ {\n        if seen.contains(number) {\n            result.push(number);\n  \
    \      }\n        seen.insert(number);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpd6f3xh19.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd6f3xh19.rs:15:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n15 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = numbers;\n    for &x in &result {\n     \
    \   result.sort();\n        if result.iter().any(|&y| y != x) {\n            result.remove(x);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6nwoubr.rs:10:27\n   |\n\
    10 |             result.remove(x);\n   |                           ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |             result.remove(x.try_into().unwrap());\n\
    \   |                            ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_without_duplicates = vec![];\n    for (number,\
    \ numbers) in numbers.iter().cloned().filter_map(|number| {\n        if numbers_without_duplicates.contains(&number)\
    \ {\n            None\n        } else {\n            Some(number)\n        }\n\
    \    }) {\n        numbers_without_duplicates.push(number);\n    }\n    numbers_without_duplicates\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54kmmuqj.rs:7:9\n   |\n7\
    \  |       for (number, numbers) in numbers.iter().cloned().filter_map(|number|\
    \ {\n   |  _________^^^^^^^^^^^^^^^^^____-\n   | |         |\n   | |         expected\
    \ `isize`, found tuple\n8  | |         if numbers_without_duplicates.contains(&number)\
    \ {\n9  | |             None\n10 | |         } else {\n11 | |             Some(number)\n\
    12 | |         }\n13 | |     }) {\n   | |______- this expression has type `Option<isize>`\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup_into(&mut\
    \ seen);\n    seen\n        .into_iter()\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpcmrc923k.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpcmrc923k.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: no\
    \ method named `dedup_into` found for struct `Vec<isize>` in the current scope\n\
    \ --> /tmp/tmpcmrc923k.rs:7:13\n  |\n7 |     numbers.dedup_into(&mut seen);\n\
    \  |             ^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `dedup`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0412, E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    numbers.iter().cloned().dedup_by(|a,\
    \ b| a < b).each(|num| {\n        result.push(num);\n    });\n    result\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup_by` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmph0vz2jdj.rs:7:29\n  |\n7 |     numbers.iter().cloned().dedup_by(|a,\
    \ b| a < b).each(|num| {\n  |                             ^^^^^^^^ method not\
    \ found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup_by(|a, b| a == b).cloned()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmplw9fxdqa.rs:6:37\n\
    \  |\n6 |     numbers.dedup_by(|a, b| a == b).cloned()\n  |                  \
    \                   ^^^^^^ `()` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n    }\n\
    \    let mut seen: HashSet<isize> = HashSet::new();\n    for n in numbers {\n\
    \        if seen.insert(n).is_some() {\n            continue;\n        }\n   \
    \     seen.insert(n);\n        numbers.remove(n);\n    }\n    numbers\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmphx6epbrk.rs:9:19\n\
    \  |\n9 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmphx6epbrk.rs:9:36\n  |\n9 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphx6epbrk.rs:15:24\n   |\n15 |         numbers.remove(n);\n\
    \   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |         numbers.remove(n.try_into().unwrap());\n   |       \
    \                  ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&i|\
    \ numbers.iter().all(|&j| i == j))\n        .cloned()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n  --> /tmp/tmp0lyiiar6.rs:10:10\n   |\n10 |       \
    \  .cloned()\n   |          ^^^^^^ expected reference, found `isize`\n   |\n \
    \  = note: expected reference `&&_`\n              found reference `&isize`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant requirement hidden\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp0lyiiar6.rs:9:17:\
    \ 9:53]>`\n\nerror[E0631]: type mismatch in closure arguments\n  --> /tmp/tmp0lyiiar6.rs:10:10\n\
    \   |\n9  |         .filter(|&i| numbers.iter().all(|&j| i == j))\n   |      \
    \           ------------------------------------ found signature of `for<'r> fn(&'r\
    \ isize) -> _`\n10 |         .cloned()\n   |          ^^^^^^ expected signature\
    \ of `for<'r> fn(&'r &_) -> _`\n   |\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp0lyiiar6.rs:9:17:\
    \ 9:53]>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0lyiiar6.rs:6:5\n \
    \  |\n5  |   fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   | \
    \                                               ---------- expected `Vec<isize>`\
    \ because of return type\n6  | /     numbers\n7  | |         .iter()\n8  | | \
    \        .cloned()\n9  | |         .filter(|&i| numbers.iter().all(|&j| i == j))\n\
    10 | |         .cloned()\n   | |_________________^ expected struct `Vec`, found\
    \ struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n           \
    \   found struct `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp0lyiiar6.rs:9:17:\
    \ 9:53]>>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0308, E0631.\nFor more information about an error, try\
    \ `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .dedup()\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpc1hybjgw.rs:9:10\n  |\n9 |         .dedup()\n  |\
    \          ^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwvdledwx.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup()\n  |     ^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmpwvdledwx.rs:6:13\n\
    \  |\n6 |     numbers.dedup()\n  |     ------- ^^^^^ this call modifies `numbers`\
    \ in-place\n  |     |\n  |     you probably want to use this value after calling\
    \ the method...\n  = note: ...instead of the `()` output of method `dedup`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_without_duplicates = vec![];\n    let mut\
    \ number_counters = vec![];\n    for number in numbers {\n        if !numbers_without_duplicates.contains(&number)\
    \ {\n            numbers_without_duplicates.push(number);\n            number_counters.push(1);\n\
    \        } else {\n            let index = numbers_without_duplicates.iter().position(|&n|\
    \ n == number);\n            number_counters[index] += 1;\n        }\n    }\n\
    \    numbers_without_duplicates\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `Option<usize>`\n\
    \  --> /tmp/tmpctxmto66.rs:14:13\n   |\n14 |             number_counters[index]\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `Option<usize>`\n   = note: required because of the requirements\
    \ on the impl of `Index<Option<usize>>` for `Vec<{integer}>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut i = 0;\n    let mut numbers = numbers;\n    let mut\
    \ ret: Vec<isize> = vec![];\n    while i < numbers.len() {\n        let number\
    \ = numbers[i];\n        if numbers[i + 1] == number {\n            ret.append(number);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo8xcbst3.rs:12:24\n   |\n\
    12 |             ret.append(number);\n   |                        ^^^^^^ expected\
    \ `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<isize>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .windows(2)\n     \
    \   .filter(|x| x.count() > 1)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpm7lu4ghs.rs:8:10\n  |\n8 |         .windows(2)\n\
    \  |          ^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut output = numbers;\n    for number in output.iter().cloned()\
    \ {\n        let index = output.iter().position(|x| *x == number);\n        if\
    \ index != output.len() {\n            output.swap_remove(index);\n        }\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcgbt3tk4.rs:9:21\n  |\n9 |\
    \         if index != output.len() {\n  |                     ^^^^^^^^^^^^ expected\
    \ enum `Option`, found `usize`\n  |\n  = note: expected enum `Option<usize>`\n\
    \             found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         if index != Some(output.len()) {\n  |                     +++++\
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcgbt3tk4.rs:10:32\n\
    \   |\n10 |             output.swap_remove(index);\n   |                     \
    \           ^^^^^ expected `usize`, found enum `Option`\n   |\n   = note: expected\
    \ type `usize`\n              found enum `Option<usize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates: Vec<isize> = Vec::new();\n    for (i,\
    \ num) in numbers.iter().enumerate() {\n        if i > 0 && duplicates.contains(&num)\
    \ {\n            continue;\n        }\n        duplicates.push(num);\n    }\n\
    \    duplicates\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpal6joulw.rs:11:25\n   |\n\
    11 |         duplicates.push(num);\n   |                         ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |         duplicates.push(*num);\n   |                         +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp0rer3ag_.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers[1..].iter().dedup().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpyq9te49e.rs:6:25\n  |\n6 |     numbers[1..].iter().dedup().collect()\n\
    \  |                         ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    numbers.iter().cloned().filter(|x|\
    \ !set.insert(x).unwrap()).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgjcvgcg0.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n    let\
    \ mut seen = HashSet::new();\n    for n in numbers {\n        if seen.insert(n).is_none()\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmppvp9n0wk.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup().filter(|&x|\
    \ seen.insert(x).is_ok()).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmptwlr41ol.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmptwlr41ol.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `()`\
    \ is not an iterator\n --> /tmp/tmptwlr41ol.rs:7:21\n  |\n7 |     numbers.dedup().filter(|&x|\
    \ seen.insert(x).is_ok()).collect()\n  |                     ^^^^^^ `()` is not\
    \ an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut last = usize::MAX;\n    let mut seen = HashSet::new();\n\
    \    for number in numbers {\n        if number != last {\n            if seen.contains(&number)\
    \ {\n                continue;\n            }\n            seen.insert(number);\n\
    \            last = number;\n        }\n    }\n    seen.iter().filter_map(|x|\
    \ x).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp2_77ywuz.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp2_77ywuz.rs:9:22\n  |\n9 |         if number != last {\n\
    \  |                      ^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |         if number != last.try_into().unwrap() {\n  |         \
    \                 ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2_77ywuz.rs:14:20\n   |\n6  |     let mut last = usize::MAX;\n   | \
    \                   ---------- expected due to this value\n...\n14 |         \
    \    last = number;\n   |                    ^^^^^^ expected `usize`, found `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for n in numbers {\n        if !seen.insert(n).unwrap() {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpolwvh2af.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = Vec::new();\n    for (number, new_number)\
    \ in numbers.iter_mut().zip(new_numbers) {\n        if *number != *new_number\
    \ {\n            *new_number = number;\n        }\n    }\n    new_numbers\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `(&mut isize, _)`\n --> /tmp/tmp7yl9bu3e.rs:8:23\n\
    \  |\n6 |     let mut new_numbers = Vec::new();\n  |         --------------- consider\
    \ giving `new_numbers` the explicit type `(&mut isize, _)`, with the type parameters\
    \ specified\n7 |     for (number, new_number) in numbers.iter_mut().zip(new_numbers)\
    \ {\n8 |         if *number != *new_number {\n  |                       ^^^^^^^^^^^\
    \ cannot infer type\n  |\n  = note: type must be known at this point\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = Vec::from(numbers);\n    numbers.dedup();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfbciemja.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.clone();\n    numbers.dedup();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2t6xiage.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: Vec<bool> = Vec::new();\n    let mut result\
    \ = vec![];\n    for n in numbers {\n        if !seen.contains(&n) {\n       \
    \     seen.push(true);\n            result.push(n);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqnl8ew_t.rs:9:27\n  |\n9 |\
    \         if !seen.contains(&n) {\n  |                           ^^ expected `bool`,\
    \ found `isize`\n  |\n  = note: expected reference `&bool`\n             found\
    \ reference `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // Create an array with all the unique elements and their\
    \ counts\n    // e.g. [1, 3, 3, 4, 5] -> [(1, 2), (3, 1), (4, 2), (5, 1)]\n  \
    \  let mut counts = Vec::new();\n    for num in numbers {\n        let count =\
    \ counts.iter().filter(|&(k, v)| *k == *num).count();\n        if count == 0 {\n\
    \            counts.push(vec![(num, 1)]);\n        } else {\n            counts[counts.len()\
    \ - 1].push((num, count));\n        }\n    }\n\n    // Rearrange counts vector\
    \ to keep order of elements same as in input\n    // e.g. [1, 3, 3, 4, 5] -> [(1,\
    \ 2), (3, 1), (4, 2), (5, 1)]\n    let mut result = vec![];\n    for count in\
    \ &counts {\n        let mut current_count = vec![];\n        for entry in count\
    \ {\n            current_count.push(*entry);\n        }\n        result.push(current_count);\n\
    \    }\n\n    // Remove elements with count of 1\n    remove_element_from_vector(&mut\
    \ result, &vec![], |num| num == 1);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_element_from_vector` in this\
    \ scope\n  --> /tmp/tmp2vfr7a66.rs:30:5\n   |\n30 |     remove_element_from_vector(&mut\
    \ result, &vec![], |num| num == 1);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp2vfr7a66.rs:10:58\n\
    \   |\n10 |         let count = counts.iter().filter(|&(k, v)| *k == *num).count();\n\
    \   |                                                          ^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2vfr7a66.rs:12:25\n   |\n12 |             counts.push(vec![(num,\
    \ 1)]);\n   |                         ^^^^^^^^^^^^^^ expected tuple, found struct\
    \ `Vec`\n   |\n   = note: expected tuple `(_, _)`\n             found struct `Vec<(isize,\
    \ {integer})>`\n   = note: this error originates in the macro `vec` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method\
    \ named `push` found for tuple `(_, _)` in the current scope\n  --> /tmp/tmp2vfr7a66.rs:14:38\n\
    \   |\n14 |             counts[counts.len() - 1].push((num, count));\n   |   \
    \                                   ^^^^ method not found in `(_, _)`\n\nerror[E0277]:\
    \ `&(_, _)` is not an iterator\n  --> /tmp/tmp2vfr7a66.rs:23:22\n   |\n23 |  \
    \       for entry in count {\n   |                      ^^^^^ `&(_, _)` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&(_,\
    \ _)`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2vfr7a66.rs:31:5\n\
    \   |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |  \
    \                                            ---------- expected `Vec<isize>`\
    \ because of return type\n...\n31 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Vec<Vec<_>>`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425, E0599, E0614.\n\
    For more information about an error, try `rustc --expla"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().cloned().filter(|&num| numbers.iter().any(|&i|\
    \ i == num)).cloned()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n --> /tmp/tmpe4oex175.rs:6:78\n  |\n6 |     numbers.iter().cloned().filter(|&num|\
    \ numbers.iter().any(|&i| i == num)).cloned()\n  |                           \
    \                                                   ^^^^^^ expected reference,\
    \ found `isize`\n  |\n  = note: expected reference `&&_`\n             found reference\
    \ `&isize`\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\n  = note: 1 redundant requirement\
    \ hidden\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpe4oex175.rs:6:36:\
    \ 6:76]>`\n\nerror[E0631]: type mismatch in closure arguments\n --> /tmp/tmpe4oex175.rs:6:78\n\
    \  |\n6 |     numbers.iter().cloned().filter(|&num| numbers.iter().any(|&i| i\
    \ == num)).cloned()\n  |                                    ----------------------------------------\
    \  ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n  |               \
    \                     |\n  |                                    found signature\
    \ of `for<'r> fn(&'r isize) -> _`\n  |\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpe4oex175.rs:6:36:\
    \ 6:76]>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpe4oex175.rs:6:5\n  |\n\
    5 | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |           \
    \                                   ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.iter().cloned().filter(|&num| numbers.iter().any(|&i|\
    \ i == num)).cloned()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpe4oex175.rs:6:36: 6:76]>>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanation"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique: Vec<isize> = Vec::new();\n    let mut seen:\
    \ HashSet<isize> = HashSet::new();\n    for number in numbers {\n        if seen.insert(number)\
    \ {\n            unique.push(number);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7e6g9et7.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp7e6g9et7.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicated = numbers;\n    for index in 0..numbers.len()\
    \ {\n        if numbers.iter().position(|&i| i == numbers[index]).is_some() {\n\
    \            duplicated.remove(index);\n        }\n    }\n    duplicated\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n --> /tmp/tmpf09qzeki.rs:7:21\n\
    \  |\n5 | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |     \
    \                 ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n6 |     let mut duplicated = numbers;\n\
    \  |                          ------- value moved here\n7 |     for index in 0..numbers.len()\
    \ {\n  |                     ^^^^^^^^^^^^^ value borrowed here after move\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = vec![];\n    for n in numbers {\n       \
    \ if unique.contains(&n) {\n            continue;\n        }\n        unique.push(n);\n\
    \    }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpd3y_q66q.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    let mut current_val:\
    \ Option<isize> = None;\n    for n in numbers {\n        match current_val {\n\
    \            Some(val) => if n == val { result.push(n) },\n            None =>\
    \ current_val = Some(n),\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp80k4fw2s.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for n in numbers {\n        if seen.insert(n).is_some() {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpks5xpbg0.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&x|\
    \ numbers.iter().filter(|&y| x == y).count() > 1)\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkroh2xz0.rs:9:54\n  |\n9 |\
    \         .filter(|&x| numbers.iter().filter(|&y| x == y).count() > 1)\n  |  \
    \                                                    ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         .filter(|&x|\
    \ numbers.iter().filter(|&y| x == *y).count() > 1)\n  |                      \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut i = 0;\n    let mut j = 0;\n\n    // Set a boolean\
    \ to determine if an element is duplicated or not, and increment the index accordingly.\n\
    \    let mut is_duplicated = false;\n\n    for &num in &numbers {\n        if\
    \ *num == *i {\n            is_duplicated = true;\n        } else {\n        \
    \    // If this number is NOT a duplicate, append it to the output vector.\n \
    \           if !is_duplicated {\n                numbers[j] = *num;\n        \
    \        i += 1;\n            }\n            is_duplicated = false;\n        }\n\
    \n        j += 1;\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpbf4oaowz.rs:13:12\n\
    \   |\n13 |         if *num == *i {\n   |            ^^^^\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmpbf4oaowz.rs:13:20\n   |\n\
    13 |         if *num == *i {\n   |                    ^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpbf4oaowz.rs:18:30\n   |\n18 |\
    \                 numbers[j] = *num;\n   |                              ^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup();\n\
    \    let mut result = vec![];\n    for n in numbers {\n        if seen.insert(n).is_none()\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpthu3hhrb.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpthu3hhrb.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    numbers.dedup().into_iter().filter(|&number|\
    \ seen.insert(number).unwrap_or(false)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpt9ep4x0s.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `()`\
    \ is not an iterator\n --> /tmp/tmpt9ep4x0s.rs:7:21\n  |\n7 |     numbers.dedup().into_iter().filter(|&number|\
    \ seen.insert(number).unwrap_or(false)).collect()\n  |                     ^^^^^^^^^\
    \ `()` is not an iterator\n  |\n  = note: the following trait bounds were not\
    \ satisfied:\n          `(): Iterator`\n          which is required by `(): IntoIterator`\n\
    \          `&(): Iterator`\n          which is required by `&(): IntoIterator`\n\
    \          `&mut (): Iterator`\n          which is required by `&mut (): IntoIterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for n in numbers {\n        if !seen.insert(n).unwrap()\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpr3_9irai.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpr3_9irai.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    numbers\n        .into_iter()\n\
    \        .filter(|number| seen.insert(number).is_none())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpoljyl7y3.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&number|\
    \ number == number)\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp3s9bzrz3.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut current_idx = vec![];\n    for i in numbers.iter().cloned().collect::<Vec<isize>>()\
    \ {\n        if !current_idx.contains(&i) {\n            current_idx.push(&i);\n\
    \        }\n    }\n    let mut result = vec![];\n    for i in current_idx.iter().cloned().collect::<Vec<isize>>()\
    \ {\n        if !result.contains(&i) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3jywr3n.rs:9:30\n  |\n9 |\
    \             current_idx.push(&i);\n  |                              ^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider removing the borrow\n  |\n9 - \
    \            current_idx.push(&i);\n9 +             current_idx.push(i);\n  |\
    \ \n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpy3jywr3n.rs:15:25\n\
    \   |\n15 |             result.push(numbers[i]);\n   |                       \
    \  ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\
    \n    for n in numbers.iter() {\n        if !seen.insert(n).unwrap() {\n     \
    \       result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpfzsip8vk.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfzsip8vk.rs:14:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n14 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    for n in numbers\
    \ {\n        if !numbers_set.insert(n) {\n            numbers_set.insert(n - 1);\n\
    \        }\n    }\n    let mut result = vec![];\n    for n in numbers_set {\n\
    \        result.push(n);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpayy5acc3.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup_by(|a, b| a == b).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpa23nqkv8.rs:6:37\n\
    \  |\n6 |     numbers.dedup_by(|a, b| a == b).collect()\n  |                 \
    \                    ^^^^^^^ `()` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut retval = Vec::new();\n    let mut prev_number = 0;\n\
    \    for n in numbers {\n        if n == prev_number {\n            continue;\n\
    \        }\n        retval.push(n);\n        prev_number = n;\n    }\n    retval\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp78ouv855.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n    let\
    \ mut seen = HashSet::new();\n\n    for (i, n) in numbers.into_iter().enumerate()\
    \ {\n        if seen.insert(n).is_none() {\n            result.push(n);\n    \
    \    }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpf3ykkdaf.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().cloned().dedup().collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmppgu_31on.rs:6:29\n  |\n6 |     numbers.iter().cloned().dedup().collect()\n\
    \  |                             ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates = Vec::new();\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        if !result.contains(&number) {\n       \
    \     result.push(number);\n        }\n        if duplicates.iter().any(|&d| d\
    \ == number) {\n            result.push(number);\n        }\n        duplicates.push(number);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8v81f55_.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut seen\
    \ = HashSet::new();\n    for number in numbers {\n        if !seen.insert(number).unwrap()\
    \ {\n            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpjr9datos.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut output = Vec::new();\n    let mut counts = HashMap::new();\n\
    \    for n in numbers.iter() {\n        *counts.entry(n).or_insert(0) += 1;\n\
    \    }\n    for (k, v) in counts.iter().cloned() {\n        if v > 1 {\n     \
    \       output.push(k);\n        }\n    }\n    output\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpy_36u1ps.rs:7:22\n  |\n7 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    for number in numbers\
    \ {\n        if numbers_set.insert(number).is_ok() {\n            continue;\n\
    \        }\n        numbers_set.insert(number);\n        numbers.remove(number);\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpd73_yqir.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd73_yqir.rs:12:24\n   |\n12 |         numbers.remove(number);\n\
    \   |                        ^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |         numbers.remove(number.try_into().unwrap());\n   |  \
    \                            ++++++++++++++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n\
    \        if !new_numbers.contains(&n) {\n            new_numbers.push(n);\n  \
    \      }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp12hv8jun.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    numbers.dedup().iter().cloned().filter(|n|\
    \ {\n        numbers_set.insert(n);\n        true\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1lu051he.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]:\
    \ no method named `iter` found for unit type `()` in the current scope\n --> /tmp/tmp1lu051he.rs:7:21\n\
    \  |\n7 |     numbers.dedup().iter().cloned().filter(|n| {\n  |              \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut current = vec![numbers[0]];\n    for &n in numbers\
    \ {\n        if current.contains(&n) {\n            continue;\n        }\n   \
    \     current.push(&n);\n    }\n    current\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3bq_umok.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3bq_umok.rs:11:22\n   |\n11 |         current.push(&n);\n\
    \   |                      ^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n11 -         current.push(&n);\n11 +         current.push(n);\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    for n in numbers {\n \
    \       if seen.insert(n).is_ok() {\n            continue;\n        }\n      \
    \  seen.insert(n);\n        vec![n for n in numbers if n != n]\n    }\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: no rules expected the token `for`\n  --> /tmp/tmpjyw76jjb.rs:12:16\n\
    \   |\n12 |         vec![n for n in numbers if n != n]\n   |                ^^^\
    \ no rules expected this token in macro call\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpjyw76jjb.rs:6:20\n  |\n6 |  \
    \   let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjyw76jjb.rs:7:5\n   |\n\
    5  |   fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |       \
    \                                         ---------- expected `Vec<isize>` because\
    \ of return type\n6  |       let mut seen = HashSet::new();\n7  | /     for n\
    \ in numbers {\n8  | |         if seen.insert(n).is_ok() {\n9  | |           \
    \  continue;\n10 | |         }\n11 | |         seen.insert(n);\n12 | |       \
    \  vec![n for n in numbers if n != n]\n13 | |     }\n   | |_____^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_numbers = numbers;\n    sorted_numbers.sort();\n\
    \n    // remove duplicates and keep order of original elements\n    sorted_numbers.remove(|number|\n\
    \        sorted_numbers.iter().position(|n| *n == number).is_some()\n    );\n\
    \    sorted_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph2gmkg_u.rs:10:27\n   |\n\
    10 |       sorted_numbers.remove(|number|\n   |  ___________________________^\n\
    11 | |         sorted_numbers.iter().position(|n| *n == number).is_some()\n  \
    \ | |__________________________________________________________________^ expected\
    \ `usize`, found closure\n   |\n   = note: expected type `usize`\n           found\
    \ closure `[closure@/tmp/tmph2gmkg_u.rs:10:27: 11:67]`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    // Copy so we can modify it in-place.\n    let numbers = numbers.into_iter().collect::<Vec<_>>();\n\
    \    let mut numbers = numbers;\n    numbers.dedup();\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjz5wnijv.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&n|\
    \ numbers.iter().filter(|&i| n == i).count() == 1)\n        .cloned()\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptfngyqve.rs:9:54\n  |\n9 |\
    \         .filter(|&n| numbers.iter().filter(|&i| n == i).count() == 1)\n  | \
    \                                                     ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         .filter(|&n|\
    \ numbers.iter().filter(|&i| n == *i).count() == 1)\n  |                     \
    \                                 +\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ isize> as Iterator>::Item == &&_`\n  --> /tmp/tmptfngyqve.rs:10:10\n   |\n10\
    \ |         .cloned()\n   |          ^^^^^^ expected reference, found `isize`\n\
    \   |\n   = note: expected reference `&&_`\n              found reference `&isize`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant requirement hidden\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmptfngyqve.rs:9:17:\
    \ 9:69]>`\n\nerror[E0631]: type mismatch in closure arguments\n  --> /tmp/tmptfngyqve.rs:10:10\n\
    \   |\n9  |         .filter(|&n| numbers.iter().filter(|&i| n == i).count() ==\
    \ 1)\n   |                 ----------------------------------------------------\
    \ found signature of `for<'r> fn(&'r isize) -> _`\n10 |         .cloned()\n  \
    \ |          ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n   |\n  \
    \ = note: required because of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmptfngyqve.rs:9:17: 9:69]>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptfngyqve.rs:6:5\n   |\n5  |   fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \      ---------- expected `Vec<isize>` because of return type\n6  | /     numbers\n\
    7  | |         .iter()\n8  | |         .cloned()\n9  | |         .filter(|&n|\
    \ numbers.iter().filter(|&i| n == i).count() == 1)\n10 | |         .cloned()\n\
    \   | |_________________^ expected struct `Vec`, found struct `Cl"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp0rer3ag_.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    for num in numbers\
    \ {\n        if !numbers_set.insert(num).unwrap() {\n            numbers_set.insert(num);\n\
    \        }\n    }\n    numbers_set.into_iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9e94hndr.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().fold(vec![], |mut xs, x| {\n        match xs.iter().filter(|y|\
    \ x == y) {\n            Some(x) => {\n                if x.is_empty() {\n   \
    \                 xs.push(x);\n                }\n                Some(x)\n  \
    \          }\n            None => Some(xs.push(x)),\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n --> /tmp/tmpdcb4q_om.rs:7:38\n\
    \  |\n7 |         match xs.iter().filter(|y| x == y) {\n  |                  \
    \                    ^^ no implementation for `isize == &isize`\n  |\n  = help:\
    \ the trait `PartialEq<&isize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n            f32\n \
    \           f64\n            i128\n            i16\n            i32\n        \
    \    i64\n            i8\n            isize\n          and 6 others\n  = note:\
    \ required because of the requirements on the impl of `PartialEq<&&isize>` for\
    \ `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdcb4q_om.rs:8:13\n\
    \  |\n7 |         match xs.iter().filter(|y| x == y) {\n  |               ----------------------------\n\
    \  |               |                |\n  |               |                the\
    \ expected closure\n  |               this expression has type `Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpdcb4q_om.rs:7:32: 7:42]>`\n8 |             Some(x)\
    \ => {\n  |             ^^^^^^^ expected struct `Filter`, found enum `Option`\n\
    \  |\n  = note: expected struct `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpdcb4q_om.rs:7:32:\
    \ 7:42]>`\n               found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdcb4q_om.rs:14:13\n   |\n7  |         match xs.iter().filter(|y|\
    \ x == y) {\n   |               ----------------------------\n   |           \
    \    |                |\n   |               |                the expected closure\n\
    \   |               this expression has type `Filter<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmpdcb4q_om.rs:7:32: 7:42]>`\n...\n14 |             None => Some(xs.push(x)),\n\
    \   |             ^^^^ expected struct `Filter`, found enum `Option`\n   |\n \
    \  = note: expected struct `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpdcb4q_om.rs:7:32:\
    \ 7:42]>`\n                found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdcb4q_om.rs:12:17\n   |\n12 |                 Some(x)\n\
    \   |                 ^^^^^^^ expected struct `Vec`, found enum"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n\n    for num in numbers {\n\
    \        if set.insert(num).is_some() {\n            // Duplicate found, skip\
    \ it.\n            continue;\n        }\n\n        // Not found, store this element.\n\
    \        set.insert(num);\n    }\n\n    set.into_iter().map(|x| x as isize).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpffvgn0kg.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in numbers.iter()\
    \ {\n        if !result.contains(&i) {\n            result.push(i);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwfistepd.rs:12:5\n   |\n\
    5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                     ---------- expected `Vec<isize>` because\
    \ of return type\n...\n12 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique: Vec<isize> = Vec::new();\n    for n in numbers\
    \ {\n        if unique.contains(&n) {\n            continue;\n        }\n    \
    \    unique.push(n);\n    }\n    unique\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpoltfo72b.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::with_capacity(numbers.len());\n    for\
    \ (i, elem) in numbers.iter().enumerate() {\n        if res.get(&elem).is_some()\
    \ {\n            continue;\n        }\n        res.push(elem);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `&&isize`\n   --> /tmp/tmpv3tyhynd.rs:8:20\n\
    \    |\n8   |         if res.get(&elem).is_some() {\n    |                ---\
    \ ^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |        \
    \        |\n    |                required by a bound introduced by this call\n\
    \    |\n    = help: the trait `SliceIndex<[_]>` is not implemented for `&&isize`\n\
    \    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::get`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv3tyhynd.rs:13:5\n   |\n5  | fn remove_duplicates(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                              ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 |     res\n   |     ^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&x|\
    \ numbers.iter().filter(|&y| x != y).count() == 1)\n        .cloned()\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvtj3_cd0.rs:9:54\n  |\n9 |\
    \         .filter(|&x| numbers.iter().filter(|&y| x != y).count() == 1)\n  | \
    \                                                     ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         .filter(|&x|\
    \ numbers.iter().filter(|&y| x != *y).count() == 1)\n  |                     \
    \                                 +\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ isize> as Iterator>::Item == &&_`\n  --> /tmp/tmpvtj3_cd0.rs:10:10\n   |\n10\
    \ |         .cloned()\n   |          ^^^^^^ expected reference, found `isize`\n\
    \   |\n   = note: expected reference `&&_`\n              found reference `&isize`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant requirement hidden\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpvtj3_cd0.rs:9:17:\
    \ 9:69]>`\n\nerror[E0631]: type mismatch in closure arguments\n  --> /tmp/tmpvtj3_cd0.rs:10:10\n\
    \   |\n9  |         .filter(|&x| numbers.iter().filter(|&y| x != y).count() ==\
    \ 1)\n   |                 ----------------------------------------------------\
    \ found signature of `for<'r> fn(&'r isize) -> _`\n10 |         .cloned()\n  \
    \ |          ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n   |\n  \
    \ = note: required because of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpvtj3_cd0.rs:9:17: 9:69]>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtj3_cd0.rs:6:5\n   |\n5  |   fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \      ---------- expected `Vec<isize>` because of return type\n6  | /     numbers\n\
    7  | |         .iter()\n8  | |         .cloned()\n9  | |         .filter(|&x|\
    \ numbers.iter().filter(|&y| x != y).count() == 1)\n10 | |         .cloned()\n\
    \   | |_________________^ expected struct `Vec`, found struct `Cl"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n\n    for i in numbers.iter() {\n\
    \        if result.iter().find(|e| e == i).is_some() {\n            continue;\n\
    \        }\n\n        result.push(i);\n    }\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&_` with `isize`\n --> /tmp/tmp3l45wt9w.rs:9:37\n\
    \  |\n9 |         if result.iter().find(|e| e == i).is_some() {\n  |         \
    \                            ^^ no implementation for `&_ == isize`\n  |\n  =\
    \ help: the trait `PartialEq<isize>` is not implemented for `&_`\n  = note: required\
    \ because of the requirements on the impl of `PartialEq<&isize>` for `&&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp3l45wt9w.rs:16:5\n   |\n5  | fn\
    \ remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                               ---------- expected `Vec<isize>` because of return\
    \ type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = Vec::new();\n    for num in numbers {\n   \
    \     if nums.contains(&num) {\n            (*nums)[nums.iter().position(|x| *x\
    \ == num).unwrap()]\n        } else {\n            nums.push(num);\n        }\n\
    \    }\n    nums\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6um0pcnz.rs:9:13\n   |\n\
    8  | /         if nums.contains(&num) {\n9  | |             (*nums)[nums.iter().position(|x|\
    \ *x == num).unwrap()]\n   | |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n10 | |         } else {\n11 | |             nums.push(num);\n\
    12 | |         }\n   | |_________- expected this to be `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .cloned()\n       \
    \ .filter(|x| *x == 0)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpz8j36_rp.rs:8:10\n     |\n8    |         .cloned()\n\
    \     |          ^^^^^^ expected reference, found `isize`\n     |\n     = note:\
    \ expected reference `&_`\n                     found type `isize`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `filter` exists for struct\
    \ `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpz8j36_rp.rs:9:10\n   |\n9  |           .filter(|x| *x == 0)\n \
    \  |            ^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    let mut cnts = HashMap::<isize,\
    \ usize>::new();\n    for n in numbers {\n        if cnts.contains_key(n) {\n\
    \            continue;\n        }\n        cnts.insert(n, 1);\n        res.push(n);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp7jkmqjxf.rs:7:20\n  |\n7 |     let mut cnts = HashMap::<isize, usize>::new();\n\
    \  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates: Vec<isize> = Vec::new();\n    for number\
    \ in numbers {\n        if !duplicates.contains(&number) {\n            duplicates.push(number);\n\
    \        }\n    }\n    duplicates\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8hmjuv30.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = Vec::with_capacity(numbers.len());\n\
    \    for &num in numbers.iter() {\n        if !ret.contains(&num) {\n        \
    \    ret.push(num);\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjv001zz5.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.clone();\n    numbers.dedup();\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2t6xiage.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen_numbers = HashSet::new();\n    numbers\n    \
    \    .iter()\n        .cloned()\n        .filter_map(|&num| {\n            if\
    \ !seen_numbers.insert(num) {\n                Some(num)\n            } else {\n\
    \                None\n            }\n        })\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp29o6_fxl.rs:6:28\n  |\n6 |     let mut seen_numbers = HashSet::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp29o6_fxl.rs:10:22\n   |\n10 |         .filter_map(|&num|\
    \ {\n   |                      ^----\n   |                      ||\n   |     \
    \                 |expected due to this\n   |                      expected `isize`,\
    \ found reference\n   |                      help: did you mean `num`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup_by(|number| number).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n\
    \ --> /tmp/tmphgqaid8y.rs:6:13\n  |\n6 |     numbers.dedup_by(|number| number).collect()\n\
    \  |             ^^^^^^^^ -------- takes 1 argument\n  |             |\n  |  \
    \           expected closure that takes 2 arguments\n\nerror[E0599]: `()` is not\
    \ an iterator\n --> /tmp/tmphgqaid8y.rs:6:39\n  |\n6 |     numbers.dedup_by(|number|\
    \ number).collect()\n  |                                       ^^^^^^^ `()` is\
    \ not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0593, E0599.\nFor more information about an error, try `rustc --explain E0593`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_hash = HashSet::new();\n    for n in numbers\
    \ {\n        if !numbers_hash.insert(n).unwrap_or(false) {\n            numbers_hash.insert(n);\n\
    \        }\n    }\n    numbers.iter().filter(|n| numbers_hash.contains(&n)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpy9ar7q3e.rs:6:28\n  |\n6 |     let mut numbers_hash = HashSet::new();\n\
    \  |                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpy9ar7q3e.rs:12:58\n     |\n12   |     numbers.iter().filter(|n|\
    \ numbers_hash.contains(&n)).collect()\n     |                               \
    \                           ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0433.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp0rer3ag_.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = numbers;\n    for i in numbers.iter().cloned()\
    \ {\n        let index = result.iter().position(|&x| x == i).unwrap();\n     \
    \   if index != i {\n            result.swap(index, i);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzy1zyyd2.rs:9:21\n  |\n9 |\
    \         if index != i {\n  |                     ^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |         if index != i.try_into().unwrap() {\n  |\
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpzy1zyyd2.rs:10:32\n   |\n10 |             result.swap(index, i);\n\
    \   |                                ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n10 |             result.swap(index, i.try_into().unwrap());\n\
    \   |                                 ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_numbers = Vec::new();\n    new_numbers.reserve(numbers.len());\n\
    \    for number in numbers.iter() {\n        if !new_numbers.contains(&number)\
    \ {\n            new_numbers.push(number);\n        }\n    }\n    new_numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpotw1shg8.rs:13:5\n   |\n\
    5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                     ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 |     new_numbers\n   |     ^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .dedup()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp3798szab.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        if result.iter().all(|&x| x == i) {\n            continue;\n    \
    \    }\n        result.push(n);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `usize`\n --> /tmp/tmpphbjte9l.rs:8:37\n\
    \  |\n8 |         if result.iter().all(|&x| x == i) {\n  |                   \
    \                  ^^ no implementation for `&isize == usize`\n  |\n  = help:\
    \ the trait `PartialEq<usize>` is not implemented for `&isize`\n  = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n            f32\n \
    \           f64\n            i128\n            i16\n            i32\n        \
    \    i64\n            i8\n            isize\n          and 6 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpphbjte9l.rs:13:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n13 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut last: Vec<isize>\
    \ = Vec::new();\n    for number in numbers {\n        if !last.contains(&number)\
    \ {\n            result.push(number);\n            last.push(number);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpos6i29jc.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut number = numbers[0]; // Assumes numbers is sorted.\n\
    \    let mut seen: HashSet<_> = HashSet::new();\n\n    for n in numbers {\n  \
    \      if !seen.insert(n).inserted {\n            number = n;\n        }\n   \
    \ }\n\n    vec![number]\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmptamd_ccd.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmptamd_ccd.rs:7:32\n  |\n7 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates = 0;\n    let mut index = 0;\n    while\
    \ index < numbers.len() {\n        if numbers[index] == numbers[index + 1] {\n\
    \            duplicates += 1;\n        } else {\n            if duplicates ==\
    \ 0 {\n                index += 1;\n            } else {\n                index\
    \ += 1;\n            }\n            duplicates = 0;\n        }\n    }\n    numbers.drain(..index)\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbbvsh0up.rs:20:5\n   |\n\
    5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                     ---------- expected `Vec<isize>` because\
    \ of return type\n...\n20 |     numbers.drain(..index)\n   |     ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `std::vec::Drain`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `std::vec::Drain<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.dedup()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwvdledwx.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup()\n  |     ^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmpwvdledwx.rs:6:13\n\
    \  |\n6 |     numbers.dedup()\n  |     ------- ^^^^^ this call modifies `numbers`\
    \ in-place\n  |     |\n  |     you probably want to use this value after calling\
    \ the method...\n  = note: ...instead of the `()` output of method `dedup`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_set = std::collections::HashSet::new();\n \
    \   unique_set\n        .into_iter()\n        .filter(|x| numbers.iter().any(|y|\
    \ x == y))\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp8hulk82u.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut last = usize::MAX;\n    let mut res = Vec::with_capacity(numbers.len());\n\
    \    for number in numbers.iter() {\n        if last == number {\n           \
    \ continue;\n        }\n        res.push(number);\n        last = number;\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg9jh7y3_.rs:9:20\n  |\n9 |\
    \         if last == number {\n  |                    ^^^^^^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg9jh7y3_.rs:13:16\n\
    \   |\n6  |     let mut last = usize::MAX;\n   |                    ----------\
    \ expected due to this value\n...\n13 |         last = number;\n   |         \
    \       ^^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg9jh7y3_.rs:15:5\n   |\n5  | fn remove_duplicates(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                              ----------\
    \ expected `Vec<isize>` because of return type\n...\n15 |     res\n   |     ^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .dedup()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpvocltovk.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers = numbers.into_iter().collect::<Vec<isize>>();\n\
    \    numbers.dedup();\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpr71e3ktb.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .iter()\n        .dedup()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp0f3c3cv3.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates: Vec<isize> = Vec::new();\n    let mut\
    \ last: isize = 0;\n    for n in numbers {\n        if n == last {\n         \
    \   duplicates.push(n);\n        } else {\n            last = n;\n        }\n\
    \    }\n    duplicates.sort_unstable();\n    duplicates\n}\n\nfn main() {\n  \
    \  let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpjy98lcf8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut map = HashMap::new();\n    for n in numbers {\n  \
    \      map.insert(n, 1);\n    }\n    map.into_iter().filter_map(|v| {\n      \
    \  if v.1 == v.2 {\n            None\n        } else {\n            Some(v.1)\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmphs6e10w_.rs:6:19\n  |\n6 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for value in numbers {\n   \
    \     if !result.contains(value) {\n            result.push(value);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph29igiqg.rs:8:29\n  |\n8 |\
    \         if !result.contains(value) {\n  |                             ^^^^^\n\
    \  |                             |\n  |                             expected reference,\
    \ found `isize`\n  |                             help: consider borrowing here:\
    \ `&value`\n  |\n  = note: expected reference `&_`\n                  found type\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.size());\n   \
    \ let mut seen = HashSet::new();\n    for i in numbers.iter() {\n        if seen.insert(*i).is_none()\
    \ {\n            result.push(*i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpf0oouq_t.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: no\
    \ method named `size` found for struct `Vec<isize>` in the current scope\n -->\
    \ /tmp/tmpf0oouq_t.rs:6:49\n  |\n6 |     let mut result = Vec::with_capacity(numbers.size());\n\
    \  |                                                 ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.into_iter().distinct().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmplxhwjfv8.rs:6:25\n  |\n6 |     numbers.into_iter().distinct().collect()\n\
    \  |                         ^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique: Vec<isize> = Vec::new();\n    for number in\
    \ numbers {\n        if !unique.contains(&number) {\n            unique.push(number);\n\
    \        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfi1ne4fq.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    for\
    \ number in numbers.iter().cloned() {\n        if result.contains(&number) {\n\
    \            continue;\n        }\n        result.push(number);\n        i +=\
    \ 1;\n        if i > numbers.len() / 2 {\n            break;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp6thfp9ok.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers_set = HashSet::new();\n    numbers_set.insert(numbers.clone());\n\
    \    numbers_set.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpf79rvd14.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for num in numbers {\n        if !seen.contains(&num) {\n            result.push(num);\n\
    \            seen.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpht4ut1rp.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976044
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<_> = HashSet::new();\n    numbers.dedup();\n\
    \    numbers.clone_from_slice(seen.iter().cloned().collect::<Vec<_>>().as_slice());\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3k3otnk_.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp3k3otnk_.rs:6:32\n  |\n6 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut duplicates = vec![];\n    for &x in numbers {\n        if duplicates.contains(&x)\
    \ {\n            continue;\n        }\n\n        duplicates.push(numbers.remove(numbers.iter().find(|&x|\
    \ x == x)));\n    }\n\n    duplicates\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa820lsya.rs:11:9\n   |\n\
    11 |     for &x in numbers {\n   |         ^^    ------- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa820lsya.rs:16:40\n   |\n16 |         duplicates.push(numbers.remove(numbers.iter().find(|&x|\
    \ x == x)));\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .dedup()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp3798szab.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut duplicates = Vec::new();\n    for number in numbers\
    \ {\n        if !duplicates.contains(&number) {\n            duplicates.push(number);\n\
    \        }\n    }\n    duplicates\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp14fqdkdq.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    for num in numbers {\n\
    \        if seen.insert(num).is_some() {\n            continue;\n        }\n \
    \       numbers.remove(num);\n        numbers.push(num);\n    }\n    numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpz7gi35_4.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz7gi35_4.rs:11:24\n   |\n11 |         numbers.remove(num);\n\
    \   |                        ^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |         numbers.remove(num.try_into().unwrap());\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 101
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = numbers;\n    let mut i = 1;\n    while result.len() > 0\
    \ && i < result.len() {\n        if result[i - 1] == result[i] {\n           \
    \ result.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjsny_0pk.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers\n        .into_iter()\n        .dedup()\n        .cloned()\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp074s8s1r.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "/// From a vector of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1,\
    \ 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n    numbers.iter().filter(|&x| numbers.iter().count(|&y| x ==\
    \ y)).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpn22eg0dl.rs:6:47\n    |\n6   |     numbers.iter().filter(|&x|\
    \ numbers.iter().count(|&y| x == y)).collect()\n    |                        \
    \                       ^^^^^ ----------- supplied 1 argument\n    |         \
    \                                      |\n    |                              \
    \                 expected 0 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn22eg0dl.rs:6:32\n  |\n\
    6 |     numbers.iter().filter(|&x| numbers.iter().count(|&y| x == y)).collect()\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found `usize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpn22eg0dl.rs:6:67\n\
    \     |\n6    |     numbers.iter().filter(|&x| numbers.iter().count(|&y| x ==\
    \ y)).collect()\n     |                                                      \
    \             ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976098
