language: rs
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            filtered_strings.push(*s);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpt808igky.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n   --> /tmp/tmpt808igky.rs:10:35\n\
    \    |\n10  |             filtered_strings.push(*s);\n    |                  \
    \            ---- ^^ doesn't have a size known at compile-time\n    |        \
    \                      |\n    |                              required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpt808igky.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n   --> /tmp/tmpt808igky.rs:7:32\n    |\n\
    7   |     let mut filtered_strings = Vec::new();\n    |                      \
    \          ^^^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt808igky.rs:13:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                    "
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = Vec::new();\n    for\
    \ string in strings {\n        if string.starts_with(prefix) {\n            filtered_strings.push(*string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppt59n64r.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmppt59n64r.rs:10:35\n    |\n10  |             filtered_strings.push(*string);\n\
    \    |                              ---- ^^^^^^^ doesn't have a size known at\
    \ compile-time\n    |                              |\n    |                  \
    \            required by a bound introduced by this call\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec::<T,\
    \ A>::push`\n\nerror[E0277]: the size for values of type `str` cannot be known\
    \ at compilation time\n   --> /tmp/tmppt59n64r.rs:7:32\n    |\n7   |     let mut\
    \ filtered_strings = Vec::new();\n    |                                ^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Vec::<T>::new`\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmppt59n64r.rs:7:32\n    |\n7   |     let mut filtered_strings\
    \ = Vec::new();\n    |                                ^^^ doesn't have a size\
    \ known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppt59n64r.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.len() == 0 {\n        strings\n   \
    \ } else {\n        let mut ret: Vec<String> = vec![];\n        for i in strings.iter().rev()\
    \ {\n            if i.starts_with(prefix) {\n                ret.push(i);\n  \
    \          }\n        }\n        ret\n    }\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdl9j34sb.rs:12:30\n     |\n12   |             if i.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n12   |          \
    \   if i.starts_with(&prefix) {\n     |                              +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdl9j34sb.rs:13:26\n   |\n13 |              \
    \   ret.push(i);\n   |                          ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                          |\n   |              \
    \            expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpy0i_elz0.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpy0i_elz0.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    if prefix.len()\
    \ != prefix.chars().count(|c| *c != '\\'') {\n        panic!(\"Invalid prefix\
    \ '{}' cannot be used as an identifier\", prefix);\n    }\n\n    let mut filtered:\
    \ Vec<String> = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp_5gap8w3.rs:8:46\n\
    \  |\n8 |     if prefix.len() != prefix.chars().count(|c| *c != '\\'') {\n  |\
    \                                              ^ consider giving this closure\
    \ parameter a type\n  |\n  = note: type must be known at this point\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_5gap8w3.rs:8:39\n\
    \    |\n8   |     if prefix.len() != prefix.chars().count(|c| *c != '\\'') {\n\
    \    |                                       ^^^^^ -------------- supplied 1 argument\n\
    \    |                                       |\n    |                        \
    \               expected 0 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n\
    \    --> /tmp/tmp_5gap8w3.rs:14:26\n     |\n14   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n14   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277, E0282.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings = strings.into_iter().filter(|s|\
    \ s.starts_with(prefix));\n    strings.collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmj9u97z4.rs:7:68\n     |\n7    |     let mut strings = strings.into_iter().filter(|s|\
    \ s.starts_with(prefix));\n     |                                            \
    \            ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                        |\n     |     \
    \                                                   required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n7    |     let mut\
    \ strings = strings.into_iter().filter(|s| s.starts_with(&prefix));\n     |  \
    \                                                                  +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            res.push(s);\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmph0yigswk.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    let mut filtered\
    \ = vec![];\n    while let Some(item) = iter.next() {\n        if item.starts_with(prefix)\
    \ {\n            filtered.push(item);\n        }\n    }\n    filtered\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcp04jgm6.rs:10:29\n     |\n10   |         if item.starts_with(prefix)\
    \ {\n     |                 ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                 |\n     |                 required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |         if\
    \ item.starts_with(&prefix) {\n     |                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcp04jgm6.rs:14:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n14 |     filtered\n   |     ^^^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = Vec::new();\n\n   \
    \ for string in strings {\n        if string.starts_with(prefix) {\n         \
    \   filtered_strings.push(string);\n        }\n    }\n\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpw0s2te3n.rs:10:31\n     |\n10   |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefixes = HashSet::new();\n    prefixes.insert(prefix.as_str());\n\
    \    let mut matches = Vec::new();\n    for (i, s) in strings.into_iter().enumerate()\
    \ {\n        if prefixes.contains(s.as_str()) {\n            matches.push(s);\n\
    \        }\n    }\n    matches\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpelmbn4dy.rs:7:24\n  |\n7 |     let mut prefixes = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ if s.starts_with(prefix) {\n            Some(s)\n        } else {\n        \
    \    None\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2wm0c__u.rs:9:42\n     |\n9    |         .filter_map(|s| if s.starts_with(prefix)\
    \ {\n     |                              ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                              |\n     |      \
    \                        required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| if s.starts_with(&prefix)\
    \ {\n     |                                          +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp2wm0c__u.rs:14:10\n     |\n14   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|&x|\
    \ x.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpyjyxht20.rs:9:36\n     |\n9    |         .filter(|&x| x.starts_with(prefix))\n\
    \     |                        ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|&x| x.starts_with(&prefix))\n     |  \
    \                                  +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpyjyxht20.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|string|\
    \ string.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj2niym_4.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpj2niym_4.rs:10:10\n     |\n10   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n    prefix.pop();\n\
    \n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd8bg8lqb.rs:12:26\n     |\n12   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n12   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    iter.for_each(|s|\
    \ {\n        if s.starts_with(prefix) {\n            iter.next();\n        }\n\
    \    });\n    iter\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_l5nzzi.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpf_l5nzzi.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     iter\n   |     ^^^^ expected struct `Vec`, found struct\
    \ `std::slice::Iter`\n   |\n   = note: expected struct `Vec<String>`\n       \
    \       found struct `std::slice::Iter<'_, String>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.len() < 2 {\n        return vec![];\n\
    \    }\n    let mut filtered_strings = vec![];\n    for s in strings {\n     \
    \   if s.starts_with(prefix) {\n            filtered_strings.push(*s);\n     \
    \   }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_4i2lv_d.rs:12:26\n     |\n12   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n12   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n   --> /tmp/tmp_4i2lv_d.rs:13:35\n\
    \    |\n13  |             filtered_strings.push(*s);\n    |                  \
    \            ---- ^^ doesn't have a size known at compile-time\n    |        \
    \                      |\n    |                              required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmp_4i2lv_d.rs:10:32\n    |\n10  |     let mut filtered_strings = vec![];\n\
    \    |                                ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec::<T>::new`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmp_4i2lv_d.rs:10:32\n    |\n10  |     let mut filtered_strings = vec![];\n\
    \    |                                ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec`\n    = note: this error originates in the macro `vec` (in\
    \ Nig"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings_copy = strings.clone();\n    strings_copy.sort_unstable();\n\
    \    for (index, string) in strings_copy.iter().enumerate() {\n        if string.starts_with(prefix)\
    \ {\n            strings_copy.split_off(index);\n            return strings_copy;\n\
    \        }\n    }\n    strings_copy\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpl2kr6ak_.rs:10:31\n     |\n10   |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut index = strings.iter().position(|x| x.starts_with(prefix));\n\
    \    strings.split_off(index);\n    strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpjyx4za8h.rs:7:63\n     |\n7    |     let mut index = strings.iter().position(|x|\
    \ x.starts_with(prefix));\n     |                                            \
    \       ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n  \
    \   |                                                   |\n     |            \
    \                                       required by a bound introduced by this\
    \ call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     let mut index = strings.iter().position(|x|\
    \ x.starts_with(&prefix));\n     |                                           \
    \                    +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjyx4za8h.rs:8:23\n\
    \  |\n8 |     strings.split_off(index);\n  |                       ^^^^^ expected\
    \ `usize`, found enum `Option`\n  |\n  = note: expected type `usize`\n       \
    \      found enum `Option<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            strings\n        } else {\n            continue;\n        }\n\
    \    }\n    strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9vpkhpai.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9vpkhpai.rs:9:13\n   |\n8  | /         if s.starts_with(prefix) {\n\
    9  | |             strings\n   | |             ^^^^^^^ expected `()`, found struct\
    \ `Vec`\n10 | |         } else {\n11 | |             continue;\n12 | |       \
    \  }\n   | |_________- expected this to be `()`\n   |\n   = note: expected unit\
    \ type `()`\n                 found struct `Vec<String>`\nhelp: you might have\
    \ meant to return this value\n   |\n9  |             return strings;\n   |   \
    \          ++++++        +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut out = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            out.push(s);\n        }\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp10h5adus.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.into_string().ok().filter(|s| s.starts_with(prefix)).collect())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_string` found for reference `&String`\
    \ in the current scope\n --> /tmp/tmpety6ysxj.rs:9:27\n  |\n9 |         .filter_map(|s|\
    \ s.into_string().ok().filter(|s| s.starts_with(prefix)).collect())\n  |     \
    \                      ^^^^^^^^^^^ method not found in `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    iter.by_ref().take_while(|&s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4iif3ilg.rs:8:49\n     |\n8    |     iter.by_ref().take_while(|&s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |     iter.by_ref().take_while(|&s| s.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp4iif3ilg.rs:8:58\n     |\n8    |     iter.by_ref().take_while(|&s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                       ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let prefix = prefix.to_owned();\n    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpquf0s_z7.rs:10:39\n     |\n10   |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n10   |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpquf0s_z7.rs:10:25\n   |\n10 |         .filter_map(|s| s.starts_with(prefix))\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n   |\n   = note: expected enum `Option<_>`\n              found type\
    \ `bool`\nhelp: try wrapping the expression in `Some`\n   |\n10 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n   |                         +++++           \
    \          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.into_iter().filter(|s|\
    \ {\n        !s.starts_with(prefix)\n    });\n    iter.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnrfnto3p.rs:8:24\n     |\n8    |         !s.starts_with(prefix)\n\
    \     |            ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |            |\n     |            required by a bound introduced by this\
    \ call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         !s.starts_with(&prefix)\n\
    \     |                        +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return Vec::new();\n\
    \    }\n    if prefix.len() == 0 {\n        return strings;\n    }\n    strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu7h5moxi.rs:13:49\n     |\n13   |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n13   |     strings.iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu7h5moxi.rs:13:35\n   |\n13 |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n   |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     strings.iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \   |                                   +++++                     +\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefixed: String = \"\";\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            prefixed += s;\n\
    \        } else {\n            break;\n        }\n    }\n    strings.iter().filter(|s|\
    \ s != prefixed).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpursvf3ps.rs:7:32\n  |\n7 |\
    \     let mut prefixed: String = \"\";\n  |                       ------   ^^-\
    \ help: try using a conversion method: `.to_string()`\n  |                   \
    \    |        |\n  |                       |        expected struct `String`,\
    \ found `&str`\n  |                       expected due to this\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpursvf3ps.rs:9:26\n\
    \     |\n9    |         if s.starts_with(prefix) {\n     |              -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n\
    \     |              required by a bound introduced by this call\n     |\n   \
    \  = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     | \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpursvf3ps.rs:10:25\n\
    \   |\n10 |             prefixed += s;\n   |                         ^\n   | \
    \                        |\n   |                         expected `&str`, found\
    \ struct `String`\n   |                         help: consider borrowing here:\
    \ `&s`\n\nerror[E0277]: can't compare `&&String` with `String`\n  --> /tmp/tmpursvf3ps.rs:15:33\n\
    \   |\n15 |     strings.iter().filter(|s| s != prefixed).collect()\n   |     \
    \                            ^^ no implementation for `&&String == String`\n \
    \  |\n   = help: the trait `PartialEq<String>` is not implemented for `&&String`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a,"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp72o34br6.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp72o34br6.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let prefix_bytes = prefix.bytes();\n\n    for\
    \ s in strings {\n        if !s.starts_with(prefix) {\n            continue;\n\
    \        }\n\n        if prefix_bytes.len() == s.len() {\n            continue;\n\
    \        }\n\n        let mut i = 0;\n        while i < prefix_bytes.len() &&\
    \ i < s.len() {\n            if prefix_bytes[i] != s[i] {\n                break;\n\
    \            }\n\n            i += 1;\n        }\n\n        if i == s.len() {\n\
    \            continue;\n        }\n\n        return vec![];\n    }\n\n    strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpq9nmzj8i.rs:10:27\n     |\n10   |         if !s.starts_with(prefix)\
    \ {\n     |               ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |         if\
    \ !s.starts_with(&prefix) {\n     |                           +\n\nerror[E0608]:\
    \ cannot index into a value of type `std::str::Bytes<'_>`\n  --> /tmp/tmpq9nmzj8i.rs:20:16\n\
    \   |\n20 |             if prefix_bytes[i] != s[i] {\n   |                ^^^^^^^^^^^^^^^\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpq9nmzj8i.rs:20:35\n\
    \   |\n20 |             if prefix_bytes[i] != s[i] {\n   |                   \
    \                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0608.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|x|\
    \ x.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj0vf4inu.rs:9:35\n     |\n9    |         .filter(|x| x.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|x| x.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpj0vf4inu.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for string in\
    \ strings {\n        if string.starts_with(prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvloexaq7.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push_str(\"\
    *\");\n    strings.iter().filter(|s| !s.starts_with(prefix)).collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpi5xq8dt8.rs:9:46\n     |\n9    |     strings.iter().filter(|s| !s.starts_with(prefix)).collect()\n\
    \     |                                  ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                  |\n     |  \
    \                                required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |     strings.iter().filter(|s| !s.starts_with(&prefix)).collect()\n\
    \     |                                              +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpi5xq8dt8.rs:9:55\n     |\n9    |     strings.iter().filter(|s|\
    \ !s.starts_with(prefix)).collect()\n     |                                  \
    \                     ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    let\
    \ prefix_len = prefix.len();\n    strings\n        .iter()\n        .filter(|s|\
    \ {\n            s.starts_with(prefix) && s.len() >= prefix_len\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqtbnal74.rs:12:27\n     |\n12   |             s.starts_with(prefix)\
    \ && s.len() >= prefix_len\n     |               ----------- ^^^^^^ expected an\
    \ implementor of trait `Pattern<'_>`\n     |               |\n     |         \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n12   |             s.starts_with(&prefix) && s.len() >= prefix_len\n\
    \     |                           +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpqtbnal74.rs:14:10\n\
    \     |\n14   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter_map(|s| {\n        if s.starts_with(prefix)\
    \ {\n            Some(Some(s))\n        } else {\n            Some(None)\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6f_t7_fx.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `Option<&String>`\n \
    \   --> /tmp/tmp6f_t7_fx.rs:13:8\n     |\n13   |     }).collect()\n     |    \
    \    ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=Option<&String>>`\n\
    \     |\n     = help: the trait `FromIterator<Option<&String>>` is not implemented\
    \ for `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        strings\n   \
    \ } else {\n        let mut iter = strings.iter().rev();\n        let mut has_prefix\
    \ = false;\n\n        let first = iter.next().unwrap();\n        loop {\n    \
    \        if !prefix.eq_ignore_ascii_case(first) {\n                break;\n  \
    \          }\n\n            has_prefix = true;\n            iter.next();\n   \
    \     }\n\n        if has_prefix {\n            iter.rev()\n        } else {\n\
    \            strings\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnbpkiihs.rs:24:13\n   |\n\
    6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n24 |             iter.rev()\n\
    \   |             ^^^^^^^^^^ expected struct `Vec`, found struct `Rev`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Rev<Rev<std::slice::Iter<'_,\
    \ String>>>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().starts_with(prefix.to_lowercase()))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzpj0u_1l.rs:9:54\n     |\n9    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpzpj0u_1l.rs:9:25\n  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = vec![];\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv_rqmepl.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = Vec::new();\n    for\
    \ (i, s) in strings.iter().enumerate() {\n        if s.starts_with(prefix) {\n\
    \            filtered_strings.push(s);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpkxhvh4gt.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkxhvh4gt.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     filtered_strings\n   |     ^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `&String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_owned();\n    let mut current_prefix = prefix.clone();\n    loop\
    \ {\n        match iter.next() {\n            None => break,\n            Some(entry)\
    \ => if entry.starts_with(&current_prefix) {\n                iter.skip(1);\n\
    \                current_prefix = prefix.clone();\n            } else {\n    \
    \            iter.next();\n                current_prefix = prefix.clone();\n\
    \            }\n        }\n    }\n    iter\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzsqlwkct.rs:22:5\n   |\n\
    6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n22 |     iter\n   |    \
    \ ^^^^ expected struct `Vec`, found struct `std::slice::Iter`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `std::slice::Iter<'_,\
    \ String>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let prefix_len = prefix.len();\n    strings.iter().filter(|s|\
    \ s.len() >= prefix_len).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpro85r3lc.rs:8:54\n     |\n\
    8    |     strings.iter().filter(|s| s.len() >= prefix_len).collect()\n     |\
    \                                                      ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n  \
    \  for s in strings {\n        if !s.starts_with(prefix) {\n            continue;\n\
    \        }\n        result.push(s);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj01sxe34.rs:9:27\n     |\n9    |         if !s.starts_with(prefix)\
    \ {\n     |               ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ !s.starts_with(&prefix) {\n     |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if !s.starts_with(prefix) {\n                None\n         \
    \   } else {\n                Some(s.trim_start_matches(prefix))\n           \
    \ }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmprcjjq75x.rs:10:31\n     |\n10   |             if !s.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if !s.starts_with(&prefix) {\n     |                               +\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmprcjjq75x.rs:13:43\n\
    \     |\n13   |                 Some(s.trim_start_matches(prefix))\n     |   \
    \                     ------------------ ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::trim_start_matches`\nhelp: consider borrowing\
    \ here\n     |\n13   |                 Some(s.trim_start_matches(&prefix))\n \
    \    |                                           +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&str`\n\
    \    --> /tmp/tmprcjjq75x.rs:16:10\n     |\n16   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('!');\n\
    \n    let mut filtered = Vec::new();\n    for &s in strings {\n        if s.starts_with(prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb5vux5wr.rs:11:9\n   |\n\
    11 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings = strings.into_iter();\n    strings.filter_map(|s|\
    \ {\n        if s.starts_with(prefix) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9r5p7_3s.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push_str(\"\
    -\");\n    let mut suffix = String::from(\"\");\n    suffix.push_str(prefix);\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect::<Vec<_>>()\n        .iter()\n        .filter(|s| s.ends_with(suffix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyup0iiii.rs:10:21\n   |\n\
    10 |     suffix.push_str(prefix);\n   |                     ^^^^^^\n   |     \
    \                |\n   |                     expected `&str`, found struct `String`\n\
    \   |                     help: consider borrowing here: `&prefix`\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpyup0iiii.rs:13:35\n\
    \     |\n13   |         .filter(|s| s.starts_with(prefix))\n     |           \
    \            ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                       |\n     |                       required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n13   |         .filter(|s|\
    \ s.starts_with(&prefix))\n     |                                   +\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpyup0iiii.rs:16:33\n\
    \   |\n16 |         .filter(|s| s.ends_with(suffix))\n   |                   \
    \    --------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n   |   \
    \                    |\n   |                       required by a bound introduced\
    \ by this call\n   |\n   = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n   = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nhelp: consider borrowing here\n   |\n16 |         .filter(|s|\
    \ s.ends_with(&suffix))\n   |                                 +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&&String`\n    --> /tmp/tmpyup0iiii.rs:17:10\n     |\n17   |      \
    \   .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&&String>`\n     |\n     = help: the trait\
    \ `FromIterator<&&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromItera"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let prefix = prefix.to_string();\n    let mut\
    \ result = vec![];\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu9xco8ag.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.into_iter().filter_map(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3yhu6lix.rs:7:54\n     |\n7    |     strings.into_iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \       ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n  \
    \   |                                          |\n     |                     \
    \                     required by a bound introduced by this call\n     |\n  \
    \   = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n7    |     strings.into_iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                      +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3yhu6lix.rs:7:40\n  |\n7 |     strings.into_iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                      \
    \  ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n7 |     strings.into_iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \  |                                        +++++                     +\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n    let mut\
    \ strings = strings.to_owned();\n    while !strings.is_empty() {\n        if strings.len()\
    \ > prefix.len() {\n            strings.pop();\n            continue;\n      \
    \  }\n        if strings[0] == prefix {\n            strings.remove(0)\n     \
    \   } else {\n            break;\n        }\n    }\n    strings\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr3_0hf9k.rs:15:13\n   |\n\
    14 | /         if strings[0] == prefix {\n15 | |             strings.remove(0)\n\
    \   | |             ^^^^^^^^^^^^^^^^^ expected `()`, found struct `String`\n16\
    \ | |         } else {\n17 | |             break;\n18 | |         }\n   | |_________-\
    \ expected this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n\
    15 |             strings.remove(0);\n   |                              +\nhelp:\
    \ consider using a semicolon here\n   |\n18 |         };\n   |          +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let prefix_index = strings.iter().position(|s|\
    \ s.starts_with(prefix));\n    strings.drain(prefix_index).into_iter()\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3d_wk87b.rs:7:66\n     |\n7    |     let prefix_index = strings.iter().position(|s|\
    \ s.starts_with(prefix));\n     |                                            \
    \          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                      |\n     |       \
    \                                               required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n7    |     let prefix_index\
    \ = strings.iter().position(|s| s.starts_with(&prefix));\n     |             \
    \                                                     +\n\nerror[E0277]: the trait\
    \ bound `Option<usize>: RangeBounds<usize>` is not satisfied\n    --> /tmp/tmp3d_wk87b.rs:8:19\n\
    \     |\n8    |     strings.drain(prefix_index).into_iter()\n     |          \
    \   ----- ^^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `Option<usize>`\n\
    \     |             |\n     |             required by a bound introduced by this\
    \ call\n     |\n     = help: the following other types implement trait `RangeBounds<T>`:\n\
    \               (Bound<&'a T>, Bound<&'a T>)\n               (Bound<T>, Bound<T>)\n\
    \               RangeFrom<&T>\n               RangeFrom<T>\n               RangeFull\n\
    \               RangeInclusive<&T>\n               RangeInclusive<T>\n       \
    \        RangeTo<&T>\n             and 5 others\nnote: required by a bound in\
    \ `Vec::<T, A>::drain`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3d_wk87b.rs:8:5\n\
    \  |\n6 | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n  |                                                              -----------\
    \ expected `Vec<String>` because of return type\n7 |     let prefix_index = strings.iter().position(|s|\
    \ s.starts_with(prefix));\n8 |     strings."
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp8dmpcyzx.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return vec![];\n\
    \    }\n    let len = strings.len();\n    let mut strings = strings.iter().cloned();\n\
    \    let mut first = true;\n    for &s in strings {\n        if first {\n    \
    \        first = false;\n        } else {\n            if !s.starts_with(prefix)\
    \ {\n                strings.retain(|s| !s.starts_with(prefix));\n           \
    \     break;\n            }\n        }\n    }\n    strings\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq4zck_m6.rs:13:9\n   |\n\
    13 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0599]: no method named `retain` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmpq4zck_m6.rs:18:25\n   |\n18 |                 strings.retain(|s|\
    \ !s.starts_with(prefix));\n   |                         ^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, String>>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpq4zck_m6.rs:23:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n23 |     strings\n   |     ^^^^^^^ expected struct `Vec`, found struct\
    \ `Cloned`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Cloned<std::slice::Iter<'_, String>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp72o34br6.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp72o34br6.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    iter.for_each(|s| {\n        if s.starts_with(prefix)\
    \ {\n            iter.next();\n            iter.collect::<Vec<_>>()\n        }\
    \ else {\n            Ok(())\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpkqvwz65x.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkqvwz65x.rs:12:13\n   |\n10 | /         if s.starts_with(prefix) {\n\
    11 | |             iter.next();\n12 | |             iter.collect::<Vec<_>>()\n\
    \   | |             ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Vec`\n\
    13 | |         } else {\n14 | |             Ok(())\n15 | |         }\n   | |_________-\
    \ expected this to be `()`\n   |\n   = note: expected unit type `()`\n       \
    \          found struct `Vec<&String>`\nhelp: consider using a semicolon here\n\
    \   |\n12 |             iter.collect::<Vec<_>>();\n   |                      \
    \               +\nhelp: consider using a semicolon here\n   |\n15 |         };\n\
    \   |          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkqvwz65x.rs:14:13\n\
    \   |\n10 | /         if s.starts_with(prefix) {\n11 | |             iter.next();\n\
    12 | |             iter.collect::<Vec<_>>()\n13 | |         } else {\n14 | | \
    \            Ok(())\n   | |             ^^^^^^ expected `()`, found enum `Result`\n\
    15 | |         }\n   | |_________- expected this to be `()`\n   |\n   = note:\
    \ expected unit type `()`\n                   found enum `Result<(), _>`\nhelp:\
    \ consider using a semicolon here\n   |\n14 |             Ok(());\n   |      \
    \             +\nhelp: consider using a semicolon here\n   |\n15 |         };\n\
    \   |          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkqvwz65x.rs:9:5\n\
    \   |\n6  |   fn filter_by_prefix(strings: Vec"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp72o34br6.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp72o34br6.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix_idx = strings.iter().position(|x|\
    \ x == prefix).unwrap();\n    let mut strings = strings.clone();\n    strings.retain(|x|\
    \ {\n        if x.starts_with(prefix) {\n            false\n        } else {\n\
    \            prefix_idx += 1;\n            true\n        }\n    });\n    strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&String` with `String`\n --> /tmp/tmppz8xl6h7.rs:7:56\n\
    \  |\n7 |     let mut prefix_idx = strings.iter().position(|x| x == prefix).unwrap();\n\
    \  |                                                        ^^ no implementation\
    \ for `&String == String`\n  |\n  = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n  = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n          \
    \  <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a, str>>>\n\
    \            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a,\
    \ str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n\
    \            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmppz8xl6h7.rs:10:26\n\
    \     |\n10   |         if x.starts_with(prefix) {\n     |              -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n\
    \     |              required by a bound introduced by this call\n     |\n   \
    \  = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n10   |         if x.starts_with(&prefix) {\n     | \
    \                         +\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|string| string.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsjvg0pcn.rs:7:55\n     |\n7    |     strings.iter().filter(|string|\
    \ string.starts_with(prefix)).collect()\n     |                              \
    \             ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                           |\n     |                  \
    \                         required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n7    |     strings.iter().filter(|string| string.starts_with(&prefix)).collect()\n\
    \     |                                                       +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpsjvg0pcn.rs:7:64\n     |\n7    |     strings.iter().filter(|string|\
    \ string.starts_with(prefix)).collect()\n     |                              \
    \                                  ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    iter.for_each(|s|\
    \ {\n        if !s.starts_with(prefix) {\n            iter.next();\n        }\n\
    \    });\n    iter\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcnx8u6ys.rs:9:27\n     |\n9    |         if !s.starts_with(prefix)\
    \ {\n     |               ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ !s.starts_with(&prefix) {\n     |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcnx8u6ys.rs:13:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     iter\n   |     ^^^^ expected struct `Vec`, found\
    \ struct `std::slice::Iter`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `std::slice::Iter<'_, String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.as_bytes())\n        .filter(|&b| b.starts_with(prefix))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxx2ef7mj.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.as_bytes())\n  |                         ^^^^^^^^^^^^\
    \ expected enum `Option`, found `&[u8]`\n  |\n  = note:   expected enum `Option<_>`\n\
    \          found reference `&[u8]`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.as_bytes()))\n  |                   \
    \      +++++            +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|string|\
    \ string.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj2niym_4.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpj2niym_4.rs:10:10\n     |\n10   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    strings.into_iter().for_each(|s|\
    \ if s.starts_with(prefix) {\n        result.push(s)\n    });\n    result\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3dmyjzh8.rs:8:55\n     |\n8    |     strings.into_iter().for_each(|s|\
    \ if s.starts_with(prefix) {\n     |                                         \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                          |\n     |                         \
    \                  required by a bound introduced by this call\n     |\n     =\
    \ note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n8    |     strings.into_iter().for_each(|s| if s.starts_with(&prefix)\
    \ {\n     |                                                       +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|&s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp128xvr9v.rs:9:36\n     |\n9    |         .filter(|&s| s.starts_with(prefix))\n\
    \     |                        ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|&s| s.starts_with(&prefix))\n     |  \
    \                                  +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp128xvr9v.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter_map(|s| {\n        if s.starts_with(prefix)\
    \ {\n            Some(s)\n        } else {\n            None\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5ww3r8mq.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5ww3r8mq.rs:7:5\n   |\n6  |   fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                           ----------- expected `Vec<String>` because of return\
    \ type\n7  | /     strings.iter().filter_map(|s| {\n8  | |         if s.starts_with(prefix)\
    \ {\n9  | |             Some(s)\n10 | |         } else {\n11 | |             None\n\
    12 | |         }\n13 | |     })\n   | |______^ expected struct `Vec`, found struct\
    \ `FilterMap`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `FilterMap<std::slice::Iter<'_, String>, [closure@/tmp/tmp5ww3r8mq.rs:7:31:\
    \ 13:6]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpy0i_elz0.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpy0i_elz0.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return strings;\n\
    \    }\n    strings\n        .iter()\n        .filter_map(|x| x.is_empty() ||\
    \ x.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzwalxsjx.rs:12:55\n     |\n12   |         .filter_map(|x| x.is_empty()\
    \ || x.starts_with(prefix))\n     |                                          \
    \ ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |  \
    \                                         |\n     |                          \
    \                 required by a bound introduced by this call\n     |\n     =\
    \ note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n12   |         .filter_map(|x| x.is_empty() || x.starts_with(&prefix))\n\
    \     |                                                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzwalxsjx.rs:12:25\n   |\n12 |         .filter_map(|x|\
    \ x.is_empty() || x.starts_with(prefix))\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |         .filter_map(|x| Some(x.is_empty() || x.starts_with(prefix)))\n\
    \   |                         +++++                                     +\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(Some(s))\n \
    \           } else {\n                Some(None)\n            }\n        })\n\
    \        .flatten()\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpyfbx4fs_.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpyfbx4fs_.rs:17:10\n     |\n17   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpheiyhln3.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpheiyhln3.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzuucr3_a.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut output = Vec::new();\n    for s in strings.iter()\
    \ {\n        if s.starts_with(prefix) {\n            output.push(s);\n       \
    \ }\n    }\n    output\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcxyn5pab.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcxyn5pab.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     output\n   |     ^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter(|string| string.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_lldaihy.rs:8:45\n     |\n8    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp_lldaihy.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            prefixes.push(s);\n\
    \        }\n    }\n\n    prefixes\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpn1pllbzn.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return strings;\n\
    \    }\n\n    let mut iter = strings.iter();\n    let mut prefixed_strings = Vec::new();\n\
    \    let mut prefixed_iter = prefixed_strings.iter();\n    let mut prefix_len\
    \ = prefix.len();\n    while let Some(next) = iter.next() {\n        if next.starts_with(prefix)\
    \ {\n            *prefixed_iter = next;\n            *prefixed_iter += prefix.len();\n\
    \            prefixed_iter += 1;\n        } else {\n            *prefixed_iter\
    \ += prefix_len;\n            prefixed_iter += 1;\n        }\n        prefix_len\
    \ += 1;\n    }\n\n    if prefix_len == prefix.len() {\n        prefixed_strings\n\
    \    } else {\n        prefixed_strings\n            .drain(..(prefixed_strings.len()\
    \ - prefix_len))\n            .chain(prefixed_strings)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpg7x99vfl.rs:16:29\n     |\n16   |         if next.starts_with(prefix)\
    \ {\n     |                 ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                 |\n     |                 required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n16   |         if\
    \ next.starts_with(&prefix) {\n     |                             +\n\nerror[E0614]:\
    \ type `std::slice::Iter<'_, _>` cannot be dereferenced\n  --> /tmp/tmpg7x99vfl.rs:17:13\n\
    \   |\n17 |             *prefixed_iter = next;\n   |             ^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `std::slice::Iter<'_, _>` cannot be dereferenced\n  --> /tmp/tmpg7x99vfl.rs:18:13\n\
    \   |\n18 |             *prefixed_iter += prefix.len();\n   |             ^^^^^^^^^^^^^^\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `std::slice::Iter<'_,\
    \ _>`\n  --> /tmp/tmpg7x99vfl.rs:19:13\n   |\n19 |             prefixed_iter +=\
    \ 1;\n   |             -------------^^^^^\n   |             |\n   |          \
    \   cannot use `+=` on type `std::slice::Iter<'_, _>`\n\nerror[E0614]: type `std::slice::Iter<'_,\
    \ _>` cannot be dereferenced\n  --> /tmp/tmpg7x99vfl.rs:21:13\n   |\n21 |    \
    \         *prefixed_iter += prefix_len;\n   |             ^^^^^^^^^^^^^^\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `std::slice::Iter<'_,\
    \ _>`\n  --> /tmp/tmpg7x99vfl.rs:22:13\n   |\n22 |             prefixed_iter +=\
    \ 1;\n   |             -------------^^^^^\n   |             |\n   |          \
    \   cannot use `+=` on type `std::slice::Iter<'_, _>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg7x99vfl.rs:30:9\n   |\n6  |   fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                        --"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|&s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp7cnmowqo.rs:9:36\n     |\n9    |         .filter(|&s| s.starts_with(prefix))\n\
    \     |                        ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|&s| s.starts_with(&prefix))\n     |  \
    \                                  +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return vec![];\n\
    \    }\n    strings\n        .iter()\n        .filter_map(|string| {\n       \
    \     if string.starts_with(prefix) {\n                Some(string)\n        \
    \    } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnl2y13nv.rs:13:35\n     |\n13   |             if string.starts_with(prefix)\
    \ {\n     |                       ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                       |\n     |                \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n13   |             if string.starts_with(&prefix) {\n     |  \
    \                                 +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpnl2y13nv.rs:19:10\n\
    \     |\n19   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = strings.clone();\n\
    \    for str in filtered_strings.iter() {\n        if !str.starts_with(prefix)\
    \ {\n            filtered_strings.remove(str);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpk3rjzr8v.rs:9:29\n     |\n9    |         if !str.starts_with(prefix)\
    \ {\n     |                 ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                 |\n     |                 required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ !str.starts_with(&prefix) {\n     |                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk3rjzr8v.rs:10:37\n   |\n10 |             filtered_strings.remove(str);\n\
    \   |                                     ^^^ expected `usize`, found `&String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.into_iter().filter_map(|string| {\n  \
    \      if string.starts_with(prefix) {\n            Some(string)\n        } else\
    \ {\n            None\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpk50lzoly.rs:8:31\n     |\n8    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n8    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            res.push(s);\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmph0yigswk.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n\n    loop {\n        if iter.next().unwrap().starts_with(prefix)\
    \ {\n            iter.filter_map(|s| {\n                if !s.starts_with(prefix)\
    \ {\n                    None\n                } else {\n                    Some(s.to_owned())\n\
    \                }\n            })\n        } else {\n            break;\n   \
    \     }\n    }\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpc6atw3uo.rs:11:45\n     |\n11   |         if iter.next().unwrap().starts_with(prefix)\
    \ {\n     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n11   |         if iter.next().unwrap().starts_with(&prefix)\
    \ {\n     |                                             +\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpc6atw3uo.rs:13:35\n\
    \     |\n13   |                 if !s.starts_with(prefix) {\n     |          \
    \             ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                       |\n     |                       required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n13   |          \
    \       if !s.starts_with(&prefix) {\n     |                                 \
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc6atw3uo.rs:12:13\n   |\n\
    11 |  /         if iter.next().unwrap().starts_with(prefix) {\n12 |  |       \
    \      iter.filter_map(|s| {\n   |  |_____________^\n13 | ||                 if\
    \ !s.starts_with(prefix) {\n14 | ||                     None\n15 | ||        \
    \         } else {\n16 | ||                     Some(s.to_owned())\n17 | ||  \
    \               }\n18 | ||             })\n   | ||______________^ expected `()`,\
    \ found struct `FilterMap`\n19 |  |         } else {\n20 |  |             break;\n\
    21 |  |         }\n "
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings: Vec<String> = strings.clone();\n\
    \    while strings.is_empty() {\n        if strings.len() > 0 {\n            if\
    \ strings[0] == prefix {\n                strings.remove(0).unwrap();\n      \
    \      } else {\n                break;\n            }\n        }\n    }\n   \
    \ return strings;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp5przbcu4.rs:11:35\n   |\n11 |                 strings.remove(0).unwrap();\n\
    \   |                                   ^^^^^^ method not found in `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_string = vec![];\n    for string\
    \ in strings {\n        if string.starts_with(prefix) {\n            filtered_string.push(string);\n\
    \        }\n    }\n    filtered_string\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplqvxwyd5.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter(|string| string.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_lldaihy.rs:8:45\n     |\n8    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp_lldaihy.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.into_iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp22ven0gu.rs:7:50\n     |\n7    |     strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \   ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |\
    \                                      |\n     |                             \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .cloned()\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp432awzue.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    let\
    \ mut strings = strings.iter().filter(|s| !s.starts_with(&prefix));\n    strings.collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpkcn00si8.rs:9:13\n     |\n\
    9    |     strings.collect()\n     |             ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpheiyhln3.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpheiyhln3.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix_slice = prefix.as_ref();\n    let\
    \ mut result = Vec::new();\n    let mut last_end = strings.len() - 1;\n    while\
    \ strings.len() != 0 {\n        let mut is_match = false;\n        let mut end\
    \ = strings.len() - 1;\n        while strings.len() != 0 && end <= last_end &&\
    \ !is_match {\n            if strings[end].starts_with(&prefix_slice) {\n    \
    \            is_match = true;\n            } else {\n                end--;\n\
    \            }\n        }\n        if is_match {\n            result.push(strings.pop());\n\
    \            last_end = end;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpmrgom0eh.rs:17:22\n\
    \   |\n17 |                 end--;\n   |                      ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmrgom0eh.rs:25:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                                                              ----------- expected\
    \ `Vec<String>` because of return type\n...\n25 |     result\n   |     ^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<Option<String>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|str|\
    \ {\n            if str.starts_with(prefix) {\n                Some(str)\n   \
    \         } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0jac_fb9.rs:10:32\n     |\n10   |             if str.starts_with(prefix)\
    \ {\n     |                    ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                    |\n     |                    required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if str.starts_with(&prefix) {\n     |                                +\n\n\
    error[E0277]: a value of type `Vec<String>` cannot be built from an iterator over\
    \ elements of type `&String`\n    --> /tmp/tmp0jac_fb9.rs:16:10\n     |\n16  \
    \ |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ if s.starts_with(prefix) {Some(s.to_string())} else {None})\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppdl02i77.rs:9:42\n     |\n9    |         .filter_map(|s| if s.starts_with(prefix)\
    \ {Some(s.to_string())} else {None})\n     |                              -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              \
    \                |\n     |                              required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ if s.starts_with(&prefix) {Some(s.to_string())} else {None})\n     |       \
    \                                   +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut string = prefix;\n    strings.filter_map(|s|\
    \ {\n        if s.starts_with(&prefix) {\n            Some(string.clone())\n \
    \       } else {\n            None\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmpmohpi6d3.rs:8:13\n\
    \    |\n8   |       strings.filter_map(|s| {\n    |               ^^^^^^^^^^ `Vec<String>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<String>: Iterator`\n            which is required by `&mut Vec<String>:\
    \ Iterator`\n            `[String]: Iterator`\n            which is required by\
    \ `&mut [String]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = strings.clone();\n\
    \    filtered_strings.retain(|s| s.starts_with(prefix));\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu9y6z52r.rs:8:47\n     |\n8    |     filtered_strings.retain(|s|\
    \ s.starts_with(prefix));\n     |                                   -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              \
    \                     |\n     |                                   required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n8    |     filtered_strings.retain(|s|\
    \ s.starts_with(&prefix));\n     |                                           \
    \    +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = vec![];\n\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n\n    filtered_strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_gcx27o7.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|string| string.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsjvg0pcn.rs:7:55\n     |\n7    |     strings.iter().filter(|string|\
    \ string.starts_with(prefix)).collect()\n     |                              \
    \             ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                           |\n     |                  \
    \                         required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n7    |     strings.iter().filter(|string| string.starts_with(&prefix)).collect()\n\
    \     |                                                       +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpsjvg0pcn.rs:7:64\n     |\n7    |     strings.iter().filter(|string|\
    \ string.starts_with(prefix)).collect()\n     |                              \
    \                                  ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfs10rvpf.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter(|string| string.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_lldaihy.rs:8:45\n     |\n8    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp_lldaihy.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter_map(|s| s.as_bytes()\n\
    \            .map(|s| s.to_string() + '0')\n            .collect::<Vec<_>>())\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `&[u8]` is not an iterator\n --> /tmp/tmpt7jggw1x.rs:9:14\n\
    \  |\n9 |             .map(|s| s.to_string() + '0')\n  |              ^^^ `&[u8]`\
    \ is not an iterator; try calling `.iter()`\n  |\n  = note: the following trait\
    \ bounds were not satisfied:\n          `&[u8]: Iterator`\n          which is\
    \ required by `&mut &[u8]: Iterator`\n          `[u8]: Iterator`\n          which\
    \ is required by `&mut [u8]: Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.chars().filter(|c| c.is_prefix(prefix.chars().collect())).collect())\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for reference `&char` in\
    \ the current scope\n --> /tmp/tmpxctxy4dh.rs:9:48\n  |\n9 |         .filter_map(|s|\
    \ s.chars().filter(|c| c.is_prefix(prefix.chars().collect())).collect())\n  |\
    \                                                ^^^^^^^^^ method not found in\
    \ `&char`\n\nerror[E0277]: a value of type `Option<_>` cannot be built from an\
    \ iterator over elements of type `char`\n    --> /tmp/tmpxctxy4dh.rs:9:85\n  \
    \   |\n9    |         .filter_map(|s| s.chars().filter(|c| c.is_prefix(prefix.chars().collect())).collect())\n\
    \     |                                                                      \
    \               ^^^^^^^ value of type `Option<_>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Option<_>`\n\
    \     = help: the trait `FromIterator<Option<A>>` is implemented for `Option<V>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.into_iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzdkthesy.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .cloned()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp7cbas5gc.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7cbas5gc.rs:7:5\n\
    \   |\n6  |   fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                                -----------\
    \ expected `Vec<String>` because of return type\n7  | /     strings\n8  | |  \
    \       .iter()\n9  | |         .filter(|s| s.starts_with(prefix))\n10 | |   \
    \      .cloned()\n   | |_________________^ expected struct `Vec`, found struct\
    \ `Cloned`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Cloned<Filter<std::slice::Iter<'_, String>, [closure@/tmp/tmp7cbas5gc.rs:9:17:\
    \ 9:42]>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter: Iter<String> = strings.iter();\n\
    \    let mut found = false;\n    let mut prefixes = prefix.to_string().chars().map(|c|\
    \ c.to_string()).collect::<Vec<_>>();\n    loop {\n        match iter.next() {\n\
    \            Some(s) => {\n                if found {\n                    return\
    \ vec![];\n                } else {\n                    if prefixes.iter().any(|&p|\
    \ s == p) {\n                        found = true;\n                    }\n  \
    \              }\n            }\n            None => break,\n        }\n    }\n\
    \    iter\n        .filter_map(|s| s.to_str().ok())\n        .filter(|&s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `Iter` in this scope\n --> /tmp/tmp61sumv1x.rs:7:19\n\
    \  |\n7 |     let mut iter: Iter<String> = strings.iter();\n  |              \
    \     ^^^^ not found in this scope\n  |\nhelp: consider importing one of these\
    \ items\n  |\n1 | use std::collections::binary_heap::Iter;\n  |\n1 | use std::collections::btree_map::Iter;\n\
    \  |\n1 | use std::collections::btree_set::Iter;\n  |\n1 | use std::collections::hash_map::Iter;\n\
    \  |\n    and 8 other candidates\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    let\
    \ mut result = vec![];\n\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp944u16hq.rs:11:26\n     |\n11   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n11   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|string|\
    \ string.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj2niym_4.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpj2niym_4.rs:10:10\n     |\n10   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().starts_with(prefix.to_lowercase()))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzpj0u_1l.rs:9:54\n     |\n9    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpzpj0u_1l.rs:9:25\n  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings_filtered = strings;\n    let mut\
    \ prefix = prefix.to_string();\n    while strings_filtered.is_empty() {\n    \
    \    if prefix.len() == 0 {\n            break;\n        }\n        let element\
    \ = &strings_filtered[0];\n        if !element.starts_with(prefix) {\n       \
    \     strings_filtered.remove(0);\n        } else {\n            prefix = prefix.clone();\n\
    \        }\n    }\n    strings_filtered\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5jiuc3im.rs:14:33\n     |\n14   |         if !element.starts_with(prefix)\
    \ {\n     |                     ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                     |\n     |                  \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n14   |         if !element.starts_with(&prefix) {\n     |    \
    \                             +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefixes = vec![];\n    for s in strings.iter()\
    \ {\n        if s.starts_with(prefix) {\n            prefixes.push(s);\n     \
    \   }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptu3zx6mq.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptu3zx6mq.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('.');\n\
    \    let mut outer = Vec::with_capacity(strings.len());\n    for string in strings.iter()\
    \ {\n        if string.starts_with(prefix) {\n            outer.push(string);\n\
    \        }\n    }\n    outer\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpexlqbs8q.rs:11:31\n     |\n11   |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n11   |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpexlqbs8q.rs:15:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n15 |     outer\n   |     ^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpheiyhln3.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpheiyhln3.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n  \
    \  for s in strings.into_iter() {\n        if s.starts_with(prefix) {\n      \
    \      result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj5tz2fcq.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return vec![];\n\
    \    }\n\n    let mut prefix = prefix.to_owned();\n    while strings.len() > 0\
    \ && strings.last().starts_with(prefix) {\n        strings.remove(strings.last());\n\
    \    }\n\n    strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `starts_with` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmp9awskb9x.rs:12:47\n   |\n12 |     while strings.len()\
    \ > 0 && strings.last().starts_with(prefix) {\n   |                          \
    \                     ^^^^^^^^^^^ method not found in `Option<&String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9awskb9x.rs:13:24\n   |\n13 |         strings.remove(strings.last());\n\
    \   |                        ^^^^^^^^^^^^^^ expected `usize`, found enum `Option`\n\
    \   |\n   = note: expected type `usize`\n              found enum `Option<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter_strings = strings.iter().cloned();\n\
    \    let mut prefix = prefix.to_owned();\n    loop {\n        let mut next = iter_strings.next().cloned();\n\
    \        if next.starts_with(prefix) {\n            return iter_strings.collect();\n\
    \        }\n        if next.is_empty() {\n            break;\n        }\n    \
    \    prefix.pop();\n    }\n    iter_strings.collect()\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<String>` is not an iterator\n   --> /tmp/tmpm4iyq4gz.rs:10:44\n\
    \    |\n10  |           let mut next = iter_strings.next().cloned();\n    |  \
    \                                            ^^^^^^ `Option<String>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<String>: Iterator`\n            which is required by `&mut\
    \ Option<String>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .cloned()\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp432awzue.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n     \
    \   }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpobfzg4z7.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut results = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            results.push(s);\n      \
    \  }\n    }\n    results\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpyo2_av7s.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n    let mut\
    \ out = Vec::new();\n    for (i, s) in strings.into_iter().enumerate() {\n   \
    \     let mut is_prefix = false;\n        for c in prefix.chars().filter(|c| c\
    \ != '\\0').take(i + 1) {\n            if c != s.chars().filter(|c| c != '\\0').next()\
    \ {\n                is_prefix = false;\n                break;\n            }\n\
    \            is_prefix = true;\n        }\n        if is_prefix {\n          \
    \  out.push(s);\n        }\n    }\n    out\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp_dz9znxg.rs:11:46\n\
    \   |\n11 |         for c in prefix.chars().filter(|c| c != '\\0').take(i + 1)\
    \ {\n   |                                              ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp_dz9znxg.rs:12:44\n\
    \   |\n12 |             if c != s.chars().filter(|c| c != '\\0').next() {\n  \
    \ |                                            ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_dz9znxg.rs:12:21\n   |\n12 |             if\
    \ c != s.chars().filter(|c| c != '\\0').next() {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<char>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp72o34br6.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp72o34br6.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for string in\
    \ strings {\n        if string.starts_with(prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvloexaq7.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix_string = prefix.to_owned();\n \
    \   let mut iter = strings.iter();\n    iter.skip_while(|s| {\n        prefix_string\
    \ += *s;\n        prefix_string != prefix_string.as_str()\n    });\n    iter\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_ampmpba.rs:13:5\n   |\n\
    6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     iter\n   |    \
    \ ^^^^ expected struct `Vec`, found struct `std::slice::Iter`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `std::slice::Iter<'_,\
    \ String>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let prefix_len = prefix.len();\n    let mut ret:\
    \ Vec<String> = Vec::new();\n    for s in strings {\n        let s = s.as_str();\n\
    \        if s.len() >= prefix_len {\n            if s.starts_with(prefix) {\n\
    \                ret.push(s);\n            }\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpp7vjjubk.rs:12:30\n     |\n12   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n12   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp7vjjubk.rs:13:26\n   |\n13 |              \
    \   ret.push(s);\n   |                          ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                          |\n   |              \
    \            expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    for s in strings.iter() {\n        if s.starts_with(prefix)\
    \ {\n            strings.push(s);\n        }\n    }\n    strings\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpt21ch8bh.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpt21ch8bh.rs:9:26\n  |\n9 |             strings.push(s);\n  |       \
    \                   ^- help: try using a conversion method: `.to_string()`\n \
    \ |                          |\n  |                          expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|x| x.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwmc66an9.rs:7:45\n     |\n7    |     strings.iter().filter(|x| x.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|x| x.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpwmc66an9.rs:7:54\n     |\n7    |     strings.iter().filter(|x|\
    \ x.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter_map(|s| {\n        s.starts_with(prefix).map(|b|\
    \ !b)\n    }).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj0knr6bo.rs:8:23\n     |\n8    |         s.starts_with(prefix).map(|b|\
    \ !b)\n     |           ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |           |\n     |           required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         s.starts_with(&prefix).map(|b|\
    \ !b)\n     |                       +\n\nerror[E0599]: `bool` is not an iterator\n\
    \ --> /tmp/tmpj0knr6bo.rs:8:31\n  |\n8 |         s.starts_with(prefix).map(|b|\
    \ !b)\n  |                               ^^^ `bool` is not an iterator\n  |\n\
    \  = note: the following trait bounds were not satisfied:\n          `bool: Iterator`\n\
    \          which is required by `&mut bool: Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfs10rvpf.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter_map(|x|\
    \ x.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_gy7vavd.rs:9:39\n     |\n9    |         .filter_map(|x| x.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|x| x.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_gy7vavd.rs:9:25\n  |\n9 |         .filter_map(|x| x.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|x|\
    \ Some(x.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return strings;\n\
    \    }\n    let mut strings_iter = strings.iter();\n    let prefix = prefix.to_string();\n\
    \    if let Some(prefix_len) = prefix.len() {\n        let mut it = strings_iter;\n\
    \        while let Some(elem) = it.next() {\n            if elem.starts_with(prefix)\
    \ {\n                let new_it = elem.iter();\n                while let Some(elem)\
    \ = new_it.next() {\n                    it.next(); // consume the current element\n\
    \                    if elem.starts_with(prefix) {\n                        it.next();\
    \ // skip the unwanted element\n                        break;\n             \
    \       }\n                }\n                break;\n            }\n        }\n\
    \    }\n    let mut iter = strings_iter.clone();\n    iter.next();\n    let mut\
    \ result = vec![];\n    loop {\n        if let Some(elem) = iter.next() {\n  \
    \          result.push(elem);\n        } else {\n            break;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7w4w3p24.rs:12:12\n   |\n\
    12 |     if let Some(prefix_len) = prefix.len() {\n   |            ^^^^^^^^^^^^^^^^\
    \   ------------ this expression has type `usize`\n   |            |\n   |   \
    \         expected `usize`, found enum `Option`\n   |\n   = note: expected type\
    \ `usize`\n              found enum `Option<_>`\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n    --> /tmp/tmp7w4w3p24.rs:15:33\n     |\n15   | \
    \            if elem.starts_with(prefix) {\n     |                     -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              \
    \       |\n     |                     required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n15   |             if elem.starts_with(&prefix)\
    \ {\n     |                                 +\n\nerror[E0599]: no method named\
    \ `iter` found for reference `&String` in the current scope\n  --> /tmp/tmp7w4w3p24.rs:16:35\n\
    \   |\n16 |                 let new_it = elem.iter();\n   |                  \
    \                 ^^^^ method not found in `&String`\n   |\nhelp: because of the\
    \ in-memory representation of `&str`, to obtain an `Iterator` over each of its\
    \ codepoint use method `chars`\n   |\n16 |                 let new_it = elem.chars();\n\
    \   |                                   ~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7w4w3p24.rs:38:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n38 |     result\n   |     ^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explana"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.chars().filter_map(|c| *c >= prefix.as_bytes().to_vec()).count())\n      \
    \  .cloned()\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmphpwp8ypn.rs:9:50\n\
    \  |\n9 |         .filter_map(|s| s.chars().filter_map(|c| *c >= prefix.as_bytes().to_vec()).count())\n\
    \  |                                                  ^^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphpwp8ypn.rs:9:50\n  |\n9 |         .filter_map(|s| s.chars().filter_map(|c|\
    \ *c >= prefix.as_bytes().to_vec()).count())\n  |                            \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type\
    \ `bool`\nhelp: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ s.chars().filter_map(|c| Some(*c >= prefix.as_bytes().to_vec())).count())\n\
    \  |                                                  +++++                  \
    \              +\n\nerror[E0308]: mismatched types\n --> /tmp/tmphpwp8ypn.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.chars().filter_map(|c| *c >= prefix.as_bytes().to_vec()).count())\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.chars().filter_map(|c| *c >= prefix.as_bytes().to_vec()).count()))\n\
    \  |                         +++++                                           \
    \                       +\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s.clone())\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpflfpzn3j.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    for s in strings {\n        if !s.starts_with(prefix)\
    \ {\n            strings.remove(s);\n        }\n    }\n    strings\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmphls3994c.rs:8:27\n     |\n8    |         if !s.starts_with(prefix)\
    \ {\n     |               ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n8    |         if\
    \ !s.starts_with(&prefix) {\n     |                           +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmphls3994c.rs:9:28\n  |\n9 |             strings.remove(s);\n\
    \  |                            ^ expected `usize`, found struct `String`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter_map(|s| {\n        if s.starts_with(prefix)\
    \ {\n            Some(s.to_string())\n        } else {\n            None\n   \
    \     }\n    })\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5b23_w_q.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5b23_w_q.rs:7:5\n   |\n6  |   fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                           ----------- expected `Vec<String>` because of return\
    \ type\n7  | /     strings.iter().filter_map(|s| {\n8  | |         if s.starts_with(prefix)\
    \ {\n9  | |             Some(s.to_string())\n10 | |         } else {\n11 | | \
    \            None\n12 | |         }\n13 | |     })\n   | |______^ expected struct\
    \ `Vec`, found struct `FilterMap`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `FilterMap<std::slice::Iter<'_, String>, [closure@/tmp/tmp5b23_w_q.rs:7:31:\
    \ 13:6]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = vec![];\n    let mut prefix =\
    \ prefix.to_owned();\n    let mut i = 0;\n\n    while i < strings.len() {\n  \
    \      if strings[i].starts_with(prefix) {\n            result.push(strings[i]);\n\
    \        } else {\n            i += 1;\n        }\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppiijefgd.rs:12:35\n     |\n12   |         if strings[i].starts_with(prefix)\
    \ {\n     |                       ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                       |\n     |                \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n12   |         if strings[i].starts_with(&prefix) {\n     |  \
    \                                 +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter_map(|s| {\n        if s.starts_with(prefix)\
    \ {\n            Some(s)\n        } else {\n            None\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpofma7e4z.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpofma7e4z.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut found = false;\n    strings\n        .into_iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       found = true;\n                Some(s.to_string())\n            } else\
    \ {\n                None\n            }\n        })\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbuy3p5d1.rs:11:30\n     |\n11   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n11   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpheiyhln3.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpheiyhln3.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = vec![];\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv_rqmepl.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.into_iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzdkthesy.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut it = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n\n    loop {\n        match it.next() {\n           \
    \ Some(name) => if name.starts_with(prefix) {\n                it.collect::<Vec<_>>()\n\
    \            } else {\n                Vec::new()\n            },\n          \
    \  None => break,\n        }\n    }\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps_w1blex.rs:12:47\n     |\n12   |             Some(name) => if name.starts_with(prefix)\
    \ {\n     |                                   ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                   |\n     | \
    \                                  required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n12   |             Some(name) => if name.starts_with(&prefix)\
    \ {\n     |                                               +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps_w1blex.rs:13:17\n   |\n12 |               Some(name)\
    \ => if name.starts_with(prefix) {\n   |  ___________________________-\n13 | |\
    \                 it.collect::<Vec<_>>()\n   | |                 ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `Vec`\n14 | |             } else {\n15 | |     \
    \            Vec::new()\n16 | |             },\n   | |_____________- expected\
    \ this to be `()`\n   |\n   = note: expected unit type `()`\n                \
    \ found struct `Vec<&String>`\nhelp: consider using a semicolon here\n   |\n13\
    \ |                 it.collect::<Vec<_>>();\n   |                            \
    \           +\nhelp: consider using a semicolon here\n   |\n16 |             };,\n\
    \   |              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps_w1blex.rs:15:17\n\
    \   |\n12 |               Some(name) => if name.starts_with(prefix) {\n   |  ___________________________-\n\
    13 | |                 it.collect::<Vec<_>>()\n14 | |             } else {\n15\
    \ | |                 Vec::new()\n   | |                 ^^^^^^^^^^ expected `()`,\
    \ found struct `Vec`\n16 | |             },\n   | |_____________- expected this\
    \ to be `()`\n   |\n   = note: expected unit type `()`\n                 found\
    \ struct `Vec<_>`\nhelp: consider using a semicolon here\n "
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return strings;\n\
    \    }\n    let mut filtered_strings = vec![];\n    for s in strings {\n     \
    \   if s.starts_with(prefix) {\n            filtered_strings.push(s);\n      \
    \  }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpohzxyi6c.rs:12:26\n     |\n12   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n12   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return vec![];\n\
    \    }\n    if strings.len() < 2 {\n        return strings;\n    }\n\n    let\
    \ mut prefix = prefix.to_string();\n    let mut prefix = prefix.chars().next().unwrap();\n\
    \    while prefix != prefix.to_owned() {\n        if strings.iter().any(|s| s.starts_with(prefix))\
    \ {\n            strings.remove(prefix.to_string());\n        }\n        prefix\
    \ = prefix.chars().next().unwrap();\n    }\n    strings\n}\n\nfn main() {\n  \
    \  let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpokmc1llp.rs:18:28\n   |\n\
    18 |             strings.remove(prefix.to_string());\n   |                   \
    \         ^^^^^^^^^^^^^^^^^^ expected `usize`, found struct `String`\n\nerror[E0599]:\
    \ no method named `chars` found for type `char` in the current scope\n  --> /tmp/tmpokmc1llp.rs:20:25\n\
    \   |\n20 |         prefix = prefix.chars().next().unwrap();\n   |           \
    \              ^^^^^ method not found in `char`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() || strings.len() <= 1 {\n\
    \        return strings;\n    }\n\n    strings\n        .iter()\n        .enumerate()\n\
    \        .filter(|&(i, s)| s.starts_with(prefix))\n        .map(|(i, s)| s.to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu758zz7b.rs:14:41\n     |\n14   |         .filter(|&(i, s)| s.starts_with(prefix))\n\
    \     |                             ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                             |\n     |       \
    \                      required by a bound introduced by this call\n     |\n \
    \    = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n14   |         .filter(|&(i, s)| s.starts_with(&prefix))\n\
    \     |                                         +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            filtered_strings.push(*s);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpt808igky.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n   --> /tmp/tmpt808igky.rs:10:35\n\
    \    |\n10  |             filtered_strings.push(*s);\n    |                  \
    \            ---- ^^ doesn't have a size known at compile-time\n    |        \
    \                      |\n    |                              required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpt808igky.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n   --> /tmp/tmpt808igky.rs:7:32\n    |\n\
    7   |     let mut filtered_strings = Vec::new();\n    |                      \
    \          ^^^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt808igky.rs:13:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                    "
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppeq41gta.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppeq41gta.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpheiyhln3.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpheiyhln3.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings = strings.to_owned();\n    while\
    \ let Some(string) = strings.remove(prefix) {\n        strings.push(string);\n\
    \    }\n    strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkowhwj6o.rs:8:45\n  |\n8 |\
    \     while let Some(string) = strings.remove(prefix) {\n  |                 \
    \                            ^^^^^^ expected `usize`, found struct `String`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpkowhwj6o.rs:8:15\n  |\n8 |     while\
    \ let Some(string) = strings.remove(prefix) {\n  |               ^^^^^^^^^^^^\
    \   ---------------------- this expression has type `String`\n  |            \
    \   |\n  |               expected struct `String`, found enum `Option`\n  |\n\
    \  = note: expected struct `String`\n               found enum `Option<_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpheiyhln3.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpheiyhln3.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6jpi2eex.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered = Vec::new();\n    for str in\
    \ strings {\n        if str.starts_with(prefix) {\n            filtered.push(str);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9f8n0w2f.rs:9:28\n     |\n9    |         if str.starts_with(prefix)\
    \ {\n     |                ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ str.starts_with(&prefix) {\n     |                            +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfs10rvpf.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let len = strings.len();\n    let mut indices\
    \ = Vec::with_capacity(len);\n    for (i, str) in strings.into_iter().enumerate()\
    \ {\n        if str.starts_with(prefix) {\n            indices.push(i);\n    \
    \    }\n    }\n    indices.into_iter().flat_map(|i| &strings[..i]).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6f2jl2j7.rs:10:28\n     |\n10   |         if str.starts_with(prefix)\
    \ {\n     |                ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |         if\
    \ str.starts_with(&prefix) {\n     |                            +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp6f2jl2j7.rs:14:53\n     |\n14   |     indices.into_iter().flat_map(|i|\
    \ &strings[..i]).collect()\n     |                                           \
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter().cloned();\n    let\
    \ mut prefix = prefix.clone();\n    loop {\n        match iter.next() {\n    \
    \        None => break,\n            Some(next) => {\n                if next.starts_with(prefix)\
    \ {\n                    iter.next();\n                }\n            }\n    \
    \    }\n    }\n    iter\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpeez5kpwl.rs:13:37\n     |\n13   |                 if next.starts_with(prefix)\
    \ {\n     |                         ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                         |\n     |           \
    \              required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n13   |                 if next.starts_with(&prefix)\
    \ {\n     |                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeez5kpwl.rs:19:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n19 |     iter\n   |     ^^^^ expected struct `Vec`, found\
    \ struct `Cloned`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Cloned<std::slice::Iter<'_, String>>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered = vec![];\n\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n     \
    \   }\n    }\n\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp832ldo9d.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.is_empty() {\n        return strings;\n\
    \    }\n\n    let mut prefix = prefix.to_string();\n    if prefix.len() != prefix.chars().count(|c|\
    \ !c.is_alphanumeric()) {\n        return strings;\n    }\n    let mut found =\
    \ false;\n    let mut strings = strings.clone();\n    loop {\n        let mut\
    \ next = strings.iter().next();\n        if !next.is_some() || !next.unwrap().starts_with(prefix)\
    \ {\n            break;\n        }\n\n        found = true;\n        strings.remove(next.unwrap());\n\
    \    }\n    if !found {\n        return strings;\n    }\n    strings\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpy5tztjsk.rs:12:46\n\
    \   |\n12 |     if prefix.len() != prefix.chars().count(|c| !c.is_alphanumeric())\
    \ {\n   |                                              ^ consider giving this\
    \ closure parameter a type\n   |\n   = note: type must be known at this point\n\
    \nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpy5tztjsk.rs:12:39\n    |\n12  |     if prefix.len() != prefix.chars().count(|c|\
    \ !c.is_alphanumeric()) {\n    |                                       ^^^^^ ------------------------\
    \ supplied 1 argument\n    |                                       |\n    |  \
    \                                     expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0277]: expected a `FnMut<(char,)>` closure,\
    \ found `String`\n    --> /tmp/tmpy5tztjsk.rs:19:58\n     |\n19   |         if\
    \ !next.is_some() || !next.unwrap().starts_with(prefix) {\n     |            \
    \                                  ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                             \
    \ |\n     |                                              required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n19   |         if\
    \ !next.is_some() || !next.unwrap().starts_with(&prefix) {\n     |           \
    \                                               +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy5tztjsk.rs:24:24\n   |\n24 |         strings.remove(next.unwrap());\n\
    \   |                        ^^^^^^^^^^^^^ expected `usize`, found `&String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0282, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsx4pxlou.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsx4pxlou.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd0rzhy5p.rs:8:45\n     |\n8    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpd0rzhy5p.rs:8:54\n     |\n8    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefixed = strings.clone();\n    prefixed.sort_by(|a,\
    \ b| a.len().cmp(b.len()));\n    while prefixed.is_empty() {\n        let index\
    \ = prefixed.iter().position(|s| s.starts_with(prefix));\n        prefixed.truncate(index\
    \ + 1);\n    }\n    prefixed\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv0yolczo.rs:8:41\n  |\n8 |\
    \     prefixed.sort_by(|a, b| a.len().cmp(b.len()));\n  |                    \
    \                     ^^^^^^^\n  |                                         |\n\
    \  |                                         expected `&usize`, found `usize`\n\
    \  |                                         help: consider borrowing here: `&b.len()`\n\
    \nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpv0yolczo.rs:10:64\n\
    \     |\n10   |         let index = prefixed.iter().position(|s| s.starts_with(prefix));\n\
    \     |                                                    ----------- ^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                               |\n     |                                    \
    \                required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n10   |         let index = prefixed.iter().position(|s|\
    \ s.starts_with(&prefix));\n     |                                           \
    \                     +\n\nerror[E0369]: cannot add `{integer}` to `Option<usize>`\n\
    \  --> /tmp/tmpv0yolczo.rs:11:33\n   |\n11 |         prefixed.truncate(index +\
    \ 1);\n   |                           ----- ^ - {integer}\n   |              \
    \             |\n   |                           Option<usize>\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut output = Vec::new();\n    let mut iter\
    \ = strings.iter();\n    let mut i = 0;\n\n    for s in iter.filter(|&s| s.starts_with(prefix))\
    \ {\n        i += 1;\n        output.push(s.to_string());\n    }\n\n    if i !=\
    \ strings.len() {\n        vec![]\n    } else {\n        output\n    }\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpm5c7b6_a.rs:11:45\n     |\n11   |     for s in iter.filter(|&s|\
    \ s.starts_with(prefix)) {\n     |                                 -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              \
    \                   |\n     |                                 required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n11   |     for s\
    \ in iter.filter(|&s| s.starts_with(&prefix)) {\n     |                      \
    \                       +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    if strings.len() == 0 {\n        return vec![];\n\
    \    }\n    strings\n        .iter()\n        .filter_map(|s| {\n            if\
    \ !s.starts_with(prefix) {\n                None\n            } else {\n     \
    \           Some(s)\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppqdcgsk9.rs:13:31\n     |\n13   |             if !s.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n13   |          \
    \   if !s.starts_with(&prefix) {\n     |                               +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmppqdcgsk9.rs:19:10\n     |\n19   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    strings.retain(|s|\
    \ s.starts_with(prefix));\n    strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcibs9ijt.rs:8:38\n     |\n8    |     strings.retain(|s| s.starts_with(prefix));\n\
    \     |                          ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                          |\n     |             \
    \             required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n8    |     strings.retain(|s| s.starts_with(&prefix));\n\
    \     |                                      +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
