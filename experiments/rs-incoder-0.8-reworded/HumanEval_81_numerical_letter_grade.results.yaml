language: rs
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grade_vec: Vec<String> = vec![];\n \
    \   for grade in grades {\n        if grade > 4.0 && grade <= 4.7 { grade_vec.push(\"\
    A+\"); }\n        if grade > 3.8 && grade <= 3.9 { grade_vec.push(\"A-\"); }\n\
    \        if grade > 3.0 && grade <= 3.8 { grade_vec.push(\"A\"); }\n        if\
    \ grade > 2.8 && grade <= 2.9 { grade_vec.push(\"B+\"); }\n        if grade >\
    \ 2.1 && grade <= 2.9 { grade_vec.push(\"B\"); }\n        if grade > 1.7 && grade\
    \ <= 2.1 { grade_vec.push(\"B-\"); }\n        if grade > 1.3 && grade <= 1.7 {\
    \ grade_vec.push(\"C+\"); }\n        if grade > 1.0 { grade_vec.push(\"C\"); }\n\
    \        if grade > 0.7 { grade_vec.push(\"D\"); }\n        if grade > 0.0 { grade_vec.push(\"\
    D-\"); }\n        if grade == 0.0 { grade_vec.push(\"E\"); }\n    }\n    grade_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5eaj9c3d.rs:26:57\n   |\n\
    26 |         if grade > 4.0 && grade <= 4.7 { grade_vec.push(\"A+\"); }\n   |\
    \                                                         ^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                                  \
    \                       |\n   |                                              \
    \           expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5eaj9c3d.rs:27:57\n   |\n27 |         if grade > 3.8 &&\
    \ grade <= 3.9 { grade_vec.push(\"A-\"); }\n   |                             \
    \                            ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                                         |\n   |        \
    \                                                 expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5eaj9c3d.rs:28:57\n\
    \   |\n28 |         if grade > 3.0 && grade <= 3.8 { grade_vec.push(\"A\"); }\n\
    \   |                                                         ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                                  \
    \                       |\n   |                                              \
    \           expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5eaj9c3d.rs:29:57\n   |\n29 |         if grade > 2.8 &&\
    \ grade <= 2.9 { grade_vec.push(\"B+\"); }\n   |                             \
    \                            ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                                         |\n   |        \
    \                                                 expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5eaj9c3d.rs:30:57\n\
    \   |\n30 |         if grade > 2.1 && grade <= 2.9 { grade_vec.push(\"B\"); }\n\
    \   |                                                         ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                                  \
    \                       |\n   |                                            "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    for (i, g) in grades.iter().enumerate() {\n        if i > 0 {\n         \
    \   letter_grades.push(String::from(\"-\"));\n        }\n        let new_grade:\
    \ f64 = g * 2 - 1;\n        letter_grades.push(\n            match new_grade {\n\
    \                0.0 => \"E\",\n                1.0 => \"D\",\n              \
    \  2.0 => \"D+\",\n                3.0 => \"C\",\n                4.0 => \"C+\"\
    ,\n                5.0 => \"B\",\n                6.0 => \"B+\",\n           \
    \     7.0 => \"A\",\n                8.0 => \"A+\",\n                _ => String::from(\"\
    B+\"),\n            }\n        );\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `&f64` by `{integer}`\n  --> /tmp/tmp2u7i6d11.rs:29:32\n\
    \   |\n29 |         let new_grade: f64 = g * 2 - 1;\n   |                    \
    \            ^ no implementation for `&f64 * {integer}`\n   |\n   = help: the\
    \ trait `Mul<{integer}>` is not implemented for `&f64`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2u7i6d11.rs:32:24\n   |\n32 |                 0.0 => \"\
    E\",\n   |                        ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut counter = 1;\n    let mut letter_grade:\
    \ Vec<String> = vec![];\n    \n    for i in grades {\n        letter_grade.push(\
    \ format!(\"{}+\", counter) );\n        counter += i;\n        letter_grade.push(\
    \ format!(\"{}\", counter) );\n        counter -= i;\n        letter_grade.push(\
    \ format!(\"{}-\", counter) );\n    }\n    \n    letter_grade\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphjf9wfc6.rs:29:17\n\
    \   |\n29 |         counter += i;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract-assign `f64` from `{integer}`\n \
    \ --> /tmp/tmphjf9wfc6.rs:31:17\n   |\n31 |         counter -= i;\n   |      \
    \           ^^ no implementation for `{integer} -= f64`\n   |\n   = help: the\
    \ trait `SubAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n         \
    \    <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades: Vec<String> = Vec::new();\n    \n    let mut grade = grades_copy.len();\n\
    \    let mut prev_grade = grades_copy.len() - 1;\n    \n    while grade != 0 {\n\
    \        if grade >= 1.0 {\n            letter_grades.push(String::from(\"A+\"\
    ));\n            grade = grade - 1.0;\n        } else if grade >= 0.9 {\n    \
    \        letter_grades.push(String::from(\"A\"));\n            grade = grade -\
    \ 0.9;\n        } else if grade >= 0.8 {\n            letter_grades.push(String::from(\"\
    A-\"));\n            grade = grade - 0.8;\n        } else {\n            letter_grades.push(String::from(\"\
    B+\"));\n            grade = grade - 0.7;\n        }\n    }\n    if prev_grade\
    \ > grades_copy.len() {\n        letter_grades.push(String::from(\"E\"));\n  \
    \  }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkslku6e0.rs:31:21\n   |\n\
    31 |         if grade >= 1.0 {\n   |                     ^^^ expected `usize`,\
    \ found floating-point number\n\nerror[E0277]: cannot subtract `{float}` from\
    \ `usize`\n  --> /tmp/tmpkslku6e0.rs:33:27\n   |\n33 |             grade = grade\
    \ - 1.0;\n   |                           ^ no implementation for `usize - {float}`\n\
    \   |\n   = help: the trait `Sub<{float}>` is not implemented for `usize`\n  \
    \ = help: the following other types implement trait `Sub<Rhs>`:\n            \
    \ <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkslku6e0.rs:34:28\n   |\n34 |         } else\
    \ if grade >= 0.9 {\n   |                            ^^^ expected `usize`, found\
    \ floating-point number\n\nerror[E0277]: cannot subtract `{float}` from `usize`\n\
    \  --> /tmp/tmpkslku6e0.rs:36:27\n   |\n36 |             grade = grade - 0.9;\n\
    \   |                           ^ no implementation for `usize - {float}`\n  \
    \ |\n   = help: the trait `Sub<{float}>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkslku6e0.rs:37:28\n   |\n37 |         } else\
    \ if grade >= 0.8 {\n   |                            ^^^ expected `usize`, found\
    \ floating-point number\n\nerror[E0277]: cannot subtract `{float}` from `usize`\n\
    \  --> /tmp/tmpkslku6e0.rs:39:27\n   |\n39 |             grade = grade - 0.8;\n\
    \   |                           ^ no implementation for `usize - {float}"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut output: Vec<String> = vec![];\n\n  \
    \  let mut grade_counter: usize = 1;\n    for grade in grades {\n        let mut\
    \ output: Vec<String> = vec![];\n\n        output.push(String::from(format!(\"\
    {}\", grade as f64)));\n        grade_counter += 1;\n        while grade_counter\
    \ != 5 {\n            if grade < 4.0 {\n                if grade_counter > 1 {\n\
    \                    output.push(String::from(\"A+\"));\n                }\n \
    \               break;\n            }\n            match grade {\n           \
    \     2.7 => grade_counter -= 1,\n                2.3 => grade_counter -= 1,\n\
    \                2.0 => grade_counter -= 1,\n                1.7 => grade_counter\
    \ -= 1,\n                1.3 => grade_counter -= 1,\n                1.0 => grade_counter\
    \ -= 1,\n                0.7 => grade_counter -= 1,\n                0.0 => grade_counter\
    \ -= 1,\n                _ => break,\n            };\n            output.push(String::from(format!(\"\
    {}\", grade as f64)));\n            grade_counter += 1;\n        }\n        output.push(String::from(\"\
    E\"));\n        output\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp897lkdvb.rs:54:9\n   |\n\
    54 |         output\n   |         ^^^^^^ expected `()`, found struct `Vec`\n \
    \  |\n   = note: expected unit type `()`\n                 found struct `Vec<String>`\n\
    help: you might have meant to return this value\n   |\n54 |         return output;\n\
    \   |         ++++++       +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let\
    \ mut temp_grade = grades.clone();\n    while !temp_grade.is_empty() {\n     \
    \   let mut gp = 0;\n        while !temp_grade.is_empty() && temp_grade.len()\
    \ > 1 {\n            gp += temp_grade.last().unwrap();\n            temp_grade.pop();\n\
    \        }\n        temp_grade.clear();\n        letter_grades.push(String::from(format!(\"\
    {}+\", gp)));\n    }\n    while !letter_grades.is_empty() {\n        letter_grades.pop();\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpi5zjb19l.rs:29:16\n\
    \   |\n29 |             gp += temp_grade.last().unwrap();\n   |              \
    \  ^^ no implementation for `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n\
    \        .filter(|&(_, grade)| grade > 0)\n        .map(|(i, grade)| {\n     \
    \       match i {\n                0 => String::from(\"A+\"),\n              \
    \  1 => String::from(\"A\"),\n                2 => String::from(\"A-\"),\n   \
    \             3 => String::from(\"B+\"),\n                4 => String::from(\"\
    B\"),\n                5 => String::from(\"B-\"),\n                6 => String::from(\"\
    C+\"),\n                7 => String::from(\"C\"),\n                8 => String::from(\"\
    C-\"),\n                9 => String::from(\"D+\"),\n                _ => String::from(\"\
    D\"),\n            }\n        })\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5vwpqago.rs:27:39\n   |\n\
    27 |         .filter(|&(_, grade)| grade > 0)\n   |                          \
    \             ^ expected `&f64`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5vwpqago.rs:24:5\n   |\n23 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n24 | /    \
    \ grades\n25 | |         .iter()\n26 | |         .enumerate()\n27 | |        \
    \ .filter(|&(_, grade)| grade > 0)\n...  |\n41 | |             }\n42 | |     \
    \    })\n   | |__________^ expected struct `Vec`, found struct `Map`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `Map<Filter<Enumerate<std::slice::Iter<'_,\
    \ f64>>, [closure@/tmp/tmp5vwpqago.rs:27:17: 27:40]>, [closure@/tmp/tmp5vwpqago.rs:28:14:\
    \ 42:10]>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![\"\
    F\"];\n    }\n    \n    let grades_array = grades.iter().map(|x| x.log10()).collect::<Vec<f64>>();\n\
    \    \n    let mut result = vec![];\n    \n    let min = grades_array[0];\n  \
    \  let max = grades_array[grades_array.len() - 1];\n\n    // The loop below is\
    \ for computing the grade\n    // The result will be added to result\n    // when\
    \ it is done.\n    for i in 0..grades_array.len() {\n        let diff = max -\
    \ grades_array[i];\n        if diff <= 0.0 {\n            // The difference is\
    \ positive or zero\n            if diff == 0.0 {\n                result.append(format!(\"\
    {}\", grades_array[i]));\n            } else {\n                result.append(format!(\"\
    -{}\", grades_array[i]));\n            }\n        } else if diff < 0.0 {\n   \
    \         // The difference is negative\n            result.append(format!(\"\
    +{}\", grades_array[i]));\n        } else {\n            // The difference is\
    \ positive and positive\n            if grades_array[i] > min {\n            \
    \    result.append(format!(\"{}\", grades_array[i]));\n            } else {\n\
    \                result.append(format!(\"-{}\", grades_array[i]));\n         \
    \   }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsx11t8z9.rs:25:21\n   |\n\
    25 |         return vec![\"F\"];\n   |                     ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsx11t8z9.rs:43:31\n   |\n43 |                 result.append(format!(\"\
    {}\", grades_array[i]));\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                         found struct `String`\n  \
    \ = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsx11t8z9.rs:45:31\n   |\n45 |                 result.append(format!(\"\
    -{}\", grades_array[i]));\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                         found struct `String`\n  \
    \ = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsx11t8z9.rs:49:27\n   |\n49 |             result.append(format!(\"\
    +{}\", grades_array[i]));\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                         found struct `String`\n  \
    \ = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsx11t8z9.rs:53:31\n   |\n53 |                 result.append(format!(\"\
    {}\", grades_array[i]));\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                         found struct `String`\n  \
    \ = note: thi"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    let mut min_gpa = grades[0]; // Minimum GPA\n    let mut max_gpa = grades.last();\
    \ // Maximum GPA\n    for grade in grades.iter().rev() {\n        let gpa = grade\
    \ / max_gpa; // Calculate GPA for this number\n        let letter_grade = if gpa\
    \ >= 2.0 { gpa.to_string() } else { gpa.to_string() };\n        letter_grades.push(letter_grade);\n\
    \        min_gpa = min_gpa.min(gpa);\n        max_gpa = max_gpa.max(gpa);\n  \
    \  }\n    let gpa_range = max_gpa - min_gpa;\n    for grade in grades {\n    \
    \    let gpa = grade / gpa_range;\n        let letter_grade = if gpa >= 2.0 {\
    \ gpa.to_string() } else { gpa.to_string() };\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `&f64` by `Option<&f64>`\n  --> /tmp/tmpft61ocfe.rs:28:25\n\
    \   |\n28 |         let gpa = grade / max_gpa; // Calculate GPA for this number\n\
    \   |                         ^ no implementation for `&f64 / Option<&f64>`\n\
    \   |\n   = help: the trait `Div<Option<&f64>>` is not implemented for `&f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0599]:\
    \ the method `max` exists for enum `Option<&f64>`, but its trait bounds were not\
    \ satisfied\n   --> /tmp/tmpft61ocfe.rs:32:27\n    |\n32  |           max_gpa\
    \ = max_gpa.max(gpa);\n    |                             ^^^\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `&f64: Ord`\n  \
    \          which is required by `Option<&f64>: Ord`\n            `Option<&f64>:\
    \ Ord`\n            which is required by `&Option<&f64>: Ord`\n            `Option<&f64>:\
    \ Ord`\n            which is required by `&mut Option<&f64>: Ord`\n          \
    \  `Option<&f64>: Iterator`\n            which is required by `&mut Option<&f64>:\
    \ Iterator`\n\nerror[E0369]: cannot subtract `f64` from `Option<&f64>`\n  -->\
    \ /tmp/tmpft61ocfe.rs:34:29\n   |\n34 |     let gpa_range = max_gpa - min_gpa;\n\
    \   |                     ------- ^ ------- f64\n   |                     |\n\
    \   |                     Option<&f64>\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_clone = grades.clone();\n   \
    \ let mut letter_grades = vec![];\n    for grade in grades_clone {\n        match\
    \ grade {\n            0...0.9 => {\n                letter_grades.push(String::from(\"\
    A-\"));\n            }\n            0.9...1.8 => {\n                letter_grades.push(String::from(\"\
    B-\"));\n            }\n            1.8...2.7 => {\n                letter_grades.push(String::from(\"\
    B-\"));\n            }\n            2.7...3.6 => {\n                letter_grades.push(String::from(\"\
    B-\"));\n            }\n            3.6...4.5 => {\n                letter_grades.push(String::from(\"\
    B+\"));\n            }\n            4.5...5.4 => {\n                letter_grades.push(String::from(\"\
    B+\"));\n            }\n            5.4...6.3 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            6.3...7.2 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            7.2...8.1 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            8.1...9.0 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            9.0...1.0 => {\n                letter_grades.push(String::from(\"\
    D+\"));\n            }\n            _ => {\n                letter_grades.push(String::from(\"\
    D\"));\n            }\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: `...` range patterns are deprecated\n  --> /tmp/tmp3cq226vs.rs:28:14\n\
    \   |\n28 |             0...0.9 => {\n   |              ^^^ help: use `..=` for\
    \ an inclusive range\n   |\n   = note: `#[warn(ellipsis_inclusive_range_patterns)]`\
    \ on by default\n   = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmp3cq226vs.rs:31:16\n\
    \   |\n31 |             0.9...1.8 => {\n   |                ^^^ help: use `..=`\
    \ for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmp3cq226vs.rs:34:16\n\
    \   |\n34 |             1.8...2.7 => {\n   |                ^^^ help: use `..=`\
    \ for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmp3cq226vs.rs:37:16\n\
    \   |\n37 |             2.7...3.6 => {\n   |                ^^^ help: use `..=`\
    \ for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmp3cq226vs.rs:40:16\n\
    \   |\n40 |             3.6...4.5 => {\n   |                ^^^ help: use `..=`\
    \ for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.ru"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = vec![];\n    for grade in\
    \ grades.iter() {\n        let grade = grades[grade as usize] as f64;\n      \
    \  let mut letter = String::from(\"E\");\n        if grade > 3.5 {\n         \
    \   letter = String::from(\"D\");\n        } else if grade > 3.0 {\n         \
    \   letter = String::from(\"C\");\n        } else if grade > 2.7 {\n         \
    \   letter = String::from(\"B\");\n        } else if grade > 2.3 {\n         \
    \   letter = String::from(\"B-\");\n        } else if grade > 2.0 {\n        \
    \    letter = String::from(\"B-\");\n        } else if grade > 1.7 {\n       \
    \     letter = String::from(\"C\");\n        } else if grade > 1.3 {\n       \
    \     letter = String::from(\"C-\");\n        } else if grade > 1.0 {\n      \
    \      letter = String::from(\"D\");\n        } else if grade > 0.7 {\n      \
    \      letter = String::from(\"D+\");\n        }\n        letters.push(letter);\n\
    \    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&f64` as `usize` is invalid\n  --> /tmp/tmp9p09lksm.rs:26:28\n\
    \   |\n26 |         let grade = grades[grade as usize] as f64;\n   |         \
    \                   -----^^^^^^^^^\n   |                            |\n   |  \
    \                          cannot cast `&f64` as `usize`\n   |               \
    \             help: dereference the expression: `*grade`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0606`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters: Vec<String> = vec![String::from(\"\
    \")];\n    for g in grades {\n        letters.push(format!(\"{:2.1f}\", g));\n\
    \    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unknown format trait `f`\n  --> /tmp/tmpbsenqvtn.rs:26:36\n   |\n\
    26 |         letters.push(format!(\"{:2.1f}\", g));\n   |                    \
    \                ^\n   |\n   = note: the only appropriate formatting traits are:\n\
    \           - ``, which uses the `Display` trait\n           - `?`, which uses\
    \ the `Debug` trait\n           - `e`, which uses the `LowerExp` trait\n     \
    \      - `E`, which uses the `UpperExp` trait\n           - `o`, which uses the\
    \ `Octal` trait\n           - `p`, which uses the `Pointer` trait\n          \
    \ - `b`, which uses the `Binary` trait\n           - `x`, which uses the `LowerHex`\
    \ trait\n           - `X`, which uses the `UpperHex` trait\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let\
    \ mut previous_grade = grades[0];\n    let mut current_grade = grades[0];\n  \
    \  for grade in grades.iter().rev() {\n        previous_grade = current_grade;\n\
    \        current_grade = grade;\n        if current_grade >= previous_grade {\n\
    \            letter_grades.push(String::from(\"A+\"));\n        } else if current_grade\
    \ <= previous_grade {\n            letter_grades.push(String::from(\"A-\"));\n\
    \        } else if current_grade > previous_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else {\n            letter_grades.push(String::from(\"B+\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5a52vifs.rs:29:25\n   |\n\
    26 |     let mut current_grade = grades[0];\n   |                            \
    \ --------- expected due to this value\n...\n29 |         current_grade = grade;\n\
    \   |                         ^^^^^ expected `f64`, found `&f64`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n29 |         current_grade = *grade;\n\
    \   |                         +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() != 5 {\n        panic!(\"The\
    \ grades vector must contain exactly 5 elements: {:?}\", grades);\n    }\n\n \
    \   let mut grades_ = grades;\n    let mut letter_grades = vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")];\n    let mut last_grade = String::from(\"E\");\n    let mut current_grade_\
    \ = String::from(\"A\");\n    \n    while grades_.len() > 0 {\n        let current_grade\
    \ = grades_.remove(0).unwrap_or(0);\n        if current_grade <= 4 {\n       \
    \     letter_grades.push(current_grade);\n        }\n        \n        if current_grade\
    \ <= 3.7 {\n            letter_grades.push(current_grade);\n        }\n      \
    \  \n        if current_grade <= 3.3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 2.7 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 2.3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 2 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 1.7 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 1.3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 1 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 0.7 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 0 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade > last_grade {\n            last_grade\
    \ = current_grade_;\n            current_grade_ = String::from(\"D+\");\n    \
    \    }\n    }\n    \n    letter_grades.push(last_grade);\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpq_e4zla0.rs:34:47\n   |\n34 |         let current_grade\
    \ = grades_.remove(0).unwrap_or(0);\n   |                                    \
    \           ^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: can't compare\
    \ `String` with `{integer}`\n  --> /tmp/tmpq_e4zla0.rs:35:26\n   |\n35 |     \
    \    if current_grade <= 4 {\n   |                          ^^ no implementation\
    \ for `String < {integer}` and `String > {integer}`\n   |\n   = help: the trait\
    \ `PartialOrd<{integer}>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `PartialOrd<Rhs>`:\n             String\n      \
    \       str\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_e4zla0.rs:39:29\n\
    \   |\n39 |         if current_grade <= 3.7 {\n   |                          \
    \   ^^^- help: try using a conversion method: `.to_string()`\n   |           \
    \                  |\n   |                             expected struct `String`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_e4zla0.rs:43:29\n\
    \   |\n43 |         if current_grade <= 3.3 {\n   |                          \
    \   ^^^- help: try using a conversion method: `.to_string()`\n   |           \
    \                  |\n   |                             expected struct `String`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_e4zla0.rs:47:29\n\
    \   |\n47 |         if current_grade <= 3 {\n   |                            \
    \ ^- help: try using a conversion method: `.to_string()`\n   |               \
    \              |\n   |                             expected struct `String`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_e4zla0.rs:51:29\n\
    \   |\n51 |         if current_grade <= 2.7 {\n   |                          \
    \   ^^^- help: try using a conversion method: `.to_string()`\n   |           \
    \                  |\n   |                             expected struct `String`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_e4zla0.rs:55:29\n\
    \   |\n55 |         if current"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter()\n        .map(|grade| {\n    \
    \        let mut result = String::new();\n            if grade < 0.0 {\n     \
    \           result.push_str(\"E\");\n                return result;\n        \
    \    }\n            if grade < 3.0 {\n                result.push_str(String::from(\"\
    A\"));\n            } else if grade < 4.0 {\n                result.push_str(String::from(\"\
    B+\"));\n            } else {\n                result.push_str(String::from(\"\
    B-\"));\n            }\n            if grade < 5.0 {\n                result.push_str(String::from(\"\
    C+\"));\n            } else if grade < 6.0 {\n                result.push_str(String::from(\"\
    C\"));\n            } else {\n                result.push_str(String::from(\"\
    C-\"));\n            }\n            if grade < 7.0 {\n                result.push_str(String::from(\"\
    D+\"));\n            } else if grade < 8.0 {\n                result.push_str(String::from(\"\
    D\"));\n            } else {\n                result.push_str(String::from(\"\
    D-\"));\n            }\n            if grade < 9.0 {\n                result.push_str(String::from(\"\
    F\"));\n            } else {\n                result.push_str(String::from(\"\
    F-\"));\n            }\n            result.push_str(String::from(\"E\"));\n  \
    \          result\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptr3lb1xt.rs:27:24\n   |\n\
    27 |             if grade < 0.0 {\n   |                        ^^^\n   |     \
    \                   |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&0.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmptr3lb1xt.rs:31:24\n   |\n31 |  \
    \           if grade < 3.0 {\n   |                        ^^^\n   |          \
    \              |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&3.0`\n\
    \   |\nnote: return type inferred to be `&f64` here\n  --> /tmp/tmptr3lb1xt.rs:29:24\n\
    \   |\n29 |                 return result;\n   |                        ^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptr3lb1xt.rs:32:33\n   |\n32 |\
    \                 result.push_str(String::from(\"A\"));\n   |                \
    \                 ^^^^^^^^^^^^^^^^^\n   |                                 |\n\
    \   |                                 expected `&str`, found struct `String`\n\
    \   |                                 help: consider borrowing here: `&String::from(\"\
    A\")`\n   |\nnote: return type inferred to be `&str` here\n  --> /tmp/tmptr3lb1xt.rs:29:24\n\
    \   |\n29 |                 return result;\n   |                        ^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptr3lb1xt.rs:33:31\n   |\n33 |\
    \             } else if grade < 4.0 {\n   |                               ^^^\n\
    \   |                               |\n   |                               expected\
    \ `&f64`, found floating-point number\n   |                               help:\
    \ consider borrowing here: `&4.0`\n   |\nnote: return type inferred to be `&f64`\
    \ here\n  --> /tmp/tmptr3lb1xt.rs:29:24\n   |\n29 |                 return result;\n\
    \   |                        ^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptr3lb1xt.rs:34:33\n\
    \   |\n34 |                 result.push_str(String::from(\"B+\"));\n   |     \
    \                            ^^^^^^^^^^^^^^^^^^\n   |                        \
    \         |\n   |                 "
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut results: Vec<String> = vec![String::from(\"\
    A+\"),String::from(\"B\"),String::from(\"C\"),String::from(\"D\"),String::from(\"\
    E\")]\n    let mut grade: Vec<f64> = grades.iter().cloned().collect();\n    let\
    \ mut grade_prev: f64 = grade[0];\n    let mut i: int = 0;\n    while i < grade.len()\
    \ {\n        if grade[i] == 0.0 {\n            results.push(String::from(\"D\"\
    ));\n            break;\n        }\n        if grade_prev == 0.0 {\n         \
    \   grade_prev = grade[i];\n        }\n        if grade[i] < grade_prev {\n  \
    \          results.push(String::from(\"A-\"));\n        } else {\n           \
    \ results.push(String::from(\"A-\"));\n            grade_prev = grade[i];\n  \
    \      }\n        i += 1;\n    }\n    results\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpb4sflfti.rs:24:132\n\
    \   |\n24 |     let mut results: Vec<String> = vec![String::from(\"A+\"),String::from(\"\
    B\"),String::from(\"C\"),String::from(\"D\"),String::from(\"E\")]\n   |      \
    \                                                                            \
    \                                                  ^ help: add `;` here\n25 |\
    \     let mut grade: Vec<f64> = grades.iter().cloned().collect();\n   |     ---\
    \ unexpected token\n\nerror[E0412]: cannot find type `int` in this scope\n  -->\
    \ /tmp/tmpb4sflfti.rs:27:16\n   |\n27 |     let mut i: int = 0;\n   |        \
    \        ^^^\n   |                |\n   |                not found in this scope\n\
    \   |                help: perhaps you intended to use this type: `i32`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    grades_copy.sort_unstable();\n    let mut grade_counter = 0;\n    let mut\
    \ grade_sum = 0;\n    let mut grades_to_return = vec![];\n    for g in grades_copy\
    \ {\n        grade_counter = grade_counter + 1;\n        if grade_counter == 1\
    \ { \n            grades_to_return.push(String::from(\"B+\")); \n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 2 { \n\
    \            grades_to_return.push(String::from(\"B\"));\n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 3 { \n\
    \            grades_to_return.push(String::from(\"B-\"));\n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 4 { \n\
    \            grades_to_return.push(String::from(\"C+\")); \n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 5 { \n\
    \            grades_to_return.push(String::from(\"C\"));\n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 6 { \n\
    \            grades_to_return.push(String::from(\"C-\"));\n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 7 { \n\
    \            grades_to_return.push(String::from(\"D+\")); \n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 8 { \n\
    \            grades_to_return.push(String::from(\"D\"));\n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 9 { \n\
    \            grades_to_return.push(String::from(\"D-\"));\n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n        else if grade_counter == 10 {\
    \ \n            grades_to_return.push(String::from(\"E\"));\n            grade_sum\
    \ = (grade_sum + g) as f64;\n        }\n    }\n    return grades_to_return\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpw3toyt1z.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n \
    \   --> /tmp/tmpw3toyt1z.rs:26:17\n     |\n26   |     grades_copy.sort_unstable();\n\
    \     |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0277]: cannot add `f64` to `{integer}`\n  -->\
    \ /tmp/tmpw3toyt1z.rs:34:36\n   |\n34 |             grade_sum = (grade_sum + g)\
    \ as f64;\n   |                                    ^ no implementation for `{integer}\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw3toyt1z.rs:34:25\n   |\n28 |     let mut grade_sum\
    \ = 0;\n   |                         - expected due to this value\n...\n34 | \
    \            grade_sum = (grade_sum + g) as f64;\n   |                       \
    \  ^^^^^^^^^^^^^^^^^^^^^^ expected integer, found `f64`\n\nerror[E0277]: cannot\
    \ add `f64` to `{integer}`\n  -"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .cloned()\n\
    \        .filter_map(|grade| {\n            match grade {\n                0..=1\
    \ => None,\n                _ => Some(grade.to_string()),\n            }\n   \
    \     })\n        .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp3wdli0v.rs:29:17\n   |\n\
    28 |             match grade {\n   |                   ----- this expression has\
    \ type `f64`\n29 |                 0..=1 => None,\n   |                 ^   -\
    \ this is of type `{integer}`\n   |                 |\n   |                 expected\
    \ `f64`, found integer\n   |                 help: use a float literal: `0.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp3wdli0v.rs:29:21\n   |\n28 |\
    \             match grade {\n   |                   ----- this expression has\
    \ type `f64`\n29 |                 0..=1 => None,\n   |                 -   ^\n\
    \   |                 |   |\n   |                 |   expected `f64`, found integer\n\
    \   |                 |   help: use a float literal: `1.0`\n   |             \
    \    this is of type `{integer}`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.clone();\n  \
    \  let mut grades_string: Vec<String> = grades_string.into_iter().map(|x| {\n\
    \        match x < 0.0 {\n            true => String::from(\"D-\"),\n        \
    \    false => String::from(\"D+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"E\"),\n     \
    \       false => String::from(\"C\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"B+\"),\n    \
    \        false => String::from(\"B\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"B-\"),\n    \
    \        false => String::from(\"B+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"A-\"),\n    \
    \        false => String::from(\"A+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"A-\"),\n    \
    \        false => String::from(\"A+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"A-\"),\n    \
    \        false => String::from(\"A+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp8nkxvt76.rs:73:26\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n73 |     grades_string.reserve(grades.len() *\
    \ \n   |                          ^ unclosed delimiter\n74 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: expected expression, found `)`\n  --> /tmp/tmp8nkxvt76.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8nkxvt76.rs:33:19\n   |\n33 |         match x < 0.0 {\n   |   \
    \                ^^^- help: try using a conversion method: `.to_string()`\n  \
    \ |                   |\n   |                   expected struct `String`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8nkxvt76.rs:40:19\n\
    \   |\n40 |         match x < 0.0 {\n   |                   ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                   |\n   |        \
    \           expected struct `String`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8nkxvt76.rs:47:19\n   |\n47 |         match\
    \ x < 0.0 {\n   |                   ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                   |\n   |                   expected struct\
    \ `String`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8nkxvt76.rs:54:19\n   |\n54 |         match x < 0.0 {\n   |        \
    \           ^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \                |\n   |                   expected struct `String`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8nkxvt76.rs:61:19\n\
    \   |\n61 |         match x < 0.0 {\n   |                   ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                   |\n   |        \
    \           expected struct `String`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8nkxvt76.rs:68:19\n   |\n68 |         match\
    \ x < 0.0 {\n   |                   ^^^- help: try using "
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = vec![];\n    grades.into_iter().for_each(|grade|\
    \ {\n        if grade > 0.0 {\n            result.push(\"B+\");\n        } else\
    \ if grade <= 3.0 {\n            result.push(\"B-\");\n        } else if grade\
    \ > 3.0 && grade <= 4.0 {\n            result.push(\"A+\");\n        } else if\
    \ grade > 4.0 && grade <= 6.0 {\n            result.push(\"A\");\n        } else\
    \ if grade > 6.0 && grade <= 9.0 {\n            result.push(\"A-\");\n       \
    \ } else if grade > 9.0 && grade <= 10.0 {\n            result.push(\"B\");\n\
    \        } else if grade > 10.0 && grade <= 12.0 {\n            result.push(\"\
    B-\");\n        } else if grade > 12.0 {\n            result.push(\"C\");\n  \
    \      }\n    });\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2sntw9_s.rs:44:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n44 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // TODO: You do not need to understand this\
    \ code so you can simply copy and paste this\n    // and replace the function\
    \ body with your own code. Make sure you understand what is happening.\n    //\
    \ Hint: You have to think about the range of grades you have and use the `map`\
    \ function on a\n    // range of grades to get the letter grades.\n    let mut\
    \ letter_grades = Vec::new();\n    for grade in grades {\n        match grade\
    \ {\n            4.0 => letter_grades.push(String::from(\"A+\")),\n          \
    \  > 3.7 => letter_grades.push(String::from(\"A\")),\n            > 3.3 => letter_grades.push(String::from(\"\
    A-\")),\n            > 3.0 => letter_grades.push(String::from(\"B+\")),\n    \
    \        > 2.7 => letter_grades.push(String::from(\"B\")),\n            > 2.3\
    \ => letter_grades.push(String::from(\"B-\")),\n            > 2.0 => letter_grades.push(String::from(\"\
    C+\")),\n            > 1.7 => letter_grades.push(String::from(\"C\")),\n     \
    \       > 1.3 => letter_grades.push(String::from(\"C-\")),\n            > 1.0\
    \ => letter_grades.push(String::from(\"D+\")),\n            > 0.7 => letter_grades.push(String::from(\"\
    D\")),\n            > 0.0 => letter_grades.push(String::from(\"D-\")),\n     \
    \       _ => letter_grades.push(String::from(\"E\")),\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpl6jhamsk.rs:32:13\n \
    \  |\n32 |             > 3.7 => letter_grades.push(String::from(\"A\")),\n   |\
    \             ^ expected pattern\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = Vec::new();\n\
    \    for (grade, grade_index) in grades.iter().enumerate() {\n        if grade\
    \ >= 4.0 { letter_grades.push(\"A+\"); }\n        if grade > 3.0 && grade < 4.0\
    \ { letter_grades.push(\"A-\"); }\n        if grade > 3.3 && grade < 3.7 { letter_grades.push(\"\
    B+\"); }\n        if grade > 3.0 && grade < 3.3 { letter_grades.push(\"B\"); }\n\
    \        if grade > 2.7 && grade < 3.0 { letter_grades.push(\"B-\"); }\n     \
    \   if grade > 2.3 && grade < 2.7 { letter_grades.push(\"C+\"); }\n        if\
    \ grade > 2.0 && grade < 2.3 { letter_grades.push(\"C\"); }\n        if grade\
    \ > 1.7 && grade < 2.0 { letter_grades.push(\"C-\"); }\n        if grade > 1.0\
    \ { letter_grades.push(\"D+\"); }\n        if grade > 0.7 { letter_grades.push(\"\
    D\"); }\n        if grade < 0.0 { letter_grades.push(\"D-\"); }\n        if grade\
    \ > 0.0 { letter_grades.push(\"E\"); }\n    }\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm17ac39p.rs:26:21\n   |\n\
    26 |         if grade >= 4.0 { letter_grades.push(\"A+\"); }\n   |           \
    \          ^^^ expected `usize`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm17ac39p.rs:26:46\n   |\n26 |         if grade\
    \ >= 4.0 { letter_grades.push(\"A+\"); }\n   |                               \
    \               ^^^^- help: try using a conversion method: `.to_string()`\n  \
    \ |                                              |\n   |                     \
    \                         expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm17ac39p.rs:27:20\n   |\n27 |         if grade\
    \ > 3.0 && grade < 4.0 { letter_grades.push(\"A-\"); }\n   |                 \
    \   ^^^ expected `usize`, found floating-point number\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm17ac39p.rs:27:35\n   |\n27 |         if grade > 3.0 &&\
    \ grade < 4.0 { letter_grades.push(\"A-\"); }\n   |                          \
    \         ^^^ expected `usize`, found floating-point number\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm17ac39p.rs:27:60\n   |\n27 |         if grade > 3.0 &&\
    \ grade < 4.0 { letter_grades.push(\"A-\"); }\n   |                          \
    \                                  ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                                       \
    \     |\n   |                                                            expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm17ac39p.rs:28:20\n\
    \   |\n28 |         if grade > 3.3 && grade < 3.7 { letter_grades.push(\"B+\"\
    ); }\n   |                    ^^^ expected `usize`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm17ac39p.rs:28:35\n   |\n28 |\
    \         if grade > 3.3 && grade < 3.7 { letter_grades.push(\"B+\"); }\n   |\
    \                                   ^^^ expected `usize`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm17ac39p.rs:28:60\n\
    \   |\n28 |         if grade > 3.3 && grade < 3.7 { letter_grades.push(\"B+\"\
    ); }\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_set = grades.into_iter().collect::<HashSet<f64>>();\n\
    \    let mut grades_sorted_set = grades.into_iter().sorted().collect::<HashSet<f64>>();\n\
    \n    let mut grades_sorted_by_grade = grades_sorted_set\n        .iter()\n  \
    \      .cloned()\n        .collect::<Vec<(f64, String)>>();\n\n    let mut grades_sorted_by_grade_length\
    \ = grades_sorted_by_grade.len();\n\n    let mut current_grade = grades.first().unwrap();\n\
    \n    let mut current_letter_grade: String;\n\n    let mut previous_grade = grades.last().unwrap();\n\
    \n    while grades_sorted_by_grade_length > 1 {\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length -= 1;\n\n        current_grade -= 1;\n\n\
    \        current_letter_grade = if current_grade < previous_grade {\n        \
    \    \"E\".to_string()\n        } else {\n            let current_letter_grade\
    \ = numerical_letter_grade(grades_set);\n            grades_sorted_by_grade_length\
    \ += 1;\n            current_letter_grade\n        };\n\n        grades_sorted_by_grade_length\
    \ += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\n    \
    \    grades_sorted_by_grade_length += 1;\n\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4_g6wewl.rs:112:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n40  |     while grades_sorted_by_grade_length > 1 {\n    |              \
    \                               - this delimiter might not be properly closed...\n\
    ...\n102 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n112 | }\n    |   ^\n\nerror: mismatched closing delimiter: `}`\n   --> /tmp/tmp4_g6wewl.rs:101:36\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - closing delimiter\
    \ possibly meant for this\n...\n101 |         grades_sorted_by_grade.push(current_letter_grade\n\
    \    |                                    ^ unclosed delimiter\n102 | }\n    |\
    \ ^ mismatched closing delimiter\n\nerror[E0412]: cannot find type `HashSet` in\
    \ this scope\n  --> /tmp/tmp4_g6wewl.rs:24:55\n   |\n24 |     let mut grades_set\
    \ = grades.into_iter().collect::<HashSet<f64>>();\n   |                      \
    \                                 ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp4_g6wewl.rs:25:71\n\
    \   |\n25 |     let mut grades_sorted_set = grades.into_iter().sorted().collect::<HashSet<f64>>();\n\
    \   |                                                                       ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0599]: no method named `sorted`\
    \ found for struct `std::vec::IntoIter` in the current scope\n  --> /tmp/tmp4_g6wewl.rs:25:52\n\
    \   |\n25 |     let mut grades_sorted_set = grades.into_iter().sorted().collect::<HashSet<f64>>();\n\
    \   |                                                    ^^^^^^ method not found\
    \ in `std::vec::IntoIter<f64>`\n\nerror[E0368]: binary assignment operation `-=`\
    \ cannot be a"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .cloned()\n\
    \        .enumerate()\n        .filter(|&(i, grade)| grade > 0)\n        .cloned()\n\
    \        .map(|(i, grade)| {\n            match grade {\n                0 =>\
    \ \"D+\".to_string(),\n                1 => \"D\".to_string(),\n             \
    \   2 => \"C-\".to_string(),\n                3 => \"C\".to_string(),\n      \
    \          4 => \"B-\".to_string(),\n                5 => \"B\".to_string(),\n\
    \                6 => \"A-\".to_string(),\n                7 => \"A\".to_string(),\n\
    \                8 => \"A+\".to_string(),\n                _ => panic!(\"The given\
    \ grades are not between 0 and 8: {}\", grade),\n            }\n        })\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoz6pwhpb.rs:28:39\n   |\n\
    28 |         .filter(|&(i, grade)| grade > 0)\n   |                          \
    \             ^\n   |                                       |\n   |          \
    \                             expected `f64`, found integer\n   |            \
    \                           help: use a float literal: `0.0`\n\nerror[E0271]:\
    \ type mismatch resolving `<Filter<Enumerate<Cloned<std::slice::Iter<'_, f64>>>,\
    \ [closure@/tmp/tmpoz6pwhpb.rs:28:17: 28:40]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmpoz6pwhpb.rs:29:10\n     |\n29   |         .cloned()\n     |        \
    \  ^^^^^^ expected reference, found tuple\n     |\n     = note: expected reference\
    \ `&_`\n                    found tuple `(usize, f64)`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `map` exists for struct `Cloned<Filter<Enumerate<Cloned<std::slice::Iter<'_,\
    \ f64>>>, [closure@/tmp/tmpoz6pwhpb.rs:28:17: 28:40]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpoz6pwhpb.rs:30:10\n   |\n30 |            .map(|(i,\
    \ grade)| {\n   |             ^^^ method cannot be called on `Cloned<Filter<Enumerate<Cloned<std::slice::Iter<'_,\
    \ f64>>>, [closure@/tmp/tmpoz6pwhpb.rs:28:17: 28:40]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Enumerate<Cloned<std::slice::Iter<'_, f64>>>, [closure@/tmp/tmpoz6pwhpb.rs:28:17:\
    \ 28:40]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Enumerate<Cloned<std::slice::Iter<'_,\
    \ f64>>>, [closure@/tmp/tmpoz6pwhpb.rs:28:17: 28:40]>>: Iterator`\n          \
    \ `Cloned<Filter<Enumerate<Cloned<std::slice::Iter<'_, f64>>>, [closure@/tmp/tmpoz6pwhpb.rs:28:17:\
    \ 28:40]>>: Iterator`\n           which is required by `&mut Cloned<Filter<Enumerate<Cloned<std::slice::Iter<'_,\
    \ f64>>>, [closure@/tmp/tmpoz6pwhpb.rs:28:17: 28:40]>>: Iterator`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n\n    for grade\
    \ in grades.iter() {\n        if grade > 4.0 { \n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 { \n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 { \n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 { \n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 { \n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 { \n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 { \n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 { \n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n\n    letter_grades\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1gjd7kq9.rs:27:20\n   |\n\
    27 |         if grade > 4.0 { \n   |                    ^^^\n   |            \
    \        |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1gjd7kq9.rs:29:27\n   |\n29 |         } else\
    \ if grade > 3.7 { \n   |                           ^^^\n   |                \
    \           |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&3.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1gjd7kq9.rs:31:27\n   |\n31 |\
    \         } else if grade > 3.3 { \n   |                           ^^^\n   | \
    \                          |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1gjd7kq9.rs:33:27\n\
    \   |\n33 |         } else if grade > 3.0 { \n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1gjd7kq9.rs:35:27\n\
    \   |\n35 |         } else if grade > 2.7 { \n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1gjd7kq9.rs:37:27\n\
    \   |\n37 |         } else if grade > 2.3 { \n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1gjd7kq9.rs:39:27\n\
    \   |\n39 |         } else if grade > 2.0 { \n   |                           ^^^\n\
    \   |                  "
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else {\n            letter_grades.push(String::from(\"B+\"\
    ));\n        } else if grade > 0.8 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 0.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.4 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.2 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > -0.2 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > -0.4 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.6 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -0.8 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found keyword `else`\n  --> /tmp/tmp8mc6lwmy.rs:34:11\n\
    \   |\n34 |         } else if grade > 0.8 {\n   |           ^^^^ expected expression\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = Vec::new();\n\n    for grade\
    \ in grades.iter() {\n        let letter = match grade {\n            4.0 => \"\
    A+\".to_string(),\n            _ => match grade-3 {\n                1 => \"A\"\
    .to_string(),\n                _ => \"A-\".to_string(),\n            },\n    \
    \        3.7 => \"A\".to_string(),\n            _ => match grade-2 {\n       \
    \         1 => \"A\".to_string(),\n                _ => \"A-\".to_string(),\n\
    \            },\n            3.3 => \"A\".to_string(),\n            _ => match\
    \ grade-1 {\n                1 => \"A\".to_string(),\n                _ => \"\
    A-\".to_string(),\n            },\n            3.0 => \"B+\".to_string(),\n  \
    \          _ => match grade-2 {\n                1 => \"B\".to_string(),\n   \
    \             _ => \"B-\".to_string(),\n            },\n            2.7 => \"\
    B\".to_string(),\n            _ => match grade-2 {\n                1 => \"B\"\
    .to_string(),\n                _ => \"B-\".to_string(),\n            },\n    \
    \        2.3 => \"B\".to_string(),\n            _ => match grade-1 {\n       \
    \         1 => \"B\".to_string(),\n                _ => \"B-\".to_string(),\n\
    \            },\n            2.0 => \"C+\".to_string(),\n            _ => match\
    \ grade-2 {\n                1 => \"C\".to_string(),\n                _ => \"\
    C-\".to_string(),\n            },\n            1.7 => \"C\".to_string(),\n   \
    \         _ => match grade-1 {\n                1 => \"C\".to_string(),\n    \
    \            _ => \"C-\".to_string(),\n            },\n            1.3 => \"C\"\
    .to_string(),\n            _ => match grade-1 {\n                1 => \"C\".to_string(),\n\
    \                _ => \"C-\".to_string(),\n            },\n            1.0 =>\
    \ \"D+\".to_string(),\n            _ => match grade-2 {\n                1 =>\
    \ \"D\".to_string(),\n                _ => \"D-\".to_string(),\n            },\n\
    \            0.7 => \"D\".to_string(),\n            _ => match grade-1 {\n   \
    \             1 => \"D\".to_string(),\n                _ => \"D-\".to_string(),\n\
    \            },\n            0.0 => \"D\".to_string(),\n            _ => \"D-\"\
    .to_string(),\n        };\n        letters.push(letter);\n    }\n    letters\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `{integer}` from `&f64`\n  --> /tmp/tmpqr6gbwom.rs:29:29\n\
    \   |\n29 |             _ => match grade-3 {\n   |                           \
    \  ^ no implementation for `&f64 - {integer}`\n   |\n   = help: the trait `Sub<{integer}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot subtract `{integer}` from `&f64`\n\
    \  --> /tmp/tmpqr6gbwom.rs:34:29\n   |\n34 |             _ => match grade-2 {\n\
    \   |                             ^ no implementation for `&f64 - {integer}`\n\
    \   |\n   = help: the trait `Sub<{integer}>` is not implemented for `&f64`\n \
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \  <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot subtract `{integer}` from `&f64`\n  --> /tmp/tmpqr6gbwom.rs:39:29\n \
    \  |\n39 |             _ => match grade-1 {\n   |                            \
    \ ^ no implementation for `&f64 - {integer}`\n   |\n   = help: the trait `Sub<{integer}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot subtract `{integer}` from `&f64`\n\
    \  --> /tmp/tmpqr6gbwom.rs:44:29\n   "
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_map = vec![vec![\"A\"], vec![\"\
    B\"], vec![\"C\"], vec![\"D\"], vec![\"F\"], vec![\"E\"]];\n    let mut grades_vector\
    \ = vec![];\n\n    for grade in grades {\n        for grade_letter in grades_map\
    \ {\n            if grade < 3.0 {\n                grades_vector.append(grade_letter);\n\
    \            }\n\n            if grade >= 3.0 && grade < 4.0 {\n             \
    \   grades_vector.append(grade_letter + \"+\");\n            }\n\n           \
    \ if grade >= 4.0 && grade < 5.0 {\n                grades_vector.append(grade_letter\
    \ + \"-\");\n            }\n\n            if grade >= 5.0 && grade < 6.0 {\n \
    \               grades_vector.append(grade_letter + \"+\");\n            }\n\n\
    \            if grade >= 6.0 {\n                grades_vector.append(grade_letter\
    \ + \"-\");\n            }\n        }\n    }\n\n    grades_vector\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsf4_rqbp.rs:30:38\n   |\n\
    30 |                 grades_vector.append(grade_letter);\n   |               \
    \                       ^^^^^^^^^^^^\n   |                                   \
    \   |\n   |                                      expected `&mut Vec<_>`, found\
    \ struct `Vec`\n   |                                      help: consider mutably\
    \ borrowing here: `&mut grade_letter`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<_>`\n                         found struct `Vec<&str>`\n\nerror[E0369]:\
    \ cannot add `&str` to `Vec<&str>`\n  --> /tmp/tmpsf4_rqbp.rs:34:51\n   |\n34\
    \ |                 grades_vector.append(grade_letter + \"+\");\n   |        \
    \                              ------------ ^ --- &str\n   |                 \
    \                     |\n   |                                      Vec<&str>\n\
    \nerror[E0369]: cannot add `&str` to `Vec<&str>`\n  --> /tmp/tmpsf4_rqbp.rs:38:51\n\
    \   |\n38 |                 grades_vector.append(grade_letter + \"-\");\n   |\
    \                                      ------------ ^ --- &str\n   |         \
    \                             |\n   |                                      Vec<&str>\n\
    \nerror[E0369]: cannot add `&str` to `Vec<&str>`\n  --> /tmp/tmpsf4_rqbp.rs:42:51\n\
    \   |\n42 |                 grades_vector.append(grade_letter + \"+\");\n   |\
    \                                      ------------ ^ --- &str\n   |         \
    \                             |\n   |                                      Vec<&str>\n\
    \nerror[E0369]: cannot add `&str` to `Vec<&str>`\n  --> /tmp/tmpsf4_rqbp.rs:46:51\n\
    \   |\n46 |                 grades_vector.append(grade_letter + \"-\");\n   |\
    \                                      ------------ ^ --- &str\n   |         \
    \                             |\n   |                                      Vec<&str>\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = Vec::new();\n    let mut a\
    \ = grades[0];\n    let mut b = grades[1];\n    let mut c = grades[2];\n    let\
    \ mut d = grades[3];\n    let mut e = grades[4];\n\n    if a > 4.0 {\n       \
    \ letters.push(\"A+\");\n        grades.remove(0);\n    }\n    if a <= 3.7 {\n\
    \        letters.push(\"A\");\n        grades.remove(0);\n    }\n    if a <= 3.3\
    \ {\n        letters.push(\"A-\");\n        grades.remove(0);\n    }\n    if a\
    \ >= 3.0 {\n        letters.push(\"B+\");\n        grades.remove(0);\n    }\n\
    \    if a >= 2.7 {\n        letters.push(\"B\");\n        grades.remove(0);\n\
    \    }\n    if a >= 2.3 {\n        letters.push(\"B-\");\n        grades.remove(0);\n\
    \    }\n    if a >= 2.0 {\n        letters.push(\"C+\");\n        grades.remove(0);\n\
    \    }\n    if a >= 1.7 {\n        letters.push(\"C\");\n        grades.remove(0);\n\
    \    }\n    if a >= 1.3 {\n        letters.push(\"C-\");\n        grades.remove(0);\n\
    \    }\n    if a >= 1.0 {\n        letters.push(\"D+\");\n        grades.remove(0);\n\
    \    }\n    if a >= 0.7 {\n        letters.push(\"D\");\n        grades.remove(0);\n\
    \    }\n    if a >= 0.0 {\n        letters.push(\"D-\");\n        grades.remove(0);\n\
    \    }\n    if b > 4.0 {\n        letters.push(\"A+\");\n        grades.remove(1);\n\
    \    }\n    if b <= 3.7 {\n        letters.push(\"A\");\n        grades.remove(1);\n\
    \    }\n    if b <= 3.3 {\n        letters.push(\"A-\");\n        grades.remove(1);\n\
    \    }\n    if b >= 3.0 {\n        letters.push(\"B+\");\n        grades.remove(1);\n\
    \    }\n    if b >= 2.7 {\n        letters.push(\"B\");\n        grades.remove(1);\n\
    \    }\n    if b >= 2.3 {\n        letters.push(\"B-\");\n        grades.remove(1);\n\
    \    }\n    if b >= 2.0 {\n        letters.push(\"C+\");\n        grades.remove(1);\n\
    \    }\n    if b >= 1.7 {\n        letters.push(\"C\");\n        grades.remove(1);\n\
    \    }\n    if b >= 1.3 {\n        letters.push(\"C-\");\n        grades.remove(1);\n\
    \    }\n    if b >= 1.0 {\n        letters.push(\"D+\");\n        grades.remove(1);\n\
    \    }\n    if b >= 0.7 {\n        letters.push\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpn95o88el.rs:131:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n119 |     if b >= 0.7 {\n    |                 - this delimiter might not\
    \ be properly closed...\n120 |         letters.push\n121 | }\n    | - ...as it\
    \ matches this but it has different indentation\n...\n131 | }\n    |   ^\n\nerror[E0615]:\
    \ attempted to take value of method `push` on type `Vec<&str>`\n   --> /tmp/tmpn95o88el.rs:120:17\n\
    \    |\n120 |         letters.push\n    |                 ^^^^ method, not a field\n\
    \    |\nhelp: use parentheses to call the method\n    |\n120 |         letters.push(_)\n\
    \    |                     +++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn95o88el.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0615.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        match grade {\n            0.0  => grades_vec.push(\"\
    E\"),\n            1.0 => grades_vec.push(\"D+\"),\n            2.0  => grades_vec.push(\"\
    D\"),\n            3.0  => grades_vec.push(\"C+\"),\n            4.0  => grades_vec.push(\"\
    C\"),\n            5.0  => grades_vec.push(\"B-\"),\n            6.0  => grades_vec.push(\"\
    B\"),\n            7.0  => grades_vec.push(\"A-\"),\n            8.0  => grades_vec.push(\"\
    A\"),\n            9.0  => grades_vec.push(\"A+\"),\n            _   => grades_vec.push(\"\
    F\"),\n        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppj5tl340.rs:27:37\n   |\n\
    27 |             0.0  => grades_vec.push(\"E\"),\n   |                       \
    \              ^^^- help: try using a conversion method: `.to_string()`\n   |\
    \                                     |\n   |                                \
    \     expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppj5tl340.rs:28:36\n   |\n28 |             1.0 => grades_vec.push(\"\
    D+\"),\n   |                                    ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                    |\n   |    \
    \                                expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppj5tl340.rs:29:37\n   |\n29 |             2.0\
    \  => grades_vec.push(\"D\"),\n   |                                     ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \             |\n   |                                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppj5tl340.rs:30:37\n\
    \   |\n30 |             3.0  => grades_vec.push(\"C+\"),\n   |               \
    \                      ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                     |\n   |                            \
    \         expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppj5tl340.rs:31:37\n   |\n31 |             4.0  => grades_vec.push(\"\
    C\"),\n   |                                     ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                     |\n   |   \
    \                                  expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmppj5tl340.rs:32:37\n   |\n32 |  \
    \           5.0  => grades_vec.push(\"B-\"),\n   |                           \
    \          ^^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \                                  |\n   |                                   \
    \  expected struct `String`, found `&str`\n\nerror[E0308]: mismatched"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.is_empty() {\n        return vec![String::from(\"\
    E\")];\n    }\n    let mut letter_grades: Vec<String> = vec![String::from(\"E\"\
    )];\n    let mut grade_sum: f64 = 0.0;\n    for grade in grades.iter() {\n   \
    \     if grade > 2.7 {\n            letter_grades.push(String::from(\"B+\"));\n\
    \            grade_sum += grade;\n        } else if grade > 2.3 {\n          \
    \  letter_grades.push(String::from(\"B-\"));\n            grade_sum += grade;\n\
    \        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C+\"));\n            grade_sum += grade;\n        } else if grade > 1.3 {\n  \
    \          letter_grades.push(String::from(\"C-\"));\n            grade_sum +=\
    \ grade;\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n            grade_sum += grade;\n        } else if grade > 0.3 {\n  \
    \          letter_grades.push(String::from(\"D-\"));\n            grade_sum +=\
    \ grade;\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n            grade_sum += grade;\n        } else {\n            letter_grades.push(String::from(\"\
    C\"));\n            grade_sum += grade;\n        }\n    }\n    letter_grades.push(format!(\"\
    {}\", grade_sum / grades.len()));\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfxymf109.rs:30:20\n   |\n\
    30 |         if grade > 2.7 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&2.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfxymf109.rs:33:27\n   |\n33 |         } else\
    \ if grade > 2.3 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.3`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfxymf109.rs:36:27\n   |\n36 |\
    \         } else if grade > 1.7 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfxymf109.rs:39:27\n\
    \   |\n39 |         } else if grade > 1.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfxymf109.rs:42:27\n\
    \   |\n42 |         } else if grade > 0.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfxymf109.rs:45:27\n\
    \   |\n45 |         } else if grade > 0.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfxymf109.rs:48:27\n\
    \   |\n48 |         } else if grade > 0.0 {\n   |                           ^^^\n\
    \   |                         "
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let\
    \ mut total_grade = 0;\n    for grade in grades {\n        total_grade += grade;\n\
    \        let percentage = (total_grade - grade) / total_grade;\n        if percentage\
    \ > 0.4 {\n            letter_grades.push(String::from(\"A+\"));\n        }\n\
    \        if percentage > 0.3 && percentage < 0.4  {\n            letter_grades.push(String::from(\"\
    A\"));\n        }\n        if percentage > 0.3 && percentage < 0.4  {\n      \
    \      letter_grades.push(String::from(\"A-\"));\n        }\n        if percentage\
    \ > 0.2 && percentage < 0.3  {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n        if percentage > 0.2 && percentage < 0.3  {\n     \
    \       letter_grades.push(String::from(\"B\"));\n        }\n        if percentage\
    \ > 0.2 && percentage < 0.3  {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n        if percentage > 0.1 && percentage < 0.2  {\n     \
    \       letter_grades.push(String::from(\"C+\"));\n        }\n        if percentage\
    \ > 0.1 && percentage < 0.2  {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n        if percentage > 0.1 && percentage < 0.2  {\n      \
    \      letter_grades.push(String::from(\"C-\"));\n        }\n        if percentage\
    \ > 0 && percentage < 0.1  {\n            letter_grades.push(String::from(\"D+\"\
    ));\n        }\n        if percentage > 0 && percentage < 0.1  {\n           \
    \ letter_grades.push(String::from(\"D\"));\n        }\n        if percentage >\
    \ 0 && percentage < 0.1  {\n            letter_grades.push(String::from(\"D-\"\
    ));\n        }\n        if percentage == 0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpwrmads6g.rs:27:21\n\
    \   |\n27 |         total_grade += grade;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract `f64` from `{integer}`\n  --> /tmp/tmpwrmads6g.rs:28:39\n\
    \   |\n28 |         let percentage = (total_grade - grade) / total_grade;\n  \
    \ |                                       ^ no implementation for `{integer} -\
    \ f64`\n   |\n   = help: the trait `Sub<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ grade_max = grades.iter().max().unwrap();\n    for grade in grades.iter() {\n\
    \        if grade <= grade_max {\n            letter_grades.push(format!(\"{}+\"\
    , grade_max as char));\n        } else {\n            letter_grades.push(format!(\"\
    {}\", grade as char));\n        }\n        grade_max = grade;\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp_jmc4f28.rs:25:39\n\
    \     |\n25   |     let mut grade_max = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0606]: casting `&f64` as `char` is invalid\n  --> /tmp/tmp_jmc4f28.rs:28:47\n\
    \   |\n28 |             letter_grades.push(format!(\"{}+\", grade_max as char));\n\
    \   |                                               ---------^^^^^^^^\n   |  \
    \                                             |\n   |                        \
    \                       cannot cast `&f64` as `char`\n   |                   \
    \                            help: dereference the expression: `*grade_max`\n\n\
    error[E0606]: casting `&f64` as `char` is invalid\n  --> /tmp/tmp_jmc4f28.rs:30:46\n\
    \   |\n30 |             letter_grades.push(format!(\"{}\", grade as char));\n\
    \   |                                              -----^^^^^^^^\n   |       \
    \                                       |\n   |                              \
    \                cannot cast `&f64` as `char`\n   |                          \
    \                    help: dereference the expression: `*grade`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0606.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_letter: Vec<String> = Vec::new();\n\
    \    for g in grades {\n        if g < 0.0 {\n            grades_letter.push(String::from(\"\
    F\"));\n        } else if g < 1.0 {\n            grades_letter.push(String::from(\"\
    D-\"));\n        } else if g < 2.0 {\n            grades_letter.push(String::from(\"\
    C-\"));\n        } else if g < 3.0 {\n            grades_letter.push(String::from(\"\
    B-\"));\n        } else if g < 4.0 {\n            grades_letter.push(String::from(\"\
    B-\"));\n        } else if g < 5.0 {\n            grades_letter.push(String::from(\"\
    A-\"));\n        } else if g < 6.0 {\n            grades_letter.push(String::from(\"\
    A-\"));\n        } else if g < 7.0 {\n            grades_letter.push(String::from(\"\
    A+\"));\n        } else if g < 8.0 {\n            grades_letter.push(String::from(\"\
    A+\"));\n        } else if g < 9.0 {\n            grades_letter.push(String::from(\"\
    A+\"));\n        } else if g < 10.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 11.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 12.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 13.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 14.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 15.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 16.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 17.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 18.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 19.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 20.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 21.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 22.0 {\n            grades_letter.push(\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1cdyqrg7.rs:82:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut grades_letter: Vec<String> = Vec::new();\n25 |     for g in grades\
    \ {\n   |                     - unclosed delimiter\n...\n70 |         } else if\
    \ g < 22.0 {\n   |                            - this delimiter might not be properly\
    \ closed...\n71 |             grades_letter.push(\n72 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n82 | }\n   |   ^\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp1cdyqrg7.rs:71:31\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n71 |     \
    \        grades_letter.push(\n   |                               ^ unclosed delimiter\n\
    72 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes\
    \ 1 argument but 0 arguments were supplied\n    --> /tmp/tmp1cdyqrg7.rs:71:27\n\
    \     |\n71   |             grades_letter.push(\n     |                      \
    \     ^^^^- supplied 0 arguments\n     |                           |\n     | \
    \                          expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1cdyqrg7.rs:25:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n24 |       let mut grades_letter: Vec<String> = Vec::new();\n\
    25 | /     for g in grades {\n26 | |         if g < 0.0 {\n27 | |            \
    \ grades_letter.push(String::from(\"F\"));\n28 | |         } else if g < 1.0 {\n\
    ...  |\n81 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n82 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\ner"
  stdout: ''
  timestamp: 1660011029
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Complete this function\n    let mut letter\
    \ = Vec::new();\n    letter.push(String::from(\"A+\"));\n    if grades[0] >= 3.0\
    \ {\n        letter.push(String::from(\"A\"));\n    }\n    if grades[1] >= 3.7\
    \ {\n        letter.push(String::from(\"A-\"));\n    }\n    if grades[2] >= 3.3\
    \ {\n        letter.push(String::from(\"B+\"));\n    }\n    if grades[3] >= 2.7\
    \ {\n        letter.push(String::from(\"B\"));\n    }\n    if grades[4] >= 2.3\
    \ {\n        letter.push(String::from(\"B-\"));\n    }\n    if grades[5] >= 1.3\
    \ {\n        letter.push(String::from(\"C+\"));\n    }\n    if grades[6] >= 0.7\
    \ {\n        letter.push(String::from(\"C\"));\n    }\n    if grades[7] >= 0.3\
    \ {\n        letter.push(String::from(\"C-\"));\n    }\n    if grades[8] >= 0.0\
    \ {\n        letter.push(String::from(\"D+\"));\n    }\n    if grades[9] >= 0.0\
    \ {\n        letter.push(String::from(\"D\"));\n    }\n    if grades[10] >= 0.0\
    \ {\n        letter.push(String::from(\"D-\"));\n    }\n    if grades[11] >= 0.0\
    \ {\n        letter.push(String::from(\"E\"));\n    }\n    letter\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmp0w4d3gup.rs:42:8

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy: Vec<String> = grades.iter().map(|x|\
    \ numerical_letter_grade(x)).collect();\n\n    grades_copy.sort_by_key(|&x| x.to_ascii_lowercase());\n\
    \    grades_copy.push(\"\");\n\n    return grades_copy;\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_exbo0lb.rs:24:85\n   |\n\
    24 |     let mut grades_copy: Vec<String> = grades.iter().map(|x| numerical_letter_grade(x)).collect();\n\
    \   |                                                                        \
    \             ^ expected struct `Vec`, found `&f64`\n   |\n   = note: expected\
    \ struct `Vec<f64>`\n           found reference `&f64`\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `Vec<String>`\n    --> /tmp/tmp_exbo0lb.rs:24:89\n     |\n24   |     let mut\
    \ grades_copy: Vec<String> = grades.iter().map(|x| numerical_letter_grade(x)).collect();\n\
    \     |                                                                      \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=Vec<String>>`\n\
    \     |\n     = help: the trait `FromIterator<Vec<String>>` is not implemented\
    \ for `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_exbo0lb.rs:27:22\n   |\n27 |     grades_copy.push(\"\"\
    );\n   |                      ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                      |\n   |                      expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for i in\
    \ 0..grades.len() {\n        match grades[i] {\n            4.0 => letter_grades.push(String::from(\"\
    A+\")),\n            _ => if grades[i] > 3.7 && grades[i] < 3.3 {\n          \
    \      letter_grades.push(String::from(\"A\"));\n            } else if grades[i]\
    \ > 3.3 && grades[i] < 3.0 {\n                letter_grades.push(String::from(\"\
    A-\"));\n            } else if grades[i] > 2.7 && grades[i] < 2.3 {\n        \
    \        letter_grades.push(String::from(\"B\"));\n            } else if grades[i]\
    \ > 2.3 && grades[i] < 2.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n            } else if grades[i] > 1.7 && grades[i] < 1.3 {\n        \
    \        letter_grades.push(String::from(\"C\"));\n            } else if grades[i]\
    \ > 1.3 && grades[i] < 1.0 {\n                letter_grades.push(String::from(\"\
    C-\"));\n            } else if grades[i] > 0.7 && grades[i] < 0.3 {\n        \
    \        letter_grades.push(String::from(\"D\"));\n            } else if grades[i]\
    \ > 0.3 && grades[i] < 0.0 {\n                letter_grades.push(String::from(\"\
    D-\"));\n            } else if grades[i] > 0.0 {\n                letter_grades.push(String::from(\"\
    E\"));\n            }\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"E\", \"E\", \"E\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpzliaege7.rs:54:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: -1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grade = grades[grades.len() - 1];\n\n\
    \    // Find first non zero number in vector and make it 0 \n    // then get the\
    \ difference between the current grade and zero\n    while grade > 0.0 {\n   \
    \     grade = grades[grades.len() - 1];\n    }\n\n    // Find the index where\
    \ the value is greated than the zero \n    // and get the difference between the\
    \ current grade and zero\n    let mut index = grades.len() - 1;\n    let mut grades\
    \ = grades.clone();\n\n    // Iterate over the vector until you reach the index\
    \ where \n    // the difference between the current grade and zero is greater\
    \ than zero\n    while index < grades.len() - 1 && grades[index] > 0.0 {\n   \
    \     grade = grades[index];\n        index += 1;\n    }\n\n    // At this point\
    \ you should have all the numbers until \n    // the one that is less than zero,\
    \ which is the last number.\n    // The difference between the current grade and\
    \ the last grade \n    // is zero and you have all the grades until the last one\n\
    \n    // The result vector is now empty because \n    // you have a 0 that is\
    \ the last number\n    vec![]\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660011035
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n\n    let mut\
    \ gpas = grades.iter().cloned();\n    let mut cum_gpa = f64::from(0.0);\n    while\
    \ gpas.len() > 0 {\n        let gpa: f64 = gpas.pop();\n        let cum_gpa =\
    \ f64::from(gpa) + cum_gpa;\n\n        letter_grades.push(f64::from(*gpas).to_degrees()\
    \ - cum_gpa.to_degrees());\n    }\n\n    let gpa: f64 = grades.iter().max().unwrap();\n\
    \    letter_grades.push(gpa.to_degrees() - cum_gpa.to_degrees());\n\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pop` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmp1du236ax.rs:29:29\n   |\n29 |         let gpa: f64 = gpas.pop();\n\
    \   |                             ^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ f64>>`\n\nerror[E0614]: type `Cloned<std::slice::Iter<'_, f64>>` cannot be dereferenced\n\
    \  --> /tmp/tmp1du236ax.rs:32:38\n   |\n32 |         letter_grades.push(f64::from(*gpas).to_degrees()\
    \ - cum_gpa.to_degrees());\n   |                                      ^^^^^\n\n\
    error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp1du236ax.rs:35:34\n\
    \     |\n35   |     let gpa: f64 = grades.iter().max().unwrap();\n     |     \
    \                             ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1du236ax.rs:35:20\n   |\n35 |\
    \     let gpa: f64 = grades.iter().max().unwrap();\n   |              ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |              |\n   |              expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n35 |     let\
    \ gpa: f64 = *grades.iter().max().unwrap();\n   |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1du236ax.rs:38:5\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n38 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `f64`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<f64>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E05"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let letter_grade = match grade {\n            4.0  => \"\
    A+\",\n            3.7 => \"A\",\n            3.3 => \"A-\",\n            3.0\
    \ => \"B+\",\n            2.7 => \"B\",\n            2.3 => \"B-\",\n        \
    \    2.0 => \"C+\",\n            1.7 => \"C\",\n            1.3 => \"C-\",\n \
    \           1.0 => \"D+\",\n            0.7  => \"D\",\n            0.0  => \"\
    D-\",\n            _   => \"E\",\n        };\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9hgaa_8k.rs:43:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n43 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n\
    \        .map(|(i, grade)| {\n            if grade < 0.0 {\n                format!(\"\
    {}\", grade - 1.0)\n            } else {\n                format!(\"{}\", grade)\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbzdlkll2.rs:28:24\n   |\n\
    28 |             if grade < 0.0 {\n   |                        ^^^\n   |     \
    \                   |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&0.0`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.pop();\n\
    \    grades_copy.sort();\n    let mut grades_sorted = vec![];\n    for grade in\
    \ grades_copy {\n        if grade < 3.0 {\n            grades_sorted.push(\"D-\"\
    );\n        } else if grade >= 3.0 && grade < 3.3 {\n            grades_sorted.push(\"\
    B-\");\n        } else if grade >= 3.3 && grade < 3.7 {\n            grades_sorted.push(\"\
    B-\");\n        } else if grade >= 3.7 && grade < 4.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 4.0 && grade < 4.3 {\n            grades_sorted.push(\"\
    C-\");\n        } else if grade >= 4.3 && grade < 4.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 4.7 && grade < 5.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 5.0 && grade < 5.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 5.3 && grade < 5.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 5.7 && grade < 6.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 6.0 && grade < 6.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 6.3 && grade < 6.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 6.7 && grade < 7.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 7.0 && grade < 7.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 7.3 && grade < 7.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 7.7 && grade < 8.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 8.0 && grade < 8.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 8.3 && grade < 8.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 8.7 && grade \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpa0fog0dr.rs:76:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     for grade in grades_copy {\n   |                              -\
    \ this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n76 | }\n   |   ^\n\nerror:\
    \ expected `{`, found `}`\n  --> /tmp/tmpa0fog0dr.rs:66:1\n   |\n65 |        \
    \ } else if grade >= 8.7 && grade \n   |                -- this `if` expression\
    \ has a condition, but no block\n66 | }\n   | ^ expected `{`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpa0fog0dr.rs:26:17\n\
    \    |\n26  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa0fog0dr.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n\n    for\
    \ grade in grades {\n        let grade = grade as f32;\n        if grade < 3.5\
    \ {\n            letter_grades.push(String::from(\"A+\"));\n        } else if\
    \ grade < 3.0 {\n            letter_grades.push(String::from(\"A-\"));\n     \
    \   } else if grade < 2.7 {\n            letter_grades.push(String::from(\"B+\"\
    ));\n        } else if grade < 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 1.8 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 1.4 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"D-\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"D-\", \"A+\", \"A+\", \"A+\", \"D-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpq7i2dhpb.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![String::from(\"\
    \")];\n    let (min, max) = grades.min().unwrap(), grades.max().unwrap();\n  \
    \  \n    for i in grades.iter() {\n        match i {\n            min => {\n \
    \               for j in (0..).rev() {\n                    letter_grades.insert(j,\
    \ String::from(\"A\"));\n                }\n            },\n            max =>\
    \ {\n                for j in (0..).rev() {\n                    letter_grades.insert(j,\
    \ String::from(\"D\"));\n                }\n            },\n            _ => {\n\
    \                for j in (0..).rev() {\n                    letter_grades.insert(j,\
    \ String::from(\"E\"));\n                }\n            }\n        }\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \  --> /tmp/tmp135e45nq.rs:25:43\n   |\n25 |     let (min, max) = grades.min().unwrap(),\
    \ grades.max().unwrap();\n   |                                           ^ expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_chars = grades.into_iter().map(|grade|\
    \ {\n        if grade >= 3.3 {\n            String::from(\"A+\")\n        } else\
    \ if grade >= 3.0 {\n            String::from(\"A\")\n        } else if grade\
    \ >= 2.7 {\n            String::from(\"B\")\n        } else if grade >= 2.3 {\n\
    \            String::from(\"B+\")\n        } else if grade >= 2.0 {\n        \
    \    String::from(\"B\")\n        } else if grade >= 1.7 {\n            String::from(\"\
    C\")\n        } else if grade >= 1.3 {\n            String::from(\"C+\")\n   \
    \     } else if grade >= 1.0 {\n            String::from(\"C\")\n        } else\
    \ if grade >= 0.7 {\n            String::from(\"D\")\n        } else if grade\
    \ >= 0.3 {\n            String::from(\"D+\")\n        } else if grade >= 0.0 {\n\
    \            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    });\n    grades_chars.collect().collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpwenltkq2.rs:51:18\n\
    \   |\n51 |     grades_chars.collect().collect::<Vec<String>>()\n   |        \
    \          ^^^^^^^ cannot infer type for type parameter `B` declared on the associated\
    \ function `collect`\n   |\n   = note: type must be known at this point\nhelp:\
    \ consider specifying the type argument in the method call\n   |\n51 |     grades_chars.collect::<B>().collect::<Vec<String>>()\n\
    \   |                         +++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_sorted = grades.iter().sort();\n\
    \    let mut grade_vec = vec![];\n    for i in grades_sorted {\n        let gpa\
    \ = *i;\n        if gpa > 3.0 {\n            grade_vec.push(format!(\"{}+\", gpa));\n\
    \        } else if gpa > 2.7 {\n            grade_vec.push(format!(\"{}\", gpa));\n\
    \        } else if gpa > 2.3 {\n            grade_vec.push(format!(\"{}-\", gpa));\n\
    \        } else if gpa > 1.7 {\n            grade_vec.push(format!(\"{}\", gpa));\n\
    \        } else if gpa > 1.0 {\n            grade_vec.push(format!(\"{}\", gpa));\n\
    \        } else if gpa > 0.7 {\n            grade_vec.push(format!(\"{}\", gpa));\n\
    \        } else {\n            grade_vec.push(format!(\"{}\", gpa));\n       \
    \ }\n    }\n    grade_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpmot56wpg.rs:24:39\n   |\n24 |     let grades_sorted\
    \ = grades.iter().sort();\n   |                                       ^^^^ method\
    \ not found in `std::slice::Iter<'_, f64>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade == 0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"D\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjhnbp8ns.rs:26:20\n   |\n\
    26 |         if grade > 0 {\n   |                    ^\n   |                 \
    \   |\n   |                    expected `f64`, found integer\n   |           \
    \         help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjhnbp8ns.rs:28:27\n   |\n28 |         } else if grade < 0 {\n \
    \  |                           ^\n   |                           |\n   |     \
    \                      expected `f64`, found integer\n   |                   \
    \        help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjhnbp8ns.rs:30:28\n   |\n30 |         } else if grade == 0 {\n\
    \   |                            ^\n   |                            |\n   |  \
    \                          expected `f64`, found integer\n   |               \
    \             help: use a float literal: `0.0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter().cloned();\n\
    \    let mut letter_grades = vec![];\n    while grades_iter.any(|grade| grade\
    \ < 4.0) {\n        let mut new_grade: f64 = grades_iter.next().unwrap();\n  \
    \      while new_grade < 4.0 {\n            letter_grades.push(format!(\"{}+\"\
    , new_grade));\n            new_grade += 5.0;\n        }\n        while new_grade\
    \ >= 4.0 {\n            let grade: f64 = new_grade;\n            letter_grades.push(format!(\"\
    {}\", grade < 3.0 ? \"A\" : \"A-\"));\n            new_grade -= 3.0;\n       \
    \ }\n    }\n    while grades_iter.any(|grade| grade >= 5.0) {\n        let mut\
    \ new_grade: f64 = grades_iter.next().unwrap();\n        while new_grade >= 5.0\
    \ {\n            letter_grades.push(format!(\"{}+\", new_grade));\n          \
    \  new_grade += 4.0;\n        }\n        while new_grade < 5.0 {\n           \
    \ let grade: f64 = new_grade;\n            letter_grades.push(format!(\"{}\",\
    \ grade < 3.0 ? \"B\" : \"B-\"));\n            new_grade -= 3.0;\n        }\n\
    \    }\n    while grades_iter.any(|grade| grade < 5.0) {\n        let mut new_grade:\
    \ f64 = grades_iter.next().unwrap();\n        while new_grade >= 5.0 {\n     \
    \       letter_grades.push(format!(\"{}+\", new_grade));\n            new_grade\
    \ += 4.0;\n        }\n        while new_grade < 5.0 {\n            let grade:\
    \ f64 = new_grade;\n            letter_grades.push(format!(\"{}\", grade < 3.0\
    \ ? \"C\" : \"C-\"));\n            new_grade -= 3.0;\n        }\n    }\n    while\
    \ grades_iter.any(|grade| grade >= 5.0) {\n        let mut new_grade: f64 = grades_iter.next().unwrap();\n\
    \        while new_grade >= 5.0 {\n            letter_grades.push(format!(\"{}+\"\
    , new_grade));\n            new_grade += 4.0;\n        }\n        while new_grade\
    \ < 5.0 {\n            let grade: f64 = new_grade;\n            letter_grades.push(format!(\"\
    {}\", grade < 3.0 ? \"D\" : \"D-\"));\n            new_grade -= 3.0;\n       \
    \ }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, or an operator, found `\"A\"`\n \
    \ --> /tmp/tmplbk_xx85.rs:34:60\n   |\n34 |             letter_grades.push(format!(\"\
    {}\", grade < 3.0 ? \"A\" : \"A-\"));\n   |                                  \
    \                          ^^^ expected one of `,`, `.`, `?`, or an operator\n\
    \nerror: expected one of `,`, `.`, `?`, or an operator, found `\"B\"`\n  --> /tmp/tmplbk_xx85.rs:46:60\n\
    \   |\n46 |             letter_grades.push(format!(\"{}\", grade < 3.0 ? \"B\"\
    \ : \"B-\"));\n   |                                                          \
    \  ^^^ expected one of `,`, `.`, `?`, or an operator\n\nerror: expected one of\
    \ `,`, `.`, `?`, or an operator, found `\"C\"`\n  --> /tmp/tmplbk_xx85.rs:58:60\n\
    \   |\n58 |             letter_grades.push(format!(\"{}\", grade < 3.0 ? \"C\"\
    \ : \"C-\"));\n   |                                                          \
    \  ^^^ expected one of `,`, `.`, `?`, or an operator\n\nerror: expected one of\
    \ `,`, `.`, `?`, or an operator, found `\"D\"`\n  --> /tmp/tmplbk_xx85.rs:70:60\n\
    \   |\n70 |             letter_grades.push(format!(\"{}\", grade < 3.0 ? \"D\"\
    \ : \"D-\"));\n   |                                                          \
    \  ^^^ expected one of `,`, `.`, `?`, or an operator\n\nerror: aborting due to\
    \ 4 previous errors\n\n"
  stdout: ''
  timestamp: 1660011029
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = vec![];\n\n    for grade in\
    \ grades {\n        if grade > 2.3 {\n            letters.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 && grade < 2.3 {\n            letters.push(String::from(\"\
    B\"));\n        } else if grade > 1.7 && grade < 2.0 {\n            letters.push(String::from(\"\
    C+\"));\n        } else if grade > 1.0 && grade < 1.7 {\n            letters.push(String::from(\"\
    C\"));\n        } else if grade > 0.7 && grade < 1.0 {\n            letters.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 && grade < 0.7 {\n            letters.push(String::from(\"\
    C-\"));\n        } else if grade > -0.0 && grade < 0.0 {\n            letters.push(String::from(\"\
    D\"));\n        } else if grade > -1.0 && grade < -0.0 {\n            letters.push(String::from(\"\
    D-\"));\n        } else if grade > -2.0 && grade < -1.0 {\n            letters.push(String::from(\"\
    D-\"));\n        } else if grade > -3.0 && grade < -2.0 {\n            letters.push(String::from(\"\
    D+\"));\n        } else {\n            letters.push(String::from(\"E\"));\n  \
    \      }\n    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B+\", \"E\", \"E\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpzh73qt5l.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades.iter() {\n        if grade > 4.0 {\n            if grade > 3.7 {\n\
    \                if grade > 3.3 {\n                    if grade > 3.0 {\n    \
    \                    if grade > 2.7 {\n                            if grade >\
    \ 2.3 {\n                                if grade > 2.0 {\n                  \
    \                  if grade > 1.7 {\n                                        if\
    \ grade > 1.0 {\n                                            if grade > 0.7 {\n\
    \                                                if grade > 0.0 {\n          \
    \                                          grades_string.push(\"D-\");\n     \
    \                                           } else {\n                       \
    \                             grades_string.push(\"D+\");\n                  \
    \                              }\n                                           \
    \ } else {\n                                                grades_string.push(\"\
    D\");\n                                            }\n                       \
    \                 } else {\n                                            grades_string.push(\"\
    C+\");\n                                        }\n                          \
    \          } else {\n                                        grades_string.push(\"\
    C\");\n                                    }\n                               \
    \ } else {\n                                    grades_string.push(\"B-\");\n\
    \                                }\n                            } else {\n   \
    \                             grades_string.push(\"B+\");\n                  \
    \          }\n                        } else {\n                            grades_string.push(\"\
    B\");\n                        }\n                    } else {\n             \
    \           grades_string.push(\"A-\");\n                    }\n             \
    \   } else {\n                    grades_string.push(\"A+\");\n              \
    \  }\n            } else {\n                grades_string.push(\"A\");\n     \
    \       }\n        } else {\n            grades_string.push(\"E\");\n        }\n\
    \    }\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdrgwcs72.rs:26:20\n   |\n\
    26 |         if grade > 4.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdrgwcs72.rs:27:24\n   |\n27 |             if\
    \ grade > 3.7 {\n   |                        ^^^\n   |                       \
    \ |\n   |                        expected `&f64`, found floating-point number\n\
    \   |                        help: consider borrowing here: `&3.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdrgwcs72.rs:28:28\n   |\n28 |              \
    \   if grade > 3.3 {\n   |                            ^^^\n   |              \
    \              |\n   |                            expected `&f64`, found floating-point\
    \ number\n   |                            help: consider borrowing here: `&3.3`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdrgwcs72.rs:29:32\n   |\n29 |\
    \                     if grade > 3.0 {\n   |                                ^^^\n\
    \   |                                |\n   |                                expected\
    \ `&f64`, found floating-point number\n   |                                help:\
    \ consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdrgwcs72.rs:30:36\n\
    \   |\n30 |                         if grade > 2.7 {\n   |                   \
    \                 ^^^\n   |                                    |\n   |       \
    \                             expected `&f64`, found floating-point number\n \
    \  |                                    help: consider borrowing here: `&2.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdrgwcs72.rs:31:40\n   |\n31 |\
    \ ...                   if grade > 2.3 {\n   |                               \
    \   ^^^\n   |                                  |\n   |                       \
    \           expected `&f64`, found floating-point number\n   |               \
    \                   help: consider borrowing here: `&2.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdrgwcs72.rs:32:44\n   |\n32 | ."
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() < 1 {\n        return vec![];\n\
    \    }\n    let mut grade_vector = vec![];\n    let mut temp_grade = grades[0];\n\
    \    let mut temp_counter = 0;\n    let mut grade = temp_grade as i32;\n    let\
    \ mut counter = temp_counter as i32;\n    while counter <= grades.len() - 1 {\n\
    \        let mut temp_grade = grades[counter];\n        if temp_grade > grade\
    \ {\n            grade_vector = vec![String::from(temp_grade as char)];\n    \
    \        temp_grade = grades[counter];\n            temp_counter = counter;\n\
    \            grade = temp_grade as i32;\n            counter = temp_counter as\
    \ i32;\n        } else {\n            grade_vector = grade_vector.push(String::from(temp_grade\
    \ as char));\n            temp_grade = grades[counter];\n            temp_counter\
    \ = counter;\n            grade = temp_grade as i32;\n            counter = temp_counter\
    \ as i32;\n        }\n    }\n    grade_vector.push(String::from(\"D\"));\n   \
    \ grade_vector\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8h6on9vy.rs:32:22\n   |\n\
    32 |     while counter <= grades.len() - 1 {\n   |                      ^^^^^^^^^^^^^^^^\
    \ expected `i32`, found `usize`\n   |\nhelp: you can convert a `usize` to an `i32`\
    \ and panic if the converted value doesn't fit\n   |\n32 |     while counter <=\
    \ (grades.len() - 1).try_into().unwrap() {\n   |                      +      \
    \          +++++++++++++++++++++\n\nerror[E0277]: the type `[f64]` cannot be indexed\
    \ by `i32`\n  --> /tmp/tmp8h6on9vy.rs:33:30\n   |\n33 |         let mut temp_grade\
    \ = grades[counter];\n   |                              ^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[f64]>` is not implemented for `i32`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<i32>` for `Vec<f64>`\n\nerror[E0277]: the type `[f64]`\
    \ cannot be indexed by `i32`\n  --> /tmp/tmp8h6on9vy.rs:36:26\n   |\n36 |    \
    \         temp_grade = grades[counter];\n   |                          ^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[f64]>` is not implemented for `i32`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<i32>` for `Vec<f64>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8h6on9vy.rs:41:28\n   |\n27 |     let mut grade_vector\
    \ = vec![];\n   |                            ------ expected due to this value\n\
    ...\n41 |             grade_vector = grade_vector.push(String::from(temp_grade\
    \ as char));\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\nnote: method `push` modifies its receiver in-place\n\
    \  --> /tmp/tmp8h6on9vy.rs:41:41\n   |\n41 |             grade_vector = grade_vector.push(String::from(temp_grade\
    \ as char));\n   |                            ------"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() < 3 {\n        return vec![String::from(\"\
    E\")]\n    }\n\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = vec![];\n    let mut grade = grades_iter.next();\n    while grade.unwrap()\
    \ < 3.0 {\n        letter_grades.push(String::from(grade.unwrap()));\n       \
    \ grade = grades_iter.next();\n    }\n    if grade.unwrap() > 3.0 {\n        let\
    \ mut previous_grade = grade.unwrap();\n        grades_iter.next();\n        grade\
    \ = grades_iter.next();\n        while grade.unwrap() < previous_grade {\n   \
    \         letter_grades.push(String::from(\"D-\"));\n            grade = grades_iter.next();\n\
    \        }\n        letter_grades.push(String::from(\"D\"));\n    }\n\n    let\
    \ mut grades_iter = grades.iter();\n    let mut letter_grades = vec![];\n    let\
    \ mut grade = grades_iter.next();\n    while grade.unwrap() >= 3.0 {\n       \
    \ letter_grades.push(String::from(grade.unwrap()));\n        grade = grades_iter.next();\n\
    \    }\n    if grade.unwrap() >= 2.0 {\n        let mut previous_grade = grade.unwrap();\n\
    \        grades_iter.next();\n        grade = grades_iter.next();\n        while\
    \ grade.unwrap() >= previous_grade {\n            letter_grades.push(String::from(\"\
    C-\"));\n            grade = grades_iter.next();\n        }\n        letter_grades.push(String::from(\"\
    C\"));\n    }\n    if grade.unwrap() >= 1.0 {\n        let mut previous_grade\
    \ = grade.unwrap();\n        grades_iter.next();\n        grade = grades_iter.next();\n\
    \        while grade.unwrap() >= previous_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n            grade = grades_iter.next();\n        }\n        letter_grades.push(String::from(\"\
    B\"));\n    }\n    if grade.unwrap() >= 0.7 { // Grade is between 4.0 and 4.7,\
    \ so letter grade is A\n        let mut previous_grade = grade.unwrap();\n   \
    \     grades_iter.next();\n        grade = grades_iter.next();\n        while\
    \ grade.unwrap() >= previous_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n            grade = grades_iter.next();\n        }\n        letter_grades.push(String::from(\"\
    A\"));\n    }\n    if grade.unwrap() > 0.0 {\n        let mut previous_grade =\
    \ grade.unwrap();\n        grades_iter.next();\n        grade = grades_iter.next();\n\
    \        while grade.unwrap() > previous_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9bqcwtcz.rs:98:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n83 |     if grade.unwrap() > 0.0 {\n   |                             - this\
    \ delimiter might not be properly closed...\n...\n88 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n98 | }\n   |   ^\n\nerror: expected\
    \ `{`, found `}`\n  --> /tmp/tmp9bqcwtcz.rs:88:1\n   |\n87 |         while grade.unwrap()\
    \ > previous_\n   |         ----- -------------------------- this `while` condition\
    \ successfully parsed\n   |         |\n   |         while parsing the body of\
    \ this `while` expression\n88 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9bqcwtcz.rs:31:28\n   |\n31 |     while grade.unwrap()\
    \ < 3.0 {\n   |                            ^^^\n   |                         \
    \   |\n   |                            expected `&f64`, found floating-point number\n\
    \   |                            help: consider borrowing here: `&3.0`\n\nerror[E0277]:\
    \ the trait bound `String: From<&f64>` is not satisfied\n  --> /tmp/tmp9bqcwtcz.rs:32:28\n\
    \   |\n32 |         letter_grades.push(String::from(grade.unwrap()));\n   |  \
    \                          ^^^^^^^^^^^^ the trait `From<&f64>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9bqcwtcz.rs:35:25\n   |\n35 |\
    \     if grade.unwrap() > 3.0 {\n   |                         ^^^\n   |      \
    \                   |\n   |                         expected `&f64`, found floating-point\
    \ number\n   |                         help: consider borrowing here: `&3.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9bqcwtcz.rs:49:29\n   |\n49 |\
    \     while g"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for (i,\
    \ grade) in grades.iter().enumerate() {\n        letter_grades.push(format!(\"\
    {:?}\", grade > 3.3 ? \"B+\" : (grade > 3.7 ? \"B\" : (grade > 2.3 ? \"B-\" :\
    \ grade > 2.7 ? \"B\" : (grade > 3.0 ? \"B-\" : grade > 1.7 ? \"C\" : (grade >\
    \ 1.3 ? \"C-\" : grade > 1.0 ? \"C\" : (grade > 0.7 ? \"C-\" : grade > 0.0 ? \"\
    D\" : (grade > 0.0 ? \"D-\" : grade > 0.0 ? \"E\" : \"F\")))))));\n    }\n   \
    \ return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n\
    \  --> /tmp/tmp1trsfxlp.rs:26:27\n   |\n26 | ...ush(format!(\"{:?}\", grade >\
    \ 3.3 ? \"B+\" : (grade > 3.7 ? \"B\" : (grade > 2.3 ? \"B-\" : grade > 2.7 ?\
    \ \"B\" : (grade > 3.0 ? \"B-\" : grade > 1.7 ? \"C\" : (grade > 1.3 ? \"C-\"\
    \ : grade > 1.0 ? \"C\" : (grade > 0.7 ? \"C-\" : grade > 0.0 ? \"D\" : (grade\
    \ > 0.0 ? \"D-\" : grade > 0.0 ? \"E\" : \"F\")))))));\n   |       ^ unclosed\
    \ delimiter                                                                  \
    \                                                                            \
    \                                                                            \
    \                                         ^ help: `)` may belong here\n\nerror:\
    \ expected expression, found `)`\n  --> /tmp/tmp1trsfxlp.rs:27:5\n   |\n27 | \
    \    }\n   |     ^ expected expression\n\nerror: expected one of `,`, `.`, `?`,\
    \ or an operator, found `\"B+\"`\n  --> /tmp/tmp1trsfxlp.rs:26:58\n   |\n26 |\
    \ ...   letter_grades.push(format!(\"{:?}\", grade > 3.3 ? \"B+\" : (grade > 3.7\
    \ ? \"B\" : (grade > 2.3 ? \"B-\" : grade > 2.7 ? \"B\" : (grade > 3.0...\n  \
    \ |                                                        ^^^^ expected one of\
    \ `,`, `.`, `?`, or an operator\n\nerror: aborting due to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.clone().into_iter();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade;\n\n    while\
    \ grades_iter.any() {\n        // Grade is a float\n        // Current letter\
    \ is a String\n        // Grade is greater than zero\n        // Grade is less\
    \ than or equal to zero\n        // Check if current letter equals current grade\n\
    \        if grades_iter.next().unwrap() > 0.0 {\n            // Yes then current_grade\
    \ was just updated to a float\n            current_grade = grades_iter.next().unwrap();\n\
    \        } else {\n            // No then current_grade was just updated to a\
    \ string\n            current_grade = grades_iter.next().unwrap().to_string();\n\
    \        }\n        // Check to see if current_grade was greater than the last\
    \ letter grade\n        if current_grade > grades.last().unwrap() {\n        \
    \    // Yes then letter_grades is updated to a string\n            letter_grades.push(current_grade.to_string());\n\
    \        } else {\n            // No then letter_grades is updated to a string\n\
    \            letter_grades.push(current_grade);\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmp4nbhqol0.rs:28:23\n     |\n28   |     while grades_iter.any()\
    \ {\n     |                       ^^^- supplied 0 arguments\n     |          \
    \             |\n     |                       expected 1 argument\n     |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4nbhqol0.rs:39:29\n\
    \   |\n26 |     let mut current_grade;\n   |         ----------------- expected\
    \ due to the type of this binding\n...\n39 |             current_grade = grades_iter.next().unwrap().to_string();\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4nbhqol0.rs:42:28\n\
    \   |\n42 |         if current_grade > grades.last().unwrap() {\n   |        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\n\
    help: consider dereferencing the borrow\n   |\n42 |         if current_grade >\
    \ *grades.last().unwrap() {\n   |                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4nbhqol0.rs:47:32\n   |\n47 |             letter_grades.push(current_grade);\n\
    \   |                                ^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                |\n   |        \
    \                        expected struct `String`, found `f64`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec = grades;\n    let mut letter_grades\
    \ = vec![];\n    let mut prev = 0.0;\n    let mut temp = 0.0;\n    while grades_vec.len()\
    \ > 0 {\n        // find the first non-zero value\n        for i in grades_vec.iter().rev()\
    \ {\n            if *i != 0.0 {\n                temp = *i;\n                grades_vec.retain(|x|\
    \ x != 0.0);\n                break;\n            }\n        }\n        // if\
    \ the grade is less than or equal to 3.5 use letter grade\n        if temp <=\
    \ 3.0 {\n            if temp == prev {\n                if temp >= 4.0 {\n   \
    \                 letter_grades.push(String::from(\"A+\"));\n                }\
    \ else {\n                    letter_grades.push(String::from(\"A\"));\n     \
    \           }\n            } else if temp == prev {\n                if temp >=\
    \ 4.0 {\n                    letter_grades.push(String::from(\"A+\"));\n     \
    \           } else if temp >= 3.7 {\n                    letter_grades.push(String::from(\"\
    A\"));\n                } else if temp >= 3.3 {\n                    letter_grades.push(String::from(\"\
    A- \"));\n                } else if temp >= 3.0 {\n                    letter_grades.push(String::from(\"\
    B+\"));\n                } else if temp >= 2.7 {\n                    letter_grades.push(String::from(\"\
    B\"));\n                } else if temp >= 2.3 {\n                    letter_grades.push(String::from(\"\
    B-\"));\n                } else if temp >= 2.0 {\n                    letter_grades.push(String::from(\"\
    C+\"));\n                } else if temp >= 1.7 {\n                    letter_grades.push(String::from(\"\
    C\"));\n                } else if temp >= 1.3 {\n                    letter_grades.push(String::from(\"\
    C-\"));\n                } else if temp >= 1.0 {\n                    letter_grades.push(String::from(\"\
    D+ \"));\n                } else if temp >= 0.7 {\n                    letter_grades.push(String::from(\"\
    D\"));\n                } else if temp >= 0.0 {\n                    letter_grades.push(String::from(\"\
    D-\"));\n                } else {\n                    letter_grades.push(String::from(\"\
    E\"));\n                }\n            } else {\n                if temp >= 4.0\
    \ {\n                    letter_grades.push(String::from(\"A+\"));\n         \
    \       } else if temp >= 3.7 {\n                    letter_grades.push(String::from(\"\
    A\"));\n                } else if temp >= 3.3 {\n                    letter_grades.push(String::from(\"\
    A- \"));\n                } else if temp >= 3.0 {\n                    letter_grades.push(String::from(\"\
    B+\"));\n                } else if temp >= 2.7 {\n                    letter_grades.push(String::from(\"\
    B\"));\n                } else if temp >= 2.\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpt7d9v_af.rs:95:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     while grades_vec.len() > 0 {\n   |                             \
    \   - unclosed delimiter\n...\n38 |         if temp <= 3.0 {\n   |           \
    \             - unclosed delimiter\n...\n73 |             } else {\n   |     \
    \               - this delimiter might not be properly closed...\n...\n85 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n95 | }\n\
    \   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpt7d9v_af.rs:85:1\n\
    \   |\n84 |                 } else if temp >= 2.\n   |                       \
    \ -- this `if` expression has a condition, but no block\n85 | }\n   | ^ expected\
    \ `{`\n\nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpt7d9v_af.rs:33:41\n\
    \   |\n33 |                 grades_vec.retain(|x| x != 0.0);\n   |           \
    \                              ^^ no implementation for `&f64 == {float}`\n  \
    \ |\n   = help: the trait `PartialEq<{float}>` is not implemented for `&f64`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt7d9v_af.rs:28:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n28 | /     while grades_vec.len() > 0 {\n29 | |\
    \         // find the first non-zero value\n30 | |         for i in grades_vec.iter().rev()\
    \ {\n31 | |             if *i != 0.0 {\n...  |\n94 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n95 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting du"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = vec![];\n    let mut gpa =\
    \ grades.iter().sum();\n\n    for grade in grades {\n        match grade {\n \
    \           0.0 => letters.push(\"E\"),\n            _ => match gpa { \n     \
    \           0.0 => letters.push(\"D-\"),\n                _ => match gpa { \n\
    \                    _ => match gpa { \n                        _ => letters.push(\"\
    C-\"),\n                        _ => match gpa { \n                          \
    \  _ => match gpa { \n                                _ => match gpa { \n    \
    \                                _ => match gpa { \n                         \
    \               _ => match gpa { \n                                          \
    \  _ => match gpa { \n                                                _ => match\
    \ gpa { \n                                                    _ => match gpa {\
    \ \n                                                        _ => match gpa { \n\
    \                                                            _ => match gpa {\
    \ \n                                                                _ => match\
    \ gpa { \n                                                                   \
    \ _ => match gpa { \n                                                        \
    \                _ => match gpa { \n                                         \
    \                                   _ => match gpa { \n                      \
    \                                                          _ => match gpa { \n\
    \                                                                            \
    \        _ => match gpa { \n                                                 \
    \                                       _ => match gpa { \n                  \
    \                                                                          _ =>\
    \ match gpa { \n                                                             \
    \                                   _ => match gpa { \n                      \
    \                                                                            \
    \  _ => match gpa { \n                                                       \
    \                                                 _ => match gpa { \n        \
    \                                                                            \
    \                        _ => match gpa { \n                                 \
    \                                                                            \
    \   _ => match gpa { \n                                                      \
    \                                                              _ => match gpa\
    \ { \n                                                                       \
    \                                                 _ => match gpa { \n        \
    \                                                                            \
    \                                        _ => match gpa { \n                 \
    \                                                                            \
    \                                   _ => match gpa { \n                      \
    \                                                                            \
    \                                  _ => match gpa { \n                       \
    \                                                                            \
    \                                     _ => match gpa { \n                    \
    \                                                                            \
    \                                            _ => match gpa { \n             \
    \                                                                            \
    \                                                       _ => match gpa { \n  \
    \                                                                            \
    \                                                                      _ => match\
    \ gpa { \n                                                                   \
    \                                                                            \
    \         _ => match gpa { \n                                                \
    \                                                                            \
    \                                _ => match gpa { \n                         \
    \                                                                            \
    \                                                           _ => match gpa { \n\
    \                                                                            \
    \                                                                            \
    \            _ => match gpa { \n                                             \
    \                                                                            \
    \                                               _ => match gpa { \n          \
    \                                                                            \
    \                                                                            \
    \          _ => match gpa { \n                                               \
    \                                                                            \
    \                                                     _ => match gpa { \n    \
    \                                                                            \
    \                                                                            \
    \                        _ => match gpa { \n                                 \
    \                                                                            \
    \                                                                           _\
    \ => match gpa { \n                                                          \
    \                                                                            \
    \                                                      _ => match gpa { \n   \
    \                                                                            \
    \                                                                            \
    \                                     _ => match gpa { \n                    \
    \                                                                            \
    \                                                                            \
    \                        _ => match gpa { \n                                 \
    \                                                                            \
    \                                                                            \
    \               _ => match gpa { \n                                          \
    \                                                                            \
    \                                                                            \
    \          _ => match gpa { \n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3x3furf7.rs:92:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    28 |         match grade {\n   |                     - unclosed delimiter\n29\
    \ |             0.0 => letters.push(\"E\"),\n30 |             _ => match gpa {\
    \ \n   |                            - unclosed delimiter\n31 |               \
    \  0.0 => letters.push(\"D-\"),\n32 |                 _ => match gpa { \n   |\
    \                                - unclosed delimiter\n33 |                  \
    \   _ => match gpa { \n   |                                    - unclosed delimiter\n\
    34 |                         _ => letters.push(\"C-\"),\n35 |                \
    \         _ => match gpa { \n   |                                        - unclosed\
    \ delimiter\n36 |                             _ => match gpa { \n   |        \
    \                                    - unclosed delimiter\n37 |              \
    \                   _ => match gpa { \n   |                                  \
    \              - unclosed delimiter\n38 |                                    \
    \ _ => match gpa { \n   |                                                    -\
    \ unclosed delimiter\n39 |                                         _ => match\
    \ gpa { \n   |                                                        - unclosed\
    \ delimiter\n40 |                                             _ => match gpa {\
    \ \n   |                                                            - unclosed\
    \ delimiter\n41 |                                                 _ => match gpa\
    \ { \n   |                                                                - unclosed\
    \ delimiter\n42 |                                                     _ => match\
    \ gpa { \n   |                                                               \
    \     - unclosed delimiter\n43 |                                             \
    \            _ => match gpa { \n   |                   "
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ i in 0..grades.len() {\n        if grades[i] > 0.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grades[i] < 0.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grades[i] < 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grades[i] < 4.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grades[i] < 5.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grades[i] < 6.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grades[i] < 7.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grades[i] < 8.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grades[i] < 9.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grades[i] < 10.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else {\n            letter_grades.push(String::from(\"D+\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"C+\", \"C+\", \"C+\", \"C+\", \"C+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp27xlppqu.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut result = grades.clone();\n    grades_copy.sort_unstable();\n    while grades_copy.len()\
    \ > 0 {\n        let mut idx = grades_copy.iter().position(|&x| x < grades_copy.last()).unwrap_or(0);\n\
    \        let mut grade = grades_copy[idx..].sum();\n        if grade < 0.0 {\n\
    \            result.push(\"D-\");\n            grades_copy.remove(&grade);\n \
    \       } else {\n            let mut grade = grade as f64;\n            let x\
    \ = grade / 10.0;\n            let y = x - floor(x);\n            grades_copy.remove(idx);\n\
    \            if y > 2.0 {\n                if y > 2.0 {\n                    result.push(\"\
    B-\");\n                } else {\n                    result.push(\"B-\");\n \
    \               }\n            } else if y < -2.0 && (-y).abs() < 2.0 {\n    \
    \            result.push(\"B-\");\n            } else {\n                if y\
    \ < -2.0 {\n                    result.push(\"B-\");\n                } else {\n\
    \                    result.push(\"B-\");\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpf8fm1dup.rs:36:25\n\
    \   |\n36 |             let y = x - floor(x);\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpf8fm1dup.rs:26:17\n     |\n26   |     grades_copy.sort_unstable();\n\
    \     |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf8fm1dup.rs:28:60\n\
    \   |\n28 |         let mut idx = grades_copy.iter().position(|&x| x < grades_copy.last()).unwrap_or(0);\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror[E0599]: `[f64]` is not an iterator\n\
    \  --> /tmp/tmpf8fm1dup.rs:29:44\n   |\n29 |         let mut grade = grades_copy[idx..].sum();\n\
    \   |                                            ^^^ `[f64]` is not an iterator;\
    \ try calling `.into_iter()` or `.iter()`\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `[f64]: Iterator`\n           which is\
    \ required by `&mut [f64]: Iterator`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpf8fm1dup.rs:31:25\n   |\n31 |             result.push(\"D-\");\n   |\
    \                         ^^^^ expected `f64`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf8fm1dup.rs:32:32\n   |\n32 |             grades_copy.remove(&grade);\n\
    \   |                                ^^^^^^ expected `usize`, found reference\n\
    \   |\n   = note:   expected type `usize`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n32 -             grades_copy.remove(&grade);\n\
    32 +             grades_copy.remove"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_min = grades.iter().min().unwrap();\n    let grades_mean = grades.iter().mean().unwrap();\n\
    \    let grades_median = grades.iter().median().unwrap();\n    let grades_std\
    \ = grades.iter().std().unwrap();\n    let grades_var = grades.iter().variance().unwrap();\n\
    \    let grades_entropy = grades.iter().entropy().unwrap();\n    let grades_min\
    \ = grades.iter().min().unwrap();\n    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_mean = grades.iter().mean().unwrap();\n    let grades_median =\
    \ grades.iter().median().unwrap();\n    let grades_std = grades.iter().std().unwrap();\n\
    \    let grades_var = grades.iter().variance().unwrap();\n    let grades_entropy\
    \ = grades.iter().entropy().unwrap();\n    let grades_min = grades.iter().min().unwrap();\n\
    \    let grades_max = grades.iter().max().unwrap();\n    let grades_mean = grades.iter().mean().unwrap();\n\
    \    let grades_median = grades.iter().median().unwrap();\n    let grades_std\
    \ = grades.iter().std().unwrap();\n    let grades_var = grades.iter().variance().unwrap();\n\
    \    let grades_entropy = grades.iter().entropy().unwrap();\n    let grades_min\
    \ = grades.iter().min().unwrap();\n    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_mean = grades.iter().mean().unwrap();\n    let grades_median =\
    \ grades.iter().median().unwrap();\n    let grades_std = grades.iter().std().unwrap();\n\
    \    let grades_var = grades.iter().variance().unwrap();\n    let grades_entropy\
    \ = grades.iter().entropy().unwrap();\n    let grades_min = grades.iter().min().unwrap();\n\
    \    let grades_max = grades.iter().max().unwrap();\n    let grades_mean = grades.iter().mean().unwrap();\n\
    \    let grades_median = grades.iter().median().unwrap();\n    let grades_std\
    \ = grades.iter().std().unwrap();\n    let grades_var = grades.iter().variance().unwrap();\n\
    \    let grades_entropy = grades.iter().entropy().unwrap();\n    let grades_min\
    \ = grades.iter().min().unwrap();\n    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_mean = grades.iter().mean().unwrap();\n    let grades_median =\
    \ grades.iter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz8eaztxa.rs:62:36\n   |\n\
    62 |     let grades_median = grades.iter\n   |                               \
    \     ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0277]: the\
    \ trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpz8eaztxa.rs:24:36\n\
    \     |\n24   |     let grades_max = grades.iter().max().unwrap();\n     |   \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpz8eaztxa.rs:25:36\n\
    \     |\n25   |     let grades_min = grades.iter().min().unwrap();\n     |   \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0599]: no method named `mean` found for struct `std::slice::Iter` in\
    \ the current scope\n  --> /tmp/tmpz8eaztxa.rs:26:37\n   |\n26 |     let grades_mean\
    \ = grades.iter().mean().unwrap();\n   |                                     ^^^^\
    \ method not found in `std::slice::Iter<'_, f64>`\n\nerror[E0599]: no method named\
    \ `median` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpz8eaztxa.rs:27:39\n\
    \   |\n27 |     let grades_median = grades.iter().median().unwrap();\n   |   \
    \                                    ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ f"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters: Vec<String> = vec![];\n   \
    \ for grade in grades {\n        letters.push(match grade {\n            0...5.0\
    \ => \"E\",\n            4.0   => \"A+\",\n            5.0   => \"A\",\n     \
    \       6.0   => \"A-\",\n            7.0   => \"B+\",\n            8.0   => \"\
    B\",\n            9.0   => \"B-\",\n            10.0 => \"C+\",\n            11.0\
    \ => \"C\",\n            12.0 => \"C-\",\n            13.0 => \"D+\",\n      \
    \      14.0 => \"D\",\n            15.0 => \"D-\",\n            _    => \"\".to_string(),\n\
    \        });\n    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: `...` range patterns are deprecated\n  --> /tmp/tmp4uwm0w0p.rs:27:14\n\
    \   |\n27 |             0...5.0 => \"E\",\n   |              ^^^ help: use `..=`\
    \ for an inclusive range\n   |\n   = note: `#[warn(ellipsis_inclusive_range_patterns)]`\
    \ on by default\n   = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4uwm0w0p.rs:27:13\n   |\n26 |\
    \         letters.push(match grade {\n   |                            ----- this\
    \ expression has type `f64`\n27 |             0...5.0 => \"E\",\n   |        \
    \     ^   --- this is of type `{float}`\n   |             |\n   |            \
    \ expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4uwm0w0p.rs:27:24\n   |\n27 |\
    \             0...5.0 => \"E\",\n   |                        ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                        |\n   |   \
    \                     expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    \n\
    \    for grade in grades {\n        \n        if grade > 1.0 {\n            let\
    \ letter_grade = String::from(\"E\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade == 1.0 {\n     \
    \       let letter_grade = String::from(\"D\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 3.0 {\n      \
    \      let letter_grade = String::from(\"C+\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 2.0 {\n      \
    \      let letter_grade = String::from(\"B+\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 1.7 {\n      \
    \      let letter_grade = String::from(\"A-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 1.0 {\n      \
    \      let letter_grade = String::from(\"A-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.7 {\n      \
    \      let letter_grade = String::from(\"B\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.3 {\n      \
    \      let letter_grade = String::from(\"B-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.1 {\n      \
    \      let letter_grade = String::from(\"C\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.03 {\n     \
    \       let letter_grade = String::from(\"C-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        let letter_grade = String::from(\"\
    A\");\n        letter_grades.push(letter_grade);\n    }\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"E\", \"E\", \"E\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpe3v3panp.rs:97:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters: Vec<String> = vec![];\n   \
    \ for grade in grades {\n        if grade > 3.7 { \n            letters.push(\"\
    A\");\n        } else if grade > 3.3 { \n            letters.push(\"A-\");\n \
    \       } else if grade > 3.0 { \n            letters.push(\"B+\");\n        }\
    \ else if grade > 2.7 { \n            letters.push(\"B\");\n        } else if\
    \ grade > 2.3 { \n            letters.push(\"B-\");\n        } else if grade >\
    \ 2.0 { \n            letters.push(\"C+\");\n        } else if grade > 1.7 { \n\
    \            letters.push(\"C\");\n        } else if grade > 1.3 { \n        \
    \    letters.push(\"C-\");\n        } else if grade > 1.0 { \n            letters.push(\"\
    D+\");\n        } else if grade > 0.7 { \n            letters.push(\"D\");\n \
    \       } else { \n            letters.push(\"D-\");\n        }\n    }\n    return\
    \ letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n   \
    \ assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"\
    ), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmbf4s3nt.rs:27:26\n   |\n\
    27 |             letters.push(\"A\");\n   |                          ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \  |\n   |                          expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmbf4s3nt.rs:29:26\n   |\n29 |  \
    \           letters.push(\"A-\");\n   |                          ^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                          |\n\
    \   |                          expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmbf4s3nt.rs:31:26\n   |\n31 |             letters.push(\"\
    B+\");\n   |                          ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                          |\n   |                      \
    \    expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmbf4s3nt.rs:33:26\n   |\n33 |             letters.push(\"B\");\n\
    \   |                          ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                          |\n   |                          expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmbf4s3nt.rs:35:26\n\
    \   |\n35 |             letters.push(\"B-\");\n   |                          ^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \        |\n   |                          expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmbf4s3nt.rs:37:26\n   |\n37 |\
    \             letters.push(\"C+\");\n   |                          ^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \  |\n   |                          expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmbf4s3nt.rs:39:26\n   |\n39 |  \
    \           letters.push(\"C\");\n   |                          ^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                          |\n\
    \   |                          expected struct `String`, fou"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades = grades.clone();\n    let mut\
    \ output: Vec<String> = vec![];\n    let mut max_grade: f64;\n    while grades.len()\
    \ > 0 {\n        if grades.len() > 1 {\n            max_grade = grades.iter().max().unwrap();\n\
    \        }\n        if grades.len() == 1 {\n            match grades[0] {\n  \
    \              4.0 => {\n                    let mut letter = String::from(\"\
    A+\");\n                    if grades[0] > max_grade {\n                     \
    \   letter = String::from(\"D+\");\n                    } else {\n           \
    \             letter = String::from(\"D\");\n                    }\n         \
    \           output.push(letter);\n                }\n                3.7 => {\n\
    \                    let mut letter = String::from(\"A\");\n                 \
    \   if grades[0] > max_grade {\n                        letter = String::from(\"\
    D\");\n                    } else {\n                        letter = String::from(\"\
    D+\");\n                    }\n                    output.push(letter);\n    \
    \            }\n                3.3 => {\n                    let mut letter =\
    \ String::from(\"A-\");\n                    if grades[0] > max_grade {\n    \
    \                    letter = String::from(\"D-\");\n                    } else\
    \ {\n                        letter = String::from(\"D\");\n                 \
    \   }\n                    output.push(letter);\n                }\n         \
    \       3.0 => {\n                    let mut letter = String::from(\"B+\");\n\
    \                    if grades[0] > max_grade {\n                        letter\
    \ = String::from(\"D\");\n                    } else {\n                     \
    \   letter = String::from(\"D+\");\n                    }\n                  \
    \  output.push(letter);\n                }\n                2.7 => {\n       \
    \             let mut letter = String::from(\"B\");\n                    if grades[0]\
    \ > max_grade {\n                        letter = String::from(\"D\");\n     \
    \               } else {\n                        letter = String::from(\"D+\"\
    );\n                    }\n                    output.push(letter);\n        \
    \        }\n                2.3 => {\n                    let mut letter = String::from(\"\
    B-\");\n                    if grades[0] > max_grade {\n                     \
    \   letter = String::from(\"D-\");\n                    } else {\n           \
    \             letter = String::from(\"D\");\n                    }\n         \
    \           output.push(letter);\n                }\n                2.0 => {\n\
    \                    let mut letter = String::from(\"C+\");\n                \
    \    if grades[0] > max_grade {\n                        letter = String::from(\"\
    D\");\n                    } else {\n                        letter = String::from(\"\
    D+\");\n                    }\n                    output.push(letter);\n    \
    \            }\n                1.7 => {\n                    let mut \n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpirv31bs8.rs:108:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n27  |     while grades.len() > 0 {\n    |                            - unclosed\
    \ delimiter\n...\n31  |         if grades.len() == 1 {\n    |                \
    \              - unclosed delimiter\n32  |             match grades[0] {\n   \
    \ |                             - unclosed delimiter\n...\n96  |             \
    \    1.7 => {\n    |                        - this delimiter might not be properly\
    \ closed...\n97  |                     let mut \n98  | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n108 | }\n    |   ^\n\nerror: expected\
    \ identifier, found `}`\n  --> /tmp/tmpirv31bs8.rs:98:1\n   |\n98 | }\n   | ^\
    \ expected identifier\n\nerror: expected identifier, found keyword `fn`\n   -->\
    \ /tmp/tmpirv31bs8.rs:100:1\n    |\n100 | fn main() {\n    | ^^ expected identifier,\
    \ found keyword\n\nerror: expected one of `=>`, `@`, `if`, or `|`, found `main`\n\
    \   --> /tmp/tmpirv31bs8.rs:100:4\n    |\n100 | fn main() {\n    |    ^^^^ expected\
    \ one of `=>`, `@`, `if`, or `|`\n\nerror[E0277]: the trait bound `f64: Ord` is\
    \ not satisfied\n    --> /tmp/tmpirv31bs8.rs:29:39\n     |\n29   |           \
    \  max_grade = grades.iter().max().unwrap();\n     |                         \
    \              ^^^ the trait `Ord` is not implemented for `f64`\n     |\n    \
    \ = help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpirv31bs8.rs:29:25\n   |\n26 |     let mut max_grade:\
    \ f64;\n   |                        --- expected due to this type\n...\n29 | \
    \            max_grade = grades.iter().max()"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = vec![];\n\n    for grade in\
    \ grades {\n        let mut letter_grade = String::from(\"\");\n\n        if grade\
    \ >= 4.0 && grade <= 4.7 { letter_grade += \"A+\" }\n        if grade > 3.7 &&\
    \ grade <= 3.8 { letter_grade += \"A\" } \n        if grade > 3.3 && grade <=\
    \ 3.5 { letter_grade += \"A-\" } \n        if grade > 3.0 && grade <= 3.7 { letter_grade\
    \ += \"B+\" } \n        if grade > 2.7 && grade <= 3.3 { letter_grade += \"B\"\
    \ } \n        if grade > 2.3 && grade <= 2.5 { letter_grade += \"B-\" } \n   \
    \     if grade > 2.0 && grade <= 2.7 { letter_grade += \"C+\" }\n        if grade\
    \ > 1.7 && grade <= 2.3 { letter_grade += \"C\" }\n        if grade > 1.3 && grade\
    \ <= 2.5 { letter_grade += \"C-\" } \n        if grade > 1.0 { letter_grade +=\
    \ \"D+\" }\n        if grade > 0.7 { letter_grade += \"D\" }\n        if grade\
    \ == 0.0 { letter_grade += \"D-\" }\n        if grade < 0.0 { letter_grade +=\
    \ \"E\" }\n\n        letters.push(letter_grade);\n    }\n\n    return letters;\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+D+D\", \"BD+D\", \"C-D+D\", \"CC-D+D\", \"A-B+D+D\"]`,\n right: `[\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpn8zfzevy.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_letter = vec![];\n\n    for grade\
    \ in grades {\n        let mut letter_grade = \"\";\n\n        match grade {\n\
    \            4.0 => {\n                letter_grade = \"A+\";\n            },\n\
    \            _ => {\n                if grade >= 3.7 {\n                    letter_grade\
    \ = \"A\";\n                } else if grade >= 3.3 {\n                    letter_grade\
    \ = \"A-\";\n                } else if grade >= 3.0 {\n                    letter_grade\
    \ = \"B+\";\n                } else if grade >= 2.7 {\n                    letter_grade\
    \ = \"B\";\n                } else if grade >= 2.3 {\n                    letter_grade\
    \ = \"B-\";\n                } else if grade >= 2.0 {\n                    letter_grade\
    \ = \"C+\";\n                } else if grade >= 1.7 {\n                    letter_grade\
    \ = \"C\";\n                } else if grade >= 1.3 {\n                    letter_grade\
    \ = \"C-\";\n                } else if grade >= 1.0 {\n                    letter_grade\
    \ = \"D+\";\n                } else if grade >= 0.7 {\n                    letter_grade\
    \ = \"D\";\n                } else {\n                    letter_grade = \"D-\"\
    ;\n                }\n            }\n        }\n\n        grades_letter.push(letter_grade);\n\
    \    }\n\n    grades_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnuw51uru.rs:63:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n63 |     grades_letter\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut gpa = grades[0];\n    let mut grade\
    \ = String::from(\"E\");\n    for (i, g) in grades.iter().enumerate() {\n    \
    \    if i == grades.len() - 1 {\n            if g > gpa  {\n                gpa\
    \ = g;\n                grade = String::from(\"D+\");\n            }\n       \
    \     if g < gpa  {\n                gpa = g;\n                grade = String::from(\"\
    D-\");\n            }\n            if g == gpa {\n                grade = String::from(\"\
    D\");\n            }\n            if g > gpa {\n                grade = String::from(\"\
    D+\");\n            }\n            if g < gpa {\n                grade = String::from(\"\
    D-\");\n            }\n            if g == gpa {\n                grade = String::from(\"\
    D\");\n            }\n        } else {\n            if g > gpa  {\n          \
    \      gpa = g;\n                grade = String::from(\"B+\");\n            }\n\
    \            if g < gpa  {\n                gpa = g;\n                grade =\
    \ String::from(\"B-\");\n            }\n            if g == gpa {\n          \
    \      grade = String::from(\"B\");\n            }\n            if g > gpa {\n\
    \                grade = String::from(\"B+\");\n            }\n            if\
    \ g < gpa {\n                grade = String::from(\"B-\");\n            }\n  \
    \          if g == gpa {\n                grade = String::from(\"B\");\n     \
    \       }\n        }\n    }\n    vec![grade]\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyfavbt63.rs:28:20\n   |\n\
    28 |             if g > gpa  {\n   |                    ^^^\n   |            \
    \        |\n   |                    expected `&f64`, found `f64`\n   |       \
    \             help: consider borrowing here: `&gpa`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyfavbt63.rs:29:23\n   |\n24 |     let mut gpa = grades[0];\n\
    \   |                   --------- expected due to this value\n...\n29 |      \
    \           gpa = g;\n   |                       ^ expected `f64`, found `&f64`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n29 |                 gpa\
    \ = *g;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyfavbt63.rs:32:20\n   |\n32 |             if g < gpa  {\n   |      \
    \              ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found `f64`\n   |                    help: consider borrowing here:\
    \ `&gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyfavbt63.rs:33:23\n\
    \   |\n24 |     let mut gpa = grades[0];\n   |                   --------- expected\
    \ due to this value\n...\n33 |                 gpa = g;\n   |                \
    \       ^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n33 |                 gpa = *g;\n   |                       +\n\
    \nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/tmpyfavbt63.rs:36:18\n\
    \   |\n36 |             if g == gpa {\n   |                  ^^ no implementation\
    \ for `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyfavbt63.rs:39:20\n\
    \   |\n39 |             if g > gpa {\n   |                    ^^^\n   |      \
    \              |\n   |                    expected `&f64`, found `f64`\n   | \
    \                   help: consider borrowing here: `&gpa`\n\nerror[E0308]: mismatched\
    \ types"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort();\n\n    let mut letter_grades = vec![];\n    let mut grades_pos\
    \ = 0;\n    let mut current_grade: f64;\n    let mut current_letter_grade: String;\n\
    \n    // iterate through grades until we find the first zero value\n    while\
    \ grades_pos < grades_sorted.len() {\n        // get current grade\n        current_grade\
    \ = grades_sorted[grades_pos];\n        // check whether this is the last grade\n\
    \        if grades_pos == grades_sorted.len() - 1 {\n            letter_grades.push(current_letter_grade.clone());\n\
    \        }\n        // check if grade is zero\n        if current_grade == 0 {\n\
    \            break;\n        }\n        // if this is the first grade\n      \
    \  if grades_pos == 0 {\n            current_letter_grade = String::from(\"A\"\
    );\n        }\n        // if this is a greater grade than last letter grade\n\
    \        if current_grade > current_letter_grade {\n            // get current\
    \ letter grade\n            current_letter_grade = current_letter_grade.clone();\n\
    \        }\n        // get next grade\n        grades_pos += 1;\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpt8wirim2.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt8wirim2.rs:41:29\n\
    \   |\n41 |         if current_grade == 0 {\n   |                            \
    \ ^\n   |                             |\n   |                             expected\
    \ `f64`, found integer\n   |                             help: use a float literal:\
    \ `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt8wirim2.rs:49:28\n \
    \  |\n49 |         if current_grade > current_letter_grade {\n   |           \
    \                 ^^^^^^^^^^^^^^^^^^^^ expected `f64`, found struct `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let gpd = grade_to_gpd(grade);\n        if gpd > 3.0 {\n\
    \            letter_grades.push(format!(\"B+\"));\n        } else if gpd > 2.0\
    \ {\n            letter_grades.push(format!(\"B\"));\n        } else if gpd >\
    \ 1.0 {\n            letter_grades.push(format!(\"B-\"));\n        } else if gpd\
    \ > 0.7 { \n            letter_grades.push(format!(\"C+\"));\n        } else if\
    \ gpd > 0.3 { \n            letter_grades.push(format!(\"C\"));\n        } else\
    \ if gpd > 0.1 { \n            letter_grades.push(format!(\"C-\"));\n        }\
    \ else if gpd > 0.05 { \n            letter_grades.push(format!(\"D+\"));\n  \
    \      } else if gpd > 0.01 { \n            letter_grades.push(format!(\"D\"));\n\
    \        } else { \n            letter_grades.push(format!(\"E\"));\n        }\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `grade_to_gpd` in this scope\n  -->\
    \ /tmp/tmpnknw4eka.rs:26:19\n   |\n26 |         let gpd = grade_to_gpd(grade);\n\
    \   |                   ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    use std::cmp::Ordering;\n\n    let mut letter_grades\
    \ = Vec::new();\n    let sorted_grades = grades.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for (i, grade) in sorted_grades.iter().enumerate() {\n        let last_student\
    \ = i == 0;\n        let mut grade_str = String::from(\"E\");\n        grade_str.push_str(&format!(\"\
    {:+}\", grade));\n        if last_student {\n            letter_grades.push(grade_str);\n\
    \        } else {\n            if grade > 4.0 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 3.7 {\n                grade_str.push_str(&format!(\"\
    -\"));\n            } else if grade > 3.3 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 2.7 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 2.3 {\n                grade_str.push_str(&format!(\"\
    -\"));\n            } else if grade > 1.3 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 1.0 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 0.7 {\n                grade_str.push_str(&format!(\"\
    -\"));\n            } else if grade > 0.3 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 0.0 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            }\n            letter_grades.push(grade_str);\n        }\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp8ao1vjc_.rs:24:9\n\
    \   |\n24 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method\
    \ named `iter` found for unit type `()` in the current scope\n  --> /tmp/tmp8ao1vjc_.rs:28:37\n\
    \   |\n28 |     for (i, grade) in sorted_grades.iter().enumerate() {\n   |   \
    \                                  ^^^^ method not found in `()`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.last().unwrap();\n    let mut grade_level = gpa.floor() as usize;\n\
    \    let mut letter_grade = String::from(\"E\");\n    while grade_level >= 0 {\n\
    \        if grade_level % 2 == 0 {\n            if grade_level == 1 {\n      \
    \          letter_grade += String::from(\"A\");\n            } else if grade_level\
    \ == 2 {\n                letter_grade += String::from(\"A-\");\n            }\
    \ else if grade_level == 3 {\n                letter_grade += String::from(\"\
    B+\");\n            } else if grade_level == 4 {\n                letter_grade\
    \ += String::from(\"B\");\n            } else if grade_level == 5 {\n        \
    \        letter_grade += String::from(\"B-\");\n            } else if grade_level\
    \ == 6 {\n                letter_grade += String::from(\"C+\");\n            }\
    \ else if grade_level == 7 {\n                letter_grade += String::from(\"\
    C\");\n            } else if grade_level == 8 {\n                letter_grade\
    \ += String::from(\"C-\");\n            } else if grade_level == 9 {\n       \
    \         letter_grade += String::from(\"D+\");\n            } else if grade_level\
    \ == 10 {\n                letter_grade += String::from(\"D\");\n            }\
    \ else {\n                letter_grade += String::from(\"D-\");\n            }\n\
    \        } else {\n            if grade_level == 1 {\n                letter_grade\
    \ += String::from(\"A+\");\n            } else if grade_level == 2 {\n       \
    \         letter_grade += String::from(\"A\");\n            } else if grade_level\
    \ == 3 {\n                letter_grade += String::from(\"A-\");\n            }\
    \ else if grade_level == 4 {\n                letter_grade += String::from(\"\
    B+\");\n            } else if grade_level == 5 {\n                letter_grade\
    \ += String::from(\"B\");\n            } else if grade_level == 6 {\n        \
    \        letter_grade += String::from(\"B-\");\n            } else if grade_level\
    \ == 7 {\n                letter_grade += String::from(\"C+\");\n            }\
    \ else if grade_level == 8 {\n                letter_grade += String::from(\"\
    C\");\n            } else if grade_level == 9 {\n                letter_grade\
    \ += String::from(\"C-\");\n            } else if grade_level == 10 {\n      \
    \          letter_grade += String::from(\"D+\");\n            } else if grade_level\
    \ == 11\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8uajtzk7.rs:85:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     while grade_level >= 0 {\n   |                            - unclosed\
    \ delimiter\n...\n53 |         } else {\n   |                - this delimiter\
    \ might not be properly closed...\n...\n75 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n85 | }\n   |   ^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmp8uajtzk7.rs:75:1\n   |\n74 |             } else if\
    \ grade_level == 11\n   |                    -- this `if` expression has a condition,\
    \ but no block\n75 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8uajtzk7.rs:31:33\n   |\n31 |                 letter_grade += String::from(\"\
    A\");\n   |                                 ^^^^^^^^^^^^^^^^^\n   |          \
    \                       |\n   |                                 expected `&str`,\
    \ found struct `String`\n   |                                 help: consider borrowing\
    \ here: `&String::from(\"A\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8uajtzk7.rs:33:33\n\
    \   |\n33 |                 letter_grade += String::from(\"A-\");\n   |      \
    \                           ^^^^^^^^^^^^^^^^^^\n   |                         \
    \        |\n   |                                 expected `&str`, found struct\
    \ `String`\n   |                                 help: consider borrowing here:\
    \ `&String::from(\"A-\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8uajtzk7.rs:35:33\n\
    \   |\n35 |                 letter_grade += String::from(\"B+\");\n   |      \
    \                           ^^^^^^^^^^^^^^^^^^\n   |                         \
    \        |\n   |                                 expected `&str`, found struct\
    \ `String`\n   |                                 help: consider borrowing here:\
    \ `&String::from(\"B+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8uajtzk7.rs:37:33\n\
    \   |\n37 |                 letter_grade += String::from(\"B\");\n   |       \
    \                      "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let max_grade_ranking = vec![\"A\",\"B\",\"\
    C\",\"D\",\"E\"];\n    let min_grade_ranking = vec![\"A\",\"B+\",\"C\",\"D\",\"\
    E-\"];\n    let ranking = vec![min_grade_ranking..max_grade_ranking];\n    let\
    \ ranking_string = &ranking[grades.iter().cmp(&::std::cmp::min)(&grades.iter().len()-2,\
    \ 0)];\n    let letter = grades.iter().map(|grade| {\n        let ranking_position\
    \ = ranking_string.iter().position(|&x| x.contains(&grade.to_string()));\n   \
    \     if ranking_position.is_none() {\n            String::from(\"E\")\n     \
    \   } else {\n            &ranking[ranking_position.unwrap()]\n        }\n   \
    \ }).collect();\n    letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp64l3k6vd.rs:27:49\n\
    \     |\n27   |     let ranking_string = &ranking[grades.iter().cmp(&::std::cmp::min)(&grades.iter().len()-2,\
    \ 0)];\n     |                                                 ^^^ the trait `Ord`\
    \ is not implemented for `f64`\n     |\n     = help: the following other types\
    \ implement trait `Ord`:\n               i128\n               i16\n          \
    \     i32\n               i64\n               i8\n               isize\n     \
    \          u128\n               u16\n             and 4 others\n     = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\nnote: required\
    \ by a bound in `std::iter::Iterator::cmp`\n\nerror[E0277]: `&fn(_, _) -> _ {std::cmp::min::<_>}`\
    \ is not an iterator\n    --> /tmp/tmp64l3k6vd.rs:27:53\n     |\n27   |     let\
    \ ranking_string = &ranking[grades.iter().cmp(&::std::cmp::min)(&grades.iter().len()-2,\
    \ 0)];\n     |                                                 --- ^^^^^^^^^^^^^^^^\
    \ `&fn(_, _) -> _ {std::cmp::min::<_>}` is not an iterator\n     |           \
    \                                      |\n     |                             \
    \                    required by a bound introduced by this call\n     |\n   \
    \  = help: the trait `Iterator` is not implemented for `&fn(_, _) -> _ {std::cmp::min::<_>}`\n\
    \     = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&fn(_, _) -> _ {std::cmp::min::<_>}`\nnote: required by a bound in `std::iter::Iterator::cmp`\n\
    \nerror[E0618]: expected function, found enum variant `grades.iter().cmp(&::std::cmp::min)`\n\
    \  --> /tmp/tmp64l3k6vd.rs:27:35\n   |\n27 |     let ranking_string = &ranking[grades.iter().cmp(&::std::cmp::min)(&grades.iter().len()-2,\
    \ 0)];\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------\n\
    \   |                                   |\n   |                              \
    \     call expression requires function\n   |\nhelp: `grades.iter().cmp(&::std::cmp::min)`\
    \ is a unit variant, you need to write it without the parentheses\n  "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grade = vec![];\n    for grade\
    \ in grades {\n        if grade > 4.0 {\n            letter_grade.push(\"A+\"\
    );\n        } else if grade > 3.7 {\n            letter_grade.push(\"A\");\n \
    \       } else if grade > 3.3 {\n            letter_grade.push(\"A-\");\n    \
    \    } else if grade > 3.0 {\n            letter_grade.push(\"B+\");\n       \
    \ } else if grade > 2.7 {\n            letter_grade.push(\"B\");\n        } else\
    \ if grade > 2.3 {\n            letter_grade.push(\"B-\");\n        } else if\
    \ grade > 2.0 {\n            letter_grade.push(\"C+\");\n        } else if grade\
    \ > 1.7 {\n            letter_grade.push(\"C\");\n        } else if grade > 1.3\
    \ {\n            letter_grade.push(\"C-\");\n        } else if grade > 1.0 {\n\
    \            letter_grade.push(\"D+\");\n        } else if grade > 0.7 {\n   \
    \         letter_grade.push(\"D\");\n        } else if grade > 0.0 {\n       \
    \     letter_grade.push(\"D-\");\n        } else {\n            letter_grade.push(\"\
    E\");\n        }\n    }\n    letter_grade\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjnf8w143.rs:54:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n54 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n\
    \        .map(|(i, grade)| match grade {\n            0.0             => String::from(\"\
    E\"),\n            4.0             => String::from(\"A+\"),\n            3.7 \
    \            => String::from(\"A\"),\n            3.3             => String::from(\"\
    A-\"),\n            3.0             => String::from(\"B+\"),\n            2.7\
    \             => String::from(\"B\"),\n            2.3             => String::from(\"\
    B-\"),\n            2.0             => String::from(\"C+\"),\n            1.7\
    \             => String::from(\"C\"),\n            1.3             => String::from(\"\
    C-\"),\n            1.0             => String::from(\"D+\"),\n            0.7\
    \             => String::from(\"D\"),\n            _              => String::from(\"\
    D-\"),\n        })\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5zx5anh9.rs:24:5\n   |\n\
    23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    \
    \                                              ----------- expected `Vec<String>`\
    \ because of return type\n24 | /     grades\n25 | |         .iter()\n26 | |  \
    \       .enumerate()\n27 | |         .map(|(i, grade)| match grade {\n...  |\n\
    40 | |             _              => String::from(\"D-\"),\n41 | |         })\n\
    \   | |__________^ expected struct `Vec`, found struct `Map`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Map<Enumerate<std::slice::Iter<'_,\
    \ f64>>, [closure@/tmp/tmp5zx5anh9.rs:27:14: 41:10]>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.to_string();\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut temp: i64 = grades.len()\
    \ as i64;\n\n    for grade in grades {\n        grades_vec!.push(grades_string[temp\
    \ - grade as usize..temp - grade as usize + 1]);\n        temp -= grade;\n   \
    \ }\n\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `.`\n  --> /tmp/tmpyh41rbx7.rs:29:20\n\
    \   |\n29 |         grades_vec!.push(grades_string[temp - grade as usize..temp\
    \ - grade as usize + 1]);\n   |                    ^ expected one of `(`, `[`,\
    \ or `{`\n\nerror[E0599]: `Vec<f64>` doesn't implement `std::fmt::Display`\n \
    \  --> /tmp/tmpyh41rbx7.rs:24:36\n    |\n24  |       let mut grades_string = grades.to_string();\n\
    \    |                                      ^^^^^^^^^ `Vec<f64>` cannot be formatted\
    \ with the default formatter\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `Vec<f64>: std::fmt::Display`\n            which\
    \ is required by `Vec<f64>: ToString`\n            `[f64]: std::fmt::Display`\n\
    \            which is required by `[f64]: ToString`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades.iter() {\n        let gpa = if grade < 4.0 { \"A+\" } else if\
    \ grade < 3.7 { \"A\" } else if grade < 3.3 { \"A-\" } else if grade < 3 { \"\
    B+\" } else if grade < 2.7 { \"B\" } else if grade < 2.3 { \"B-\" } else if grade\
    \ < 2 { \"C+\" } else if grade < 1.7 { \"C\" } else if grade < 1.3 { \"C-\" }\
    \ else if grade < 1 { \"D+\" } else if grade < 0.7 { \"D\" } else { \"D-\" };\n\
    \        letter_grades.push(gpa);\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpugqesusq.rs:26:30\n   |\n\
    26 | ...   let gpa = if grade < 4.0 { \"A+\" } else if grade < 3.7 { \"A\" } else\
    \ if grade < 3.3 { \"A-\" } else if grade < 3 { \"B+\" } else if grade...\n  \
    \ |                            ^^^\n   |                            |\n   |  \
    \                          expected `&f64`, found floating-point number\n   |\
    \                            help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpugqesusq.rs:26:59\n   |\n26 | ...   let gpa\
    \ = if grade < 4.0 { \"A+\" } else if grade < 3.7 { \"A\" } else if grade < 3.3\
    \ { \"A-\" } else if grade < 3 { \"B+\" } else if grade...\n   |             \
    \                                            ^^^\n   |                       \
    \                                  |\n   |                                   \
    \                      expected `&f64`, found floating-point number\n   |    \
    \                                                     help: consider borrowing\
    \ here: `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugqesusq.rs:26:87\n\
    \   |\n26 | ...   let gpa = if grade < 4.0 { \"A+\" } else if grade < 3.7 { \"\
    A\" } else if grade < 3.3 { \"A-\" } else if grade < 3 { \"B+\" } else if grade...\n\
    \   |                                                                        \
    \             ^^^\n   |                                                      \
    \                               |\n   |                                      \
    \                                               expected `&f64`, found floating-point\
    \ number\n   |                                                               \
    \                      help: consider borrowing here: `&3.3`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpugqesusq.rs:26:116\n   |\n26 | ...\"A\" } else\
    \ if grade < 3.3 { \"A-\" } else if grade < 3 { \"B+\" } else if grade < 2.7 {\
    \ \"B\" } else if grade < 2.3 { \"B-\" } else if grade <...\n   |            \
    \                                           ^ expected `&f64`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpugqesusq.rs:26:143\n   |\n26 |\
    \ ...else if grade < 3 { \"B+"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().sorted().collect::<Vec<f64>>();\n\
    \    let mut letter_grades = Vec::new();\n    for grade in grades_sorted {\n \
    \       match grade {\n            0f64 => letter_grades.push(String::from(\"\
    E\")),\n            0..1.f64 => letter_grades.push(String::from(\"D-\")),\n  \
    \          1.f64 => letter_grades.push(String::from(\"D+\")),\n            2..3.f64\
    \ => letter_grades.push(String::from(\"C\")),\n            4..5.f64 => letter_grades.push(String::from(\"\
    B+\")),\n            6..7.f64 => letter_grades.push(String::from(\"B\")),\n  \
    \          8..9f64 => letter_grades.push(String::from(\"A-\")),\n            _\
    \ => continue,\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `=>`, `if`, or `|`, found `.`\n  --> /tmp/tmpx0g99zpt.rs:29:17\n\
    \   |\n29 |             0..1.f64 => letter_grades.push(String::from(\"D-\")),\n\
    \   |                 ^ expected one of `=>`, `if`, or `|`\n\nerror[E0599]: no\
    \ method named `sorted` found for struct `Cloned` in the current scope\n  -->\
    \ /tmp/tmpx0g99zpt.rs:24:52\n   |\n24 |     let mut grades_sorted = grades.iter().cloned().sorted().collect::<Vec<f64>>();\n\
    \   |                                                    ^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, f64>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut result = vec![];\n    let max_grade = grades[0];\n    let\
    \ min_grade = grades[0];\n    for grade in grades {\n        if grade > max_grade\
    \ {\n            max_grade = grade;\n        }\n        if grade < min_grade {\n\
    \            min_grade = grade;\n        }\n    }\n    for grade in grades {\n\
    \        let grade_value = grade - min_grade;\n        let grade_letter = match\
    \ grade_value {\n            0.0 => \"D\",\n            0.1 => \"D+\",\n     \
    \       0.2 => \"D-\",\n            0.3 => \"C-\",\n            0.4 => \"C\",\n\
    \            0.5 => \"C+\",\n            0.6 => \"B-\",\n            0.7 => \"\
    B\",\n            0.8 => \"B+\",\n            0.9 => \"A-\",\n            1.0\
    \ => \"A\",\n            1.1 => \"A+\",\n            _ => \"E\",\n        };\n\
    \        result.push(grade_letter);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2o4on67c.rs:57:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n57 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let letter_grade: HashMap<f64, &str>;\n\n  \
    \  // A map of GPAs to their letter grade letters\n    letter_grade =\n      \
    \  grades\n            .iter()\n            .map(|grade| match grade {\n     \
    \           4.0 => \"A+\",\n                3.7 => \"A\",\n                3.3\
    \ => \"A-\",\n                3.0 => \"B+\",\n                2.7 => \"B\",\n\
    \                2.3 => \"B-\",\n                2.0 => \"C+\",\n            \
    \    1.7 => \"C\",\n                1.3 => \"C-\",\n                1.0 => \"\
    D+\",\n                0.7 => \"D\",\n                0.0 => \"D-\",\n       \
    \         _ => unreachable!(),\n            })\n            .collect();\n\n  \
    \  grades\n        .iter()\n        .filter(|&grade| grade < 4.0)\n        .filter(|&grade|\
    \ grade < 3.7)\n        .filter(|&grade| grade < 3.3)\n        .filter(|&grade|\
    \ grade < 3.0)\n        .filter(|&grade| grade < 2.7)\n        .filter(|&grade|\
    \ grade < 2.3)\n        .filter(|&grade| grade < 2.0)\n        .filter(|&grade|\
    \ grade < 1.7)\n        .filter(|&grade| grade < 1.3)\n        .filter(|&grade|\
    \ grade < 1.0)\n        .filter(|&grade| grade < 0.7)\n        .filter(|&grade|\
    \ grade < 0.0)\n        .map(|grade| letter_grade.entry(grade).or_insert(String::from(\"\
    E\")))\n        .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmp9_0gazfm.rs:24:23\n\
    \   |\n24 |     let letter_grade: HashMap<f64, &str>;\n   |                  \
    \     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9_0gazfm.rs:49:34\n   |\n49 |         .filter(|&grade| grade <\
    \ 4.0)\n   |                                  ^^^\n   |                      \
    \            |\n   |                                  expected `&f64`, found floating-point\
    \ number\n   |                                  help: consider borrowing here:\
    \ `&4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_0gazfm.rs:50:34\n\
    \   |\n50 |         .filter(|&grade| grade < 3.7)\n   |                      \
    \            ^^^\n   |                                  |\n   |              \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                            help: consider borrowing here: `&3.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9_0gazfm.rs:51:34\n   |\n51 |         .filter(|&grade|\
    \ grade < 3.3)\n   |                                  ^^^\n   |              \
    \                    |\n   |                                  expected `&f64`,\
    \ found floating-point number\n   |                                  help: consider\
    \ borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_0gazfm.rs:52:34\n\
    \   |\n52 |         .filter(|&grade| grade < 3.0)\n   |                      \
    \            ^^^\n   |                                  |\n   |              \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                            help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9_0gazfm.rs:53:34\n   |\n53 |         .filter(|&grade|\
    \ grade < 2.7)\n   |                                  ^^^\n   |              \
    \                    |\n   |                                  expected `&f64`,\
    \ found floating-point number\n   |                                  help: consider\
    \ borrowing here: `&2."
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let (min_grade, max_grade) = grades.min(|a,\
    \ b| b.partial_cmp(a));\n    grades.iter().filter(|&x| x > 0.0).map(|x| x / max_grade).collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `min` exists for struct `Vec<f64>`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmp7zpgk6tu.rs:24:41\n    |\n24  |  \
    \     let (min_grade, max_grade) = grades.min(|a, b| b.partial_cmp(a));\n    |\
    \                                           ^^^ method cannot be called on `Vec<f64>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `f64: Ord`\n            which is required by\
    \ `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n            which is required\
    \ by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n            which is required\
    \ by `&mut Vec<f64>: Ord`\n            `Vec<f64>: Iterator`\n            which\
    \ is required by `&mut Vec<f64>: Iterator`\n            `f64: Ord`\n         \
    \   which is required by `[f64]: Ord`\n            `[f64]: Ord`\n            which\
    \ is required by `&[f64]: Ord`\n            `[f64]: Ord`\n            which is\
    \ required by `&mut [f64]: Ord`\n            `[f64]: Iterator`\n            which\
    \ is required by `&mut [f64]: Iterator`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7zpgk6tu.rs:25:35\n   |\n25 |     grades.iter().filter(|&x| x > 0.0).map(|x|\
    \ x / max_grade).collect::<Vec<String>>()\n   |                              \
    \     ^^^\n   |                                   |\n   |                    \
    \               expected `&f64`, found floating-point number\n   |           \
    \                        help: consider borrowing here: `&0.0`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let (min_grade, max_grade) = grades.into_iter().minmax();\n\
    \n    if max_grade - min_grade < 0.001 {\n        vec![\"E\", \"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    D\"]\n    } else {\n        let mut letter_grades = vec![\"E\"];\n        for\
    \ grade in grades {\n            let grade = (grade - min_grade) / max_grade;\n\
    \            letter_grades.push(String::from(\"\" + grade));\n        }\n    \
    \    letter_grades\n    }\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `minmax` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpytkk7q2n.rs:24:53\n   |\n24 |     let (min_grade,\
    \ max_grade) = grades.into_iter().minmax();\n   |                            \
    \                         ^^^^^^ method not found in `std::vec::IntoIter<f64>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpytkk7q2n.rs:27:14\n   |\n27 |\
    \         vec![\"E\", \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"\
    C\", \"C-\", \"D+\", \"D\", \"D-\", \"D\"]\n   |              ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |              |\n   |             \
    \ expected struct `String`, found `&str`\n\nerror[E0369]: cannot add `_` to `&str`\n\
    \  --> /tmp/tmpytkk7q2n.rs:32:48\n   |\n32 |             letter_grades.push(String::from(\"\
    \" + grade));\n   |                                             -- ^ ----- _\n\
    \   |                                             |\n   |                    \
    \                         &str\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpytkk7q2n.rs:32:32\n\
    \   |\n32 |             letter_grades.push(String::from(\"\" + grade));\n   |\
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^\n   |              \
    \                  |\n   |                                expected `&str`, found\
    \ struct `String`\n   |                                help: consider borrowing\
    \ here: `&String::from(\"\" + grade)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpytkk7q2n.rs:34:9\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |                                                -----------\
    \ expected `Vec<String>` because of return type\n...\n34 |         letter_grades\n\
    \   |         ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() < 12 {\n        return vec![String::from(\"\
    E\")];\n    }\n    let mut letter: Vec<String> = vec![];\n    let grade = grades[grades.len()\
    \ - 12].sqrt();\n    let mut i = 0;\n    while grade > 1.0 {\n        if grade\
    \ > i {\n            i += 1;\n        } else {\n            i -= 1;\n        }\n\
    \        letter = vec![String::from(&*(i + 1)).to_string()] + letter;\n      \
    \  grade = grade - i;\n    }\n    letter = vec![String::from(&*(grade))] + letter;\n\
    \    letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n \
    \   assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx9q8pv0.rs:31:20\n   |\n\
    31 |         if grade > i {\n   |                    ^ expected `f64`, found integer\n\
    \nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmptx9q8pv0.rs:36:37\n\
    \   |\n36 |         letter = vec![String::from(&*(i + 1)).to_string()] + letter;\n\
    \   |                                     ^^^^^^^^\n\nerror[E0369]: cannot add\
    \ `Vec<String>` to `Vec<String>`\n  --> /tmp/tmptx9q8pv0.rs:36:60\n   |\n36 |\
    \         letter = vec![String::from(&*(i + 1)).to_string()] + letter;\n   | \
    \                 ----------------------------------------- ^ ------ Vec<String>\n\
    \   |                  |\n   |                  Vec<String>\n\nerror[E0277]: cannot\
    \ subtract `{integer}` from `f64`\n  --> /tmp/tmptx9q8pv0.rs:37:23\n   |\n37 |\
    \         grade = grade - i;\n   |                       ^ no implementation for\
    \ `f64 - {integer}`\n   |\n   = help: the trait `Sub<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmptx9q8pv0.rs:39:33\n\
    \   |\n39 |     letter = vec![String::from(&*(grade))] + letter;\n   |       \
    \                          ^^^^^^^^\n\nerror[E0369]: cannot add `Vec<String>`\
    \ to `Vec<String>`\n  --> /tmp/tmptx9q8pv0.rs:39:44\n   |\n39 |     letter = vec![String::from(&*(grade))]\
    \ + letter;\n   |              ----------------------------- ^ ------ Vec<String>\n\
    \   |              |\n   |              Vec<String>\n\nerror: aborting due to\
    \ 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0369,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        match grade {\n            4 => letter_grades.push(String::from(\"\
    A+\")),\n            3.7 => letter_grades.push(String::from(\"A\")),\n       \
    \     3.3 => letter_grades.push(String::from(\"A-\")),\n            3.0 => letter_grades.push(String::from(\"\
    B+\")),\n            2.7 => letter_grades.push(String::from(\"B\")),\n       \
    \     2.3 => letter_grades.push(String::from(\"B-\")),\n            2.0 => letter_grades.push(String::from(\"\
    C+\")),\n            1.7 => letter_grades.push(String::from(\"C\")),\n       \
    \     1.3 => letter_grades.push(String::from(\"C-\")),\n            1.0 => letter_grades.push(String::from(\"\
    D+\")),\n            0.7 => letter_grades.push(String::from(\"D\")),\n       \
    \     0.0 => letter_grades.push(String::from(\"D-\")),\n            _ => letter_grades.push(String::from(\"\
    E\")),\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoooc1l9e.rs:27:13\n   |\n\
    26 |         match grade {\n   |               ----- this expression has type\
    \ `f64`\n27 |             4 => letter_grades.push(String::from(\"A+\")),\n   |\
    \             ^\n   |             |\n   |             expected `f64`, found integer\n\
    \   |             help: use a float literal: `4.0`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sum = grades.reduce(0, |a, b|\
    \ a + b);\n\n    let mut grades_so_far = vec![];\n    grades_so_far.push(\"E\"\
    );\n\n    for grade in grades.iter().rev() {\n        if grades_sum > 0.0 {\n\
    \            grades_so_far.push(String::from(\"D-\"));\n            grades_sum\
    \ -= 1.0;\n        } else if grades_sum < 0.0 {\n            grades_so_far.push(String::from(\"\
    D+\"));\n            grades_sum += 1.0;\n        } else {\n            grades_so_far.push(String::from(\"\
    D\"));\n            grades_sum = 0.0;\n        }\n\n        if grade > 3.0 {\n\
    \            grades_so_far.push(String::from(\"B-\"));\n            grades_sum\
    \ += 2.0;\n        } else if grade < 2.0 {\n            grades_so_far.push(String::from(\"\
    B+\"));\n            grades_sum -= 2.0;\n        } else if grade < 3.0 {\n   \
    \         grades_so_far.push(String::from(\"B\"));\n            grades_sum = 0.0;\n\
    \        }\n\n        if grade > 2.0 {\n            grades_so_far.push(String::from(\"\
    B-\"));\n            grades_sum += 1.0;\n        } else if grade < 2.0 {\n   \
    \         grades_so_far.push(String::from(\"B+\"));\n            grades_sum -=\
    \ 1.0;\n        } else if grade < 3.0 {\n            grades_so_far.push(String::from(\"\
    B\"));\n            grades_sum = 0.0;\n        }\n\n        if grade > 1.0 {\n\
    \            grades_so_far.push(String::from(\"B-\"));\n            grades_sum\
    \ += 1.0;\n        } else if grade < 1.0 {\n            grades_so_far.push(String::from(\"\
    B+\"));\n            grades_sum -= 1.0;\n        } else if grade < 2.0 {\n   \
    \         grades_so_far.push(String::from(\"B\"));\n            grades_sum = 0.0;\n\
    \        }\n\n        if grade > 0.7 {\n            grades_so_far.push(String::from(\"\
    B-\"));\n            grades_sum += 1.0;\n        } else if grade < 0.7 {\n   \
    \         grades_so_far.push(String::from(\"B+\"));\n            grades_sum -=\
    \ 1.0;\n        } else if grade < 1.0 {\n            grades_so_far.push(String::from(\"\
    B\"));\n            grades_sum = 0.0;\n        }\n\n        if grade > 0.\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpe9xudfw2.rs:96:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n29 |     for grade in grades.iter().rev() {\n   |                       \
    \               - this delimiter might not be properly closed...\n...\n86 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n96 | }\n\
    \   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpe9xudfw2.rs:86:1\n\
    \   |\n85 |         if grade > 0.\n   |         -- this `if` expression has a\
    \ condition, but no block\n86 | }\n   | ^ expected `{`\n\nerror[E0599]: `Vec<f64>`\
    \ is not an iterator\n   --> /tmp/tmpe9xudfw2.rs:24:33\n    |\n24  |       let\
    \ mut grades_sum = grades.reduce(0, |a, b| a + b);\n    |                    \
    \               ^^^^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n       \
    \     which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n\
    \            which is required by `&mut [f64]: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe9xudfw2.rs:31:32\n   |\n31 |             grades_so_far.push(String::from(\"\
    D-\"));\n   |                                ^^^^^^^^^^^^^^^^^^\n   |        \
    \                        |\n   |                                expected `&str`,\
    \ found struct `String`\n   |                                help: consider borrowing\
    \ here: `&String::from(\"D-\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe9xudfw2.rs:34:32\n\
    \   |\n34 |             grades_so_far.push(String::from(\"D+\"));\n   |      \
    \                          ^^^^^^^^^^^^^^^^^^\n   |                          \
    \      |\n   |                                expected `&str`, found struct `String`\n\
    \   |                                help: consider borrowing here: `&String::from(\"\
    D+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe9xudfw2.rs:37:32\n  \
    \ |\n37 |             grades_so_far.push(String::from(\"D\"));\n   |         \
    \                   "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().filter(|&x| x <= 3.0).map(|x|\
    \ format!(\"{}\", x).to_string()).collect::<Vec<String>>()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqk6p4qtb.rs:24:36\n   |\n\
    24 |     grades.iter().filter(|&x| x <= 3.0).map(|x| format!(\"{}\", x).to_string()).collect::<Vec<String>>()\n\
    \   |                                    ^^^\n   |                           \
    \         |\n   |                                    expected `&f64`, found floating-point\
    \ number\n   |                                    help: consider borrowing here:\
    \ `&3.0`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n\
    \        .filter(|(index, _)| index != grades.len() - 1)\n        .filter(|(_,\
    \ grade)| grade > 0.0)\n        .filter_map(|(index, _)| {\n            let grade\
    \ = grades[index];\n            match grade {\n                1.0 => \"D+\".to_string(),\n\
    \                _ => match grades[index + 1] {\n                    2.0 => \"\
    B-\".to_string(),\n                    _ => \"B-\".to_string(),\n            \
    \    },\n            }\n        })\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&usize` with `usize`\n  --> /tmp/tmpzi90nysp.rs:27:36\n\
    \   |\n27 |         .filter(|(index, _)| index != grades.len() - 1)\n   |    \
    \                                ^^ no implementation for `&usize == usize`\n\
    \   |\n   = help: the trait `PartialEq<usize>` is not implemented for `&usize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzi90nysp.rs:28:38\n\
    \   |\n28 |         .filter(|(_, grade)| grade > 0.0)\n   |                  \
    \                    ^^^ expected `&&f64`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzi90nysp.rs:32:24\n   |\n32 |              \
    \   1.0 => \"D+\".to_string(),\n   |                        ^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n32 |                 1.0 => Some(\"D+\".to_string()),\n   |           \
    \             +++++                +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzi90nysp.rs:34:28\n   |\n34 |                     2.0 => \"B-\".to_string(),\n\
    \   |                            ^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found\
    \ struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n34 |   \
    \                  2.0 => Some(\"B-\".to_string()),\n   |                    \
    \        +++++                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzi90nysp.rs:24:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n24 | /     grades\n25 | |         .iter()\n26 | |  \
    \       .enumerate()\n27 | |         .filter(|(index, _)| index != grades.len()\
    \ - 1)\n...  |\n37 | |             }\n38 | | "
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades = grades;\n    let mut letter_grades:\
    \ Vec<String> = vec![String::from(\"\")];\n\n    for grade in grades {\n     \
    \   let mut letter_grade = String::from(\"\");\n        \n        if grade < 4.0{\n\
    \            letter_grade = String::from(\"A+\");\n        }else if grade < 3.0{\n\
    \            letter_grade = String::from(\"A\");\n        }else if grade < 2.7{\n\
    \            letter_grade = String::from(\"A-\");\n        }else if grade < 2.3{\n\
    \            letter_grade = String::from(\"B+\");\n        }else if grade < 2.0{\n\
    \            letter_grade = String::from(\"B\");\n        }else if grade < 1.7{\n\
    \            letter_grade = String::from(\"B-\");\n        }else if grade < 1.3{\n\
    \            letter_grade = String::from(\"C+\");\n        }else if grade < 1.0{\n\
    \            letter_grade = String::from(\"C\");\n        }else if grade < 0.7{\n\
    \            letter_grade = String::from(\"C-\");\n        }else if grade < 0.6{\n\
    \            letter_grade = String::from(\"D+\");\n        }else if grade < 0.4{\n\
    \            letter_grade = String::from(\"D\");\n        }else if grade < 0.3{\n\
    \            letter_grade = String::from(\"D-\");\n        }else if grade < 0.2{\n\
    \            letter_grade = String::from(\"E\");\n        }else if grade < 0.0{\n\
    \            letter_grade = String::from(\"F\");\n        }else{\n           \
    \ letter_grade = String::from(\"F\");\n        }\n        \n        letter_grades.push(letter_grade);\n\
    \    }\n    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"F\", \"A+\", \"A+\", \"A+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\"]`', /tmp/tmpu76z4mw9.rs:70:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec = grades.to_vec();\n    let\
    \ mut counter = grades_vec.len() - 1;\n    let mut letter_grades = Vec::new();\n\
    \n    loop {\n        counter = counter - 1;\n\n        if grades_vec[counter]\
    \ < 1.0 {\n            letter_grades.push(String::from(\"D-\"));\n           \
    \ break;\n        }\n        \n        if grades_vec[counter] == 1.0 {\n     \
    \       if grades_vec[counter + 1] == 1.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            if grades_vec[counter\
    \ + 1] < 1.0 {\n                letter_grades.push(String::from(\"B+\"));\n  \
    \              break;\n            }\n            \n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n\n        if grades_vec[counter] == 0.0\
    \ {\n            if grades_vec[counter + 1] == 0.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            if grades_vec[counter\
    \ + 1] < 0.0 {\n                letter_grades.push(String::from(\"A-\"));\n  \
    \              break;\n            }\n            \n            letter_grades.push(String::from(\"\
    A-\"));\n            break;\n        }\n\n        if grades_vec[counter] >= 0.0\
    \ && grades_vec[counter + 1] < 0.0 && grades_vec[counter + 1] > 0.0 {\n      \
    \      if grades_vec[counter + 1] == 0.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            if grades_vec[counter\
    \ + 1] == 1.0 {\n                letter_grades.push(String::from(\"A+\"));\n \
    \               break;\n            }\n            \n            letter_grades.push(String::from(\"\
    A-\"));\n            break;\n        }\n\n        if grades_vec[counter] >= 0.0\
    \ && grades_vec[counter + 1] >= 0.0 && grades_vec[counter + 1] < 1.0 {\n     \
    \       if grades_vec[counter + 1] == 0.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            letter_grades.push(String::from(\"\
    A+\"));\n            break;\n        }\n\n        if grades_vec[counter] >= 0.0\
    \ && grades_vec[counter + 1] == 1.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            break;\n        }\n        \n        if grades_vec[counter]\
    \ >= 1.0 {\n            letter_grades.push(String::from(\"C+\"));\n          \
    \  break;\n        }\n        \n        letter_grades.push(String::from(\"C\"\
    ));\n        break;\n    }\n\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"C+\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp93_s75jx.rs:110:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_counter: usize = 0;\n    let\
    \ mut grade_vec: Vec<String> = Vec::new();\n    let mut min: f64 = std::f64::MIN;\n\
    \    let mut max: f64 = std::f64::MAX;\n\n    for grade in grades {\n        grades_counter\
    \ += 1;\n        if grade > max {\n            max = grade;\n        }\n     \
    \   if grade < min {\n            min = grade;\n        }\n    }\n\n    for grade\
    \ in grades {\n        let grade = grade - (max - min) as f64;\n        let grade\
    \ = grade / grades_counter;\n        let letter_grade: String = match grade {\n\
    \            0..=1 => \"D+\",\n            1..=2 => \"D\",\n            2..=3\
    \ => \"C-\",\n            3..=4 => \"C\",\n            4..=5 => \"B-\",\n    \
    \        5..=6 => \"B\",\n            6..=7 => \"B-\",\n            7..=8 => \"\
    B\",\n            8..=9 => \"B-\",\n            10..=11 => \"B\",\n          \
    \  12..=13 => \"B-\",\n            13..=14 => \"B\",\n            15..=16 => \"\
    B-\",\n            16..=17 => \"B\",\n            18..=19 => \"B-\",\n       \
    \     20..=21 => \"B\",\n            22..=23 => \"B-\",\n            24..=25 =>\
    \ \"B\",\n            26..=27 => \"B-\",\n            28..=29 => \"B\",\n    \
    \        30..=31 => \"B-\",\n            32..=33 => \"B\",\n            34..=35\
    \ => \"B-\",\n            36..=37 => \"B\",\n            38..=39 => \"B-\",\n\
    \            40..=41 => \"B\",\n            42.. <= 44 => \"B-\",\n          \
    \  45..=46 => \"B\",\n            47..=48 => \"B-\",\n            49..=50 => \"\
    B\",\n            50..=51 => \"B-\",\n            52 <= 53 => \"B-\",\n      \
    \      54..=55 => \"B\",\n            56..=57 => \"B-\",\n            58..=59\
    \ => \"B\",\n            60..=61 => \"B-\",\n            62 <= 63 => \"B-\",\n\
    \            64..=65 => \"B\",\n            66..=67 => \"B-\",\n\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3bdeq4vx.rs:93:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n39 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    ...\n42 |         let letter_grade: String = match grade {\n   |             \
    \                                   - this delimiter might not be properly closed...\n\
    ...\n83 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    93 | }\n   |   ^\n\nerror: expected one of `=>`, `if`, or `|`, found `<=`\n  -->\
    \ /tmp/tmp3bdeq4vx.rs:69:18\n   |\n69 |             42.. <= 44 => \"B-\",\n  \
    \ |                  ^^ expected one of `=>`, `if`, or `|`\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found keyword `fn`\n  --> /tmp/tmp3bdeq4vx.rs:85:1\n\
    \   |\n83 | }\n   |  - expected one of `.`, `;`, `?`, `else`, or an operator\n\
    84 | \n85 | fn main() {\n   | ^^ unexpected token\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmp3bdeq4vx.rs:41:27\n   |\n41 |         let grade\
    \ = grade / grades_counter;\n   |                           ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3bdeq4vx.rs:39:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n39 | /     for grade in grades {\n40 | |      \
    \   let grade = grade - (max - min) as f64;\n41 | |         let grade = grade\
    \ / grades_counter;\n42 | |         let"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ count = 0;\n    for grade in grades {\n        count = count + 1;\n        if\
    \ count % 2 == 0 {\n            letter_grades.push(String::from(\"A+\"));\n  \
    \      } else {\n            letter_grades.push(String::from(\"B\"));\n      \
    \  }\n    }\n    if grades.len() > 0 {\n        letter_grades.push(String::from(\"\
    E\"));\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `grade`\n  --> /tmp/tmprapxpmvp.rs:26:9\n   |\n\
    26 |     for grade in grades {\n   |         ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_grade`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `grades`\n   --> /tmp/tmprapxpmvp.rs:34:8\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                           ------ move occurs because `grades` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n26  |     for grade in grades\
    \ {\n    |                  ------ `grades` moved due to this implicit call to\
    \ `.into_iter()`\n...\n34  |     if grades.len() > 0 {\n    |        ^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `grades`\nhelp: consider iterating over a slice\
    \ of the `Vec<f64>`'s content to avoid moving into the `for` loop\n    |\n26 \
    \ |     for grade in &grades {\n    |                  +\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let\
    \ mut total_grades = grades.iter().fold(0.0, |sum, grade| {\n        let (grade,\
    \ mut total) = sum.max(0.0);\n        if grade == 0.0 { 0.0 } else { total + (grade\
    \ as f64).sqrt() }\n    });\n    let mut letter = String::new();\n\n    for grade\
    \ in grades.iter() {\n        let letter_grade = total_grades.min(0.0).max(0.0);\n\
    \        total_grades -= letter_grade;\n        if letter_grade == 0.0 { 0.0 }\
    \ else { letter += String::from(\"A-\"); }\n        letter += String::from(\"\"\
    \ + letter_grade as char);\n    }\n    letter_grades.push(letter);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `max` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmpx51023by.rs:26:38\n   |\n25 |     let mut total_grades = grades.iter().fold(0.0,\
    \ |sum, grade| {\n   |                                                     ---\
    \ you must specify a type for this binding, like `f32`\n26 |         let (grade,\
    \ mut total) = sum.max(0.0);\n   |                                      ^^^\n\n\
    error[E0689]: can't call method `min` on ambiguous numeric type `{float}`\n  -->\
    \ /tmp/tmpx51023by.rs:32:41\n   |\n32 |         let letter_grade = total_grades.min(0.0).max(0.0);\n\
    \   |                                         ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `f32`\n   |\n25 |     let mut total_grades: f32\
    \ = grades.iter().fold(0.0, |sum, grade| {\n   |         ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx51023by.rs:34:34\n   |\n34 |\
    \         if letter_grade == 0.0 { 0.0 } else { letter += String::from(\"A-\"\
    ); }\n   |         -------------------------^^^-----------------------------------------\n\
    \   |         |                        |\n   |         |                     \
    \   expected `()`, found floating-point number\n   |         expected this to\
    \ be `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx51023by.rs:34:57\n\
    \   |\n34 |         if letter_grade == 0.0 { 0.0 } else { letter += String::from(\"\
    A-\"); }\n   |                                                         ^^^^^^^^^^^^^^^^^^\n\
    \   |                                                         |\n   |        \
    \                                                 expected `&str`, found struct\
    \ `String`\n   |                                                         help:\
    \ consider borrowing here: `&String::from(\"A-\")`\n\nerror[E0369]: cannot add\
    \ `char` to `&str`\n  --> /tmp/tmpx51023by.rs:35:35\n   |\n35 |         letter\
    \ += String::from(\"\" + letter_grade as char);\n   |                        \
    \        -- ^ -------------------- char\n   |                                |\n\
    \   |                                &str\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx51023by.r"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n\n    // The\
    \ GPA must be greater than 3.0\n    let mut gpa = grades.min().unwrap();\n   \
    \ while gpa > 3.0 {\n        if gpa == 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if gpa > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if gpa > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if gpa > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if gpa > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if gpa > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if gpa > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if gpa > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if gpa > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if gpa > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if gpa > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if gpa > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n\n        // The GPA must be less than 2.0\n        gpa = grades.max().unwrap();\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `min` exists for struct `Vec<f64>`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpvbxmn3c7.rs:27:26\n    |\n27  |  \
    \     let mut gpa = grades.min().unwrap();\n    |                            ^^^\
    \ method cannot be called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `f64:\
    \ Ord`\n            which is required by `Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Ord`\n            which is required by `&Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Ord`\n            which is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `f64: Ord`\n            which is required by `[f64]: Ord`\n         \
    \   `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n           \
    \ `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n         \
    \   `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0599]: the method `max` exists for struct `Vec<f64>`, but its trait bounds\
    \ were not satisfied\n   --> /tmp/tmpvbxmn3c7.rs:58:22\n    |\n58  |         \
    \  gpa = grades.max().unwrap();\n    |                        ^^^ method cannot\
    \ be called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `f64: Ord`\n   \
    \         which is required by `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `f64: Ord`\n            which is required by `[f64]: Ord`\n         \
    \   `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n           \
    \ `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n         \
    \   `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ erro"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_letter = vec![\"A+\".to_string(),\
    \ \"B\".to_string(), \"B-\".to_string(), \"C\".to_string(), \"C-\".to_string(),\
    \ \"D\".to_string()];\n    for grade in grades {\n        if grade > 3.0 {\n \
    \           grades_letter.push(\"A\".to_string());\n        } else if grade >\
    \ 2.7 {\n            grades_letter.push(\"B\".to_string());\n        } else if\
    \ grade > 2.3 {\n            grades_letter.push(\"B-\".to_string());\n       \
    \ } else if grade > 1.7 {\n            grades_letter.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            grades_letter.push(\"C-\".to_string());\n\
    \        } else if grade > 0.7 {\n            grades_letter.push(\"D\".to_string());\n\
    \        } else if grade > 0.3 {\n            grades_letter.push(\"D-\".to_string());\n\
    \        } else {\n            grades_letter.push(\"E\".to_string());\n      \
    \  }\n    }\n    grades_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B\", \"B-\", \"C\", \"C-\", \"D\", \"A\", \"B\", \"C-\", \"C\",\
    \ \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp_l091a6w.rs:49:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .map(|x| {\n\
    \            if x < 3.0 {\n                String::from(\"A+\")\n            }\
    \ else if x < 3.3 {\n                String::from(\"A\")\n            } else if\
    \ x < 3.7 {\n                String::from(\"A-\")\n            } else if x < 3.0\
    \ {\n                String::from(\"B+\")\n            } else if x < 3.3 {\n \
    \               String::from(\"B\")\n            } else if x < 3.7 {\n       \
    \         String::from(\"B-\")\n            } else if x < 3.0 {\n            \
    \    String::from(\"C+\")\n            } else if x < 3.3 {\n                String::from(\"\
    C\")\n            } else if x < 3.7 {\n                String::from(\"C-\")\n\
    \            } else if x < 3.0 {\n                String::from(\"D+\")\n     \
    \       } else if x < 3.3 {\n                String::from(\"D\")\n           \
    \ } else if x < 3.7 {\n                String::from(\"D-\")\n            } else\
    \ if x < 3.0 {\n                String::from(\"E\")\n            } else {\n  \
    \              String::from(\"F\")\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1rn8v9d9.rs:27:20\n   |\n\
    27 |             if x < 3.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1rn8v9d9.rs:29:27\n   |\n29 |             }\
    \ else if x < 3.3 {\n   |                           ^^^\n   |                \
    \           |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&3.3`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1rn8v9d9.rs:31:27\n   |\n31 |\
    \             } else if x < 3.7 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1rn8v9d9.rs:33:27\n\
    \   |\n33 |             } else if x < 3.0 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1rn8v9d9.rs:35:27\n\
    \   |\n35 |             } else if x < 3.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1rn8v9d9.rs:37:27\n\
    \   |\n37 |             } else if x < 3.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1rn8v9d9.rs:39:27\n\
    \   |\n39 |             } else if x < 3.0 {\n   |                           ^^^\n\
    \   |                         "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![\"\
    F\"];\n    }\n\n    let mut grades: Vec<String> = vec![\"F\"];\n\n    if grades[0]\
    \ <= 5.0 { grades.push(\"A+\"); }\n    if grades[0] > 5.0 && grades[0] <= 7.0\
    \ { grades.push(\"A\"); }\n    if grades[0] > 7.0 && grades[0] <= 9.0 { grades.push(\"\
    A-\"); }\n    if grades[0] > 9.0 && grades[0] <= 11.0 { grades.push(\"B+\"); }\n\
    \    if grades[0] > 11.0 && grades[0] <= 13.0 { grades.push(\"B\"); }\n    if\
    \ grades[0] > 13.0 && grades[0] <= 15.0 { grades.push(\"B-\"); }\n    if grades[0]\
    \ > 15.0 && grades[0] <= 17.0 { grades.push(\"C+\"); }\n    if grades[0] > 17.0\
    \ && grades[0] <= 19.0 { grades.push(\"C\"); }\n    if grades[0] > 19.0 && grades[0]\
    \ <= 21.0 { grades.push(\"C-\"); }\n    if grades[0] > 21.0 { grades.push(\"D+\"\
    ); }\n    if grades[0] > 22.0 { grades.push(\"D\"); }\n    if grades[0] > 22.0\
    \ { grades.push(\"D-\"); }\n    if grades[0] > 22.0 { grades.push(\"E\"); }\n\n\
    \    return grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkdcq44ub.rs:25:21\n   |\n\
    25 |         return vec![\"F\"];\n   |                     ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkdcq44ub.rs:28:40\n   |\n28 |     let mut grades: Vec<String>\
    \ = vec![\"F\"];\n   |                                        ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                                  \
    \      |\n   |                                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdcq44ub.rs:30:21\n\
    \   |\n30 |     if grades[0] <= 5.0 { grades.push(\"A+\"); }\n   |           \
    \          ^^^- help: try using a conversion method: `.to_string()`\n   |    \
    \                 |\n   |                     expected struct `String`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdcq44ub.rs:30:39\n\
    \   |\n30 |     if grades[0] <= 5.0 { grades.push(\"A+\"); }\n   |           \
    \                            ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                       |\n   |                          \
    \             expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkdcq44ub.rs:31:20\n   |\n31 |     if grades[0] > 5.0 &&\
    \ grades[0] <= 7.0 { grades.push(\"A\"); }\n   |                    ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                    |\n \
    \  |                    expected struct `String`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkdcq44ub.rs:31:40\n   |\n31 |\
    \     if grades[0] > 5.0 && grades[0] <= 7.0 { grades.push(\"A\"); }\n   |   \
    \                                     ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                        |\n   |        \
    \                                expected struct `String`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdcq44ub.rs:31:"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // TODO: Your code here\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn89afj82.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = vec![String::new(); grades.len()];\n\
    \    for grade in grades {\n        match grade {\n            0.0 => result.push(String::from(\"\
    D-\")), \n            0.7 => result.push(String::from(\"D\")), \n            0.8\
    \ => result.push(String::from(\"D+\")), \n            1.0 => result.push(String::from(\"\
    C\")),\n            1.1 => result.push(String::from(\"C+\")),\n            1.2\
    \ => result.push(String::from(\"B+\")),\n            1.3 => result.push(String::from(\"\
    B\")),\n            1.4 => result.push(String::from(\"A-\")),\n            1.5\
    \ => result.push(String::from(\"A-\")),\n            _ => {\n                if\
    \ grade < 3.0 {\n                    result.push(String::from(\"A+\")); \n   \
    \             } else if grade < 4.0 {\n                    result.push(String::from(\"\
    A\")); \n                } else if grade < 5.0 {\n                    result.push(String::from(\"\
    A-\"));\n                } else {\n                    result.push(String::from(\"\
    B+\"));\n                }\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"\", \"\", \"\", \"\", \"A-\", \"A\", \"A+\", \"A+\", \"A\"]`,\n right:\
    \ `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpjgnboyav.rs:54:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n\
    \        .filter_map(|(i, g)| {\n            if i < 3 {\n                Some(String::from(\n\
    \                    format!(\"{}\", g + 0.0).to_string(),\n                ))\n\
    \            } else {\n                Some(String::from(\n                  \
    \  format!(\"{}\", g * 100).to_string(),\n                ))\n            }\n\
    \        })\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `&f64` by `{integer}`\n  --> /tmp/tmpcewv8ued.rs:34:37\n\
    \   |\n34 |                     format!(\"{}\", g * 100).to_string(),\n   |  \
    \                                   ^ no implementation for `&f64 * {integer}`\n\
    \   |\n   = help: the trait `Mul<{integer}>` is not implemented for `&f64`\n \
    \  = help: the following other types implement trait `Mul<Rhs>`:\n           \
    \  <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    for i in 0..grades.len() {\n        let current_grade = grades.nth(i);\n\
    \        match current_grade {\n            0 => letter_grades.push(String::from(\"\
    E\")),\n            1 => letter_grades.push(String::from(\"D-\")),\n         \
    \   2 => letter_grades.push(String::from(\"C-\")),\n            3 => letter_grades.push(String::from(\"\
    B-\")),\n            4 => letter_grades.push(String::from(\"B-\")),\n        \
    \    5 => letter_grades.push(String::from(\"A-\")),\n            6 => letter_grades.push(String::from(\"\
    A-\")),\n            7 => letter_grades.push(String::from(\"A+\")),\n        \
    \    8 => letter_grades.push(String::from(\"B+\")),\n            9 => letter_grades.push(String::from(\"\
    C+\")),\n            10 => letter_grades.push(String::from(\"D+\")),\n       \
    \     11 => letter_grades.push(String::from(\"D+\")),\n            12 => letter_grades.push(String::from(\"\
    D+\")),\n            _ => return,\n        }\n    }\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `nth` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpadi5qp4b.rs:26:36\n   |\n26 |         let current_grade\
    \ = grades.nth(i);\n   |                                    ^^^ method not found\
    \ in `Vec<f64>`\n\nerror[E0069]: `return;` in a function whose return type is\
    \ not `()`\n  --> /tmp/tmpadi5qp4b.rs:41:18\n   |\n41 |             _ => return,\n\
    \   |                  ^^^^^^ return type is not `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0069, E0599.\n\
    For more information about an error, try `rustc --explain E0069`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![String::from(\"\
    A+\")];\n    for grade in grades.iter() {\n        if grade > 3.0 {\n        \
    \    grades_vec.push(String::from(\"A-\"));\n        } else if grade < 3.0 {\n\
    \            grades_vec.push(String::from(\"B+\"));\n        } else if grade >\
    \ 2.7 {\n            grades_vec.push(String::from(\"B\"));\n        } else if\
    \ grade < 2.7 {\n            grades_vec.push(String::from(\"B-\"));\n        }\
    \ else if grade > 2.3 {\n            grades_vec.push(String::from(\"C+\"));\n\
    \        } else if grade < 2.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade < 1.7 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade < 1.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpow99tz1i.rs:26:20\n   |\n\
    26 |         if grade > 3.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpow99tz1i.rs:28:27\n   |\n28 |         } else\
    \ if grade < 3.0 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&3.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpow99tz1i.rs:30:27\n   |\n30 |\
    \         } else if grade > 2.7 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow99tz1i.rs:32:27\n\
    \   |\n32 |         } else if grade < 2.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow99tz1i.rs:34:27\n\
    \   |\n34 |         } else if grade > 2.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow99tz1i.rs:36:27\n\
    \   |\n36 |         } else if grade < 2.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow99tz1i.rs:38:27\n\
    \   |\n38 |         } else if grade > 1.7 {\n   |                           ^^^\n\
    \   |                         "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    let mut temp_grade: f64 = 0;\n    let mut max_grade: f64 = grades.iter().max().unwrap();\n\
    \    \n    for grade in grades.iter() {\n        // If it's the same as the current\
    \ grade\n        if grade == temp_grade {\n            temp_grade += 0.3;\n  \
    \      } else {\n            temp_grade += 0.1;\n        }\n        \n       \
    \ // If it's greater than the max_grade - 0.2\n        if grade > max_grade -\
    \ 0.2 {\n            max_grade += 0.2;\n        }\n        \n        \n      \
    \  if grade > max_grade {\n            max_grade = grade;\n        }\n       \
    \ \n        if grade <= 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            break;\n        }\n        \n        let grades_str = String::from(\"\
    {:0.1f}\".to_string()).to_string();\n        let grades_str2 = String::from(\"\
    {:0.1f}\".to_string()).to_string();\n        \n        if grade < 0.0 {\n    \
    \        letter_grades.push(String::from(\"D-\"));\n        } else if grade <=\
    \ 0.2 {\n            letter_grades.push(String::from(\"B-\"));\n        } else\
    \ if grade <= 0.5 {\n            letter_grades.push(String::from(\"B-\"));\n \
    \       } else if grade <= 0.8 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.2 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.4 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.8 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.2 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.4 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.8 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 3.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp02ya7mwb.rs:95:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     for grade in grades.iter() {\n   |                             \
    \   - unclosed delimiter\n...\n82 |         } else if grade <= 3.0 {\n   |   \
    \                             - this delimiter might not be properly closed...\n\
    ...\n85 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    95 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02ya7mwb.rs:25:31\n\
    \   |\n25 |     let mut temp_grade: f64 = 0;\n   |                         ---\
    \   ^\n   |                         |     |\n   |                         |  \
    \   expected `f64`, found integer\n   |                         |     help: use\
    \ a float literal: `0.0`\n   |                         expected due to this\n\n\
    error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp02ya7mwb.rs:26:44\n\
    \     |\n26   |     let mut max_grade: f64 = grades.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp02ya7mwb.rs:26:30\n   |\n26 |\
    \     let mut max_grade: f64 = grades.iter().max().unwrap();\n   |           \
    \             ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n\
    \   |                        |\n   |                        expected due to this\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n26 |     let mut max_grade:\
    \ f64 = *grades.iter().max().unwrap();\n   |                              +\n\n\
    error[E0277]: can't c"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut lettergrades = vec![];\n\n    for grade\
    \ in grades {\n        let letter_grade = match grade {\n            0.0  => \"\
    E\",\n            0.1  => \"D-\",\n            0.2  => \"C-\",\n            0.3\
    \  => \"B-\",\n            0.4  => \"B-\",\n            0.5  => \"B-\",\n    \
    \        0.6  => \"B-\",\n            0.7  => \"B-\",\n            0.8  => \"\
    B-\",\n            0.9  => \"B-\",\n            1.0 => \"B-\",\n            1.1\
    \ => \"B-\",\n            1.2 => \"B-\",\n            1.3 => \"B-\",\n       \
    \     1.4 => \"B-\",\n            1.5 => \"B-\",\n            1.6 => \"B-\",\n\
    \            1.7 => \"B-\",\n            1.8 => \"B-\",\n            1.9 => \"\
    B-\",\n            2.0 => \"B-\",\n            2.1 => \"B-\",\n            2.2\
    \ => \"B-\",\n            2.3 => \"B-\",\n            2.4 => \"B-\",\n       \
    \     2.5 => \"B-\",\n            2.6 => \"B-\",\n            2.7 => \"B-\",\n\
    \            2.8 => \"B-\",\n            2.9 => \"B-\",\n            3.0 => \"\
    B-\",\n            3.1 => \"B-\",\n            3.2 => \"B-\",\n            3.3\
    \ => \"B-\",\n            3.4 => \"B-\",\n            3.5 => \"B-\",\n       \
    \     3.6 => \"B-\",\n            3.7 => \"B-\",\n            3.8 => \"B-\",\n\
    \            3.9 => \"B-\",\n            4.0 => \"B-\",\n            > 4.0 =>\
    \ \"A+\",\n        };\n\n        lettergrades.push(letter_grade);\n    }\n\n \
    \   lettergrades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpkam1cyt9.rs:69:13\n \
    \  |\n69 |             > 4.0 => \"A+\",\n   |             ^ expected pattern\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkam1cyt9.rs:75:5\n   |\n23 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |            \
    \                                    ----------- expected `Vec<String>` because\
    \ of return type\n...\n75 |     lettergrades\n   |     ^^^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Write your code here\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeg94hjx8.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.sort_unstable();\n\
    \    let mut grades_sorted = grades_sorted.rev();\n    let mut letter_grades =\
    \ Vec::new();\n    let mut grade = grades_sorted[0];\n    let mut grade_counter\
    \ = 0;\n    let mut grade_counter2 = 1;\n    let mut i = 0;\n    loop {\n    \
    \    if grade_counter2 % 5 == 0 && grade_counter % 5 == 0 {\n            grade_counter2\
    \ = 0;\n            letter_grades.push(String::from(\"E\"));\n        }\n    \
    \    if i == grades_sorted.len() {\n            break;\n        }\n        if\
    \ grade <= grades_sorted[i] {\n            grade += 0.1;\n            grade_counter\
    \ += 1;\n            grade_counter2 += 1;\n        } else {\n            grade\
    \ -= 0.1;\n            grade_counter += 1;\n            grade_counter2 += 1;\n\
    \        }\n        i += 1;\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp2g1yznkk.rs:24:36\n\
    \     |\n24   |     let mut grades_sorted = grades.sort_unstable();\n     |  \
    \                                  ^^^^^^^^^^^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmp2g1yznkk.rs:25:43\n\
    \   |\n25 |     let mut grades_sorted = grades_sorted.rev();\n   |           \
    \                                ^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_max = 0.0; // maximum grade\n    let mut grades_min = 1.0;\
    \ // minimum grade\n    for grade in grades {\n        if grades_max < grade {\n\
    \            grades_max = grade;\n        }\n        if grades_min > grade {\n\
    \            grades_min = grade;\n        }\n    }\n    let grades_range = grades_max\
    \ - grades_min;\n\n    for grade in grades {\n        let letter = if grades_range\
    \ > 0.0 {\n            if grade <= grades_min {\n                \"E\";\n    \
    \        } else if grade > grades_max {\n                \"D\";\n            }\
    \ else {\n                let grades_range = grade - grades_min;\n           \
    \     if grades_range <= 0.3 {\n                    \"C\";\n                }\
    \ else if grades_range <= 0.7 && grades_range > 0.3 {\n                    \"\
    B\";\n                } else if grades_range <= 1.3 && grades_range > 0.7 && grades_range\
    \ > 0.3 {\n                    \"A\";\n                } else {\n            \
    \        let grades_range_float = grades_range.floor();\n                    let\
    \ grades_range_float_f = grades_range_float.to_f();\n                    if grades_range_float_f\
    \ == 0.01 {\n                        \"A\";\n                    } else if grades_range_float_f\
    \ == 0.03 {\n                        \"A-\";\n                    } else if grades_range_float_f\
    \ == 0.07 {\n                        \"B+\";\n                    } else if grades_range_float_f\
    \ == 0.13 {\n                        \"B\";\n                    } else if grades_range_float_f\
    \ == 0.17 {\n                        \"B-\";\n                    } else if grades_range_float_f\
    \ == 0.20 {\n                        \"C+\";\n                    } else if grades_range_float_f\
    \ == 0.24 {\n                        \"C\";\n                    } else if grades_range_float_f\
    \ == 0.27 {\n                        \"C-\";\n                    } else if grades_range_float_f\
    \ == 0.30 {\n                        \"D+\";\n                    } else if grades_range_float_f\
    \ == 0.33 {\n                        \"D\";\n                    } else if grades_range_float_f\
    \ == 0.36 {\n                        \"D-\";\n                    } else {\n \
    \                       \"F\";\n                    }\n                }\n   \
    \         }\n        } else {\n            \"F\";\n        }\n        grades_vec.push(letter);\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `grades_vec`\n  --> /tmp/tmpf24qewz1.rs:83:10\n\
    \   |\n83 |         }\n   |          ^ help: add `;` here\n84 |         grades_vec.push(letter);\n\
    \   |         ---------- unexpected token\n\nerror[E0599]: no method named `to_f`\
    \ found for type `f64` in the current scope\n  --> /tmp/tmpf24qewz1.rs:53:67\n\
    \   |\n53 |                     let grades_range_float_f = grades_range_float.to_f();\n\
    \   |                                                                   ^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for i in grades.iter() {\n        match i {\n            4.0 => \"A+\".to_string(),\n\
    \            3.7 => \"A\".to_string(),\n            3.3 => \"A-\".to_string(),\n\
    \            3.0 => \"B+\".to_string(),\n            2.7 => \"B\".to_string(),\n\
    \            2.3 => \"B-\".to_string(),\n            2.0 => \"C+\".to_string(),\n\
    \            1.7 => \"C\".to_string(),\n            1.3 => \"C-\".to_string(),\n\
    \            1.0 => \"D+\".to_string(),\n            0.7 => \"D\".to_string(),\n\
    \            _ => \"E\".to_string()\n        }\n        grades_vec.push(grades_vec);\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv_p8s59u.rs:26:9\n   |\n\
    26 | /         match i {\n27 | |             4.0 => \"A+\".to_string(),\n28 |\
    \ |             3.7 => \"A\".to_string(),\n29 | |             3.3 => \"A-\".to_string(),\n\
    ...  |\n38 | |             _ => \"E\".to_string()\n39 | |         }\n   | |  \
    \       ^- help: consider using a semicolon here\n   | |_________|\n   |     \
    \      expected `()`, found struct `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv_p8s59u.rs:40:25\n   |\n40 |         grades_vec.push(grades_vec);\n\
    \   |                         ^^^^^^^^^^ expected struct `String`, found struct\
    \ `Vec`\n   |\n   = note: expected struct `String`\n              found struct\
    \ `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() < 7 {\n        vec![String::from(\"\
    \")]\n    }\n    else if grades[0] <= 3.5 {\n        let mut letter_grade = String::from(\"\
    \");\n        for grade in grades {\n            if grade > 3.5 {\n          \
    \      letter_grade += \"A-\";\n            }\n            else if grade <= 2.3\
    \ {\n                letter_grade += \"B-\";\n            }\n            else\
    \ if grade <= 1.7 {\n                letter_grade += \"C-\";\n            }\n\
    \            else if grade <= 1.0{\n                letter_grade += \"D-\";\n\
    \            }\n            else if grade <= 0.7{\n                letter_grade\
    \ += \"D\";\n            }\n            else if grade <= 0.0{\n              \
    \  letter_grade += \"D+\";\n            }\n            else if grade < 3.0{\n\
    \                letter_grade += \"C\";\n            }\n            else if grade\
    \ < 2.7 {\n                letter_grade += \"B\";\n            }\n           \
    \ else if grade < 3.0 {\n                letter_grade += \"A\";\n            }\n\
    \            else if grade < 4.0 {\n                letter_grade += \"A+\";\n\
    \            }\n            else {\n                letter_grade += \"E\";\n \
    \           }\n        }\n        vec![letter_grade]\n    }\n    else {\n    \
    \    let mut letter_grade = String::from(\"\");\n        for grade in grades {\n\
    \            if grade > 3.0 {\n                letter_grade += \"B-\";\n     \
    \       }\n            else if grade <= 2.7{\n                letter_grade +=\
    \ \"B-\";\n            }\n            else if grade <= 1.7{\n                letter_grade\
    \ += \"C-\";\n            }\n            else if grade <= 1.0{\n             \
    \   letter_grade += \"D-\";\n            }\n            else if grade <= 0.7{\n\
    \                letter_grade += \"D\";\n            }\n            else if grade\
    \ <= 0.0{\n                letter_grade += \"D+\";\n            }\n          \
    \  else if grade < 3.0{\n                letter_grade += \"C\";\n            }\n\
    \            else if grade < 2.7 {\n                letter_grade += \"B\";\n \
    \           }\n            else if grade < 3.0 {\n                letter_grade\
    \ += \"A\";\n            }\n            else if grade < 4.0 {\n              \
    \  letter_grade += \"A+\";\n            }\n            else {\n              \
    \  letter_grade += \"E\";\n            }\n        }\n        vec![letter_grade]\n\
    \    }\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpqrdlps0l.rs:109:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| {\n        if x < 0.0\
    \ || x > 1.0 {\n            return String::from(\"E\");\n        }\n        \n\
    \        let mut grade: usize = 0;\n        if x > 3.0 {\n            grade =\
    \ 1;\n        }\n        if x > 2.3 {\n            grade = 2;\n        }\n   \
    \     if x > 1.7 {\n            grade = 3;\n        }\n        if x > 1.3 {\n\
    \            grade = 4;\n        }\n        if x > 1.0 {\n            grade =\
    \ 5;\n        }\n        if x > 0.7 {\n            grade = 6;\n        }\n   \
    \     if x > 0.0 {\n            grade = 7;\n        }\n        \n        String::from(vec![\"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\", \"E\"][grade])\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzuvqulpn.rs:25:16\n   |\n\
    25 |         if x < 0.0 || x > 1.0 {\n   |                ^^^\n   |          \
    \      |\n   |                expected `&f64`, found floating-point number\n \
    \  |                help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzuvqulpn.rs:25:27\n   |\n25 |         if x < 0.0 || x >\
    \ 1.0 {\n   |                           ^^^\n   |                           |\n\
    \   |                           expected `&f64`, found floating-point number\n\
    \   |                           help: consider borrowing here: `&1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzuvqulpn.rs:30:16\n   |\n30 |         if x >\
    \ 3.0 {\n   |                ^^^\n   |                |\n   |                expected\
    \ `&f64`, found floating-point number\n   |                help: consider borrowing\
    \ here: `&3.0`\n   |\nnote: return type inferred to be `&f64` here\n  --> /tmp/tmpzuvqulpn.rs:26:20\n\
    \   |\n26 |             return String::from(\"E\");\n   |                    ^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzuvqulpn.rs:33:16\n   |\n33 |\
    \         if x > 2.3 {\n   |                ^^^\n   |                |\n   | \
    \               expected `&f64`, found floating-point number\n   |           \
    \     help: consider borrowing here: `&2.3`\n   |\nnote: return type inferred\
    \ to be `&f64` here\n  --> /tmp/tmpzuvqulpn.rs:26:20\n   |\n26 |             return\
    \ String::from(\"E\");\n   |                    ^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzuvqulpn.rs:36:16\n   |\n36 |         if x >\
    \ 1.7 {\n   |                ^^^\n   |                |\n   |                expected\
    \ `&f64`, found floating-point number\n   |                help: consider borrowing\
    \ here: `&1.7`\n   |\nnote: return type inferred to be `&f64` here\n  --> /tmp/tmpzuvqulpn.rs:26:20\n\
    \   |\n26 |             return String::from(\"E\");\n   |                    ^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzuvqulpn.rs:39:16\n   |\n39 |\
    \         if x > 1.3 {\n   |                ^^^\n   |                |\n   |  "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![String::from(\"\
    E\")];\n    for i in grades.iter() {\n        let mut letter_grade = String::from(\"\
    E\");\n        let mut temp_grade = String::from(\"E\");\n        if i <= 3 {\n\
    \            temp_grade = String::from(\"A\");\n        } else if i <= 3.3 {\n\
    \            temp_grade = String::from(\"A-\");\n        } else if i <= 3.7 {\n\
    \            temp_grade = String::from(\"B+\");\n        } else if i <= 4.0 {\n\
    \            temp_grade = String::from(\"B\");\n        } else if i <= 4.3 {\n\
    \            temp_grade = String::from(\"B-\");\n        } else if i <= 4.7 {\n\
    \            temp_grade = String::from(\"C+\");\n        } else if i <= 5.0 {\n\
    \            temp_grade = String::from(\"C\");\n        } else if i <= 5.3 {\n\
    \            temp_grade = String::from(\"C-\");\n        } else if i <= 5.7 {\n\
    \            temp_grade = String::from(\"D+\");\n        } else if i <= 6.0 {\n\
    \            temp_grade = String::from(\"D\");\n        } else if i <= 6.3 {\n\
    \            temp_grade = String::from(\"D-\");\n        } else {\n          \
    \  temp_grade = String::from(\"F\");\n        }\n        letter_grades.push(temp_grade);\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:28:17\n   |\n\
    28 |         if i <= 3 {\n   |                 ^ expected `&f64`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:30:24\n   |\n30 |\
    \         } else if i <= 3.3 {\n   |                        ^^^\n   |        \
    \                |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&3.3`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:32:24\n   |\n32 |  \
    \       } else if i <= 3.7 {\n   |                        ^^^\n   |          \
    \              |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&3.7`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:34:24\n   |\n34 |  \
    \       } else if i <= 4.0 {\n   |                        ^^^\n   |          \
    \              |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&4.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:36:24\n   |\n36 |  \
    \       } else if i <= 4.3 {\n   |                        ^^^\n   |          \
    \              |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&4.3`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:38:24\n   |\n38 |  \
    \       } else if i <= 4.7 {\n   |                        ^^^\n   |          \
    \              |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&4.7`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:40:24\n   |\n40 |  \
    \       } else if i <= 5.0 {\n   |                        ^^^\n   |          \
    \              |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&5.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphtbcunk_.rs:42:24\n   |\n42 |  \
    \  "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n\
    \        .filter_map(|(i, grade)| if grade < 1.0 || grade > 0.7 { return None\
    \ })\n        .map(|(i, grade)| if grade < 1.0 { String::from(\"D-\") } else {\
    \ String::from(\"D\") })\n        .collect::<Vec<String>>()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0wdoo49p.rs:27:45\n   |\n\
    27 |         .filter_map(|(i, grade)| if grade < 1.0 || grade > 0.7 { return None\
    \ })\n   |                                             ^^^\n   |             \
    \                                |\n   |                                     \
    \        expected `&f64`, found floating-point number\n   |                  \
    \                           help: consider borrowing here: `&1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0wdoo49p.rs:27:60\n   |\n27 |         .filter_map(|(i,\
    \ grade)| if grade < 1.0 || grade > 0.7 { return None })\n   |               \
    \                                             ^^^\n   |                      \
    \                                      |\n   |                               \
    \                             expected `&f64`, found floating-point number\n \
    \  |                                                            help: consider\
    \ borrowing here: `&0.7`\n\nerror[E0317]: `if` may be missing an `else` clause\n\
    \  --> /tmp/tmp0wdoo49p.rs:27:34\n   |\n27 |         .filter_map(|(i, grade)|\
    \ if grade < 1.0 || grade > 0.7 { return None })\n   |                       \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------^^\n   |              \
    \                    |                               |\n   |                 \
    \                 |                               found here\n   |           \
    \                       expected `()`, found enum `Option`\n   |\n   = note: expected\
    \ unit type `()`\n                   found enum `Option<_>`\n   = note: `if` expressions\
    \ without `else` evaluate to `()`\n   = help: consider adding an `else` block\
    \ that evaluates to the expected type\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0317.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut highest_gpa = grades.iter().max();\n    grades_vec.push(String::from(\"\
    E\"));\n\n    for grade in grades {\n        if grade > highest_gpa {\n      \
    \      highest_gpa = grade;\n        }\n        grades_vec.push(match grade {\n\
    \            0.0 < _ => \"D\",\n            0.7 <= _ => \"D\",\n            1.3\
    \ <= _ => \"C\",\n            1.7 <= _ => \"C\",\n            2.3 <= _ => \"B\"\
    ,\n            2.7 <= _ => \"B\",\n            3.3 <= _ => \"B\",\n          \
    \  3.7 <= _ => \"B\",\n            4.0 <= _ => \"A+\",\n            4.7 <= _ =>\
    \ \"A+\",\n            5.3 <= _ => \"A+\",\n            5.7 <= _ => \"A+\",\n\
    \            6.3 <= _ => \"A+\",\n            6.7 <= _ => \"A+\",\n          \
    \  _ => \"A\",\n        });\n    }\n    grades_vec\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `<`\n\
    \  --> /tmp/tmpd19493ex.rs:33:17\n   |\n33 |             0.0 < _ => \"D\",\n \
    \  |                 ^ expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpd19493ex.rs:25:41\n\
    \     |\n25   |     let mut highest_gpa = grades.iter().max();\n     |       \
    \                                  ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd19493ex.rs:29:20\n   |\n29 |\
    \         if grade > highest_gpa {\n   |                    ^^^^^^^^^^^ expected\
    \ `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n         \
    \     found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd19493ex.rs:30:27\n\
    \   |\n25 |     let mut highest_gpa = grades.iter().max();\n   |             \
    \              ------------------- expected due to this value\n...\n30 |     \
    \        highest_gpa = grade;\n   |                           ^^^^^ expected enum\
    \ `Option`, found `f64`\n   |\n   = note: expected enum `Option<&f64>`\n     \
    \         found type `f64`\n\nwarning: unreachable call\n  --> /tmp/tmpd19493ex.rs:32:20\n\
    \   |\n32 |           grades_vec.push(match grade {\n   |  ____________________^^^^_-\n\
    \   | |                    |\n   | |                    unreachable call\n33 |\
    \ |             0.0 < _ => \"D\",\n34 | |             0.7 <= _ => \"D\",\n35 |\
    \ |             1.3 <= _ => \"C\",\n...  |\n47 | |             _ => \"A\",\n48\
    \ | |         });\n   | |_________- any code following this expression is unreachable\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting\
    \ due to 4 previous errors; 1"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for (i, grade) in grades.iter().enumerate() {\n        if grade > 3.0 { \n\
    \            grades_vec.push(String::from(format!(\"{}-\", i + 1))); \n      \
    \  }\n        if grade < 3.0 {\n            grades_vec.push(String::from(format!(\"\
    +{}-\", i + 1)));\n        }\n        if grade > 1.7 { \n            grades_vec.push(String::from(format!(\"\
    {}+\", i + 1))); \n        }\n        if grade < 1.7 { \n            grades_vec.push(String::from(format!(\"\
    -{}+\", i + 1)));\n        }\n        if grade > 2.3 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 2.3 { \n            grades_vec.push(String::from(format!(\"\
    +{}\", i + 1))); \n        }\n        if grade > 2.7 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 2.7 { \n            grades_vec.push(String::from(format!(\"\
    -{}\", i + 1))); \n        }\n        if grade > 3.0 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 3.0 { \n            grades_vec.push(String::from(format!(\"\
    -{}\", i + 1))); \n        }\n        if grade > 3.7 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 3.7 { \n            grades_vec.push(String::from(format!(\"\
    +{}\", i + 1))); \n        }\n        if grade > 4.0 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 4.0 { \n            grades_vec.push(String::from(format!(\"\
    -{}\", i + 1))); \n        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp094_r7d7.rs:26:20\n   |\n\
    26 |         if grade > 3.0 { \n   |                    ^^^\n   |            \
    \        |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp094_r7d7.rs:29:20\n   |\n29 |         if grade\
    \ < 3.0 {\n   |                    ^^^\n   |                    |\n   |      \
    \              expected `&f64`, found floating-point number\n   |            \
    \        help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp094_r7d7.rs:32:20\n   |\n32 |         if grade > 1.7 { \n   | \
    \                   ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found floating-point number\n   |                    help: consider\
    \ borrowing here: `&1.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp094_r7d7.rs:35:20\n\
    \   |\n35 |         if grade < 1.7 { \n   |                    ^^^\n   |     \
    \               |\n   |                    expected `&f64`, found floating-point\
    \ number\n   |                    help: consider borrowing here: `&1.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp094_r7d7.rs:38:20\n   |\n38 |         if grade\
    \ > 2.3 { \n   |                    ^^^\n   |                    |\n   |     \
    \               expected `&f64`, found floating-point number\n   |           \
    \         help: consider borrowing here: `&2.3`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp094_r7d7.rs:41:20\n   |\n41 |         if grade < 2.3 { \n   | \
    \                   ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found floating-point number\n   |                    help: consider\
    \ borrowing here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp094_r7d7.rs:44:20\n\
    \   |\n44 |         if grade > 2.7 { \n   |                    ^^^\n   |     \
    \               |\n   |                    expected `&f64`, found floating-point\
    \ number\n   |                    help: consider borrowing here: `&2.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp094_r7d7."
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 4.6 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 5.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 6.6 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 7.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 7.6 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 8.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"D-\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"A+\", \"A+\", \"A+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp44g6rw_a.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        match g {\n\
    \            0.0 => \"D-\",\n            0.7 => \"D\",\n            1.0 => \"\
    C-\",\n            1.7 => \"C\",\n            2.0 => \"B-\",\n            2.7\
    \ => \"B\",\n            3.0 => \"B-\",\n            3.3 => \"B\",\n         \
    \   3.7 => \"B+\",\n            4.0 => \"A+\",\n            4.3 => \"A\",\n  \
    \          4.7 => \"A+\",\n            _ => panic!(\"Wrong grade: {}\", g),\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp8d3dxw1d.rs:40:8\n     |\n40 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters: Vec<String> = vec![\"A\", \"\
    B\", \"C\", \"D\", \"E\"];\n    let mut sum: f64 = grades.iter().sum();\n    if\
    \ sum > 0 {\n        letters.insert(grades.iter().skip(1).all(|&x| x >= 4.0).collect::<String>(),\
    \ sum as char);\n    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl812_gl7.rs:24:41\n   |\n\
    24 |     let mut letters: Vec<String> = vec![\"A\", \"B\", \"C\", \"D\", \"E\"\
    ];\n   |                                         ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                         |\n   |\
    \                                         expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl812_gl7.rs:26:14\n   |\n26 |\
    \     if sum > 0 {\n   |              ^\n   |              |\n   |           \
    \   expected `f64`, found integer\n   |              help: use a float literal:\
    \ `0.0`\n\nerror[E0599]: `bool` is not an iterator\n  --> /tmp/tmpl812_gl7.rs:27:65\n\
    \   |\n27 |         letters.insert(grades.iter().skip(1).all(|&x| x >= 4.0).collect::<String>(),\
    \ sum as char);\n   |                                                        \
    \         ^^^^^^^ `bool` is not an iterator\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `bool: Iterator`\n           which is\
    \ required by `&mut bool: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl812_gl7.rs:27:86\n\
    \   |\n27 |         letters.insert(grades.iter().skip(1).all(|&x| x >= 4.0).collect::<String>(),\
    \ sum as char);\n   |                                                        \
    \                              ^^^^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\nhelp: try using a conversion method\n   |\n27 |         letters.insert(grades.iter().skip(1).all(|&x|\
    \ x >= 4.0).collect::<String>(), (sum as char).to_string());\n   |           \
    \                                                                           +\
    \           +++++++++++++\n\nerror[E0604]: only `u8` can be cast as `char`, not\
    \ `f64`\n  --> /tmp/tmpl812_gl7.rs:27:86\n   |\n27 |         letters.insert(grades.iter().skip(1).all(|&x|\
    \ x >= 4.0).collect::<String>(), sum as char);\n   |                         \
    \                                                             ^^^^^^^^^^^ invalid\
    \ cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmpl812_gl7.rs:27:86\n\
    \   |\n27 |         lett"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grade = vec![];\n    let total_gpa\
    \ = grades.iter().sum();\n    let mut total_percentage = total_gpa as f32;\n \
    \   \n    for gpa in grades {\n        \n        // For each grade \n        //\
    \ multiply gpa by 100\n        // and take integer part of the result\n      \
    \  // add 1 to it\n        // divide it by total number of grades\n        //\
    \ and multiply it by 100\n        // divide it by 100\n        // round it down\
    \ to an int\n        // then append it to the grade\n        total_percentage\
    \ = total_percentage * (100 / grades.len()) as f32;\n        \n        if total_percentage\
    \ < 3 {\n            letter_grade.push(String::from(\"E\"));\n            break;\n\
    \        }\n        \n        letter_grade.push(String::from(\n            format!(\"\
    {}+\", \n                (gpa * 100 + 1).round() / total_percentage\n        \
    \    )\n        ));\n        \n        if total_percentage < 5 {\n           \
    \ letter_grade.push(String::from(\"D-\"));\n            break;\n        }\n  \
    \      \n        letter_grade.push(String::from(\n            format!(\"{}\",\
    \ \n                (gpa * 100 + 1).round() / total_percentage\n            )\n\
    \        ));\n        \n        if total_percentage < 6 {\n            letter_grade.push(String::from(\"\
    D+\"));\n            break;\n        }\n        \n        letter_grade.push(String::from(\n\
    \            format!(\"{}\", \n                (gpa * 100 + 1).round() / total_percentage\n\
    \            )\n        ));\n        \n        if total_percentage < 8 {\n   \
    \         letter_grade.push(String::from(\"C-\"));\n            break;\n     \
    \   }\n        \n        letter_grade.push(String::from(\n            format!(\"\
    {}\", \n                (gpa * 100 + 1).round() / total_percentage\n         \
    \   )\n        ));\n        \n        if total_percentage < 10 {\n           \
    \ letter_grade.push(String::from(\"C\"));\n            break;\n        }\n   \
    \     \n        if total_percentage < 12 {\n            letter_grade.push(String::from(\"\
    B-\"));\n            break;\n        }\n        \n        letter_grade.push(String::from(\n\
    \            format!(\"{}\", \n                (gpa * 100 + 1).round() / total_percentage\n\
    \            )\n        ));\n        \n        if total_percentage < 14 {\n  \
    \          letter_grade.push(String::from(\"B\"));\n            break;\n     \
    \   }\n        \n        if total_percentage < 16 {\n            letter_grade.push(String::from(\"\
    A-\"));\n            break;\n        }\n        \n        letter_grade.push(String::from(\n\
    \            \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmph_nx9qg2.rs:123:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n28  |     for gpa in grades {\n    |                       - this delimiter\
    \ might not be properly closed...\n...\n113 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n123 | }\n    |   ^\n\nerror: mismatched\
    \ closing delimiter: `}`\n   --> /tmp/tmph_nx9qg2.rs:111:39\n    |\n23  | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    |                                          \
    \                  - closing delimiter possibly meant for this\n...\n111 |   \
    \      letter_grade.push(String::from(\n    |                                \
    \       ^ unclosed delimiter\n112 |             \n113 | }\n    | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph_nx9qg2.rs:41:31\n\
    \   |\n41 |         if total_percentage < 3 {\n   |                          \
    \     ^\n   |                               |\n   |                          \
    \     expected `f32`, found integer\n   |                               help:\
    \ use a float literal: `3.0`\n\nerror[E0277]: cannot multiply `f64` by `{integer}`\n\
    \  --> /tmp/tmph_nx9qg2.rs:48:22\n   |\n48 |                 (gpa * 100 + 1).round()\
    \ / total_percentage\n   |                      ^ no implementation for `f64 *\
    \ {integer}`\n   |\n   = help: the trait `Mul<{integer}>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Mul<Rhs>`:\n  \
    \           <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n      \
    \       <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n        \
    \     <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n            \
    \ <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n48 |                 (gpa * 100.0 + 1).round() / total_percentage\n\
    \   |                           ++\n\nerror"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades = grades.clone();\n    grades.sort();\n\
    \    let mut grades_iter = grades.into_iter().enumerate();\n    let mut grades_count\
    \ = grades.len() as u8;\n    let mut letter_grades = Vec::new();\n    for grade\
    \ in grades_iter {\n        if grade > grades[grades_count - 1] {\n          \
    \  grades_count -= 1;\n            grades_iter.next();\n        }\n        let\
    \ grade_str = String::from(\"D-\");\n        if grade < grades[grades_count -\
    \ 1] {\n            grades_count -= 1;\n            grades_iter.next();\n    \
    \        let grade_str = String::from(\"D+\");\n        }\n        letter_grades.push(grade_str);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpqcf7jtfz.rs:25:12\n\
    \    |\n25  |     grades.sort();\n    |            ^^^^ the trait `Ord` is not\
    \ implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0277]: the type `[f64]` cannot be indexed by `u8`\n  -->\
    \ /tmp/tmpqcf7jtfz.rs:30:20\n   |\n30 |         if grade > grades[grades_count\
    \ - 1] {\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[f64]>`\
    \ is not implemented for `u8`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<u8>` for `Vec<f64>`\n\nerror[E0277]: the type `[f64]` cannot be indexed\
    \ by `u8`\n  --> /tmp/tmpqcf7jtfz.rs:35:20\n   |\n35 |         if grade < grades[grades_count\
    \ - 1] {\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[f64]>`\
    \ is not implemented for `u8`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<u8>` for `Vec<f64>`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        let letter_grade = match grade {\n            4.0\
    \         => \"A+\",\n            _ > 3.7   => \"A\",\n            _ > 3.3   =>\
    \ \"A-\",\n            _ > 3.0   => \"B+\",\n            _ > 2.7   => \"B\",\n\
    \            _ > 2.3   => \"B-\",\n            _ > 2.0   => \"C+\",\n        \
    \    _ > 1.7   => \"C\",\n            _ > 1.3   => \"C-\",\n            _ > 1.0\
    \   => \"D+\",\n            _ > 0.7   => \"D\",\n            _ > 0.0   => \"D-\"\
    ,\n            _ => return vec![\"E\"].iter().cloned().collect(),\n        };\n\
    \        letter_grades.push(letter_grade);\n    }\n    letter_grades\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `=>`, `if`, or `|`, found `>`\n  --> /tmp/tmp7_b2ig1l.rs:28:15\n\
    \   |\n28 |             _ > 3.7   => \"A\",\n   |               ^ expected one\
    \ of `=>`, `if`, or `|`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7_b2ig1l.rs:43:5\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected `Vec<String>`\
    \ because of return type\n...\n43 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_str = String::new();\n\n    let\
    \ mut total_gpa = grades.sum();\n    for i in 0..grades.len() {\n        let gpa\
    \ = grades[i];\n        let letter = if total_gpa <= 3.0 {\n            String::from(\"\
    A+\")\n        } else if total_gpa <= 4.0 {\n            String::from(\"A\")\n\
    \        } else if total_gpa <= 5.0 {\n            String::from(\"A-\")\n    \
    \    } else if total_gpa <= 6.0 {\n            String::from(\"B+\")\n        }\
    \ else if total_gpa <= 7.0 {\n            String::from(\"B\")\n        } else\
    \ if total_gpa <= 8.0 {\n            String::from(\"B-\")\n        } else if total_gpa\
    \ <= 9.0 {\n            String::from(\"C+\")\n        } else if total_gpa <= 10.0\
    \ {\n            String::from(\"C\")\n        } else if total_gpa <= 11.0 {\n\
    \            String::from(\"C-\")\n        } else if total_gpa <= 12.0 {\n   \
    \         String::from(\"D+\")\n        } else if total_gpa <= 13.0 {\n      \
    \      String::from(\"D\")\n        } else if total_gpa <= 14.0 {\n          \
    \  String::from(\"D-\")\n        } else if total_gpa <= 15.0 {\n            String::from(\"\
    E\")\n        } else { String::from(\"E\"); }\n\n        grades_str.push_str(&letter);\n\
    \        total_gpa -= gpa;\n    }\n    grades_str.push_str(\"E\");\n    grades_str.split_whitespace().collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `grades_str`\n  --> /tmp/tmpkmv3azm8.rs:55:38\n\
    \   |\n55 |         } else { String::from(\"E\"); }\n   |                    \
    \                  ^ help: add `;` here\n56 | \n57 |         grades_str.push_str(&letter);\n\
    \   |         ---------- unexpected token\n\nerror[E0599]: `Vec<f64>` is not an\
    \ iterator\n   --> /tmp/tmpkmv3azm8.rs:26:32\n    |\n26  |       let mut total_gpa\
    \ = grades.sum();\n    |                                  ^^^ `Vec<f64>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut\
    \ [f64]: Iterator`\n\nerror[E0308]: `if` and `else` have incompatible types\n\
    \  --> /tmp/tmpkmv3azm8.rs:55:18\n   |\n53 |           } else if total_gpa <=\
    \ 15.0 {\n   |  ________________-\n54 | |             String::from(\"E\")\n  \
    \ | |             ----------------- expected because of this\n55 | |         }\
    \ else { String::from(\"E\"); }\n   | |__________________^^^^^^^^^^^^^^^^^-_-\
    \ `if` and `else` have incompatible types\n   |                    |         \
    \       |\n   |                    |                help: consider removing this\
    \ semicolon\n   |                    expected struct `String`, found `()`\n\n\
    error[E0277]: a value of type `Vec<String>` cannot be built from an iterator over\
    \ elements of type `&str`\n    --> /tmp/tmpkmv3azm8.rs:61:35\n     |\n61   | \
    \    grades_str.split_whitespace().collect::<Vec<String>>()\n     |          \
    \                         ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![\"\
    E\".to_string()];\n    }\n    let mut grades_slice = grades.to_vec();\n    let\
    \ grades_len = grades_slice.len();\n    let mut prev_grade: f64 = 0;\n    let\
    \ mut next_grade: f64 = 0;\n    let mut grades: Vec<String> = vec![\"E\".to_string()];\n\
    \    let mut index = grades_slice.len() - 1;\n    grades.insert(0, grades_slice[index].to_string());\n\
    \    while index >= 0 {\n        if grades_slice[index] == 0.0 {\n           \
    \ index -= 1;\n            continue;\n        }\n        if grades_slice[index]\
    \ > prev_grade {\n            next_grade = prev_grade;\n        } else {\n   \
    \         next_grade = grades_slice[index];\n        }\n        grades.insert(0,\
    \ next_grade.to_string());\n        prev_grade = next_grade;\n        index -=\
    \ 1;\n    }\n    grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7kairbkw.rs:29:31\n   |\n\
    29 |     let mut prev_grade: f64 = 0;\n   |                         ---   ^\n\
    \   |                         |     |\n   |                         |     expected\
    \ `f64`, found integer\n   |                         |     help: use a float literal:\
    \ `0.0`\n   |                         expected due to this\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7kairbkw.rs:30:31\n   |\n30 |     let mut next_grade: f64\
    \ = 0;\n   |                         ---   ^\n   |                         | \
    \    |\n   |                         |     expected `f64`, found integer\n   |\
    \                         |     help: use a float literal: `0.0`\n   |       \
    \                  expected due to this\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_clone = grades;\n    grades_clone.pop();\n\
    \    let mut letter_grades = vec![\"D-\"];\n    let mut min_grade: f64 = grades.first().unwrap();\n\
    \    let mut grades_idx = 0;\n\n    // Loop through the vector and find the lowest\
    \ grade and \n    // put it in the letter_grades vector\n    for grade in grades_clone\
    \ {\n        if grade < min_grade {\n            min_grade = grade;\n        \
    \    grades_idx = grades_clone.iter().position(|x| x == grade).unwrap();\n   \
    \     }\n    }\n\n    // loop through all the grades in the vector to see which\
    \ grade is \n    // the lowest grade and put it in the letter_grades vector\n\
    \    while grades_idx != grades_clone.len() - 1 {\n        if grades_clone[grades_idx]\
    \ > min_grade {\n            letter_grades.push(format!(\"{}-\", grades_clone[grades_idx]));\n\
    \        } else {\n            letter_grades.push(format!(\"+{}\", grades_clone[grades_idx]));\n\
    \        }\n        grades_idx += 1;\n    }\n\n    // Finally add the letter grade\
    \ for the last student\n    letter_grades.push(format!(\"+{}\", grades_clone[grades_idx]));\n\
    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprgwhj4lo.rs:27:30\n   |\n\
    27 |     let mut min_grade: f64 = grades.first().unwrap();\n   |             \
    \           ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   | \
    \                       |\n   |                        expected due to this\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n27 |     let mut min_grade:\
    \ f64 = *grades.first().unwrap();\n   |                              +\n\nerror[E0277]:\
    \ can't compare `&f64` with `f64`\n  --> /tmp/tmprgwhj4lo.rs:35:61\n   |\n35 |\
    \             grades_idx = grades_clone.iter().position(|x| x == grade).unwrap();\n\
    \   |                                                             ^^ no implementation\
    \ for `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprgwhj4lo.rs:43:32\n\
    \   |\n43 |             letter_grades.push(format!(\"{}-\", grades_clone[grades_idx]));\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprgwhj4lo.rs:45:32\n \
    \  |\n45 |             letter_grades.push(format!(\"+{}\", grades_clone[grades_idx]));\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprgwhj4lo.rs:51:24\n \
    \  |\n51 |     letter_grades.push(format!(\"+{}\", grades_clone[grades_idx]));\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n   |\n   "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let len = grades.len();\n    let mut letter_grades\
    \ = vec![];\n    let mut curr_grade : f64 = 0.0;\n    let mut prev_grade : f64\
    \ = 0.0;\n\n    for grade in grades {\n        let mut grade = grade - prev_grade;\n\
    \        if grade >= 3.0 {\n            grade -= 3.0;\n            curr_grade\
    \ += 4.0;\n        }\n        if grade <= 2.0 {\n            grade -= 2.0;\n \
    \           curr_grade += 3.0;\n        }\n        if grade < 3.0 {\n        \
    \    grade -= 2.0;\n            curr_grade += 2.0;\n        }\n        if grade\
    \ > 3.0 {\n            grade -= 3.0;\n            curr_grade += 1.0;\n       \
    \ }\n        letter_grades.push(String::from(\"B+\") if grade == 2.7 || grade\
    \ == 2.3 || grade == 2.0 || grade == 1.7 || grade == 1.3 || grade == 1.0 || grade\
    \ == 0.7 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9l3bs6us.rs:58:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n29 |     for grade in grades {\n   |                         - this delimiter\
    \ might not be properly closed...\n...\n48 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n58 | }\n   |   ^\n\nerror: mismatched closing\
    \ delimiter: `}`\n  --> /tmp/tmp9l3bs6us.rs:47:27\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n47 |     \
    \    letter_grades.push(String::from(\"B+\") if grade == 2.7 || grade == 2.3 ||\
    \ grade == 2.0 || grade == 1.7 || grade == 1.3 || grade ==...\n   |          \
    \                 ^ unclosed delimiter\n48 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `if`\n\
    \  --> /tmp/tmp9l3bs6us.rs:47:27\n   |\n47 | ...   letter_grades.push(String::from(\"\
    B+\") if grade == 2.7 || grade == 2.3 || grade == 2.0 || grade == 1.7 || grade\
    \ == 1.3 || grade == 1...\n   |                         ^                  -^^\n\
    \   |                         |                  |\n   |                     \
    \    |                  help: `)` may belong here\n   |                      \
    \   unclosed delimiter\n\nerror: aborting due to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades = grades;\n    let mut letter_grades\
    \ = vec![];\n    grades.pop();\n    grades.pop();\n    for grade in grades.iter()\
    \ {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            break;\n        }\n        if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        if grade < 3.7 {\n           \
    \ letter_grades.push(String::from(\"C+\"));\n            break;\n        }\n \
    \       if grade < 4.0 {\n            letter_grades.push(String::from(\"B-\"));\n\
    \            break;\n        }\n        if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if grade < 4.7 {\n           \
    \ letter_grades.push(String::from(\"A-\"));\n            break;\n        }\n \
    \       if grade < 5.0 {\n            letter_grades.push(String::from(\"A+\"));\n\
    \            break;\n        }\n        if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            break;\n        }\n        if grade < 5.7 {\n           \
    \ letter_grades.push(String::from(\"A-\"));\n            break;\n        }\n \
    \       if grade < 6.0 {\n            letter_grades.push(String::from(\"D+\"));\n\
    \            break;\n        }\n        if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n            break;\n        }\n        if grade < 6.7 {\n           \
    \ letter_grades.push(String::from(\"D-\"));\n            break;\n        }\n \
    \   }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphjvfrr1p.rs:29:20\n   |\n\
    29 |         if grade < 3.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphjvfrr1p.rs:33:20\n   |\n33 |         if grade\
    \ < 3.3 {\n   |                    ^^^\n   |                    |\n   |      \
    \              expected `&f64`, found floating-point number\n   |            \
    \        help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphjvfrr1p.rs:37:20\n   |\n37 |         if grade < 3.7 {\n   |  \
    \                  ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found floating-point number\n   |                    help: consider\
    \ borrowing here: `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjvfrr1p.rs:41:20\n\
    \   |\n41 |         if grade < 4.0 {\n   |                    ^^^\n   |      \
    \              |\n   |                    expected `&f64`, found floating-point\
    \ number\n   |                    help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphjvfrr1p.rs:45:20\n   |\n45 |         if grade\
    \ < 4.3 {\n   |                    ^^^\n   |                    |\n   |      \
    \              expected `&f64`, found floating-point number\n   |            \
    \        help: consider borrowing here: `&4.3`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphjvfrr1p.rs:49:20\n   |\n49 |         if grade < 4.7 {\n   |  \
    \                  ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found floating-point number\n   |                    help: consider\
    \ borrowing here: `&4.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjvfrr1p.rs:53:20\n\
    \   |\n53 |         if grade < 5.0 {\n   |                    ^^^\n   |      \
    \              |\n   |                    expected `&f64`, found floating-point\
    \ number\n   |                    help: consider borrowing here: `&5.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphjvfrr1p.rs:57:"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    for (i, grade) in grades.iter().enumerate() {\n        letter_grades.push((grades[i]\
    \ + 5.0).to_string());\n        if i != grades.len() - 1 {\n            letter_grades.push(String::from(\"\
    +\"));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"9\", \"+\", \"8\", \"+\", \"6.7\", \"+\", \"7\", \"+\", \"8.5\"]`,\n right:\
    \ `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpsgtsg7d7.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    match grades.len() {\n        1 => vec![\"A\"\
    ],\n        2 => vec![\"A+\"],\n        3 => vec![\"A-\"],\n        4 => vec![\"\
    B+\"],\n        5 => vec![\"B\"],\n        6 => vec![\"B-\"],\n        7 => vec![\"\
    C+\"],\n        8 => vec![\"C\"],\n        9 => vec![\"C-\"],\n        10 => vec![\"\
    D+\"],\n        11 => vec![\"D\"],\n        12 => vec![\"D-\"],\n        13 =>\
    \ vec![\"E\"],\n        _ => vec![\"NA\"],\n    }\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0i_5gbu9.rs:25:19\n   |\n\
    25 |         1 => vec![\"A\"],\n   |                   ^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                   |\n   |          \
    \         expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0i_5gbu9.rs:26:19\n   |\n26 |         2 => vec![\"A+\"],\n   |\
    \                   ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                   |\n   |                   expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0i_5gbu9.rs:27:19\n\
    \   |\n27 |         3 => vec![\"A-\"],\n   |                   ^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                   |\n   |  \
    \                 expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0i_5gbu9.rs:28:19\n   |\n28 |         4 => vec![\"B+\"\
    ],\n   |                   ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                   |\n   |                   expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0i_5gbu9.rs:29:19\n\
    \   |\n29 |         5 => vec![\"B\"],\n   |                   ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                   |\n   |        \
    \           expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0i_5gbu9.rs:30:19\n   |\n30 |         6 => vec![\"B-\"\
    ],\n   |                   ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                   |\n   |                   expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0i_5gbu9.rs:31:19\n\
    \   |\n31 |         7 => vec![\"C+\"],\n   |                   ^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                   |\n   |  \
    \                 expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0i_5gbu9.rs:32:19\n   |\n32 |         8 => vec![\"C\"],\n\
    \   |                   ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |  "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grade = vec![];\n    for i in 0..grades.len() {\n        if grades[i]\
    \ > 0.0 {\n            let grade: f64 = grades_copy[i as usize];\n           \
    \ \n            if grade > 3.0 {\n                letter_grade.push(\"B+\");\n\
    \            } else if grade > 2.7 {\n                letter_grade.push(\"B\"\
    );\n            } else if grade > 2.3 {\n                letter_grade.push(\"\
    B-\");\n            } else if grade > 2.0 {\n                letter_grade.push(\"\
    C+\");\n            } else if grade > 1.7 {\n                letter_grade.push(\"\
    C\");\n            } else if grade > 1.3 {\n                letter_grade.push(\"\
    C-\");\n            } else if grade > 1.0 {\n                letter_grade.push(\"\
    D+\");\n            } else if grade > 0.7 {\n                letter_grade.push(\"\
    D\");\n            } else if grade > 0.0 {\n                letter_grade.push(\"\
    D-\");\n            } else {\n                letter_grade.push(\"E\");\n    \
    \        }\n        }\n    }\n    letter_grade\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjyxubwy9.rs:53:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n53 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Your code here\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkldp1_4.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // Write your code here\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeg94hjx8.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    let mut current_grade = grades.first();\n    for grade in grades.iter() {\n\
    \        if grade > current_grade {\n            letter_grades.push(String::from(numerical_letter_grade(vec![current_grade])))\n\
    \        }\n        if grade < current_grade {\n            letter_grades.push(String::from(\"\
    E\"))\n        } else {\n            if grade == 0.0 {\n                letter_grades.push(String::from(\"\
    E\"))\n            } else {\n                let letter_grade = match grade {\n\
    \                    1.0 => \"A+\",\n                    2.0 => \"A\",\n     \
    \               3.0 => \"A-\",\n                    4.0 => \"B+\",\n         \
    \           5.0 => \"B\",\n                    6.0 => \"B-\",\n              \
    \      7.0 => \"C+\",\n                    8.0 => \"C\",\n                   \
    \ 9.0 => \"C-\",\n                    10.0 => \"D+\",\n                    11.0\
    \ => \"D\",\n                    12.0 => \"D-\",\n                    13.0 =>\
    \ \"E\",\n                    14.0 => \"F\",\n                    15.0 => \"F\"\
    ,\n                    16.0 => \"F\",\n                    17.0 => \"F\",\n  \
    \                  18.0 => \"F\",\n                    19.0 => \"F\",\n      \
    \              20.0 => \"F\",\n                    20.0 => \"F\",\n          \
    \          20.0 => \"F\",\n                    20.0 => \"F\",\n              \
    \      20.0 => \"F\",\n                    20.0 => \"F\",\n                  \
    \  20.0 => \"F\",\n                    20.0 => \"F\",\n                    20.0\
    \ => \"F\",\n                    20.0 => \"F\",\n                    20.0 => \"\
    F\",\n                    20.0 => \"F\",\n                    20.0 => \"F\",\n\
    \                    20.0 => \"F\",\n                    20.0 => \"F\",\n    \
    \                20.0 => \"F\",\n                    20.0 => \"F\",\n        \
    \            20.0 => \"F\",\n                    20.0 => \"F\",\n            \
    \        20.0 => \"F\",\n                    20.0 => \"F\",\n                \
    \    20.0 => \"F\",\n                    20.0 => \"F\",\n                    20.0\
    \ => \"F\",\n                    20.0 => \"F\",\n                    20.0 => \"\
    F\",\n                    20.0 => \"F\",\n                    20.0 => \"F\",\n\
    \                    20.0 => \"F\",\n                    20.0 => \"F\",\n    \
    \                20.0 => \"F\",\n                    20.0 => \"F\",\n        \
    \            20.0 => \"F\",\n                    20.0 => \"F\",\n            \
    \        20.0 => \"F\",\n                    20.0 => \"F\",\n                \
    \    20.0 => \"F\",\n                    20.\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpc8bu0j73.rs:104:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n26  |     for grade in grades.iter() {\n    |                           \
    \     - unclosed delimiter\n...\n32  |         } else {\n    |               \
    \ - unclosed delimiter\n...\n35  |             } else {\n    |               \
    \     - unclosed delimiter\n36  |                 let letter_grade = match grade\
    \ {\n    |                                                - this delimiter might\
    \ not be properly closed...\n...\n94  | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n104 | }\n    |   ^\n\nerror: expected one of\
    \ `...`, `..=`, `..`, `=>`, `if`, or `|`, found `}`\n  --> /tmp/tmpc8bu0j73.rs:94:1\n\
    \   |\n93 |                     20.\n   |                        - expected one\
    \ of `...`, `..=`, `..`, `=>`, `if`, or `|`\n94 | }\n   | ^ unexpected token\n\
    \nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found keyword\
    \ `fn`\n  --> /tmp/tmpc8bu0j73.rs:96:1\n   |\n94 | }\n   |  - expected one of\
    \ `.`, `;`, `?`, `else`, or an operator\n95 | \n96 | fn main() {\n   | ^^ unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc8bu0j73.rs:27:20\n \
    \  |\n27 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `&f64`, found enum `Option`\n   |\n   = note: expected reference `&f64`\n\
    \                   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc8bu0j73.rs:28:73\n   |\n28 |             letter_grades.push(String::from(numerical_letter_grade(vec![current_grade])))\n\
    \   |                                                                        \
    \ ^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<&f64>`\n\nerror[E0277]: the trait\
    \ bound `String: From<Vec<String>>` is not satisfied\n  --> /tmp/tmpc8bu0j73.rs:28:45\n\
    \   |\n28 |             letter_grades.push(String::from(numerical_letter_"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_len = grades.len();\n    let\
    \ mut letter_grades: Vec<String> = vec![];\n    while grades_len > 0 {\n     \
    \   let grade = grades.pop().unwrap();\n        let letter = match grade {\n \
    \           4.0 => \"A+\",\n            > 3.7 => \"A\",\n            > 3.3 =>\
    \ \"A-\",\n            > 3.0 => \"B+\",\n            > 2.7 => \"B\",\n       \
    \     > 2.3 => \"B-\",\n            > 2.0 => \"C+\",\n            > 1.7 => \"\
    C\",\n            > 1.3 => \"C-\",\n            > 1.0 => \"D+\",\n           \
    \ > 0.7 => \"D\",\n            > 0.0 => \"D-\",\n            0.0 => \"E\",\n \
    \       };\n        letter_grades.push(letter);\n    }\n    letter_grades\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpmy_5p2j2.rs:30:13\n \
    \  |\n30 |             > 3.7 => \"A\",\n   |             ^ expected pattern\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmy_5p2j2.rs:43:28\n   |\n43 |  \
    \       letter_grades.push(letter);\n   |                            ^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    for grade in grades.iter() {\n        let mut grade_letter = String::from(\"\
    \");\n        if grade >= 3.0 {\n            grade_letter = format!(\"{}+\", grade\
    \ - 3.0);\n        } else if grade < 3.0 {\n            grade_letter = format!(\"\
    {}\", grade);\n        } else {\n            grade_letter = format!(\"{}\", grade);\n\
    \        }\n        letter_grades.push(grade_letter);\n    }\n    return letter_grades;\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5a1__lt5.rs:27:21\n   |\n\
    27 |         if grade >= 3.0 {\n   |                     ^^^\n   |           \
    \          |\n   |                     expected `&f64`, found floating-point number\n\
    \   |                     help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5a1__lt5.rs:29:27\n   |\n29 |         } else\
    \ if grade < 3.0 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&3.0`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec_len: Vec<f64> = vec![];\n    for grade in grades {\n \
    \       grades_vec_len.push(grade);\n    }\n\n    while grades_vec_len.len() >\
    \ 1 {\n        let grade = grades_vec_len.iter().max().unwrap();\n        let\
    \ mut last_index = 0;\n\n        for index in grades_vec_len.iter().skip(1) {\n\
    \            if grades_vec_len[index] > grade {\n                last_index =\
    \ index;\n            }\n        }\n\n        grades_vec_len = grades_vec_len.iter().take(last_index\
    \ + 1).collect();\n        grades_vec.push(grade);\n    }\n    grades_vec.push(grades_vec_len[0]);\n\
    \n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp_oj52uhd.rs:31:43\n\
    \     |\n31   |         let grade = grades_vec_len.iter().max().unwrap();\n  \
    \   |                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the type `[f64]` cannot be indexed by `&f64`\n  --> /tmp/tmp_oj52uhd.rs:35:16\n\
    \   |\n35 |             if grades_vec_len[index] > grade {\n   |             \
    \   ^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[f64]>` is not implemented for `&f64`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&f64>` for `Vec<f64>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_oj52uhd.rs:36:30\n   |\n32 |\
    \         let mut last_index = 0;\n   |                              - expected\
    \ due to this value\n...\n36 |                 last_index = index;\n   |     \
    \                         ^^^^^ expected integer, found `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_oj52uhd.rs:41:25\n   |\n41 |         grades_vec.push(grade);\n\
    \   |                         ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                         |\n   |                         expected struct\
    \ `String`, found `&f64`\n\nerror[E0277]: a value of type `Vec<f64>` cannot be\
    \ built from an iterator over elements of type `&f64`\n    --> /tmp/tmp_oj52uhd.rs:40:69\n\
    \     |\n40   |         grades_vec_len = grades_vec_len.iter().take(last_index\
    \ + 1).collect();\n     |                                                    \
    \                 ^^^^^^^ value of type `Vec<f64>` c"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().enumerate().map(|(index, grade)|\
    \ {\n        match grade {\n            4 => \"A+\",\n            0..3 => \"A\"\
    ,\n            3.7 => \"A- \",\n            3.3 => \"B+\",\n            2.7 =>\
    \ \"B\",\n            2.3 => \"B-\",\n            2.0 => \"C+\",\n           \
    \ 1.7 => \"C\",\n            1.3 => \"C-\",\n            1.0 => \"D+\",\n    \
    \        0.7 => \"D\",\n            _ => \"D-\",\n            0 => \"E\"\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpczp85927.rs:27:13\n\
    \   |\n27 |             0..3 => \"A\",\n   |             ^^^^\n   |\n   = note:\
    \ see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpczp85927.rs:26:13\n   |\n25 |\
    \         match grade {\n   |               ----- this expression has type `&f64`\n\
    26 |             4 => \"A+\",\n   |             ^\n   |             |\n   |  \
    \           expected `f64`, found integer\n   |             help: use a float\
    \ literal: `4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpczp85927.rs:27:13\n\
    \   |\n25 |         match grade {\n   |               ----- this expression has\
    \ type `&f64`\n26 |             4 => \"A+\",\n27 |             0..3 => \"A\",\n\
    \   |             ^  - this is of type `{integer}`\n   |             |\n   | \
    \            expected `f64`, found integer\n   |             help: use a float\
    \ literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpczp85927.rs:27:16\n\
    \   |\n25 |         match grade {\n   |               ----- this expression has\
    \ type `&f64`\n26 |             4 => \"A+\",\n27 |             0..3 => \"A\",\n\
    \   |             -  ^\n   |             |  |\n   |             |  expected `f64`,\
    \ found integer\n   |             |  help: use a float literal: `3.0`\n   |  \
    \           this is of type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpczp85927.rs:38:13\n   |\n25 |         match grade {\n   |          \
    \     ----- this expression has type `&f64`\n...\n38 |             0 => \"E\"\n\
    \   |             ^\n   |             |\n   |             expected `f64`, found\
    \ integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n    --> /tmp/tmpczp85927.rs:40:8\n     |\n40   |     }).collect()\n\
    \     |        ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the t"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec = vec![String::new(), String::new(),\
    \ String::new(), String::new(), String::new(), String::new(), String::new()];\n\
    \    grades_vec[0] = String::from(\"A+\");\n    for grade in grades.iter() {\n\
    \        if grade >= 3.0 {\n            grades_vec[1] = String::from(\"A\");\n\
    \        } else if grade > 2.0 && grade <= 3.0 {\n            grades_vec[1] =\
    \ String::from(\"A-\");\n        } else if grade > 1.7 && grade <= 2.0 {\n   \
    \         grades_vec[1] = String::from(\"B\");\n        } else if grade > 1.3\
    \ && grade <= 1.7 {\n            grades_vec[1] = String::from(\"B-\");\n     \
    \   } else if grade > 1.0 && grade <= 1.3 {\n            grades_vec[1] = String::from(\"\
    C\");\n        } else if grade > 0.7 && grade <= 1.0 {\n            grades_vec[1]\
    \ = String::from(\"C-\");\n        } else if grade > 0.3 && grade <= 0.7 {\n \
    \           grades_vec[1] = String::from(\"D\");\n        } else if grade > 0.0\
    \ && grade <= 0.3 {\n            grades_vec[1] = String::from(\"D+\");\n     \
    \   } else {\n            grades_vec[1] = String::from(\"E\");\n        }\n  \
    \  }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3eufui07.rs:27:21\n   |\n\
    27 |         if grade >= 3.0 {\n   |                     ^^^\n   |           \
    \          |\n   |                     expected `&f64`, found floating-point number\n\
    \   |                     help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3eufui07.rs:29:27\n   |\n29 |         } else\
    \ if grade > 2.0 && grade <= 3.0 {\n   |                           ^^^\n   | \
    \                          |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3eufui07.rs:29:43\n\
    \   |\n29 |         } else if grade > 2.0 && grade <= 3.0 {\n   |            \
    \                               ^^^\n   |                                    \
    \       |\n   |                                           expected `&f64`, found\
    \ floating-point number\n   |                                           help:\
    \ consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3eufui07.rs:31:27\n\
    \   |\n31 |         } else if grade > 1.7 && grade <= 2.0 {\n   |            \
    \               ^^^\n   |                           |\n   |                  \
    \         expected `&f64`, found floating-point number\n   |                 \
    \          help: consider borrowing here: `&1.7`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3eufui07.rs:31:43\n   |\n31 |         } else if grade > 1.7 &&\
    \ grade <= 2.0 {\n   |                                           ^^^\n   |   \
    \                                        |\n   |                             \
    \              expected `&f64`, found floating-point number\n   |            \
    \                               help: consider borrowing here: `&2.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3eufui07.rs:33:27\n   |\n33 |         } else\
    \ if grade > 1.3 && grade <= 1.7 {\n   |                           ^^^\n   | \
    \                          |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                      "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_strings: Vec<String> = vec![String::from(\"\
    \".to_string());\n    for grade in grades {\n        if grade > 3 {\n        \
    \    grades_strings.push(String::from(\"D+\".to_string()));\n        } else if\
    \ grade > 2.7 {\n            grades_strings.push(String::from(\"B\".to_string()));\n\
    \        } else if grade > 2.3 {\n            grades_strings.push(String::from(\"\
    B-\".to_string()));\n        } else if grade > 2 {\n            grades_strings.push(String::from(\"\
    C+\".to_string()));\n        } else if grade > 1.7 {\n            grades_strings.push(String::from(\"\
    C\".to_string()));\n        } else if grade > 1.3 {\n            grades_strings.push(String::from(\"\
    C-\".to_string()));\n        } else if grade > 1 {\n            grades_strings.push(String::from(\"\
    D-\".to_string()));\n        } else if grade > 0.7 {\n            grades_strings.push(String::from(\"\
    D\".to_string()));\n        } else if grade > 0.3 {\n            grades_strings.push(String::from(\"\
    E\".to_string()));\n        } else {\n            grades_strings.push(String::from(\"\
    A\".to_string()));\n        }\n    }\n    grades_strings\n}\n\nfn main() {\n \
    \   let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmporln88ar.rs:24:47\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n24 |     let mut grades_strings: Vec<String> = vec![String::from(\"\
    \".to_string());\n   |                                               ^ unclosed\
    \ delimiter\n...\n49 | }\n   | ^ mismatched closing delimiter\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmporln88ar.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\n\
    error: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_str = grades.iter().cloned().collect::<Vec<String>>();\n\
    \    for grade in grades_str.iter() {\n        if grade > 3.0 && grade < 3.7 {\n\
    \            grades_str.insert(grades_str.iter().position(|&x| *x > 3.7).unwrap(),\
    \ String::from(\"A\"));\n        } else if grade > 3.3 && grade < 3.7 {\n    \
    \        grades_str.insert(grades_str.iter().position(|&x| *x > 3.3).unwrap(),\
    \ String::from(\"A-\"));\n        } else if grade > 2.0 && grade < 3.0 {\n   \
    \         grades_str.insert(grades_str.iter().position(|&x| *x > 2.0).unwrap(),\
    \ String::from(\"B+\"));\n        } else if grade > 2.7 && grade < 3.0 {\n   \
    \         grades_str.insert(grades_str.iter().position(|&x| *x > 2.7).unwrap(),\
    \ String::from(\"B\"));\n        } else if grade > 2.3 && grade < 2.7 {\n    \
    \        grades_str.insert(grades_str.iter().position(|&x| *x > 2.3).unwrap(),\
    \ String::from(\"B-\"));\n        } else if grade > 1.7 && grade < 3.0 {\n   \
    \         grades_str.insert(grades_str.iter().position(|&x| *x > 1.7).unwrap(),\
    \ String::from(\"C+\"));\n        } else if grade > 1.3 && grade < 1.7 {\n   \
    \         grades_str.insert(grades_str.iter().position(|&x| *x > 1.3).unwrap(),\
    \ String::from(\"C\"));\n        } else if grade > 1.0 && grade < 1.3 {\n    \
    \        grades_str.insert(grades_str.iter().position(|&x| *x > 1.0).unwrap(),\
    \ String::from(\"D+\"));\n        } else if grade > 0.7 && grade < 1.0 {\n   \
    \         grades_str.insert(grades_str.iter().position(|&x| *x > 0.7).unwrap(),\
    \ String::from(\"D\"));\n        } else if grade > 0.0 && grade < 0.7 {\n    \
    \        grades_str.insert(grades_str.iter().position(|&x| *x > 0.0).unwrap(),\
    \ String::from(\"D-\"));\n        } else {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 0.0).unwrap(), String::from(\"E\"));\n        }\n    }\n    grades_str\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `f64`\n    --> /tmp/tmptns1p32c.rs:24:49\n     |\n24 \
    \  |     let mut grades_str = grades.iter().cloned().collect::<Vec<String>>();\n\
    \     |                                                 ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=f64>`\n     |\n\
    \     = help: the trait `FromIterator<f64>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptns1p32c.rs:26:20\n\
    \   |\n26 |         if grade > 3.0 && grade < 3.7 {\n   |                    ^^^\
    \ expected `&String`, found floating-point number\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptns1p32c.rs:26:35\n   |\n26 |         if grade > 3.0 &&\
    \ grade < 3.7 {\n   |                                   ^^^ expected `&String`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptns1p32c.rs:27:68\n\
    \   |\n27 |             grades_str.insert(grades_str.iter().position(|&x| *x >\
    \ 3.7).unwrap(), String::from(\"A\"));\n   |                                 \
    \                                   ^^^ expected `str`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptns1p32c.rs:28:27\n   |\n28 |\
    \         } else if grade > 3.3 && grade < 3.7 {\n   |                       \
    \    ^^^ expected `&String`, found floating-point number\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptns1p32c.rs:28:42\n   |\n28 |         } else if grade >\
    \ 3.3 && grade < 3.7 {\n   |                                          ^^^ expected\
    \ `&String`, found floating-point number\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptns1p32c.rs:29:68\n   |\n29 |             grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 3.3).unwrap(), String::from(\"A-\"));\n   |                           \
    \                                         ^^^ expected `str`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptns1p32c.rs:30:27\n\
    \   |\n30"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    for grade in grades.iter() {\n        if grade >= 3.5 {\n            letter_grades.push(\"\
    A+\");\n        } else if grade > 3.0 {\n            letter_grades.push(\"A\"\
    );\n        } else if grade > 2.7 {\n            letter_grades.push(\"B+\");\n\
    \        } else if grade > 2.3 {\n            letter_grades.push(\"B\");\n   \
    \     } else if grade > 1.7 { \n            letter_grades.push(\"C+\");\n    \
    \    } else if grade > 1.3 { \n            letter_grades.push(\"C\");\n      \
    \  } else if grade > 1.0 { \n            letter_grades.push(\"D+\");\n       \
    \ } else if grade > 0.7 { \n            letter_grades.push(\"D\");\n        }\
    \ else {\n            letter_grades.push(\"D-\");\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6kuni89q.rs:26:21\n   |\n\
    26 |         if grade >= 3.5 {\n   |                     ^^^\n   |           \
    \          |\n   |                     expected `&f64`, found floating-point number\n\
    \   |                     help: consider borrowing here: `&3.5`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6kuni89q.rs:27:32\n   |\n27 |             letter_grades.push(\"\
    A+\");\n   |                                ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                |\n   |        \
    \                        expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6kuni89q.rs:28:27\n   |\n28 |         } else\
    \ if grade > 3.0 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&3.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6kuni89q.rs:29:32\n   |\n29 |\
    \             letter_grades.push(\"A\");\n   |                               \
    \ ^^^- help: try using a conversion method: `.to_string()`\n   |             \
    \                   |\n   |                                expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kuni89q.rs:30:27\n\
    \   |\n30 |         } else if grade > 2.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kuni89q.rs:31:32\n\
    \   |\n31 |             letter_grades.push(\"B+\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kuni89q.rs:32:27\n\
    \   |\n32 |         } else if grade > 2.3 {\n   |                           ^^^\n\
    \   |                      "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.into_iter().map(|f| {\n        match\
    \ f {\n            f if f <= 3.0 => \"A+\".to_string(),\n            f if f >\
    \ 3.0 and f < 3.7 => \"A\".to_string(),\n            f if f > 3.7 && f < 4.0 =>\
    \ \"A-\".to_string(),\n            f if f > 4.0 and f < 4.7 => \"B+\".to_string(),\n\
    \            f if f > 4.7 && f < 5.0 => \"B\".to_string(),\n            f if f\
    \ > 5.0 and f < 5.7 => \"B-\".to_string(),\n            f if f > 5.7 && f < 6.0\
    \ => \"C+\".to_string(),\n            f if f > 6.0 and f < 6.7 => \"C\".to_string(),\n\
    \            f if f > 6.7 and f < 7.0 => \"C-\".to_string(),\n            f if\
    \ f > 7.0 and f < 7.7 => \"D+\".to_string(),\n            f if f > 7.7 and f <\
    \ 8.0 => \"D\".to_string(),\n            f if f > 8.0 and f < 8.7 => \"D-\".to_string(),\n\
    \            _ => \"E\".to_string(),\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmpdxg916lb.rs:27:26\n\
    \   |\n27 |             f if f > 3.0 and f < 3.7 => \"A\".to_string(),\n   | \
    \                         ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpdxg916lb.rs:29:26\n\
    \   |\n29 |             f if f > 4.0 and f < 4.7 => \"B+\".to_string(),\n   |\
    \                          ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpdxg916lb.rs:31:26\n\
    \   |\n31 |             f if f > 5.0 and f < 5.7 => \"B-\".to_string(),\n   |\
    \                          ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpdxg916lb.rs:33:26\n\
    \   |\n33 |             f if f > 6.0 and f < 6.7 => \"C\".to_string(),\n   | \
    \                         ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpdxg916lb.rs:34:26\n\
    \   |\n34 |             f if f > 6.7 and f < 7.0 => \"C-\".to_string(),\n   |\
    \                          ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpdxg916lb.rs:35:26\n\
    \   |\n35 |             f if f > 7.0 and f < 7.7 => \"D+\".to_string(),\n   |\
    \                          ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpdxg916lb.rs:36:26\n\
    \   |\n36 |             f if f > 7.7 and f < 8.0 => \"D\".to_string(),\n   | \
    \                         ^^^ "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_strings: Vec<String> = vec![];\n\
    \    let mut current_grade: f64 = 0.0;\n    for grade in grades {\n        current_grade\
    \ += grade;\n        grades_strings.push_back(format!(\"{}\", current_grade));\n\
    \    }\n    grades_strings\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<String>`\
    \ in the current scope\n  --> /tmp/tmpl9xz__ni.rs:28:24\n   |\n28 |         grades_strings.push_back(format!(\"\
    {}\", current_grade));\n   |                        ^^^^^^^^^ method not found\
    \ in `Vec<String>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grade_array: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade < 3.9 {\n            grade_array.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            grade_array.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            grade_array.push(String::from(\"\
    C+\"));\n        } else if grade < 6.0 {\n            grade_array.push(String::from(\"\
    C\"));\n        } else if grade < 7.0 {\n            grade_array.push(String::from(\"\
    D+\"));\n        } else if grade < 8.0 {\n            grade_array.push(String::from(\"\
    D\"));\n        } else if grade < 9.0 {\n            grade_array.push(String::from(\"\
    D-\"));\n        } else if grade < 10.0 {\n            grade_array.push(String::from(\"\
    E\"));\n        } else {\n            grade_array.push(String::from(\"F\"));\n\
    \        }\n    }\n    grade_array\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"C+\", \"A-\", \"A-\", \"A-\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpx85asq1w.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![\"\
    E\"];\n    }\n    if grades.len() == 1 {\n        return vec![\n            format!(\"\
    {}\", grades[0] < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len()\
    \ == 2 {\n        return vec![\n            format!(\"{}\", grades[0] < 3.0 ?\
    \ \"A\" : \"B\"),\n            format!(\"{}\", grades[1] < 3.0 ? \"A\" : \"B\"\
    ),\n        ];\n    }\n    if grades.len() == 3 {\n        return vec![\n    \
    \        format!(\"{}\", grades[0] < 3.0 ? \"A\" : \"B\"),\n            format!(\"\
    {}\", grades[1] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\", grades[2]\
    \ < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len() == 4 {\n   \
    \     return vec![\n            format!(\"{}\", grades[0] < 3.0 ? \"A\" : \"B\"\
    ),\n            format!(\"{}\", grades[1] < 3.0 ? \"A\" : \"B\"),\n          \
    \  format!(\"{}\", grades[2] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\"\
    , grades[3] < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len() ==\
    \ 5 {\n        return vec![\n            format!(\"{}\", grades[0] < 3.0 ? \"\
    A\" : \"B\"),\n            format!(\"{}\", grades[1] < 3.0 ? \"A\" : \"B\"),\n\
    \            format!(\"{}\", grades[2] < 3.0 ? \"A\" : \"B\"),\n            format!(\"\
    {}\", grades[3] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\", grades[4]\
    \ < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len() == 6 {\n   \
    \     return vec![\n            format!(\"{}\", grades[0] < 3.0 ? \"A\" : \"B\"\
    ),\n            format!(\"{}\", grades[1] < 3.0 ? \"A\" : \"B\"),\n          \
    \  format!(\"{}\", grades[2] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\"\
    , grades[3] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\", grades[4] < 3.0\
    \ ? \"A\" : \"B\"),\n            format!(\"{}\", grades[5] < 3.0 ? \"A\" : \"\
    B\"),\n        ];\n    }\n    if grades.len() == 7 {\n        return vec![\n \
    \           format!(\"{}\", grades[0] < 3.0 ? \"A\" : \"B\"),\n            format!(\"\
    {}\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpicndclme.rs:85:83\n\
    \   |\n85 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    86 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_sum = grades.iter().sum();\n\n  \
    \  // if grades_sum > 3.7, grade is A+\n    // if grades_sum > 3.3, grade is A-\
    \ \n    // if grades_sum > 3.0, grade is B+\n    // if grades_sum > 2.7, grade\
    \ is B\n    // if grades_sum > 2.3, grade is B-\n    // if grades_sum > 2.0, grade\
    \ is C+\n    // if grades_sum > 1.7, grade is C\n    // if grades_sum > 1.3, grade\
    \ is C-\n    // if grades_sum > 1.0, grade is D+\n    // if grades_sum > 0.7,\
    \ grade is D\n    // if grades_sum > 0.0, grade is D-\n    // if grades_sum <\
    \ 0.0, grade is E\n    match grades_sum {\n        1.0 => vec![\"D+\"],\n    \
    \    2.0 => vec![\"D\"],\n        3.0 => vec![\"C\"],\n        4.0 => vec![\"\
    B\"],\n        5.0 => vec![\"B+\"],\n        6.0 => vec![\"A-\"],\n        7.0\
    \ => vec![\"A-\"],\n        _ => vec![\"E\"]\n    }\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzru27y93.rs:39:21\n   |\n\
    39 |         1.0 => vec![\"D+\"],\n   |                     ^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzru27y93.rs:40:21\n   |\n40 |         2.0 => vec![\"D\"\
    ],\n   |                     ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzru27y93.rs:41:21\n\
    \   |\n41 |         3.0 => vec![\"C\"],\n   |                     ^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                     |\n   |\
    \                     expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzru27y93.rs:42:21\n   |\n42 |         4.0 =>\
    \ vec![\"B\"],\n   |                     ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                     |\n   |                     expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzru27y93.rs:43:21\n\
    \   |\n43 |         5.0 => vec![\"B+\"],\n   |                     ^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                     |\n\
    \   |                     expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzru27y93.rs:44:21\n   |\n44 |         6.0 =>\
    \ vec![\"A-\"],\n   |                     ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                     |\n   |                     expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzru27y93.rs:45:21\n\
    \   |\n45 |         7.0 => vec![\"A-\"],\n   |                     ^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                     |\n\
    \   |                     expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzru27y93.rs:46:19\n   |\n46 |         _ => vec![\"\
    E\"]\n   |                   ^^^- help:"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![\"E\".to_string()];\n\
    \    for grade in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"C\", \"B\", \"A\", \"A\", \"B\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpbodljo7s.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // TODO\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg0gx5m_w.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max = 0.0f64;\n    for grade in grades {\n        if grade > max {\n       \
    \     max = grade;\n        }\n    }\n    for grade in grades {\n        if grade\
    \ >= max {\n            let letter_grade = String::from(\"E\");\n            if\
    \ grade < max {\n                letter_grade = String::from(\n              \
    \      \"D\"\n                );\n                if grade > max {\n         \
    \           letter_grade = String::from(\n                        \"C\"\n    \
    \                );\n                    if grade > max {\n                  \
    \      letter_grade = String::from(\n                            \"B\"\n     \
    \                   );\n                        if grade > max {\n           \
    \                 letter_grade = String::from(\n                             \
    \   \"A\"\n                            );\n                        }\n       \
    \             }\n                }\n            }\n            letter_grades.push(letter_grade);\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `grades`\n   --> /tmp/tmpbas1jwh9.rs:31:18\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                           ------ move occurs because `grades` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n26  |     for grade in grades\
    \ {\n    |                  ------ `grades` moved due to this implicit call to\
    \ `.into_iter()`\n...\n31  |     for grade in grades {\n    |                \
    \  ^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `grades`\nhelp: consider iterating over\
    \ a slice of the `Vec<f64>`'s content to avoid moving into the `for` loop\n  \
    \  |\n26  |     for grade in &grades {\n    |                  +\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `letter_grade`\n  --> /tmp/tmpbas1jwh9.rs:35:17\n\
    \   |\n33 |             let letter_grade = String::from(\"E\");\n   |        \
    \         ------------\n   |                 |\n   |                 first assignment\
    \ to `letter_grade`\n   |                 help: consider making this binding mutable:\
    \ `mut letter_grade`\n34 |             if grade < max {\n35 |                \
    \ letter_grade = String::from(\n   |                 ^^^^^^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `letter_grade`\n  --> /tmp/tmpbas1jwh9.rs:39:21\n   |\n33 |       \
    \      let letter_grade = String::from(\"E\");\n   |                 ------------\n\
    \   |                 |\n   |                 first assignment to `letter_grade`\n\
    \   |                 help: consider making this binding mutable: `mut letter_grade`\n\
    ...\n39 |                     letter_grade = String::from(\n   |             \
    \        ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `letter_grade`\n  --> /tmp/tmpbas1jwh9.rs:43:25\n\
    \   |\n33 |             let letter_grade = String::from(\"E\");\n   |        \
    \         ------------\n   |                 |\n   |                 first assignment\
    \ to `letter_grade`\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter()\n        .enumerate()\n      \
    \  .map(|(idx, grade)| {\n            if grade > 0.0 {\n                match\
    \ grade {\n                    0..=5.0 => String::from(\"A\"),\n             \
    \       5.1..=10.0 => String::from(\"A-\"),\n                    10.0..=15.0 =>\
    \ String::from(\"B\"),\n                    15.0..=20.0 => String::from(\"B-\"\
    ),\n                    20.0..=30.0 => String::from(\"C\"),\n                \
    \    30.0..=35.0 => String::from(\"C-\"),\n                    35.0..=40.0 =>\
    \ String::from(\"D\"),\n                    40.0..=45.0 => String::from(\"D-\"\
    ),\n                    45.0..=55.0 => String::from(\"E\"),\n                \
    \    55.0..=95.0 => String::from(\"F\"),\n                    _ => String::from(\"\
    E\"),\n                }\n            } else {\n                String::from(\"\
    D\")\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph1n8000m.rs:27:24\n   |\n\
    27 |             if grade > 0.0 {\n   |                        ^^^\n   |     \
    \                   |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&0.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmph1n8000m.rs:29:21\n   |\n28 |  \
    \               match grade {\n   |                       ----- this expression\
    \ has type `&f64`\n29 |                     0..=5.0 => String::from(\"A\"),\n\
    \   |                     ^   --- this is of type `{float}`\n   |            \
    \         |\n   |                     expected `f64`, found integer\n   |    \
    \                 help: use a float literal: `0.0`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| x.to_string()).filter_map(|x|\
    \ match x {\n        x if x < 0.0 => None,\n        x if x > 0.0 => Some(x.to_string()),\n\
    \        _ => Some(String::from(\"E\")),\n    }).collect::<Vec<String>>()\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5e_kj4x4.rs:25:18\n   |\n\
    25 |         x if x < 0.0 => None,\n   |                  ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                  |\n   |         \
    \         expected struct `String`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5e_kj4x4.rs:26:18\n   |\n26 |         x if x\
    \ > 0.0 => Some(x.to_string()),\n   |                  ^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                  |\n   |           \
    \       expected struct `String`, found floating-point number\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let grade = grade as f64;\n        if grade <= 0 {\n  \
    \          continue;\n        }\n        if grade < 3.0 {\n            letter_grades.push(\"\
    A+\");\n        } else if grade < 3.7 {\n            letter_grades.push(\"A\"\
    );\n        } else if grade < 4.0 {\n            letter_grades.push(\"A-\");\n\
    \        } else if grade < 5.0 {\n            letter_grades.push(\"B+\");\n  \
    \      } else if grade < 6.0 {\n            letter_grades.push(\"B\");\n     \
    \   } else if grade < 7.0 {\n            letter_grades.push(\"B-\");\n       \
    \ } else if grade < 8.0 {\n            letter_grades.push(\"C+\");\n        }\
    \ else if grade < 9.0 {\n            letter_grades.push(\"C\");\n        } else\
    \ if grade < 10.0 {\n            letter_grades.push(\"C-\");\n        } else if\
    \ grade < 11.0 {\n            letter_grades.push(\"D+\");\n        } else if grade\
    \ < 12.0 {\n            letter_grades.push(\"D\");\n        } else if grade <\
    \ 13.0 {\n            letter_grades.push(\"D-\");\n        } else if grade < 14.0\
    \ {\n            letter_grades.push(\"E\");\n        } else {\n            letter_grades.push(\"\
    F\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeqmhwese.rs:27:21\n   |\n\
    27 |         if grade <= 0 {\n   |                     ^\n   |               \
    \      |\n   |                     expected `f64`, found integer\n   |       \
    \              help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeqmhwese.rs:60:5\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n60 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \n    for grade in grades.iter() {\n        let letter_grade = (grade as f64 /\
    \ 4.0) as u32;\n        letter_grades.push(string_letter_grade(&letter_grade));\n\
    \    }\n\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_letter_grade` in this scope\n\
    \  --> /tmp/tmp_9krkjtc.rs:28:28\n   |\n28 |         letter_grades.push(string_letter_grade(&letter_grade));\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0606]: casting `&f64` as `f64` is invalid\n  --> /tmp/tmp_9krkjtc.rs:27:29\n\
    \   |\n27 |         let letter_grade = (grade as f64 / 4.0) as u32;\n   |    \
    \                         -----^^^^^^^\n   |                             |\n \
    \  |                             cannot cast `&f64` as `f64`\n   |           \
    \                  help: dereference the expression: `*grade`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0606.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = grades.iter().map(|x|\
    \ {\n        if x <= 3.0 {\n            String::from(\"A+\")\n        } else if\
    \ x <= 3.3 {\n            String::from(\"A\")\n        } else if x <= 3.7 {\n\
    \            String::from(\"A-\")\n        } else if x <= 4.0 {\n            String::from(\"\
    B+\")\n        } else if x <= 4.3 {\n            String::from(\"B\")\n       \
    \ } else if x <= 4.7 {\n            String::from(\"B+\")\n        } else if x\
    \ <= 5.0 {\n            String::from(\"C+\")\n        } else if x <= 5.3 {\n \
    \           String::from(\"C\")\n        } else if x <= 5.7 {\n            String::from(\"\
    C+\")\n        } else if x <= 6.0 {\n            String::from(\"D+\")\n      \
    \  } else if x <= 6.3 {\n            String::from(\"D\")\n        } else if x\
    \ <= 6.7 {\n            String::from(\"D+\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    }).collect();\n    grades_vec.sort();\n    grades_vec\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsem0yor4.rs:25:17\n   |\n\
    25 |         if x <= 3.0 {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&f64`, found floating-point number\n   |     \
    \            help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsem0yor4.rs:27:24\n   |\n27 |         } else if x <= 3.3\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsem0yor4.rs:29:24\n   |\n29 |         } else if x <= 3.7\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&3.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsem0yor4.rs:31:24\n   |\n31 |         } else if x <= 4.0\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&4.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsem0yor4.rs:33:24\n   |\n33 |         } else if x <= 4.3\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&4.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsem0yor4.rs:35:24\n   |\n35 |         } else if x <= 4.7\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&4.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsem0yor4.rs:37:24\n   |\n37 |         } else if x <= 5.0\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \            "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_sum: f64 = grades.iter().sum();\n\
    \    let grades_range: f64 = grades.iter().max() - grades.iter().min();\n    let\
    \ grades_avg: f64 = grades_sum / grades.len();\n    let grades_avg_range: f64\
    \ = grades_range / grades.len();\n    let mut grades_avg = grades_avg;\n    let\
    \ mut grades_avg_range = grades_avg_range;\n    let mut grades_range: f64 = grades_range;\n\
    \    let mut grades_sum: f64 = grades_sum;\n    let mut grades_diff: f64 = 0.0;\n\
    \    let mut grades_min_diff: f64 = grades.iter().min().unwrap();\n    let mut\
    \ grades_max_diff: f64 = grades.iter().max().unwrap();\n    let mut grades_sum:\
    \ f64 = grades.iter().sum();\n    let grades_avg_range: f64 = grades.iter().max()\
    \ - grades.iter().min();\n    let grades_avg: f64 = grades_sum / grades.len();\n\
    \    let grades_avg_range: f64 = grades_range / grades.len();\n    let mut grades_avg\
    \ = grades_avg;\n    let mut grades_avg_range = grades_avg_range;\n    let mut\
    \ grades_range: f64 = grades_range;\n    let mut grades_sum: f64 = grades.iter().sum();\n\
    \    let grades_avg_range: f64 = grades.iter().max() - grades.iter().min();\n\
    \    let grades_avg: f64 = grades_sum / grades.len();\n    let grades_avg_range:\
    \ f64 = grades_range / grades.len();\n    let mut grades_avg = grades_avg;\n \
    \   let mut grades_avg_range = grades_avg_range;\n    let mut grades_range: f64\
    \ = grades_range;\n    let mut grades_sum: f64 = grades.iter().sum();\n    let\
    \ grades_avg_range: f64 = grades.iter().max() - grades.iter().min();\n    let\
    \ grades_avg: f64 = grades_sum / grades.len();\n    let grades_avg_range: f64\
    \ = grades_range / grades.len();\n    let mut grades_avg = grades_avg;\n    let\
    \ mut grades_avg_range = grades_avg_range;\n    let mut grades_range: \n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmpwedcmlk7.rs:56:1\n   |\n\
    55 |     let mut grades_range: \n   |         ---------------- while parsing the\
    \ type for `mut grades_range`\n56 | }\n   | ^ expected type\n\nerror[E0277]: the\
    \ trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwedcmlk7.rs:25:43\n\
    \     |\n25   |     let grades_range: f64 = grades.iter().max() - grades.iter().min();\n\
    \     |                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwedcmlk7.rs:25:65\n\
    \     |\n25   |     let grades_range: f64 = grades.iter().max() - grades.iter().min();\n\
    \     |                                                                 ^^^ the\
    \ trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\n     = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\nnote:\
    \ required by a bound in `std::iter::Iterator::min`\n\nerror[E0369]: cannot subtract\
    \ `Option<&f64>` from `Option<&f64>`\n  --> /tmp/tmpwedcmlk7.rs:25:49\n   |\n\
    25 |     let grades_range: f64 = grades.iter().max() - grades.iter().min();\n\
    \   |                             ------------------- ^ ------------------- Option<&f64>\n\
    \   |                             |\n   |                             Option<&f64>\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpwedcmlk7.rs:26:38\n\
    \   |\n26 |     let grades_avg: f64 = grades_sum / grades.len();\n   | "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, grade)| grade > 0)\n        .map(|(_, grade)| {\n      \
    \      format!(\"{}{}\", grade / grades.len() as f64, grade % grades.len() as\
    \ f64).to_string()\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzsuoi4i1.rs:27:38\n   |\n\
    27 |         .filter(|(_, grade)| grade > 0)\n   |                           \
    \           ^ expected `&&f64`, found integer\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_str = vec![];\n    for i in grades.iter()\
    \ {\n        let x = i % 10;\n        let y = i / 10;\n        let n = x.pow(2).floor();\n\
    \        let d = n.pow(2).floor();\n        if y == 0 {\n            if n == 0\
    \ {\n                grades_str.push(String::from(\"E\"));\n            } else\
    \ {\n                grades_str.push(String::from(\"D-\"));\n            }\n \
    \       } else if x == 0 {\n            if d > 5 {\n                grades_str.push(String::from(\"\
    B-\"));\n            } else {\n                grades_str.push(String::from(\"\
    B-\"));\n            }\n        } else if y == 1 {\n            if d == 3 {\n\
    \                grades_str.push(String::from(\"C+\"));\n            } else {\n\
    \                grades_str.push(String::from(\"C\"));\n            }\n      \
    \  } else if x == 1 {\n            if d > 6 {\n                grades_str.push(String::from(\"\
    B-\"));\n            } else {\n                grades_str.push(String::from(\"\
    B+\"));\n            }\n        } else if d == 2 {\n            grades_str.push(String::from(\"\
    C\"));\n        } else if n == 2 {\n            if d > 4 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B\"));\n            }\n        } else if d == 3 {\n            grades_str.push(String::from(\"\
    C+\"));\n        } else if n == 3 {\n            if d > 5 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B+\"));\n            }\n        } else if d == 4 {\n            grades_str.push(String::from(\"\
    C\"));\n        } else if n == 4 {\n            if d > 6 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B-\"));\n            }\n        } else if d == 5 {\n            grades_str.push(String::from(\"\
    C+\"));\n        } else if n == 5 {\n            if d > 7 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B+\"));\n            }\n        } else if d == 6 {\n            grades_str.push(String::from(\"\
    C-\"));\n        } else if n == 6 {\n            if d > 8 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B-\"));\n            }\n        } else if d == 7 {\n            grades_\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpg_0ldivg.rs:106:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    24  |     let mut grades_str = vec![];\n25  |     for i in grades.iter() {\n \
    \   |                            - unclosed delimiter\n...\n94  |         } else\
    \ if d == 7 {\n    |                          - this delimiter might not be properly\
    \ closed...\n95  |             grades_\n96  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n106 | }\n    |   ^\n\nerror[E0425]: cannot\
    \ find value `grades_` in this scope\n  --> /tmp/tmpg_0ldivg.rs:95:13\n   |\n\
    95 |             grades_\n   |             ^^^^^^^ help: a local variable with\
    \ a similar name exists: `grades`\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n\
    \  --> /tmp/tmpg_0ldivg.rs:26:19\n   |\n26 |         let x = i % 10;\n   |   \
    \                ^ no implementation for `&f64 % {integer}`\n   |\n   = help:\
    \ the trait `Rem<{integer}>` is not implemented for `&f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `&f64` by `{integer}`\n  --> /tmp/tmpg_0ldivg.rs:27:19\n   |\n27 |  \
    \       let y = i / 10;\n   |                   ^ no implementation for `&f64\
    \ / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![];\n\
    \    }\n\n    let mut letter_grades = vec![];\n    let mut highest_grade = grades[0];\n\
    \n    for grade in grades.iter() {\n        if grade > highest_grade {\n     \
    \       highest_grade = grade;\n        }\n    }\n\n    for grade in grades.iter()\
    \ {\n        let grade = grade as f64;\n        let letter = match grade {\n \
    \           4.0 => \"A+\",\n            3.7 => \"A\",\n            3.3 => \"A-\"\
    ,\n            3.0 => \"B+\",\n            2.7 => \"B\",\n            2.3 => \"\
    B-\",\n            2.0 => \"C+\",\n            1.7 => \"C\",\n            1.3\
    \ => \"C-\",\n            1.0 => \"D+\",\n            0.7 => \"D\",\n        \
    \    _ => \"D-\",\n            0.0 => \"E\",\n            _ => \"E\",\n      \
    \  };\n\n        letter_grades.push(letter);\n    }\n\n    letter_grades.sort();\n\
    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vk46s_7.rs:32:20\n   |\n\
    32 |         if grade > highest_grade {\n   |                    ^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&f64`, found `f64`\n\
    \   |                    help: consider borrowing here: `&highest_grade`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8vk46s_7.rs:33:29\n   |\n29 |     let mut highest_grade\
    \ = grades[0];\n   |                             --------- expected due to this\
    \ value\n...\n33 |             highest_grade = grade;\n   |                  \
    \           ^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |             highest_grade = *grade;\n   |           \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8vk46s_7.rs:61:5\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected `Vec<String>`\
    \ because of return type\n...\n61 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror[E0606]: casting `&f64` as `f64`\
    \ is invalid\n  --> /tmp/tmp8vk46s_7.rs:38:21\n   |\n38 |         let grade =\
    \ grade as f64;\n   |                     -----^^^^^^^\n   |                 \
    \    |\n   |                     cannot cast `&f64` as `f64`\n   |           \
    \          help: dereference the expression: `*grade`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() < 5 {\n        return vec![String::from(\"\
    E\")];\n    }\n    let mut total_grade = 0;\n    let mut current_grade: u8;\n\
    \    for grade in grades.iter() {\n        total_grade += grade as f64;\n    }\n\
    \    current_grade = total_grade / 5.0;\n    let current_grade = current_grade\
    \ as f64;\n    \n    if current_grade <= 4.0{\n        return vec![String::from(\"\
    A+\")];\n    }\n    if current_grade <= 3.7{\n        return vec![String::from(\"\
    A\")];\n    }\n    if current_grade <= 3.3{\n        return vec![String::from(\"\
    A-\")];\n    }\n    if current_grade <= 3.0{\n        return vec![String::from(\"\
    B+\")];\n    }\n    if current_grade <= 2.7{\n        return vec![String::from(\"\
    B\")];\n    }\n    if current_grade <= 2.3{\n        return vec![String::from(\"\
    B-\")];\n    }\n    if current_grade <= 2.0{\n        return vec![String::from(\"\
    C+\")];\n    }\n    if current_grade <= 1.7{\n        return vec![String::from(\"\
    C\")];\n    }\n    if current_grade <= 1.3{\n        return vec![String::from(\"\
    C-\")];\n    }\n    if current_grade <= 1.0{\n        return vec![String::from(\"\
    D+\")];\n    }\n    if current_grade <= 0.7{\n        return vec![String::from(\"\
    D\")];\n    }\n    if current_grade <= 0.0{\n        return vec![String::from(\"\
    D-\")];\n    }\n    return vec![String::from(\"E\")];\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpkfsuyqvz.rs:30:21\n\
    \   |\n30 |         total_grade += grade as f64;\n   |                     ^^\
    \ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot divide `{integer}` by `{float}`\n\
    \  --> /tmp/tmpkfsuyqvz.rs:32:33\n   |\n32 |     current_grade = total_grade /\
    \ 5.0;\n   |                                 ^ no implementation for `{integer}\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0606]: casting `&f64` as `f64` is invalid\n  --> /tmp/tmpkfsuyqvz.rs:30:24\n\
    \   |\n30 |         total_grade += grade as f64;\n   |                       \
    \ -----^^^^^^^\n   |                        |\n   |                        cannot\
    \ cast `&f64` as `f64`\n   |                        help: dereference the expression:\
    \ `*grade`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let len = grades.len();\n    let mut grades_str:\
    \ Vec<String> = vec![\"\".to_string(); 6];\n    for i in 0..6 {\n        grades_str[i]\
    \ = String::from(\"\");\n        if grades[i] != 0.0 {\n            if grades[i]\
    \ < 3.0 {\n                grades_str[i] = String::from(\"A+\");\n           \
    \ } else if grades[i] > 3.0 && grades[i] < 4.0 {\n                grades_str[i]\
    \ = String::from(\"A\");\n            } else if grades[i] > 4.0 && grades[i] <\
    \ 5.0 {\n                grades_str[i] = String::from(\"A-\");\n            }\
    \ else if grades[i] > 5.0 && grades[i] < 6.0 {\n                grades_str[i]\
    \ = String::from(\"B+\");\n            } else if grades[i] > 6.0 && grades[i]\
    \ < 7.0 {\n                grades_str[i] = String::from(\"B\");\n            }\
    \ else if grades[i] > 7.0 && grades[i] < 8.0 {\n                grades_str[i]\
    \ = String::from(\"B-\");\n            } else if grades[i] > 8.0 && grades[i]\
    \ < 9.0 {\n                grades_str[i] = String::from(\"C+\");\n           \
    \ } else if grades[i] > 9.0 && grades[i] < 10.0 {\n                grades_str[i]\
    \ = String::from(\"C\");\n            } else if grades[i] > 10.0 && grades[i]\
    \ < 11.0 {\n                grades_str[i] = String::from(\"C-\");\n          \
    \  } else if grades[i] > 11.0 && grades[i] < 12.0 {\n                grades_str[i]\
    \ = String::from(\"D+\");\n            } else if grades[i] > 12.0 {\n        \
    \        grades_str[i] = String::from(\"D\");\n            } else {\n        \
    \        grades_str[i] = String::from(\"D-\");\n            }\n        }\n   \
    \ }\n    grades_str\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpn_crr_9u.rs:28:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().sort();\n\
    \    let mut grades_counter: Vec<usize> = grades_sorted.iter().cloned().map(|x|\
    \ x).collect();\n    \n    for i in 0..grades_counter.len() {\n        if grades_counter[i]\
    \ == grades_sorted.len() - 1 {\n            grades_counter[i] = 0;\n        }\
    \ else {\n            grades_counter[i]++;\n            break;\n        }\n  \
    \  }\n    \n    let mut current_grade: String = String::new();\n    for grade\
    \ in grades_sorted {\n        if grades_counter[grade] == 1 {\n            current_grade\
    \ += format!(\"{}+\", grade);\n        } else {\n            current_grade +=\
    \ format!(\"{}{}\", grade, \n                match grades_counter[grade] {\n \
    \                   0 => \"-\",\n                    1 => \"-\",\n           \
    \         _ => \"\"\n                }\n            );\n        }\n    }\n   \
    \ \n    current_grade.trim()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpiowpve8h.rs:31:30\n\
    \   |\n31 |             grades_counter[i]++;\n   |                           \
    \   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n31\
    \ |             { let tmp = grades_counter[i]; grades_counter[i] += 1; tmp };\n\
    \   |             +++++++++++                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    31 -             grades_counter[i]++;\n31 +             grades_counter[i] += 1;\n\
    \   | \n\nerror[E0599]: no method named `sort` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpiowpve8h.rs:24:52\n   |\n24 |     let mut grades_sorted\
    \ = grades.iter().cloned().sort();\n   |                                     \
    \               ^^^^ method not found in `Cloned<std::slice::Iter<'_, f64>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiowpve8h.rs:39:30\n   |\n39 |\
    \             current_grade += format!(\"{}+\", grade);\n   |                \
    \              ^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct `String`\n\
    \   |\n   = note: this error originates in the macro `format` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpiowpve8h.rs:41:30\n   |\n41 |               current_grade += format!(\"\
    {}{}\", grade, \n   |  ______________________________^\n42 | |               \
    \  match grades_counter[grade] {\n43 | |                     0 => \"-\",\n44 |\
    \ |                     1 => \"-\",\n45 | |                     _ => \"\"\n46\
    \ | |                 }\n47 | |             );\n   | |_____________^ expected\
    \ `&str`, found struct `String`\n   |\n   = note: this error originates in the\
    \ macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiowpve8h.rs:51:5\n   |\n23 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |            \
    \                                    ----------- expected `Vec<String>` because\
    \ of return type\n...\n51 |     current_grade.trim()\n   |     ^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `&str`\n   |\n   = note: expected struct `V"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut grade_iter = grades_iter.enumerate();\n    let mut grades: Vec<String> =\
    \ vec![];\n    let mut num_grades = grades_iter.count();\n    grade_iter.move_to_first();\n\
    \    while num_grades > 0 {\n        let (idx, grade_) = grade_iter.next().unwrap();\n\
    \        if idx < num_grades - 1 {\n            let (next_idx, next_grade_) =\
    \ grade_iter.next().unwrap();\n            if grade_ > next_grade_ {\n       \
    \         grades.push(String::from(\"A+\"));\n                num_grades -= 1;\n\
    \            } else {\n                grades.push(String::from(\"A-\"));\n  \
    \              num_grades -= 1;\n            }\n        } else {\n           \
    \ if grade_ > 3.0 {\n                grades.push(String::from(\"B+\"));\n    \
    \            num_grades -= 1;\n            } else {\n                grades.push(String::from(\"\
    B-\"));\n                num_grades -= 1;\n            }\n        }\n    }\n \
    \   grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n  \
    \  assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"\
    ), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `move_to_first` found for struct `Enumerate`\
    \ in the current scope\n  --> /tmp/tmpseznkpme.rs:28:16\n   |\n28 |     grade_iter.move_to_first();\n\
    \   |                ^^^^^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ f64>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpseznkpme.rs:41:25\n\
    \   |\n41 |             if grade_ > 3.0 {\n   |                         ^^^\n\
    \   |                         |\n   |                         expected `&f64`,\
    \ found floating-point number\n   |                         help: consider borrowing\
    \ here: `&3.0`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades = grades.sort_unstable();\n    let\
    \ mut grades_len = grades.len();\n    let mut letter_grades = vec![\"E\"];\n \
    \   while grades_len > 0 {\n        let mut curr = grades[grades_len - 1];\n \
    \       let mut prev = grades[grades_len - 2];\n        if curr < prev {\n   \
    \         grades[grades_len - 2] = curr;\n            grades[grades_len - 1] =\
    \ prev;\n        }\n        grades_len -= 1;\n        letter_grades.push(String::from(\"\
    A+\".to_string()));\n        if grades[grades_len - 1] >= 3.9 {\n            letter_grades.push(String::from(\"\
    A\".to_string()));\n        }\n        if grades[grades_len - 1] >= 3.7 {\n  \
    \          letter_grades.push(String::from(\"A-\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 3.3 {\n            letter_grades.push(String::from(\"\
    B+\".to_string()));\n        }\n        if grades[grades_len - 1] >= 3.0 {\n \
    \           letter_grades.push(String::from(\"B\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 2.7 {\n            letter_grades.push(String::from(\"\
    B-\".to_string()));\n        }\n        if grades[grades_len - 1] >= 2.3 {\n \
    \           letter_grades.push(String::from(\"C+\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 2.0 {\n            letter_grades.push(String::from(\"\
    C\".to_string()));\n        }\n        if grades[grades_len - 1] >= 1.7 {\n  \
    \          letter_grades.push(String::from(\"C-\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\".to_string()));\n        }\n        if grades[grades_len - 1] >= 0.7 {\n \
    \           letter_grades.push(String::from(\"D\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\".to_string()));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n \
    \   let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpsgach0l5.rs:24:25\n\
    \     |\n24   |     let grades = grades.sort_unstable();\n     |             \
    \            ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n    \
    \ |\n     = help: the following other types implement trait `Ord`:\n         \
    \      i128\n               i16\n               i32\n               i64\n    \
    \           i8\n               isize\n               u128\n               u16\n\
    \             and 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror[E0599]: no method named `len` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpsgach0l5.rs:25:33\n   |\n25 |     let mut grades_len =\
    \ grades.len();\n   |                                 ^^^ method not found in\
    \ `()`\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpsgach0l5.rs:28:24\n\
    \   |\n28 |         let mut curr = grades[grades_len - 1];\n   |             \
    \           ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: to access tuple elements,\
    \ use tuple indexing syntax (e.g., `tuple.0`)\n\nerror[E0608]: cannot index into\
    \ a value of type `()`\n  --> /tmp/tmpsgach0l5.rs:29:24\n   |\n29 |         let\
    \ mut prev = grades[grades_len - 2];\n   |                        ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\
    \nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpsgach0l5.rs:31:13\n\
    \   |\n31 |             grades[grades_len - 2] = curr;\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\
    \nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpsgach0l5.rs:32:13\n\
    \   |\n32 |             grades[grades_len - 1] = prev;\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsgach0l5.rs:35:28\n   |\n35 |\
    \         letter_grades.push(String::from(\"A+\".to_string()));\n   |        \
    \                    ^^^^^"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    // TODO: Write your code here.\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx2ewa6dq.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_sum = grades.iter().sum();\n    let\
    \ letter_grade = match grades_sum {\n        0 => \"E\",\n        _ => {\n   \
    \         let average = grades.iter().sum() / grades.len();\n            let grade\
    \ = grades.iter()\n                .enumerate()\n                .filter(|(_,\
    \ item)| item >= average)\n                .next()\n                .unwrap();\n\
    \n            if grade == 0 {\n                vec![String::from(\"E\")]\n   \
    \         } else if grade == grades.len() {\n                vec![String::from(\"\
    D-\")]\n            } else {\n                vec![String::from(\"D\")]\n    \
    \        }\n        }\n    };\n\n    vec![letter_grade.clone(), String::from(\"\
    D+\")]\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `{integer}: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmpmzfrlb00.rs:24:36\n     |\n24   |     let grades_sum = grades.iter().sum();\n\
    \     |                                    ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `{integer}`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmzfrlb00.rs:35:25\n   |\n35 |             if grade == 0\
    \ {\n   |                         ^ expected tuple, found integer\n   |\n   =\
    \ note: expected tuple `(usize, &f64)`\n               found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmzfrlb00.rs:37:32\n   |\n37 |\
    \             } else if grade == grades.len() {\n   |                        \
    \        ^^^^^^^^^^^^ expected tuple, found `usize`\n   |\n   = note: expected\
    \ tuple `(usize, &f64)`\n               found type `usize`\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n  --> /tmp/tmpmzfrlb00.rs:35:13\n   |\n25 |  \
    \     let letter_grade = match grades_sum {\n   |                          ----------------\
    \ `match` arms have incompatible types\n26 |           0 => \"E\",\n   |     \
    \           --- this is found to be of type `&str`\n...\n35 | /             if\
    \ grade == 0 {\n36 | |                 vec![String::from(\"E\")]\n37 | |     \
    \        } else if grade == grades.len() {\n38 | |                 vec![String::from(\"\
    D-\")]\n39 | |             } else {\n40 | |                 vec![String::from(\"\
    D\")]\n41 | |             }\n   | |_____________^ expected `&str`, found struct\
    \ `Vec`\n   |\n   = note: expected reference `&str`\n                 found struct\
    \ `Vec<String>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more i"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n\n    //\
    \ The first letter grade is A+\n    letter_grades.push(String::from(\"A+\"));\n\
    \    \n    // The second letter grade is A \n    if grades[0] < 3.0 {\n      \
    \  letter_grades.push(String::from(\"A\"));\n    }\n    \n    // The third letter\
    \ grade is A- \n    if grades[0] > 2.7 {\n        letter_grades.push(String::from(\"\
    A-\"));\n    }\n\n    // The fourth letter grade is B+\n    if grades[1] < 3.0\
    \ {\n        letter_grades.push(String::from(\"B+\"));\n    }\n    \n    // The\
    \ fifth letter grade is B \n    if grades[1] > 2.7 {\n        letter_grades.push(String::from(\"\
    B\"));\n    }\n    \n    // The sixth letter grade is B-\n    if grades[1] < 2.3\
    \ {\n        letter_grades.push(String::from(\"B-\"));\n    }\n    \n    // The\
    \ seventh letter grade is C+\n    if grades[2] < 3.0 {\n        letter_grades.push(String::from(\"\
    C+\"));\n    }\n    \n    // The eighth letter grade is C\n    if grades[2] >\
    \ 2.7 {\n        letter_grades.push(String::from(\"C\"));\n    }\n    \n    //\
    \ The ninth letter grade is C-\n    if grades[2] < 2.3 {\n        letter_grades.push(String::from(\"\
    C-\"));\n    }\n    \n    // The tenth letter grade is D+\n    if grades[3] <\
    \ 3.0 {\n        letter_grades.push(String::from(\"D+\"));\n    }\n    \n    //\
    \ The eleventh letter grade is D \n    if grades[3] > 2.7 {\n        letter_grades.push(String::from(\"\
    D\"));\n    }\n    \n    // The twelfth letter grade is D-\n    if grades[3] <\
    \ 2.3 {\n        letter_grades.push(String::from(\"D-\"));\n    }\n    \n    //\
    \ The last letter grade is E\n    if grades[4] < 0.0 {\n        letter_grades.push(String::from(\"\
    E\"));\n    }\n\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A-\", \"B\", \"C+\", \"C-\", \"D+\", \"D-\"]`,\n right: `[\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp93p88ych.rs:94:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut temp_grade = grades.first().unwrap();\n\
    \    let mut grades_len = grades.len();\n    loop {\n        if temp_grade >=\
    \ 4.0 && grades_len > 0 {\n            letter_grades.push(String::from(\"A+\"\
    ));\n        }\n        temp_grade -= 3.0;\n        if temp_grade >= 3.0 && grades_len\
    \ > 0 {\n            letter_grades.push(String::from(\"A\"));\n        }\n   \
    \     temp_grade -= 2.0;\n        if temp_grade >= 2.0 && grades_len > 0 {\n \
    \           letter_grades.push(String::from(\"A-\"));\n        }\n        temp_grade\
    \ -= 1.7;\n        if temp_grade >= 1.7 && grades_len > 0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n        temp_grade -= 1.3;\n        if temp_grade >= 1.3 &&\
    \ grades_len > 0 {\n            letter_grades.push(String::from(\"B\"));\n   \
    \     }\n        temp_grade -= 0.7;\n        if temp_grade >= 0.7 && grades_len\
    \ > 0 {\n            letter_grades.push(String::from(\"B-\"));\n        }\n  \
    \      temp_grade -= 0.0;\n        if temp_grade >= 0.0 && grades_len > 0 {\n\
    \            letter_grades.push(String::from(\"C+\"));\n        }\n        temp_grade\
    \ -= 0.3;\n        if temp_grade >= 0.3 && grades_len > 0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n        temp_grade -= 0.0;\n        if temp_grade >= 0.0 &&\
    \ grades_len > 0 {\n            letter_grades.push(String::from(\"C-\"));\n  \
    \      }\n        temp_grade -= 0.0;\n        if temp_grade >= 0.0 && grades_len\
    \ > 0 {\n            letter_grades.push(String::from(\"D+\"));\n        }\n  \
    \      temp_grade -= 0.0;\n        if temp_grade >= 0.0 && grades_len > 0 {\n\
    \            letter_grades.push(String::from(\"D\"));\n        }\n        temp_grade\
    \ -= 0.0;\n        if temp_grade >= 0.0 && grades_len > 0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n        if grades_len == 0 {\n            break;\n       \
    \ }\n        if temp_grade < 0.0 {\n            break;\n        }\n        grades_len\
    \ -= 1;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwema9oh9.rs:29:26\n   |\n\
    29 |         if temp_grade >= 4.0 && grades_len > 0 {\n   |                  \
    \        ^^^\n   |                          |\n   |                          expected\
    \ `&f64`, found floating-point number\n   |                          help: consider\
    \ borrowing here: `&4.0`\n\nerror[E0368]: binary assignment operation `-=` cannot\
    \ be applied to type `&f64`\n  --> /tmp/tmpwema9oh9.rs:32:9\n   |\n32 |      \
    \   temp_grade -= 3.0;\n   |         ----------^^^^^^^\n   |         |\n   | \
    \        cannot use `-=` on type `&f64`\n   |\nhelp: `-=` can be used on `f64`,\
    \ you can dereference `temp_grade`\n   |\n32 |         *temp_grade -= 3.0;\n \
    \  |         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwema9oh9.rs:33:26\n\
    \   |\n33 |         if temp_grade >= 3.0 && grades_len > 0 {\n   |           \
    \               ^^^\n   |                          |\n   |                   \
    \       expected `&f64`, found floating-point number\n   |                   \
    \       help: consider borrowing here: `&3.0`\n\nerror[E0368]: binary assignment\
    \ operation `-=` cannot be applied to type `&f64`\n  --> /tmp/tmpwema9oh9.rs:36:9\n\
    \   |\n36 |         temp_grade -= 2.0;\n   |         ----------^^^^^^^\n   | \
    \        |\n   |         cannot use `-=` on type `&f64`\n   |\nhelp: `-=` can\
    \ be used on `f64`, you can dereference `temp_grade`\n   |\n36 |         *temp_grade\
    \ -= 2.0;\n   |         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwema9oh9.rs:37:26\n\
    \   |\n37 |         if temp_grade >= 2.0 && grades_len > 0 {\n   |           \
    \               ^^^\n   |                          |\n   |                   \
    \       expected `&f64`, found floating-point number\n   |                   \
    \       help: consider borrowing here: `&2.0`\n\nerror[E0368]: binary assignment\
    \ operation `-=` cannot be applied to type `&f64`\n  --> /tmp/tmpwema9oh9.rs:40:9\n\
    \   |\n40 |         temp_grade -= 1.7;\n   |         ----------^^^^^^^\n   | \
    \        |\n   |         cannot use `-=` on type `&f64`\n   |\nhelp: `-=` can\
    \ be used on `f64`, you can dereference `temp_grade`\n   |\n40 |        "
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades;\n    let mut letter_grades\
    \ = vec![];\n\n    if grades_copy.len() < 6 {\n        return letter_grades;\n\
    \    }\n\n    for grade in grades_copy {\n        if grade > 3.0 {\n         \
    \   letter_grades.push(String::from(\"B+\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 2.3\
    \ {\n            letter_grades.push(String::from(\"B-\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 1.7\
    \ {\n            letter_grades.push(String::from(\"C\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 1.0\
    \ {\n            letter_grades.push(String::from(\"D+\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 0.3\
    \ {\n            letter_grades.push(String::from(\"D-\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            grades_copy.remove(0);\n        }\n    }\n\n    if grades_copy.len()\
    \ > 0 {\n        letter_grades.push(String::from(\"E\"));\n    }\n\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `grades_copy`\n   --> /tmp/tmpyxzldl6z.rs:34:13\n\
    \    |\n24  |     let mut grades_copy = grades;\n    |         ---------------\
    \ move occurs because `grades_copy` has type `Vec<f64>`, which does not implement\
    \ the `Copy` trait\n...\n31  |     for grade in grades_copy {\n    |         \
    \         ----------- `grades_copy` moved due to this implicit call to `.into_iter()`\n\
    ...\n34  |             grades_copy.remove(0);\n    |             ^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `grades_copy`\nhelp: consider iterating over\
    \ a slice of the `Vec<f64>`'s content to avoid moving into the `for` loop\n  \
    \  |\n31  |     for grade in &grades_copy {\n    |                  +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = vec![String::from(\"E\")];\n\
    \    for grade in grades {\n        let grade = grade / 4.0;\n        let grade\
    \ = if grade > 3.7 { 4.0 - grade } else { grade };\n        let grade = grade\
    \ - 0.3;\n        let grade = if grade > 2.7 { 4.0 - grade } else { grade };\n\
    \        let grade = grade - 0.2;\n        let grade = if grade > 1.7 { 4.0 -\
    \ grade } else { grade };\n        let grade = grade - 0.1;\n        let grade\
    \ = if grade > 1.3 { 4.0 - grade } else { grade };\n        let grade = grade\
    \ - 0.07;\n        let grade = if grade > 1.0 { 4.0 - grade } else { grade };\n\
    \        let grade = grade - 0.05;\n        let grade = if grade > 0.0 { 4.0 -\
    \ grade } else { grade };\n        let grade = grade + 0.0;\n        let grade\
    \ = if grade < 0.0 { grade } else { grade };\n        letters.push(String::from(format!(\"\
    {:.1}\", grade)));\n    }\n    letters\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"3.7\", \"4.0\", \"-0.3\", \"-0.2\", \"3.8\"]`,\n right: `[\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpgs4rc_ko.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \n    for grade in grades {\n        if grade >= 4.0f64 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade <= 3.7f64 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade <= 3.3f64 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade <= 3.0f64 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade <= 2.7f64 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade <= 2.3f64 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.0f64 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade <= 1.7f64 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade <= 1.3f64 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade <= 1.0f64 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade <= 0.7f64 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade <= 0.0f64 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n\n    letter_grades\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A\", \"A\", \"A\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp5_o5hvk1.rs:61:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![\"\
    E\"];\n    }\n\n    let mut letter_grades: Vec<String> = vec![\"E\"];\n\n    for\
    \ grade in grades {\n        let letter: Result<String, String> = match grade\
    \ {\n            4.0 => Ok(\"A+\"),\n            > 3.7 => Ok(\"A\"),\n       \
    \     > 3.3 => Ok(\"A-\"),\n            > 3.0 => Ok(\"B+\"),\n            > 2.7\
    \ => Ok(\"B\"),\n            > 2.3 => Ok(\"B-\"),\n            > 2.0 => Ok(\"\
    C+\"),\n            > 1.7 => Ok(\"C\"),\n            > 1.3 => Ok(\"C-\"),\n  \
    \          > 1.0 => Ok(\"D+\"),\n            > 0.7 => Ok(\"D\"),\n           \
    \ _ => Err(format!(\"Invalid grade: {}\", grade)),\n        };\n\n        if let\
    \ Err(err) = letter {\n            std::fs::write(\"error.log\", err.to_string()).unwrap();\n\
    \            std::process::exit(1);\n        }\n\n        letter_grades.push(letter.unwrap());\n\
    \    }\n\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpc0wezeou.rs:33:13\n \
    \  |\n33 |             > 3.7 => Ok(\"A\"),\n   |             ^ expected pattern\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc0wezeou.rs:25:21\n   |\n25 |\
    \         return vec![\"E\"];\n   |                     ^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                     |\n   |        \
    \             expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc0wezeou.rs:28:47\n   |\n28 |     let mut letter_grades:\
    \ Vec<String> = vec![\"E\"];\n   |                                           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \                                     |\n   |                                \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc0wezeou.rs:32:23\n   |\n32 |             4.0 => Ok(\"\
    A+\"),\n   |                       ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                       |\n   |                       expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut result = vec![String::from(\"E\")];\n\
    \    for i in 0..grades.len() {\n        let grade = grades[i];\n        if grade\
    \ >= 3.0 {\n            result.push(String::from(\"A+\"));\n        } else if\
    \ grade >= 3.0 && grade < 3.7 {\n            result.push(String::from(\"A\"));\n\
    \        } else if grade >= 3.7 && grade < 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.3 && grade < 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 3.0 && grade < 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.7 && grade < 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.3 && grade < 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 2.0 && grade < 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.7 && grade < 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.3 && grade < 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 1.7 && grade < 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.7 && grade < 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"A+\", \"A+\", \"E\", \"E\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\"]`', /tmp/tmp4ne0i9zo.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades.iter() {\n        let mut min_grade = 4.0;\n        let\
    \ mut max_grade = 5.0;\n        let mut counter = 0;\n\n        while grade >\
    \ max_grade {\n            counter = 0;\n            max_grade += 2.0;\n     \
    \   }\n\n        while grade < min_grade {\n            counter = 0;\n       \
    \     min_grade -= 2.0;\n        }\n\n        grades_vec.push(String::from(format!(\"\
    {:+}\", min_grade)));\n        grades_vec.push(String::from(format!(\"{:+}\",\
    \ max_grade)));\n        grades_vec.push(String::from(format!(\"{:+}\", grade)));\n\
    \        grades_vec.push(String::from(format!(\"{:+}\", counter)));\n    }\n\n\
    \    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp391vy3_z.rs:30:23\n   |\n\
    30 |         while grade > max_grade {\n   |                       ^^^^^^^^^\n\
    \   |                       |\n   |                       expected `&f64`, found\
    \ floating-point number\n   |                       help: consider borrowing here:\
    \ `&max_grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp391vy3_z.rs:35:23\n\
    \   |\n35 |         while grade < min_grade {\n   |                       ^^^^^^^^^\n\
    \   |                       |\n   |                       expected `&f64`, found\
    \ floating-point number\n   |                       help: consider borrowing here:\
    \ `&min_grade`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grade: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade < 3.0 {\n            letter_grade.push(String::from(\"\
    A-\"));\n        } else if grade < 3.3 {\n            letter_grade.push(String::from(\"\
    A-\"));\n        } else if grade < 3.7 {\n            letter_grade.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 4.7 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 5.0 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 5.3 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 5.7 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 6.0 {\n            letter_grade.push(String::from(\"\
    B\"));\n        } else if grade < 6.3 {\n            letter_grade.push(String::from(\"\
    B\"));\n        } else if grade < 6.7 {\n            letter_grade.push(String::from(\"\
    B\"));\n        } else if grade < 7.0 {\n            letter_grade.push(String::from(\"\
    B-\"));\n        } else if grade < 7.3 {\n            letter_grade.push(String::from(\"\
    B-\"));\n        } else if grade < 7.7 {\n            letter_grade.push(String::from(\"\
    B-\"));\n        } else if grade < 8.0 {\n            letter_grade.push(String::from(\"\
    C-\"));\n        } else if grade < 8.3 {\n            letter_grade.push(String::from(\"\
    C-\"));\n        } else if grade < 8.7 {\n            letter_grade.push(String::from(\"\
    C-\"));\n        } else if grade < 9.0 {\n            letter_grade.push(String::from(\"\
    C+\"));\n        } else if grade < 9.3 {\n            letter_grade.push(String::from(\"\
    C+\"));\n        } else if grade < 9.7 {\n            letter_grade.push(String::from(\"\
    C+\"));\n        } else if grade < 10.0 {\n            letter_grade.push(String::from(\"\
    C\"));\n        } else if grade < 10.3 {\n            letter_grade.push(\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpos5hk_20.rs:82:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut letter_grade: Vec<String> = vec![];\n25 |     for grade in grades\
    \ {\n   |                         - unclosed delimiter\n...\n70 |         } else\
    \ if grade < 10.3 {\n   |                                - this delimiter might\
    \ not be properly closed...\n71 |             letter_grade.push(\n72 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n82 | }\n   |\
    \   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpos5hk_20.rs:71:30\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n71 |             letter_grade.push(\n   |    \
    \                          ^ unclosed delimiter\n72 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0061]: this function takes 1 argument but 0 arguments were\
    \ supplied\n    --> /tmp/tmpos5hk_20.rs:71:26\n     |\n71   |             letter_grade.push(\n\
    \     |                          ^^^^- supplied 0 arguments\n     |          \
    \                |\n     |                          expected 1 argument\n    \
    \ |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpos5hk_20.rs:25:5\n   |\n23 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n24 |      \
    \ let mut letter_grade: Vec<String> = vec![];\n25 | /     for grade in grades\
    \ {\n26 | |         if grade < 3.0 {\n27 | |             letter_grade.push(String::from(\"\
    A-\"));\n28 | |         } else if grade < 3.3 {\n...  |\n81 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n82 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit ty"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total = grades.reduce((0.0, 0.0)).unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    for grade in grades {\n        let (min_grade, max_grade) = grades.iter().min().unwrap();\n\
    \        let grade = grade / max_grade;\n        let letter_grade = match grade\
    \ {\n            4.0 => 'A+',\n            > 3.7 => 'A',\n            > 3.3 =>\
    \ 'A-',\n            > 3.0 => 'B+',\n            > 2.7 => 'B',\n            >\
    \ 2.3 => 'B-',\n            > 2.0 => 'C+',\n            > 1.7 => 'C',\n      \
    \      > 1.3 => 'C-',\n            > 1.0 => 'D+',\n            > 0.7 => 'D',\n\
    \            > 0.0 => 'D-',\n            0.0 => 'E'\n        };\n        for _\
    \ in 0..letter_grade.len() {\n            total += 1.0;\n        }\n        if\
    \ total == max_grade {\n            letter_grades.push(letter_grade);\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpm_0v9pp5.rs:31:23\n\
    \   |\n31 |             4.0 => 'A+',\n   |                       ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades = grades.to_owned();\n    let mut\
    \ grades_vector = vec![];\n    let mut sum = 0.0;\n    let mut total = 0.0;\n\
    \    let mut temp_grade = grades.iter().find(|&grade| grade < 4.0).unwrap();\n\
    \    for grade in grades.iter() {\n        let grade = grade - temp_grade;\n \
    \       temp_grade = grade;\n        sum += grade;\n        total += grade;\n\
    \        if grade >= 2.0 && grade < 3.0 {\n            grades_vector.push(String::from(\"\
    A-\"));\n        }\n        if grade >= 3.0 && grade < 4.0 {\n            grades_vector.push(String::from(\"\
    A+\"));\n        }\n        if grade >= 4.0 && grade < 5.0 {\n            grades_vector.push(String::from(\"\
    B+\"));\n        }\n        if grade >= 5.0 && grade < 6.0 {\n            grades_vector.push(String::from(\"\
    B\"));\n        }\n        if grade >= 6.0 && grade < 7.0 {\n            grades_vector.push(String::from(\"\
    B-\"));\n        }\n        if grade >= 7.0 && grade < 8.0 {\n            grades_vector.push(String::from(\"\
    C+\"));\n        }\n        if grade >= 8.0 && grade < 9.0 {\n            grades_vector.push(String::from(\"\
    C\"));\n        }\n        if grade >= 9.0 && grade < 10.0 {\n            grades_vector.push(String::from(\"\
    C-\"));\n        }\n        if grade >= 10.0 && grade < 11.0 {\n            grades_vector.push(String::from(\"\
    D+\"));\n        }\n        if grade >= 11.0 && grade < 12.0 {\n            grades_vector.push(String::from(\"\
    D\"));\n        }\n        if grade >= 12.0 && grade < 13.0 {\n            grades_vector.push(String::from(\"\
    D-\"));\n        }\n        if grade >= 13.0 && grade < 14.0 {\n            grades_vector.push(String::from(\"\
    E\"));\n        }\n        if grade >= 14.0 {\n            grades_vector.push(String::from(\"\
    F\"));\n        }\n    }\n    grades_vector.push(String::from(\"F\"));\n    if\
    \ sum == total {\n        grades_vector\n    }\n    else {\n        grades_vector\n\
    \    }\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_7wu06m.rs:28:62\n   |\n\
    28 |     let mut temp_grade = grades.iter().find(|&grade| grade < 4.0).unwrap();\n\
    \   |                                                              ^^^\n   | \
    \                                                             |\n   |        \
    \                                                      expected `&f64`, found\
    \ floating-point number\n   |                                                \
    \              help: consider borrowing here: `&4.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1_7wu06m.rs:31:22\n   |\n28 |     let mut temp_grade =\
    \ grades.iter().find(|&grade| grade < 4.0).unwrap();\n   |                   \
    \       ------------------------------------------------- expected due to this\
    \ value\n...\n31 |         temp_grade = grade;\n   |                      ^^^^^\n\
    \   |                      |\n   |                      expected `&f64`, found\
    \ `f64`\n   |                      help: consider borrowing here: `&grade`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = Vec::new();\n    let mut letter_grade_table:\
    \ Vec<Vec<u8>> = vec![\n        vec![1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],\n\
    \        vec![0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpx8_59nr2.rs:69:13\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n69 |         vec![0,0,0,0,0,0,0,0,0,0,0,\n   |\
    \             ^ unclosed delimiter\n70 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  -->\
    \ /tmp/tmpx8_59nr2.rs:70:1\n   |\n70 | }\n   | ^ expected one of `.`, `;`, `?`,\
    \ `else`, or an operator\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades\n        .iter()\n        .zip(grades.iter().cloned())\n\
    \        .map(|(a, b)| *a == *b ? \"C\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.01 ? \"D\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.1 ? \"F\" : (*a\
    \ >= *b && (*a - *b).abs().cmp(&0.00) < 0.2 ? \"F+\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.3 ? \"F-\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.4 ? \"B-\" : (*a\
    \ >= *b && (*a - *b).abs().cmp(&0.00) < 0.5 ? \"B-\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.6 ? \"A-\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.7 ? \"A-\" : (*a\
    \ >= *b && (*a - *b).abs().cmp(&0.00) < 0.8 ? \"A+\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.9 ? \"A+\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 1.0 ? \"A\" : \"\"\
    ))))))\n        .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected mut or const in raw pointer type\n  --> /tmp/tmpg1n57v6l.rs:27:41\n\
    \   |\n27 | ...   .map(|(a, b)| *a == *b ? \"C\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.01 ? \"D\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.1...\n   |    \
    \                                   ^ expected mut or const in raw pointer type\n\
    \   |\n   = help: use `*mut T` or `*const T` as appropriate\n\nerror: expected\
    \ one of `!`, `(`, `)`, `,`, `::`, or `<`, found `>=`\n  --> /tmp/tmpg1n57v6l.rs:27:44\n\
    \   |\n27 | ...   .map(|(a, b)| *a == *b ? \"C\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.01 ? \"D\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.1...\n   |    \
    \                                -     ^^ expected one of `!`, `(`, `)`, `,`,\
    \ `::`, or `<`\n   |                                    |\n   |              \
    \                      tried to parse a type due to this\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpg1n57v6l.rs:27:259\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n27 |     \
    \    .map(|(a, b)| *a == *b ? \"C\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.01 ? \"D\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.1 ? \"F\" : (*a\
    \ >= *b && (*a - *b).abs().cmp(&0.00) < 0.2 ? \"F+\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.3 ? \"F-\" : (*a ...\n   |                                             \
    \                                                                            \
    \                                                                            \
    \                                                              ^ unclosed delimiter\n\
    28 |         .collect()\n29 | }\n   | ^ mismatched closing delimiter\n\nerror:\
    \ expected one of `)`, `,`, `.`, `?`, or an operator, found `\"C\"`\n  --> /tmp/tmpg1n57v6l.rs:27:34\n\
    \   |\n27 | ...   .map(|(a, b)| *a == *b ? \"C\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.01 ? \"D\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.1...\n   |    \
    \                           -^^^ expected one of `)`, `,`, `.`,"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_copy = grades.clone();\n    let mut\
    \ letter_grade = vec![String::from(\"\")];\n    while grades_copy.len() > 0 {\n\
    \        let mut grade = grades_copy.pop().unwrap();\n        let mut grade_copy\
    \ = grade;\n        \n        if grade > 3.0 {\n            if grade > 3.7 {\n\
    \                if grade > 3.3 {\n                    if grade > 3.0 {\n    \
    \                    if grade > 2.7 {\n                            if grade >\
    \ 2.3 {\n                                if grade > 2.0 {\n                  \
    \                  if grade > 1.7 {\n                                        if\
    \ grade > 1.0 {\n                                            if grade > 0.7 {\n\
    \                                                if grade > 0.0 {\n          \
    \                                          letter_grade.push(String::from(\"D-\"\
    ));\n                                                    continue\n          \
    \                                      }\n                                   \
    \         }\n                                        }\n                     \
    \               }\n                                }\n                       \
    \     }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        \n        if grade > 2.0 {\n            if\
    \ grade > 2.7 {\n                if grade > 2.3 {\n                    if grade\
    \ > 2.0 {\n                        if grade > 1.7 {\n                        \
    \    if grade > 1.0 {\n                                letter_grade.push(String::from(\"\
    D+\"));\n                                continue\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n        \n        if grade > 1.0 {\n            if grade\
    \ > 1.7 {\n                if grade > 1.3 {\n                    if grade > 1.0\
    \ {\n                        if grade > 0.7 {\n                            if\
    \ grade > 0.0 {\n                                letter_grade.push(String::from(\"\
    D\"));\n                                continue\n                           \
    \ }\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        \n        if grade > 0.7 {\n            if grade\
    \ > 0.0 {\n                letter_grade.push(String::from(\"D-\"));\n        \
    \        continue\n            }\n        }\n        \n        if grade > 0.0\
    \ {\n            letter_grade.push(String::from(\"E\"));\n            continue\n\
    \        }\n        \n        if grade < 0.0 {\n            letter_grade.push(String::from(\"\
    F\"));\n            continue\n        }\n        \n        if grade < 1.0 {\n\
    \            letter_grade.push(String::from(\"F-\"));\n            continue\n\
    \        }\n        \n        if grade < 2.0 {\n            letter_grade.push(String::from(\"\
    F+\"));\n            continue\n        }\n        \n        if grade < 3.0 {\n\
    \            letter_grade.push(String::from(\"F\"));\n            continue\n \
    \       }\n        \n        if grade < 3.7 {\n            letter_grade.push(String::from(\"\
    F\"));\n            continue\n        }\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpyesknymc.rs:132:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n26  |     while grades_copy.len() > 0 {\n    |                          \
    \       - this delimiter might not be properly closed...\n...\n122 | }\n    |\
    \ - ...as it matches this but it has different indentation\n...\n132 | }\n   \
    \ |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyesknymc.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grade = Vec::new();\n    for\
    \ grade in grades {\n        if grade > 4.0 {\n            letter_grade.push(\"\
    A+\");\n        }\n        if grade > 3.7 {\n            letter_grade.push(\"\
    A\");\n        }\n        if grade > 3.3 {\n            letter_grade.push(\"A\"\
    );\n        }\n        if grade > 3.0 {\n            letter_grade.push(\"B+\"\
    );\n        }\n        if grade > 2.7 {\n            letter_grade.push(\"B\");\n\
    \        }\n        if grade > 2.3 {\n            letter_grade.push(\"B\");\n\
    \        }\n        if grade > 2.0 {\n            letter_grade.push(\"C+\");\n\
    \        }\n        if grade > 1.7 {\n            letter_grade.push(\"C\");\n\
    \        }\n        if grade > 1.3 {\n            letter_grade.push(\"C\");\n\
    \        }\n        if grade > 1.0 {\n            letter_grade.push(\"D+\");\n\
    \        }\n        if grade > 0.7 {\n            letter_grade.push(\"D\");\n\
    \        }\n        if grade > 0.0 {\n            letter_grade.push(\"D\");\n\
    \        }\n        if grade <= 0.0 {\n            letter_grade.push(\"E\");\n\
    \        }\n    }\n    letter_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl1ui8wam.rs:66:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n66 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades.iter().cloned() {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"D-\"));\n\
    \        }\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"D-\", \"A\", \"A+\", \"A+\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpnlxmhjtw.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grade = vec![];\n\n    for grade\
    \ in grades {\n        if grade > 4.0 && grade < 5.0 {\n            letter_grade.push(\"\
    A+\");\n        } else if grade > 3.0 && grade < 4.0 {\n            letter_grade.push(\"\
    A\");\n        } else if grade > 2.0 && grade < 3.0 {\n            letter_grade.push(\"\
    A-\");\n        } else if grade > 1.7 && grade < 2.0 {\n            letter_grade.push(\"\
    B+\");\n        } else if grade > 1.3 && grade < 1.7 {\n            letter_grade.push(\"\
    B\");\n        } else if grade > 0.7 && grade < 1.3 {\n            letter_grade.push(\"\
    B-\");\n        } else if grade > 0.0 && grade < 0.7 {\n            letter_grade.push(\"\
    C+\");\n        } else if grade > -0.7 && grade < -0.0 {\n            letter_grade.push(\"\
    C\");\n        } else if grade > -1.3 && grade < -0.7 {\n            letter_grade.push(\"\
    C-\");\n        } else if grade > -1.0 && grade < -1.3 {\n            letter_grade.push(\"\
    D+\");\n        } else if grade > -1.7 && grade < -1.0 {\n            letter_grade.push(\"\
    D\");\n        } else if grade < -1.0 {\n            letter_grade.push(\"D-\"\
    );\n        } else {\n            letter_grade.push(\"E\");\n        }\n    }\n\
    \n    letter_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv9v1z6f7.rs:56:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n56 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades.iter() {\n        letter_grades.push(match grade {\n       \
    \     4 => \"A+\".to_string(),\n            3.7 => \"A\".to_string(),\n      \
    \      3.3 => \"A+\".to_string(),\n            3.0 => \"B+\".to_string(),\n  \
    \          2.7 => \"B\".to_string(),\n            2.3 => \"B-\".to_string(),\n\
    \            2.0 => \"C+\".to_string(),\n            1.7 => \"C\".to_string(),\n\
    \            1.3 => \"C-\".to_string(),\n            1.0 => \"D+\".to_string(),\n\
    \            0.7 => \"D\".to_string(),\n            0.0 => \"D-\".to_string(),\n\
    \            0.0 => \"E\".to_string()\n        })\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz_qghzs1.rs:27:13\n   |\n\
    26 |         letter_grades.push(match grade {\n   |                          \
    \        ----- this expression has type `&f64`\n27 |             4 => \"A+\".to_string(),\n\
    \   |             ^\n   |             |\n   |             expected `f64`, found\
    \ integer\n   |             help: use a float literal: `4.0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011030
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters: Vec<String> = vec![];\n\n \
    \   for grade in grades.iter() {\n        match grade {\n            4.0 => letters.push(\"\
    A+\".to_owned()),\n            3.7 => letters.push(\"A\".to_owned()),\n      \
    \      3.3 => letters.push(\"A-\".to_owned()),\n            3.0 => letters.push(\"\
    B+\".to_owned()),\n            2.7 => letters.push(\"B\".to_owned()),\n      \
    \      2.3 => letters.push(\"B-\".to_owned()),\n            2.0 => letters.push(\"\
    C+\".to_owned()),\n            1.7 => letters.push(\"C\".to_owned()),\n      \
    \      1.3 => letters.push(\"C-\".to_owned()),\n            1.0 => letters.push(\"\
    D+\".to_owned()),\n            0.7 => letters.push(\"D\".to_owned()),\n      \
    \      0.0 => letters.push(\"D-\".to_owned()),\n            _ => letters.push(\"\
    E\".to_owned()),\n        }\n    }\n    return letters\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp631f8a8e.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_len = grades.len();\n    let\
    \ mut letters = vec![];\n\n    grades\n        .iter()\n        .try_for_each(|grade|\
    \ {\n            if grade < 3.0 {\n                letters.push(String::from(\"\
    A+\"));\n            } else if grade < 3.3 {\n                letters.push(String::from(\"\
    A-\"));\n            } else if grade < 3.7 {\n                letters.push(String::from(\"\
    A\"));\n            } else if grade < 4.0 {\n                letters.push(String::from(\"\
    B+\"));\n            } else if grade < 4.3 {\n                letters.push(String::from(\"\
    B\"));\n            } else if grade < 4.7 {\n                letters.push(String::from(\"\
    B-\"));\n            } else if grade < 5.0 {\n                letters.push(String::from(\"\
    C+\"));\n            } else if grade < 5.3 {\n                letters.push(String::from(\"\
    C\"));\n            } else if grade < 5.7 {\n                letters.push(String::from(\"\
    C-\"));\n            } else if grade < 6.0 {\n                letters.push(String::from(\"\
    D+\"));\n            } else if grade < 6.3 {\n                letters.push(String::from(\"\
    D\"));\n            } else if grade < 6.7 {\n                letters.push(String::from(\"\
    D-\"));\n            } else if grade < 7.0 {\n                letters.push(String::from(\"\
    E\"));\n            } else {\n                letters.push(String::from(\"F\"\
    ));\n            }\n        });\n    letters\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxujkbqab.rs:30:24\n   |\n\
    30 |             if grade < 3.0 {\n   |                        ^^^\n   |     \
    \                   |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&3.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpxujkbqab.rs:32:31\n   |\n32 |  \
    \           } else if grade < 3.3 {\n   |                               ^^^\n\
    \   |                               |\n   |                               expected\
    \ `&f64`, found floating-point number\n   |                               help:\
    \ consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxujkbqab.rs:34:31\n\
    \   |\n34 |             } else if grade < 3.7 {\n   |                        \
    \       ^^^\n   |                               |\n   |                      \
    \         expected `&f64`, found floating-point number\n   |                 \
    \              help: consider borrowing here: `&3.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxujkbqab.rs:36:31\n   |\n36 |             } else if grade\
    \ < 4.0 {\n   |                               ^^^\n   |                      \
    \         |\n   |                               expected `&f64`, found floating-point\
    \ number\n   |                               help: consider borrowing here: `&4.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxujkbqab.rs:38:31\n   |\n38 |\
    \             } else if grade < 4.3 {\n   |                               ^^^\n\
    \   |                               |\n   |                               expected\
    \ `&f64`, found floating-point number\n   |                               help:\
    \ consider borrowing here: `&4.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxujkbqab.rs:40:31\n\
    \   |\n40 |             } else if grade < 4.7 {\n   |                        \
    \       ^^^\n   |                               |\n   |                      \
    \         expected `&f64`, found floating-point number\n   |                 \
    \              help: consider borrowing here: `&4.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxujk"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_len\
    \ = grades.len();\n    let mut letters = Vec::new();\n    let mut grade = grades[0];\n\
    \    let mut i = 1;\n    while i < grades_len {\n        letters.push(\"D-\");\n\
    \        if grade <= grades[i] {\n            letters.push(\"A\");\n         \
    \   i += 1;\n            continue;\n        }\n        if grade <= grades[i] -\
    \ 3 && grade > grades[i] - 1 {\n            letters.push(\"A-\");\n          \
    \  i += 1;\n            continue;\n        }\n        if grade <= grades[i] -\
    \ 2 && grade > grades[i] - 1 {\n            letters.push(\"B+\");\n          \
    \  i += 1;\n            continue;\n        }\n        if grade <= grades[i] -\
    \ 1 && grade > grades[i] - 0 {\n            letters.push(\"B\");\n           \
    \ i += 1;\n            continue;\n        }\n        if grade <= grades[i] - 0\
    \ && grade > grades[i] - 0 {\n            letters.push(\"B-\");\n            i\
    \ += 1;\n            continue;\n        }\n        if grade <= grades[i] - 1 &&\
    \ grade > grades[i] - 0 {\n            letters.push(\"C+\");\n            i +=\
    \ 1;\n            continue;\n        }\n        if grade <= grades[i] - 2 && grade\
    \ > grades[i] - 0 {\n            letters.push(\"C\");\n            i += 1;\n \
    \           continue;\n        }\n        if grade <= grades[i] - 3 && grade >\
    \ grades[i] - 0 {\n            letters.push(\"C-\");\n            i += 1;\n  \
    \          continue;\n        }\n        if grade <= grades[i] - 4 && grade >\
    \ grades[i] - 0 {\n            letters.push(\"D\");\n            i += 1;\n   \
    \         continue;\n        }\n        letters.push(\"E\");\n        i += 1;\n\
    \    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `{integer}` from `f64`\n  --> /tmp/tmpftf9t4h_.rs:36:31\n\
    \   |\n36 |         if grade <= grades[i] - 3 && grade > grades[i] - 1 {\n   |\
    \                               ^ no implementation for `f64 - {integer}`\n  \
    \ |\n   = help: the trait `Sub<{integer}>` is not implemented for `f64`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n36 |         if\
    \ grade <= grades[i] - 3.0 && grade > grades[i] - 1 {\n   |                  \
    \                ++\n\nerror[E0277]: cannot subtract `{integer}` from `f64`\n\
    \  --> /tmp/tmpftf9t4h_.rs:36:56\n   |\n36 |         if grade <= grades[i] - 3\
    \ && grade > grades[i] - 1 {\n   |                                           \
    \             ^ no implementation for `f64 - {integer}`\n   |\n   = help: the\
    \ trait `Sub<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n36 |         if grade\
    \ <= grades[i] - 3 && grade > grades[i] - 1.0 {\n   |                        \
    \                                   ++\n\nerror[E0277]: cannot subtract `{integer}`\
    \ from `f64`\n  --> /tmp/tmpftf9t4h_.rs:41:31\n   |\n41 |         if grade <=\
    \ grades[i] - 2 && grade > grades[i] - 1 {\n   |                             \
    \  ^ no implementation for `f64 - {integer}`\n   |\n   = help: the trait `Sub<{integ"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\
    \    let mut sum: f64 = 0.0;\n    for grade in grades {\n        sum += grade;\n\
    \        letter_grades.push(String::from(format!(\"{}+\", sum)));\n        sum\
    \ += 1.0;\n        letter_grades.push(String::from(format!(\"{}\", sum)));\n \
    \   }\n    let mut count = 0;\n    letter_grades.push(String::from(\"E\"));\n\
    \    for grade in grades {\n        if grade < 0.0 {\n            count += 1;\n\
    \        }\n        if count == letter_grades.len() {\n            letter_grades.push(String::from(\"\
    E\"));\n            count = 0;\n        }\n    }\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `grades`\n   --> /tmp/tmp4vif86gj.rs:34:18\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                           ------ move occurs because `grades` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n26  |     for grade in grades\
    \ {\n    |                  ------ `grades` moved due to this implicit call to\
    \ `.into_iter()`\n...\n34  |     for grade in grades {\n    |                \
    \  ^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `grades`\nhelp: consider iterating over\
    \ a slice of the `Vec<f64>`'s content to avoid moving into the `for` loop\n  \
    \  |\n26  |     for grade in &grades {\n    |                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = Vec::new();\n\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            grades_string.push(String::from(\"\
    A+\"));\n        } else if grade < 3.7 && grade > 3.0 {\n            grades_string.push(String::from(\"\
    A\"));\n        } else if grade < 3.3 && grade > 2.7 {\n            grades_string.push(String::from(\"\
    A-\"));\n        } else if grade < 3.0 && grade > 2.3 {\n            grades_string.push(String::from(\"\
    B+\"));\n        } else if grade < 2.7 && grade > 2.0 {\n            grades_string.push(String::from(\"\
    B\"));\n        } else if grade < 2.3 && grade > 1.7 {\n            grades_string.push(String::from(\"\
    B-\"));\n        } else if grade < 2.0 && grade > 1.0 {\n            grades_string.push(String::from(\"\
    C+\"));\n        } else if grade < 1.7 && grade > 0.7 {\n            grades_string.push(String::from(\"\
    C\"));\n        } else if grade < 1.3 && grade > 0.0 {\n            grades_string.push(String::from(\"\
    C-\"));\n        } else if grade < 1.0 {\n            grades_string.push(String::from(\"\
    D+\"));\n        } else if grade < 0.7 {\n            grades_string.push(String::from(\"\
    D\"));\n        } else if grade < 0.0 {\n            grades_string.push(String::from(\"\
    D-\"));\n        } else {\n            grades_string.push(String::from(\"E\"));\n\
    \        }\n    }\n\n    grades_string\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A-\", \"C+\", \"B-\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmph0y4xts0.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_slice = grades.to_owned();\n\
    \    let mut letter_grades = Vec::new();\n\n    while grades_slice.len() > 0 {\n\
    \        let grade = grades_slice.pop().unwrap();\n        let grades_remaining\
    \ = grades_slice;\n\n        if grade > 0 && grade <= 1.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n\n        if grade > 1 && grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        }\n\n        if grade >= 3.1 && grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n\n        if grade > 3.7 && grade <= 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n\n        if grade > 4.0 && grade < 5.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        }\n\n        if grade > 5.0 && grade <= 6.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n\n        if grade > 6.0 && grade < 7.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        }\n\n        if grade > 7.0 && grade < 8.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n\n        if grade > 8.0 && grade <= 9.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        }\n\n        if grade > 9.0 && grade <= 10.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n\n        if grade > 10.0 && grade < 11.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        }\n\n        if grade > 11.0 && grade <= 12.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n\n        if grade > 12.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n    }\n\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4a9z75xc.rs:31:20\n   |\n\
    31 |         if grade > 0 && grade <= 1.0 {\n   |                    ^\n   | \
    \                   |\n   |                    expected `f64`, found integer\n\
    \   |                    help: use a float literal: `0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4a9z75xc.rs:35:20\n   |\n35 |         if grade > 1 && grade\
    \ < 3.0 {\n   |                    ^\n   |                    |\n   |        \
    \            expected `f64`, found integer\n   |                    help: use\
    \ a float literal: `1.0`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    grades.iter().map(|x| match x {\n        x if\
    \ x < 3.0 => \"A+\".to_string(),\n        x if x < 3.7 => \"A\".to_string(),\n\
    \        x if x < 3.3 => \"A-\".to_string(),\n        x if x < 3.0 => \"B+\".to_string(),\n\
    \        x if x < 2.7 => \"B\".to_string(),\n        x if x < 2.3 => \"B-\".to_string(),\n\
    \        x if x < 2.0 => \"C+\".to_string(),\n        x if x < 1.7 => \"C\".to_string(),\n\
    \        x if x < 1.3 => \"C-\".to_string(),\n        x if x < 1.0 => \"D+\".to_string(),\n\
    \        x if x < 0.7 => \"D\".to_string(),\n        x if x < 0.0 => \"D-\".to_string(),\n\
    \        x if x == 0.0 => \"E\".to_string(),\n        _ => \"\".to_string(),\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwq2t56e4.rs:25:18\n   |\n\
    25 |         x if x < 3.0 => \"A+\".to_string(),\n   |                  ^^^\n\
    \   |                  |\n   |                  expected `&f64`, found floating-point\
    \ number\n   |                  help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwq2t56e4.rs:26:18\n   |\n26 |         x if x\
    \ < 3.7 => \"A\".to_string(),\n   |                  ^^^\n   |               \
    \   |\n   |                  expected `&f64`, found floating-point number\n  \
    \ |                  help: consider borrowing here: `&3.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwq2t56e4.rs:27:18\n   |\n27 |         x if x < 3.3 => \"\
    A-\".to_string(),\n   |                  ^^^\n   |                  |\n   |  \
    \                expected `&f64`, found floating-point number\n   |          \
    \        help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwq2t56e4.rs:28:18\n   |\n28 |         x if x < 3.0 => \"B+\".to_string(),\n\
    \   |                  ^^^\n   |                  |\n   |                  expected\
    \ `&f64`, found floating-point number\n   |                  help: consider borrowing\
    \ here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwq2t56e4.rs:29:18\n\
    \   |\n29 |         x if x < 2.7 => \"B\".to_string(),\n   |                 \
    \ ^^^\n   |                  |\n   |                  expected `&f64`, found floating-point\
    \ number\n   |                  help: consider borrowing here: `&2.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwq2t56e4.rs:30:18\n   |\n30 |         x if x\
    \ < 2.3 => \"B-\".to_string(),\n   |                  ^^^\n   |              \
    \    |\n   |                  expected `&f64`, found floating-point number\n \
    \  |                  help: consider borrowing here: `&2.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwq2t56e4.rs:31:18\n   |\n31 |         x if x < 2.0 => \"\
    C+\".to_string(),\n   |                  ^^^\n   |                  |\n   |  \
    \                expected `&f64`, found floating-point number\n   |          \
    \        help: consider borrowing here: `&2.0`\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![\"A+\", \"B\",\
    \ \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    for i in\
    \ 0..grades.len() {\n        let mut letter_grade = String::from(\"\");\n    \
    \    if grades[i] > 3.0 {\n            letter_grade = \"A\";\n        } else if\
    \ grades[i] > 2.7 {\n            letter_grade = \"B\";\n        } else if grades[i]\
    \ > 2.3 {\n            letter_grade = \"B-\";\n        } else if grades[i] > 1.9\
    \ {\n            letter_grade = \"C+\";\n        } else if grades[i] > 1.3 {\n\
    \            letter_grade = \"C\";\n        } else if grades[i] > 0.7 {\n    \
    \        letter_grade = \"C-\";\n        } else if grades[i] > 0.3 {\n       \
    \     letter_grade = \"D+\";\n        } else if grades[i] > 0.0 {\n          \
    \  letter_grade = \"D\";\n        } else {\n            letter_grade = \"D-\"\
    ;\n        }\n        letter_grades.push(letter_grade);\n    }\n    return letter_grades;\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph_n9_xib.rs:28:28\n   |\n\
    26 |         let mut letter_grade = String::from(\"\");\n   |                \
    \                ---------------- expected due to this value\n27 |         if\
    \ grades[i] > 3.0 {\n28 |             letter_grade = \"A\";\n   |            \
    \                ^^^- help: try using a conversion method: `.to_string()`\n  \
    \ |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph_n9_xib.rs:30:28\n\
    \   |\n26 |         let mut letter_grade = String::from(\"\");\n   |         \
    \                       ---------------- expected due to this value\n...\n30 |\
    \             letter_grade = \"B\";\n   |                            ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph_n9_xib.rs:32:28\n   |\n26 |\
    \         let mut letter_grade = String::from(\"\");\n   |                   \
    \             ---------------- expected due to this value\n...\n32 |         \
    \    letter_grade = \"B-\";\n   |                            ^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                            |\n   |\
    \                            expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph_n9_xib.rs:34:28\n   |\n26 |         let mut\
    \ letter_grade = String::from(\"\");\n   |                                ----------------\
    \ expected due to this value\n...\n34 |             letter_grade = \"C+\";\n \
    \  |                            ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph_n9_xib.rs:36:28\n\
    \   |\n26 |         let mut letter_grade = String::from(\"\");\n   |         \
    \                       ---------------- expected due to this value\n...\n36 |\
    \             letter_grade = \"C\";\n   |               "
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_copy = grades;\n    grades_copy.pop();\n\
    \    let mut grades_copy = grades_copy.iter();\n    let mut letters: Vec<String>\
    \ = vec![String::from(\"\")];\n    let mut current_gps = 0.0;\n    let mut current_letter:\
    \ String = String::from(\"\");\n    while let Some(grade_num) = grades_copy.pop()\
    \ {\n        if grade_num > current_gps {\n            current_gps = grade_num;\n\
    \        }\n        if grade_num >= 3.3 {\n            current_letter = String::from(\"\
    \");\n            current_gps = grade_num;\n        }\n        letters.push((current_gps\
    \ as f64).to_string() + \"(\" + current_letter + \")\");\n    }\n    letters\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pop` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpx0w5uphl.rs:30:45\n   |\n30 |     while\
    \ let Some(grade_num) = grades_copy.pop() {\n   |                            \
    \                 ^^^ method not found in `std::slice::Iter<'_, f64>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx0w5uphl.rs:38:63\n   |\n38 |         letters.push((current_gps\
    \ as f64).to_string() + \"(\" + current_letter + \")\");\n   |               \
    \                                                ^^^^^^^^^^^^^^\n   |        \
    \                                                       |\n   |              \
    \                                                 expected `&str`, found struct\
    \ `String`\n   |                                                             \
    \  help: consider borrowing here: `&current_letter`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades: Vec<f64> = grades.iter().collect();\n\
    \    let num_grades = grades.len();\n    let mut letter_grades = vec![String::new();\
    \ num_grades];\n    if num_grades > 0 {\n        let mut current_grade = grades[0];\n\
    \        let mut current_letter_grade = String::new();\n        for i in 1..num_grades\
    \ {\n            if current_grade < grades[i] {\n                if current_letter_grade\
    \ != String::new() {\n                    letter_grades[i] = current_letter_grade;\n\
    \                }\n                let mut new_letter_grade = String::new();\n\
    \                new_letter_grade.push_str(current_grade.to_string());\n     \
    \           new_letter_grade.push_str(\" \");\n                new_letter_grade.push_str(\"\
    A-\");\n                current_letter_grade = new_letter_grade;\n           \
    \     current_grade = grades[i];\n            } else {\n                current_letter_grade.push_str(\"\
    \ \");\n                current_grade -= grades[i];\n            }\n        }\n\
    \        if current_letter_grade != String::new() {\n            letter_grades[i]\
    \ = current_letter_grade;\n        }\n    }\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpwhd2dsgo.rs:47:27\n\
    \   |\n47 |             letter_grades[i] = current_letter_grade;\n   |       \
    \                    ^ not found in this scope\n\nerror[E0277]: a value of type\
    \ `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n \
    \   --> /tmp/tmpwhd2dsgo.rs:24:42\n     |\n24   |     let grades: Vec<f64> = grades.iter().collect();\n\
    \     |                                          ^^^^^^^ value of type `Vec<f64>`\
    \ cannot be built from `std::iter::Iterator<Item=&f64>`\n     |\n     = help:\
    \ the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwhd2dsgo.rs:36:43\n\
    \   |\n36 |                 new_letter_grade.push_str(current_grade.to_string());\n\
    \   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  \
    \ |                                           |\n   |                        \
    \                   expected `&str`, found struct `String`\n   |             \
    \                              help: consider borrowing here: `&current_grade.to_string()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grade: Vec<String> = Vec::new();\n\
    \n    grades.iter().for_each(|grade| {\n        let mut letter_grade: String =\
    \ String::new();\n\n        if grade >= 4.0 && grade < 5.0 {\n            letter_grade\
    \ += \"A+\";\n        } else if grade >= 3.7 && grade < 4.0 {\n            letter_grade\
    \ += \"A\";\n        } else if grade >= 3.3 && grade < 3.7 {\n            letter_grade\
    \ += \"A-\";\n        } else if grade >= 3.0 && grade < 3.3 {\n            letter_grade\
    \ += \"B+\";\n        } else if grade >= 2.7 && grade < 3.0 {\n            letter_grade\
    \ += \"B\";\n        } else if grade >= 2.3 && grade < 2.7 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade >= 2.0 && grade < 2.3 {\n            letter_grade\
    \ += \"C+\";\n        } else if grade >= 1.7 && grade < 2.0 {\n            letter_grade\
    \ += \"C\";\n        } else if grade >= 1.3 && grade < 1.7 {\n            letter_grade\
    \ += \"C-\";\n        } else if grade >= 1.0 && grade < 1.3 {\n            letter_grade\
    \ += \"D+\";\n        } else if grade >= 0.7 && grade < 1.0 {\n            letter_grade\
    \ += \"D\";\n        } else if grade < 0.0 {\n            letter_grade += \"D-\"\
    ;\n        } else if grade < 0.0 {\n            letter_grade += \"E\";\n     \
    \   } else {\n            letter_grade += \"E\";\n        }\n\n        letter_grade.push_str(&*letter_grade);\n\
    \    });\n\n    letter_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzo3bqlsw.rs:29:21\n   |\n\
    29 |         if grade >= 4.0 && grade < 5.0 {\n   |                     ^^^\n\
    \   |                     |\n   |                     expected `&f64`, found floating-point\
    \ number\n   |                     help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzo3bqlsw.rs:29:36\n   |\n29 |         if grade\
    \ >= 4.0 && grade < 5.0 {\n   |                                    ^^^\n   | \
    \                                   |\n   |                                  \
    \  expected `&f64`, found floating-point number\n   |                        \
    \            help: consider borrowing here: `&5.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzo3bqlsw.rs:31:28\n   |\n31 |         } else if grade >=\
    \ 3.7 && grade < 4.0 {\n   |                            ^^^\n   |            \
    \                |\n   |                            expected `&f64`, found floating-point\
    \ number\n   |                            help: consider borrowing here: `&3.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzo3bqlsw.rs:31:43\n   |\n31 |\
    \         } else if grade >= 3.7 && grade < 4.0 {\n   |                      \
    \                     ^^^\n   |                                           |\n\
    \   |                                           expected `&f64`, found floating-point\
    \ number\n   |                                           help: consider borrowing\
    \ here: `&4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzo3bqlsw.rs:33:28\n\
    \   |\n33 |         } else if grade >= 3.3 && grade < 3.7 {\n   |            \
    \                ^^^\n   |                            |\n   |                \
    \            expected `&f64`, found floating-point number\n   |              \
    \              help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzo3bqlsw.rs:33:43\n   |\n33 |         } else if grade >=\
    \ 3.3 && grade < 3.7 {\n   |                                           ^^^\n \
    \  |                                           |\n   |                       \
    \                    expected `&f64`, found floating-poi"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort();\n    let mut grades_iter = grades_sorted.iter();\n  \
    \  let mut i = 0;\n    let mut letters = Vec::new();\n    loop {\n        if grades_iter.next().unwrap()\
    \ <= 3.0 {\n            letters.push(i);\n            i += 1;\n            if\
    \ i == 3 {\n                break;\n            }\n        } else {\n        \
    \    break;\n        }\n    }\n    return letters;\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp05a_sahr.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05a_sahr.rs:30:43\n\
    \   |\n30 |         if grades_iter.next().unwrap() <= 3.0 {\n   |            \
    \                               ^^^\n   |                                    \
    \       |\n   |                                           expected `&f64`, found\
    \ floating-point number\n   |                                           help:\
    \ consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05a_sahr.rs:40:12\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected `Vec<String>`\
    \ because of return type\n...\n40 |     return letters;\n   |            ^^^^^^^\
    \ expected struct `String`, found integer\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<{integer}>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades.iter() {\n        match grade {\n            4 => grades_string.push(String::from(\"\
    A+\")),\n            3.7 => grades_string.push(String::from(\"A\")),\n       \
    \     3.3 => grades_string.push(String::from(\"A-\")),\n            3.0 => grades_string.push(String::from(\"\
    B+\")),\n            2.7 => grades_string.push(String::from(\"B\")),\n       \
    \     2.3 => grades_string.push(String::from(\"B-\")),\n            2.0 => grades_string.push(String::from(\"\
    C+\")),\n            1.7 => grades_string.push(String::from(\"C\")),\n       \
    \     1.3 => grades_string.push(String::from(\"C-\")),\n            1.0 => grades_string.push(String::from(\"\
    D+\")),\n            0.7 => grades_string.push(String::from(\"D\")),\n       \
    \     0.0 => grades_string.push(String::from(\"D-\")),\n            _ => grades_string.push(String::from(\"\
    E\")),\n        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy1__mxg_.rs:27:13\n   |\n\
    26 |         match grade {\n   |               ----- this expression has type\
    \ `&f64`\n27 |             4 => grades_string.push(String::from(\"A+\")),\n  \
    \ |             ^\n   |             |\n   |             expected `f64`, found\
    \ integer\n   |             help: use a float literal: `4.0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    \n    grades.iter().enumerate().filter(|(i,\
    \ grade_number)| grade_number > 0).map(|(i, grade)| {\n        // if grades is\
    \ positive, it is better to take letter grade with higher grade\n        let letter_grade\
    \ = if grade > grades[i - 1] {\n            \"A+\"\n        } else if grade <\
    \ grades[i - 1] {\n            \"D-\"\n        } else {\n            \"C\"\n \
    \       };\n        Vec::new().push(String::from(letter_grade));\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7_lu_6um.rs:25:73\n   |\n\
    25 |     grades.iter().enumerate().filter(|(i, grade_number)| grade_number > 0).map(|(i,\
    \ grade)| {\n   |                                                            \
    \             ^ expected `&&f64`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7_lu_6um.rs:27:39\n   |\n27 |         let letter_grade = if grade\
    \ > grades[i - 1] {\n   |                                       ^^^^^^^^^^^^^\n\
    \   |                                       |\n   |                          \
    \             expected `&f64`, found `f64`\n   |                             \
    \          help: consider borrowing here: `&grades[i - 1]`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7_lu_6um.rs:29:27\n   |\n29 |         } else if grade <\
    \ grades[i - 1] {\n   |                           ^^^^^^^^^^^^^\n   |        \
    \                   |\n   |                           expected `&f64`, found `f64`\n\
    \   |                           help: consider borrowing here: `&grades[i - 1]`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `()`\n    --> /tmp/tmp7_lu_6um.rs:35:8\n     |\n35   |\
    \     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=()>`\n     |\n     = help: the trait `FromIterator<()>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letters = vec![String::new(); grades.len()];\n\
    \n    for (gpa, grade) in grades.iter().zip(letters) {\n        let gpa = gpa\
    \ as f64;\n\n        if gpa <= 3.0 {\n            grade += \"A+\";\n        }\n\
    \        if gpa <= 3.7 {\n            grade += \"A\";\n        }\n        if gpa\
    \ <= 3.3 {\n            grade += \"A-\";\n        }\n        if gpa <= 3.0 {\n\
    \            grade += \"B+\";\n        }\n        if gpa <= 2.7 {\n          \
    \  grade += \"B\";\n        }\n        if gpa <= 2.3 {\n            grade += \"\
    B-\";\n        }\n        if gpa <= 2.0 {\n            grade += \"C+\";\n    \
    \    }\n        if gpa <= 1.7 {\n            grade += \"C\";\n        }\n    \
    \    if gpa <= 1.3 {\n            grade += \"C-\";\n        }\n        if gpa\
    \ <= 1.0 {\n            grade += \"D+\";\n        }\n        if gpa <= 0.7 {\n\
    \            grade += \"D\";\n        }\n        if gpa <= 0.0 {\n           \
    \ grade += \"D-\";\n        }\n        if gpa <= 0.0 {\n            grade += \"\
    E\";\n        }\n    }\n\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&f64` as `f64` is invalid\n  --> /tmp/tmpifvku8o_.rs:27:19\n\
    \   |\n27 |         let gpa = gpa as f64;\n   |                   ---^^^^^^^\n\
    \   |                   |\n   |                   cannot cast `&f64` as `f64`\n\
    \   |                   help: dereference the expression: `*gpa`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0606`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let grades_sum = grades.iter().fold(0, |acc,\
    \ x| acc + x);\n    let mut grade_letters = Vec::new();\n    if grades_sum < 4.0\
    \ {\n        grade_letters.push(String::from(\"E\"));\n    } else if grades_sum\
    \ < 3.0 {\n        grade_letters.push(String::from(\"D-\"));\n    } else if grades_sum\
    \ < 3.3 {\n        grade_letters.push(String::from(\"C\"));\n    } else if grades_sum\
    \ < 2.7 {\n        grade_letters.push(String::from(\"B+\"));\n    } else if grades_sum\
    \ < 2.3 {\n        grade_letters.push(String::from(\"B\"));\n    } else if grades_sum\
    \ < 2.0 {\n        grade_letters.push(String::from(\"B-\"));\n    } else if grades_sum\
    \ < 1.7 {\n        grade_letters.push(String::from(\"A-\"));\n    } else if grades_sum\
    \ < 1.3 {\n        grade_letters.push(String::from(\"A\"));\n    } else if grades_sum\
    \ < 1.0 {\n        grade_letters.push(String::from(\"A+\"));\n    } else if grades_sum\
    \ < 0.7 {\n        grade_letters.push(String::from(\"D\"));\n    } else if grades_sum\
    \ < 0.0 {\n        grade_letters.push(String::from(\"D+\"));\n    } else {\n \
    \       grade_letters.push(String::from(\"C+\"));\n    }\n    grade_letters\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&f64` to `{integer}`\n  --> /tmp/tmp8sginxi2.rs:24:57\n\
    \   |\n24 |     let grades_sum = grades.iter().fold(0, |acc, x| acc + x);\n  \
    \ |                                                         ^ no implementation\
    \ for `{integer} + &f64`\n   |\n   = help: the trait `Add<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: can't compare `{integer}` with `{float}`\n  --> /tmp/tmp8sginxi2.rs:26:19\n\
    \   |\n26 |     if grades_sum < 4.0 {\n   |                   ^ no implementation\
    \ for `{integer} < {float}` and `{integer} > {float}`\n   |\n   = help: the trait\
    \ `PartialOrd<{float}>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `PartialOrd<Rhs>`:\n             f32\n         \
    \    f64\n             i128\n             i16\n             i32\n            \
    \ i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8sginxi2.rs:26:21\n   |\n26 |     if grades_sum\
    \ < 4.0 {\n   |                     ^^^ expected integer, found floating-point\
    \ number\n\nerror[E0277]: can't compare `{integer}` with `{float}`\n  --> /tmp/tmp8sginxi2.rs:28:26\n\
    \   |\n28 |     } else if grades_sum < 3.0 {\n   |                          ^\
    \ no implementation for `{integer} < {float}` and `{integer} > {float}`\n   |\n\
    \   = help: the trait `PartialOrd<{float}>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `PartialOrd<Rhs>`:\n   \
    \          f32\n             f64\n             i128\n             i16\n      \
    \       i32\n             i64\n             i8\n             isize\n         \
    \  and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8sginxi2.rs:28:28\n\
    \   |\n28 |     } else "
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grade = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 { letter_grade.push(\"A+\"); }\n      \
    \  if grade >= 3.7 { letter_grade.push(\"A\"); }\n        if grade >= 3.3 { letter_grade.push(\"\
    A-\"); }\n        if grade >= 3.0 { letter_grade.push(\"B+\"); }\n        if grade\
    \ >= 2.7 { letter_grade.push(\"B\"); }\n        if grade >= 2.3 { letter_grade.push(\"\
    B-\"); }\n        if grade >= 2.0 { letter_grade.push(\"C+\"); }\n        if grade\
    \ >= 1.7 { letter_grade.push(\"C\"); }\n        if grade >= 1.3 { letter_grade.push(\"\
    C-\"); }\n        if grade >= 1.0 { letter_grade.push(\"D+\"); }\n        if grade\
    \ >= 0.7 { letter_grade.push(\"D\"); }\n        if grade < 0.0 { letter_grade.push(\"\
    D-\"); }\n        if grade < 0.7 { letter_grade.push(\"E\"); }\n    }\n    letter_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjc246voe.rs:40:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n40 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    if grades.iter().any(|x| x != 0.0) {\n     \
    \   grades.iter().filter(|x| x != 0.0).collect()\n    } else {\n        vec![\"\
    D\"]\n    }\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n \
    \   assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmplevhosyd.rs:24:32\n\
    \   |\n24 |     if grades.iter().any(|x| x != 0.0) {\n   |                   \
    \             ^^ no implementation for `&f64 == {float}`\n   |\n   = help: the\
    \ trait `PartialEq<{float}>` is not implemented for `&f64`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ can't compare `&&f64` with `{float}`\n  --> /tmp/tmplevhosyd.rs:25:36\n   |\n\
    25 |         grades.iter().filter(|x| x != 0.0).collect()\n   |              \
    \                      ^^ no implementation for `&&f64 == {float}`\n   |\n   =\
    \ help: the trait `PartialEq<{float}>` is not implemented for `&&f64`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&f64`\n    --> /tmp/tmplevhosyd.rs:25:44\n     |\n25\
    \   |         grades.iter().filter(|x| x != 0.0).collect()\n     |           \
    \                                 ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&f64>`\n     |\n     = help: the trait\
    \ `FromIterator<&f64>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplevhosyd.rs:27:14\n\
    \   |\n27 |         vec![\"D\"]\n   |              ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |              |\n   |              expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_gpa = grades.iter().sum();\n    let mut total_points = 0;\n    let mut\
    \ i = 1;\n    while total_points > 0 && i < grades.len() {\n        if total_gpa\
    \ * (1.0 / i) >= grades[i] {\n            letter_grades.push((grades[i] as f64\
    \ * 4.0) as String);\n            total_gpa = grades.iter().filter(|&x| x > grades[i]).sum();\n\
    \            total_points += grades[i] - total_gpa;\n        } else {\n      \
    \      letter_grades.push((grades[i] as f64 * 3.3) as String);\n            total_gpa\
    \ = grades.iter().filter(|&x| x > grades[i]).sum();\n            total_points\
    \ += grades[i] - total_gpa;\n        }\n        i += 1;\n    }\n    if total_points\
    \ == 0 {\n        letter_grades.push((\"E\" as String));\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpxyv1qvha.rs:41:28\n\
    \   |\n41 |         letter_grades.push((\"E\" as String));\n   |             \
    \               ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on\
    \ by default\nhelp: remove these parentheses\n   |\n41 -         letter_grades.push((\"\
    E\" as String));\n41 +         letter_grades.push(\"E\" as String);\n   | \n\n\
    error[E0277]: cannot divide `{float}` by `usize`\n  --> /tmp/tmpxyv1qvha.rs:29:29\n\
    \   |\n29 |         if total_gpa * (1.0 / i) >= grades[i] {\n   |            \
    \                 ^ no implementation for `{float} / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxyv1qvha.rs:31:55\n   |\n31 |             total_gpa = grades.iter().filter(|&x|\
    \ x > grades[i]).sum();\n   |                                                \
    \       ^^^^^^^^^\n   |                                                      \
    \ |\n   |                                                       expected `&f64`,\
    \ found `f64`\n   |                                                       help:\
    \ consider borrowing here: `&grades[i]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxyv1qvha.rs:35:55\n   |\n35 |             total_gpa = grades.iter().filter(|&x|\
    \ x > grades[i]).sum();\n   |                                                \
    \       ^^^^^^^^^\n   |                                                      \
    \ |\n   |                                                       expected `&f64`,\
    \ found `f64`\n   |                                                       help:\
    \ consider borrowing here: `&grades[i]`\n\nerror[E0605]: non-primitive cast: `f64`\
    \ as `String`\n  --> /tmp/tmp"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades: Vec<String> = Vec::new();\n\
    \    let mut temp_grades: Vec<f64> = grades.clone();\n    for i in (0..grades.len()).rev()\
    \ {\n        if grades[i] != 0.0 {\n            temp_grades[i] = grades[i];\n\
    \        } else {\n            temp_grades[i] = temp_grades[i - 1] - 0.1;\n  \
    \      }\n        let temp: f64 = temp_grades[i];\n        let temp_result: usize\
    \ = match temp {\n            0.7 => 0,\n            0.3 => 1,\n            0.2\
    \ => 2,\n            0.1 => 3,\n            _ => 4,\n        };\n        letter_grades.push(String::from(&\"\
    E\".chars()[temp_result as usize]));\n    }\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpuk1zhxfr.rs:40:42\n\
    \   |\n40 |         letter_grades.push(String::from(&\"E\".chars()[temp_result\
    \ as usize]));\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1660011031
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ highest_grade = 0.0;\n    for grade in grades.iter().cloned() {\n        letter_grades.push(match\
    \ grade {\n            0.0 => String::from(\"E\"),\n            1.0 => String::from(\"\
    A\"),\n            2.0 => String::from(\"B\"),\n            3.0 => String::from(\"\
    C\"),\n            4.0 => String::from(\"D\"),\n            5.0 => String::from(\"\
    E\"),\n            _ => String::from(\"F\"),\n        });\n        if grade >\
    \ highest_grade {\n            highest_grade = grade;\n        }\n    }\n    let\
    \ mut letters = vec![];\n    highest_grade -= 1.0;\n    while highest_grade >\
    \ 0.0 {\n        letters.push(match highest_grade {\n            0..1.0 => String::from(\"\
    A\"),\n            2.0..3.0 => String::from(\"A-\"),\n            4.0..5.0 =>\
    \ String::from(\"B+\"),\n            6.0..7.0 => String::from(\"B\"),\n      \
    \      8.0..9.0 => String::from(\"B-\"),\n            10.0..11.0 => String::from(\"\
    C+\"),\n            12.0..13.0 => String::from(\"C\"),\n            14.0..15.0\
    \ => String::from(\"C-\"),\n            16.0..17.0 => String::from(\"D+\"),\n\
    \            18.0..19.0 => String::from(\"D\"),\n            20.0..20.0 => String::from(\"\
    D-\"),\n            _ => String::from(\"F\"),\n        });\n        highest_grade\
    \ -= 1.0;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp5t7m_omi.rs:44:13\n\
    \   |\n44 |             0..1.0 => String::from(\"A\"),\n   |             ^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp5t7m_omi.rs:45:13\n   |\n45 |             2.0..3.0 => String::from(\"\
    A-\"),\n   |             ^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp5t7m_omi.rs:46:13\n   |\n46 |             4.0..5.0 => String::from(\"\
    B+\"),\n   |             ^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp5t7m_omi.rs:47:13\n   |\n47 |             6.0..7.0 => String::from(\"\
    B\"),\n   |             ^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp5t7m_omi.rs:48:13\n   |\n48 |             8.0..9.0 => String::from(\"\
    B-\"),\n   |             ^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp5t7m_omi.rs:49:13\n   |\n49 |             10.0..11.0 => String::from(\"\
    C+\"),\n   |             ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp5t7m_omi.rs:50:13\n   |\n50 |             12.0..13.0 => String::from(\"\
    C\"),\n   |             ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp5t7m_omi.rs:51:13\n   |\n51 |      "
  stdout: ''
  timestamp: 1660011031
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut lettergrades = vec![];\n\n    for grade\
    \ in grades {\n        if grade > 4.0 {\n            if grade > 3.7 {\n      \
    \          if grade > 3.3 {\n                    if grade > 2.7 {\n          \
    \              if grade > 2.3 {\n                            if grade > 1.7 {\n\
    \                                if grade > 1.3 {\n                          \
    \          if grade > 0.7 {\n                                        if grade\
    \ > 0.3 {\n                                            if grade > 0.0 {\n    \
    \                                            if grade < 1.0 {\n              \
    \                                      lettergrades.push(String::from(\"D+\"))\n\
    \                                                }\n                         \
    \                   }\n                                        }\n           \
    \                         }\n                                }\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    lettergrades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp6dfdfhv7.rs:56:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011031
