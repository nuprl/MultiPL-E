language: rs
name: HumanEval_101_words_string
results:
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|x| x.trim().to_string())\n        .filter(|x| !x.is_empty())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpg3w2ys2_.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.to_lowercase().split(',')\n\
    \        .filter(|&s| s.is_ascii_alphanumeric())\n        .filter(|&s| !s.is_empty())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_alphanumeric` found for reference\
    \ `&str` in the current scope\n  --> /tmp/tmpme002zbe.rs:10:24\n   |\n10 |   \
    \      .filter(|&s| s.is_ascii_alphanumeric())\n   |                        ^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `&str`\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&str`\n    --> /tmp/tmpme002zbe.rs:12:10\n\
    \     |\n12   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().map(|c|\
    \ c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpoeqt8mva.rs:9:47\n     |\n9  \
    \  |     s.chars().map(|c| c.to_ascii_lowercase()).collect()\n     |         \
    \                                      ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.is_whitespace()).map(str::to_lowercase).collect::<Vec<String>>()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmprk4yzcx3.rs:9:5\n\
    \  |\n9 |     strings.iter().filter_map(|s| s.is_whitespace()).map(str::to_lowercase).collect::<Vec<String>>()\n\
    \  |     ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words_string(s,\
    \ String::new())\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \ --> /tmp/tmp3je3ns9g.rs:9:5\n  |\n9 |     words_string(s, String::new())\n \
    \ |     ^^^^^^^^^^^^ -  ------------- supplied 2 arguments\n  |     |\n  |   \
    \  expected 1 argument\n  |\nnote: function defined here\n --> /tmp/tmp3je3ns9g.rs:8:4\n\
    \  |\n8 | fn words_string(s: String) -> Vec<String> {\n  |    ^^^^^^^^^^^^ ---------\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    s.chars().for_each(|c| {\n        if !c.is_whitespace()\
    \ {\n            words.push(c.to_ascii_lowercase());\n        }\n    });\n   \
    \ words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy6gp774w.rs:15:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n15 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `char`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    s.split(|x| match x {\n        ' ' | '\\t' | ',' |\
    \ '.' | '*' => (),\n        c | c == ',' | c == ',' | c == '.' | c == '-' | c\
    \ == '/' => words.push(String::from(c)),\n        _ => (),\n    })\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found `==`\n  --> /tmp/tmppu1hwllm.rs:12:15\n\
    \   |\n12 |         c | c == ',' | c == ',' | c == '.' | c == '-' | c == '/' =>\
    \ words.push(String::from(c)),\n   |               ^^ expected one of `=>`, `@`,\
    \ `if`, or `|`\n\nerror[E0271]: type mismatch resolving `<[closure@/tmp/tmppu1hwllm.rs:10:13:\
    \ 14:6] as FnOnce<(char,)>>::Output == bool`\n    --> /tmp/tmppu1hwllm.rs:10:7\n\
    \     |\n10   |     s.split(|x| match x {\n     |       ^^^^^ expected `bool`,\
    \ found `()`\n     |\n     = note: required because of the requirements on the\
    \ impl of `Pattern<'_>` for `[closure@/tmp/tmppu1hwllm.rs:10:13: 14:6]`\nnote:\
    \ required by a bound in `core::str::<impl str>::split`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppu1hwllm.rs:10:5\n   |\n8  |   fn words_string(s: String)\
    \ -> Vec<String> {\n   |                                 ----------- expected\
    \ `Vec<String>` because of return type\n9  |       let mut words = vec![];\n10\
    \ | /     s.split(|x| match x {\n11 | |         ' ' | '\\t' | ',' | '.' | '*'\
    \ => (),\n12 | |         c | c == ',' | c == ',' | c == '.' | c == '-' | c ==\
    \ '/' => words.push(String::from(c)),\n13 | |         _ => (),\n14 | |     })\n\
    \   | |______^ expected struct `Vec`, found struct `std::str::Split`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `std::str::Split<'_,\
    \ [closure@/tmp/tmppu1hwllm.rs:10:13: 14:6]>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0271, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_string(s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_string` in this scope\n --> /tmp/tmp96ppbnoj.rs:9:5\n\
    \  |\n9 |     split_string(s).collect()\n  |     ^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = s;\n    let mut current_word = String::new();\n\
    \    let mut space_count = 0;\n    while let Some(chr) = s.chars().next() {\n\
    \        if chr == ' ' {\n            space_count += 1;\n            current_word\
    \ = String::from(current_word + chr);\n        } else {\n            if space_count\
    \ > 0 {\n                words.push_back(current_word);\n                current_word\
    \ = String::from(\"\");\n                space_count = 0;\n            }\n   \
    \         current_word = String::from(current_word + chr);\n        }\n    }\n\
    \    words.push_back(current_word);\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwdxyj3ql.rs:16:56\n   |\n\
    16 |             current_word = String::from(current_word + chr);\n   |      \
    \                                                  ^^^ expected `&str`, found\
    \ `char`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>`\
    \ in the current scope\n  --> /tmp/tmpwdxyj3ql.rs:19:23\n   |\n19 |          \
    \       words.push_back(current_word);\n   |                       ^^^^^^^^^ method\
    \ not found in `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdxyj3ql.rs:23:56\n\
    \   |\n23 |             current_word = String::from(current_word + chr);\n   |\
    \                                                        ^^^ expected `&str`,\
    \ found `char`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>`\
    \ in the current scope\n  --> /tmp/tmpwdxyj3ql.rs:26:11\n   |\n26 |     words.push_back(current_word);\n\
    \   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|s|\
    \ s.trim()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpoblo8dke.rs:9:36\n     |\n9  \
    \  |     s.split(',').map(|s| s.trim()).collect()\n     |                    \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut v = Vec::new();\n    let mut words = Vec::new();\n    loop {\n        match\
    \ s.find(',') {\n            None => break,\n            Some(first) => {\n  \
    \              v.push(s);\n                s = s.trim_start()\n              \
    \      .trim_end()\n                    .split(',')\n                    .filter(|&x|\
    \ !x.is_empty())\n                    .collect::<Vec<_>>();\n                words.push(s);\n\
    \                s = s.trim_start()\n                    .trim_end()\n       \
    \             .split(',')\n                    .filter(|&x| !x.is_empty())\n \
    \                   .collect::<Vec<_>>();\n            },\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8hrfwcds.rs:16:21\n   |\n\
    8  |   fn words_string(s: String) -> Vec<String> {\n   |                     \
    \ ------ expected due to this parameter type\n...\n16 |                   s =\
    \ s.trim_start()\n   |  _____________________^\n17 | |                     .trim_end()\n\
    18 | |                     .split(',')\n19 | |                     .filter(|&x|\
    \ !x.is_empty())\n20 | |                     .collect::<Vec<_>>();\n   | |________________________________________^\
    \ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `String`\n              found struct `Vec<&str>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8hrfwcds.rs:22:21\n   |\n8  |   fn words_string(s: String)\
    \ -> Vec<String> {\n   |                      ------ expected due to this parameter\
    \ type\n...\n22 |                   s = s.trim_start()\n   |  _____________________^\n\
    23 | |                     .trim_end()\n24 | |                     .split(',')\n\
    25 | |                     .filter(|&x| !x.is_empty())\n26 | |               \
    \      .collect::<Vec<_>>();\n   | |________________________________________^\
    \ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `String`\n              found struct `Vec<&str>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars()\n\
    \        .skip_while(|c| c.is_ascii_letter())\n        .take_while(|c| !c.is_ascii_letter())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpo_9kpt5i.rs:10:27\n   |\n10 |         .skip_while(|c|\
    \ c.is_ascii_letter())\n   |                           ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_letter` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpo_9kpt5i.rs:11:28\n   |\n11 |         .take_while(|c| !c.is_ascii_letter())\n\
    \   |                            ^^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_ascii`\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `char`\n    --> /tmp/tmpo_9kpt5i.rs:12:10\n\
    \     |\n12   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    to_vec_utf8(&s.chars().map(|c|\
    \ c.to_ascii_lowercase()).collect::<Vec<String>>())\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_vec_utf8` in this scope\n --> /tmp/tmpp0c_cjpc.rs:9:5\n\
    \  |\n9 |     to_vec_utf8(&s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<String>>())\n\
    \  |     ^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: a value of type\
    \ `Vec<String>` cannot be built from an iterator over elements of type `char`\n\
    \    --> /tmp/tmpp0c_cjpc.rs:9:60\n     |\n9    |     to_vec_utf8(&s.chars().map(|c|\
    \ c.to_ascii_lowercase()).collect::<Vec<String>>())\n     |                  \
    \                                          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|v|\
    \ v.to_string()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpb3oj79k7.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut spaced = false;\n    let mut current: String;\n\
    \n    for c in s.chars() {\n        if c == ' ' && !spaced {\n            current.push(c);\n\
    \            spaced = true;\n        } else if !spaced {\n            current.push(c);\n\
    \            spaced = false;\n        } else {\n            words.push(current);\n\
    \            current = '';\n            spaced = false;\n        }\n    }\n\n\
    \    if current != \"\" {\n        words.push(current);\n    }\n\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: empty character literal\n  --> /tmp/tmp2oezhtyj.rs:22:24\n   |\n\
    22 |             current = '';\n   |                        ^ empty character\
    \ literal\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|s|\
    \ s.trim()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpoblo8dke.rs:9:36\n     |\n9  \
    \  |     s.split(',').map(|s| s.trim()).collect()\n     |                    \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().map(|c|\
    \ {\n        c.to_ascii_lowercase()\n            .parse()\n            .expect(\"\
    failed to parse word\")\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `parse` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpcdbf4uci.rs:11:14\n   |\n11 |             .parse()\n  \
    \ |              ^^^^^ method not found in `char`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|c|\
    \ c.trim()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpb95w8486.rs:9:36\n     |\n9  \
    \  |     s.split(',').map(|c| c.trim()).collect()\n     |                    \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ TODO: implement this function\n    s.split_whitespace()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3m44xmvr.rs:10:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n9  |     //\
    \ TODO: implement this function\n10 |     s.split_whitespace()\n   |     ^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.to_lowercase().split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpyxwtht7k.rs:9:41\n     |\n9  \
    \  |     s.to_lowercase().split_whitespace().collect()\n     |               \
    \                          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_comma_delimited(s).into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_comma_delimited` in this scope\n\
    \ --> /tmp/tmp_5er6ssd.rs:9:5\n  |\n9 |     split_comma_delimited(s).into_iter().collect()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    for word in s.split_whitespace() {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpst2afd04.rs:13:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n13 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',')\n\
    \        .map(|x| x.trim_end().to_string()).collect()\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpgid9w10y.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().map(|c|\
    \ {\n        if c == ',' || c == ' ' {\n            String::from(\"\")\n     \
    \   } else {\n            String::from(c.to_string())\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"H\", \"i\", \"\", \"\", \"m\", \"y\", \"\", \"n\", \"a\", \"m\", \"e\",\
    \ \"\", \"i\", \"s\", \"\", \"J\", \"o\", \"h\", \"n\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmplkfk8r3k.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut split_string = s.split_whitespace();\n    let mut words_string = Vec::with_capacity(split_string.len());\n\
    \    while let Some(word) = split_string.next() {\n        words_string.push(word);\n\
    \    }\n    words_string\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp6e3z85lz.rs:10:60\n   |\n10 |     let mut\
    \ words_string = Vec::with_capacity(split_string.len());\n   |               \
    \                                             ^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6e3z85lz.rs:14:5\n   |\n8  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n14 |     words_string\n\
    \   |     ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(&\"\
    ,\").map(|x| x.trim()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpx5ezcpd5.rs:9:37\n     |\n9  \
    \  |     s.split(&\",\").map(|x| x.trim()).collect()\n     |                 \
    \                    ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_ascii_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmphk0obdn6.rs:9:32\n     |\n9  \
    \  |     s.split_ascii_whitespace().collect()\n     |                        \
    \        ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = String::new();\n    s.split_whitespace().map(|x| {\n        if !x.is_empty()\
    \ {\n            words.push_str(x);\n            words.push(',');\n        }\n\
    \    }).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppdyjzn8j.rs:10:5\n   |\n\
    8  |   fn words_string(s: String) -> Vec<String> {\n   |                     \
    \            ----------- expected `Vec<String>` because of return type\n9  | \
    \      let mut words = String::new();\n10 | /     s.split_whitespace().map(|x|\
    \ {\n11 | |         if !x.is_empty() {\n12 | |             words.push_str(x);\n\
    13 | |             words.push(',');\n14 | |         }\n15 | |     }).collect::<Vec<_>>()\n\
    \   | |__________________________^ expected struct `String`, found `()`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<()>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    tokenize_to_vec(s.splitn(2,\
    \ |x| !x.is_whitespace()))\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `tokenize_to_vec` in this scope\n -->\
    \ /tmp/tmp0dn8w_o9.rs:9:5\n  |\n9 |     tokenize_to_vec(s.splitn(2, |x| !x.is_whitespace()))\n\
    \  |     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n\n    s.split_whitespace().collect::<Vec<_>>().for_each(|word|\
    \ {\n        if !word.is_empty() {\n            words.push(word);\n        }\n\
    \    });\n\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<&str>` is not an iterator\n   --> /tmp/tmp1mbif6mx.rs:11:46\n\
    \    |\n11  |       s.split_whitespace().collect::<Vec<_>>().for_each(|word| {\n\
    \    |                                                ^^^^^^^^ `Vec<&str>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&str>: Iterator`\n            which is required by `&mut Vec<&str>:\
    \ Iterator`\n            `[&str]: Iterator`\n            which is required by\
    \ `&mut [&str]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = vec![];\n    let mut word = String::new();\n    \n\
    \    s.split(|&c| {\n        if c.is_whitespace() || c.is_punctuation() || c ==\
    \ '.' || c == '?' || c == '!' {\n            return false;\n        }\n      \
    \  word.push(c);\n        false\n    });\n    \n    for c in word.chars() {\n\
    \        if !s.contains(&c) {\n            words.push(word.clone());\n       \
    \     word = String::new();\n        }\n    }\n    words.push(word.clone());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `&_`\n  --> /tmp/tmplz1qef6r.rs:12:14\n\
    \   |\n12 |     s.split(|&c| {\n   |              ^^ consider giving this closure\
    \ parameter the explicit type `&_`, with the type parameters specified\n   |\n\
    \   = note: type must be known at this point\n\nerror[E0277]: expected a `Fn<(char,)>`\
    \ closure, found `char`\n    --> /tmp/tmplz1qef6r.rs:21:24\n     |\n21   |   \
    \      if !s.contains(&c) {\n     |               -------- ^^ expected an `Fn<(char,)>`\
    \ closure, found `char`\n     |               |\n     |               required\
    \ by a bound introduced by this call\n     |\n     = help: the trait `Fn<(char,)>`\
    \ is not implemented for `char`\n     = note: required because of the requirements\
    \ on the impl of `FnOnce<(char,)>` for `&char`\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `&char`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider dereferencing\
    \ here\n     |\n21   |         if !s.contains(*&c) {\n     |                 \
    \       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0282.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp2fst9mze.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect::<Vec<String>>()\n     |               \
    \           ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    s.split(|c| match c {\n        '\"' | \"'\" => c.to_string(),\n\
    \        _ => c.to_ascii_lowercase()\n    }).filter(|w| !w.is_empty()).collect::<Vec<String>>().for_each(|word|\
    \ {\n        words.push(String::from(word));\n    });\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph1stv33r.rs:11:15\n   |\n\
    10 |     s.split(|c| match c {\n   |                       - this expression has\
    \ type `char`\n11 |         '\"' | \"'\" => c.to_string(),\n   |             \
    \  ^^^ expected `char`, found `&str`\n\nerror[E0308]: `match` arms have incompatible\
    \ types\n  --> /tmp/tmph1stv33r.rs:12:14\n   |\n10 |       s.split(|c| match c\
    \ {\n   |  _________________-\n11 | |         '\"' | \"'\" => c.to_string(),\n\
    \   | |                      ------------- this is found to be of type `String`\n\
    12 | |         _ => c.to_ascii_lowercase()\n   | |              ^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   | |              |\n\
    \   | |              expected struct `String`, found `char`\n13 | |     }).filter(|w|\
    \ !w.is_empty()).collect::<Vec<String>>().for_each(|word| {\n   | |_____- `match`\
    \ arms have incompatible types\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&str`\n    --> /tmp/tmph1stv33r.rs:13:34\n\
    \     |\n13   |     }).filter(|w| !w.is_empty()).collect::<Vec<String>>().for_each(|word|\
    \ {\n     |                                  ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: `Vec<String>` is not an iterator\n\
    \   --> /tmp/tmph1stv33r.rs:13:59\n    |\n13  |       }).filter(|w| !w.is_empty()).collect::<Vec<String>>().for_each(|word|\
    \ {\n    |                                                             ^^^^^^^^\
    \ `Vec<String>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<String>: Iterator`\n            which\
    \ is required by `&mut Vec<String>: Iterator`\n            `[String]: Iterator`\n\
    \            which is required by `&mut [String]: Iterator`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n\n    for word in s.split(',').skip(1) {\n        words.push(word.trim());\n\
    \    }\n\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1put5acl.rs:15:12\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n15 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < words {\n        match words.len() {\n    \
    \        1 => { // single word\n                words.push(i);\n             \
    \   i += 1;\n            },\n            2 => {\n                let word = words.clone();\n\
    \                words.push(i);\n                i += 1;\n                words.push(word);\n\
    \            },\n            _ => {\n                let mut words = words.clone();\n\
    \                words.push(i);\n                i += 1;\n                words.push(words.clone());\n\
    \            }\n        };\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `{integer}` with `Vec<&str>`\n  --> /tmp/tmp015hjj6e.rs:12:13\n\
    \   |\n12 |     while i < words {\n   |             ^ no implementation for `{integer}\
    \ < Vec<&str>` and `{integer} > Vec<&str>`\n   |\n   = help: the trait `PartialOrd<Vec<&str>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp015hjj6e.rs:15:28\n   |\n15 |                 words.push(i);\n   | \
    \                           ^ expected `&str`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp015hjj6e.rs:20:28\n   |\n20 |              \
    \   words.push(i);\n   |                            ^ expected `&str`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp015hjj6e.rs:22:28\n   |\n22 |\
    \                 words.push(word);\n   |                            ^^^^ expected\
    \ `&str`, found struct `Vec`\n   |\n   = note: expected reference `&str`\n   \
    \              found struct `Vec<&str>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp015hjj6e.rs:26:28\n   |\n26 |                 words.push(i);\n   | \
    \                           ^ expected `&str`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp015hjj6e.rs:28:28\n   |\n28 |              \
    \   words.push(words.clone());\n   |                            ^^^^^^^^^^^^^\
    \ expected `&str`, found struct `Vec`\n   |\n   = note: expected reference `&str`\n\
    \                 found struct `Vec<&str>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp015hjj6e.rs:32:5\n   |\n8  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n32 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0277,"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace().collect::<Vec<String>>();\n\
    \    words.push(\"\");\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpnnylmhrz.rs:10:42\n     |\n10\
    \   |     let mut words = s.split_whitespace().collect::<Vec<String>>();\n   \
    \  |                                          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnnylmhrz.rs:11:16\n\
    \   |\n11 |     words.push(\"\");\n   |                ^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                |\n   |                expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',')\n\
    \        .into_iter()\n        .map(|word| word.trim())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp_1xmr0r4.rs:12:10\n     |\n12\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let words = s.split(|&&s| !s.is_empty()).collect();\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `&&_`\n  --> /tmp/tmpykcaz_48.rs:10:26\n\
    \   |\n10 |     let words = s.split(|&&s| !s.is_empty()).collect();\n   |    \
    \                      ^^^ consider giving this closure parameter the explicit\
    \ type `&&_`, with the type parameters specified\n   |\n   = note: type must be\
    \ known at this point\n\nerror[E0277]: a value of type `Vec<String>` cannot be\
    \ built from an iterator over elements of type `&str`\n    --> /tmp/tmpykcaz_48.rs:10:46\n\
    \     |\n10   |     let words = s.split(|&&s| !s.is_empty()).collect();\n    \
    \ |                                              ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0282.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    word_split(s).into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_split` in this scope\n --> /tmp/tmpnspxx7_y.rs:9:5\n\
    \  |\n9 |     word_split(s).into_iter().collect()\n  |     ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut res = Vec::new();\n    let mut split = s.split_whitespace();\n    while\
    \ let Some(item) = split.next()? {\n        res.push(item);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the `?` operator can only be used in a function that returns\
    \ `Result` or `Option` (or another type that implements `FromResidual`)\n  -->\
    \ /tmp/tmp0y4sv3eg.rs:11:40\n   |\n8  | / fn words_string(s: String) -> Vec<String>\
    \ {\n9  | |     let mut res = Vec::new();\n10 | |     let mut split = s.split_whitespace();\n\
    11 | |     while let Some(item) = split.next()? {\n   | |                    \
    \                    ^ cannot use the `?` operator in a function that returns\
    \ `Vec<String>`\n...  |\n14 | |     res\n15 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<Option<Infallible>>`\
    \ is not implemented for `Vec<String>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0y4sv3eg.rs:11:15\n   |\n11 |     while let Some(item) = split.next()?\
    \ {\n   |               ^^^^^^^^^^   ------------- this expression has type `&str`\n\
    \   |               |\n   |               expected `str`, found enum `Option`\n\
    \   |\n   = note: expected type `str`\n              found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp0y4sv3eg.rs:14:5\n   |\n8  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n14 |     res\n\
    \   |     ^^^ expected struct `String`, found reference\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.into_iter().map(|c|\
    \ c.to_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpm84p1ukf.rs:9:7\n    |\n9  \
    \ |       s.into_iter().map(|c| c.to_lowercase()).collect()\n    |         ^^^^^^^^^\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut split = s.split(',').collect::<Vec<String>>();\n    split.split_off(split.len()\
    \ - 1).cloned()\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmphgap99wk.rs:9:34\n     |\n9  \
    \  |     let mut split = s.split(',').collect::<Vec<String>>();\n     |      \
    \                            ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]:\
    \ `Vec<String>` is not an iterator\n   --> /tmp/tmphgap99wk.rs:10:38\n    |\n\
    10  |       split.split_off(split.len() - 1).cloned()\n    |                 \
    \                       ^^^^^^ `Vec<String>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Vec<String>:\
    \ Iterator`\n            which is required by `&mut Vec<String>: Iterator`\n \
    \           `[String]: Iterator`\n            which is required by `&mut [String]:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_by_space(&s.to_string()).into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_by_space` in this scope\n -->\
    \ /tmp/tmpyegj3uny.rs:9:5\n  |\n9 |     split_by_space(&s.to_string()).into_iter().collect()\n\
    \  |     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split('\
    \ ').collect()\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpm_4g_pmd.rs:9:18\n     |\n9  \
    \  |     s.split(' ').collect()\n     |                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words1(s).into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `words1` in this scope\n --> /tmp/tmpfwcmbbui.rs:9:5\n\
    \  |\n9 |     words1(s).into_iter().collect()\n  |     ^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut vec = Vec::new();\n    s.split(',').filter(|x| !x.is_empty()).map(|x| x.to_string()).collect();\n\
    \    vec\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmpahu8xgn_.rs:10:67\n\
    \     |\n10   |     s.split(',').filter(|x| !x.is_empty()).map(|x| x.to_string()).collect();\n\
    \     |                                                                   ^^^^^^^\
    \ cannot infer type for type parameter `B` declared on the associated function\
    \ `collect`\n     |\n     = note: cannot satisfy `_: FromIterator<String>`\nnote:\
    \ required by a bound in `collect`\nhelp: consider specifying the type argument\
    \ in the method call\n     |\n10   |     s.split(',').filter(|x| !x.is_empty()).map(|x|\
    \ x.to_string()).collect::<B>();\n     |                                     \
    \                                     +++++\nhelp: consider specifying the type\
    \ argument in the function call\n     |\n10   |     s.split(',').filter(|x| !x.is_empty()).map(|x|\
    \ x.to_string()).collect::<B>();\n     |                                     \
    \                                     +++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c == '\\'') || s.split(|c: char| c == ',') || s.split(|c: char| c == '-')\
    \ || s.split(|c: char| c == '.')\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpli3uuspy.rs:9:5\n  |\n9 |\
    \     s.split(|c: char| c == '\\'') || s.split(|c: char| c == ',') || s.split(|c:\
    \ char| c == '-') || s.split(|c: char| c == '.')\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found struct `std::str::Split`\n  |\n  = note: expected type\
    \ `bool`\n           found struct `std::str::Split<'_, [closure@/tmp/tmpli3uuspy.rs:9:13:\
    \ 9:32]>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpli3uuspy.rs:9:37\n \
    \ |\n9 |     s.split(|c: char| c == '\\'') || s.split(|c: char| c == ',') || s.split(|c:\
    \ char| c == '-') || s.split(|c: char| c == '.')\n  |                        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::str::Split`\n\
    \  |\n  = note: expected type `bool`\n           found struct `std::str::Split<'_,\
    \ [closure@/tmp/tmpli3uuspy.rs:9:45: 9:63]>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpli3uuspy.rs:9:68\n  |\n9 |     s.split(|c: char| c == '\\'') ||\
    \ s.split(|c: char| c == ',') || s.split(|c: char| c == '-') || s.split(|c: char|\
    \ c == '.')\n  |                                                             \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::str::Split`\n\
    \  |\n  = note: expected type `bool`\n           found struct `std::str::Split<'_,\
    \ [closure@/tmp/tmpli3uuspy.rs:9:76: 9:94]>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpli3uuspy.rs:9:99\n  |\n9 |     s.split(|c: char| c == '\\'') ||\
    \ s.split(|c: char| c == ',') || s.split(|c: char| c == '-') || s.split(|c: char|\
    \ c == '.')\n  |                                                             \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`,\
    \ found struct `std::str::Split`\n  |\n  = note: expected type `bool`\n      \
    \     found struct `std::str::Split<'_, [closure@/tmp/tmpli3uuspy.rs:9:107: 9:125]>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpli3uuspy.rs:9:5\n  |\n8 | fn words_string(s:\
    \ String) -> Vec<String> {\n  |                               ----------- expected\
    \ `Vec<String>` because of return type\n9 |     s.split(|c: char| c == '\\'')\
    \ || s"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            continue;\n        }\n        let c = c.to_ascii_lowercase();\n\
    \        words.push(c);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc6hf6y5k.rs:17:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n17 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `char`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = vec![String::new(); 0];\n    let mut split = s.split_whitespace();\n\
    \    while let Some(w) = split.next() {\n        words.push(w);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmtcfl56h.rs:12:20\n   |\n\
    12 |         words.push(w);\n   |                    ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                    |\n   |                    expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|s|\
    \ s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp1bdjkn41.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut prev_char = None;\n\n    for c in s.chars()\
    \ {\n        if prev_char != Some(c) {\n            words.push_back(c.to_string());\n\
    \            prev_char = Some(c);\n        } else {\n            prev_char = Some(c);\n\
    \        }\n    }\n\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmprhuw1tmb.rs:14:19\n   |\n14 |             words.push_back(c.to_string());\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut result = Vec::new();\n    let mut words = s.split_whitespace();\n    let\
    \ mut word_iter: WordIter = words.skip_while(|&x| !x.is_empty()).enumerate();\n\
    \    while let Some((index, word)) = word_iter.next() {\n        result.push(word);\n\
    \        if index > 0 {\n            result.push(String::from(\" \"));\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `WordIter` in this scope\n  --> /tmp/tmpw5i4t4a0.rs:11:24\n\
    \   |\n11 |     let mut word_iter: WordIter = words.skip_while(|&x| !x.is_empty()).enumerate();\n\
    \   |                        ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    Words::new().map(|words|\
    \ {\n        s.split_whitespace().collect::<Vec<String>>()\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Words`\n --> /tmp/tmp0xajvo59.rs:9:5\n\
    \  |\n9 |     Words::new().map(|words| {\n  |     ^^^^^ use of undeclared type\
    \ `Words`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&str`\n    --> /tmp/tmp0xajvo59.rs:10:30\n\
    \     |\n10   |         s.split_whitespace().collect::<Vec<String>>()\n     |\
    \                              ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0433.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    s.split(|ch| {\n        match ch {\n          \
    \  ',' | ' ' => true,\n            _ => false\n        }\n    })\n    .map(|s|\
    \ {\n        s.to_string()\n    }).collect::<Vec<String>>();\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmpla7t7k3m.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().map(|c|\
    \ {\n        String::from(*c as char) + \",\"\n    }).collect::<Vec<String>>()\n\
    \        .trim()\n        .split(',')\n        .map(|w| w.trim())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpgvp8g6c3.rs:10:22\n\
    \   |\n10 |         String::from(*c as char) + \",\"\n   |                   \
    \   ^^\n\nerror[E0599]: no method named `trim` found for struct `Vec<String>`\
    \ in the current scope\n  --> /tmp/tmpgvp8g6c3.rs:12:10\n   |\n12 |         .trim()\n\
    \   |          ^^^^ method not found in `Vec<String>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|x| x.trim())\n        .filter(|x| !x.is_empty())\n       \
    \ .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpjhmpm4bp.rs:12:10\n     |\n12\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_words(s.clone()).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_words` in this scope\n --> /tmp/tmpf2akaqss.rs:9:5\n\
    \  |\n9 |     split_words(s.clone()).collect()\n  |     ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words.into_iter().map(String::from).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `words` in this scope\n --> /tmp/tmpta_52yl9.rs:9:5\n\
    \  |\n9 |     words.into_iter().map(String::from).collect::<Vec<_>>()\n  |   \
    \  ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.trim().split(|c|\
    \ !c.is_ascii_whitespace()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpp_iclg3y.rs:9:21\n\
    \  |\n9 |     s.trim().split(|c| !c.is_ascii_whitespace()).collect()\n  |    \
    \                 ^ consider giving this closure parameter a type\n  |\n  = note:\
    \ type must be known at this point\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&str`\n    --> /tmp/tmpp_iclg3y.rs:9:50\n\
    \     |\n9    |     s.trim().split(|c| !c.is_ascii_whitespace()).collect()\n \
    \    |                                                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0282.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace().collect();\n \
    \   words.reserve(words.len());\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpwmf_w1pi.rs:11:5\n\
    \   |\n10 |     let mut words = s.split_whitespace().collect();\n   |        \
    \ --------- consider giving `words` a type\n11 |     words.reserve(words.len());\n\
    \   |     ^^^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',')\n\
    \        .map(|s| s.to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpwo_ig5dy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    for (i, c) in s.chars().enumerate() {\n        if i\
    \ > 0 && c == ',' {\n            words.push(' ');\n        } else {\n        \
    \    words.push(c);\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd_54c_wu.rs:17:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n17 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `char`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words = s.split_whitespace().collect::<Vec<String>>();\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpicn2qwvc.rs:9:38\n     |\n9  \
    \  |     let words = s.split_whitespace().collect::<Vec<String>>();\n     |  \
    \                                    ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_str(\"\
    \ \")\n        .map(|x| String::from(x))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `split_str` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpy2mz9lq2.rs:9:7\n  |\n9 |     s.split_str(\"\
    \ \")\n  |       ^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `split`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|x|\
    \ String::from(x)).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpmshst3kp.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',')\n\
    \        .map(|word| word.trim())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmph0c5c4cj.rs:11:10\n     |\n11\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').collect()\n\
    \        .map(|s| String::from(s))\n        .collect::<Vec<String>>()\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpfkkapah_.rs:9:18\n\
    \  |\n9 |     s.split(',').collect()\n  |                  ^^^^^^^ cannot infer\
    \ type for type parameter `B` declared on the associated function `collect`\n\
    \  |\n  = note: type must be known at this point\nhelp: consider specifying the\
    \ type argument in the method call\n  |\n9 |     s.split(',').collect::<B>()\n\
    \  |                         +++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    s.split_whitespace().for_each(|w| {\n        match\
    \ w {\n            \"\" | \" \" => {}\n            x => { words.push(String::from(x))\
    \ }\n        }\n    });\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpzqp7frmq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    words.reserve(s.len());\n    let mut last = 0;\n\
    \    while last != s.len() {\n        let mut word = String::from(\"\");\n   \
    \     let start = last;\n        while last != s.len() {\n            let mut\
    \ next = s.find(' ', last);\n            if next == s.len() {\n              \
    \  last = s.len();\n            } else {\n                last = next;\n     \
    \       }\n            word.push_str(&s[start..last]);\n            words.push_back(word);\n\
    \        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpiqiyefbz.rs:16:30\n     |\n16   |             let mut next =\
    \ s.find(' ', last);\n     |                              ^^^^ ---  ---- supplied\
    \ 2 arguments\n     |                              |\n     |                 \
    \             expected 1 argument\n     |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiqiyefbz.rs:17:24\n   |\n17 |\
    \             if next == s.len() {\n   |                        ^^^^^^^ expected\
    \ enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |             if next == Some(s.len()) {\n   |                     \
    \   +++++       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiqiyefbz.rs:20:24\n\
    \   |\n11 |     let mut last = 0;\n   |                    - expected due to this\
    \ value\n...\n20 |                 last = next;\n   |                        ^^^^\
    \ expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<usize>`\n\nerror[E0599]: no method named `push_back`\
    \ found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpiqiyefbz.rs:23:19\n\
    \   |\n23 |             words.push_back(word);\n   |                   ^^^^^^^^^\
    \ method not found in `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words_to_words(s.split(|c|\
    \ c.is_whitespace()))\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `words_to_words` in this scope\n -->\
    \ /tmp/tmp63695ap1.rs:9:5\n  |\n9 |     words_to_words(s.split(|c| c.is_whitespace()))\n\
    \  |     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split('\
    \ ').collect()\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpm_4g_pmd.rs:9:18\n     |\n9  \
    \  |     s.split(' ').collect()\n     |                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|s| s.trim().to_string())\n        .filter(|s| !s.is_empty())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp9gt84e4c.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    , \").map(|s| s.trim()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpf22k0mrf.rs:9:37\n     |\n9  \
    \  |     s.split(\", \").map(|s| s.trim()).collect()\n     |                 \
    \                    ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    use\
    \ std::str::from_utf8;\n\n    let mut words = vec![];\n    let mut line = String::new();\n\
    \    loop {\n        let mut word = String::new();\n        if line.is_empty()\
    \ {\n            line = s.clone();\n        } else {\n            line.split_whitespace().for_each(|c|\
    \ {\n                word.push(c);\n                if word.is_empty() {\n   \
    \                 words.push(word.clone());\n                }\n            });\n\
    \            line.clear();\n        }\n        if line.is_empty() {\n        \
    \    break;\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::str::from_utf8`\n --> /tmp/tmp7v88e959.rs:9:9\n\
    \  |\n9 |     use std::str::from_utf8;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n\
    \  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7v88e959.rs:19:27\n   |\n19 |                 word.push(c);\n\
    \   |                           ^ expected `char`, found `&str`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut word = String::from(\"Hi, my name is John\"\
    );\n    while word.len() > 0 {\n        let mut pos = 0;\n        while pos <\
    \ word.len() {\n            let mut c = 0;\n            if let Some(c_end) = word.chars().position(|c|\
    \ c == ',' || c == ' ') {\n                c = c_end + 1;\n            }\n   \
    \         words.insert(0, word.split_at(pos).collect::<String>());\n         \
    \   pos = c;\n            word.truncate(c + (c > 0 ? 1 : 0));\n        }\n   \
    \     word.truncate(0);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n\
    \  --> /tmp/tmptlvb7h1k.rs:20:40\n   |\n20 |             word.truncate(c + (c\
    \ > 0 ? 1 : 0));\n   |                                        ^ expected one of\
    \ `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`,\
    \ `(`, `)`, `*`, `,`, `...`, `.`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`,\
    \ `extern`, `fn`, `for`, `impl`, `unsafe`, `~`, an operator, lifetime, or path,\
    \ found `0`\n  --> /tmp/tmptlvb7h1k.rs:20:44\n   |\n20 |             word.truncate(c\
    \ + (c > 0 ? 1 : 0));\n   |                                           -^ expected\
    \ one of 25 possible tokens\n   |                                           |\n\
    \   |                                           help: missing `,`\n\nerror: expected\
    \ one of `.`, `;`, `?`, `}`, or an operator, found `)`\n  --> /tmp/tmptlvb7h1k.rs:20:46\n\
    \   |\n20 |             word.truncate(c + (c > 0 ? 1 : 0));\n   |            \
    \                                  ^ expected one of `.`, `;`, `?`, `}`, or an\
    \ operator\n\nerror[E0599]: `(&str, &str)` is not an iterator\n  --> /tmp/tmptlvb7h1k.rs:18:48\n\
    \   |\n18 |             words.insert(0, word.split_at(pos).collect::<String>());\n\
    \   |                                                ^^^^^^^ `(&str, &str)` is\
    \ not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(&str, &str): Iterator`\n           which is required by `&mut (&str,\
    \ &str): Iterator`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut split = s.split_whitespace();\n    let mut result = Vec::new();\n    for\
    \ &s in split.by_ref() {\n        result.push(String::from(s));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp18ca4nec.rs:11:10\n   |\n11 |     for &s in split.by_ref()\
    \ {\n   |          ^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `str`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\n\nerror[E0277]: the size for values of type `str` cannot be\
    \ known at compilation time\n   --> /tmp/tmp18ca4nec.rs:12:34\n    |\n12  |  \
    \       result.push(String::from(s));\n    |                     ------------\
    \ ^ doesn't have a size known at compile-time\n    |                     |\n \
    \   |                     required by a bound introduced by this call\n    |\n\
    \    = help: the trait `Sized` is not implemented for `str`\nnote: required by\
    \ a bound in `from`\n\nerror[E0277]: the trait bound `String: From<str>` is not\
    \ satisfied\n  --> /tmp/tmp18ca4nec.rs:12:21\n   |\n12 |         result.push(String::from(s));\n\
    \   |                     ^^^^^^^^^^^^ the trait `From<str>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    Words::new(&s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Words`\n --> /tmp/tmpu28lyv_s.rs:9:5\n\
    \  |\n9 |     Words::new(&s).collect()\n  |     ^^^^^ use of undeclared type `Words`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    s.split_whitespace().collect::<Vec<_>>().filter_map(|w|\
    \ {\n        if !w.is_empty() {\n            words.push(w.clone());\n        }\n\
    \        Some(w)\n    }).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<&str>` is not an iterator\n   --> /tmp/tmpw2ozz4zw.rs:10:46\n\
    \    |\n10  |       s.split_whitespace().collect::<Vec<_>>().filter_map(|w| {\n\
    \    |                                                ^^^^^^^^^^ `Vec<&str>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&str>: Iterator`\n            which is required by `&mut Vec<&str>:\
    \ Iterator`\n            `[&str]: Iterator`\n            which is required by\
    \ `&mut [&str]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ words = s.split_whitespace();\n    words.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp8sylzqxw.rs:10:23\n     |\n10\
    \   |     words.into_iter().collect()\n     |                       ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|word| word.trim().to_string())\n        .filter(|word| !word.is_empty())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpihjwwjtn.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut current = String::from(\"\");\n    for ch in\
    \ s.chars() {\n        if ch.is_whitespace() || ch == ',' {\n            if current.is_empty()\
    \ {\n                continue;\n            }\n            words.push_back(current);\n\
    \            current = String::from(\"\");\n        } else {\n            current.push_str(&ch.to_string());\n\
    \        }\n    }\n    if current.is_empty() {\n        words.push_back(current);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmp86nbh1sv.rs:16:19\n   |\n16 |             words.push_back(current);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmp86nbh1sv.rs:23:15\n   |\n23 |         words.push_back(current);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.replace(\"\
    ,\", \" \").split_whitespace().collect()\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpl_5ka6xx.rs:9:44\n     |\n9  \
    \  |     s.replace(\",\", \" \").split_whitespace().collect()\n     |        \
    \                                    ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c:\
    \ char| c.is_ascii_whitespace()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpjm0guvdd.rs:9:48\n     |\n9  \
    \  |     s.split(|c: char| c.is_ascii_whitespace()).collect()\n     |        \
    \                                        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    WordSplitter::new(s).into_iter().map(String::from).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `WordSplitter`\n\
    \ --> /tmp/tmpnot_uvwu.rs:9:5\n  |\n9 |     WordSplitter::new(s).into_iter().map(String::from).collect()\n\
    \  |     ^^^^^^^^^^^^ use of undeclared type `WordSplitter`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().enumerate().map(|(i,\
    \ ch)| (ch, s.chars()[i + 1..].collect::<String>()))\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `Chars<'_>`\n --> /tmp/tmpdfqauney.rs:9:46\n\
    \  |\n9 |     s.chars().enumerate().map(|(i, ch)| (ch, s.chars()[i + 1..].collect::<String>()))\n\
    \  |                                              ^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut current: String = String::from(\"\");\n\
    \    let mut inp = String::from(s);\n    while !inp.is_empty() {\n        let\
    \ next = inp.split_whitespace().last();\n        if next.is_none() {\n       \
    \     current.push_str(&inp);\n        } else {\n            current.push_str(&next.unwrap());\n\
    \            words.push_back(current);\n            current = String::from(\"\"\
    );\n        }\n        inp = String::from(\"\");\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpt0ezzj9a.rs:18:19\n   |\n18 |             words.push_back(current);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().map(|c|\
    \ {\n        let mut w = String::new();\n        w.push(c);\n        w\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"H\", \"i\", \",\", \" \", \"m\", \"y\", \" \", \"n\", \"a\", \"m\", \"e\"\
    , \" \", \"i\", \"s\", \" \", \"J\", \"o\", \"h\", \"n\"]`,\n right: `[\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmpot1ow64q.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut out = vec![];\n    let mut split = s.split(',').map(|x| x.trim());\n   \
    \ while let Some(x) = split.pop() {\n        out.push(x);\n    }\n    out\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pop` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpc51mc_ij.rs:11:31\n   |\n11 |     while let Some(x) = split.pop()\
    \ {\n   |                               ^^^ method not found in `Map<std::str::Split<'_,\
    \ char>, [closure@/tmp/tmpc51mc_ij.rs:10:38: 10:50]>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    s.split(|c| c.is_ascii_word()).collect::<Vec<_>>().cloned().extend(\n\
    \        s.split(|c| c.is_ascii_word()).collect::<Vec<_>>().cloned(),\n    );\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpylw7qzx1.rs:10:14\n\
    \   |\n10 |     s.split(|c| c.is_ascii_word()).collect::<Vec<_>>().cloned().extend(\n\
    \   |              ^ consider giving this closure parameter a type\n   |\n   =\
    \ note: type must be known at this point\n\nerror[E0599]: `Vec<&str>` is not an\
    \ iterator\n   --> /tmp/tmpylw7qzx1.rs:10:56\n    |\n10  |       s.split(|c| c.is_ascii_word()).collect::<Vec<_>>().cloned().extend(\n\
    \    |                                                          ^^^^^^ `Vec<&str>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&str>: Iterator`\n            which is required by `&mut Vec<&str>:\
    \ Iterator`\n            `[&str]: Iterator`\n            which is required by\
    \ `&mut [&str]: Iterator`\n\nerror[E0599]: `Vec<&str>` is not an iterator\n  \
    \ --> /tmp/tmpylw7qzx1.rs:11:60\n    |\n11  |           s.split(|c| c.is_ascii_word()).collect::<Vec<_>>().cloned(),\n\
    \    |                                                              ^^^^^^ `Vec<&str>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&str>: Iterator`\n            which is required by `&mut Vec<&str>:\
    \ Iterator`\n            `[&str]: Iterator`\n            which is required by\
    \ `&mut [&str]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0282, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|x|\
    \ String::from(x)).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpmshst3kp.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut parts = s.split_whitespace().collect::<Vec<_>>();\n    parts.sort();\n \
    \   parts\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_qzptrve.rs:11:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n11 |\
    \     parts\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().map(String::from).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmptoen6sbx.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.to_lowercase().split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpyxwtht7k.rs:9:41\n     |\n9  \
    \  |     s.to_lowercase().split_whitespace().collect()\n     |               \
    \                          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|x| x.parse().unwrap())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpzpmc_n1k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',')\n\
    \        .map(|s| s.trim_end().to_string())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpdotkohh3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.replace(\"\
    ,\", \", \").replace(\".\", \" \").trim().split_ascii_whitespace()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_m8av3j4.rs:9:5\n  |\n8 |\
    \ fn words_string(s: String) -> Vec<String> {\n  |                           \
    \    ----------- expected `Vec<String>` because of return type\n9 |     s.replace(\"\
    ,\", \", \").replace(\".\", \" \").trim().split_ascii_whitespace()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `SplitAsciiWhitespace`\n  |\n  = note: expected\
    \ struct `Vec<String>`\n             found struct `SplitAsciiWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut word = String::from(\"\");\n    let mut\
    \ word_vec = Vec::new();\n\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            word_vec.push(word);\n            word = String::from(\"\");\n\
    \        } else if c.is_ascii_letter() {\n            word += c;\n        } else\
    \ if c.is_punctuation() {\n            word += c;\n        } else if c.is_digit()\
    \ {\n            if word.len() > 0 {\n                word_vec.push(word);\n \
    \               word = String::from(\"\");\n            }\n        } else {\n\
    \            panic!(\"Unexpected character in string\");\n        }\n    }\n\n\
    \    if word.len() > 0 {\n        word_vec.push(word);\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for type `char` in\
    \ the current scope\n  --> /tmp/tmps4uqm8tq.rs:17:21\n   |\n17 |         } else\
    \ if c.is_ascii_letter() {\n   |                     ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps4uqm8tq.rs:18:21\n   |\n18 |             word += c;\n\
    \   |                     ^ expected `&str`, found `char`\n\nerror[E0599]: no\
    \ method named `is_punctuation` found for type `char` in the current scope\n \
    \ --> /tmp/tmps4uqm8tq.rs:19:21\n   |\n19 |         } else if c.is_punctuation()\
    \ {\n   |                     ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii_punctuation`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmps4uqm8tq.rs:20:21\n   |\n20 |             word += c;\n   |    \
    \                 ^ expected `&str`, found `char`\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmps4uqm8tq.rs:21:21\n\
    \    |\n21  |         } else if c.is_digit() {\n    |                     ^^^^^^^^-\
    \ supplied 0 arguments\n    |                     |\n    |                   \
    \  expected 1 argument\n    |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().filter(|c|\
    \ *c != ',').collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpk3q29g_d.rs:9:37\n     |\n9  \
    \  |     s.chars().filter(|c| *c != ',').collect()\n     |                   \
    \                  ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    s.split(',').map(|w| {\n        words.extend_from_slice(w.chars().collect::<Vec<String>>());\n\
    \    });\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmppnx_e1s8.rs:11:43\n     |\n11\
    \   |         words.extend_from_slice(w.chars().collect::<Vec<String>>());\n \
    \    |                                           ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppnx_e1s8.rs:11:33\n\
    \   |\n11 |         words.extend_from_slice(w.chars().collect::<Vec<String>>());\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\
    \                                 |\n   |                                 expected\
    \ `&[_]`, found struct `Vec`\n   |                                 help: consider\
    \ borrowing here: `&w.chars().collect::<Vec<String>>()`\n   |\n   = note: expected\
    \ reference `&[_]`\n                 found struct `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut v: Vec<String> = Vec::new();\n    let mut words: Vec<String> = s.split_whitespace().collect();\n\
    \    if words.len() > 0 {\n        v.push(words.first().to_string());\n      \
    \  words.remove_prefix(1);\n    }\n    for word in words {\n        v.push(word.to_string());\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp2mr3ul_z.rs:10:55\n     |\n10\
    \   |     let mut words: Vec<String> = s.split_whitespace().collect();\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: the method `to_string` exists for enum\
    \ `Option<&String>`, but its trait bounds were not satisfied\n   --> /tmp/tmp2mr3ul_z.rs:12:30\n\
    \    |\n12  |           v.push(words.first().to_string());\n    |            \
    \                    ^^^^^^^^^ method cannot be called on `Option<&String>` due\
    \ to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `Option<&String>: std::fmt::Display`\n         \
    \   which is required by `Option<&String>: ToString`\n\nerror[E0599]: no method\
    \ named `remove_prefix` found for struct `Vec<String>` in the current scope\n\
    \  --> /tmp/tmp2mr3ul_z.rs:13:15\n   |\n13 |         words.remove_prefix(1);\n\
    \   |               ^^^^^^^^^^^^^ method not found in `Vec<String>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',')\n\
    \        .map(|a| a.trim())\n        .filter(|&a| a.len() > 0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp5qyqbipy.rs:12:10\n     |\n12\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut result = Vec::new();\n    let mut words = s.split_whitespace();\n\n    for\
    \ word in words {\n        result.push(String::from(word));\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmp79xyrn9e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    match\
    \ (s.to_owned(), s) {\n        (\",\".to_owned(), \"\".to_owned()) => vec![],\n\
    \        (\" \", _) => vec![],\n        (s, \"\") => s.split(',').collect(),\n\
    \        _ => {\n            let mut words = s.split_whitespace();\n         \
    \   words.clear();\n            words.reserve(words.len());\n            words.extend(s.split(',').collect());\n\
    \            words.into_iter().collect()\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `...`, `..=`, `..`, or `|`, found `.`\n\
    \  --> /tmp/tmp9w83_ho0.rs:10:13\n   |\n10 |         (\",\".to_owned(), \"\".to_owned())\
    \ => vec![],\n   |             ^\n   |             |\n   |             expected\
    \ one of `)`, `,`, `...`, `..=`, `..`, or `|`\n   |             help: missing\
    \ `,`\n\nerror: expected one of `)`, `,`, `...`, `..=`, `..`, or `|`, found `.`\n\
    \  --> /tmp/tmp9w83_ho0.rs:10:28\n   |\n10 |         (\",\".to_owned(), \"\".to_owned())\
    \ => vec![],\n   |                            ^\n   |                        \
    \    |\n   |                            expected one of `)`, `,`, `...`, `..=`,\
    \ `..`, or `|`\n   |                            help: missing `,`\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `to_owned` in this scope\n  --> /tmp/tmp9w83_ho0.rs:10:14\n\
    \   |\n10 |         (\",\".to_owned(), \"\".to_owned()) => vec![],\n   |     \
    \         ^^^^^^^^ not found in this scope\n\nerror[E0531]: cannot find tuple\
    \ struct or tuple variant `to_owned` in this scope\n  --> /tmp/tmp9w83_ho0.rs:10:29\n\
    \   |\n10 |         (\",\".to_owned(), \"\".to_owned()) => vec![],\n   |     \
    \                        ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9w83_ho0.rs:10:9\n   |\n9  |     match (s.to_owned(), s)\
    \ {\n   |           ----------------- this expression has type `(String, String)`\n\
    10 |         (\",\".to_owned(), \"\".to_owned()) => vec![],\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected a tuple with 2 elements, found one with 4 elements\n   |\n   = note:\
    \ expected tuple `(String, String)`\n              found tuple `(_, _, _, _)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9w83_ho0.rs:11:10\n   |\n9  |\
    \     match (s.to_owned(), s) {\n   |           ----------------- this expression\
    \ has type `(String, String)`\n10 |         (\",\".to_owned(), \"\".to_owned())\
    \ => vec![],\n11 |         (\" \", _) => vec![],\n   |          ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9w83_ho0.rs:12:13\n\
    \   |\n9  |     match (s.to_owned(), s) {\n   |           ----------------- this\
    \ expre"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = String::new();\n    s.split(|c| match c {\n        c if c == ','\
    \ | c == '\\n' => {\n            words.push_str(\",\");\n        }\n        _\
    \ => {\n            words.push_str(c);\n        }\n    });\n    words.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpsd_qtxpt.rs:11:16\n\
    \   |\n11 |         c if c == ',' | c == '\\n' => {\n   |                ^^  \
    \       ^^\n   |\nhelp: split the comparison into two\n   |\n11 |         c if\
    \ c == ',' | c && ',' | c == '\\n' => {\n   |                           ++++++++++\n\
    \nerror[E0369]: no implementation for `char | _`\n  --> /tmp/tmpsd_qtxpt.rs:11:23\n\
    \   |\n11 |         c if c == ',' | c == '\\n' => {\n   |                   ---\
    \ ^ - _\n   |                   |\n   |                   char\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsd_qtxpt.rs:11:30\n   |\n11 |         c if c\
    \ == ',' | c == '\\n' => {\n   |                              ^^^^ expected `bool`,\
    \ found `char`\n\nerror[E0631]: type mismatch in closure arguments\n    --> /tmp/tmpsd_qtxpt.rs:10:7\n\
    \     |\n10   |     s.split(|c| match c {\n     |       ^^^^^ ----------- found\
    \ signature of `fn(&str) -> _`\n     |       |\n     |       expected signature\
    \ of `fn(char) -> _`\n     |\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `[closure@/tmp/tmpsd_qtxpt.rs:10:13: 17:6]`\n\
    note: required by a bound in `core::str::<impl str>::split`\n\nerror[E0277]: a\
    \ value of type `Vec<String>` cannot be built from an iterator over elements of\
    \ type `&str`\n    --> /tmp/tmpsd_qtxpt.rs:18:30\n     |\n18   |     words.split_whitespace().collect()\n\
    \     |                              ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0369, E0631.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.to_lowercase().split(\"\
    ,\")\n        .map(|s| s.trim_matches(' '))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp8ppulmmy.rs:11:10\n     |\n11\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_str(s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_str` in this scope\n --> /tmp/tmpqf3dxgg5.rs:9:5\n\
    \  |\n9 |     split_str(s).collect()\n  |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut current_word = String::new();\n    loop\
    \ {\n        let next_word = s.splitn(2, \",\").next()?;\n        if next_word.len()\
    \ == 1 {\n            current_word.push_str(next_word);\n        } else {\n  \
    \          current_word.push_str(next_word);\n            words.push_back(current_word);\n\
    \            current_word = String::new();\n        }\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the `?` operator can only be used in a function that returns\
    \ `Result` or `Option` (or another type that implements `FromResidual`)\n  -->\
    \ /tmp/tmpwx3_76h1.rs:12:48\n   |\n8  | / fn words_string(s: String) -> Vec<String>\
    \ {\n9  | |     let mut words = Vec::new();\n10 | |     let mut current_word =\
    \ String::new();\n11 | |     loop {\n12 | |         let next_word = s.splitn(2,\
    \ \",\").next()?;\n   | |                                                ^ cannot\
    \ use the `?` operator in a function that returns `Vec<String>`\n...  |\n21 |\
    \ |     words\n22 | | }\n   | |_- this function should return `Result` or `Option`\
    \ to accept `?`\n   |\n   = help: the trait `FromResidual<Option<Infallible>>`\
    \ is not implemented for `Vec<String>`\n\nerror[E0599]: no method named `push_back`\
    \ found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpwx3_76h1.rs:17:19\n\
    \   |\n17 |             words.push_back(current_word);\n   |                 \
    \  ^^^^^^^^^ method not found in `Vec<_>`\n\nwarning: unreachable expression\n\
    \  --> /tmp/tmpwx3_76h1.rs:21:5\n   |\n11 | /     loop {\n12 | |         let next_word\
    \ = s.splitn(2, \",\").next()?;\n13 | |         if next_word.len() == 1 {\n14\
    \ | |             current_word.push_str(next_word);\n...  |\n19 | |         }\n\
    20 | |     }\n   | |_____- any code following this expression is unreachable\n\
    21 |       words\n   |       ^^^^^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = Vec::new();\n    let mut word_count = 0;\n    let mut\
    \ word = String::new();\n    let mut split_space = true;\n    for char in s.chars()\
    \ {\n        if char == ',' || char == ' ' {\n            if split_space {\n \
    \               words.push(word.clone());\n                word_count += 1;\n\
    \                word.clear();\n                split_space = false;\n       \
    \     } else {\n                split_space = true;\n            }\n        }\
    \ else {\n            word.push(char.to_string());\n        }\n    }\n    words.push(word.clone());\n\
    \    word_count += 1;\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc4ugdz7c.rs:24:23\n   |\n\
    24 |             word.push(char.to_string());\n   |                       ^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    Vec::from_iter(s.split(',').map(|x|\
    \ x.trim()).collect())\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `Vec<_, _>` in the current scope\n --> /tmp/tmp481h84x4.rs:9:10\n  |\n\
    9 |     Vec::from_iter(s.split(',').map(|x| x.trim()).collect())\n  |        \
    \  ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n  |\n  = help:\
    \ items from traits can only be used if the trait is in scope\nhelp: the following\
    \ trait is implemented but not in scope; perhaps add a `use` for it:\n  |\n1 |\
    \ use std::iter::FromIterator;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split('\
    \ ').collect()\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpm_4g_pmd.rs:9:18\n     |\n9  \
    \  |     s.split(' ').collect()\n     |                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut vec = Vec::new();\n    let mut s = String::from(s);\n    let mut word_iter:\
    \ Result<String, ()> = s.split_whitespace();\n\n    while let Some(word) = {\n\
    \        vec.push(word);\n        let mut new_iter = word_iter.unwrap().split_whitespace();\n\
    \        word_iter = new_iter;\n    }\n\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `vec`\n  --> /tmp/tmpwtlt728f.rs:19:5\n   |\n\
    13 |       while let Some(word) = {\n   |  _____-----_-\n   | |     |\n   | |\
    \     while parsing the body of this `while` expression\n14 | |         vec.push(word);\n\
    15 | |         let mut new_iter = word_iter.unwrap().split_whitespace();\n16 |\
    \ |         word_iter = new_iter;\n17 | |     }\n   | |_____- this `while` condition\
    \ successfully parsed\n18 | \n19 |       vec\n   |       ^^^ expected `{`\n  \
    \ |\nhelp: try placing this code inside a block\n   |\n19 |     { vec }\n   |\
    \     +     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwtlt728f.rs:11:45\n\
    \   |\n11 |     let mut word_iter: Result<String, ()> = s.split_whitespace();\n\
    \   |                        ------------------   ^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Result`, found struct `SplitWhitespace`\n   |                        |\n\
    \   |                        expected due to this\n   |\n   = note: expected enum\
    \ `Result<String, ()>`\n            found struct `SplitWhitespace<'_>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c|\
    \ c != ',' && c != ' ')\n        .map(|v| v.to_owned())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"\", \", \", \"\", \" \", \"\", \"\", \"\", \" \", \"\", \" \", \"\"\
    , \"\", \"\", \"\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"John\"]`',\
    \ /tmp/tmpu85ueqvh.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c|\
    \ c.is_alphanumeric()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp2qwnkk_u.rs:9:14\n\
    \  |\n9 |     s.split(|c| c.is_alphanumeric()).collect()\n  |              ^ consider\
    \ giving this closure parameter a type\n  |\n  = note: type must be known at this\
    \ point\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from an\
    \ iterator over elements of type `&str`\n    --> /tmp/tmp2qwnkk_u.rs:9:38\n  \
    \   |\n9    |     s.split(|c| c.is_alphanumeric()).collect()\n     |         \
    \                             ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0282.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_words(&s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_words` in this scope\n --> /tmp/tmpe7x005zx.rs:9:5\n\
    \  |\n9 |     split_words(&s).collect()\n  |     ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        match s.chars().next().unwrap() {\n            Some(',') => {\n \
    \               words.push(String::from(s));\n                s = String::from(s.chars().next().unwrap());\n\
    \                continue;\n            }\n            Some(' ') => {\n      \
    \          words.push(String::from(s));\n                s = String::from(s.chars().next().unwrap());\n\
    \                continue;\n            }\n            Some('\"') => {\n     \
    \           let s = String::from(s.chars().next().unwrap());\n               \
    \ let mut parts = Vec::new();\n                while let Some('\"') = s.chars().next().unwrap()\
    \ {\n                    parts.push(String::from(s));\n                }\n   \
    \             words.push(parts.into_iter().map(|s| s.to_string()).collect::<Vec<_>>());\n\
    \                break;\n            }\n            Some(c as char) => {\n   \
    \             let s = String::from(s.chars().next().unwrap());\n             \
    \   let mut parts = Vec::new();\n                while let Some(c as char) = s.chars().next().unwrap()\
    \ {\n                    parts.push(c);\n                }\n                words.push(parts.into_iter().map(|s|\
    \ s.to_string()).collect::<Vec<_>>());\n                break;\n            }\n\
    \            _ => {\n                s = s.to_owned();\n                break;\n\
    \            }\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `as`\n  --> /tmp/tmprm0fit5d.rs:32:20\n\
    \   |\n32 |             Some(c as char) => {\n   |                    ^^ expected\
    \ identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found\
    \ keyword `as`\n  --> /tmp/tmprm0fit5d.rs:32:20\n   |\n32 |             Some(c\
    \ as char) => {\n   |                   -^^ expected one of `)`, `,`, `@`, or\
    \ `|`\n   |                   |\n   |                   help: missing `,`\n\n\
    error: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmprm0fit5d.rs:32:23\n\
    \   |\n32 |             Some(c as char) => {\n   |                      -^^^^\
    \ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |   \
    \                   help: missing `,`\n\nerror: expected identifier, found keyword\
    \ `as`\n  --> /tmp/tmprm0fit5d.rs:35:34\n   |\n35 |                 while let\
    \ Some(c as char) = s.chars().next().unwrap() {\n   |                        \
    \          ^^ expected identifier, found keyword\n\nerror: expected one of `)`,\
    \ `,`, `@`, or `|`, found keyword `as`\n  --> /tmp/tmprm0fit5d.rs:35:34\n   |\n\
    35 |                 while let Some(c as char) = s.chars().next().unwrap() {\n\
    \   |                                 -^^ expected one of `)`, `,`, `@`, or `|`\n\
    \   |                                 |\n   |                                \
    \ help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n\
    \  --> /tmp/tmprm0fit5d.rs:35:37\n   |\n35 |                 while let Some(c\
    \ as char) = s.chars().next().unwrap() {\n   |                               \
    \     -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      \
    \              |\n   |                                    help: missing `,`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprm0fit5d.rs:13:13\n   |\n12 |  \
    \       match s.chars().next().unwrap() {\n   |               -------------------------\
    \ this expression has type `char`\n13 |             Some(',') => {\n   |     \
    \        ^^^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<_>`\n\ner"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    for (i, char) in s.chars().enumerate() {\n        if\
    \ char == ' ' || char == '\\t' || char == '\\r' || char == '\\n' {\n         \
    \   words.push(i);\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpob5uxtoe.rs:15:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n15 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `usize`\n   |\n  \
    \ = note: expected struct `Vec<String>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    s.split_whitespace().collect::<Vec<_>>().for_each(|word|\
    \ {\n        if !words.is_empty() {\n            words.push(' ');\n        }\n\
    \        words.push(word)\n    });\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<&str>` is not an iterator\n   --> /tmp/tmp4oq6cui9.rs:10:46\n\
    \    |\n10  |       s.split_whitespace().collect::<Vec<_>>().for_each(|word| {\n\
    \    |                                                ^^^^^^^^ `Vec<&str>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&str>: Iterator`\n            which is required by `&mut Vec<&str>:\
    \ Iterator`\n            `[&str]: Iterator`\n            which is required by\
    \ `&mut [&str]: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4oq6cui9.rs:16:5\n\
    \   |\n8  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    16 |     words\n   |     ^^^^^ expected struct `String`, found `char`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut curr = String::from(\"\");\n    loop {\n  \
    \      let c = s.chars().next()?;\n        if c == ',' || c == ' ' {\n       \
    \     words.push(curr);\n            curr = String::from(\"\");\n        } else\
    \ if c == '.' {\n            words.push(curr);\n            curr = String::from(\"\
    \");\n        } else {\n            curr += c.to_string();\n        }\n      \
    \  if curr == String::from(\"\") {\n            words.push(curr);\n          \
    \  curr = \".\".to_string();\n        }\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the `?` operator can only be used in a function that returns\
    \ `Result` or `Option` (or another type that implements `FromResidual`)\n  -->\
    \ /tmp/tmp4hcgq7bm.rs:12:33\n   |\n8  | / fn words_string(s: String) -> Vec<String>\
    \ {\n9  | |     let mut words = vec![];\n10 | |     let mut curr = String::from(\"\
    \");\n11 | |     loop {\n12 | |         let c = s.chars().next()?;\n   | |   \
    \                              ^ cannot use the `?` operator in a function that\
    \ returns `Vec<String>`\n...  |\n27 | |     words\n28 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<Option<Infallible>>` is not implemented for `Vec<String>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp4hcgq7bm.rs:20:21\n   |\n20 |  \
    \           curr += c.to_string();\n   |                     ^^^^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&str`, found struct\
    \ `String`\n   |                     help: consider borrowing here: `&c.to_string()`\n\
    \nwarning: unreachable expression\n  --> /tmp/tmp4hcgq7bm.rs:27:5\n   |\n11 |\
    \ /     loop {\n12 | |         let c = s.chars().next()?;\n13 | |         if c\
    \ == ',' || c == ' ' {\n14 | |             words.push(curr);\n...  |\n25 | | \
    \        }\n26 | |     }\n   | |_____- any code following this expression is unreachable\n\
    27 |       words\n   |       ^^^^^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = vec![];\n\n    match s.chars() {\n        Some(c) =>\
    \ {\n            let mut chars_iter = c.chars();\n            while let Some(item)\
    \ = chars_iter.next() {\n                words.push(String::from(item));\n   \
    \         }\n        }\n        None => return vec![],\n    }\n\n    words\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz06zmi2b.rs:12:9\n   |\n\
    11 |     match s.chars() {\n   |           --------- this expression has type\
    \ `Chars<'_>`\n12 |         Some(c) => {\n   |         ^^^^^^^ expected struct\
    \ `Chars`, found enum `Option`\n   |\n   = note: expected struct `Chars<'_>`\n\
    \                found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpz06zmi2b.rs:18:9\n   |\n11 |     match s.chars() {\n   |           ---------\
    \ this expression has type `Chars<'_>`\n...\n18 |         None => return vec![],\n\
    \   |         ^^^^ expected struct `Chars`, found enum `Option`\n   |\n   = note:\
    \ expected struct `Chars<'_>`\n                found enum `Option<_>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|x|\
    \ x.trim()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpspn7pk5e.rs:9:36\n     |\n9  \
    \  |     s.split(',').map(|x| x.trim()).collect()\n     |                    \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut splits = s.split_whitespace();\n    splits.collect::<Vec<String>>()\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpz8m8l5er.rs:10:12\n     |\n10\
    \   |     splits.collect::<Vec<String>>()\n     |            ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n \
    \    |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words_string(s,\
    \ \" \")\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \ --> /tmp/tmp0ktx7tph.rs:9:5\n  |\n9 |     words_string(s, \" \")\n  |     ^^^^^^^^^^^^\
    \ -  --- supplied 2 arguments\n  |     |\n  |     expected 1 argument\n  |\nnote:\
    \ function defined here\n --> /tmp/tmp0ktx7tph.rs:8:4\n  |\n8 | fn words_string(s:\
    \ String) -> Vec<String> {\n  |    ^^^^^^^^^^^^ ---------\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    while !words.is_empty()\
    \ {\n        words.push_string(words.first().unwrap());\n        words = words.next()\n\
    \            .unwrap_or_else(|| vec![]);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpq2u5mpjc.rs:11:18\n   |\n11 |     while\
    \ !words.is_empty() {\n   |                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `push_string` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpq2u5mpjc.rs:12:15\n   |\n12 |         words.push_string(words.first().unwrap());\n\
    \   |               ^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `first` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmpq2u5mpjc.rs:12:33\n   |\n12 |         words.push_string(words.first().unwrap());\n\
    \   |                                 ^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq2u5mpjc.rs:14:32\n   |\n14 |\
    \             .unwrap_or_else(|| vec![]);\n   |                              \
    \  ^^^^^^ expected `&str`, found struct `Vec`\n   |\n   = note: expected reference\
    \ `&str`\n                 found struct `Vec<_>`\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq2u5mpjc.rs:13:17\n \
    \  |\n10 |       let mut words = s.split_whitespace();\n   |                 \
    \      -------------------- expected due to this value\n...\n13 |           words\
    \ = words.next()\n   |  _________________^\n14 | |             .unwrap_or_else(||\
    \ vec![]);\n   | |______________________________________^ expected struct `SplitWhitespace`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq2u5mpjc.rs:16:5\n\
    \   |\n8  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    16 |     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_string(s,\
    \ \" \")\n        .filter_map(|word| word.parse().ok())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_string` in this scope\n --> /tmp/tmp93f_pcqi.rs:9:5\n\
    \  |\n9 |     split_string(s, \" \")\n  |     ^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words2(s.as_str()).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `words2` in this scope\n --> /tmp/tmpm6ki1395.rs:9:5\n\
    \  |\n9 |     words2(s.as_str()).collect()\n  |     ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words_string2(s.split_ascii_whitespace())\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `words_string2` in this scope\n -->\
    \ /tmp/tmp6g8etg4s.rs:9:5\n  |\n9 |     words_string2(s.split_ascii_whitespace())\n\
    \  |     ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    word_splitter(s,\
    \ |word| word.as_str()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_splitter` in this scope\n -->\
    \ /tmp/tmpjmdd9vww.rs:9:5\n  |\n9 |     word_splitter(s, |word| word.as_str()).collect()\n\
    \  |     ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    s.split_whitespace().skip(1).for_each(|w| {\n \
    \       if !words.is_empty() {\n            words.push(String::from(\" \"));\n\
    \        }\n        words.push(w)\n    });\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp82o8n4yw.rs:14:20\n   |\n\
    14 |         words.push(w)\n   |                    ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                    |\n   |                    expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.into_bytes().iter().map(|b|\
    \ {\n        String::from_utf8_lossy(&b)\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbguew69b.rs:10:33\n   |\n\
    10 |         String::from_utf8_lossy(&b)\n   |                               \
    \  ^^ expected slice `[u8]`, found `&u8`\n   |\n   = note: expected reference\
    \ `&[u8]`\n              found reference `&&u8`\n\nerror[E0277]: a value of type\
    \ `Vec<String>` cannot be built from an iterator over elements of type `Cow<'_,\
    \ str>`\n    --> /tmp/tmpbguew69b.rs:11:8\n     |\n11   |     }).collect()\n \
    \    |        ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=Cow<'_,\
    \ str>>`\n     |\n     = help: the trait `FromIterator<Cow<'_, str>>` is not implemented\
    \ for `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars().map(|c|\
    \ {\n        let w = String::from(c) as String;\n        w if w.len() > 1 && w.ends_with(',')\n\
    \    }).collect::<Vec<String>>()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmpudnm_r9x.rs:11:11\n   |\n11 |         w if\
    \ w.len() > 1 && w.ends_with(',')\n   |           ^^ expected one of 8 possible\
    \ tokens\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let words = s.split_whitespace();\n    let mut vec:\
    \ Vec<String> = words.collect();\n    for word in &vec {\n        word.to_lowercase();\n\
    \        vec.push(word);\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpuouqj864.rs:11:38\n     |\n11\
    \   |     let mut vec: Vec<String> = words.collect();\n     |                \
    \                      ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuouqj864.rs:14:18\n   |\n14 |         vec.push(word);\n\
    \   |                  ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                  |\n   |                  expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|w|\
    \ w.to_string()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp2gh60p2q.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|s| s.split_whitespace())\n        .map(|words| words.into_iter().collect())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"mynameisJohn\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"]`', /tmp/tmp1plut5j8.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ TODO: implement the function\n    assert!(s.chars().all(|c| c == ' ' || c ==\
    \ '\\t' || c == ','));\n    let mut words = vec![];\n    s.splitn(2, ' ').for_each(|w|\
    \ {\n        words.extend_from_slice(&[w.trim()]);\n    });\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj7nv9v8i.rs:15:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n15 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = String::new();\n    let mut last_space = None;\n    for (i, c) in\
    \ s.chars().enumerate() {\n        if c == ',' || c == ' ' {\n            if last_space\
    \ == Some(i) {\n                continue;\n            }\n            words.push_str(&s[last_space..i]);\n\
    \            last_space = Some(i);\n        }\n    }\n    if last_space.is_some()\
    \ {\n        words.push_str(&s[last_space..]);\n    }\n    vec![String::from(words)]\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps_tk_ntp.rs:16:43\n   |\n\
    16 |             words.push_str(&s[last_space..i]);\n   |                    \
    \                       ^ expected enum `Option`, found `usize`\n   |\n   = note:\
    \ expected enum `Option<usize>`\n              found type `usize`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n16 |             words.push_str(&s[last_space..Some(i)]);\n\
    \   |                                           +++++ +\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `std::ops::Range<Option<usize>>`\n  --> /tmp/tmps_tk_ntp.rs:16:29\n\
    \   |\n16 |             words.push_str(&s[last_space..i]);\n   |             \
    \                ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<Option<usize>>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<Option<usize>>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<Option<usize>>`\n\
    \  --> /tmp/tmps_tk_ntp.rs:21:25\n   |\n21 |         words.push_str(&s[last_space..]);\n\
    \   |                         ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<Option<usize>>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<Option<usize>>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome erro"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpstav1j9l.rs:9:18\n     |\n9  \
    \  |     s.split(',').collect::<Vec<String>>()\n     |                  ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut word = \"\".to_owned();\n    for c in s.chars()\
    \ {\n        if c.is_whitespace() {\n            if word.is_empty() {\n      \
    \          continue;\n            }\n            words.push_back(word);\n    \
    \        word = \"\".to_owned();\n        } else {\n            word += c.to_string();\n\
    \        }\n    }\n    if word.is_empty() {\n        words.push_back(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmp41tfj_qb.rs:16:19\n   |\n16 |             words.push_back(word);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp41tfj_qb.rs:19:21\n   |\n19 |             word\
    \ += c.to_string();\n   |                     ^^^^^^^^^^^^^\n   |            \
    \         |\n   |                     expected `&str`, found struct `String`\n\
    \   |                     help: consider borrowing here: `&c.to_string()`\n\n\
    error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current\
    \ scope\n  --> /tmp/tmp41tfj_qb.rs:23:15\n   |\n23 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words_string_inner(s,\
    \ s.chars())\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `words_string_inner` in this scope\n\
    \ --> /tmp/tmp__17ydtr.rs:9:5\n  |\n9 |     words_string_inner(s, s.chars())\n\
    \  |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut vec = Vec::new();\n    for word in s.split(|c| c == ',' || c == ' ') {\n\
    \        vec.push(word.to_owned());\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpg58enmf0.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    words.iter().filter_map(|w|\
    \ w.contains(&s)).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `words` in this scope\n --> /tmp/tmp86orxjpu.rs:9:5\n\
    \  |\n9 |     words.iter().filter_map(|w| w.contains(&s)).collect()\n  |     ^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|w|\
    \ w.to_owned()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpbjzfu0nx.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut s = s\n        .split_whitespace()\n        .filter(|w| !w.is_empty())\n\
    \        .collect::<Vec<String>>();\n    s.sort_unstable();\n    s\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp5utebm84.rs:12:10\n     |\n12\
    \   |         .collect::<Vec<String>>();\n     |          ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut result = Vec::new();\n    let mut words = s.split_whitespace();\n    while\
    \ !words.is_empty() {\n        result.push(words.next());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp_a5e_pxv.rs:11:18\n   |\n11 |     while\
    \ !words.is_empty() {\n   |                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_a5e_pxv.rs:14:5\n   |\n8  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n14 |     result\n\
    \   |     ^^^^^^ expected struct `String`, found enum `Option`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<Option<&str>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut buf = [0; s.len() * 2];\n    let mut cur_start\
    \ = 0;\n    let mut cur_word = 0;\n\n    while cur_start < s.len() {\n       \
    \ let mut cur_end = cur_start;\n        let mut cur_len = 1;\n\n        while\
    \ cur_end < s.len() && buf[cur_end * 2] != ',' {\n            cur_end += 1;\n\
    \        }\n\n        cur_len += 1;\n\n        while cur_end < s.len() && buf[cur_end\
    \ * 2] == ',' {\n            cur_end += 1;\n        }\n\n        words.push(s.as_str().slice(cur_start,\
    \ cur_end));\n        cur_start = cur_end + 1;\n    }\n\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpa4gukl8o.rs:10:23\n   |\n8  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                 - this would need to be a `const`\n9  |     let mut\
    \ words = vec![];\n10 |     let mut buf = [0; s.len() * 2];\n   |            \
    \           ^\n\nerror[E0599]: no method named `slice` found for reference `&str`\
    \ in the current scope\n  --> /tmp/tmpa4gukl8o.rs:28:31\n   |\n28 |         words.push(s.as_str().slice(cur_start,\
    \ cur_end));\n   |                               ^^^^^ help: there is an associated\
    \ function with a similar name: `split_once`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0435, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c|\
    \ !c.is_alphanumeric())\n        .collect()\n        .map(|s| s.trim_end())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp2sgrf7kg.rs:9:14\n\
    \  |\n9 |     s.split(|c| !c.is_alphanumeric())\n  |              ^ consider giving\
    \ this closure parameter a type\n  |\n  = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = String::new();\n    let mut prev_c = None;\n    for c in s.chars()\
    \ {\n        if c.is_whitespace() {\n            if prev_c.is_whitespace() {\n\
    \                continue;\n            }\n        }\n        words.push(c);\n\
    \        prev_c = c;\n    }\n    words.split_whitespace().collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_whitespace` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmppzvihyfo.rs:13:23\n   |\n13 |             if\
    \ prev_c.is_whitespace() {\n   |                       ^^^^^^^^^^^^^ method not\
    \ found in `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppzvihyfo.rs:18:18\n\
    \   |\n10 |     let mut prev_c = None;\n   |                      ---- expected\
    \ due to this value\n...\n18 |         prev_c = c;\n   |                  ^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<_>`\n  \
    \            found type `char`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n18 |         prev_c = Some(c);\n   |                  +++++ +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n    --> /tmp/tmppzvihyfo.rs:20:30\n     |\n20   |     words.split_whitespace().collect()\n\
    \     |                              ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    tokenize(s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `tokenize` in this scope\n --> /tmp/tmpttffj27x.rs:9:5\n\
    \  |\n9 |     tokenize(s).collect()\n  |     ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words = s.split_whitespace();\n    while\
    \ !words.is_empty() {\n        words.next().unwrap().split(',').iter().for_each(|word|\
    \ words.next().unwrap().to_string().unwrap().push(word.to_owned()));\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpu6j6x1vc.rs:11:18\n   |\n11 |     while\
    \ !words.is_empty() {\n   |                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `iter` found for struct `std::str::Split` in the\
    \ current scope\n  --> /tmp/tmpu6j6x1vc.rs:12:42\n   |\n12 |         words.next().unwrap().split(',').iter().for_each(|word|\
    \ words.next().unwrap().to_string().unwrap().push(word.to_owned()));\n   |   \
    \                                       ^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror[E0599]: no method named `unwrap` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpu6j6x1vc.rs:12:99\n   |\n12 |         words.next().unwrap().split(',').iter().for_each(|word|\
    \ words.next().unwrap().to_string().unwrap().push(word.to_owned()));\n   |   \
    \                                                                            \
    \                    ^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu6j6x1vc.rs:14:5\n   |\n8  | fn words_string(s: String)\
    \ -> Vec<String> {\n   |                               ----------- expected `Vec<String>`\
    \ because of return type\n...\n14 |     words\n   |     ^^^^^ expected struct\
    \ `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `SplitWhitespace<'_>`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ Split string on space\n    let mut words = vec![];\n    for word in s.split_whitespace()\
    \ {\n        // Ignore empty word\n        if !word.is_empty() {\n           \
    \ words.push(word);\n        }\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsy3dt5nz.rs:17:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n17 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(',').map(|x|\
    \ x.trim()).collect()\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpspn7pk5e.rs:9:36\n     |\n9  \
    \  |     s.split(',').map(|x| x.trim()).collect()\n     |                    \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    words.reserve(s.chars().count() + 1);\n    for (i,\
    \ c) in s.chars().enumerate() {\n        let w = (i as i64 / 4).to_string();\n\
    \        if !w.is_empty() {\n            words.push(w.clone());\n        }\n \
    \       if c.is_whitespace() {\n            continue;\n        }\n        words.push(c.to_ascii_lowercase().to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"0\", \"h\", \"0\", \"i\", \"0\", \",\", \"0\", \"1\", \"m\", \"1\", \"y\"\
    , \"1\", \"1\", \"n\", \"2\", \"a\", \"2\", \"m\", \"2\", \"e\", \"2\", \"3\"\
    , \"i\", \"3\", \"s\", \"3\", \"3\", \"j\", \"4\", \"o\", \"4\", \"h\", \"4\"\
    , \"n\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmp_x473fxh.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.to_lowercase().split(\"\
    ,\")\n        .map(|s| s.trim_matches(' '))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp8ppulmmy.rs:11:10\n     |\n11\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    Words::new(s.split_whitespace()).for_each(|w| {\n \
    \       if !w.is_empty() {\n            words.push(w.clone());\n        }\n  \
    \  });\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Words`\n  -->\
    \ /tmp/tmp3bza9d23.rs:10:5\n   |\n10 |     Words::new(s.split_whitespace()).for_each(|w|\
    \ {\n   |     ^^^^^ use of undeclared type `Words`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut spaced = false;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c == ',' {\n            if spaced {\n                words.clear();\n\
    \            }\n            spaced = false;\n        } else if c == '.' {\n  \
    \          words.clear();\n            spaced = true;\n        } else {\n    \
    \        words.push(String::from(c));\n        }\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"H\", \"i\", \" \", \"m\", \"y\", \" \", \"n\", \"a\", \"m\", \"e\", \" \"\
    , \"i\", \"s\", \" \", \"J\", \"o\", \"h\", \"n\"]`,\n right: `[\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"]`', /tmp/tmp8mjfc53e.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut delimiters = vec![',', ' '];\n    let mut current_word\
    \ = String::from(\"\");\n\n    for char in s.chars() {\n        match char {\n\
    \            ',' => {\n                for delimiter in delimiters {\n       \
    \             if delimiter == char {\n                        current_word.push_str(delimiter);\n\
    \                        delimiters.push(' ');\n                        words.push(current_word);\n\
    \                        current_word = String::from(\"\");\n                \
    \    }\n                }\n            }\n            ' ' => {\n             \
    \   current_word.push_str(char);\n            }\n            _ => {\n        \
    \        current_word.push_str(char);\n            }\n        }\n    }\n\n   \
    \ words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp739jq5vn.rs:18:47\n   |\n\
    18 |                         current_word.push_str(delimiter);\n   |         \
    \                                      ^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp739jq5vn.rs:26:39\n   |\n26 |\
    \                 current_word.push_str(char);\n   |                         \
    \              ^^^^ expected `&str`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp739jq5vn.rs:29:39\n   |\n29 |                 current_word.push_str(char);\n\
    \   |                                       ^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|s| s.to_string())\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmp7wxoul_k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut word_list = String::new();\n    s.split('\
    \ ').for_each(|x| {\n        word_list.push_str(x);\n        if word_list.is_empty()\
    \ {\n            words.push_back(word_list);\n            word_list = String::new();\n\
    \        }\n    });\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmp2vii0pbv.rs:14:19\n   |\n14 |             words.push_back(word_list);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    split_by_whitespace(&s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_by_whitespace` in this scope\n\
    \ --> /tmp/tmpzj7qowdq.rs:9:5\n  |\n9 |     split_by_whitespace(&s).collect()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.trim().split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprfir5ssl.rs:9:33\n     |\n9  \
    \  |     s.trim().split_whitespace().collect()\n     |                       \
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    s.split_whitespace().map(|x| words.push(x));\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0pxp2id4.rs:11:5\n   |\n\
    8  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n11 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.trim().split(',').map(String::from).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \" my name is John\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]`', /tmp/tmpd77gi0ny.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut splits = s.split_whitespace();\n    for s in\
    \ splits.into_iter() {\n        if !s.is_empty() {\n            words.push(s.to_string());\n\
    \        }\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmp0_xyxoo7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_comma().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `split_comma` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpf7popkqe.rs:9:7\n  |\n9 |     s.split_comma().collect()\n\
    \  |       ^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `split_off`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = vec![String::new()];\n    let mut iter = s.split_whitespace();\n\
    \n    while let Some(word) = iter.next() {\n        words.push(word);\n    }\n\
    \n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpakpbpexc.rs:13:20\n   |\n\
    13 |         words.push(word);\n   |                    ^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                    |\n   |       \
    \             expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    let mut words_split = s.split_whitespace();\n \
    \   let mut word = String::from(\"\");\n    while let Some(word) = words_split.next()\
    \ {\n        word.push_str(\" \");\n        word.push_str(word);\n        word.push_str(\"\
    ,\");\n        word.push_str(word);\n        words.push(word);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_str` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmpmaw7p645.rs:13:14\n   |\n13 |         word.push_str(\"\
    \ \");\n   |              ^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `push_str` found for reference `&str` in the current scope\n\
    \  --> /tmp/tmpmaw7p645.rs:14:14\n   |\n14 |         word.push_str(word);\n  \
    \ |              ^^^^^^^^ method not found in `&str`\n\nerror[E0599]: no method\
    \ named `push_str` found for reference `&str` in the current scope\n  --> /tmp/tmpmaw7p645.rs:15:14\n\
    \   |\n15 |         word.push_str(\",\");\n   |              ^^^^^^^^ method not\
    \ found in `&str`\n\nerror[E0599]: no method named `push_str` found for reference\
    \ `&str` in the current scope\n  --> /tmp/tmpmaw7p645.rs:16:14\n   |\n16 |   \
    \      word.push_str(word);\n   |              ^^^^^^^^ method not found in `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmaw7p645.rs:19:5\n   |\n8  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n19 |     words\n\
    \   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(\"\
    ,\")\n        .map(|s| s.trim_end())\n        .collect()\n}\n\nfn main() {\n \
    \   let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp6th3plz6.rs:11:10\n     |\n11\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut v = vec![];\n    s.split(',').for_each(|word| {\n        let word = word.trim().parse::<usize>().unwrap();\n\
    \        if word != 0 {\n            v.push(String::from(word));\n        }\n\
    \    });\n    v\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<usize>` is not satisfied\n\
    \  --> /tmp/tmp3sgtekgl.rs:13:20\n   |\n13 |             v.push(String::from(word));\n\
    \   |                    ^^^^^^^^^^^^ the trait `From<usize>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.replace(\"\
    ,\", \" \")\n        .split(\" \")\n        .map(|word| String::from(word))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmpu_v7b6at.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    //\
    \ Split string on comma\n    let words = s.split(',');\n    // Split each word\
    \ on whitespace\n    let mut words = words.iter().map(|w| w.to_owned().trim_right());\n\
    \    // Split each word on space\n    let mut words = words.iter().map(|w| w.to_owned().split_whitespace());\n\
    \    // Flatten the results\n    let mut words: Vec<_> = words.flat_map(|w| w);\n\
    \    // Filter out empty words\n    words.filter(|w| w != \"\").collect()\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmpt9_knrae.rs:12:27\n   |\n12 |     let mut\
    \ words = words.iter().map(|w| w.to_owned().trim_right());\n   |             \
    \              ^^^^ method not found in `std::str::Split<'_, char>`\n\nerror[E0599]:\
    \ `Vec<_>` is not an iterator\n   --> /tmp/tmpt9_knrae.rs:18:11\n    |\n18  |\
    \       words.filter(|w| w != \"\").collect()\n    |             ^^^^^^ `Vec<_>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<_>: Iterator`\n            which is required by `&mut Vec<_>:\
    \ Iterator`\n            `[_]: Iterator`\n            which is required by `&mut\
    \ [_]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = String::new();\n    let mut line = String::new();\n\n    for c in\
    \ s.chars() {\n        if c == ',' || c == ' ' {\n            if line.is_empty()\
    \ {\n                continue;\n            }\n\n            words.push_str(&line);\n\
    \n            line.clear();\n        } else {\n            line.push_str(&c.to_string());\n\
    \        }\n    }\n\n    if line.is_empty() {\n        words.push_str(&line);\n\
    \    }\n\n    words.push_str(&line);\n\n    words.chars().map(String::from).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"H\", \"i\", \"m\", \"y\", \"n\", \"a\", \"m\", \"e\", \"i\", \"s\", \"J\"\
    , \"o\", \"h\", \"n\"]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]`', /tmp/tmpjap5fzb_.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = vec![];\n    let mut s = String::from(s);\n\n    while\
    \ !s.is_empty() {\n        words.push_back(s.trim_end());\n        if s.is_empty()\
    \ {\n            break;\n        }\n        let next = s.chars().next().unwrap();\n\
    \        let next = next.trim_end().split_ascii_whitespace().collect();\n    \
    \    s = String::from(next);\n    }\n\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<String>`\
    \ in the current scope\n  --> /tmp/tmpu2v0xvir.rs:13:15\n   |\n13 |         words.push_back(s.trim_end());\n\
    \   |               ^^^^^^^^^ method not found in `Vec<String>`\n\nerror[E0599]:\
    \ no method named `trim_end` found for type `char` in the current scope\n  -->\
    \ /tmp/tmpu2v0xvir.rs:18:25\n   |\n18 |         let next = next.trim_end().split_ascii_whitespace().collect();\n\
    \   |                         ^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = Vec::new();\n    for word in s.split(|x| !x.is_whitespace()) {\n\
    \        words.push_back(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpq0fioae9.rs:10:26\n\
    \   |\n10 |     for word in s.split(|x| !x.is_whitespace()) {\n   |          \
    \                ^ consider giving this closure parameter a type\n   |\n   = note:\
    \ type must be known at this point\n\nerror[E0599]: no method named `push_back`\
    \ found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpq0fioae9.rs:11:15\n\
    \   |\n11 |         words.push_back(word);\n   |               ^^^^^^^^^ method\
    \ not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0282, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.chars()\n\
    \        .filter(|c| !c.is_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = words_string;\n   \
    \ assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp1d_5i9tt.rs:12:10\n     |\n12\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words: Vec<String> = vec![];\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        words.push(word);\n    }\n    words\n}\n\nfn\
    \ main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmphlx7d8pq.rs:12:15\n   |\n12 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphlx7d8pq.rs:14:5\n   |\n8  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n14 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    let\
    \ mut words = vec![];\n    let mut delim = false;\n    let mut word: String =\
    \ String::from(\"\");\n    let mut space = false;\n    let mut char_ctr = 0;\n\
    \n    for c in s.chars() {\n        if c == ' ' {\n            space = true;\n\
    \        } else if delim {\n            delim = false;\n            if c.is_ascii()\
    \ {\n                if c.is_alphanumeric() {\n                    if !word {\n\
    \                        word = String::from(\"\");\n                    }\n \
    \                   word += c;\n                } else {\n                   \
    \ words.push(word);\n                    word = String::from(\"\");\n        \
    \        }\n            } else {\n                if word {\n                \
    \    words.push(word);\n                    word = String::from(\"\");\n     \
    \           }\n            }\n        } else {\n            if space {\n     \
    \           word += c;\n            } else {\n                if c.is_ascii()\
    \ {\n                    if c.is_alphanumeric() {\n                        delim\
    \ = true;\n                        word += c;\n                    } else {\n\
    \                        words.push(word);\n                        word = String::from(\"\
    \");\n                        delim = true;\n                        word = String::from(\"\
    \");\n                        word += c;\n                    }\n            \
    \    } else {\n                    if word {\n                        words.push(word);\n\
    \                        word = String::from(\"\");\n                    }\n \
    \                   delim = true;\n                    if !word {\n          \
    \              word = String::from(\"\");\n                    }\n           \
    \         word += c;\n                }\n            }\n        }\n        char_ctr\
    \ += 1;\n    }\n    words.push(word);\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0600]: cannot apply unary operator `!` to type `String`\n  --> /tmp/tmpnzdznl3p.rs:22:24\n\
    \   |\n22 |                     if !word {\n   |                        ^^^^^\
    \ cannot apply unary operator `!`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzdznl3p.rs:25:29\n\
    \   |\n25 |                     word += c;\n   |                             ^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzdznl3p.rs:31:20\n\
    \   |\n31 |                 if word {\n   |                    ^^^^ expected `bool`,\
    \ found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzdznl3p.rs:38:25\n\
    \   |\n38 |                 word += c;\n   |                         ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzdznl3p.rs:43:33\n\
    \   |\n43 |                         word += c;\n   |                         \
    \        ^ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpnzdznl3p.rs:49:33\n   |\n49 |                         word += c;\n\
    \   |                                 ^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnzdznl3p.rs:52:24\n   |\n52 |              \
    \       if word {\n   |                        ^^^^ expected `bool`, found struct\
    \ `String`\n\nerror[E0600]: cannot apply unary operator `!` to type `String`\n\
    \  --> /tmp/tmpnzdznl3p.rs:57:24\n   |\n57 |                     if !word {\n\
    \   |                        ^^^^^ cannot apply unary operator `!`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnzdznl3p.rs:60:29\n   |\n60 |              \
    \       word += c;\n   |                             ^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 9 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0600.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split(|c|\
    \ c == ',' || c == ' ')\n        .map(|s| s.to_lowercase())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hi\", \"\", \"my\", \"name\", \"is\", \"john\"]`,\n right: `[\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]`', /tmp/tmp1d9ztx8i.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprph4jait.rs:9:26\n     |\n9  \
    \  |     s.split_whitespace().collect()\n     |                          ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    string_split(s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_split` in this scope\n --> /tmp/tmpl6rj3fb7.rs:9:5\n\
    \  |\n9 |     string_split(s).collect()\n  |     ^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    String::from(s).split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp6uicef55.rs:9:40\n     |\n9  \
    \  |     String::from(s).split_whitespace().collect()\n     |                \
    \                        ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return a vector of the\
    \ words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is\
    \ John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"\
    One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n    s_split(s).collect()\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `s_split` in this scope\n --> /tmp/tmprjc8lknc.rs:9:5\n\
    \  |\n9 |     s_split(s).collect()\n  |     ^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976156
