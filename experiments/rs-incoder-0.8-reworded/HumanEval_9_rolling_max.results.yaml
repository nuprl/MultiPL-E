language: rs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut min = numbers.iter().min();\n\
    \    result.push(min);\n    for i in numbers {\n        if i == min {\n      \
    \      continue;\n        }\n        result.push(i);\n        min = i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg7kh0efw.rs:10:17\n   |\n\
    10 |         if i == min {\n   |                 ^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg7kh0efw.rs:13:21\n   |\n13 |\
    \         result.push(i);\n   |                     ^ expected enum `Option`,\
    \ found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n           \
    \   found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg7kh0efw.rs:14:15\n\
    \   |\n7  |     let mut min = numbers.iter().min();\n   |                   --------------------\
    \ expected due to this value\n...\n14 |         min = i;\n   |               ^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg7kh0efw.rs:16:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current_max: isize = 0;\n    for num in numbers\
    \ {\n        if num > current_max {\n            current_max = num;\n        }\n\
    \    }\n    numbers[numbers.len() - 1].min(current_max)\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpygqikrjv.rs:12:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n12 |     numbers[numbers.len() - 1].min(current_max)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers.clone();\n    for i in 1..numbers.len()\
    \ {\n        rolling_max.swap(i, i - 1);\n    }\n    rolling_max\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp62t85vav.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut max:\
    \ isize = numbers[0];\n    let mut current: isize = numbers[0];\n    let mut i\
    \ = 1;\n    while i < numbers.len() {\n        if numbers[i] > max {\n       \
    \     max = numbers[i];\n            current = max;\n        }\n        i += 1;\n\
    \    }\n    result.push(current);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpi9a_jh4v.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_number {\n       \
    \     max_number = n;\n        }\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n        }\n    }\n    let mut res = vec![max_so_far];\n    for i in 1..=max_number\
    \ {\n        res.push(i);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpz41t36wc.rs:6:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n\n\
    \    for (idx, num) in numbers.iter().enumerate() {\n        if num > max {\n\
    \            max_idx = idx;\n            max = num;\n        }\n    }\n\n    vec![max]\
    \ + numbers[max_idx..].cloned()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjsgko2fr.rs:10:18\n   |\n\
    10 |         if num > max {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&isize`, found `isize`\n   |            \
    \      help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjsgko2fr.rs:12:19\n   |\n6  |     let mut max = numbers[0];\n \
    \  |                   ---------- expected due to this value\n...\n12 |      \
    \       max = num;\n   |                   ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |             max = *num;\n\
    \   |                   +\n\nerror[E0599]: `[isize]` is not an iterator\n  -->\
    \ /tmp/tmpjsgko2fr.rs:16:36\n   |\n16 |     vec![max] + numbers[max_idx..].cloned()\n\
    \   |                                    ^^^^^^ `[isize]` is not an iterator;\
    \ try calling `.into_iter()` or `.iter()`\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `[isize]: Iterator`\n           which\
    \ is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut last_max: Option<isize>\
    \ = None;\n    for n in numbers {\n        if *n > max {\n            max = *n;\n\
    \            last_max = Some(max);\n        }\n    }\n    if last_max.is_some()\
    \ {\n        last_max.unwrap()\n    } else {\n        numbers\n    }\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpbgnp0g_3.rs:9:12\n\
    \  |\n9 |         if *n > max {\n  |            ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpbgnp0g_3.rs:10:19\n   |\n10 |        \
    \     max = *n;\n   |                   ^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbgnp0g_3.rs:15:9\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |         last_max.unwrap()\n \
    \  |         ^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n  \
    \ = note: expected struct `Vec<isize>`\n                found type `isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_slice: Vec<isize> = numbers.to_vec();\n\
    \    let mut max_elements: Vec<isize> = Vec::new();\n    let mut max_index = -1;\n\
    \n    for i in 0..numbers_slice.len() {\n        if max_index < 0 {\n        \
    \    max_index = i;\n            max_elements.push(numbers_slice[i]);\n      \
    \  } else {\n            max_index = i;\n            if max_elements[max_index]\
    \ < numbers_slice[i] {\n                max_elements[max_index] = numbers_slice[i];\n\
    \            }\n        }\n    }\n\n    max_elements\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp9znrxnrz.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max: Vec<isize> = Vec::new();\n    rolling_max.push(numbers.iter().max().unwrap());\n\
    \    for i in 1..numbers.len() {\n        rolling_max.push(numbers[i - 1] + numbers[i]\
    \ - rolling_max.last().unwrap());\n    }\n    rolling_max\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx80carwc.rs:7:22\n  |\n7 |\
    \     rolling_max.push(numbers.iter().max().unwrap());\n  |                  \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  |\nhelp:\
    \ consider dereferencing the borrow\n  |\n7 |     rolling_max.push(*numbers.iter().max().unwrap());\n\
    \  |                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = numbers;\n    let mut max_element:\
    \ isize = numbers[0];\n    for i in numbers.iter().rev() {\n        if i >= max_element\
    \ {\n            max_element = i;\n            result.push(i);\n        } else\
    \ {\n            result.pop();\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzmib19vy.rs:9:17\n  |\n9 |\
    \         if i >= max_element {\n  |                 ^^^^^^^^^^^\n  |        \
    \         |\n  |                 expected `&isize`, found `isize`\n  |       \
    \          help: consider borrowing here: `&max_element`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzmib19vy.rs:10:27\n   |\n7  |     let mut max_element:\
    \ isize = numbers[0];\n   |                          ----- expected due to this\
    \ type\n...\n10 |             max_element = i;\n   |                         \
    \  ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n10 |             max_element = *i;\n   |                     \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzmib19vy.rs:11:25\n\
    \   |\n11 |             result.push(i);\n   |                         ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             result.push(*i);\n   |                         +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers[..]\n        .iter()\n        .cloned()\n     \
    \   .windows(2)\n        .enumerate()\n        .filter_map(|(i, elem)| {\n   \
    \         if elem.0.checked_sub(1).is_negative() {\n                None\n   \
    \         } else {\n                Some(elem)\n            }\n        })\n  \
    \      .collect::<Vec<(isize, isize)>>()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpdclwldlz.rs:9:10\n  |\n9 |         .windows(2)\n\
    \  |          ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \    let mut max: isize = 0;\n    let mut max_idx = numbers.iter().cloned().max().unwrap();\n\
    \    max = numbers.iter().cloned().skip(max_idx - 1).collect::<Vec<_>>().unwrap().max().unwrap();\n\
    \    for i in &numbers {\n        if *i > max {\n            max = *i;\n     \
    \       max_idx = i;\n        }\n    }\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in &numbers {\n        if i == max_idx {\n            result.push(*i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpya49tjpk.rs:11:40\n   |\n\
    11 |     max = numbers.iter().cloned().skip(max_idx - 1).collect::<Vec<_>>().unwrap().max().unwrap();\n\
    \   |                                        ^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |     max = numbers.iter().cloned().skip((max_idx\
    \ - 1).try_into().unwrap()).collect::<Vec<_>>().unwrap().max().unwrap();\n   |\
    \                                        +           +++++++++++++++++++++\n\n\
    error[E0599]: no method named `unwrap` found for struct `Vec<isize>` in the current\
    \ scope\n  --> /tmp/tmpya49tjpk.rs:11:73\n   |\n11 |     max = numbers.iter().cloned().skip(max_idx\
    \ - 1).collect::<Vec<_>>().unwrap().max().unwrap();\n   |                    \
    \                                                     ^^^^^^ help: there is an\
    \ associated function with a similar name: `swap`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpya49tjpk.rs:15:23\n   |\n10 |     let mut max_idx = numbers.iter().cloned().max().unwrap();\n\
    \   |                       -------------------------------------- expected due\
    \ to this value\n...\n15 |             max_idx = i;\n   |                    \
    \   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n15 |             max_idx = *i;\n   |                       +\n\
    \nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpya49tjpk.rs:20:14\n\
    \   |\n20 |         if i == max_idx {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_copy: Vec<isize> = numbers.clone();\n \
    \   let mut rolling_max_copy: Vec<isize> = numbers.clone();\n    for i in 1..numbers.len()\
    \ {\n        let rolling_max = numbers_copy.binary_search(|&x| {\n           \
    \ x > rolling_max_copy.last()\n        });\n        rolling_max_copy[rolling_max]\
    \ = numbers[i];\n    }\n    rolling_max_copy\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz9mxbpgz.rs:9:54\n   |\n\
    9  |           let rolling_max = numbers_copy.binary_search(|&x| {\n   |  ______________________________________________________^\n\
    10 | |             x > rolling_max_copy.last()\n11 | |         });\n   | |_________^\
    \ expected `&isize`, found closure\n   |\n   = note: expected reference `&isize`\n\
    \                found closure `[closure@/tmp/tmpz9mxbpgz.rs:9:54: 11:10]`\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `Result<usize, usize>`\n\
    \  --> /tmp/tmpz9mxbpgz.rs:12:9\n   |\n12 |         rolling_max_copy[rolling_max]\
    \ = numbers[i];\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `Result<usize, usize>`\n   = note: required because of\
    \ the requirements on the impl of `Index<Result<usize, usize>>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    numbers.iter().for_each(|number|\n\
    \        result.push(numbers[numbers.len() - numbers.len() - number]));\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpln3t93pv.rs:8:61\n  |\n8 |\
    \         result.push(numbers[numbers.len() - numbers.len() - number]));\n  |\
    \                                                             ^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n\
    \ --> /tmp/tmpln3t93pv.rs:8:59\n  |\n8 |         result.push(numbers[numbers.len()\
    \ - numbers.len() - number]));\n  |                                          \
    \                 ^ no implementation for `usize - &isize`\n  |\n  = help: the\
    \ trait `Sub<&isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(3)\n        .fold(\n            vec![],\n\
    \            |mut max_numbers, number| {\n                if number > max_numbers.last()\
    \ {\n                    max_numbers.push(number);\n                }\n      \
    \          max_numbers\n            },\n        )\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_frjnbwt.rs:10:29\n   |\n\
    10 |                 if number > max_numbers.last() {\n   |                  \
    \           ^^^^^^^^^^^^^^^^^^ expected `&[isize]`, found enum `Option`\n   |\n\
    \   = note: expected reference `&[isize]`\n                   found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_frjnbwt.rs:11:38\n   |\n11 |\
    \                     max_numbers.push(number);\n   |                        \
    \              ^^^^^^ expected `isize`, found `&[isize]`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut running_max = numbers[0];\n    for n in numbers\
    \ {\n        if n > running_max {\n            running_max = n;\n        }\n \
    \   }\n    let mut rolling_max = Vec::new();\n    for n in numbers {\n       \
    \ if n < running_max {\n            rolling_max.push(n);\n        }\n    }\n \
    \   rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpxccn0mc_.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n6   |     let mut running_max = numbers[0];\n\
    7   |     for n in numbers {\n    |              ------- `numbers` moved due to\
    \ this implicit call to `.into_iter()`\n...\n13  |     for n in numbers {\n  \
    \  |              ^^^^^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `numbers`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for n in &numbers {\n    |              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for number in numbers\
    \ {\n        if number > maximum {\n            maximum = number;\n        }\n\
    \    }\n    vec![maximum]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpk_am69rk.rs:6:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = vec![numbers[0]; numbers.len()];\n\
    \    let mut last_value: isize = 0;\n    for number in numbers {\n        if number\
    \ > last_value {\n            result.swap(0, result.len(), last_value);\n    \
    \        last_value = number;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n\
    \   --> /tmp/tmpl7bytcxh.rs:10:20\n    |\n10  |             result.swap(0, result.len(),\
    \ last_value);\n    |                    ^^^^ -  ------------  ---------- supplied\
    \ 3 arguments\n    |                    |\n    |                    expected 2\
    \ arguments\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = numbers.iter().position(|x| *x >= max_value);\n    for n in numbers.iter().skip(max_index\
    \ + 1) {\n        if *n > max_value {\n            max_value = *n;\n         \
    \   max_index = n;\n        }\n    }\n    numbers.iter().take(max_index + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Option<usize>`\n --> /tmp/tmpqpswpy2t.rs:8:44\n\
    \  |\n8 |     for n in numbers.iter().skip(max_index + 1) {\n  |             \
    \                     --------- ^ - {integer}\n  |                           \
    \       |\n  |                                  Option<usize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqpswpy2t.rs:11:25\n   |\n7  |     let mut max_index\
    \ = numbers.iter().position(|x| *x >= max_value);\n   |                      \
    \   -------------------------------------------- expected due to this value\n\
    ...\n11 |             max_index = n;\n   |                         ^ expected\
    \ enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<usize>`\n\
    \           found reference `&isize`\n\nerror[E0369]: cannot add `{integer}` to\
    \ `Option<usize>`\n  --> /tmp/tmpqpswpy2t.rs:14:35\n   |\n14 |     numbers.iter().take(max_index\
    \ + 1).collect()\n   |                         --------- ^ - {integer}\n   | \
    \                        |\n   |                         Option<usize>\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpqpswpy2t.rs:14:40\n     |\n14   |     numbers.iter().take(max_index\
    \ + 1).collect()\n     |                                        ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut last_max_element = numbers[0];\n    let mut max_element\
    \ = numbers[0];\n\n    for n in numbers {\n        if n < max_element {\n    \
    \        max_element = n;\n        }\n    }\n\n    for n in numbers {\n      \
    \  if n > max_element {\n            max_element = n;\n        }\n    }\n\n  \
    \  for n in numbers {\n        if n == last_max_element {\n            last_max_element\
    \ = n;\n        } else {\n            last_max_element = n;\n        }\n    }\n\
    \n    if max_element != numbers[0] {\n        numbers.push(last_max_element);\n\
    \    }\n\n    numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmprtalixtm.rs:15:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n9   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n15  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for n in &numbers\
    \ {\n    |              +\n\nerror[E0382]: use of moved value: `numbers`\n  -->\
    \ /tmp/tmprtalixtm.rs:21:14\n   |\n5  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                ------- move occurs because `numbers` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n15 |    \
    \ for n in numbers {\n   |              ------- `numbers` moved due to this implicit\
    \ call to `.into_iter()`\n...\n21 |     for n in numbers {\n   |             \
    \ ^^^^^^^ value used here after move\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n15\
    \ |     for n in &numbers {\n   |              +\n\nerror[E0382]: borrow of moved\
    \ value: `numbers`\n  --> /tmp/tmprtalixtm.rs:29:23\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                ------- move occurs because\
    \ `numbers` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    ...\n21 |     for n in numbers {\n   |              ------- `numbers` moved due\
    \ to this implicit call to `.into_iter()`\n...\n29 |     if max_element != numbers[0]\
    \ {\n   |                       ^^^^^^^ value borrowed here after move\n   |\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n   |\n21 |     for n in &numbers {\n   |              +\n\
    \nerror[E0596]: cannot borrow `numbers` as m"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut prev_max_number\
    \ = numbers[0];\n    for n in numbers {\n        max_number = if n < prev_max_number\
    \ { n } else { max_number };\n        prev_max_number = max_number;\n    }\n \
    \   vec![max_number]\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpa7twlt18.rs:6:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut max_idx = Vec::new();\n\
    \    for i in numbers.iter().rev() {\n        max = max < i ? max : i;\n     \
    \   max_idx.push(i);\n    }\n\n    let mut max_idx: Vec<isize> = max_idx.into_iter().collect();\n\
    \    let mut max_idx = max_idx.collect();\n    max_idx.reverse();\n    max_idx.reverse();\n\
    \n    max_idx.dedup();\n\n    let mut max_idx: Vec<isize> = max_idx.into_iter().collect();\n\
    \    let mut max_idx: Vec<isize> = max_idx.collect();\n    max_idx.reverse();\n\
    \    max_idx.reverse();\n\n    for idx in max_idx {\n        max_idx.dedup();\n\
    \        max_idx.dedup();\n        max_idx.dedup();\n        max_idx.dedup();\n\
    \    }\n\n    for idx in max_idx {\n        max_idx.dedup();\n        max_idx.dedup();\n\
    \    }\n\n    max_idx.dedup();\n\n    let mut max_idx: Vec<isize> = max_idx.into_iter().collect();\n\
    \    let mut max_idx: Vec<isize> = max_idx.collect();\n    max_idx.reverse();\n\
    \    max_idx.reverse();\n\n    max_idx.dedup();\n\n    let mut max_idx: Vec<isize>\
    \ = max_idx.into_iter().collect();\n    let mut max_idx: Vec<isize> = max_idx.collect();\n\
    \    max_idx.reverse();\n    max_idx.reverse();\n\n    max_idx.dedup();\n\n  \
    \  for idx in max_idx {\n        max_idx.dedup();\n        max_idx.dedup();\n\
    \        max_idx.dedup();\n        max_idx.dedup();\n        max_idx.dedup();\n\
    \        max_idx.dedup();\n    }\n\n    max_idx.dedup();\n\n    let mut max_idx:\
    \ Vec<isize> = max_idx.into_iter().collect();\n    let mut max_idx: Vec<isize>\
    \ = max_idx.collect();\n    max_idx.reverse();\n    max_idx.reverse();\n\n   \
    \ max_idx.dedup();\n\n    max_idx\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `max`\n\
    \ --> /tmp/tmp7p8cskyg.rs:9:25\n  |\n9 |         max = max < i ? max : i;\n  |\
    \                         ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp7p8cskyg.rs:14:31\n\
    \    |\n14  |       let mut max_idx = max_idx.collect();\n    |              \
    \                   ^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmp7p8cskyg.rs:21:43\n    |\n21\
    \  |       let mut max_idx: Vec<isize> = max_idx.collect();\n    |           \
    \                                  ^^^^^^^ `Vec<isize>` is not an iterator\n \
    \   |\n    = note: the following trait bounds were not satisfied:\n          \
    \  `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n\
    \   --> /tmp/tmp7p8cskyg.rs:40:43\n    |\n40  |       let mut max_idx: Vec<isize>\
    \ = max_idx.collect();\n    |                                             ^^^^^^^\
    \ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<isize>: Iterator`\n            which is\
    \ required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n \
    \           which is required by `&mut [isize]: Iterator`\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmp7p8cskyg.rs:47:43\n    |\n47  |       let\
    \ mut max_idx: Vec<isize> = max_idx.collect();\n    |                        \
    \                     ^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isi"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .max_by(|x, y| x.partial_cmp(&y).unwrap_or(y.partial_cmp(&x)))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi_mqocjh.rs:7:52\n  |\n7 |\
    \         .max_by(|x, y| x.partial_cmp(&y).unwrap_or(y.partial_cmp(&x)))\n  |\
    \                                                    ^^^^^^^^^^^^^^^^^ expected\
    \ enum `std::cmp::Ordering`, found enum `Option`\n  |\n  = note: expected enum\
    \ `std::cmp::Ordering`\n             found enum `Option<std::cmp::Ordering>`\n\
    \nerror[E0599]: `Option<&[isize]>` is not an iterator\n   --> /tmp/tmpi_mqocjh.rs:8:10\n\
    \    |\n8   |           .collect()\n    |            ^^^^^^^ `Option<&[isize]>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<&[isize]>: Iterator`\n            which is required by `&mut\
    \ Option<&[isize]>: Iterator`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut n = numbers[0];\n    for x in numbers.iter().rev()\
    \ {\n        if n > x {\n            n = x;\n        }\n    }\n    numbers.append(n);\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw3dwdzdz.rs:8:16\n  |\n8 |\
    \         if n > x {\n  |                ^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n8 |         if n > *x {\n\
    \  |                +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw3dwdzdz.rs:9:17\n\
    \  |\n6 |     let mut n = numbers[0];\n  |                 ---------- expected\
    \ due to this value\n...\n9 |             n = x;\n  |                 ^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |             n = *x;\n  |                 +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpw3dwdzdz.rs:12:20\n   |\n12 |     numbers.append(n);\n   |    \
    \                ^ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note:\
    \ expected mutable reference `&mut Vec<isize>`\n                           found\
    \ type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n    }\n\
    \    let mut max_so_far = numbers[0];\n    for x in &numbers {\n        if x >\
    \ max_so_far {\n            max_so_far = x;\n        }\n    }\n    vec![max_so_far\
    \ for _ in numbers.len()].into_boxed_slice()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: no rules expected the token `for`\n  --> /tmp/tmpdcwer0u1.rs:15:21\n\
    \   |\n15 |     vec![max_so_far for _ in numbers.len()].into_boxed_slice()\n \
    \  |                     ^^^ no rules expected this token in macro call\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdcwer0u1.rs:11:16\n   |\n11 |         if x >\
    \ max_so_far {\n   |                ^^^^^^^^^^\n   |                |\n   |  \
    \              expected `&isize`, found `isize`\n   |                help: consider\
    \ borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdcwer0u1.rs:12:26\n\
    \   |\n9  |     let mut max_so_far = numbers[0];\n   |                       \
    \   ---------- expected due to this value\n...\n12 |             max_so_far =\
    \ x;\n   |                          ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |             max_so_far = *x;\n\
    \   |                          +\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers[0];\n    let mut max_value\
    \ = numbers[0];\n    for num in numbers {\n        if num > max_value {\n    \
    \        max_element = num;\n            max_value = num;\n        } else {\n\
    \            max_value = max_value + max_element;\n        }\n    }\n    max_value\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9et4x53l.rs:16:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     max_value\n   |     ^^^^^^^^^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_num = numbers[0];\n\n    for num in numbers.iter().rev()\
    \ {\n        if num > max_num {\n            max_num = num;\n        }\n    }\n\
    \n    let mut new_numbers = Vec::new();\n\n    for num in numbers.iter() {\n \
    \       if num == max_num {\n            new_numbers.push(num);\n        } else\
    \ {\n            new_numbers.push(num);\n            new_numbers.push(max_num);\n\
    \        }\n    }\n\n    new_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_e6aqbz.rs:9:18\n  |\n9 |\
    \         if num > max_num {\n  |                  ^^^^^^^\n  |              \
    \    |\n  |                  expected `&isize`, found `isize`\n  |           \
    \       help: consider borrowing here: `&max_num`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm_e6aqbz.rs:10:23\n   |\n6  |     let mut max_num = numbers[0];\n\
    \   |                       ---------- expected due to this value\n...\n10 | \
    \            max_num = num;\n   |                       ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \           max_num = *num;\n   |                       +\n\nerror[E0277]: can't\
    \ compare `&isize` with `isize`\n  --> /tmp/tmpm_e6aqbz.rs:17:16\n   |\n17 | \
    \        if num == max_num {\n   |                ^^ no implementation for `&isize\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_e6aqbz.rs:21:30\n\
    \   |\n21 |             new_numbers.push(max_num);\n   |                     \
    \         ^^^^^^^\n   |                              |\n   |                 \
    \             expected `&isize`, found `isize`\n   |                         \
    \     help: consider borrowing here: `&max_num`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpm_e6aqbz.rs:25:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n25 |     new_numbers\n   |     ^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    let mut max_pos\
    \ = 0;\n\n    loop {\n        let mut max_value = numbers_copy.last().unwrap();\n\
    \        let mut max_pos = 0;\n\n        for i in 1..numbers.len() {\n       \
    \     if numbers[i] > max_value {\n                max_value = numbers[i];\n \
    \               max_pos = i;\n            }\n        }\n\n        numbers_copy.remove(max_pos);\n\
    \        if numbers_copy.len() == 0 {\n            break;\n        }\n    }\n\n\
    \    numbers_copy.clone().reverse().collect()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3n0j1rko.rs:14:29\n   |\n\
    14 |             if numbers[i] > max_value {\n   |                           \
    \  ^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |             if numbers[i] > *max_value {\n   |      \
    \                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3n0j1rko.rs:15:29\n\
    \   |\n10 |         let mut max_value = numbers_copy.last().unwrap();\n   |  \
    \                           ---------------------------- expected due to this\
    \ value\n...\n15 |                 max_value = numbers[i];\n   |             \
    \                ^^^^^^^^^^\n   |                             |\n   |        \
    \                     expected `&isize`, found `isize`\n   |                 \
    \            help: consider borrowing here: `&numbers[i]`\n\nerror[E0599]: `()`\
    \ is not an iterator\n  --> /tmp/tmp3n0j1rko.rs:26:36\n   |\n26 |     numbers_copy.clone().reverse().collect()\n\
    \   |                                    ^^^^^^^ `()` is not an iterator\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = 0;\n    let mut max = numbers.first().unwrap();\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n    }\n    let mut vec = vec![max];\n    for i in\
    \ 1..numbers.len() {\n        if numbers[i] > max {\n            vec.push(numbers[i]);\n\
    \        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx7zrsant.rs:9:25\n  |\n9 |\
    \         if numbers[i] > max {\n  |                         ^^^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \    if numbers[i] > *max {\n  |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx7zrsant.rs:10:19\n   |\n7  |     let mut max = numbers.first().unwrap();\n\
    \   |                   ------------------------ expected due to this value\n\
    ...\n10 |             max = numbers[i];\n   |                   ^^^^^^^^^^\n \
    \  |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&numbers[i]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx7zrsant.rs:15:25\n   |\n15 |         if numbers[i]\
    \ > max {\n   |                         ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         if numbers[i]\
    \ > *max {\n   |                         +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx7zrsant.rs:16:22\n   |\n16 |             vec.push(numbers[i]);\n\
    \   |                      ^^^^^^^^^^\n   |                      |\n   |     \
    \                 expected `&isize`, found `isize`\n   |                     \
    \ help: consider borrowing here: `&numbers[i]`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx7zrsant.rs:19:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |     vec\n   |     ^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_index = -1;\n\
    \    let mut min_index = -1;\n    for &mut v in numbers.iter_mut() {\n       \
    \ match &v {\n            -1 => {\n                let index = result.len();\n\
    \                result.push(v);\n                max_index = index;\n       \
    \         min_index = index;\n            }\n            x => if x > max_index\
    \ {\n                max_index = x;\n            }\n            if x == min_index\
    \ {\n                result.push(v);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `if`\n  --> /tmp/tmpf65szsf_.rs:20:13\n\
    \   |\n20 |             if x == min_index {\n   |             ^^ expected identifier,\
    \ found keyword\n\nerror: expected one of `=>`, `@`, `if`, or `|`, found `x`\n\
    \  --> /tmp/tmpf65szsf_.rs:20:16\n   |\n20 |             if x == min_index {\n\
    \   |                ^ expected one of `=>`, `@`, `if`, or `|`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpf65szsf_.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n --> /tmp/tmpf65szsf_.rs:8:25\n  |\n8 |     let mut min_index\
    \ = -1;\n  |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n \
    \           &f32\n            &f64\n            &i128\n            &i16\n    \
    \        &i32\n            &i64\n            &i8\n            &isize\n       \
    \   and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf65szsf_.rs:17:25\n\
    \   |\n17 |             x => if x > max_index {\n   |                        \
    \ ^^^^^^^^^ expected `&isize`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf65szsf_.rs:18:29\n   |\n7  |     let mut max_index = -1;\n   |\
    \                         -- expected due to this value\n...\n18 |           \
    \      max_index = x;\n   |                             ^ expected `usize`, found\
    \ `&isize`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \    numbers.windows(2).enumerate().filter(|(_, index)| index != 0).fold(\n  \
    \      vec![],\n        |max_numbers, (_, index)| {\n            max_numbers.push(numbers[index]);\n\
    \            max_numbers\n        },\n    )\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&[isize]` with `{integer}`\n --> /tmp/tmpkqoqyb1p.rs:9:62\n\
    \  |\n9 |     numbers.windows(2).enumerate().filter(|(_, index)| index != 0).fold(\n\
    \  |                                                              ^^ no implementation\
    \ for `&&[isize] == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&&[isize]`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            <&[B] as PartialEq<[A; N]>>\n         \
    \   <&[T] as PartialEq<Vec<U, A>>>\n            <&mut [B] as PartialEq<[A; N]>>\n\
    \            <&mut [T] as PartialEq<Vec<U, A>>>\n            <[A; N] as PartialEq<&[B]>>\n\
    \            <[A; N] as PartialEq<&mut [B]>>\n            <[A; N] as PartialEq<[B;\
    \ N]>>\n            <[A; N] as PartialEq<[B]>>\n          and 3 others\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&[isize]`\n  --> /tmp/tmpkqoqyb1p.rs:12:30\n\
    \   |\n12 |             max_numbers.push(numbers[index]);\n   |              \
    \                ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&[isize]`\n   = note: required because of the requirements on the impl\
    \ of `Index<&[isize]>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .windows(numbers.len() + 1)\n        .iter()\n\
    \        .cloned()\n        .filter(|&x| x.is_max_unstable())\n        .map(|x|\
    \ x.max_unstable())\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Windows` in the\
    \ current scope\n --> /tmp/tmpogj1llq9.rs:8:10\n  |\n8 |         .iter()\n  |\
    \          ^^^^ method not found in `Windows<'_, isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = numbers;\n    for i in 1..numbers.len()\
    \ {\n        let mut cur = numbers[i - 1];\n        for j in i..numbers.len()\
    \ {\n            if numbers[j] > cur {\n                cur = numbers[j];\n  \
    \          }\n        }\n        result = result.push(cur);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzt_0n0sq.rs:14:18\n   |\n\
    6  |     let mut result = numbers;\n   |                      ------- expected\
    \ due to this value\n...\n14 |         result = result.push(cur);\n   |      \
    \            ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\nnote: method\
    \ `push` modifies its receiver in-place\n  --> /tmp/tmpzt_0n0sq.rs:14:25\n   |\n\
    14 |         result = result.push(cur);\n   |                  ------ ^^^^ this\
    \ call modifies `result` in-place\n   |                  |\n   |             \
    \     you probably want to use this value after calling the method...\n   = note:\
    \ ...instead of the `()` output of method `push`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut last_max = numbers[0];\n\
    \    for i in numbers {\n        if last_max < i {\n            result.push(last_max);\n\
    \            last_max = i;\n        } else {\n            last_max = i;\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp5farqy2w.rs:7:24

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len() * 2);\n\
    \    let mut max_val = numbers[0];\n    for i in 1..numbers.len() {\n        if\
    \ numbers[i] > max_val {\n            max_val = numbers[i];\n        }\n     \
    \   result.push(i);\n        if numbers.len() > i {\n            result.push(max_val);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6labu0c.rs:14:25\n   |\n\
    14 |             result.push(max_val);\n   |                         ^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |             result.push(max_val.try_into().unwrap());\n\
    \   |                                ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe6labu0c.rs:17:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n17 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .windows(3)\n        .fold(Vec::new(),\
    \ |mut acc, cur| {\n            acc.push(*std::cmp::max::<i32>(acc.last().unwrap(),\
    \ cur));\n            acc\n        })\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_p5g5wgp.rs:9:44\n  |\n9 |\
    \             acc.push(*std::cmp::max::<i32>(acc.last().unwrap(), cur));\n  |\
    \                                            ^^^^^^^^^^^^^^^^^^^ expected `i32`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_p5g5wgp.rs:9:65\n\
    \  |\n9 |             acc.push(*std::cmp::max::<i32>(acc.last().unwrap(), cur));\n\
    \  |                                                                 ^^^ expected\
    \ `i32`, found `&[isize]`\n\nerror[E0614]: type `i32` cannot be dereferenced\n\
    \ --> /tmp/tmp_p5g5wgp.rs:9:22\n  |\n9 |             acc.push(*std::cmp::max::<i32>(acc.last().unwrap(),\
    \ cur));\n  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \n    let mut largest = numbers[0];\n    for number in numbers {\n        if number\
    \ > largest {\n            largest = number;\n        }\n    }\n    vec![largest]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp7ye6zf_e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[0];\n    for i in numbers.iter().rev()\
    \ {\n        if i > rolling_max {\n            rolling_max = i;\n        }\n \
    \   }\n    vec![rolling_max]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2obaqp1d.rs:8:16\n  |\n8 |\
    \         if i > rolling_max {\n  |                ^^^^^^^^^^^\n  |          \
    \      |\n  |                expected `&isize`, found `isize`\n  |           \
    \     help: consider borrowing here: `&rolling_max`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp2obaqp1d.rs:9:27\n  |\n6 |     let mut rolling_max = numbers[0];\n\
    \  |                           ---------- expected due to this value\n...\n9 |\
    \             rolling_max = i;\n  |                           ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \        rolling_max = *i;\n  |                           +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_num: isize = 0;\n    let mut max_num_times:\
    \ isize = 1;\n    let mut max_num_length: isize = 1;\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        if n == max_num {\n            max_num_times += 1;\n            max_num_length\
    \ += 1\n        } else {\n            max_num = n;\n            max_num_times\
    \ = 1;\n            max_num_length = 1;\n        }\n    }\n    let mut max_rolling_nums\
    \ = vec![max_num];\n    let mut min_rolling_nums = vec![max_num];\n    for i in\
    \ (0..max_num_length).rev() {\n        max_rolling_nums.push(max_num);\n     \
    \   min_rolling_nums.push(max_num);\n        max_rolling_nums.push(max_rolling_nums.last().unwrap());\n\
    \    }\n    for i in (0..max_num_times).rev() {\n        let rolling_nums = max_rolling_nums[..].clone();\n\
    \        for &n in &numbers {\n            if i == 0 {\n                max_rolling_nums[i\
    \ - 1] += n;\n            } else {\n                max_rolling_nums[i - 1] -=\
    \ n;\n            }\n            if rolling_nums.iter().any(|&i| i == 0) {\n \
    \               max_rolling_nums[i - 1] += n;\n            } else {\n        \
    \        max_rolling_nums[i - 1] -= n;\n            }\n            if rolling_nums.iter().any(|&i|\
    \ i == 0) {\n                max_rolling_nums[i - 1] += n;\n            } else\
    \ {\n                max_rolling_nums[i - 1] -= n;\n            }\n        }\n\
    \        max_rolling_nums = max_rolling_nums[..].clone();\n        min_rolling_nums\
    \ = min_rolling_nums[..].clone();\n    }\n    max_rolling_nums\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp01hpijm_.rs:10:14\n\
    \   |\n10 |         if n == max_num {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp01hpijm_.rs:14:23\n   |\n6  |     let mut max_num: isize = 0;\n   |\
    \                      ----- expected due to this type\n...\n14 |            \
    \ max_num = n;\n   |                       ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n14 |             max_num\
    \ = *n;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp01hpijm_.rs:24:31\n   |\n24 |         max_rolling_nums.push(max_rolling_nums.last().unwrap());\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    24 |         max_rolling_nums.push(*max_rolling_nums.last().unwrap());\n   | \
    \                              +\n\nerror[E0599]: no method named `clone` found\
    \ for slice `[isize]` in the current scope\n  --> /tmp/tmp01hpijm_.rs:27:49\n\
    \   |\n27 |         let rolling_nums = max_rolling_nums[..].clone();\n   |   \
    \                                              ^^^^^ method not found in `[isize]`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp01hpijm_.rs:30:17\n\
    \   |\n30 |                 max_rolling_nums[i - 1] += n;\n   |              \
    \   ^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `["
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).\n        fold(Vec::new(), |mut vecs,\
    \ (_, max)| {\n            let max = max.unwrap();\n            vecs.push(max);\n\
    \            vecs\n        })\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4pi39l6i.rs:7:37\n  |\n7 |\
    \         fold(Vec::new(), |mut vecs, (_, max)| {\n  |                       \
    \              ^^^^^^^-\n  |                                     |      |\n  |\
    \                                     |      expected due to this\n  |       \
    \                              expected slice `[isize]`, found tuple\n  |\n  =\
    \ note: expected slice `[isize]`\n             found tuple `(_, _)`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .iter()\n        .enumerate()\n      \
    \  .map(|(idx, number)| number.clone())\n        .windows(2)\n        .map(|window|\
    \ window.iter().max().unwrap())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpii1b00q4.rs:10:10\n   |\n10 |         .windows(2)\n   |\
    \          ^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpii1b00q4.rs:9:14: 9:44]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for number in numbers\
    \ {\n        result.push(*number);\n        if numbers == 1 {\n            break;\n\
    \        }\n        result.push(*numbers.iter().position(|&i| i == &*number +\
    \ 1).unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmposwi2nph.rs:8:21\n\
    \  |\n8 |         result.push(*number);\n  |                     ^^^^^^^\n\nerror[E0277]:\
    \ can't compare `Vec<isize>` with `{integer}`\n --> /tmp/tmposwi2nph.rs:9:20\n\
    \  |\n9 |         if numbers == 1 {\n  |                    ^^ no implementation\
    \ for `Vec<isize> == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `Vec<isize>`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \            <Vec<T, A> as PartialEq<&[U; N]>>\n            <Vec<T, A> as PartialEq<&[U]>>\n\
    \            <Vec<T, A> as PartialEq<&mut [U]>>\n            <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n            <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmposwi2nph.rs:12:57\n   |\n12 |        \
    \ result.push(*numbers.iter().position(|&i| i == &*number + 1).unwrap());\n  \
    \ |                                                         ^^^^^^^\n\nerror[E0614]:\
    \ type `usize` cannot be dereferenced\n  --> /tmp/tmposwi2nph.rs:12:21\n   |\n\
    12 |         result.push(*numbers.iter().position(|&i| i == &*number + 1).unwrap());\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    // Find max value for each window\n    let mut max = numbers[0];\n\
    \    for number in numbers.iter() {\n        if number > max {\n            max\
    \ = number;\n        }\n    }\n\n    // Rolling max until window end\n    let\
    \ mut max = Vec::new();\n    for i in 1..numbers.len() {\n        let mut rolling_max\
    \ = vec![max];\n        // For each windows, find max between current value and\
    \ previous value\n        for number in numbers.iter().skip(i) {\n           \
    \ if number > rolling_max.last() {\n                rolling_max.push(number);\n\
    \            }\n        }\n        max = max(max, rolling_max.max().unwrap());\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocolxqpv.rs:9:21\n  |\n9 |\
    \         if number > max {\n  |                     ^^^\n  |                \
    \     |\n  |                     expected `&isize`, found `isize`\n  |       \
    \              help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpocolxqpv.rs:10:19\n   |\n7  |     let mut max = numbers[0];\n\
    \   |                   ---------- expected due to this value\n...\n10 |     \
    \        max = number;\n   |                   ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     max = *number;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpocolxqpv.rs:20:25\n   |\n20 |             if number > rolling_max.last()\
    \ {\n   |                         ^^^^^^^^^^^^^^^^^^ expected `&isize`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&isize`\n              \
    \     found enum `Option<&Vec<_>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpocolxqpv.rs:21:34\n\
    \   |\n21 |                 rolling_max.push(number);\n   |                  \
    \                ^^^^^^ expected struct `Vec`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<_>`\n           found reference `&isize`\n\nerror[E0618]:\
    \ expected function, found `Vec<_>`\n  --> /tmp/tmpocolxqpv.rs:24:15\n   |\n15\
    \ |     let mut max = Vec::new();\n   |         ------- `max` has type `Vec<_>`\n\
    ...\n24 |         max = max(max, rolling_max.max().unwrap());\n   |          \
    \     ^^^---------------------------------\n   |               |\n   |       \
    \        call expression requires function\n\nerror[E0061]: this function takes\
    \ 1 argument but 0 arguments were supplied\n   --> /tmp/tmpocolxqpv.rs:24:36\n\
    \    |\n24  |         max = max(max, rolling_max.max().unwrap());\n    |     \
    \                               ^^^- supplied 0 arguments\n    |             \
    \                       |\n    |                                    expected 1\
    \ argument\n    |\nnote: associated function defined here\n\nerror[E0599]: no\
    \ method named `unwrap` found for struct `Vec<Vec<_>>` in the current scop"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers[1..]\n        .windows(2)\n        .enumerate()\n\
    \        .map(|(idx, &number)| number.max().unwrap())\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmp039yz_di.rs:9:22\n  |\n9 |         .map(|(idx,\
    \ &number)| number.max().unwrap())\n  |                      ^^^^^^ doesn't have\
    \ a size known at compile-time\n  |\n  = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n  = note: all local variables must have a statically known size\n\
    \  = help: unsized locals are gated as an unstable feature\n\nerror[E0277]: the\
    \ size for values of type `[isize]` cannot be known at compilation time\n   -->\
    \ /tmp/tmp039yz_di.rs:9:38\n    |\n9   |         .map(|(idx, &number)| number.max().unwrap())\n\
    \    |                                      ^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by a bound in `std::cmp::Ord::max`\n\nerror[E0061]: this function takes\
    \ 1 argument but 0 arguments were supplied\n   --> /tmp/tmp039yz_di.rs:9:38\n\
    \    |\n9   |         .map(|(idx, &number)| number.max().unwrap())\n    |    \
    \                                  ^^^- supplied 0 arguments\n    |          \
    \                            |\n    |                                      expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror[E0599]: no\
    \ method named `unwrap` found for slice `[isize]` in the current scope\n --> /tmp/tmp039yz_di.rs:9:44\n\
    \  |\n9 |         .map(|(idx, &number)| number.max().unwrap())\n  |          \
    \                                  ^^^^^^ help: there is an associated function\
    \ with a similar name: `swap`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .windows(numbers.len())\n        .map(|window|\
    \ window.iter().max_by_key(|x| x).unwrap())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpa4f7fv5h.rs:9:10\n     |\n9\
    \    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut max:\
    \ usize = 0;\n    let mut max_index: usize = 0;\n    for n in numbers {\n    \
    \    if max < n {\n            max = n;\n            max_index = 1;\n        }\n\
    \        else {\n            if max_index > result.len() {\n                result.push(max);\n\
    \            }\n            max = n;\n            max_index += 1;\n        }\n\
    \    }\n    if max_index > result.len() {\n        result.push(max);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpowt6n4k5.rs:10:18\n   |\n\
    10 |         if max < n {\n   |                  ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |         if max < n.try_into().unwrap() {\n   |\
    \                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpowt6n4k5.rs:11:19\n   |\n7  |     let mut max: usize = 0;\n   |\
    \                  ----- expected due to this type\n...\n11 |             max\
    \ = n;\n   |                   ^ expected `usize`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpowt6n4k5.rs:16:29\n   |\n16 |              \
    \   result.push(max);\n   |                             ^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |                 result.push(max.try_into().unwrap());\n\
    \   |                                ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpowt6n4k5.rs:18:19\n   |\n7  |     let mut max: usize =\
    \ 0;\n   |                  ----- expected due to this type\n...\n18 |       \
    \      max = n;\n   |                   ^ expected `usize`, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpowt6n4k5.rs:23:21\n   |\n23 |  \
    \       result.push(max);\n   |                     ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n23 |         result.push(max.try_into().unwrap());\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to 5\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_vals = Vec::new();\n\n    for (i, val) in numbers.iter().enumerate()\
    \ {\n        if i == 0 {\n            max_vals.push(val);\n        } else {\n\
    \            if val > max_vals[max_vals.len() - 1] {\n                max_vals.push(val);\n\
    \            }\n        }\n    }\n\n    max_vals\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw8t12k7r.rs:18:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |     max_vals\n   |     ^^^^^^^^ expected `isize`, found `&isize`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers.first().unwrap();\n    for n in numbers\
    \ {\n        if n < max {\n            max = n;\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpofoszw4y.rs:8:16\n  |\n8 |\
    \         if n < max {\n  |                ^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n8 |         if n < *max {\n\
    \  |                +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpofoszw4y.rs:9:19\n\
    \  |\n6 |     let mut max = numbers.first().unwrap();\n  |                   ------------------------\
    \ expected due to this value\n...\n9 |             max = n;\n  |             \
    \      ^\n  |                   |\n  |                   expected `&isize`, found\
    \ `isize`\n  |                   help: consider borrowing here: `&n`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpofoszw4y.rs:12:10\n   |\n12 |     vec![max]\n\
    \   |          ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |     vec![*max]\n   |          +\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for num in numbers.iter().rev()\
    \ {\n        if num > max {\n            max = num;\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr4tq2ssy.rs:8:18\n  |\n8 |\
    \         if num > max {\n  |                  ^^^\n  |                  |\n \
    \ |                  expected `&isize`, found `isize`\n  |                  help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpr4tq2ssy.rs:9:19\n\
    \  |\n6 |     let mut max = numbers[0];\n  |                   ---------- expected\
    \ due to this value\n...\n9 |             max = num;\n  |                   ^^^\
    \ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n\
    \  |\n9 |             max = *num;\n  |                   +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers.iter().max().unwrap();\n \
    \   let mut result = vec![max_so_far];\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        if number > max_so_far {\n            result.push(i);\n         \
    \   max_so_far = number;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpugu1n2l1.rs:10:25\n   |\n\
    10 |             result.push(i);\n   |                         ^ expected `&isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugu1n2l1.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.iter().take_while(|&i| i != 0);\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpr1uycoru.rs:6:38\n\
    \  |\n6 |     numbers.iter().take_while(|&i| i != 0);\n  |                   \
    \                   ^^ no implementation for `&isize == {integer}`\n  |\n  = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n  = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n            f32\n\
    \            f64\n            i128\n            i16\n            i32\n       \
    \     i64\n            i8\n            isize\n          and 6 others\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpr1uycoru.rs:5:40\n  |\n5 | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -----------                         ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut current_max_numbers\
    \ = Vec::new();\n    let mut current_numbers = numbers.clone();\n    while current_numbers.len()\
    \ > 0 {\n        let mut max = *current_numbers.iter().max().unwrap();\n     \
    \   if max > max_numbers.get(&0)\n            || current_numbers.len() == 1\n\
    \        {\n            max = max_numbers.get(&0);\n            current_numbers.remove(&0);\n\
    \        }\n        max_numbers.push(max);\n        current_numbers.remove(&max);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `&{integer}`\n   -->\
    \ /tmp/tmpf0gtbrsq.rs:11:34\n    |\n11  |         if max > max_numbers.get(&0)\n\
    \    |                              --- -^\n    |                            \
    \  |   |\n    |                              |   slice indices are of type `usize`\
    \ or ranges of `usize`\n    |                              |   help: consider\
    \ removing the leading `&`-reference\n    |                              required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `&{integer}`\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::get`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf0gtbrsq.rs:11:18\n\
    \   |\n11 |         if max > max_numbers.get(&0)\n   |                  ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `&{integer}`\n   --> /tmp/tmpf0gtbrsq.rs:14:35\n    |\n14  | \
    \            max = max_numbers.get(&0);\n    |                               ---\
    \ -^\n    |                               |   |\n    |                       \
    \        |   slice indices are of type `usize` or ranges of `usize`\n    |   \
    \                            |   help: consider removing the leading `&`-reference\n\
    \    |                               required by a bound introduced by this call\n\
    \    |\n    = help: the trait `SliceIndex<[_]>` is not implemented for `&{integer}`\n\
    note: required by a bound in `core::slice::<impl [T]>::get`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf0gtbrsq.rs:14:19\n   |\n10 |         let mut max = *current_numbers.iter().max().unwrap();\n\
    \   |                       -------------------------------------- expected due\
    \ to this value\n...\n14 |             max = max_numbers.get(&0);\n   |      \
    \             ^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<&_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf0gtbrsq.rs:15:36\n   |\n15 |  "
  stdout: ''
  timestamp: 1659976121
- exit_code: 0
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_vec: Vec<isize> = Vec::new();\n    let mut\
    \ max_so_far: isize = 0;\n    for (i, &elt) in numbers.iter().enumerate() {\n\
    \        if elt > max_so_far {\n            max_vec.push(elt);\n            max_so_far\
    \ = elt;\n        } else {\n            max_vec.push(max_so_far);\n        }\n\
    \    }\n    max_vec\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for n in numbers.iter().rev()\
    \ {\n        if n >= maximum {\n            maximum = n;\n        }\n    }\n \
    \   vec![maximum]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqv14zg7_.rs:8:17\n  |\n8 |\
    \         if n >= maximum {\n  |                 ^^^^^^^\n  |                \
    \ |\n  |                 expected `&isize`, found `isize`\n  |               \
    \  help: consider borrowing here: `&maximum`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpqv14zg7_.rs:9:23\n  |\n6 |     let mut maximum = numbers[0];\n \
    \ |                       ---------- expected due to this value\n...\n9 |    \
    \         maximum = n;\n  |                       ^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |             maximum =\
    \ *n;\n  |                       +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers.iter().fold(-std::i32::MAX\
    \ as isize, |max, n| {\n        match n {\n            -max as isize => max,\n\
    \            _ => max,\n        }\n    });\n    for n in numbers {\n        max_so_far\
    \ = std::cmp::max(max_so_far, n);\n    }\n    numbers.iter().cloned().take_while(|&n|\
    \ n == max_so_far).cloned()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `max`\n --> /tmp/tmpwjnodhft.rs:8:14\n \
    \ |\n8 |             -max as isize => max,\n  |              ^^^ expected pattern\n\
    \nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item\
    \ == &&_`\n  --> /tmp/tmpwjnodhft.rs:15:62\n   |\n15 |     numbers.iter().cloned().take_while(|&n|\
    \ n == max_so_far).cloned()\n   |                                            \
    \                  ^^^^^^ expected reference, found `isize`\n   |\n   = note:\
    \ expected reference `&&_`\n              found reference `&isize`\n   = note:\
    \ required because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `TakeWhile<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpwjnodhft.rs:15:40: 15:60]>`\n\nerror[E0631]: type\
    \ mismatch in closure arguments\n  --> /tmp/tmpwjnodhft.rs:15:62\n   |\n15 | \
    \    numbers.iter().cloned().take_while(|&n| n == max_so_far).cloned()\n   | \
    \                                       --------------------  ^^^^^^ expected\
    \ signature of `for<'r> fn(&'r &_) -> _`\n   |                               \
    \         |\n   |                                        found signature of `for<'r>\
    \ fn(&'r isize) -> _`\n   |\n   = note: required because of the requirements on\
    \ the impl of `Iterator` for `TakeWhile<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpwjnodhft.rs:15:40:\
    \ 15:60]>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwjnodhft.rs:15:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n15 |     numbers.iter().cloned().take_while(|&n| n == max_so_far).cloned()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Cloned<TakeWhile<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpwjnodhft.rs:"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current = vec![numbers[0]; numbers.len()];\n  \
    \  for i in 1..numbers.len() {\n        let last = current[i - 1];\n        let\
    \ current = current[i - 1] + numbers[i];\n        if current > last {\n      \
    \      current[i - 1] = current;\n        }\n    }\n    current\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp1qyyrq25.rs:11:13\n\
    \   |\n11 |             current[i - 1] = current;\n   |             ^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \n    let mut result = vec![numbers[0]];\n    for i in 1..numbers.len() {\n  \
    \      if result[-1] > numbers[i] {\n            result.push(numbers[i]);\n  \
    \      }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: negative integers cannot be used to index on a `Vec<isize>`\n  -->\
    \ /tmp/tmpbz5cpvgh.rs:12:19\n   |\n12 |         if result[-1] > numbers[i] {\n\
    \   |                   ^^ cannot use a negative integer for indexing on `Vec<isize>`\n\
    \   |\nhelp: to access an element starting from the end of the `Vec<isize>`, compute\
    \ the index\n   |\n12 |         if result[result.len() -1] > numbers[i] {\n  \
    \ |                   ++++++++++++\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut max_number = numbers.iter().max().unwrap();\n\
    \    while max_number < numbers.len() {\n        res.push(max_number);\n     \
    \   max_number = numbers[max_number..].iter().max().unwrap();\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpehts2jm4.rs:8:24\n  |\n8 |\
    \     while max_number < numbers.len() {\n  |                        ^^^^^^^^^^^^^\
    \ expected `&isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `RangeFrom<&isize>`\n  --> /tmp/tmpehts2jm4.rs:10:22\n   |\n10\
    \ |         max_number = numbers[max_number..].iter().max().unwrap();\n   |  \
    \                    ^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeFrom<&isize>`\n   = help: the following other types implement trait\
    \ `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n     \
    \        <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because of\
    \ the requirements on the impl of `Index<RangeFrom<&isize>>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpehts2jm4.rs:12:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n12 |     res\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut cur = numbers[0];\n    let mut ret = Vec::new();\n\
    \    for v in numbers {\n        if v > cur {\n            ret.push(cur);\n  \
    \          cur = v;\n        } else {\n            cur = v;\n        }\n    }\n\
    \    ret.push(cur);\n    ret\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpnrub1yw8.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut n = numbers.len();\n    let mut max_number = numbers[n\
    \ - 1];\n\n    for x in &mut numbers[1..n] {\n        if *x > max_number {\n \
    \           max_number = x;\n        }\n    }\n    numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp59gckvsb.rs:11:26\n   |\n\
    7  |     let mut max_number = numbers[n - 1];\n   |                          --------------\
    \ expected due to this value\n...\n11 |             max_number = x;\n   |    \
    \                      ^ expected `isize`, found `&mut isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             max_number = *x;\n   |    \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if max < numbers[i] {\n            max = numbers[i];\n        }\n\
    \    }\n    numbers.iter().map(|x| x + max).collect()\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpcvvc0i5y.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(numbers.len() + 1)\n        .flat_map(|v|\
    \ v.iter().take(numbers.len() - v.len() + 1).map(|a| max(a)))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpqq27x70n.rs:7:74\n\
    \  |\n7 |         .flat_map(|v| v.iter().take(numbers.len() - v.len() + 1).map(|a|\
    \ max(a)))\n  |                                                              \
    \            ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).map(|(_, num)| num).rev().fold(Vec::new(),\
    \ |mut acc, num| {\n        if acc.len() == 0 || acc[0] < num {\n            acc.push(num);\n\
    \        } else {\n            acc[0] = num;\n        }\n        acc\n    })\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaxq1cfz8.rs:6:29\n  |\n6 |\
    \     numbers.windows(2).map(|(_, num)| num).rev().fold(Vec::new(), |mut acc,\
    \ num| {\n  |                             ^^^^^^^-\n  |                      \
    \       |      |\n  |                             |      expected due to this\n\
    \  |                             expected slice `[isize]`, found tuple\n  |\n\
    \  = note: expected slice `[isize]`\n             found tuple `(_, _)`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n\n    for i in 1..numbers.len()\
    \ {\n        let mut maximum = result.iter().max().unwrap();\n        if numbers[i]\
    \ > maximum {\n            result.insert(i, numbers[i]);\n        }\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprrwtnpyb.rs:10:25\n   |\n\
    10 |         if numbers[i] > maximum {\n   |                         ^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |         if numbers[i] > *maximum {\n   |                         +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_elems = numbers[0];\n    let mut max_idx =\
    \ 0;\n    for &num in numbers.iter() {\n        if num > max_elems {\n       \
    \     max_elems = num;\n            max_idx = i;\n        }\n        i += 1;\n\
    \    }\n    vec![max_elems]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpsnto1pmn.rs:11:23\n\
    \   |\n11 |             max_idx = i;\n   |                       ^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpsnto1pmn.rs:13:9\n\
    \   |\n13 |         i += 1;\n   |         ^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = numbers;\n    let window = numbers.windows(2).map(|e|\
    \ e.max()).sum();\n    while result.len() > window {\n        result.remove(result.iter().min());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpp1s9j8yd.rs:7:47\n    |\n7   |     let window = numbers.windows(2).map(|e|\
    \ e.max()).sum();\n    |                                               ^^^- supplied\
    \ 0 arguments\n    |                                               |\n    |  \
    \                                             expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: the trait bound `usize: Sum<&[isize]>`\
    \ is not satisfied\n    --> /tmp/tmpp1s9j8yd.rs:7:54\n     |\n7    |     let window\
    \ = numbers.windows(2).map(|e| e.max()).sum();\n     |                       \
    \                               ^^^ the trait `Sum<&[isize]>` is not implemented\
    \ for `usize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpp1s9j8yd.rs:9:23\n  |\n9 |         result.remove(result.iter().min());\n\
    \  |                       ^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `Option`\n\
    \  |\n  = note: expected type `usize`\n             found enum `Option<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0308.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_rolling = 0;\n    let mut max: isize = 0;\n\
    \    let mut min_rolling = 0;\n    let mut min: isize = 0;\n\n    for n in numbers\
    \ {\n        max = if n > max {\n            n\n        } else {\n           \
    \ max\n        };\n        min = if n < min {\n            n\n        } else {\n\
    \            min\n        };\n        max_rolling = (max - n) + 1;\n        min_rolling\
    \ = (min - n) + 1;\n    }\n    max_rolling.min(min_rolling)\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmn2sfz63.rs:25:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n25 |     max_rolling.min(min_rolling)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_number = numbers[0]\n    let mut max_number\
    \ = numbers[0]\n    for i in numbers.iter().skip(1) {\n        if i < min_number\
    \ {\n            min_number = i\n        } else if i > max_number {\n        \
    \    max_number = i\n        }\n    }\n    min_number.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n --> /tmp/tmp89db8s4w.rs:6:36\n\
    \  |\n6 |     let mut min_number = numbers[0]\n  |                           \
    \         ^ help: add `;` here\n7 |     let mut max_number = numbers[0]\n  | \
    \    --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp89db8s4w.rs:7:36\n\
    \  |\n7 |     let mut max_number = numbers[0]\n  |                           \
    \         ^ help: add `;` here\n8 |     for i in numbers.iter().skip(1) {\n  |\
    \     --- unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp89db8s4w.rs:9:16\n\
    \  |\n9 |         if i < min_number {\n  |                ^^^^^^^^^^\n  |    \
    \            |\n  |                expected `&isize`, found `isize`\n  |     \
    \           help: consider borrowing here: `&min_number`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp89db8s4w.rs:10:26\n   |\n6  |     let mut min_number =\
    \ numbers[0]\n   |                          ---------- expected due to this value\n\
    ...\n10 |             min_number = i\n   |                          ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             min_number = *i\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp89db8s4w.rs:11:23\n   |\n11 |         } else\
    \ if i > max_number {\n   |                       ^^^^^^^^^^\n   |           \
    \            |\n   |                       expected `&isize`, found `isize`\n\
    \   |                       help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp89db8s4w.rs:12:26\n   |\n7  |     let mut max_number\
    \ = numbers[0]\n   |                          ---------- expected due to this\
    \ value\n...\n12 |             max_number = i\n   |                          ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n12 |             max_number = *i\n   |                          +\n\nerror[E0599]:\
    \ no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp89db8s4w.rs:15:16\n\
    \   |\n15 |     min_number.iter().cloned().collect()\n   |                ^^^^\
    \ method"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_numbers_idx\
    \ = Vec::new();\n    for i in 0..(numbers.len() - 1) {\n        if numbers[i]\
    \ > numbers[i + 1] {\n            max_numbers.push(numbers[i]);\n            max_numbers_idx.push(i);\n\
    \        } else {\n            max_numbers.push(numbers[i + 1]);\n           \
    \ max_numbers_idx.push(i + 1);\n        }\n    }\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpq8gu5ple.rs:8:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut current_element =\
    \ numbers[0];\n    for element in numbers.iter().rev() {\n        if element >\
    \ current_element {\n            result.push(element);\n            current_element\
    \ = element;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqbo4njf7.rs:9:22\n  |\n9 |\
    \         if element > current_element {\n  |                      ^^^^^^^^^^^^^^^\n\
    \  |                      |\n  |                      expected `&isize`, found\
    \ `isize`\n  |                      help: consider borrowing here: `&current_element`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqbo4njf7.rs:11:31\n   |\n7  |\
    \     let mut current_element = numbers[0];\n   |                            \
    \   ---------- expected due to this value\n...\n11 |             current_element\
    \ = element;\n   |                               ^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |        \
    \     current_element = *element;\n   |                               +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqbo4njf7.rs:14:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for element in numbers.iter().rev()\
    \ {\n        if element >= maximum {\n            maximum = element;\n       \
    \ }\n    }\n    maximum\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk_xubrcp.rs:8:23\n  |\n8 |\
    \         if element >= maximum {\n  |                       ^^^^^^^\n  |    \
    \                   |\n  |                       expected `&isize`, found `isize`\n\
    \  |                       help: consider borrowing here: `&maximum`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpk_xubrcp.rs:9:23\n  |\n6 |     let mut maximum\
    \ = numbers[0];\n  |                       ---------- expected due to this value\n\
    ...\n9 |             maximum = element;\n  |                       ^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |             maximum = *element;\n  |                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk_xubrcp.rs:12:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n12 |     maximum\n   |  \
    \   ^^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n                found type `isize`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers.first().unwrap();\n    let\
    \ mut max_index = 0;\n    for index in 1..numbers.len() {\n        if numbers[index]\
    \ > max_value {\n            max_value = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    numbers.drain(..max_index + 1);\n    max_index\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm3j7wsq4.rs:9:29\n  |\n9 |\
    \         if numbers[index] > max_value {\n  |                             ^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n\
    \  |\n9 |         if numbers[index] > *max_value {\n  |                      \
    \       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3j7wsq4.rs:10:25\n\
    \   |\n6  |     let mut max_value = numbers.first().unwrap();\n   |          \
    \               ------------------------ expected due to this value\n...\n10 |\
    \             max_value = numbers[index];\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&numbers[index]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm3j7wsq4.rs:15:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n15 |     max_index\n   |     ^^^^^^^^^ expected struct `Vec`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `usize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_value {\n            max_value = numbers[i];\n\
    \        }\n    }\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if i == 0 || numbers[i] >= max_value {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpic8xe86k.rs:18:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() < 2 {\n        return numbers\n    }\n\
    \    let mut max_index = 0;\n    let mut max_number = numbers[0];\n    for x in\
    \ &numbers {\n        if x > max_number {\n            max_number = x;\n     \
    \       max_index = x;\n        }\n    }\n    let mut max_count = max_number;\n\
    \    let mut max_value = max_index;\n    for x in numbers {\n        if x == max_index\
    \ {\n            max_count += 1;\n        } else {\n            max_count = x;\n\
    \        }\n        if max_count > max_value {\n            max_value = max_count;\n\
    \        }\n    }\n    let mut max_list = Vec::new();\n    if max_index >= numbers[max_index]\
    \ {\n        max_list.push(*max_index);\n    }\n    for x in &numbers[1..] {\n\
    \        if x == max_index {\n            max_list.push(*x);\n        }\n    }\n\
    \    max_list\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptzeol_ug.rs:12:16\n   |\n\
    12 |         if x > max_number {\n   |                ^^^^^^^^^^\n   |       \
    \         |\n   |                expected `&isize`, found `isize`\n   |      \
    \          help: consider borrowing here: `&max_number`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptzeol_ug.rs:13:26\n   |\n10 |     let mut max_number =\
    \ numbers[0];\n   |                          ---------- expected due to this value\n\
    ...\n13 |             max_number = x;\n   |                          ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |             max_number = *x;\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptzeol_ug.rs:14:25\n   |\n9  |     let mut max_index\
    \ = 0;\n   |                         - expected due to this value\n...\n14 | \
    \            max_index = x;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \           max_index = *x;\n   |                         +\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptzeol_ug.rs:30:21\n\
    \   |\n30 |     if max_index >= numbers[max_index] {\n   |                   \
    \  ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptzeol_ug.rs:31:23\n\
    \   |\n31 |         max_list.push(*max_index);\n   |                       ^^^^^^^^^^\n\
    \nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmptzeol_ug.rs:34:14\n\
    \   |\n34 |         if x == max_index {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n        "
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n \
    \   }\n\n    let mut result = numbers;\n\n    for n in numbers.iter() {\n    \
    \    result = result.windows(n - 1).max().collect();\n    }\n\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbx1aeklk.rs:13:33\n   |\n\
    13 |         result = result.windows(n - 1).max().collect();\n   |           \
    \                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |         result = result.windows((n - 1).try_into().unwrap()).max().collect();\n\
    \   |                                 +     +++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<&[isize]>` is not an iterator\n   --> /tmp/tmpbx1aeklk.rs:13:46\n  \
    \  |\n13  |           result = result.windows(n - 1).max().collect();\n    | \
    \                                               ^^^^^^^ `Option<&[isize]>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<&[isize]>: Iterator`\n            which is required by `&mut\
    \ Option<&[isize]>: Iterator`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_found = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_found {\n            max_found = numbers[i];\n\
    \        }\n    }\n    vec![max_found]\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmplqx1rpgn.rs:6:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers = numbers.to_owned();\n    let mut max\
    \ = numbers[0];\n    let mut max_index = numbers.iter().rev().skip(1).last().unwrap();\n\
    \    for (i, &x) in numbers.iter().zip(&mut numbers).take_while(|&(x2, y)| x <=\
    \ x2 + 1) {\n        if x > max {\n            max = x;\n            max_index\
    \ = i;\n        }\n    }\n    numbers.iter_mut().rev().skip(1).zip(numbers.iter_mut().rev().skip(1)).take_while(|&(x1,\
    \ &x2)| x1 == x2 + 1).map(|&(x1, x2)| {\n        if x1 > x2 {\n            (x1,\
    \ x2)\n        } else {\n            (max_index, x2)\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n --> /tmp/tmpskbv4j0x.rs:9:75\n\
    \  |\n9 |     for (i, &x) in numbers.iter().zip(&mut numbers).take_while(|&(x2,\
    \ y)| x <= x2 + 1) {\n  |                                                    \
    \                       ^ help: a local variable with a similar name exists: `x2`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpskbv4j0x.rs:9:13\n  |\n9 |    \
    \ for (i, &x) in numbers.iter().zip(&mut numbers).take_while(|&(x2, y)| x <= x2\
    \ + 1) {\n  |             ^^     -------------------------------------------------------------------\
    \ this expression has type `Option<(&isize, &mut isize)>`\n  |             |\n\
    \  |             types differ in mutability\n  |             help: you can probably\
    \ remove the explicit borrow: `x`\n  |\n  = note: expected mutable reference `&mut\
    \ isize`\n                     found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpskbv4j0x.rs:15:94\n   |\n15 |     numbers.iter_mut().rev().skip(1).zip(numbers.iter_mut().rev().skip(1)).take_while(|&(x1,\
    \ &x2)| x1 == x2 + 1).map(|&(x1, x2)| {\n   |                                \
    \                                                              ^^^- expected due\
    \ to this\n   |                                                              \
    \                                |\n   |                                     \
    \                                                         types differ in mutability\n\
    \   |                                                                        \
    \                      help: you can probably remove the explicit borrow: `x2`\n\
    \   |\n   = note: expected mutable reference `&mut isize`\n                  \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpskbv4j0x.rs:15:119\n\
    \   |\n15 |     numbers.iter_mut().rev().skip(1).zip(numbers.iter_mut().rev().skip(1)).take_while(|&(x1,\
    \ &x2)| x1 == x2 + 1).map(|&(x1, x2)| {\n   |                                \
    \                                                                            \
    \           ^^^^^^^^-\n   |                                                   "
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() < 3 {\n        return numbers\n    }\n\
    \n    numbers.windows(2).fold(numbers.windows(2).next().unwrap().max(), |max,\
    \ &x| max)\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpmeq85sk1.rs:10:64\n    |\n10  |     numbers.windows(2).fold(numbers.windows(2).next().unwrap().max(),\
    \ |max, &x| max)\n    |                                                      \
    \          ^^^- supplied 0 arguments\n    |                                  \
    \                              |\n    |                                      \
    \                          expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmeq85sk1.rs:10:29\n\
    \   |\n10 |     numbers.windows(2).fold(numbers.windows(2).next().unwrap().max(),\
    \ |max, &x| max)\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |                     \
    \        |\n   |                             expected struct `Vec`, found `&[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found reference `&[isize]`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpmeq85sk1.rs:10:78\n   |\n10 |     numbers.windows(2).fold(numbers.windows(2).next().unwrap().max(),\
    \ |max, &x| max)\n   |                                                       \
    \                       ^ doesn't have a size known at compile-time\n   |\n  \
    \ = help: the trait `Sized` is not implemented for `[isize]`\n   = note: all local\
    \ variables must have a statically known size\n   = help: unsized locals are gated\
    \ as an unstable feature\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::with_capacity(numbers.len());\n\
    \    let mut max: isize = 0;\n    for n in numbers {\n        if n >= max {\n\
    \            vec.push(n);\n            max = n;\n        }\n    }\n    vec\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmposex2s7d.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_idx = numbers[0] as usize;\n    let mut max_val\
    \ = numbers[0] as isize;\n    let mut max_rolling_numbers = Vec::with_capacity(numbers.size());\n\
    \    for idx in 1..numbers.len() {\n        if numbers[idx] > max_val {\n    \
    \        max_rolling_numbers.push(max_val);\n            max_val = numbers[idx];\n\
    \            max_idx = idx;\n        } else {\n            max_rolling_numbers.push(numbers[max_idx]);\n\
    \        }\n    }\n    max_rolling_numbers.push(max_val);\n    max_rolling_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmprs9_7hbk.rs:8:62\n  |\n8 |     let mut max_rolling_numbers\
    \ = Vec::with_capacity(numbers.size());\n  |                                 \
    \                             ^^^^ help: there is an associated function with\
    \ a similar name: `resize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        max_number = if number > max_number {\n            number\n     \
    \   } else {\n            max_number\n        };\n    }\n    let mut numbers =\
    \ Vec::new();\n    for number in numbers.iter().rev() {\n        numbers.push(if\
    \ number > max_number {\n            number\n        } else {\n            max_number\n\
    \        });\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm42yj81n.rs:8:34\n  |\n8 |\
    \         max_number = if number > max_number {\n  |                         \
    \         ^^^^^^^^^^\n  |                                  |\n  |            \
    \                      expected `&isize`, found `isize`\n  |                 \
    \                 help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpm42yj81n.rs:9:13\n  |\n9 |             number\n\
    \  |             ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider\
    \ dereferencing the borrow\n  |\n9 |             *number\n  |             +\n\n\
    error[E0277]: can't compare `&_` with `isize`\n  --> /tmp/tmpm42yj81n.rs:16:32\n\
    \   |\n16 |         numbers.push(if number > max_number {\n   |              \
    \                  ^ no implementation for `&_ < isize` and `&_ > isize`\n   |\n\
    \   = help: the trait `PartialOrd<isize>` is not implemented for `&_`\n\nerror[E0308]:\
    \ `if` and `else` have incompatible types\n  --> /tmp/tmpm42yj81n.rs:19:13\n \
    \  |\n16 |           numbers.push(if number > max_number {\n   |  ______________________-\n\
    17 | |             number\n   | |             ------ expected because of this\n\
    18 | |         } else {\n19 | |             max_number\n   | |             ^^^^^^^^^^\
    \ expected reference, found `isize`\n20 | |         });\n   | |_________- `if`\
    \ and `else` have incompatible types\n   |\n   = note: expected reference `&_`\n\
    \                   found type `isize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .enumerate()\n        .filter_map(|(i,\
    \ x)| (if i % 2 == 0 { Some(x) } else { None }))\n        .max_by_key(|x| x)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<&[isize]>` is not an iterator\n   --> /tmp/tmpvi7zmxzt.rs:10:10\n\
    \    |\n10  |           .collect()\n    |            ^^^^^^^ `Option<&[isize]>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<&[isize]>: Iterator`\n            which is required by `&mut\
    \ Option<&[isize]>: Iterator`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    for number\
    \ in numbers_copy.iter() {\n        numbers_copy.sort_unstable();\n        let\
    \ max = numbers_copy.len() as isize;\n        if number > max {\n            numbers_copy.push(number);\n\
    \        }\n    }\n    numbers_copy\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv4ygzl07.rs:10:21\n   |\n\
    10 |         if number > max {\n   |                     ^^^\n   |           \
    \          |\n   |                     expected `&isize`, found `isize`\n   |\
    \                     help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv4ygzl07.rs:11:31\n   |\n11 |             numbers_copy.push(number);\n\
    \   |                               ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             numbers_copy.push(*number);\n\
    \   |                               +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).enumerate().map(|(i, _)| numbers[i +\
    \ 1])\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyh7e_ycd.rs:6:5\n  |\n5 |\
    \ fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |                   \
    \                     ---------- expected `Vec<isize>` because of return type\n\
    6 |     numbers.windows(2).enumerate().map(|(i, _)| numbers[i + 1])\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Map`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Map<Enumerate<Windows<'_, isize>>, [closure@/tmp/tmpyh7e_ycd.rs:6:40:\
    \ 6:63]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for &x in numbers {\n  \
    \      if x > max {\n            max = x;\n        }\n    }\n    numbers\n   \
    \     .iter()\n        .cloned()\n        .enumerate()\n        .filter_map(|(i,\
    \ &x)| {\n            if i > numbers.len() - 2 {\n                None\n     \
    \       } else {\n                Some((x, numbers.len() - i - 1))\n         \
    \   }\n        })\n        .filter_map(|(v, &l)| {\n            if *l > numbers.len()\
    \ - 2 {\n                None\n            } else {\n                Some((l,\
    \ *l))\n            }\n        })\n        .collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplqokugnt.rs:7:9\n  |\n7 |\
    \     for &x in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `x`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplqokugnt.rs:16:26\n   |\n16 |         .filter_map(|(i,\
    \ &x)| {\n   |                          ^^- expected due to this\n   |       \
    \                   |\n   |                          expected `isize`, found reference\n\
    \   |                          help: you can probably remove the explicit borrow:\
    \ `x`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplqokugnt.rs:23:26\n   |\n23 |\
    \         .filter_map(|(v, &l)| {\n   |                          ^^- expected\
    \ due to this\n   |                          |\n   |                         \
    \ expected `usize`, found reference\n   |                          help: you can\
    \ probably remove the explicit borrow: `l`\n   |\n   = note:   expected type `usize`\n\
    \           found reference `&_`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0] as isize;\n    let mut rolling_max\
    \ = numbers[0] as isize;\n    for i in numbers.iter() {\n        if i > maximum\
    \ {\n            rolling_max = i;\n        } else {\n            maximum = i;\n\
    \        }\n    }\n    vec![rolling_max]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg71t6qug.rs:9:16\n  |\n9 |\
    \         if i > maximum {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found `isize`\n  |                help:\
    \ consider borrowing here: `&maximum`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpg71t6qug.rs:10:27\n   |\n7  |     let mut rolling_max = numbers[0] as\
    \ isize;\n   |                           ------------------- expected due to this\
    \ value\n...\n10 |             rolling_max = i;\n   |                        \
    \   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n10 |             rolling_max = *i;\n   |                     \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg71t6qug.rs:12:23\n\
    \   |\n6  |     let mut maximum = numbers[0] as isize;\n   |                 \
    \      ------------------- expected due to this value\n...\n12 |             maximum\
    \ = i;\n   |                       ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |             maximum = *i;\n\
    \   |                       +\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \    let mut result: Vec<isize> = vec![];\n    for i in 1..numbers.len() {\n \
    \       if i > numbers[0] {\n            result.push(numbers[i - 1]);\n      \
    \  }\n        for j in 1..i {\n            if numbers[j] > numbers[i - 1] {\n\
    \                result.push(numbers[j]);\n            }\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpghwu0ynr.rs:11:16\n   |\n\
    11 |         if i > numbers[0] {\n   |                ^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |         if i > numbers[0].try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).max_by_key(|number| number.unwrap()).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for reference `&&[isize]`\
    \ in the current scope\n --> /tmp/tmp7o6njk7_.rs:6:51\n  |\n6 |     numbers.windows(2).max_by_key(|number|\
    \ number.unwrap()).cloned().collect()\n  |                                   \
    \                ^^^^^^ help: there is an associated function with a similar name:\
    \ `swap`\n\nerror[E0599]: the method `cloned` exists for enum `Option<&[isize]>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmp7o6njk7_.rs:6:61\n \
    \   |\n6   |       numbers.windows(2).max_by_key(|number| number.unwrap()).cloned().collect()\n\
    \    |                                                               ^^^^^^ method\
    \ cannot be called on `Option<&[isize]>` due to unsatisfied trait bounds\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `[isize]:\
    \ Sized`\n            `Option<&[isize]>: Iterator`\n            which is required\
    \ by `&mut Option<&[isize]>: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_element =\
    \ 0;\n    for n in numbers {\n        let mut max_element = n;\n        for m\
    \ in &numbers {\n            if m == max_element {\n                continue;\n\
    \            }\n            if m > max_element {\n                max_element\
    \ = m;\n            }\n        }\n        result.push(max_element);\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpom4r9ixy.rs:11:18\n\
    \   |\n11 |             if m == max_element {\n   |                  ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpom4r9ixy.rs:14:20\n   |\n14 |             if m > max_element {\n   |\
    \                    ^^^^^^^^^^^\n   |                    |\n   |            \
    \        expected `&isize`, found `isize`\n   |                    help: consider\
    \ borrowing here: `&max_element`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpom4r9ixy.rs:15:31\n\
    \   |\n9  |         let mut max_element = n;\n   |                           \
    \    - expected due to this value\n...\n15 |                 max_element = m;\n\
    \   |                               ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n15 |                 max_element\
    \ = *m;\n   |                               +\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .map(|window| window.iter().max().unwrap())\n\
    \        .collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmphcmijdep.rs:8:10\n     |\n8\
    \    |         .collect::<Vec<isize>>()\n     |          ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = vec![numbers[0]];\n    for n in numbers {\n\
    \        for (i, m0) in m.iter().enumerate() {\n            if n < m0 {\n    \
    \            m.swap(i, i + 1);\n            }\n        }\n    }\n    m\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu9i5ip04.rs:9:20\n  |\n9 |\
    \             if n < m0 {\n  |                    ^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |             if n < *m0\
    \ {\n  |                    +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for i in numbers.iter().rev()\
    \ {\n        if *i > *max {\n            max = *i;\n        }\n    }\n    numbers.iter().rev().take_while(|&n|\
    \ n > max).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpa0qh8kwt.rs:8:17\n\
    \  |\n8 |         if *i > *max {\n  |                 ^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa0qh8kwt.rs:12:46\n   |\n12 |     numbers.iter().rev().take_while(|&n|\
    \ n > max).collect()\n   |                                              ^^^\n\
    \   |                                              |\n   |                   \
    \                           expected `&isize`, found `isize`\n   |           \
    \                                   help: consider borrowing here: `&max`\n\n\
    error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over\
    \ elements of type `&isize`\n    --> /tmp/tmpa0qh8kwt.rs:12:51\n     |\n12   |\
    \     numbers.iter().rev().take_while(|&n| n > max).collect()\n     |        \
    \                                           ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]; numbers.len()];\n   \
    \ for n in numbers {\n        result.iter_mut().for_each(|&n| *n += n);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8jtp8a9e.rs:8:37\n  |\n8 |\
    \         result.iter_mut().for_each(|&n| *n += n);\n  |                     \
    \                ^--\n  |                                     ||\n  |        \
    \                             |expected due to this\n  |                     \
    \                types differ in mutability\n  |                             \
    \        help: did you mean `n`: `&&mut isize`\n  |\n  = note: expected mutable\
    \ reference `&mut isize`\n                     found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_index = numbers.iter().cloned().collect::<Vec<_>>().len()\
    \ - 1;\n    let mut max_value = numbers[max_index];\n    for number in numbers.iter_mut()\
    \ {\n        if number > max_value {\n            max_value = number;\n      \
    \  }\n        *number = max_value;\n        if *number == max_index {\n      \
    \      max_index -= 1;\n        }\n    }\n    numbers\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7ndny3xm.rs:9:21\n  |\n9 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^\n  |    \
    \                 |\n  |                     expected `&mut isize`, found `isize`\n\
    \  |                     help: consider mutably borrowing here: `&mut max_value`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7ndny3xm.rs:10:25\n   |\n7  |\
    \     let mut max_value = numbers[max_index];\n   |                         ------------------\
    \ expected due to this value\n...\n10 |             max_value = number;\n   |\
    \                         ^^^^^^ expected `isize`, found `&mut isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n10 |             max_value = *number;\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ndny3xm.rs:13:23\n\
    \   |\n13 |         if *number == max_index {\n   |                       ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n13 |         if\
    \ *number == max_index.try_into().unwrap() {\n   |                           \
    \     ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut min = numbers[0];\n\
    \    let mut index = 0;\n    for number in numbers {\n        if number > max\
    \ {\n            max = number;\n        }\n        if number < min {\n       \
    \     min = number;\n        }\n        index += 1\n    }\n    let mut result\
    \ = vec![];\n    while index < numbers.len() {\n        result.push(min);\n  \
    \      min = max;\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpnwux5j8l.rs:19:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n9   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n19  |     while index < numbers.len() {\n    |        \
    \           ^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `numbers`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n9   |     for number in &numbers {\n    |               \
    \    +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![numbers[0]];\n    for number in numbers.iter().rev()\
    \ {\n        if number > res[0] {\n            res.swap(0, 1);\n        }\n  \
    \      if number > res[1] {\n            res.swap(1, 2);\n        }\n        if\
    \ number > res[2] {\n            res.swap(2, 3);\n        }\n        if number\
    \ > res[3] {\n            res.swap(3, 4);\n        }\n        if number > res[4]\
    \ {\n            res.swap(4, 5);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi5phnluj.rs:8:21\n  |\n8 |\
    \         if number > res[0] {\n  |                     ^^^^^^\n  |          \
    \           |\n  |                     expected `&isize`, found `isize`\n  | \
    \                    help: consider borrowing here: `&res[0]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi5phnluj.rs:11:21\n   |\n11 |         if number\
    \ > res[1] {\n   |                     ^^^^^^\n   |                     |\n  \
    \ |                     expected `&isize`, found `isize`\n   |               \
    \      help: consider borrowing here: `&res[1]`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi5phnluj.rs:14:21\n   |\n14 |         if number > res[2] {\n  \
    \ |                     ^^^^^^\n   |                     |\n   |             \
    \        expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&res[2]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi5phnluj.rs:17:21\n\
    \   |\n17 |         if number > res[3] {\n   |                     ^^^^^^\n  \
    \ |                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&res[3]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi5phnluj.rs:20:21\n   |\n20 |         if number\
    \ > res[4] {\n   |                     ^^^^^^\n   |                     |\n  \
    \ |                     expected `&isize`, found `isize`\n   |               \
    \      help: consider borrowing here: `&res[4]`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(Vec::new(), |mut acc, &window|\
    \ {\n        acc.push(window\n            .iter()\n            .max_by_key(|&a|\
    \ a)\n            .expect(\"max function returns None when no element found\"\
    ));\n        acc\n    })\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmp_cgql_y1.rs:6:52\n  |\n6 |     numbers.windows(2).fold(Vec::new(),\
    \ |mut acc, &window| {\n  |                                                  \
    \  ^^^^^^ doesn't have a size known at compile-time\n  |\n  = help: the trait\
    \ `Sized` is not implemented for `[isize]`\n  = note: all local variables must\
    \ have a statically known size\n  = help: unsized locals are gated as an unstable\
    \ feature\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_cgql_y1.rs:7:18\n\
    \   |\n7  |           acc.push(window\n   |  __________________^\n8  | |     \
    \        .iter()\n9  | |             .max_by_key(|&a| a)\n10 | |             .expect(\"\
    max function returns None when no element found\"));\n   | |______________________________________________________________________^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n7  |         acc.push(*window\n   |                  +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).enumerate().max().map(|(v, i)| numbers[i\
    \ + 1]).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `&[isize]`\n --> /tmp/tmp6fuh06rv.rs:6:65\n\
    \  |\n6 |     numbers.windows(2).enumerate().max().map(|(v, i)| numbers[i + 1]).collect()\n\
    \  |                                                               - ^ - {integer}\n\
    \  |                                                               |\n  |    \
    \                                                           &[isize]\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .iter()\n        .filter(|i|\
    \ i >= numbers[1])\n        .map(|i| numbers[0])\n        .max()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Windows` in the\
    \ current scope\n --> /tmp/tmppuvonarx.rs:7:10\n  |\n7 |         .iter()\n  |\
    \          ^^^^ method not found in `Windows<'_, isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current_max = numbers.last();\n    let mut max_so_far\
    \ = numbers[0];\n    for &n in numbers[1..] {\n        if n >= current_max {\n\
    \            max_so_far = n;\n            current_max = n;\n        }\n    }\n\
    \    max_so_far.clone()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmpp1qng246.rs:8:15\n  |\n8 |     for &n in numbers[1..]\
    \ {\n  |               ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \  |\n  = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n  |\n8 |     for &n in &numbers[1..]\
    \ {\n  |               +\n8 |     for &n in &mut numbers[1..] {\n  |         \
    \      ++++\n\nerror[E0277]: `[isize]` is not an iterator\n --> /tmp/tmpp1qng246.rs:8:15\n\
    \  |\n8 |     for &n in numbers[1..] {\n  |               ^^^^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n  |\n  = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \  |\n8 |     for &n in &numbers[1..] {\n  |               +\n8 |     for &n in\
    \ &mut numbers[1..] {\n  |               ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpp1qng246.rs:11:27\n   |\n6  |     let mut current_max = numbers.last();\n\
    \   |                           -------------- expected due to this value\n...\n\
    11 |             current_max = n;\n   |                           ^ expected enum\
    \ `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n \
    \             found type `isize`\n\nerror[E0277]: can't compare `isize` with `Option<&isize>`\n\
    \ --> /tmp/tmpp1qng246.rs:9:14\n  |\n9 |         if n >= current_max {\n  |  \
    \            ^^ no implementation for `isize < Option<&isize>` and `isize > Option<&isize>`\n\
    \  |\n  = help: the trait `PartialOrd<Option<&isize>>` is not implemented for\
    \ `isize`\n  = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp1qng246.rs:14:5\n \
    \  |\n5  | fn rolling_max(numbe"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_elem = 0isize;\n\n    let mut window = Vec::new();\n\
    \    window.resize((numbers.len() + 1).min(), 0);\n\n    for elem in &numbers\
    \ {\n        let mut min_elem = std::cmp::min(elem);\n        if window[elem]\
    \ < min_elem {\n            window[elem] = min_elem;\n            max_elem = std::cmp::max(max_elem,\
    \ elem);\n        }\n    }\n\n    window[numbers.len()] += max_elem;\n\n    window\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpcvu0jhca.rs:9:39\n    |\n9   |     window.resize((numbers.len()\
    \ + 1).min(), 0);\n    |                                       ^^^- supplied 0\
    \ arguments\n    |                                       |\n    |            \
    \                           expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmpcvu0jhca.rs:12:28\n     |\n12   |         let\
    \ mut min_elem = std::cmp::min(elem);\n     |                            ^^^^^^^^^^^^^\
    \ ---- supplied 1 argument\n     |                            |\n     |      \
    \                      expected 2 arguments\n     |\nnote: function defined here\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpcvu0jhca.rs:13:12\n\
    \   |\n13 |         if window[elem] < min_elem {\n   |            ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpcvu0jhca.rs:14:13\n\
    \   |\n14 |             window[elem] = min_elem;\n   |             ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcvu0jhca.rs:15:48\n   |\n15 |\
    \             max_elem = std::cmp::max(max_elem, elem);\n   |                \
    \                                ^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n15 |             max_elem = std::cmp::max(max_elem,\
    \ *e"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers.iter().rev()\
    \ {\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ result = vec![max];\n    for n in numbers.iter().rev() {\n        if n >= max\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1s8usmyr.rs:8:16\n  |\n8 |\
    \         if n > max {\n  |                ^^^\n  |                |\n  |    \
    \            expected `&isize`, found `isize`\n  |                help: consider\
    \ borrowing here: `&max`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1s8usmyr.rs:9:19\n\
    \  |\n6 |     let mut max = numbers[0];\n  |                   ---------- expected\
    \ due to this value\n...\n9 |             max = n;\n  |                   ^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |             max = *n;\n  |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1s8usmyr.rs:14:17\n   |\n14 |         if n >= max {\n \
    \  |                 ^^^\n   |                 |\n   |                 expected\
    \ `&isize`, found `isize`\n   |                 help: consider borrowing here:\
    \ `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1s8usmyr.rs:15:25\n\
    \   |\n15 |             result.push(n);\n   |                         ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    15 |             result.push(*n);\n   |                         +\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max =\
    \ numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > current_max\
    \ {\n            result.push(numbers[i]);\n            current_max = numbers[i];\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkmqzcw1r.rs:7:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n \
    \   }\n\n    let mut max_element = numbers[0];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        max_element = std::cmp::max(max_element, number);\n    }\n\n    vec![max_element]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp47_h0mu5.rs:13:50\n   |\n\
    13 |         max_element = std::cmp::max(max_element, number);\n   |         \
    \                                         ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         max_element\
    \ = std::cmp::max(max_element, *number);\n   |                               \
    \                   +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut max_idx = 0;\n   \
    \ for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_idx = i;\n        }\n    }\n    let mut max_vec\
    \ = [numbers[max_idx]; numbers.len()];\n    for i in 0..numbers.len() {\n    \
    \    if numbers[i] > max {\n            max_vec[i] = numbers[i];\n        } else\
    \ {\n            max_vec[i] = max;\n        }\n    }\n    max_vec\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp2mq1_gdh.rs:14:42\n   |\n5  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                ------- this would need to be a `const`\n\
    ...\n14 |     let mut max_vec = [numbers[max_idx]; numbers.len()];\n   |     \
    \                                     ^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .iter()\n        .enumerate()\n      \
    \  .map(|(idx, element)| {\n            if idx == 0 {\n                element\n\
    \            } else {\n                let mut prev_element = numbers[idx - 1];\n\
    \                if element > prev_element {\n                    element\n  \
    \              } else {\n                    prev_element\n                }\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpln60f75c.rs:14:30\n   |\n\
    14 |                 if element > prev_element {\n   |                       \
    \       ^^^^^^^^^^^^\n   |                              |\n   |              \
    \                expected `&isize`, found `isize`\n   |                      \
    \        help: consider borrowing here: `&prev_element`\n\nerror[E0308]: `if`\
    \ and `else` have incompatible types\n  --> /tmp/tmpln60f75c.rs:17:21\n   |\n\
    14 | /                 if element > prev_element {\n15 | |                   \
    \  element\n   | |                     ------- expected because of this\n16 |\
    \ |                 } else {\n17 | |                     prev_element\n   | |\
    \                     ^^^^^^^^^^^^ expected `&isize`, found `isize`\n18 | |  \
    \               }\n   | |_________________- `if` and `else` have incompatible\
    \ types\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut counter = numbers.iter().cloned().take_while(|&x|\
    \ *x != *numbers.last()).count();\n    if counter > 0 {\n        let mut max_number\
    \ = *numbers.last();\n        for i in 0..counter {\n            if max_number\
    \ < *numbers[i] {\n                max_number = *numbers[i];\n            }\n\
    \        }\n        max_number += 1;\n        let mut buffer = Vec::new();\n \
    \       for i in 0..counter {\n            if *numbers[i] <= max_number {\n  \
    \              buffer.push(*numbers[i]);\n            }\n        }\n        buffer\n\
    \    } else {\n        numbers\n    }\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp4pfm_w9h.rs:6:63\n\
    \  |\n6 |     let mut counter = numbers.iter().cloned().take_while(|&x| *x !=\
    \ *numbers.last()).count();\n  |                                             \
    \                  ^^\n\nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n\
    \ --> /tmp/tmp4pfm_w9h.rs:6:69\n  |\n6 |     let mut counter = numbers.iter().cloned().take_while(|&x|\
    \ *x != *numbers.last()).count();\n  |                                       \
    \                              ^^^^^^^^^^^^^^^\n\nerror[E0614]: type `Option<&isize>`\
    \ cannot be dereferenced\n --> /tmp/tmp4pfm_w9h.rs:8:30\n  |\n8 |         let\
    \ mut max_number = *numbers.last();\n  |                              ^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp4pfm_w9h.rs:10:29\n\
    \   |\n10 |             if max_number < *numbers[i] {\n   |                  \
    \           ^^^^^^^^^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp4pfm_w9h.rs:11:30\n   |\n11 |                 max_number = *numbers[i];\n\
    \   |                              ^^^^^^^^^^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmp4pfm_w9h.rs:17:16\n   |\n17 |             if\
    \ *numbers[i] <= max_number {\n   |                ^^^^^^^^^^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp4pfm_w9h.rs:18:29\n   |\n\
    18 |                 buffer.push(*numbers[i]);\n   |                         \
    \    ^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() <= 0 {\n        return vec![];\n    }\n\
    \    let mut max: isize = 0;\n    let mut max_index = -1;\n\n    for num in numbers\
    \ {\n        if num > max {\n            max = num;\n            max_index = numbers.iter().position(|&i|\
    \ i == num).unwrap();\n        }\n    }\n\n    if max_index >= 0 {\n        numbers.iter_mut().enumerate().filter(|(_,\
    \ i)| i < max_index).fold(vec![], |mut acc, (i, num)| {\n            acc.push(*num);\n\
    \            acc\n        });\n    } else {\n        vec![]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpwowp6c5e.rs:10:25\n\
    \   |\n10 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwowp6c5e.rs:20:60\n   |\n20 |         numbers.iter_mut().enumerate().filter(|(_,\
    \ i)| i < max_index).fold(vec![], |mut acc, (i, num)| {\n   |                \
    \                                            ^^^^^^^^^ expected `&&mut isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwowp6c5e.rs:19:23\n\
    \   |\n19 |       if max_index >= 0 {\n   |  _______________________^\n20 | |\
    \         numbers.iter_mut().enumerate().filter(|(_, i)| i < max_index).fold(vec![],\
    \ |mut acc, (i, num)| {\n21 | |             acc.push(*num);\n22 | |          \
    \   acc\n23 | |         });\n   | |           - help: remove this semicolon\n\
    24 | |     } else {\n   | |_____^ expected struct `Vec`, found `()`\n   |\n  \
    \ = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret: Vec<isize> = vec![numbers[0]; numbers.len()];\n\
    \    let mut max: isize = 0;\n    for num in numbers.iter() {\n        if num\
    \ > max {\n            max = num;\n        }\n        ret[ret.len() - 1] = max;\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3hzx8hz.rs:9:18\n  |\n9 |\
    \         if num > max {\n  |                  ^^^\n  |                  |\n \
    \ |                  expected `&isize`, found `isize`\n  |                  help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy3hzx8hz.rs:10:19\n\
    \   |\n7  |     let mut max: isize = 0;\n   |                  ----- expected\
    \ due to this type\n...\n10 |             max = num;\n   |                   ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max = *num;\n   |                   +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    let mut roll:\
    \ usize = 0;\n\n    for num in numbers.iter() {\n        if roll > 0 {\n     \
    \       result.push(num);\n            roll--;\n        } else {\n           \
    \ result.push(num);\n        }\n\n        if roll == 0 {\n            roll = numbers.len();\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpxqdvlbzr.rs:12:19\n\
    \   |\n12 |             roll--;\n   |                   ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxqdvlbzr.rs:11:25\n   |\n11 |\
    \             result.push(num);\n   |                         ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |  \
    \           result.push(*num);\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxqdvlbzr.rs:14:25\n   |\n14 |             result.push(num);\n\
    \   |                         ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |             result.push(*num);\n\
    \   |                         +\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n\n    if max_index == -1 {\n        max_value = numbers[0];\n    \
    \    max_index = 0;\n    }\n\n    numbers[max_index..].clone()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpo91lkfab.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpo91lkfab.rs:16:21\n   |\n16 |     if max_index\
    \ == -1 {\n   |                     ^^\n   |                     |\n   |     \
    \                cannot apply unary operator `-`\n   |                     help:\
    \ you may have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note:\
    \ unsigned values cannot be negated\n\nerror[E0599]: no method named `clone` found\
    \ for slice `[isize]` in the current scope\n  --> /tmp/tmpo91lkfab.rs:21:26\n\
    \   |\n21 |     numbers[max_index..].clone()\n   |                          ^^^^^\
    \ method not found in `[isize]`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = vec![numbers[0]];\n    for n in numbers {\n\
    \        if n != vec[vec.len() - 1] {\n            vec.push(n);\n        }\n \
    \   }\n    vec\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpb9hhr_l_.rs:6:24

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers;\n    let mut rolling_max\
    \ = 0;\n    let mut current_max = 0;\n    for i in 0..numbers.len() {\n      \
    \  current_max = if numbers_copy[i] > rolling_max {\n            numbers_copy[i];\n\
    \        } else {\n            rolling_max\n        };\n        rolling_max =\
    \ current_max;\n    }\n    return rolling_max;\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfqnfgeb.rs:10:56\n   |\n\
    10 |           current_max = if numbers_copy[i] > rolling_max {\n   |  ________________________________________________________^\n\
    11 | |             numbers_copy[i];\n   | |                            - help:\
    \ remove this semicolon\n12 | |         } else {\n   | |_________^ expected integer,\
    \ found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplfqnfgeb.rs:17:12\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n17 |     return rolling_max;\n   |            ^^^^^^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut max_index\
    \ = 0;\n    for i in 1..numbers.len() {\n        if max_number >= numbers[i] {\n\
    \            max_number = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    numbers.iter().skip(max_index).take(numbers.len() - max_index + 1)\n\
    \        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphv2c9_cf.rs:14:5\n   |\n\
    5  |   fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 | /     numbers.iter().skip(max_index).take(numbers.len() - max_index\
    \ + 1)\n15 | |         .collect::<Vec<_>>()\n   | |____________________________^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maxes: Vec<isize> = Vec::new();\n    let mut numbers_len\
    \ = numbers.len();\n    let mut max_index = 0;\n\n    while numbers_len > 0 {\n\
    \        max_index += 1;\n        maxes.push(numbers.iter().max().unwrap());\n\
    \        numbers_len -= 1;\n\n        if max_index == numbers.len() {\n      \
    \      break;\n        }\n\n        numbers = &numbers[max_index..];\n    }\n\n\
    \    maxes\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps3u2v3o0.rs:12:20\n   |\n\
    12 |         maxes.push(numbers.iter().max().unwrap());\n   |                \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n12 |         maxes.push(*numbers.iter().max().unwrap());\n\
    \   |                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps3u2v3o0.rs:19:19\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                 ---------- expected due to this parameter type\n...\n19 |  \
    \       numbers = &numbers[max_index..];\n   |                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found reference `&[isize]`\nhelp: try using a conversion method\n\
    \   |\n19 |         numbers = (&numbers[max_index..]).to_vec();\n   |        \
    \           +                     ++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .iter()\n        .enumerate()\n      \
    \  .map(|(i, n)| (i, n))\n        .enumerate()\n        .filter_map(|(i, n)| {\n\
    \            if n.0.saturating_sub(n.1) > 1 {\n                Some(n.0.saturating_sub(n.1))\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .map(|(i, _)| numbers[i - 1])\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsm3pfckj.rs:12:35\n   |\n\
    12 |             if n.0.saturating_sub(n.1) > 1 {\n   |                      \
    \             ^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsm3pfckj.rs:13:41\n   |\n13 |                 Some(n.0.saturating_sub(n.1))\n\
    \   |                                         ^^^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsm3pfckj.rs:18:15\n   |\n18 |\
    \         .map(|(i, _)| numbers[i - 1])\n   |               ^^^^^-\n   |     \
    \          |    |\n   |               |    expected due to this\n   |        \
    \       expected `usize`, found tuple\n   |\n   = note: expected type `usize`\n\
    \             found tuple `(_, _)`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() <= 1 {\n        numbers\n    } else {\n\
    \        let mut current_max = numbers[0];\n        let mut counter = 0;\n   \
    \     for n in numbers {\n            if n >= current_max {\n                counter\
    \ = counter + 1;\n                current_max = n;\n            }\n        }\n\
    \        if counter == 0 {\n            numbers\n        } else {\n          \
    \  numbers\n                .iter()\n                .enumerate()\n          \
    \      .filter(|(_, n)| n == counter)\n                .map(|(_, v)| v)\n    \
    \            .collect()\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpqbvn829q.rs:23:36\n\
    \   |\n23 |                 .filter(|(_, n)| n == counter)\n   |             \
    \                       ^^ no implementation for `&&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpqbvn829q.rs:25:18\n\
    \     |\n25   |                 .collect()\n     |                  ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut i = 1;\n    while\
    \ i < numbers.len() {\n        max = numbers[i] if max < numbers[i] as isize;\n\
    \        i += 1;\n    }\n    vec![max]\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n --> /tmp/tmpwzlsbuvi.rs:9:26\n  |\n9 |         max = numbers[i] if max\
    \ < numbers[i] as isize;\n  |                          ^^ expected one of `.`,\
    \ `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max:\
    \ isize = 0;\n    for (i, &number) in numbers.iter().enumerate() {\n        let\
    \ mut new_max = numbers[i];\n        let mut old_max = current_max;\n        while\
    \ number < old_max {\n            old_max = new_max;\n            new_max = result.last().unwrap()\
    \ + 1;\n            result.push(new_max);\n        }\n        current_max = new_max;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp1zd_7qe_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_pos = 0;\n    for i in 1..numbers.len() {\n        let curr =\
    \ numbers[i];\n        if curr > max_value {\n            max_value = curr;\n\
    \            max_pos = i;\n        }\n    }\n    for _ in 0..numbers.len() {\n\
    \        result.push(numbers[max_pos as usize]);\n        max_pos += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpve05rqy0.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .iter()\n        .enumerate()\n      \
    \  .windows(2)\n        .map(|(index, window)| window.iter().max().unwrap())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `Enumerate` in\
    \ the current scope\n --> /tmp/tmpfj_j4msr.rs:9:10\n  |\n9 |         .windows(2)\n\
    \  |          ^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = numbers.clone();\n    for\
    \ i in result.iter_mut() {\n        *i = match i {\n            None => 0,\n \
    \           Some(x) => max(*i, x),\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpoclxsd6j.rs:10:24\n\
    \   |\n10 |             Some(x) => max(*i, x),\n   |                        ^^^\
    \ not found in this scope\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::cmp::max;\n   |\n\nerror[E0308]: mismatched types\n --> /tmp/tmpoclxsd6j.rs:9:13\n\
    \  |\n8 |         *i = match i {\n  |                    - this expression has\
    \ type `&mut isize`\n9 |             None => 0,\n  |             ^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoclxsd6j.rs:10:13\n\
    \   |\n8  |         *i = match i {\n   |                    - this expression\
    \ has type `&mut isize`\n9  |             None => 0,\n10 |             Some(x)\
    \ => max(*i, x),\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n\n    for i in numbers.iter().rev()\
    \ {\n        if i > maximum {\n            maximum = i;\n        }\n    }\n\n\
    \    maximum\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvvw6ya2k.rs:9:16\n  |\n9 |\
    \         if i > maximum {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found `isize`\n  |                help:\
    \ consider borrowing here: `&maximum`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpvvw6ya2k.rs:10:23\n   |\n6  |     let mut maximum = numbers[0];\n  \
    \ |                       ---------- expected due to this value\n...\n10 |   \
    \          maximum = i;\n   |                       ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     maximum = *i;\n   |                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvvw6ya2k.rs:14:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n14 |     maximum\n   |     ^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers == vec![] {\n        return vec![];\n    }\n\
    \    let mut maxs = vec![];\n    let mut prev_max = numbers[0];\n    for i in\
    \ 1..numbers.len() {\n        if numbers[i] > prev_max {\n            prev_max\
    \ = numbers[i];\n            maxs.push(prev_max);\n        }\n    }\n    return\
    \ maxs;\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmppwympvvn.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() == 0 {\n        return vec![];\n    }\n\
    \n    let mut max_so_far: Option<isize> = None;\n    let mut min_so_far: Option<isize>\
    \ = None;\n    for i in numbers {\n        if max_so_far.is_none() {\n       \
    \     max_so_far = Some(i);\n            min_so_far = Some(i);\n        } else\
    \ if i < max_so_far.unwrap() {\n            max_so_far = Some(i);\n        } else\
    \ if i < min_so_far.unwrap() {\n            min_so_far = Some(i);\n        } else\
    \ {\n            break;\n        }\n    }\n\n    if min_so_far.is_none() {\n \
    \       return vec![];\n    }\n    let mut min_so_far_iterator = min_so_far.unwrap();\n\
    \    for i in numbers.iter().rev() {\n        if i < min_so_far_iterator {\n \
    \           return vec![];\n        }\n        min_so_far_iterator = i;\n    }\n\
    \    if min_so_far_iterator == max_so_far.unwrap() {\n        return vec![];\n\
    \    }\n    max_so_far.unwrap().saturating_sub(min_so_far_iterator).clone()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmng2e6_7.rs:30:16\n   |\n\
    30 |         if i < min_so_far_iterator {\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \   |                |\n   |                expected `&isize`, found `isize`\n\
    \   |                help: consider borrowing here: `&min_so_far_iterator`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmng2e6_7.rs:33:31\n   |\n28 |  \
    \   let mut min_so_far_iterator = min_so_far.unwrap();\n   |                 \
    \                  ------------------- expected due to this value\n...\n33 | \
    \        min_so_far_iterator = i;\n   |                               ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    33 |         min_so_far_iterator = *i;\n   |                               +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmng2e6_7.rs:38:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n38 |     max_so_far.unwrap().saturating_sub(min_so_far_iterator).clone()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_idx = 0;\n    let mut max_val = numbers[0];\n\
    \    for i in numbers {\n        if i > max_val {\n            max_val = i;\n\
    \            max_idx = i;\n        }\n    }\n    let mut ret_val = Vec::new();\n\
    \    for i in 1..max_idx {\n        ret_val.push(i);\n    }\n    ret_val\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp673tupor.rs:7:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut max_index = 0;\n \
    \   let mut running_max = 0;\n    for (i, &v) in numbers.iter().enumerate() {\n\
    \        if i == 0 {\n            max = v;\n            max_index = i;\n     \
    \       running_max = v;\n        } else {\n            if v > running_max {\n\
    \                running_max = v;\n                max_index = i;\n          \
    \  }\n        }\n    }\n    let mut new_max = vec![max];\n    for &v in new_max.iter_mut()\
    \ {\n        *v = numbers.iter().position(|&i| i == max_index).unwrap();\n   \
    \ }\n    new_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppf4g7r7y.rs:22:9\n   |\n\
    22 |     for &v in new_max.iter_mut() {\n   |         ^^    ------------------\
    \ this expression has type `Option<&mut isize>`\n   |         |\n   |        \
    \ types differ in mutability\n   |         help: you can probably remove the explicit\
    \ borrow: `v`\n   |\n   = note: expected mutable reference `&mut isize`\n    \
    \                  found reference `&_`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppf4g7r7y.rs:23:48\n   |\n23 |         *v = numbers.iter().position(|&i|\
    \ i == max_index).unwrap();\n   |                                            \
    \    ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n23\
    \ |         *v = numbers.iter().position(|&i| i == max_index.try_into().unwrap()).unwrap();\n\
    \   |                                                         ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(3)\n        .max_by(|a, b| b.partial_cmp(&a))\n\
    \        .map(|x| x.last())\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8duhzzkh.rs:7:24\n  |\n7 |\
    \         .max_by(|a, b| b.partial_cmp(&a))\n  |                        ^^^^^^^^^^^^^^^^^\
    \ expected enum `std::cmp::Ordering`, found enum `Option`\n  |\n  = note: expected\
    \ enum `std::cmp::Ordering`\n             found enum `Option<std::cmp::Ordering>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp8duhzzkh.rs:6:5\n  |\n5 |   fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |                      \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    6 | /     numbers.windows(3)\n7 | |         .max_by(|a, b| b.partial_cmp(&a))\n\
    8 | |         .map(|x| x.last())\n  | |__________________________^ expected struct\
    \ `Vec`, found enum `Option`\n  |\n  = note: expected struct `Vec<isize>`\n  \
    \             found enum `Option<Option<&isize>>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = 0;\n    let mut max_number_idx = 0;\n\
    \    for (idx, number) in numbers.iter().enumerate() {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_number_idx = idx;\n   \
    \     }\n    }\n    numbers\n        .split_at_mut(max_number_idx - 1)\n     \
    \   .map(|mut slice| slice.remove(max_number_idx))\n        .collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9chjl810.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found integer\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9chjl810.rs:10:26\n   |\n6  |     let mut max_number\
    \ = 0;\n   |                          - expected due to this value\n...\n10 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             max_number = *number;\n   |                          +\n\nerror[E0599]:\
    \ `(&mut [isize], &mut [isize])` is not an iterator\n  --> /tmp/tmp9chjl810.rs:16:10\n\
    \   |\n16 |         .map(|mut slice| slice.remove(max_number_idx))\n   |     \
    \     ^^^ `(&mut [isize], &mut [isize])` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(&mut [isize], &mut\
    \ [isize]): Iterator`\n           which is required by `&mut (&mut [isize], &mut\
    \ [isize]): Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max_value = numbers[0];\n    for i in 1..numbers.len() {\n       \
    \ let value = numbers[i];\n        if value > max_value {\n            max_value\
    \ = value;\n        }\n        result.push(max_value);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpeuu5g7rt.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > numbers.len() {\n            break;\n        }\n\
    \        result.push(numbers[i]);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1hf0tgy4.rs:8:25\n  |\n8 |\
    \         if numbers[i] > numbers.len() {\n  |                         ^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n8 |         if numbers[i]\
    \ > numbers.len().try_into().unwrap() {\n  |                                 \
    \     ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers.iter().rev()\
    \ {\n        if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp38y7znyw.rs:8:16\n  |\n8 |\
    \         if n > max {\n  |                ^^^\n  |                |\n  |    \
    \            expected `&isize`, found `isize`\n  |                help: consider\
    \ borrowing here: `&max`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp38y7znyw.rs:9:19\n\
    \  |\n6 |     let mut max = numbers[0];\n  |                   ---------- expected\
    \ due to this value\n...\n9 |             max = n;\n  |                   ^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |             max = *n;\n  |                   +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current_max = 0;\n    let mut max_indexes = Vec::new();\n\
    \    for index in numbers.iter().rev() {\n        if index > current_max {\n \
    \           max_indexes.push(index);\n            current_max = index;\n     \
    \   }\n    }\n    max_indexes.reverse();\n    max_indexes.dedup();\n    max_indexes.dedup();\n\
    \    max_indexes\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd23307h5.rs:9:20\n  |\n9 |\
    \         if index > current_max {\n  |                    ^^^^^^^^^^^\n  |  \
    \                  |\n  |                    expected `&isize`, found integer\n\
    \  |                    help: consider borrowing here: `&current_max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd23307h5.rs:11:27\n   |\n6  |     let mut current_max\
    \ = 0;\n   |                           - expected due to this value\n...\n11 |\
    \             current_max = index;\n   |                           ^^^^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             current_max = *index;\n   |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd23307h5.rs:17:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n17 |     max_indexes\n  \
    \ |     ^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(Vec::new(), |acc, x| acc.push(*x.max()))\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpbqic93b1.rs:6:62\n    |\n6   |     numbers.windows(2).fold(Vec::new(),\
    \ |acc, x| acc.push(*x.max()))\n    |                                        \
    \                      ^^^- supplied 0 arguments\n    |                      \
    \                                        |\n    |                            \
    \                                  expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbqic93b1.rs:6:59\n\
    \  |\n6 |     numbers.windows(2).fold(Vec::new(), |acc, x| acc.push(*x.max()))\n\
    \  |                                                           ^^^^^^^^ expected\
    \ `isize`, found slice `[isize]`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbqic93b1.rs:6:50\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |           \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n6 |     numbers.windows(2).fold(Vec::new(), |acc, x| acc.push(*x.max()))\n\
    \  |                                                  ^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n    \
    \      found unit type `()`\nnote: method `push` modifies its receiver in-place\n\
    \ --> /tmp/tmpbqic93b1.rs:6:54\n  |\n6 |     numbers.windows(2).fold(Vec::new(),\
    \ |acc, x| acc.push(*x.max()))\n  |                                          \
    \        --- ^^^^ this call modifies `acc` in-place\n  |                     \
    \                             |\n  |                                         \
    \         you probably want to use this value after calling the method...\n  =\
    \ note: ...instead of the `()` output of method `push`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_idx = numbers[0];\n    let mut max_number =\
    \ numbers[0];\n    for number in numbers.iter() {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_idx = number;\n       \
    \ }\n    }\n    let mut rolling_max_vec = Vec::new();\n    for idx in 1..numbers.len()\
    \ {\n        rolling_max_vec.push(max_idx);\n        max_idx = numbers[(idx -\
    \ 1) % numbers.len()];\n    }\n    rolling_max_vec\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpds6chdk0.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpds6chdk0.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpds6chdk0.rs:11:23\n\
    \   |\n6  |     let mut max_idx = numbers[0];\n   |                       ----------\
    \ expected due to this value\n...\n11 |             max_idx = number;\n   |  \
    \                     ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             max_idx = *number;\n   |  \
    \                     +\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max: Vec<isize> = vec![];\n\n    let mut\
    \ min_number = numbers[0];\n\n    for i in numbers.iter_mut() {\n        if *i\
    \ <= min_number {\n            *i = min_number;\n        }\n        else {\n \
    \           rolling_max.push(*i);\n            min_number = *i;\n        }\n \
    \   }\n\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpzpnsbgxf.rs:10:14\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                ------- help: consider changing\
    \ this to be mutable: `mut numbers`\n...\n10 |     for i in numbers.iter_mut()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in numbers.into_iter().rev()\
    \ {\n        let mut rolling_max = i;\n        for j in numbers {\n          \
    \  if i != j && rolling_max < j {\n                rolling_max = j;\n        \
    \    }\n        }\n        result.push(rolling_max);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmph9ox18zf.rs:9:18\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n6   |     let mut result = Vec::new();\n\
    7   |     for i in numbers.into_iter().rev() {\n    |                      -----------\
    \ `numbers` moved due to this method call\n8   |         let mut rolling_max =\
    \ i;\n9   |         for j in numbers {\n    |                  ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_elements = vec![numbers[0]];\n    for element\
    \ in numbers.iter().rev() {\n        max_elements.append(max::<isize>(max_elements.last().unwrap(),\
    \ element));\n    }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpgamg261x.rs:8:29\n\
    \  |\n8 |         max_elements.append(max::<isize>(max_elements.last().unwrap(),\
    \ element));\n  |                             ^^^ not found in this scope\n  |\n\
    help: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .max_by_key(|number| number)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<&[isize]>` is not an iterator\n   --> /tmp/tmpfieted1i.rs:8:10\n\
    \    |\n8   |           .collect()\n    |            ^^^^^^^ `Option<&[isize]>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<&[isize]>: Iterator`\n            which is required by `&mut\
    \ Option<&[isize]>: Iterator`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[0];\n    for number in numbers.iter()\
    \ {\n        if number > rolling_max {\n            rolling_max = number;\n  \
    \      }\n    }\n    vec![rolling_max]\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgz1lk_ce.rs:8:21\n  |\n8 |\
    \         if number > rolling_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&rolling_max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpgz1lk_ce.rs:9:27\n  |\n6 |     let mut rolling_max\
    \ = numbers[0];\n  |                           ---------- expected due to this\
    \ value\n...\n9 |             rolling_max = number;\n  |                     \
    \      ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             rolling_max = *number;\n  |               \
    \            +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current = Vec::new();\n    for &n in numbers {\n\
    \        current = current.push(n);\n        if current > 1 {\n            current\
    \ -= 1;\n        } else {\n            break;\n        }\n    }\n    current\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp87lw0mhg.rs:7:9\n  |\n7 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp87lw0mhg.rs:8:19\n  |\n6 |     let mut current\
    \ = Vec::new();\n  |                       ---------- expected due to this value\n\
    7 |     for &n in numbers {\n8 |         current = current.push(n);\n  |     \
    \              ^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |\n  = note:\
    \ expected struct `Vec<_>`\n          found unit type `()`\nnote: method `push`\
    \ modifies its receiver in-place\n --> /tmp/tmp87lw0mhg.rs:8:27\n  |\n8 |    \
    \     current = current.push(n);\n  |                   ------- ^^^^ this call\
    \ modifies `current` in-place\n  |                   |\n  |                  \
    \ you probably want to use this value after calling the method...\n  = note: ...instead\
    \ of the `()` output of method `push`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp87lw0mhg.rs:9:22\n  |\n9 |         if current > 1 {\n  |           \
    \           ^ expected struct `Vec`, found integer\n  |\n  = note: expected struct\
    \ `Vec<_>`\n               found type `{integer}`\n\nerror[E0368]: binary assignment\
    \ operation `-=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmp87lw0mhg.rs:10:13\n\
    \   |\n10 |             current -= 1;\n   |             -------^^^^^\n   |   \
    \          |\n   |             cannot use `-=` on type `Vec<_>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(0, |max, numbers| max if max ==\
    \ numbers.max() else max)\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: missing condition for `if` expression\n --> /tmp/tmpmadyr94a.rs:6:53\n\
    \  |\n6 |     numbers.windows(2).fold(0, |max, numbers| max if max == numbers.max()\
    \ else max)\n  |                                                     ^ expected\
    \ if condition here\n\nerror: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`,\
    \ or an operator, found keyword `if`\n --> /tmp/tmpmadyr94a.rs:6:51\n  |\n6 |\
    \     numbers.windows(2).fold(0, |max, numbers| max if max == numbers.max() else\
    \ max)\n  |                                                   ^^ expected one\
    \ of 8 possible tokens\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmadyr94a.rs:6:29\n\
    \  |\n6 |     numbers.windows(2).fold(0, |max, numbers| max if max == numbers.max()\
    \ else max)\n  |                             ^ expected struct `Vec`, found integer\n\
    \  |\n  = note: expected struct `Vec<isize>`\n               found type `{integer}`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut counter = numbers.len() as i32;\n    let mut max\
    \ = numbers[0] as isize;\n    numbers.iter().skip(1).for_each(|n|{\n        if\
    \ *n < max {\n            max = *n;\n        }\n        counter += 1;\n    });\n\
    \    vec![max; counter]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprvv9d1wt.rs:14:15\n   |\n\
    14 |     vec![max; counter]\n   |               ^^^^^^^ expected `usize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |     vec![max; counter.try_into().unwrap()]\n \
    \  |                      ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    for n in numbers.iter().rev()\
    \ {\n        result = if n > result.last() {\n            result.append(n);\n\
    \        } else {\n            result\n        };\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr6zju_3b.rs:8:25\n  |\n8 |\
    \         result = if n > result.last() {\n  |                         ^^^^^^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpr6zju_3b.rs:9:27\n  |\n9 |             result.append(n);\n  |  \
    \                         ^ types differ in mutability\n  |\n  = note: expected\
    \ mutable reference `&mut Vec<isize>`\n                     found reference `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr6zju_3b.rs:8:39\n   |\n8  | \
    \          result = if n > result.last() {\n   |  _______________________________________^\n\
    9  | |             result.append(n);\n10 | |         } else {\n   | |_________^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_num = numbers[0];\n\
    \    let mut i = 1;\n    while i < numbers.len() {\n        if numbers[i] == max_num\
    \ {\n            result.push(numbers[i]);\n        } else {\n            result.push(max_num);\n\
    \        }\n        max_num = numbers[i];\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp2ovpd85o.rs:7:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 0
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    let mut max_element = 0;\n \
    \   for number in numbers {\n        if number > max_element {\n            max_element\
    \ = number;\n        }\n        res.push(max_element);\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max: Vec<isize> = vec![0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n == max {\n         \
    \   rolling_max.push(max);\n            rolling_max.push(max - n);\n        }\
    \ else {\n            max = n;\n            rolling_max.push(max);\n         \
    \   rolling_max.push(n - max);\n        }\n    }\n    rolling_max\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpevkb_se_.rs:7:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).max_by_key(|num| num).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<&[isize]>` is not an iterator\n   --> /tmp/tmpvwmad2up.rs:6:46\n\
    \    |\n6   |       numbers.windows(2).max_by_key(|num| num).collect::<Vec<_>>()\n\
    \    |                                                ^^^^^^^ `Option<&[isize]>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<&[isize]>: Iterator`\n            which is required by `&mut\
    \ Option<&[isize]>: Iterator`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0] as isize;\n    let mut\
    \ i = 0;\n    while i < numbers.len() {\n        max_so_far = numbers[i] > max_so_far\
    \ ? numbers[i] : max_so_far;\n        i += 1;\n    }\n    max_so_far\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `numbers`\n\
    \ --> /tmp/tmpiq8_7vwo.rs:9:48\n  |\n9 |         max_so_far = numbers[i] > max_so_far\
    \ ? numbers[i] : max_so_far;\n  |                                            \
    \    ^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiq8_7vwo.rs:12:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n12 |     max_so_far\n   |\
    \     ^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for number in numbers.iter()\
    \ {\n        if number > result.last_mut().unwrap() {\n            result.push(number);\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprx6q_e36.rs:10:25\n   |\n\
    10 |             result.push(number);\n   |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             result.push(*number);\n   |                         +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = numbers[0];\n    for &n in &numbers {\n   \
    \     if *n > m {\n            m = *n;\n        }\n    }\n    vec![m]\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpwhda_k5c.rs:8:12\n\
    \  |\n8 |         if *n > m {\n  |            ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n --> /tmp/tmpwhda_k5c.rs:9:17\n  |\n9 |            \
    \ m = *n;\n  |                 ^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = Vec::<isize>::new();\n    let n = numbers.len();\n\
    \    let mut count = 0;\n    let mut min_number = numbers[0];\n    for v in numbers\
    \ {\n        if v > min_number {\n            count = count + 1;\n           \
    \ min_number = v;\n        }\n        if count == n {\n            vec.push(min_number);\n\
    \            break;\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmproxv690n.rs:9:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows().max_by_key(|&a| a).collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpdy0cscgg.rs:6:13\n    |\n6   |     numbers.windows().max_by_key(|&a|\
    \ a).collect::<Vec<isize>>()\n    |             ^^^^^^^- supplied 0 arguments\n\
    \    |             |\n    |             expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0599]: `Option<&[isize]>` is not an iterator\n\
    \   --> /tmp/tmpdy0cscgg.rs:6:42\n    |\n6   |       numbers.windows().max_by_key(|&a|\
    \ a).collect::<Vec<isize>>()\n    |                                          \
    \  ^^^^^^^ `Option<&[isize]>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<&[isize]>: Iterator`\n\
    \            which is required by `&mut Option<&[isize]>: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for n in numbers {\n        if n >= max {\n            max = n;\n        \
    \    max_idx = 1;\n        } else {\n            max_idx = max_idx + 1;\n    \
    \    }\n    }\n    let mut result = vec![max];\n    if max_idx > 2 {\n       \
    \ result.append(numbers[max_idx - 2]);\n        result.append(numbers[max_idx\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbtxtfvya.rs:18:23\n   |\n\
    18 |         result.append(numbers[max_idx - 2]);\n   |                      \
    \ ^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note:\
    \ expected mutable reference `&mut Vec<isize>`\n                           found\
    \ type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbtxtfvya.rs:19:23\n\
    \   |\n19 |         result.append(numbers[max_idx - 1]);\n   |               \
    \        ^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `isize`\n   |\n\
    \   = note: expected mutable reference `&mut Vec<isize>`\n                   \
    \        found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(3).filter(|v| *v > numbers[2..]).fold(Vec::new(),\
    \ |mut vec,\n                                                                \
    \             &mut i| {\n        vec.push(*i);\n        vec\n    })\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpedl2kovn.rs:6:40\n  |\n6 |\
    \     numbers.windows(3).filter(|v| *v > numbers[2..]).fold(Vec::new(), |mut vec,\n\
    \  |                                        ^^^^^^^^^^^^\n  |                \
    \                        |\n  |                                        expected\
    \ `&[isize]`, found slice `[isize]`\n  |                                     \
    \   help: consider borrowing here: `&numbers[2..]`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpedl2kovn.rs:7:78\n  |\n7 | ...                   &mut i|\
    \ {\n  |                       ^^^^^--\n  |                       |    |\n  |\
    \                       |    expected due to this\n  |                       types\
    \ differ in mutability\n  |                       help: did you mean `i`: `&&[isize]`\n\
    \  |\n  = note:      expected reference `&[isize]`\n          found mutable reference\
    \ `&mut _`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    for n in numbers {\n    \
    \    if result.len() >= n {\n            break;\n        }\n        result.push(n);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp78ueh7x7.rs:8:28\n  |\n8 |\
    \         if result.len() >= n {\n  |                            ^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n8 |         if result.len() >= n.try_into().unwrap()\
    \ {\n  |                             ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = numbers.iter().min().unwrap();\n  \
    \  let mut max_value = numbers.iter().max().unwrap();\n    for number in numbers\
    \ {\n        if number < min_value {\n            min_value = number;\n      \
    \  }\n        if number > max_value {\n            max_value = number;\n     \
    \   }\n    }\n    let mut result = Vec::new();\n    for number in numbers {\n\
    \        if number <= max_value {\n            result.push(number);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpba2os9n_.rs:9:21\n  |\n9 |\
    \         if number < min_value {\n  |                     ^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |         if number < *min_value {\n  |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpba2os9n_.rs:10:25\n   |\n6  |     let mut min_value\
    \ = numbers.iter().min().unwrap();\n   |                         -----------------------------\
    \ expected due to this value\n...\n10 |             min_value = number;\n   |\
    \                         ^^^^^^\n   |                         |\n   |       \
    \                  expected `&isize`, found `isize`\n   |                    \
    \     help: consider borrowing here: `&number`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpba2os9n_.rs:12:21\n   |\n12 |         if number > max_value {\n\
    \   |                     ^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n12 |         if number > *max_value\
    \ {\n   |                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpba2os9n_.rs:13:25\n\
    \   |\n7  |     let mut max_value = numbers.iter().max().unwrap();\n   |     \
    \                    ----------------------------- expected due to this value\n\
    ...\n13 |             max_value = number;\n   |                         ^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpba2os9n_.rs:18:22\n   |\n18 |\
    \         if number <= max_value {\n   |                      ^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    18 |         if number <= *max_value {\n   |                      +\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = numbers.first().unwrap();\n    let\
    \ mut max_value = min_value;\n    for number in numbers {\n        if number >\
    \ max_value {\n            max_value = number;\n        }\n    }\n    let mut\
    \ result: Vec<isize> = vec![];\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        } else {\n       \
    \     result.push(max_value);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8zghozqr.rs:9:21\n  |\n9 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |         if number > *max_value {\n  |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8zghozqr.rs:10:25\n   |\n7  |     let mut max_value\
    \ = min_value;\n   |                         --------- expected due to this value\n\
    ...\n10 |             max_value = number;\n   |                         ^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8zghozqr.rs:15:22\n   |\n15 |\
    \         if number == max_value {\n   |                      ^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    15 |         if number == *max_value {\n   |                      +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8zghozqr.rs:18:25\n   |\n18 |             result.push(max_value);\n\
    \   |                         ^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n18 |             result.push(*max_value);\n\
    \   |                         +\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n  \
    \  for n in numbers {\n        sum += n;\n        if sum < n {\n            break;\n\
    \        }\n        result.push(n);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpsmgw507h.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_index = 0;\n\
    \    for number in numbers {\n        max_index = number;\n        result.push(number);\n\
    \        if number == max_index {\n            break;\n        }\n    }\n\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmprt2p2hcl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut current: isize =\
    \ 0;\n    for n in numbers {\n        if n == current {\n            result.push(n);\n\
    \        } else {\n            current = n;\n            result.push(current);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp2xu7x_7h.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut last_max_value = 0;\n    let mut running_max =\
    \ numbers[0];\n    for value in numbers {\n        last_max_value = running_max;\n\
    \        running_max = value;\n    }\n    last_max_value\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvujftjyy.rs:12:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n12 |     last_max_value\n   |     ^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ `isize`\n   |\n   = note: expected struct `Vec<isize>`\n                found\
    \ type `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .map(|window| window.iter().max())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `Option<&isize>`\n    --> /tmp/tmp1rhbfgu5.rs:8:10\n \
    \    |\n8    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=Option<&isize>>`\n     |\n  \
    \   = help: the trait `FromIterator<Option<&isize>>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > rolling_max {\n            rolling_max = number;\n  \
    \      }\n    }\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbxi9lhwc.rs:8:21\n  |\n8 |\
    \         if number > rolling_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&rolling_max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpbxi9lhwc.rs:9:27\n  |\n6 |     let mut rolling_max\
    \ = numbers[0];\n  |                           ---------- expected due to this\
    \ value\n...\n9 |             rolling_max = number;\n  |                     \
    \      ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             rolling_max = *number;\n  |               \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbxi9lhwc.rs:12:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n12 |     rolling_max\n   |     ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut current_max: isize\
    \ = numbers[0];\n\n    for n in numbers {\n        if n > current_max {\n    \
    \        current_max = n;\n        }\n        else {\n            current_max\
    \ = max;\n        }\n        max = n;\n    }\n\n    vec![current_max]\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpsmj5z_0a.rs:7:34

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    for num in numbers.iter().rev()\
    \ {\n        if num > max_so_far {\n            max_so_far = num;\n        }\n\
    \    }\n    numbers + vec![max_so_far]\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcb6h_6_v.rs:8:18\n  |\n8 |\
    \         if num > max_so_far {\n  |                  ^^^^^^^^^^\n  |        \
    \          |\n  |                  expected `&isize`, found `isize`\n  |     \
    \             help: consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcb6h_6_v.rs:9:26\n  |\n6 |     let mut max_so_far = numbers[0];\n\
    \  |                          ---------- expected due to this value\n...\n9 |\
    \             max_so_far = num;\n  |                          ^^^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \        max_so_far = *num;\n  |                          +\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpcb6h_6_v.rs:12:13\n   |\n12\
    \ |     numbers + vec![max_so_far]\n   |     ------- ^ ---------------- Vec<isize>\n\
    \   |     |\n   |     Vec<isize>\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .map(|numbers|\n          \
    \  numbers\n                .iter()\n                .max_by(|a, b| a.partial_cmp(&b).unwrap().reverse())\n\
    \                .unwrap()\n                .cloned()\n                .collect::<Vec<_>>()\n\
    \                .iter()\n                .map(|n| n.checked_add(1))\n       \
    \         .collect::<Vec<_>>()\n        )\n        .flatten()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `&isize` is not an iterator\n  --> /tmp/tmp1owlt3eo.rs:12:18\n\
    \   |\n12 |                 .cloned()\n   |                  ^^^^^^ `&isize` is\
    \ not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `&isize: Iterator`\n           which is required by `&mut &isize:\
    \ Iterator`\n           `isize: Iterator`\n           which is required by `&mut\
    \ isize: Iterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .max_by(|a, b| a.partial_cmp(b).unwrap())\n\
    \        .collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<&[isize]>` is not an iterator\n   --> /tmp/tmpt5o3f34j.rs:8:10\n\
    \    |\n8   |           .collect::<Vec<isize>>()\n    |            ^^^^^^^ `Option<&[isize]>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<&[isize]>: Iterator`\n            which is required by `&mut\
    \ Option<&[isize]>: Iterator`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    let mut counter = 0;\n\
    \    for n in numbers.iter() {\n        if n == maximum {\n            counter\
    \ += 1;\n        } else {\n            if counter > 0 {\n                maximum\
    \ = n;\n                counter = 1;\n            } else {\n                counter\
    \ = 0;\n            }\n        }\n    }\n    numbers[1..].iter().cloned().collect::<Vec<_>>()\n\
    \        .iter().cloned().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmpm4w93rif.rs:9:14\n\
    \  |\n9 |         if n == maximum {\n  |              ^^ no implementation for\
    \ `&isize == isize`\n  |\n  = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm4w93rif.rs:13:27\n\
    \   |\n6  |     let mut maximum = numbers[0];\n   |                       ----------\
    \ expected due to this value\n...\n13 |                 maximum = n;\n   |   \
    \                        ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |                 maximum = *n;\n   |   \
    \                        +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() == 1 {\n        return vec![numbers[0]];\n\
    \    }\n\n    let mut maximum = numbers[0];\n\n    let mut current_maximum = maximum;\n\
    \n    for i in 1..numbers.len() {\n        if numbers[i] > current_maximum {\n\
    \            current_maximum = numbers[i];\n        }\n    }\n\n    let mut new_numbers\
    \ = vec![maximum];\n\n    for i in numbers.iter().rev() {\n        new_numbers.push(current_maximum);\n\
    \    }\n\n    new_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpmh4w6gqi.rs:10:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n\n    for i in numbers {\n  \
    \      let mut max_index: usize = 0;\n        let mut max_value: isize = 0;\n\n\
    \        for j in 0..i {\n            if j > max_index {\n                max_index\
    \ = j;\n                max_value = j;\n            } else {\n               \
    \ max_value = max_value * numbers[max_index] + numbers[j];\n            }\n  \
    \      }\n\n        result.push(max_value);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3zobmxb.rs:13:20\n   |\n\
    13 |             if j > max_index {\n   |                    ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |             if j >\
    \ max_index.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl3zobmxb.rs:14:29\n   |\n9  |\
    \         let mut max_index: usize = 0;\n   |                            -----\
    \ expected due to this type\n...\n14 |                 max_index = j;\n   |  \
    \                           ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpl3zobmxb.rs:17:62\n\
    \   |\n17 |                 max_value = max_value * numbers[max_index] + numbers[j];\n\
    \   |                                                              ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut last_max = numbers[0];\n    for num in numbers.iter().rev()\
    \ {\n        last_max = max(last_max, num);\n    }\n    numbers.iter().cloned().reverse().take(numbers.len()\
    \ - 1).iter().cloned().collect::<Vec<_>>() + vec![last_max]\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpi5d8ongc.rs:8:20\n\
    \  |\n8 |         last_max = max(last_max, num);\n  |                    ^^^ not\
    \ found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use\
    \ std::cmp::max;\n  |\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `Cloned` in the current scope\n  --> /tmp/tmpi5d8ongc.rs:10:29\n   |\n10 | \
    \    numbers.iter().cloned().reverse().take(numbers.len() - 1).iter().cloned().collect::<Vec<_>>()\
    \ + vec![last_max]\n   |                             ^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current_max = numbers[0];\n\n    for n in numbers[1..]\
    \ {\n        if n >= current_max {\n            current_max = n;\n        }\n\
    \    }\n\n    numbers.drain(1..).push(current_max)\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmp3dlvq61n.rs:8:14\n  |\n8 |     for n in numbers[1..]\
    \ {\n  |              ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \  |\n  = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n  |\n8 |     for n in &numbers[1..]\
    \ {\n  |              +\n8 |     for n in &mut numbers[1..] {\n  |           \
    \   ++++\n\nerror[E0277]: `[isize]` is not an iterator\n --> /tmp/tmp3dlvq61n.rs:8:14\n\
    \  |\n8 |     for n in numbers[1..] {\n  |              ^^^^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n  |\n  = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \  |\n8 |     for n in &numbers[1..] {\n  |              +\n8 |     for n in &mut\
    \ numbers[1..] {\n  |              ++++\n\nerror[E0599]: no method named `push`\
    \ found for struct `std::vec::Drain` in the current scope\n  --> /tmp/tmp3dlvq61n.rs:14:24\n\
    \   |\n14 |     numbers.drain(1..).push(current_max)\n   |                   \
    \     ^^^^ method not found in `std::vec::Drain<'_, isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_num: isize = 0;\n    let mut max_nums: Vec<isize>\
    \ = Vec::new();\n    for i in numbers {\n        if i > max_num {\n          \
    \  max_num = i;\n        } else {\n            max_nums.push(i);\n        }\n\
    \    }\n    max_nums\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp17ptoutk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut running_max: isize = 0;\n    let mut running_max_index:\
    \ usize = 0;\n    let mut max_index: usize = 0;\n    let mut max_val: isize =\
    \ numbers[0];\n\n    for num in numbers.iter().rev() {\n        if running_max\
    \ < num {\n            running_max = num;\n        }\n        if running_max ==\
    \ num {\n            running_max_index = max_index;\n        }\n        if running_max\
    \ == max_val {\n            max_index = max_index - 1;\n        }\n        running_max\
    \ = running_max - num;\n    }\n    Vec::from_iter(max_val..max_index).reverse()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_rlln84z.rs:12:26\n   |\n\
    12 |         if running_max < num {\n   |                          ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         if running_max < *num {\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_rlln84z.rs:13:27\n   |\n6  |     let mut running_max:\
    \ isize = 0;\n   |                          ----- expected due to this type\n\
    ...\n13 |             running_max = num;\n   |                           ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |             running_max = *num;\n   |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_rlln84z.rs:15:27\n   |\n15 |         if running_max\
    \ == num {\n   |                           ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         if running_max\
    \ == *num {\n   |                           +\n\nerror[E0599]: no function or\
    \ associated item named `from_iter` found for struct `Vec<_, _>` in the current\
    \ scope\n  --> /tmp/tmp_rlln84z.rs:23:10\n   |\n23 |     Vec::from_iter(max_val..max_index).reverse()\n\
    \   |          ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n\
    \   |\n   = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_rlln84z.rs:23:29\n   |\n23 |     Vec::from_iter(max_val..max_index).reverse()\n\
    \   |                             ^^^^^^^^^ expected `isize`, found `usize`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for n in numbers {\n\
    \        if n > maximum {\n            maximum = n;\n        }\n    }\n    vec![maximum]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp1ayzthcn.rs:6:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max: Vec<isize> = Vec::new();\n    let\
    \ mut current_max = numbers[0];\n\n    for x in numbers {\n        if x == current_max\
    \ {\n            rolling_max.push(x);\n        } else {\n            rolling_max.push(current_max);\n\
    \            current_max = x;\n        }\n    }\n    rolling_max\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpbapo4cm3.rs:7:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_index = numbers[0];\n    let mut max_value\
    \ = numbers[0];\n    for x in numbers.iter().skip(1) {\n        if x > max_value\
    \ {\n            max_value = x;\n            max_index = x;\n        }\n    }\n\
    \    if max_value == numbers[0] {\n        max_index = numbers[0];\n    }\n  \
    \  if max_index != numbers.len() - 1 {\n        Vec::from_iter(numbers.iter().take(max_index\
    \ + 1).cloned())\n    } else {\n        Vec::new()\n    }\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmper82i5xs.rs:9:16\n  |\n9 |\
    \         if x > max_value {\n  |                ^^^^^^^^^\n  |              \
    \  |\n  |                expected `&isize`, found `isize`\n  |               \
    \ help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmper82i5xs.rs:10:25\n   |\n7  |     let mut max_value = numbers[0];\n\
    \   |                         ---------- expected due to this value\n...\n10 |\
    \             max_value = x;\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \           max_value = *x;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmper82i5xs.rs:11:25\n   |\n6  |     let mut max_index = numbers[0];\n\
    \   |                         ---------- expected due to this value\n...\n11 |\
    \             max_index = x;\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |  \
    \           max_index = *x;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmper82i5xs.rs:17:21\n   |\n17 |     if max_index != numbers.len()\
    \ - 1 {\n   |                     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     if max_index != (numbers.len() - 1).try_into().unwrap()\
    \ {\n   |                     +                 +++++++++++++++++++++\n\nerror[E0599]:\
    \ no function or associated item named `from_iter` found for struct `Vec<_, _>`\
    \ in the current scope\n  --> /tmp/tmper82i5xs.rs:18:14\n   |\n18 |         Vec::from_iter(numbers.iter().take(max_index\
    \ + 1).cloned())\n   |              ^^^^^^^^^ function or associated item not\
    \ found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if\
    \ the trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmper82i5xs.rs:18:44\n   |\n18"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max_roll: isize = 0;\n    let mut i = 1;\n    while i < numbers.len()\
    \ {\n        if numbers[i] > numbers[i - 1] {\n            result.push(numbers[i]);\n\
    \            max_roll = i;\n            i += 1;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    if max_roll != i {\n        result.push(numbers[max_roll]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp82hhvcfg.rs:12:24\n   |\n\
    7  |     let mut max_roll: isize = 0;\n   |                       ----- expected\
    \ due to this type\n...\n12 |             max_roll = i;\n   |                \
    \        ^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp82hhvcfg.rs:18:20\n   |\n18 |     if max_roll != i {\n   |    \
    \                ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     if max_roll != i.try_into().unwrap() {\n   |                     ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp82hhvcfg.rs:19:21\n\
    \   |\n19 |         result.push(numbers[max_roll]);\n   |                    \
    \ ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut pos = 0;\n    for\
    \ num in numbers {\n        while pos < num {\n            result.push(numbers[pos]);\n\
    \            pos += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7d41w2ms.rs:10:25\n\
    \   |\n10 |             result.push(numbers[pos]);\n   |                     \
    \    ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_idx: usize = 0;\n    let mut max_element: isize\
    \ = 0;\n\n    for num in numbers {\n        if num > max_element {\n         \
    \   max_element = num;\n            max_idx = num;\n        }\n    }\n\n    numbers[max_idx]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpheeroypa.rs:12:23\n   |\n\
    6  |     let mut max_idx: usize = 0;\n   |                      ----- expected\
    \ due to this type\n...\n12 |             max_idx = num;\n   |               \
    \        ^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpheeroypa.rs:16:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n16 |     numbers[max_idx]\n   |  \
    \   ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .windows(2)\n        .fold(Vec::new(),\
    \ |acc, (max, _)| {\n            acc.push((*max));\n            acc\n        })\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n --> /tmp/tmpnd24g0xy.rs:9:22\n\
    \  |\n9 |             acc.push((*max));\n  |                      ^    ^\n  |\n\
    \  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \  |\n9 -             acc.push((*max));\n9 +             acc.push(*max);\n  |\
    \ \n\nerror[E0308]: mismatched types\n --> /tmp/tmpnd24g0xy.rs:8:33\n  |\n8 |\
    \         .fold(Vec::new(), |acc, (max, _)| {\n  |                           \
    \      ^^^^^^^-\n  |                                 |      |\n  |           \
    \                      |      expected due to this\n  |                      \
    \           expected slice `[isize]`, found tuple\n  |\n  = note: expected slice\
    \ `[isize]`\n             found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_slice = numbers.to_vec();\n    numbers_slice.sort();\n\
    \    let mut current_max = 0;\n    let mut current_max_index = 0;\n    let mut\
    \ result = vec![];\n    for i in 0..numbers_slice.len() {\n        match numbers_slice[i]\
    \ {\n            x if x == current_max => {\n                current_max_index\
    \ += 1;\n            }\n            x if x > current_max => {\n              \
    \  current_max = x;\n                current_max_index = i;\n            }\n \
    \           _ => {\n                current_max = numbers_slice[i];\n        \
    \        current_max_index = 0;\n            }\n        }\n        result.push(current_max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpz2i_g4hz.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).max()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph72i4xx5.rs:6:5\n  |\n5 |\
    \ fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |                   \
    \                     ---------- expected `Vec<isize>` because of return type\n\
    6 |     numbers.windows(2).max()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found enum `Option`\n  |\n  = note: expected struct `Vec<isize>`\n  \
    \             found enum `Option<&[isize]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(1).enumerate().fold(Vec::new(), |mut acc,\
    \ (n, i)| {\n        if i > n {\n            acc\n        } else {\n         \
    \   acc.push(i.max(n as isize).unwrap_or(0))\n        }\n        acc\n    })\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsol826hb.rs:7:16\n  |\n7 |\
    \         if i > n {\n  |                ^ expected `&[isize]`, found `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsol826hb.rs:8:13\n   |\n7  | /\
    \         if i > n {\n8  | |             acc\n   | |             ^^^ expected\
    \ `()`, found struct `Vec`\n9  | |         } else {\n10 | |             acc.push(i.max(n\
    \ as isize).unwrap_or(0))\n11 | |         }\n   | |_________- expected this to\
    \ be `()`\n   |\n   = note: expected unit type `()`\n                 found struct\
    \ `Vec<isize>`\nhelp: you might have meant to return this value\n   |\n8  |  \
    \           return acc;\n   |             ++++++    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsol826hb.rs:10:28\n   |\n10 |             acc.push(i.max(n\
    \ as isize).unwrap_or(0))\n   |                            ^^^^^^^^^^ expected\
    \ `&[isize]`, found `isize`\n\nerror[E0599]: no method named `unwrap_or` found\
    \ for reference `&[isize]` in the current scope\n  --> /tmp/tmpsol826hb.rs:10:40\n\
    \   |\n10 |             acc.push(i.max(n as isize).unwrap_or(0))\n   |       \
    \                                 ^^^^^^^^^ method not found in `&[isize]`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers: Vec<isize> = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if max_number\
    \ > numbers[i] {\n            max_numbers.push(max_number);\n            max_number\
    \ = numbers[i];\n        } else {\n            max_number = max_number\n     \
    \   }\n    }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpv14yv1ri.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    let mut max_vals\
    \ = Vec::new();\n    while let Some(val) = numbers.iter().max() {\n        max_vals.push(val);\n\
    \        numbers.remove(val);\n    }\n    max_vals\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppb0sz868.rs:10:24\n   |\n\
    10 |         numbers.remove(val);\n   |                        ^^^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppb0sz868.rs:12:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n12 |     max_vals\n   |     ^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(0, |acc, number| if acc > number\
    \ { acc } else { number })\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcm90zxy9.rs:6:29\n  |\n6 |\
    \     numbers.windows(2).fold(0, |acc, number| if acc > number { acc } else {\
    \ number })\n  |                             ^ expected struct `Vec`, found integer\n\
    \  |\n  = note: expected struct `Vec<isize>`\n               found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpcm90zxy9.rs:6:55\n  |\n6 |    \
    \ numbers.windows(2).fold(0, |acc, number| if acc > number { acc } else { number\
    \ })\n  |                                                       ^^^^^^- help:\
    \ try using a conversion method: `.to_vec()`\n  |                            \
    \                           |\n  |                                           \
    \            expected struct `Vec`, found `&[isize]`\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found reference `&[isize]`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcm90zxy9.rs:6:77\n  |\n6 |     numbers.windows(2).fold(0,\
    \ |acc, number| if acc > number { acc } else { number })\n  |                \
    \                                                             ^^^^^^- help: try\
    \ using a conversion method: `.to_vec()`\n  |                                \
    \                                             |\n  |                         \
    \                                                    expected struct `Vec`, found\
    \ `&[isize]`\n  |\n  = note: expected struct `Vec<isize>`\n          found reference\
    \ `&[isize]`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \    }\n    let mut result = Vec::new();\n    for i in 1..numbers.len() {\n  \
    \      if numbers[i] > max {\n            result.push(max);\n        } else {\n\
    \            result.push(numbers[i]);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpfak6ylfx.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rev = numbers.rev();\n    rev.push(0);\n    let\
    \ mut rev_numbers = rev.rev();\n    rev_numbers.sort();\n\n    while rev_numbers.len()\
    \ > 1 {\n        rev_numbers.sort_by_key(|&x| x);\n    }\n\n    rev_numbers.reverse();\n\
    \n    rev_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpjkx5bytg.rs:6:27\n\
    \    |\n6   |       let mut rev = numbers.rev();\n    |                      \
    \       ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] >= max_value {\n            max_value = numbers[i];\n\
    \        }\n    }\n    let mut max_value_rolling = 0;\n    for n in numbers {\n\
    \        if n >= max_value {\n            max_value = n;\n            max_value_rolling\
    \ += 1;\n        } else {\n            max_value = max_value - 1;\n        }\n\
    \    }\n    max_value_rolling.to_vec()\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `to_vec` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp7uwc2sd4.rs:21:23\n   |\n21 |     max_value_rolling.to_vec()\n\
    \   |                       ^^^^^^\n   |\nhelp: you must specify a type for this\
    \ binding, like `i32`\n   |\n12 |     let mut max_value_rolling: i32 = 0;\n  \
    \ |         ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n\n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_index = i;\n\
    \        }\n    }\n\n    let mut result: Vec<isize> = Vec::new();\n    for i in\
    \ 1..max_so_far_index {\n        result.push(i);\n    }\n\n    if max_so_far_index\
    \ < numbers.len() {\n        result.push(max_so_far_index);\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6knx8_89.rs:18:21\n   |\n\
    18 |         result.push(i);\n   |                     ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |         result.push(i.try_into().unwrap());\n\
    \   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6knx8_89.rs:22:21\n   |\n22 |         result.push(max_so_far_index);\n\
    \   |                     ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n \
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n22 |         result.push(max_so_far_index.try_into().unwrap());\n\
    \   |                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut cur_max: isize\
    \ = 0;\n    for (i, n) in numbers.iter().enumerate() {\n        if n >= cur_max\
    \ {\n            cur_max = n;\n            result.push(i);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8_dkqmhg.rs:9:17\n  |\n9 |\
    \         if n >= cur_max {\n  |                 ^^^^^^^\n  |                \
    \ |\n  |                 expected `&isize`, found `isize`\n  |               \
    \  help: consider borrowing here: `&cur_max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8_dkqmhg.rs:10:23\n   |\n7  |     let mut cur_max: isize = 0;\n\
    \   |                      ----- expected due to this type\n...\n10 |        \
    \     cur_max = n;\n   |                       ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             cur_max\
    \ = *n;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8_dkqmhg.rs:14:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n14 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_count = 1;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        }\
    \ else {\n            max_count += 1;\n        }\n    }\n    Vec::from(&max *\
    \ max_count)\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `Vec<_, _>: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpapikx75m.rs:15:5\n   |\n15 |     Vec::from(&max * max_count)\n\
    \   |     ^^^^^^^^^ the trait `From<isize>` is not implemented for `Vec<_, _>`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T,\
    \ A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut\
    \ [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as\
    \ From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8>\
    \ as From<&str>>\n           and 2 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut index = 0;\n    let mut max = 0;\n\n    while index\
    \ < numbers.len() {\n        let element = &numbers[index];\n        if element\
    \ > max {\n            max = element;\n        }\n        index += 1;\n    }\n\
    \n    numbers[..index].cloned()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy361xj85.rs:11:22\n   |\n\
    11 |         if element > max {\n   |                      ^^^\n   |         \
    \             |\n   |                      expected `&isize`, found integer\n\
    \   |                      help: consider borrowing here: `&max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy361xj85.rs:12:19\n   |\n7  |     let mut max\
    \ = 0;\n   |                   - expected due to this value\n...\n12 |       \
    \      max = element;\n   |                   ^^^^^^^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     max = *element;\n   |                   +\n\nerror[E0599]: `[isize]` is\
    \ not an iterator\n  --> /tmp/tmpy361xj85.rs:17:22\n   |\n17 |     numbers[..index].cloned()\n\
    \   |                      ^^^^^^ `[isize]` is not an iterator; try calling `.into_iter()`\
    \ or `.iter()`\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `[isize]: Iterator`\n           which is required by `&mut [isize]:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut max_idx: Option<usize>\
    \ = None;\n    for (idx, number) in numbers.iter().enumerate() {\n        if number\
    \ > max {\n            max_idx = Some(idx);\n            max = number;\n     \
    \   }\n    }\n    if max_idx.is_some() {\n        let max_idx = max_idx.unwrap();\n\
    \        if numbers.len() > max_idx {\n            numbers[max_idx..].iter().cloned().collect()\n\
    \        } else {\n            vec![max]\n        }\n    } else {\n        numbers\n\
    \    }\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2yk31b6f.rs:9:21\n  |\n9 |\
    \         if number > max {\n  |                     ^^^\n  |                \
    \     |\n  |                     expected `&isize`, found `isize`\n  |       \
    \              help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2yk31b6f.rs:11:19\n   |\n6  |     let mut max: isize =\
    \ 0;\n   |                  ----- expected due to this type\n...\n11 |       \
    \      max = number;\n   |                   ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             max = *number;\n\
    \   |                   +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_index = -1;\n    let mut max_value = numbers[0];\n\
    \    for i in numbers.iter() {\n        if i >= max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    vec![max_value..max_index\
    \ + 1]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf4q826jj.rs:9:17\n  |\n9 |\
    \         if i >= max_value {\n  |                 ^^^^^^^^^\n  |            \
    \     |\n  |                 expected `&isize`, found `isize`\n  |           \
    \      help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf4q826jj.rs:10:25\n   |\n7  |     let mut max_value = numbers[0];\n\
    \   |                         ---------- expected due to this value\n...\n10 |\
    \             max_value = i;\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \           max_value = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf4q826jj.rs:11:25\n   |\n6  |     let mut max_index = -1;\n\
    \   |                         -- expected due to this value\n...\n11 |       \
    \      max_index = i;\n   |                         ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |        \
    \     max_index = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf4q826jj.rs:14:10\n   |\n14 |     vec![max_value..max_index\
    \ + 1]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = Vec::new();\n    let mut min = numbers.first().unwrap();\n\
    \    for number in numbers.iter().skip(1) {\n        if number >= min {\n    \
    \        rolling_max.push(number);\n            min = number;\n        } else\
    \ {\n            rolling_max.push(number);\n            min = number;\n      \
    \  }\n    }\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph25w2di4.rs:17:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n17 |     rolling_max\n   |     ^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .max_by_key(|x| x.unwrap())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for reference `&&[isize]`\
    \ in the current scope\n --> /tmp/tmpg8c7q02f.rs:7:27\n  |\n7 |         .max_by_key(|x|\
    \ x.unwrap())\n  |                           ^^^^^^ help: there is an associated\
    \ function with a similar name: `swap`\n\nerror[E0599]: `Option<&[isize]>` is\
    \ not an iterator\n   --> /tmp/tmpg8c7q02f.rs:8:10\n    |\n8   |           .collect()\n\
    \    |            ^^^^^^^ `Option<&[isize]>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Option<&[isize]>:\
    \ Iterator`\n            which is required by `&mut Option<&[isize]>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in\
    \ 0..numbers.len() {\n        let current = numbers[i as usize];\n        let\
    \ mut best_index = i;\n        let mut best_value = current;\n        for (j)\
    \ in (i + 1)..numbers.len() {\n            let next = numbers[j as usize];\n \
    \           if next > current {\n                best_value = next;\n        \
    \        best_index = j;\n            }\n        }\n        result.push(best_value);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4, 4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmphvldbqsb.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
