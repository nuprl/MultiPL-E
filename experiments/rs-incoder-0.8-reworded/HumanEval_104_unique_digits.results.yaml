language: rs
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x.len()\
    \ == 0 || x[i] == 0 {\n            i += 1;\n            continue;\n        }\n\
    \        let mut j = i;\n        while j < x.len() && x[j] != 0 {\n          \
    \  j += 1;\n        }\n        if j > i {\n            y.push(x[i]);\n       \
    \     x = &x[i..j];\n            i += j - i + 1;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp34sh_x6a.rs:23:17\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \  ---------- expected due to this parameter type\n...\n23 |             x = &x[i..j];\n\
    \   |                 ^^^^^^^^ expected struct `Vec`, found `&[isize]`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n           found reference `&[isize]`\n\
    help: try using a conversion method\n   |\n23 |             x = (&x[i..j]).to_vec();\n\
    \   |                 +        ++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = vec![];\n    for n in x {\n        let mut v: Vec<isize> = vec![];\n\
    \        for m in n {\n            if m % 2 == 0 {\n                v.push(*m);\n\
    \            }\n        }\n        v.sort();\n        v.dedup();\n        v.push(0);\n\
    \        v = v.iter().cloned().collect();\n        if v.len() == 1 {\n       \
    \     v.push(*v[0]);\n        }\n        v.sort();\n        v.dedup();\n     \
    \   v.push(0);\n        v.dedup();\n        v.dedup();\n        v.dedup();\n \
    \       v.dedup();\n        v.dedup();\n        v = v.iter().cloned().collect();\n\
    \        v.sort();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v = v.iter().cloned().collect();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v = v.iter().cloned().collect();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v = v.iter().cloned().collect();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v = v.iter().cloned().collect();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v = v.iter().cloned().collect();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v = v.iter().cloned().collect();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.dedup();\n        v.dedup();\n\
    \        v.dedup();\n        v.dedup();\n        v.\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmputrdlixw.rs:99:3\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut v:\
    \ Vec<isize> = vec![];\n11 |     for n in x {\n   |                - this delimiter\
    \ might not be properly closed...\n...\n91 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n99 | }\n   |   ^\n\nerror: unexpected token:\
    \ `}`\n  --> /tmp/tmputrdlixw.rs:91:1\n   |\n91 | }\n   | ^\n\nerror[E0277]: `isize`\
    \ is not an iterator\n  --> /tmp/tmputrdlixw.rs:13:18\n   |\n13 |         for\
    \ m in n {\n   |                  ^ `isize` is not an iterator\n   |\n   = help:\
    \ the trait `Iterator` is not implemented for `isize`\n   = note: if you want\
    \ to iterate between `start` until a value `end`, use the exclusive range syntax\
    \ `start..end` or the inclusive range syntax `start..=end`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `isize`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmputrdlixw.rs:23:20\n   |\n\
    23 |             v.push(*v[0]);\n   |                    ^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmputrdlixw.rs:90:9\n   |\n90 |         v.\n  \
    \ |         ^ expected `()`, found struct `Vec`\n   |\n   = note: expected unit\
    \ type `()`\n                 found struct `Vec<isize>`\nhelp: you might have\
    \ meant to return this value\n   |\n90 |         return v;.\n   |         ++++++\
    \  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmputrdlixw.rs:9:36\n  |\n9\
    \ | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------    \
    \               ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().filter(|&x|\
    \ x >= 0).collect::<Vec<_>>().sorted()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmp47rzylqz.rs:10:63\n   |\n10 |     x.iter().cloned().filter(|&x|\
    \ x >= 0).collect::<Vec<_>>().sorted()\n   |                                 \
    \                              ^^^^^^ help: there is an associated function with\
    \ a similar name: `is_sorted`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = vec![];\n    let mut counter = 0;\n    for i in x {\n        if i % 10 ==\
    \ 0 {\n            counter++;\n        }\n        if counter == 0 {\n        \
    \    v.push(i);\n            counter = 1;\n        } else {\n            counter\
    \ = 0;\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp_z7uownf.rs:14:20\n\
    \   |\n14 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n14 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    14 -             counter++;\n14 +             counter += 1;\n   | \n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y: Vec<isize> = Vec::new();\n    let mut s: Vec<isize> = Vec::new();\n    for\
    \ &x in x {\n        if x % 2 == 0 {\n            s.push(&x);\n        }\n   \
    \ }\n    for x in s {\n        if x != 0 && !y.contains(&x) {\n            y.push(&x);\n\
    \        }\n    }\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb_q0ht5q.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb_q0ht5q.rs:14:20\n   |\n14 |             s.push(&x);\n   |   \
    \                 ^^ expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\nhelp: consider removing the borrow\n\
    \   |\n14 -             s.push(&x);\n14 +             s.push(x);\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb_q0ht5q.rs:19:20\n   |\n19 |             y.push(&x);\n\
    \   |                    ^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n19 -             y.push(&x);\n19 +             y.push(x);\n\
    \   | \n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = Vec::new();\n    let mut seen = Vec::new();\n    for i in x {\n      \
    \  if seen.contains(&i) {\n            continue;\n        }\n        let mut count\
    \ = 0;\n        for _ in 0..i {\n            count += 1;\n        }\n        if\
    \ count == 0 {\n            ans.push(i);\n            seen.push(i);\n        }\n\
    \    }\n    ans.sort();\n    ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpn6tcw9de.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = vec![];\n    let mut x: Vec<_> = x.into_iter().collect();\n\
    \    for y in x.iter() {\n        let mut z: Vec<_> = vec![];\n        while !z.is_empty()\
    \ {\n            let mut z = z.to_owned();\n            let d = *y;\n        \
    \    if z.is_empty() || z.get(0) < d {\n                z.push(d);\n         \
    \   } else {\n                z.pop();\n            }\n        }\n        unique_digits.push(z);\n\
    \    }\n    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpepv8a8uv.rs:17:43\n   |\n\
    17 |             if z.is_empty() || z.get(0) < d {\n   |                     \
    \                      ^ expected enum `Option`, found `isize`\n   |\n   = note:\
    \ expected enum `Option<&_>`\n              found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpepv8a8uv.rs:25:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     unique_digits\n\
    \   |     ^^^^^^^^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ {\n        if x % 2 == 0 {\n            false\n        } else {\n          \
    \  true\n        }\n    }).cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpn9bc_rzh.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // write\
    \ your code here\n    x.sort();\n    let mut res: Vec<isize> = Vec::new();\n \
    \   for &n in x {\n        if n % 2 == 0 {\n            res.push(n);\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5aytea3r.rs:13:9\n   |\n\
    13 |     for &n in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ seen = BTreeSet::new();\n    for num in x.iter() {\n        if seen.is_member(num)\
    \ {\n            continue;\n        }\n        seen.insert(num);\n    }\n    seen.into_iter().map(|x|\
    \ x.clone()).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n  -->\
    \ /tmp/tmpxpsy5q2c.rs:10:20\n   |\n10 |     let mut seen = BTreeSet::new();\n\
    \   |                    ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::BTreeSet;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = vec![];\n    for element in x {\n        if element % 2 == 0\
    \ {\n            continue;\n        }\n        let mut element1 = element / 2;\n\
    \        while element1 != 0 {\n            v.append(element1);\n            element1\
    \ /= 10;\n        }\n    }\n    v.sort_unstable();\n    v\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr_742y3h.rs:17:22\n   |\n\
    17 |             v.append(element1);\n   |                      ^^^^^^^^ expected\
    \ `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<isize>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ == 0 {\n        return x\n    }\n\n    let mut seen: HashMap<isize, bool> =\
    \ HashMap::new();\n    for i in x.iter() {\n        if let Some(k) = seen.get(&i\
    \ as isize) {\n            seen.insert(k, true);\n        } else {\n         \
    \   seen.insert(i, false);\n        }\n    }\n\n    let mut x: Vec<isize> = Vec::new();\n\
    \    let mut seen_it = seen.iter().cloned().collect::<Vec<_>>();\n    seen_it.sort_unstable();\n\
    \    for x in seen_it {\n        if !x.is_even() {\n            x.insert(0);\n\
    \        }\n        x.sort_unstable();\n        x.push(0);\n        x.sort();\n\
    \        x.pop();\n        x.reverse();\n        x.sort_unstable();\n        x.push(i);\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n        x.push(0);\n        x.sort();\n        x.pop();\n\
    \        x.reverse();\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpg75i58mv.rs:114:3\n\
    \    |\n9   | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    |         \
    \                                      - unclosed delimiter\n...\n26  |     for\
    \ x in seen_it {\n    |                      - this delimiter might not be properly\
    \ closed...\n...\n106 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n114 | }\n    |   ^\n\nerror[E0412]: cannot find type `HashMap`\
    \ in this scope\n  --> /tmp/tmpg75i58mv.rs:14:19\n   |\n14 |     let mut seen:\
    \ HashMap<isize, bool> = HashMap::new();\n   |                   ^^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpg75i58mv.rs:14:42\n   |\n14 |     let mut seen: HashMap<isize, bool>\
    \ = HashMap::new();\n   |                                          ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashMap;\n   |\n\nerror[E0425]: cannot find value `i`\
    \ in this scope\n  --> /tmp/tmpg75i58mv.rs:36:16\n   |\n36 |         x.push(i);\n\
    \   |                ^ help: a local variable with a similar name exists: `x`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpg75i58mv.rs:9:36\n  |\n9 | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror[E0606]: casting `&&isize`\
    \ as `isize` is invalid\n  --> /tmp/tmpg75i58mv.rs:16:35\n   |\n16 |         if\
    \ let Some(k) = seen.get(&i as isize) {\n   |                                \
    \   ^^^^^^^^^^^\n   |\n   = help: cast through a raw pointer first\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0412,\
    \ E0425, E0433, E0606.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for x in x {\n        if x % 2 == 0 {\n          \
    \  result.push(x);\n        }\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpvdyc7jy0.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.iter().any(|x|\
    \ x % 2 == 0) {\n        return x;\n    }\n\n    let mut x = x;\n    x.sort();\n\
    \n    loop {\n        if x.iter().any(|x| x % 2 == 0) {\n            break;\n\
    \        }\n\n        x.remove(0)\n    }\n\n    x\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3ton0uyh.rs:22:9\n   |\n\
    22 |         x.remove(0)\n   |         ^^^^^^^^^^^- help: consider using a semicolon\
    \ here: `;`\n   |         |\n   |         expected `()`, found `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut current = Vec::new();\n\n    for y in x {\n\
    \        if *y == *y {\n            continue;\n        }\n        let remainder\
    \ = rem_digits(y);\n        if remainder == 0 {\n            current\n       \
    \         .push(y)\n        } else {\n            result.push(current);\n    \
    \        current = Vec::new();\n            current.push(y);\n        }\n    }\n\
    \    if current.len() != 0 {\n        result.push(current);\n    }\n    result.sort_by(|a,\
    \ b| a.iter().cloned().collect::<Vec<isize>>().cmp(&b.iter().cloned().collect::<Vec<isize>>()).reverse());\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `rem_digits` in this scope\n  --> /tmp/tmpva1w7rwh.rs:17:25\n\
    \   |\n17 |         let remainder = rem_digits(y);\n   |                     \
    \    ^^^^^^^^^^ not found in this scope\n\nerror[E0614]: type `isize` cannot be\
    \ dereferenced\n  --> /tmp/tmpva1w7rwh.rs:14:12\n   |\n14 |         if *y == *y\
    \ {\n   |            ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpva1w7rwh.rs:14:18\n   |\n14 |         if *y == *y {\n   |     \
    \             ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpva1w7rwh.rs:31:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n31 |     result\n   |     ^^^^^^ expected `isize`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().filter(|&e|\
    \ !e.is_zero()).cloned().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvj4allco.rs:10:38\n   |\n10 |     x.iter().cloned().filter(|&e|\
    \ !e.is_zero()).cloned().collect::<Vec<_>>()\n   |                           \
    \           ^^^^^^^ method not found in `isize`\n\nerror[E0271]: type mismatch\
    \ resolving `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n  --> /tmp/tmpvj4allco.rs:10:49\n\
    \   |\n10 |     x.iter().cloned().filter(|&e| !e.is_zero()).cloned().collect::<Vec<_>>()\n\
    \   |                                                 ^^^^^^ expected reference,\
    \ found `isize`\n   |\n   = note: expected reference `&&_`\n              found\
    \ reference `&isize`\n   = note: required because of the requirements on the impl\
    \ of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant\
    \ requirement hidden\n   = note: required because of the requirements on the impl\
    \ of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpvj4allco.rs:10:30:\
    \ 10:47]>`\n\nerror[E0631]: type mismatch in closure arguments\n  --> /tmp/tmpvj4allco.rs:10:49\n\
    \   |\n10 |     x.iter().cloned().filter(|&e| !e.is_zero()).cloned().collect::<Vec<_>>()\n\
    \   |                              -----------------  ^^^^^^ expected signature\
    \ of `for<'r> fn(&'r &_) -> _`\n   |                              |\n   |    \
    \                          found signature of `for<'r> fn(&'r isize) -> _`\n \
    \  |\n   = note: required because of the requirements on the impl of `Iterator`\
    \ for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpvj4allco.rs:10:30:\
    \ 10:47]>`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpvj4allco.rs:10:30: 10:47]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpvj4allco.rs:10:58\n   |\n10 |        x.iter().cloned().filter(|&e|\
    \ !e.is_zero()).cloned().collect::<Vec<_>>()\n   |                           \
    \                                  ^^^^^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.into_iter().cloned().collect();\n    x.sort();\n    let mut\
    \ result = Vec::new();\n    for i in x.iter() {\n        match i {\n         \
    \   x if x % 2 == 0 => result.push(i),\n            _ => (),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp3zt0yhzp.rs:10:43\n     |\n10   |     let mut x: Vec<isize>\
    \ = x.into_iter().cloned().collect();\n     |                                \
    \           ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp3zt0yhzp.rs:10:52\n \
    \  |\n10 |       let mut x: Vec<isize> = x.into_iter().cloned().collect();\n \
    \  |                                                      ^^^^^^^ method cannot\
    \ be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3zt0yhzp.rs:19:5\n   |\n9  | fn\
    \ unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                         \
    \           ---------- expected `Vec<isize>` because of return type\n...\n19 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut v: Vec<isize> = vec![];\n\
    \    let mut dig = vec![0];\n    for i in x {\n        if i % 10 != 0 {\n    \
    \        dig.push(i % 10);\n            v.push(i);\n        }\n    }\n    for\
    \ i in dig.iter() {\n        for j in v.iter() {\n            if j == i {\n  \
    \              continue;\n            }\n            if j <= i {\n           \
    \     return vec![];\n            }\n        }\n    }\n    return v;\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpqcw9m_w0.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums = x.clone();\n    \n    // find all unique elements\n    let mut counts\
    \ = HashMap::new();\n    for (i, &n) in x.iter().enumerate() {\n        counts.entry(n).or_insert(0);\n\
    \    }\n    // remove them\n    for (_, n) in counts.iter().enumerate() {\n  \
    \      if n % 2 == 0 {\n            nums.remove(i);\n        }\n    }\n    \n\
    \    nums\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp2_a6cpg1.rs:13:22\n   |\n13 |     let mut counts = HashMap::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmp2_a6cpg1.rs:20:25\n   |\n\
    20 |             nums.remove(i);\n   |                         ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|x|\
    \ x.is_even()).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&&isize` in\
    \ the current scope\n  --> /tmp/tmpysx3__8z.rs:10:27\n   |\n10 |     x.iter().filter(|x|\
    \ x.is_even()).cloned().collect()\n   |                           ^^^^^^^ method\
    \ not found in `&&isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = x.to_owned();\n    let mut res = Vec::new();\n    let mut cnt = 0;\n   \
    \ for digit in x.iter() {\n        if digit % 2 == 0 {\n            cnt += 1;\n\
    \        }\n        else {\n            if cnt > 0 {\n                res.push(digit\
    \ / 2);\n            }\n            cnt = 1;\n        }\n    }\n    if cnt > 0\
    \ {\n        res.push(cnt / 2);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[16, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpb04yz2w5.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // get\
    \ all odd digits of x\n    let mut y: Vec<isize> = x.iter().filter(|x| x % 2 ==\
    \ 1).collect();\n    \n    // sort them in increasing order\n    y.sort();\n\n\
    \    // remove the even digit\n    y.remove(0);\n\n    // return the final result\n\
    \    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpprykbg2p.rs:11:51\n\
    \   |\n11 |     let mut y: Vec<isize> = x.iter().filter(|x| x % 2 == 1).collect();\n\
    \   |                                                 - ^ - {integer}\n   |  \
    \                                               |\n   |                      \
    \                           &&isize\n   |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `x`\n   |\n11 |     let mut y: Vec<isize> = x.iter().filter(|x|\
    \ *x % 2 == 1).collect();\n   |                                              \
    \   +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpprykbg2p.rs:11:61\n     |\n\
    11   |     let mut y: Vec<isize> = x.iter().filter(|x| x % 2 == 1).collect();\n\
    \     |                                                             ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = Vec::new();\n    let mut digits = x.iter().map(|x| *x % 10).collect::<Vec<usize>>();\n\
    \    let mut unique: HashSet<usize> = HashSet::new();\n    for &digit in &digits\
    \ {\n        if !unique.insert(digit).unwrap_or(false) {\n            res.push(*digit);\n\
    \        }\n    }\n    res.sort_unstable();\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmphhcy3jz0.rs:12:21\n\
    \   |\n12 |     let mut unique: HashSet<usize> = HashSet::new();\n   |       \
    \              ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmphhcy3jz0.rs:12:38\n\
    \   |\n12 |     let mut unique: HashSet<usize> = HashSet::new();\n   |       \
    \                               ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0277]:\
    \ a value of type `Vec<usize>` cannot be built from an iterator over elements\
    \ of type `isize`\n    --> /tmp/tmphhcy3jz0.rs:11:48\n     |\n11   |     let mut\
    \ digits = x.iter().map(|x| *x % 10).collect::<Vec<usize>>();\n     |        \
    \                                        ^^^^^^^ value of type `Vec<usize>` cannot\
    \ be built from `std::iter::Iterator<Item=isize>`\n     |\n     = help: the trait\
    \ `FromIterator<isize>` is not implemented for `Vec<usize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmphhcy3jz0.rs:15:22\n\
    \   |\n15 |             res.push(*digit);\n   |                      ^^^^^^\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0412, E0433, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.is_empty()\
    \ { return x; }\n    let mut n = x.len();\n    let mut v: Vec<isize> = vec![];\n\
    \    for i in 0..n {\n        if x[i] % 2 != 0 {\n            v += vec![i];\n\
    \        }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpvnclz3gi.rs:15:13\n   |\n15 |             v += vec![i];\n\
    \   |             -^^^^^^^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = x.into_iter().collect();\n    v.sort_unstable();\n    let mut\
    \ v: Vec<isize> = v.into_iter().collect();\n    let mut res: Vec<isize> = Vec::new();\n\
    \    v.iter().filter(|&x| x % 2 == 0).cloned().for_each(|x|{\n        if !res.contains(&x)\
    \ {\n            res.push(x);\n        }\n    });\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp8rz9aary.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y: Vec<isize> = Vec::new();\n    for i in x {\n        let mut z: usize = 0;\n\
    \        while z < i {\n            z += 10;\n        }\n        y.push(z);\n\
    \    }\n    y.sort_unstable();\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1mni30c.rs:13:19\n   |\n\
    13 |         while z < i {\n   |                   ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         while z < i.try_into().unwrap() {\n  \
    \ |                    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn1mni30c.rs:16:16\n   |\n16 |         y.push(z);\n   |        \
    \        ^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n16 |     \
    \    y.push(z.try_into().unwrap());\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().enumerate()\n\
    \        .map(|(i, el)| (i%2 == 0, el))\n        .filter(|(_, el)| el.is_even())\n\
    \        .map(|(_, el)| el)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpjbxmsrvn.rs:12:30\n   |\n12 |         .filter(|(_,\
    \ el)| el.is_even())\n   |                              ^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter_map(|x|\
    \ x.digit()).cloned().collect::<Vec<isize>>().sorted()\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp9_nemgbq.rs:10:31\n   |\n10 |     x.iter().filter_map(|x|\
    \ x.digit()).cloned().collect::<Vec<isize>>().sorted()\n   |                 \
    \              ^^^^^ method not found in `&isize`\n\nerror[E0599]: no method named\
    \ `sorted` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp9_nemgbq.rs:10:73\n\
    \   |\n10 |     x.iter().filter_map(|x| x.digit()).cloned().collect::<Vec<isize>>().sorted()\n\
    \   |                                                                        \
    \ ^^^^^^ help: there is an associated function with a similar name: `is_sorted`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x.is_odd()).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpdtp0oul1.rs:10:28\n   |\n10 |     x.iter().filter(|&x|\
    \ x.is_odd()).collect()\n   |                            ^^^^^^ method not found\
    \ in `&isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpdtp0oul1.rs:10:38\n\
    \     |\n10   |     x.iter().filter(|&x| x.is_odd()).collect()\n     |       \
    \                               ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = x.clone();\n    let mut seen = HashSet::new();\n    v.sort();\n\n    let\
    \ mut unique = Vec::new();\n    for i in v {\n        if !seen.contains(&i) {\n\
    \            unique.push(i);\n            seen.insert(i);\n        }\n    }\n\n\
    \    unique\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpxcem8rfj.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: -1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digit = x.len() as usize;\n    let mut x =\
    \ x.iter().cloned().collect::<Vec<_>>();\n    loop {\n        if x.len() < digit\
    \ {\n            x.push(0);\n            digit += 1;\n        }\n        for i\
    \ in x.iter().cloned().skip(digit).take(x.len() - digit) {\n            if i %\
    \ 10 != 0 {\n                result.push(i);\n            }\n        }\n     \
    \   digit = x.len() as usize;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028210
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ z = x.clone();\n    z.sort();\n    for i in z {\n        if i % 2 != 0 {\n \
    \           z.swap(i, i - 1);\n        }\n    }\n    z\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3tn_dk4r.rs:14:20\n   |\n\
    14 |             z.swap(i, i - 1);\n   |                    ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |             z.swap(i.try_into().unwrap(),\
    \ i - 1);\n   |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3tn_dk4r.rs:14:23\n   |\n14 |             z.swap(i, i -\
    \ 1);\n   |                       ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n14 |             z.swap(i, (i - 1).try_into().unwrap());\n\
    \   |                       +     +++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digit = HashSet::new();\n    for elt in x.iter() {\n        if unique_digit.contains(elt)\
    \ && elt % 2 == 0 {\n            continue;\n        }\n        unique_digit.insert(elt);\n\
    \    }\n    unique_digit.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpm0_hcimx.rs:10:28\n   |\n10 |     let mut unique_digit = HashSet::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in x {\n        for j in &result {\n           \
    \ if i.mod(j).is_zero() {\n                return vec![];\n            }\n   \
    \     }\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `mod`\n  --> /tmp/tmpatekgnoi.rs:13:18\n\
    \   |\n13 |             if i.mod(j).is_zero() {\n   |                  ^^^ expected\
    \ identifier, found keyword\n   |\nhelp: escape `mod` to use it as an identifier\n\
    \   |\n13 |             if i.r#mod(j).is_zero() {\n   |                  ++\n\n\
    error[E0599]: no method named `r#mod` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpatekgnoi.rs:13:18\n   |\n13 |             if i.mod(j).is_zero()\
    \ {\n   |                  ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = Vec::new();\n    for i in x.iter() {\n        let mut c = i % 10;\n  \
    \      while c < 0 {\n            c += 10;\n        }\n        if c % 2 != 0 {\n\
    \            ans.push(i);\n        }\n    }\n    ans.sort();\n    ans\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8tn1bzl_.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     ans\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n\
    \    x.dedup_by(|a, b| a.to_digit() < b.to_digit());\n    x\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for mutable reference `&mut\
    \ isize` in the current scope\n  --> /tmp/tmp5_71inv5.rs:11:25\n   |\n11 |   \
    \  x.dedup_by(|a, b| a.to_digit() < b.to_digit());\n   |                     \
    \    ^^^^^^^^ method not found in `&mut isize`\n\nerror[E0599]: no method named\
    \ `to_digit` found for mutable reference `&mut isize` in the current scope\n \
    \ --> /tmp/tmp5_71inv5.rs:11:40\n   |\n11 |     x.dedup_by(|a, b| a.to_digit()\
    \ < b.to_digit());\n   |                                        ^^^^^^^^ method\
    \ not found in `&mut isize`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = vec![];\n    let mut z = x.clone();\n    for i in z {\n        if i % 2\
    \ != 0 {\n            y.push(z.remove(0));\n        }\n    }\n    y\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `z`\n   --> /tmp/tmpfbshoozf.rs:14:20\n\
    \    |\n11  |     let mut z = x.clone();\n    |         ----- move occurs because\
    \ `z` has type `Vec<isize>`, which does not implement the `Copy` trait\n12  |\
    \     for i in z {\n    |              - `z` moved due to this implicit call to\
    \ `.into_iter()`\n13  |         if i % 2 != 0 {\n14  |             y.push(z.remove(0));\n\
    \    |                    ^^^^^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `z`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n12  |     for i in &z {\n    |              +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y: Vec<isize> = x.clone();\n    y.sort();\n    for i in 0..y.len() {\n     \
    \   if y[i] % 2 == 0 {\n            y[i] = 0;\n        }\n    }\n    y\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpve09_ny7.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 0 {\n        return x;\n    }\n    let mut ret = x.clone();\n    ret.sort_unstable();\n\
    \    for i in ret.iter_mut() {\n        if i % 2 == 0 {\n            *i -= 1;\n\
    \        }\n    }\n    ret.dedup();\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpzw43qrnw.rs:16:14\n\
    \   |\n16 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n16 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut current_digit = 0;\n    let mut digit_cnt = 0;\n\
    \    for digit in x.iter() {\n        if digit % 2 == 0 {\n            current_digit\
    \ = digit;\n        } else {\n            if digit_cnt > 0 {\n               \
    \ result.push(current_digit);\n            }\n            digit_cnt += 1;\n  \
    \          current_digit = 0;\n        }\n    }\n    if digit_cnt > 0 {\n    \
    \    result.push(current_digit);\n    }\n    result.sort();\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp44pe_4_m.rs:15:29\n   |\n\
    11 |     let mut current_digit = 0;\n   |                             - expected\
    \ due to this value\n...\n15 |             current_digit = digit;\n   |      \
    \                       ^^^^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |             current_digit = *digit;\n \
    \  |                             +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ set = HashSet::new();\n    for v in x.iter() {\n        if set.contains(v) {\n\
    \            continue;\n        }\n        set.insert(v);\n    }\n    \n    if\
    \ set.is_empty() {\n        vec![]\n    } else {\n        let mut out = vec![];\n\
    \        let mut iter = set.iter().filter(|x| x % 2 == 0).collect::<Vec<_>>();\n\
    \        for v in iter {\n            out.push(*v);\n        }\n        out\n\
    \    }\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpa5onuf6u.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n    for i in 0..x.len() {\n        if x[i as usize].is_odd()\
    \ {\n            if !unique_digits.contains(x[i as usize]) {\n               \
    \ unique_digits.push(x[i as usize]);\n            }\n        }\n    }\n    unique_digits\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpnw_ums9s.rs:12:26\n   |\n12 |         if x[i as usize].is_odd()\
    \ {\n   |                          ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnw_ums9s.rs:13:40\n   |\n13 |             if\
    \ !unique_digits.contains(x[i as usize]) {\n   |                             \
    \           ^^^^^^^^^^^^^\n   |                                        |\n   |\
    \                                        expected reference, found `isize`\n \
    \  |                                        help: consider borrowing here: `&x[i\
    \ as usize]`\n   |\n   = note: expected reference `&_`\n                   found\
    \ type `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_vec: Vec<isize> = x.clone();\n    let mut unique_vec_size: usize = 1;\n\
    \    while unique_vec_size != x.len() {\n        // check each element in the\
    \ vector\n        for x in unique_vec {\n            // check each digit\n   \
    \         for y in 0..10 {\n                // if found an even digit, return\
    \ without pushing x into unique_vec\n                if x % 10 == y {\n      \
    \              unique_vec_size = 0;\n                    return unique_vec;\n\
    \                }\n            }\n        }\n        // increment the unique_vec_size\n\
    \        unique_vec_size += 1;\n        // append the current element into unique_vec\n\
    \        unique_vec.push(x[unique_vec_size - 1]);\n    }\n    unique_vec\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `unique_vec_size` is never read\n  --> /tmp/tmpaofogghp.rs:19:21\n\
    \   |\n19 |                     unique_vec_size = 0;\n   |                   \
    \  ^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n\
    \   = help: maybe it is overwritten before being read?\n\nerror[E0382]: use of\
    \ moved value: `unique_vec`\n   --> /tmp/tmpaofogghp.rs:14:18\n    |\n10  |  \
    \   let mut unique_vec: Vec<isize> = x.clone();\n    |         --------------\
    \ move occurs because `unique_vec` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n14  |         for x in unique_vec {\n    |          \
    \        ^^^^^^^^^^ `unique_vec` moved due to this implicit call to `.into_iter()`,\
    \ in previous iteration of loop\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `unique_vec`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n14  |         for x in &unique_vec {\n    |                  +\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for d in x {\n        if d % 2 == 0 {\n\
    \            result.push(d)\n        }\n    }\n    if result.len() > 1 {\n   \
    \     std::slice::sort_unstable(&result)\n    } else {\n        result\n    }\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_unstable` in module `std::slice`\n\
    \  --> /tmp/tmp3lj4a07o.rs:17:21\n   |\n17 |         std::slice::sort_unstable(&result)\n\
    \   |                     ^^^^^^^^^^^^^ not found in `std::slice`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = vec![];\n    for &x in x {\n        let mut i = 1;\n       \
    \ while i < x {\n            if x % i == 0 {\n                break;\n       \
    \     }\n            i += 1;\n        }\n        if i == x {\n            v.push(x);\n\
    \        }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3cx8a9o6.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = HashSet::new();\n    x.iter().cloned().filter(|x| {\n        d.insert(x);\n\
    \        x % 10 == 0 || x % 10 == 1 && d.contains(x) || x % 10 == 2 && d.contains(x)\
    \ || x % 10 == 3 && d.contains(x) || x % 10 == 4 && d.contains(x) || x % 10 ==\
    \ 5 && d.contains(x) || x % 10 == 6 && d.contains(x) || x % 10 == 7 && d.contains(x)\
    \ || x % 10 == 8 && d.contains(x) || x % 10 == 9 && d.contains(x)\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmptnrgdxj3.rs:10:17\n   |\n10 |     let mut d = HashSet::new();\n   |\
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0271]:\
    \ type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item ==\
    \ &&_`\n  --> /tmp/tmptnrgdxj3.rs:14:8\n   |\n14 |     }).cloned().collect()\n\
    \   |        ^^^^^^ expected reference, found `isize`\n   |\n   = note: expected\
    \ reference `&&_`\n              found reference `&isize`\n   = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmptnrgdxj3.rs:11:30: 14:6]>`\n\nerror[E0631]: type mismatch\
    \ in closure arguments\n  --> /tmp/tmptnrgdxj3.rs:14:8\n   |\n11 |     x.iter().cloned().filter(|x|\
    \ {\n   |                              --- found signature of `for<'r> fn(&'r\
    \ isize) -> _`\n...\n14 |     }).cloned().collect()\n   |        ^^^^^^ expected\
    \ signature of `for<'r> fn(&'r &_) -> _`\n   |\n   = note: required because of\
    \ the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmptnrgdxj3.rs:11:30: 14:6]>`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmptnrgdxj3.rs:11:30: 14:6]>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmptnrgdxj3.rs:14:17\n   |\n14 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmptnrgdxj3.rs:11:30: 14:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmptnrgdxj3.rs:11:30:\
    \ 14:6]> as Iterator>::Item = &_`\n           which is r"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = vec![];\n    let mut x: Vec<isize> = x;\n    let mut cnt:\
    \ isize = 0;\n    while cnt < x.len() {\n        if x[cnt] % 2 == 0 {\n      \
    \      ret.push(x[cnt]);\n        }\n        cnt += 1;\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdzoq58jk.rs:13:17\n   |\n\
    13 |     while cnt < x.len() {\n   |                 ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     while cnt < x.len().try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdzoq58jk.rs:14:12\n  \
    \ |\n14 |         if x[cnt] % 2 == 0 {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdzoq58jk.rs:15:22\n   |\n15 |            \
    \ ret.push(x[cnt]);\n   |                      ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable_by_key(|&i|\
    \ i % 10)\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwyay1qp.rs:10:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n10\
    \ |     x.sort_unstable_by_key(|&i| i % 10)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ s = vec![];\n    for v in x {\n        if s.contains(&v) {\n            continue;\n\
    \        }\n        s.push(*v % 10);\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpaa5ecwr9.rs:15:16\n\
    \   |\n15 |         s.push(*v % 10);\n   |                ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().filter(|&i|\
    \ i % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n  --> /tmp/tmpkhy5oxu7.rs:10:47\n   |\n10 |     x.iter().cloned().filter(|&i|\
    \ i % 2 == 0).cloned().collect()\n   |                                       \
    \        ^^^^^^ expected reference, found `isize`\n   |\n   = note: expected reference\
    \ `&&_`\n              found reference `&isize`\n   = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpkhy5oxu7.rs:10:30: 10:45]>`\n\nerror[E0631]: type\
    \ mismatch in closure arguments\n  --> /tmp/tmpkhy5oxu7.rs:10:47\n   |\n10 | \
    \    x.iter().cloned().filter(|&i| i % 2 == 0).cloned().collect()\n   |      \
    \                        ---------------  ^^^^^^ expected signature of `for<'r>\
    \ fn(&'r &_) -> _`\n   |                              |\n   |                \
    \              found signature of `for<'r> fn(&'r isize) -> _`\n   |\n   = note:\
    \ required because of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpkhy5oxu7.rs:10:30: 10:45]>`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpkhy5oxu7.rs:10:30: 10:45]>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpkhy5oxu7.rs:10:56\n   |\n10 |        x.iter().cloned().filter(|&i|\
    \ i % 2 == 0).cloned().collect()\n   |                                       \
    \                    ^^^^^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpkhy5oxu7.rs:10:30: 10:45]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpkhy5oxu7.rs:10:30:\
    \ 10:45]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Cloned<std::slice::Iter<'_,"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    let mut flag = false;\n    for &d in x {\n        if d %\
    \ 2 == 0 {\n            flag = true;\n        } else {\n            if flag {\n\
    \                res.push(d);\n            }\n            flag = false;\n    \
    \    }\n    }\n    if flag {\n        res.push(d);\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpv3jys6tv.rs:23:18\n\
    \   |\n23 |         res.push(d);\n   |                  ^ help: a local variable\
    \ with a similar name exists: `x`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv3jys6tv.rs:12:9\n\
    \   |\n12 |     for &d in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `d`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ v in x.iter().cloned() {\n        let mut current = vec![v];\n        while\
    \ let Some(k) = current.iter().filter_map(|x| {\n                if x < 0 {\n\
    \                    None\n                } else {\n                    Some(x)\n\
    \                }\n            }).find(|&x| x % 2 == 0) {\n            current.push(k);\n\
    \        }\n        result = result.extend(current);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5o3emmau.rs:17:24\n   |\n\
    17 |                 if x < 0 {\n   |                        ^\n   |         \
    \               |\n   |                        expected `&isize`, found integer\n\
    \   |                        help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5o3emmau.rs:23:26\n   |\n23 |             current.push(k);\n\
    \   |                          ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n23 |             current.push(*k);\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5o3emmau.rs:25:18\n\
    \   |\n13 |     let mut result = vec![];\n   |                      ------ expected\
    \ due to this value\n...\n25 |         result = result.extend(current);\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ vec = Vec::new();\n    let mut it = x.iter();\n    while let Some(item) = it.next()\
    \ {\n        if item % 2 == 0 {\n            vec.push(item);\n        }\n    }\n\
    \    vec.sort();\n    vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7bniw5q6.rs:18:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    18 |     vec\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable();\n\
    \    let mut counter = 0;\n    let mut result: Vec<isize> = vec![];\n    loop\
    \ {\n        let mut index = 0;\n        while counter < x.len() && index < x.len()\
    \ - 1 && x[index] % 2 == 0 {\n            counter++;\n            index = index\
    \ + 1;\n        }\n        if index == x.len() {\n            break;\n       \
    \ }\n        result.push(x[index]);\n        counter -= 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp0swfkcoh.rs:16:20\n\
    \   |\n16 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n16 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    16 -             counter++;\n16 +             counter += 1;\n   | \n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ uniques = Vec::new();\n    for d in x.iter() {\n        if d % 2 != 0 {\n  \
    \          uniques.push(d)\n        }\n    }\n    uniques\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7rd9330.rs:16:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    16 |     uniques\n   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\n  \
    \ = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = vec![];\n    let mut current_number: isize = 0;\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            result += [element];\n\
    \        } else {\n            result += [current_number];\n            current_number\
    \ += element;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmp7k5yj3vb.rs:14:13\n   |\n14 |             result\
    \ += [element];\n   |             ------^^^^^^^^^^^^^\n   |             |\n  \
    \ |             cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp7k5yj3vb.rs:16:13\n\
    \   |\n16 |             result += [current_number];\n   |             ------^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<isize>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // create\
    \ an array of digits\n    let mut digits: Vec<isize> = vec![];\n    for i in x.iter()\
    \ {\n        digits.extend(i.iter().cloned().collect());\n    }\n\n    // sort\
    \ digits in increasing order\n    digits.sort_unstable();\n\n    // return digits\
    \ without duplicates\n    digits\n        .into_iter()\n        .map(|x| x.checked_mul(10).unwrap())\n\
    \        .filter_map(|x| x.checked_div(10))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp_3d1_kaw.rs:13:25\n   |\n13 |         digits.extend(i.iter().cloned().collect());\n\
    \   |                         ^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_numbers = Vec::new();\n\n    for num in x {\n        let mut num_bits\
    \ = String::new();\n        let mut num_str = num.to_string();\n        while\
    \ !num_str.contains(&mut num_bits + \"0\") {\n            num_bits += \"0\";\n\
    \        }\n        unique_numbers.push(num_bits) - num\n    }\n\n    unique_numbers\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&str` to `&mut String`\n  --> /tmp/tmpph6mkn5x.rs:15:47\n\
    \   |\n15 |         while !num_str.contains(&mut num_bits + \"0\") {\n   |   \
    \                              ------------- ^ --- &str\n   |                \
    \                 |             |\n   |                                 |    \
    \         `+` cannot be used to concatenate two `&str` strings\n   |         \
    \                        &mut String\n   |\n   = note: string concatenation requires\
    \ an owned `String` on the left\nhelp: remove the borrow to obtain an owned `String`\n\
    \   |\n15 -         while !num_str.contains(&mut num_bits + \"0\") {\n15 +   \
    \      while !num_str.contains(num_bits + \"0\") {\n   | \n\nerror[E0369]: cannot\
    \ subtract `isize` from `()`\n  --> /tmp/tmpph6mkn5x.rs:18:39\n   |\n18 |    \
    \     unique_numbers.push(num_bits) - num\n   |         -----------------------------\
    \ ^ --- isize\n   |         |\n   |         ()\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpph6mkn5x.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     unique_numbers\n   |     ^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `String`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<String>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ i = 0;\n    let mut res = vec![];\n    let mut counter = 1;\n    while i < x.len()\
    \ {\n        if x[i] % 2 == 0 {\n            res.push(counter);\n            x[i]\
    \ /= 2;\n            counter = 1;\n        }\n        else {\n            counter\
    \ += 1;\n        }\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpy1m6qlio.rs:16:13\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n...\n16 |             x[i] /= 2;\n   |             ^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut counter = 0;\n    let mut tmp = x;\n    while\
    \ !tmp.is_empty() {\n        let v = tmp.pop().unwrap();\n        if v % 2 ==\
    \ 0 {\n            result.push(v);\n            counter += 1;\n        }\n   \
    \     else {\n            while counter > 0 && tmp.is_empty() {\n            \
    \    tmp.pop();\n                counter -= 1;\n            }\n            if\
    \ tmp.is_empty() {\n                break;\n            }\n            let v2\
    \ = tmp.pop().unwrap();\n            if v2 < v {\n                break;\n   \
    \         }\n            result.push(v2);\n            counter += 1;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp0uus1d4g.rs:40:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO:\
    \ use sort or hashmap to sort and use an iterator\n    let mut sorted_x = x.clone();\n\
    \    sorted_x.sort();\n    for &n in &mut sorted_x {\n        if n % 2 == 0 {\n\
    \            sorted_x.remove(n);\n        }\n    }\n    sorted_x\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmxvcmjz8.rs:13:9\n   |\n\
    13 |     for &n in &mut sorted_x {\n   |         ^^    ------------- this expression\
    \ has type `Option<&mut isize>`\n   |         |\n   |         types differ in\
    \ mutability\n   |         help: you can probably remove the explicit borrow:\
    \ `n`\n   |\n   = note: expected mutable reference `&mut isize`\n            \
    \          found reference `&_`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    let mut cnt = x.iter().cloned().filter(|&x| x.is_power_of_two()).count();\n\
    \    while cnt > 0 {\n        let digit = (*x).mod_pow(2, cnt).unwrap();\n   \
    \     if digit % 2 == 0 {\n            res.push(*x);\n        }\n        *x /=\
    \ digit;\n        cnt -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp0k70p4i1.rs:11:51\n   |\n11 |     let mut\
    \ cnt = x.iter().cloned().filter(|&x| x.is_power_of_two()).count();\n   |    \
    \                                               ^^^^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `mod_pow` found for slice `[isize]`\
    \ in the current scope\n  --> /tmp/tmp0k70p4i1.rs:13:26\n   |\n13 |         let\
    \ digit = (*x).mod_pow(2, cnt).unwrap();\n   |                          ^^^^^^^\
    \ method not found in `[isize]`\n\nerror[E0277]: the size for values of type `[isize]`\
    \ cannot be known at compilation time\n   --> /tmp/tmp0k70p4i1.rs:15:22\n    |\n\
    15  |             res.push(*x);\n    |                 ---- ^^ doesn't have a\
    \ size known at compile-time\n    |                 |\n    |                 required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `Sized` is\
    \ not implemented for `[isize]`\nnote: required by a bound in `Vec::<T, A>::push`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n   --> /tmp/tmp0k70p4i1.rs:10:19\n    |\n10  |     let mut res = vec![];\n\
    \    |                   ^^^^^^ doesn't have a size known at compile-time\n  \
    \  |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote: required\
    \ by a bound in `Vec::<T>::new`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \   --> /tmp/tmp0k70p4i1.rs:10:19\n    |\n10  |     let mut res = vec![];\n  \
    \  |                   ^^^^^^ doesn't have a size known at compile-time\n    |\n\
    \    = help: the trait `Sized` is not implemented for `[isize]`\nnote: required\
    \ by a bound in `Vec`\n    = note: this error originates in the macro `vec` (in\
    \ Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `[isize]`\n  -->\
    \ /tmp/tmp0k70p4i1.rs:17:9\n   |\n17 |        "
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for i in x.iter().filter(|x| x % 10 != 0) {\n       \
    \ if !res.contains(&i) {\n            res.push(i);\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmppoyoi4va.rs:11:36\n\
    \   |\n11 |     for i in x.iter().filter(|x| x % 10 != 0) {\n   |            \
    \                      - ^ -- {integer}\n   |                                \
    \  |\n   |                                  &&isize\n   |\nhelp: `%` can be used\
    \ on `isize`, you can dereference `x`\n   |\n11 |     for i in x.iter().filter(|x|\
    \ *x % 10 != 0) {\n   |                                  +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppoyoi4va.rs:16:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n16 |     res\n   |     ^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ s = HashSet::new();\n    for i in x {\n        if !s.insert(i) {\n         \
    \   s.push(i);\n        }\n    }\n    s.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp2b39z5m1.rs:10:17\n   |\n10 |     let mut s = HashSet::new();\n   |\
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ it = x.iter().cloned().collect::<Vec<_>>();\n    let mut new_vec: Vec<isize>\
    \ = vec![];\n\n    for n in it {\n        let mut dig = n.abs() % 10;\n      \
    \  while *it >= dig.max() {\n            dig /= 10;\n            it.next(); //\
    \ skip any element with odd digit\n        }\n        *new_vec = *new_vec.clone();\n\
    \        *new_vec.push(dig);\n    }\n\n    new_vec\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpmmc1ifac.rs:15:26\n    |\n15  |         while *it >= dig.max()\
    \ {\n    |                          ^^^- supplied 0 arguments\n    |         \
    \                 |\n    |                          expected 1 argument\n    |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmmc1ifac.rs:15:22\n   |\n15 |         while *it >= dig.max() {\n   |\
    \                      ^^^^^^^^^ expected slice `[isize]`, found `isize`\n\nerror[E0599]:\
    \ no method named `next` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmpmmc1ifac.rs:17:16\n   |\n17 |             it.next(); // skip any\
    \ element with odd digit\n   |                ^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpmmc1ifac.rs:19:9\n   |\n19 |         *new_vec = *new_vec.clone();\n\
    \   |         ^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `[isize]`\n   = note: the left-hand-side\
    \ of an assignment must have a statically known size\n\nerror[E0614]: type `()`\
    \ cannot be dereferenced\n  --> /tmp/tmpmmc1ifac.rs:20:9\n   |\n20 |         *new_vec.push(dig);\n\
    \   |         ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277, E0308, E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ uniques = vec![];\n    for &x in x {\n        let mut y = x.to_string();\n \
    \       let mut z = y.chars().collect::<Vec<_>>();\n        let mut counter =\
    \ z.len();\n        while counter > 0 {\n            let mut last = z.len() -\
    \ 1;\n            while last >= 0 && z[last] as isize % 2 == 0 {\n           \
    \     z.pop();\n                last -= 1;\n            }\n            counter--;\n\
    \            uniques.push(x.parse::<isize>().unwrap());\n        }\n    }\n  \
    \  uniques\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp1zy46yth.rs:21:22\n\
    \   |\n21 |             counter--;\n   |                      ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1zy46yth.rs:11:9\n   |\n11 | \
    \    for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ digits = x.clone(); // mutable borrow guarantee here\n    let mut ret: Vec<isize>\
    \ = vec![];\n    while !digits.is_empty() {\n        let tmp = digits\n      \
    \      .iter()\n            .cloned()\n            .filter(|&x| x.is_digit())\n\
    \            .cloned()\n            .map(|x| x.parse().unwrap())\n           \
    \ .collect::<Vec<_>>();\n        if !tmp.iter().any(|&x| x.is_even()) {\n    \
    \        ret.extend_from_slice(tmp);\n        }\n        digits.truncate(0);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_digit` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpvetp6dgz.rs:16:28\n   |\n16 |             .filter(|&x|\
    \ x.is_digit())\n   |                            ^^^^^^^^ method not found in\
    \ `isize`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize>\
    \ as Iterator>::Item == &&_`\n  --> /tmp/tmpvetp6dgz.rs:17:14\n   |\n17 |    \
    \         .cloned()\n   |              ^^^^^^ expected reference, found `isize`\n\
    \   |\n   = note: expected reference `&&_`\n              found reference `&isize`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant requirement hidden\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpvetp6dgz.rs:16:21:\
    \ 16:38]>`\n\nerror[E0631]: type mismatch in closure arguments\n  --> /tmp/tmpvetp6dgz.rs:17:14\n\
    \   |\n16 |             .filter(|&x| x.is_digit())\n   |                     -----------------\
    \ found signature of `for<'r> fn(&'r isize) -> _`\n17 |             .cloned()\n\
    \   |              ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n  \
    \ |\n   = note: required because of the requirements on the impl of `Iterator`\
    \ for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpvetp6dgz.rs:16:21:\
    \ 16:38]>`\n\nerror[E0599]: the method `map` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpvetp6dgz.rs:16:21: 16:38]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpvetp6dgz.rs:18:14\n   |\n18 |            \
    \    .map(|x| x.parse().unwrap())\n   |                 ^^^ method cannot be called\
    \ on `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpvetp6dgz.rs:16:21:\
    \ 16:38]>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpvetp6dgz.rs:16:21: 16:38]> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Filter<"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = x.into_iter().cloned().collect::<Vec<_>>();\n    let mut y: Vec<isize> =\
    \ vec![];\n    while x.any(|&x| *x % 10 != 0) {\n        let v = x.remove(0);\n\
    \        y.push(v);\n    }\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpe0erkynd.rs:10:31\n     |\n10   |     let mut x = x.into_iter().cloned().collect::<Vec<_>>();\n\
    \     |                               ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpe0erkynd.rs:10:40\n   |\n10 |       let mut\
    \ x = x.into_iter().cloned().collect::<Vec<_>>();\n   |                      \
    \                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n    let mut evens = x.iter().filter(|&x| x.is_even());\n\
    \    \n    evens.map(|&x| {\n        while unique_digits.iter().any(|&x| x ==\
    \ x) {\n            unique_digits.push(0);\n        }\n        unique_digits.push(x);\n\
    \    });\n    \n    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmppzk59sop.rs:11:44\n   |\n11 |     let mut evens\
    \ = x.iter().filter(|&x| x.is_even());\n   |                                 \
    \           ^^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = Vec::new();\n    let mut cnt: isize = 0;\n    let mut odd:\
    \ isize = 0;\n    let mut even: isize = 0;\n    for i in x {\n        cnt += 1;\n\
    \        if i % 2 == 1 {\n            even += 1;\n        } else {\n         \
    \   odd += 1;\n        }\n        if cnt > 1 {\n            if odd == 1 && even\
    \ == 0 {\n                ret.push(i - 1);\n            }\n            if odd\
    \ == 0 && even == 0 {\n                ret.push(i);\n            }\n         \
    \   if odd == 1 && even == 1 {\n                ret.push(i - 1);\n           \
    \ }\n            if odd == 0 && even == 1 {\n                ret.push(i);\n  \
    \          }\n            if odd == 1 && even < cnt {\n                ret.push(i\
    \ - 1);\n            }\n            if odd == 0 && even < cnt {\n            \
    \    ret.push(i);\n            }\n            if odd == 1 && even == cnt {\n \
    \               ret.push(i - 1);\n            }\n            if odd == 0 && even\
    \ == cnt {\n                ret.push(i);\n            }\n            odd = even\
    \ = 0;\n            cnt = 0;\n        }\n    }\n    ret\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9lzmsumj.rs:46:19\n   |\n\
    12 |     let mut odd: isize = 0;\n   |                  ----- expected due to\
    \ this type\n...\n46 |             odd = even = 0;\n   |                   ^^^^^^^^\
    \ expected `isize`, found `()`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().map(|i|\
    \ {\n        let mut k = i;\n        while k > 10 {\n            k %= 10;\n  \
    \      }\n        k % 10\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpbc8q1dmi.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // First\
    \ we get the unique elements in the vector\n    let unique_elements = x.iter().cloned().collect::<Vec<_>>();\n\
    \    // Then we calculate the sum of each unique element\n    let sum_of_unique\
    \ = unique_elements.iter().map(|x| x.pow(10).sum::<isize>()).collect::<Vec<_>>();\n\
    \    // Then we get the index of each unique element\n    let index = unique_elements.iter().enumerate().filter(|&(i,x)|\
    \ {\n        // If an element is divisible by two, then it is even.\n        x\
    \ % 2 != 0\n    }).map(|&(i,x)| i);\n    // Then we calculate the number of each\
    \ unique element\n    let number_of_unique_elements = unique_elements.iter().map(|&x|\
    \ x.pow(10).len()).collect::<Vec<_>>();\n    // Then we get the sum of each unique\
    \ element\n    let sum_of_unique_elements = sum_of_unique.iter().map(|x| x.pow(10).sum::<isize>()).collect::<Vec<_>>();\n\
    \    // Then we calculate the number of each element\n    let number_of_unique_elements_index\
    \ = number_of_unique_elements.iter().map(|x| x.pow(10).len()).collect::<Vec<_>>();\n\
    \    // Then we get the maximum sum\n    let max_sum = sum_of_unique_elements.iter().max().unwrap_or(0);\n\
    \    // Then we calculate the sum of each element\n    let sum_of_unique_elements_index\
    \ = sum_of_unique_elements.iter().map(|x| x.pow(10).sum::<isize>()).collect::<Vec<_>>();\n\
    \    // Then we calculate the sum of each element\n    let sum_of_unique_elements_index_max\
    \ = sum_of_unique_elements_index.iter().max().unwrap_or(0);\n    // Then we calculate\
    \ the number of each element\n    let number_of_unique_elements_index_max = number_of_unique_elements_index.iter().max().unwrap_or(0);\n\
    \    // Then we get the number of each element\n    let number_of_unique_elements_index_max_new\
    \ = number_of_unique_elements_index.iter().map(|x| x.pow((10) as i32)).max().unwrap_or(0);\n\
    \    // Then we calculate the sum of each element\n    let sum_of_unique_elements_index_max\
    \ = sum_of_unique_elements_index_max.iter().max().unwrap_or(0);\n\n    // Then\
    \ we calculate the final result\n    let result = if sum_of_unique_elements_index_max\
    \ == max_sum { \n        // if the sum of the all elements is equal with the max\
    \ sum\n        vec![] \n    } else if sum_of_unique_elements_index_max_new ==\
    \ max_sum {\n        // if the sum of the all elements is equal with the max sum\n\
    \        vec![] \n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpud5fzca9.rs:53:3\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                                   - unclosed delimiter\n...\n42 |     } else\
    \ if sum_of_unique_elements_index_max_new == max_sum {\n   |                 \
    \                                              - this delimiter might not be properly\
    \ closed...\n...\n45 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n53 | }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found keyword `fn`\n  --> /tmp/tmpud5fzca9.rs:47:1\n   |\n45 | }\n   |  - expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n46 | \n47 | fn main() {\n   |\
    \ ^^ unexpected token\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmpud5fzca9.rs:13:66\n\
    \   |\n13 |     let sum_of_unique = unique_elements.iter().map(|x| x.pow(10).sum::<isize>()).collect::<Vec<_>>();\n\
    \   |                                                                  ^^^ `isize`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `isize: Iterator`\n           which is required by `&mut isize: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpud5fzca9.rs:18:13\n   |\n18 |\
    \     }).map(|&(i,x)| i);\n   |             ^^^^^-\n   |             |    |\n\
    \   |             |    expected due to this\n   |             expected tuple,\
    \ found reference\n   |\n   = note:  expected tuple `(usize, &isize)`\n      \
    \     found reference `&_`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpud5fzca9.rs:20:79\n   |\n20 |  \
    \   let number_of_unique_elements = unique_elements.iter().map(|&x| x.pow(10).len()).collect::<Vec<_>>();\n\
    \   |                                                                        \
    \       ^^^ method not found in `isize`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret = vec![];\n    for &v in x.iter() {\n        if v % 2 == 0 {\n         \
    \   continue;\n        }\n        push!(ret, v);\n    }\n    ret.sort();\n   \
    \ ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `push` in this scope\n  --> /tmp/tmptped9kax.rs:15:9\n\
    \   |\n15 |         push!(ret, v);\n   |         ^^^^\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    \n  \
    \  let mut v: Vec<isize> = Vec::new();\n    let mut z: usize = 0;\n    \n    for\
    \ a in x.iter() {\n        \n        if a % 2 == 0 { \n            if z != 0 {\n\
    \                v.push(z);\n            }\n            z = a;\n        }\n  \
    \      \n        if a % 2 != 0 {\n            v.push(a);\n        }\n    }\n \
    \   \n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj6xaahut.rs:18:24\n   |\n\
    18 |                 v.push(z);\n   |                        ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |                 v.push(z.try_into().unwrap());\n\
    \   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj6xaahut.rs:20:17\n   |\n12 |     let mut z: usize = 0;\n\
    \   |                ----- expected due to this type\n...\n20 |             z\
    \ = a;\n   |                 ^ expected `usize`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj6xaahut.rs:24:20\n   |\n24 |             v.push(a);\n\
    \   |                    ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n24 |             v.push(*a);\n   |         \
    \           +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    let mut counter: usize = 0;\n    for el\
    \ in x {\n        if el % 2 == 0 {\n            counter = 1;\n        } else {\n\
    \            counter = 0;\n        }\n        if result.contains(&el) {\n    \
    \        continue;\n        } else {\n            result.push(el);\n         \
    \   if counter == 0 {\n                result.sort();\n            }\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp3xxkuz8n.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = x.to_vec();\n    let mut result: Vec<isize> = vec![];\n    let mut counter:\
    \ usize = 0;\n    let mut flag = false;\n    while !x.is_empty() {\n        if\
    \ flag {\n            x.remove(0);\n        } else {\n            let mut z =\
    \ x.remove(0);\n            while z % 2 == 0 {\n                z /= 2;\n    \
    \        }\n            if !result.contains(&z) {\n                result.push(z);\n\
    \                counter = 1;\n                flag = true;\n                while\
    \ !x.is_empty() {\n                    let mut z = x.remove(0);\n            \
    \        while z % 2 == 0 {\n                        z /= 2;\n               \
    \     }\n                    if !result.contains(&z) {\n                     \
    \   result.push(z);\n                        flag = true;\n                  \
    \  }\n                    else {\n                        flag = false;\n    \
    \                }\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 711, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpa46jjt5c.rs:47:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = vec![];\n    let mut dig = vec![];\n    let mut count = 1;\n\
    \    let mut sum = 0;\n\n    for x in x {\n        sum += x;\n        dig.push(x);\n\
    \    }\n\n    let mut i = 1;\n\n    while i < x.len() {\n        if dig[i] - dig.last().unwrap()\
    \ == 0 {\n            i += 1;\n        } else {\n            if count == sum {\n\
    \                v.push(dig[i]);\n            } else {\n                count\
    \ = sum;\n                sum = dig[i];\n                v.push(dig[i]);\n   \
    \         }\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `x`\n   --> /tmp/tmpj658ryjv.rs:22:15\n\
    \    |\n9   | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    |         \
    \         - move occurs because `x` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n15  |     for x in x {\n    |              - `x` moved\
    \ due to this implicit call to `.into_iter()`\n...\n22  |     while i < x.len()\
    \ {\n    |               ^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `x`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n15  |     for x in &x {\n    |              +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = Vec::new();\n    let mut last: isize = 0;\n    for &x in x\
    \ {\n        let mut x = x;\n        while x % 10 == 0 {\n            x /= 10;\n\
    \        }\n        if last != x {\n            ret.push(x);\n            ret\
    \ = ret[..ret.length - 1].iter().cloned().collect();\n            last = x;\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fesvlbt.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0609]: no field `length`\
    \ on type `Vec<isize>`\n  --> /tmp/tmp6fesvlbt.rs:19:29\n   |\n19 |          \
    \   ret = ret[..ret.length - 1].iter().cloned().collect();\n   |             \
    \                ^^^^^^ unknown field\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = vec![];\n    let mut i = 0;\n    while x.len() > i {\n        if x[i] %\
    \ 2 != 0 {\n            v.push(x[i]);\n        }\n        i += 1;\n    }\n   \
    \ v\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpg_pp6w5e.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i].is_zero()\
    \ {\n            if i < result.len() {\n                result.remove(i);\n  \
    \          }\n        } else {\n            if x[i] % 2 == 0 {\n             \
    \   if i < result.len() {\n                    result.remove(i);\n           \
    \     }\n            }\n            i += 1;\n        }\n    }\n    if result.is_empty()\
    \ {\n        result\n    } else {\n        result.sort();\n        result\n  \
    \  }\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpazy_x81k.rs:13:17\n   |\n13 |         if x[i].is_zero()\
    \ {\n   |                 ^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ set = vec![];\n    for &n in x {\n        if n % 2 == 0 {\n            set.push(n);\n\
    \        }\n    }\n    set.sort();\n    set\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvfw43fpg.rs:11:9\n   |\n\
    11 |     for &n in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ u = vec![];\n    let mut s = x.clone();\n    for &n in &mut s {\n        if\
    \ n % 2 == 0 {\n            u.push(n);\n        }\n    }\n    \n    u.sort_unstable();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz0qnvkll.rs:12:9\n   |\n\
    12 |     for &n in &mut s {\n   |         ^^    ------ this expression has type\
    \ `Option<&mut isize>`\n   |         |\n   |         types differ in mutability\n\
    \   |         help: you can probably remove the explicit borrow: `n`\n   |\n \
    \  = note: expected mutable reference `&mut isize`\n                      found\
    \ reference `&_`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_x = x.iter().cloned().collect::<Vec<_>>();\n    sorted_x.sort_unstable();\n\
    \    let mut res = vec![];\n    for i in sorted_x {\n        if i / 2 % 2 == 0\
    \ {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpzulqbxj6.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ set = vec![];\n    for (i, &v) in x.iter().cloned().enumerate() {\n        if\
    \ v % 2 == 0 {\n            set.push(v);\n        }\n    }\n    set.sort();\n\
    \    set\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplghlk7tt.rs:11:13\n   |\n\
    11 |     for (i, &v) in x.iter().cloned().enumerate() {\n   |             ^^ \
    \    ----------------------------- this expression has type `Option<(usize, isize)>`\n\
    \   |             |\n   |             expected `isize`, found reference\n   |\
    \             help: you can probably remove the explicit borrow: `v`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    x.sort_unstable();\n    let mut seen: Vec<isize>\
    \ = vec![0; x.len()];\n    seen[0] = 1;\n    for i in 1..x.len() {\n        let\
    \ d = x[i] % 10;\n        if seen[d] == 0 {\n            seen[d] = 1;\n      \
    \  } else {\n            x[i - 1] = d;\n            for i in 0..i-1 {\n      \
    \          if x[i] != d {\n                    x[i] = x[i + 1];\n            \
    \    }\n            }\n        }\n    }\n    x\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpchv9uh0l.rs:16:12\n\
    \   |\n16 |         if seen[d] == 0 {\n   |            ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpchv9uh0l.rs:17:13\n   |\n17 |            \
    \ seen[d] = 1;\n   |             ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = Vec::new();\n    let mut x_digits: Vec<isize> = Vec::new();\n\
    \n    for n in x {\n        let mut x_digit = n.to_string().chars().map(|x| x.to_digit(10)).collect();\n\
    \        x_digits.insert(x_digits.len(), x_digit.clone());\n    }\n\n    for &x_digit\
    \ in x_digits.iter() {\n        let mut has_digit = false;\n        for &mut x_digit\
    \ in x_digits.iter() {\n            if x_digit % 2 == 0 {\n                has_digit\
    \ = true;\n                break;\n            }\n        }\n\n        if !has_digit\
    \ {\n            v.push(x_digit);\n        }\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpzjl0wumr.rs:15:41\n\
    \   |\n14 |         let mut x_digit = n.to_string().chars().map(|x| x.to_digit(10)).collect();\n\
    \   |             ----------- consider giving `x_digit` a type\n15 |         x_digits.insert(x_digits.len(),\
    \ x_digit.clone());\n   |                                         ^^^^^^^ cannot\
    \ infer type\n   |\n   = note: type must be known at this point\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzjl0wumr.rs:20:13\n   |\n20 |         for &mut\
    \ x_digit in x_digits.iter() {\n   |             ^^^^^^^^^^^^    ---------------\
    \ this expression has type `Option<&isize>`\n   |             |\n   |        \
    \     types differ in mutability\n   |             help: you can probably remove\
    \ the explicit borrow: `x_digit`\n   |\n   = note:      expected reference `&isize`\n\
    \           found mutable reference `&mut _`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0282, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = Vec::new();\n    let mut counter = vec![0; x.len()];\n    for i in x {\n\
    \        for j in counter {\n            if i == 0 { break }\n            if i\
    \ % j == 0 {\n                break;\n            }\n        }\n        ans.push(i);\n\
    \        for i in &counter {\n            *i += 1;\n        }\n    }\n    ans.sort_unstable();\n\
    \    ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmporas9l3_.rs:11:9\n\
    \   |\n11 |     let mut counter = vec![0; x.len()];\n   |         ----^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `counter`\n   --> /tmp/tmporas9l3_.rs:13:18\n\
    \    |\n11  |     let mut counter = vec![0; x.len()];\n    |         -----------\
    \ move occurs because `counter` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     for i in x {\n13  |         for j in counter {\n\
    \    |                  ^^^^^^^ `counter` moved due to this implicit call to `.into_iter()`,\
    \ in previous iteration of loop\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `counter`\nhelp: consider iterating over a\
    \ slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n  \
    \  |\n13  |         for j in &counter {\n    |                  +\n\nerror[E0594]:\
    \ cannot assign to `*i`, which is behind a `&` reference\n  --> /tmp/tmporas9l3_.rs:21:13\n\
    \   |\n20 |         for i in &counter {\n   |                  -------- this iterator\
    \ yields `&` references\n21 |             *i += 1;\n   |             ^^^^^^^ `i`\
    \ is a `&` reference, so the data it refers to cannot be written\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0382, E0594.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n\n    for num in x {\n        if num % 2 ==\
    \ 0 {\n            result.push(num);\n        }\n    }\n\n    result.sort_unstable_by_key(|num|\
    \ num);\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: lifetime may not live long enough\n  --> /tmp/tmpr_p149c1.rs:18:39\n\
    \   |\n18 |     result.sort_unstable_by_key(|num| num);\n   |                \
    \                  ---- ^^^ returning this value requires that `'1` must outlive\
    \ `'2`\n   |                                  |  |\n   |                     \
    \             |  return type of closure is &'2 isize\n   |                   \
    \               has type `&'1 isize`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable();\n\
    \    x.iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmppekpra0a.rs:11:38\n     |\n\
    11   |     x.iter().filter(|&x| x % 2 != 0).collect()\n     |                \
    \                      ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique = vec![];\n    for i in x {\n        let mut v = i;\n        while !unique.contains(&v\
    \ % 10) {\n            v = v / 10;\n        }\n        unique.push(v % 10);\n\
    \    }\n    unique.iter().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcn0bxa09.rs:13:32\n   |\n\
    13 |         while !unique.contains(&v % 10) {\n   |                         \
    \       ^^^^^^^\n   |                                |\n   |                 \
    \               expected reference, found `isize`\n   |                      \
    \          help: consider borrowing here: `&(&v % 10)`\n   |\n   = note: expected\
    \ reference `&_`\n                   found type `isize`\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmpcn0bxa09.rs:18:19\n     |\n18   |     unique.iter().collect()\n\
    \     |                   ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ seen = HashSet::new();\n    x.into_iter().filter(|&x| x.is_multiple_of_two()).filter(|&x|\
    \ {\n        if seen.contains(&x) {\n            false\n        } else {\n   \
    \         seen.insert(x)\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpr2axl4fx.rs:10:20\n   |\n10 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0599]:\
    \ no method named `is_multiple_of_two` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpr2axl4fx.rs:11:33\n   |\n11 |     x.into_iter().filter(|&x| x.is_multiple_of_two()).filter(|&x|\
    \ {\n   |                                 ^^^^^^^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter_map(|e|\n\
    \        if *e % 2 == 0 {\n            Some(*e)\n        } else {\n          \
    \  None\n        }\n    ).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpuuiu68ha.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter_map(|x|\
    \ {\n        x.iter().filter(|&x| x >= 0).collect::<Vec<_>>()\n    }).cloned().collect::<Vec<_>>().sort().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmowx4huj.rs:11:11\n   |\n11 |         x.iter().filter(|&x|\
    \ x >= 0).collect::<Vec<_>>()\n   |           ^^^^ method not found in `isize`\n\
    \nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpmowx4huj.rs:12:44\n   |\n\
    12 |     }).cloned().collect::<Vec<_>>().sort().collect()\n   |              \
    \                              ^^^^^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n    for digit in x {\n        if digit % 2 == 0\
    \ {\n            unique_digits.push(digit);\n        }\n    }\n    unique_digits.sort_unstable_by_mut();\n\
    \    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable_by_mut` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpp7u2w6pf.rs:16:19\n   |\n16 |     unique_digits.sort_unstable_by_mut();\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `sort_unstable`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique = vec![];\n    for i in x.iter() {\n        if i % 2 == 0 {\n       \
    \     unique.push(i as isize);\n        }\n    }\n    unique\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpwe_72zo7.rs:13:25\n\
    \   |\n13 |             unique.push(i as isize);\n   |                       \
    \  -^^^^^^^^^\n   |                         |\n   |                         cannot\
    \ cast `&isize` as `isize`\n   |                         help: dereference the\
    \ expression: `*i`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0606`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_x = x;\n    sorted_x.sort();\n    let mut unique_x = vec![0; sorted_x.len()];\n\
    \    for i in 0..(sorted_x.len() - 1) {\n        let v = sorted_x[i];\n      \
    \  if v % 2 == 0 {\n            unique_x.push(i);\n        }\n    }\n    sorted_x.into_iter().filter(|x|\
    \ unique_x.contains(&x)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8mbsfg8g.rs:19:55\n   |\n\
    19 |     sorted_x.into_iter().filter(|x| unique_x.contains(&x)).collect()\n  \
    \ |                                                       ^^ expected `usize`,\
    \ found `&isize`\n   |\n   = note: expected reference `&usize`\n             \
    \ found reference `&&isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ud = vec![];\n    let mut ud_seen = vec![];\n    for n in x {\n        let mut\
    \ x = n;\n        for digit in x.to_string().chars().nth(x.len() - 1).unwrap().to_string().chars()\
    \ {\n            if digit != '0' {\n                break;\n            }\n  \
    \          x = x.to_string()\n                    .chars()\n                 \
    \   .skip(x.len() - 1)\n                    .collect();\n        }\n        if\
    \ ud_seen.contains(&x) {\n            continue;\n        }\n        ud_seen.push(x);\n\
    \        ud.push(n);\n    }\n    ud.sort_unstable();\n    ud\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpyn8_p3h6.rs:14:50\n   |\n14 |         for digit in x.to_string().chars().nth(x.len()\
    \ - 1).unwrap().to_string().chars() {\n   |                                  \
    \                ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmpyn8_p3h6.rs:20:29\n\
    \   |\n20 |                     .skip(x.len() - 1)\n   |                     \
    \        ^^^ method not found in `isize`\n\nerror[E0277]: a value of type `isize`\
    \ cannot be built from an iterator over elements of type `char`\n    --> /tmp/tmpyn8_p3h6.rs:21:22\n\
    \     |\n21   |                     .collect();\n     |                      ^^^^^^^\
    \ value of type `isize` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `isize`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // We\
    \ are working with numbers and therefore are forced to handle all numbers.\n \
    \   // This is done by calling `num_digits` for each number and then checking\
    \ if \n    // we already encountered it.\n    let mut result = vec![];\n    for\
    \ num in x.into_iter() {\n        let len = num_digits(num);\n        if len ==\
    \ 0 {\n            result.push(num);\n        } else {\n            // We already\
    \ encountered this number so skip it\n            if *result.iter().position(|&x|\
    \ x == num) != Some(&0) {\n                continue;\n            }\n        \
    \    // We haven't encountered this number yet\n            result.push(num);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n  --> /tmp/tmpoz3g4_s2.rs:15:19\n\
    \   |\n15 |         let len = num_digits(num);\n   |                   ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0614]: type `Option<usize>` cannot be dereferenced\n\
    \  --> /tmp/tmpoz3g4_s2.rs:20:16\n   |\n20 |             if *result.iter().position(|&x|\
    \ x == num) != Some(&0) {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0614.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = Vec::new();\n    for n in x {\n        let mut digit_count = 1;\n    \
    \    for digit in n.to_string().chars().filter(|&c| {\n            c >= '0' &&\
    \ c <= '9'\n        }) {\n            digit_count *= 10;\n            digit_count\
    \ += digit as isize;\n        }\n        if digit_count == 0 {\n            continue;\n\
    \        }\n        ans.push(n - digit_count as isize);\n    }\n    ans.sort_unstable();\n\
    \    ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-63328, -628, -628, -58]`,\n right: `[1, 15, 33]`', /tmp/tmp6_md7v6y.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n    for i in x.iter() {\n        for d in 0..10\
    \ {\n            if i % 10 == d {\n                break;\n            }\n   \
    \     }\n        if d > 0 {\n            unique_digits.push(i / 10);\n       \
    \ }\n    }\n    unique_digits.sort_by_key(|x| *x);\n    unique_digits\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpa4nh1mva.rs:17:12\n\
    \   |\n17 |         if d > 0 {\n   |            ^ help: a local variable with\
    \ a similar name exists: `i`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = x.clone();\n    let mut i = 1;\n    while ret.is_empty() ||\
    \ ret[0] <= i {\n        i += 2;\n        ret.iter_mut().skip(1).for_each(|&x|\
    \ *x *= 10);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wstvoh6.rs:14:42\n   |\n\
    14 |         ret.iter_mut().skip(1).for_each(|&x| *x *= 10);\n   |           \
    \                               ^--\n   |                                    \
    \      ||\n   |                                          |expected due to this\n\
    \   |                                          types differ in mutability\n  \
    \ |                                          help: did you mean `x`: `&&mut isize`\n\
    \   |\n   = note: expected mutable reference `&mut isize`\n                  \
    \    found reference `&_`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut seen = Vec::new();\n    let mut i = x.len();\n\
    \    while i > 0{\n        let mut j = i;\n        while j > 0{\n            if\
    \ x[i - j % i].is_even() {\n                j -= 1;\n                seen.push(x[i\
    \ - j % i]);\n            } else {\n                break;\n            }\n  \
    \      }\n        i = j;\n        result.push(x[i - i %x].clone());\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_hfgr41i.rs:16:29\n   |\n16 |             if x[i - j %\
    \ i].is_even() {\n   |                             ^^^^^^^ method not found in\
    \ `isize`\n\nerror[E0277]: cannot mod `usize` by `Vec<isize>`\n  --> /tmp/tmp_hfgr41i.rs:24:29\n\
    \   |\n24 |         result.push(x[i - i %x].clone());\n   |                  \
    \           ^ no implementation for `usize % Vec<isize>`\n   |\n   = help: the\
    \ trait `Rem<Vec<isize>>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 1 {\n        return x\n    }\n    let mut vec = Vec::new();\n    let mut\
    \ min_x = x.len();\n    let mut min_index = 0;\n    let mut max_x = x.len();\n\
    \    let mut max_index = 0;\n    let mut index_for_min = x.len();\n    let mut\
    \ index_for_max = x.len();\n    let mut min_value = x[min_index];\n    let mut\
    \ max_value = x[max_index];\n    while min_index < max_index {\n        let mut\
    \ i = 0;\n        for v in x.iter_mut() {\n            if i % 2 == 0 {\n     \
    \           *v = 0;\n            } else {\n                *v = *v + 1;\n    \
    \        }\n            i += 1;\n        }\n        if min_value < max_value {\n\
    \            vec.push(min_value);\n        }\n        min_value = x[min_index];\n\
    \        min_x = min_x;\n        min_index = min_index + 1;\n        max_value\
    \ = x[max_index];\n        max_x = max_x;\n        max_index = max_index + 1;\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `index_for_min`\n  --> /tmp/tmp6e_6avcb.rs:18:13\n\
    \   |\n18 |     let mut index_for_min = x.len();\n   |             ^^^^^^^^^^^^^\
    \ help: if this is intentional, prefix it with an underscore: `_index_for_min`\n\
    \   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused\
    \ variable: `index_for_max`\n  --> /tmp/tmp6e_6avcb.rs:19:13\n   |\n19 |     let\
    \ mut index_for_max = x.len();\n   |             ^^^^^^^^^^^^^ help: if this is\
    \ intentional, prefix it with an underscore: `_index_for_max`\n\nwarning: variable\
    \ does not need to be mutable\n  --> /tmp/tmp6e_6avcb.rs:18:9\n   |\n18 |    \
    \ let mut index_for_min = x.len();\n   |         ----^^^^^^^^^^^^^\n   |     \
    \    |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp6e_6avcb.rs:19:9\n\
    \   |\n19 |     let mut index_for_max = x.len();\n   |         ----^^^^^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n\nerror[E0596]: cannot\
    \ borrow `x` as mutable, as it is not declared as mutable\n  --> /tmp/tmp6e_6avcb.rs:24:18\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \      - help: consider changing this to be mutable: `mut x`\n...\n24 |      \
    \   for v in x.iter_mut() {\n   |                  ^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error; 4 warnings emitted\n\n\
    For more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res: Vec<isize> = vec![0; x.len()];\n    \n    for i in x {\n        let mut\
    \ idx = -1;\n        for j in 0..res.len() {\n            if res[j] == i {\n \
    \               idx = j;\n                break;\n            }\n        }\n \
    \       if idx > -1 {\n            res[idx] = i;\n        } else {\n         \
    \   res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp1qoata3s.rs:13:23\n\
    \   |\n13 |         let mut idx = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmp1qoata3s.rs:20:18\n   |\n20 |  \
    \       if idx > -1 {\n   |                  ^^\n   |                  |\n   |\
    \                  cannot apply unary operator `-`\n   |                  help:\
    \ you may have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note:\
    \ unsigned values cannot be negated\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut map = HashMap::new();\n\n    x.iter().for_each(|x|\
    \ {\n        if map.contains_key(&x) {\n            map.remove(&x);\n        \
    \    result.push(x);\n        } else {\n            map.insert(x, true);\n   \
    \     }\n    });\n\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpmy018v88.rs:11:19\n   |\n11 |     let mut map = HashMap::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmy018v88.rs:22:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n22 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ it = x.iter().cloned().collect::<Vec<_>>();\n    let mut counter: isize = 0;\n\
    \    let mut unique_digits = Vec::new();\n    for element in it {\n        if\
    \ element % 2 == 0 {\n            counter++;\n        } else {\n            if\
    \ counter == 0 {\n                unique_digits.push(element);\n            }\
    \ else {\n                unique_digits.sort();\n                unique_digits.extend_from_slice(&unique_digits[..unique_digits.len()\
    \ - 1]);\n                unique_digits.clear();\n                unique_digits.push(element);\n\
    \                counter = 0;\n            }\n        }\n    }\n\n    if counter\
    \ == 0 {\n        unique_digits.sort();\n        unique_digits.extend_from_slice(&unique_digits[..unique_digits.len()\
    \ - 1]);\n    }\n\n    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp2r_uuf1o.rs:15:20\n\
    \   |\n15 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n15 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    15 -             counter++;\n15 +             counter += 1;\n   | \n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_x = x.iter().cloned().collect::<Vec<_>>();\n    sorted_x.sort_unstable();\n\
    \    let mut i = 0;\n    sorted_x.iter_mut().cloned().for_each(|x| {\n       \
    \ if x % 2 == 0 {\n            *x = x;\n            i += 1;\n        }\n    });\n\
    \    sorted_x\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpv44h5re1.rs:13:25\n     |\n13   |\
    \     sorted_x.iter_mut().cloned().for_each(|x| {\n     |                    \
    \     ^^^^^^ types differ in mutability\n     |\n     = note:      expected reference\
    \ `&_`\n             found mutable reference `&mut isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct `Cloned<std::slice::IterMut<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n   --> /tmp/tmpv44h5re1.rs:13:34\n\
    \    |\n13  |       sorted_x.iter_mut().cloned().for_each(|x| {\n    |       \
    \                             ^^^^^^^^ method cannot be called on `Cloned<std::slice::IterMut<'_,\
    \ isize>>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `<std::slice::IterMut<'_, isize> as\
    \ Iterator>::Item = &_`\n            which is required by `Cloned<std::slice::IterMut<'_,\
    \ isize>>: Iterator`\n            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            which is required by `&mut Cloned<std::slice::IterMut<'_, isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 1 {\n        return x;\n    }\n    let mut i = 0;\n    let mut y = Vec::with_capacity(x.len()\
    \ + 1);\n    loop {\n        if i % 2 != 0 {\n            y.push(x[i]);\n    \
    \    }\n        i += 1;\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 5'', /tmp/tmpdii6vc8m.rs:17:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs: Vec<isize> = x.clone();\n    xs.sort();\n    let mut count: usize = 0;\n\
    \    xs.iter().filter(|&x| x.is_even()).filter(|&x| x % 2 == 0).for_each(|x|{\n\
    \        count += 1;\n        xs.remove(x.to_digits(2));\n    });\n    xs\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmplji641in.rs:13:29\n   |\n13 |     xs.iter().filter(|&x|\
    \ x.is_even()).filter(|&x| x % 2 == 0).for_each(|x|{\n   |                   \
    \          ^^^^^^^ method not found in `&isize`\n\nerror[E0599]: no method named\
    \ `to_digits` found for reference `&isize` in the current scope\n  --> /tmp/tmplji641in.rs:15:21\n\
    \   |\n15 |         xs.remove(x.to_digits(2));\n   |                     ^^^^^^^^^\
    \ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = vec![];\n\n    for i in x {\n        if !v.contains(&i % 10)\
    \ {\n            v.push(i);\n        }\n    }\n\n    if v.len() > 1 {\n      \
    \  v\n    } else {\n        vec![]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe4auok2c.rs:13:24\n   |\n\
    13 |         if !v.contains(&i % 10) {\n   |                        ^^^^^^^\n\
    \   |                        |\n   |                        expected `&isize`,\
    \ found `isize`\n   |                        help: consider borrowing here: `&(&i\
    \ % 10)`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs = x.clone();\n    xs.sort();\n\n    for i in xs.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            xs.remove(&i);\n        }\n    }\n\n    xs\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmt1ge0mf.rs:15:23\n   |\n\
    15 |             xs.remove(&i);\n   |                       ^^ expected `usize`,\
    \ found `&&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ a = vec![];\n    let mut current_value = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut result = vec![];\n    current_value.sort_unstable();\n    for i in\
    \ &mut current_value {\n        let mut found = false;\n        for j in &mut\
    \ result {\n            if i == j {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if found == false {\n      \
    \      a.push(i);\n            result.push(i);\n        }\n    }\n    result.sort_unstable();\n\
    \    a\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj7lawqh0.rs:24:25\n   |\n\
    24 |             result.push(i);\n   |                         ^ expected `isize`,\
    \ found `&mut isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24\
    \ |             result.push(*i);\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj7lawqh0.rs:28:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n28 |     a\n   |     ^ expected\
    \ `isize`, found `&mut isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&mut isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 2 {\n        return x;\n    }\n\n    let mut set = std::collections::HashSet::new();\n\
    \    for elt in x {\n        set.insert(elt);\n    }\n\n    if set.len() <= 2\
    \ {\n        return vec![set.last().unwrap()];\n    }\n\n    let mut ans = vec![];\n\
    \    for (i, elt) in set.iter().enumerate() {\n        if i % 2 == 0 {\n     \
    \       ans.push(elt);\n        }\n    }\n\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `HashSet<isize>` is not an iterator\n   --> /tmp/tmp5el281ru.rs:20:25\n\
    \    |\n20  |           return vec![set.last().unwrap()];\n    |             \
    \              ^^^^ `HashSet<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `HashSet<isize>: Iterator`\n\
    \            which is required by `&mut HashSet<isize>: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5el281ru.rs:30:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n30 |     ans\n   |     ^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = x.clone();\n    let mut i = 0;\n    while i < v.len() {\n  \
    \      if v[i] % 2 == 0 {\n            v.remove(i);\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpyc0i2mcf.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ rev = vec![0; x.len()];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n\
    \    x.reverse();\n    for &x in x {\n        rev[x.digit() as usize] |= 1 <<\
    \ x.digit() as usize;\n    }\n    x.iter().cloned().filter(|&x| rev[x.digit()\
    \ as usize] == 0).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp1_pd4mb.rs:13:9\n   |\n\
    13 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: no method named\
    \ `digit` found for type `isize` in the current scope\n  --> /tmp/tmpp1_pd4mb.rs:16:41\n\
    \   |\n16 |     x.iter().cloned().filter(|&x| rev[x.digit() as usize] == 0).collect()\n\
    \   |                                         ^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&i|\
    \ i % 10 == 0).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpdzgd89ux.rs:10:39\n     |\n\
    10   |     x.iter().filter(|&i| i % 10 == 0).collect()\n     |               \
    \                        ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // The\
    \ array contains all the unique elements with their frequency count.\n    let\
    \ mut freq: HashMap::<isize, usize> = HashMap::new();\n    for i in x.iter() {\n\
    \        freq.entry(i).or_insert(0);\n        freq.entry(i).1 += 1;\n    }\n \
    \   \n    // Sort the frequency vector in descending order\n    let mut freq_sorted\
    \ = freq.iter().cloned().sort_by(|a, b| b.1.cmp(&a.1).reverse()).collect::<Vec<_>>();\n\
    \    \n    // Keep only the elements that have frequency count of 1\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in freq_sorted.iter() {\n      \
    \  if i.1 == 1 {\n            result.push(i.0);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmpl6nrfm2u.rs:11:19\n\
    \   |\n11 |     let mut freq: HashMap::<isize, usize> = HashMap::new();\n   |\
    \                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpl6nrfm2u.rs:11:45\n\
    \   |\n11 |     let mut freq: HashMap::<isize, usize> = HashMap::new();\n   |\
    \                                             ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    let mut y: Vec<isize> = x.clone();\n    for\
    \ i in x.iter_mut() {\n        if *i & 1 == 0 {\n            *i -= 1;\n      \
    \  } else {\n            *i = 0;\n        }\n    }\n    for i in y.iter_mut()\
    \ {\n        if *i & 1 == 0 {\n            *i -= 1;\n        } else {\n      \
    \      *i = 0;\n        }\n    }\n    x.iter().cloned().collect();\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0wd5xn73.rs:9:36\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |    -------------  \
    \                 ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n26 |     x.iter().cloned().collect();\n   |                             \
    \   - help: remove this semicolon\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&i|\
    \ i as isize % 10).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsorsqu4n.rs:10:26\n   |\n\
    10 |     x.iter().filter(|&i| i as isize % 10).cloned().collect()\n   |      \
    \                    ^^^^^^^^^^^^^^^ expected `bool`, found `isize`\n\nerror[E0606]:\
    \ casting `&isize` as `isize` is invalid\n  --> /tmp/tmpsorsqu4n.rs:10:26\n  \
    \ |\n10 |     x.iter().filter(|&i| i as isize % 10).cloned().collect()\n   | \
    \                         -^^^^^^^^^\n   |                          |\n   |  \
    \                        cannot cast `&isize` as `isize`\n   |               \
    \           help: dereference the expression: `*i`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0606.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.iter().any(|&x|\
    \ x < 0) {\n        panic!(\"x should be a positive integer.\")\n    }\n\n   \
    \ x.iter().filter(|&x| x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpwy_h64hq.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = x.clone();\n    v.sort_unstable();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp5tq0aajx.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ == 0 {\n        return vec![];\n    }\n    x.sort_unstable();\n    \n    let\
    \ mut unique_digits = Vec::new();\n    unique_digits.reserve(x.len());\n    for\
    \ element in x {\n        if element % 2 != 0 {\n            unique_digits.insert(element).unwrap();\n\
    \        }\n    }\n    \n    unique_digits\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp3wa6hvq1.rs:19:27\n     |\n19   |             unique_digits.insert(element).unwrap();\n\
    \     |                           ^^^^^^ ------- supplied 1 argument\n     | \
    \                          |\n     |                           expected 2 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0599]: no method named\
    \ `unwrap` found for unit type `()` in the current scope\n  --> /tmp/tmp3wa6hvq1.rs:19:43\n\
    \   |\n19 |             unique_digits.insert(element).unwrap();\n   |        \
    \                                   ^^^^^^ method not found in `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = vec![];\n    for num in x {\n        if num % 2 != 0 {\n\
    \            result.push(num);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmp03oau_kn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x.is_even()).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmps71d089g.rs:10:28\n   |\n10 |     x.iter().filter(|&x|\
    \ x.is_even()).collect()\n   |                            ^^^^^^^ method not found\
    \ in `&isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmps71d089g.rs:10:39\n\
    \     |\n10   |     x.iter().filter(|&x| x.is_even()).collect()\n     |      \
    \                                 ^^^^^^^ value of type `Vec<isize>` cannot be\
    \ built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = x.clone();\n    v.sort();\n    let mut x: Vec<isize> = vec![];\n    for\
    \ n in v {\n        if n % 2 == 0 {\n            x.push(n);\n        }\n    }\n\
    \    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpg05s2zd0.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = x.clone();\n    let mut set = HashSet::new();\n    v.sort_by_key(|&i| {\n\
    \        if i % 2 != 0 {\n            i.to_string().chars().count(|c| c.is_digit(10));\n\
    \        } else {\n            set.insert(i);\n            0\n        }\n    });\n\
    \    v.filter(|&i| {\n        set.contains(i) && set.iter().any(|&i| i /= 2)\n\
    \    });\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpr05v8pi3.rs:11:19\n   |\n11 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr05v8pi3.rs:14:35\n\
    \    |\n14  |             i.to_string().chars().count(|c| c.is_digit(10));\n \
    \   |                                   ^^^^^ ------------------ supplied 1 argument\n\
    \    |                                   |\n    |                            \
    \       expected 0 arguments\n    |\nnote: associated function defined here\n\n\
    error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpr05v8pi3.rs:20:7\n\
    \    |\n20  |       v.filter(|&i| {\n    |         ^^^^^^ `Vec<isize>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = Vec::new();\n\n    for &n in x {\n\
    \        if n % 10 == 0 {\n            digits.push(n % 10);\n        } else {\n\
    \            let idx = digits.len();\n            result.append(&digits[0..idx]);\n\
    \            digits.push(n % 10);\n        }\n    }\n\n    if result.len() ==\
    \ 0 {\n        return vec![];\n    }\n\n    let mut it = result.iter().cloned().collect::<Vec<_>>();\n\
    \    std::iter::filter(|&x| {\n        let mut it = &mut it.last().unwrap().iter().cloned();\n\
    \        it.take_while(|&y| {\n            *y % 10 != *x % 10\n        })\n  \
    \          .next()\n            .is_none()\n    }).cloned().collect::<Vec<_>>();\n\
    \n    result.sort_unstable();\n\n    result.iter().cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `filter` in module `std::iter`\n  -->\
    \ /tmp/tmp5rffer8f.rs:28:16\n   |\n28 |     std::iter::filter(|&x| {\n   |   \
    \             ^^^^^^ not found in `std::iter`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5rffer8f.rs:13:9\n   |\n13 |     for &n in x {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `n`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5rffer8f.rs:18:27\n\
    \   |\n18 |             result.append(&digits[0..idx]);\n   |                \
    \           ^^^^^^^^^^^^^^^ types differ in mutability\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                      found reference `&[_]`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ == 0 {\n        vec![]\n    } else {\n        let mut set = std::collections::HashSet::new();\n\
    \        for x in x.iter() {\n            if !set.contains(x) {\n            \
    \    set.insert(x);\n            }\n        }\n        let mut result = vec![];\n\
    \        for x in set.keys() {\n            if set[x] != x {\n               \
    \ result.push(set[x]);\n            }\n        }\n        result\n    }\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `keys` found for struct `HashSet` in the\
    \ current scope\n  --> /tmp/tmp1nn95ciz.rs:20:22\n   |\n20 |         for x in\
    \ set.keys() {\n   |                      ^^^^ method not found in `HashSet<&isize>`\n\
    \nerror[E0608]: cannot index into a value of type `HashSet<&isize>`\n  --> /tmp/tmp1nn95ciz.rs:21:16\n\
    \   |\n21 |             if set[x] != x {\n   |                ^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `HashSet<&isize>`\n  --> /tmp/tmp1nn95ciz.rs:22:29\n\
    \   |\n22 |                 result.push(set[x]);\n   |                       \
    \      ^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs = x.iter().cloned().collect::<Vec<_>>();\n    xs.sort();\n    xs.dedup_by(|&x|\
    \ x.to_digits().iter().filter(|&x| *x % 10).count());\n    xs\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n\
    \  --> /tmp/tmpx_mupn8b.rs:12:8\n   |\n12 |     xs.dedup_by(|&x| x.to_digits().iter().filter(|&x|\
    \ *x % 10).count());\n   |        ^^^^^^^^ ---- takes 1 argument\n   |       \
    \ |\n   |        expected closure that takes 2 arguments\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0593`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for e in x {\n        if e % 2 == 0 {\n            res.push(e);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp7d0rppwb.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for e in x.iter() {\n        if e.len() <= 1 {\n        \
    \    continue;\n        }\n        let digits = vec![e[..1].to_string()];\n  \
    \      for i in 1..e.len() {\n            if digits[i - 1] == digits[i] {\n  \
    \              digits.remove(&digits[i - 1]);\n            }\n        }\n    \
    \    for digit in digits {\n            res.push(digit);\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp3fyz9wd2.rs:12:14\n   |\n12 |         if e.len()\
    \ <= 1 {\n   |              ^^^ method not found in `&isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `&isize`\n  --> /tmp/tmp3fyz9wd2.rs:15:27\n\
    \   |\n15 |         let digits = vec![e[..1].to_string()];\n   |             \
    \              ^^^^^^\n\nerror[E0599]: no method named `len` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmp3fyz9wd2.rs:16:23\n   |\n16 | \
    \        for i in 1..e.len() {\n   |                       ^^^ method not found\
    \ in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3fyz9wd2.rs:18:31\n\
    \   |\n18 |                 digits.remove(&digits[i - 1]);\n   |             \
    \                  ^^^^^^^^^^^^^^ expected `usize`, found reference\n   |\n  \
    \ = note:   expected type `usize`\n           found reference `&_`\nhelp: consider\
    \ removing the borrow\n   |\n18 -                 digits.remove(&digits[i - 1]);\n\
    18 +                 digits.remove(digits[i - 1]);\n   | \n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n\
    \    let mut counter = HashMap::new();\n    let mut result = Vec::new();\n   \
    \ for i in x {\n        let mut is_even = true;\n        let mut last_digit =\
    \ 0;\n        for j in 0..i {\n            let current_digit = i / pow(10, j);\n\
    \            if current_digit % 2 == 0 {\n                is_even = false;\n \
    \               break;\n            }\n            last_digit = current_digit;\n\
    \        }\n        if is_even && counter != None {\n            if let Some(digit)\
    \ = counter.get(&last_digit) {\n                result.push(digit);\n        \
    \    }\n        }\n        if is_even {\n            counter.insert(i, i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp7yjwzkz9.rs:11:23\n   |\n11 |     let mut counter = HashMap::new();\n\
    \   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0425]:\
    \ cannot find function `pow` in this scope\n  --> /tmp/tmp7yjwzkz9.rs:17:37\n\
    \   |\n17 |             let current_digit = i / pow(10, j);\n   |            \
    \                         ^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x.is_odd()).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpdtp0oul1.rs:10:28\n   |\n10 |     x.iter().filter(|&x|\
    \ x.is_odd()).collect()\n   |                            ^^^^^^ method not found\
    \ in `&isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpdtp0oul1.rs:10:38\n\
    \     |\n10   |     x.iter().filter(|&x| x.is_odd()).collect()\n     |       \
    \                               ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028204
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ u: usize = 0;\n    let mut counter: usize = 0;\n\n    while counter < x.len()\
    \ {\n        if x[counter] % 2 == 0 {\n            x[counter] = 0;\n        }\
    \ else {\n            x[counter] = u;\n            counter++;\n        }\n\n \
    \       u /= 10;\n    }\n\n    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp9udrcij3.rs:18:20\n\
    \   |\n18 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n18 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    18 -             counter++;\n18 +             counter += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9udrcij3.rs:17:26\n   |\n17 |             x[counter]\
    \ = u;\n   |             ----------   ^ expected `isize`, found `usize`\n   |\
    \             |\n   |             expected due to the type of this binding\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // We\
    \ use a set as we don't want to repeat the digit in case of duplicates.\n    let\
    \ mut set = Set::new();\n\n    for element in x {\n        // We skip non digit\
    \ characters, to avoid false positives\n        if element < 10 {\n          \
    \  continue;\n        }\n\n        // We remove digits to prevent false negatives\n\
    \        let digit = element % 10;\n        if set.is_none() && digit % 2 != 0\
    \ {\n            set.insert(element);\n        }\n    }\n\n    // We return the\
    \ vector sorted in ascending order\n    let mut result = Vec::new();\n    for\
    \ element in set {\n        result.push(element);\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmpwiry2ng0.rs:11:19\n\
    \   |\n11 |     let mut set = Set::new();\n   |                   ^^^ use of undeclared\
    \ type `Set`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 1 {\n        return x;\n    }\n\n    let mut y: Vec<isize> = x.clone(); //\
    \ make a copy of x\n    let mut last: usize = 0;\n    let mut temp: usize = 0;\n\
    \    for n in &mut y {\n        while n >= 10 {\n            temp *= 10;\n   \
    \         temp += n % 10;\n            n /= 10;\n        }\n        last = (last\
    \ as usize) * 10 + n;\n    }\n    y.sort_unstable_by(|a, b| {\n        if a >\
    \ b {\n            1\n        } else if a < b {\n            -1\n        } else\
    \ {\n            if last < b {\n                -1\n            } else {\n   \
    \             1\n            }\n        }\n    });\n    y\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp211rkk6u.rs:18:20\n   |\n\
    18 |         while n >= 10 {\n   |                    ^^\n   |               \
    \     |\n   |                    expected `&mut isize`, found integer\n   |  \
    \                  help: consider mutably borrowing here: `&mut 10`\n\nerror[E0369]:\
    \ cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp211rkk6u.rs:20:23\n  \
    \ |\n20 |             temp += n % 10;\n   |                     - ^ -- {integer}\n\
    \   |                     |\n   |                     &mut isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `n`\n   |\n20 |            \
    \ temp += *n % 10;\n   |                     +\n\nerror[E0368]: binary assignment\
    \ operation `/=` cannot be applied to type `&mut isize`\n  --> /tmp/tmp211rkk6u.rs:21:13\n\
    \   |\n21 |             n /= 10;\n   |             -^^^^^^\n   |             |\n\
    \   |             cannot use `/=` on type `&mut isize`\n   |\nhelp: `/=` can be\
    \ used on `isize`, you can dereference `n`\n   |\n21 |             *n /= 10;\n\
    \   |             +\n\nerror[E0277]: cannot add `&mut isize` to `usize`\n  -->\
    \ /tmp/tmp211rkk6u.rs:23:37\n   |\n23 |         last = (last as usize) * 10 +\
    \ n;\n   |                                     ^ no implementation for `usize\
    \ + &mut isize`\n   |\n   = help: the trait `Add<&mut isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp211rkk6u.rs:27:13\n\
    \   |\n27 |             1\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp211rkk6u.rs:29:13\n\
    \   |\n29 |             -1\n   |             ^^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp211rkk6u.rs:3"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = x;\n    v.sort();\n    let mut vv = vec![];\n    while !vv.is_empty() {\n\
    \        let mut vcurr = vv.remove(0);\n        let mut vcurr = vcurr.clone();\n\
    \        vcurr.sort();\n        for i in vv {\n            if *i % *vcurr != 0\
    \ {\n                vcurr.push(*i);\n                break;\n            }\n\
    \        }\n        vcurr = vcurr.clone();\n        vv.push(vcurr.clone());\n\
    \    }\n    vv\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n  --> /tmp/tmphl7s7vff.rs:15:25\n\
    \   |\n12 |     let mut vv = vec![];\n   |         ------ consider giving `vv`\
    \ the explicit type `Vec<T>`, with the type parameters specified\n...\n15 |  \
    \       let mut vcurr = vcurr.clone();\n   |                         ^^^^^ cannot\
    \ infer type\n   |\n   = note: type must be known at this point\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_nums: Vec<isize> = Vec::new();\n    for num in x {\n        let mut num:\
    \ isize = 0;\n        while num != 0 {\n            num = num % 10;\n        \
    \    unique_nums.push(num);\n        }\n    }\n    unique_nums\n        .iter()\n\
    \        .cloned()\n        .sorted()\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpeve9s19r.rs:21:10\n   |\n21 |         .sorted()\n\
    \   |          ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y: Vec<isize> = Vec::new();\n    loop {\n        let mut z: Vec<isize> = Vec::new();\n\
    \        for &n in x {\n            if n.is_even() {\n                z.push(n);\n\
    \            }\n        }\n        if z.len() != 0 {\n            y.push(z.clone());\n\
    \        }\n        if z.len() == 0 {\n            break;\n        }\n    }\n\
    \    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyifkgg5a.rs:13:13\n   |\n\
    13 |         for &n in x {\n   |             ^^    - this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `n`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyifkgg5a.rs:19:20\n   |\n19 |\
    \             y.push(z.clone());\n   |                    ^^^^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x.is_odd()).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpvvpp3tct.rs:10:28\n   |\n10 |     x.iter().filter(|&x|\
    \ x.is_odd()).cloned().collect()\n   |                            ^^^^^^ method\
    \ not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = x.clone();\n    result.sort_unstable();\n    for ele in\
    \ &result {\n        if ele % 2 == 0 {\n            result.remove(&ele);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp89fgssve.rs:14:27\n   |\n\
    14 |             result.remove(&ele);\n   |                           ^^^^ expected\
    \ `usize`, found `&&isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ digits = x.clone();\n    let mut result = x.clone();\n    while !digits.is_empty()\
    \ {\n        if digits[0] % 2 == 0 {\n            digits.remove(0);\n        }\
    \ else {\n            result.push(digits[0]);\n            digits.remove(0);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1, 15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp4dvhyjqw.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut evens = vec![];\n    for i in x.iter() {\n   \
    \     if i.is_even() {\n            evens.push(i);\n        }\n    }\n    for\
    \ e in evens.iter() {\n        if result.contains(&e) {\n            continue;\n\
    \        }\n        result.push(e);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpxx11p34o.rs:13:14\n   |\n13 |         if i.is_even()\
    \ {\n   |              ^^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxx11p34o.rs:23:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n23 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&&isize`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \            found struct `Vec<&&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_x = x.iter().cloned().collect::<Vec<_>>();\n    sorted_x.sort_unstable();\n\
    \n    let mut ans = vec![];\n    while sorted_x.len() != 0 {\n        let mut\
    \ idx = sorted_x.len() - 1;\n        while idx > 0 && sorted_x[idx].is_even()\
    \ {\n            idx -= 1;\n        }\n        ans.push(sorted_x[idx]);\n    \
    \    sorted_x.remove(idx);\n    }\n    ans.sort_unstable();\n    ans\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmphnefhxu2.rs:16:40\n   |\n16 |         while idx > 0 &&\
    \ sorted_x[idx].is_even() {\n   |                                        ^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = vec![0; x.len()];\n    for &n in x {\n        let mut n = n;\n       \
    \ while n > 10 {\n            n /= 10;\n        }\n        if n % 2 == 0 {\n \
    \           ans.push(n);\n        }\n    }\n    ans.sort();\n    return ans;\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp280m2_qz.rs:11:9\n   |\n\
    11 |     for &n in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n    for v in x.iter() {\n        if v % 2 == 0\
    \ {\n            unique_digits.insert(v);\n        }\n    }\n    unique_digits.sort();\n\
    \    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpxd82i6xt.rs:13:27\n     |\n13   |             unique_digits.insert(v);\n\
    \     |                           ^^^^^^ - supplied 1 argument\n     |       \
    \                    |\n     |                           expected 2 arguments\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 1 {\n        return x;\n    }\n\n    let mut vec = Vec::new();\n    let mut\
    \ digit = vec![0; x.len()];\n\n    for &i in x {\n        digit[i] = i as isize\
    \ - 1;\n    }\n\n    let mut count = 0;\n    for i in x {\n        if digit[i]\
    \ % 2 == 0 {\n            vec.push(i);\n            digit[i/2] /= 2;\n       \
    \ } else {\n            count++;\n        }\n    }\n\n    for i in 0..count {\n\
    \        vec.push(vec.pop() + vec[0]);\n    }\n\n    vec\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmplzn_yu70.rs:27:18\n\
    \   |\n27 |             count++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n27 |             { let tmp =\
    \ count; count += 1; tmp };\n   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    27 -             count++;\n27 +             count += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplzn_yu70.rs:17:9\n   |\n17 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplzn_yu70.rs:23:12\n   |\n23 |  \
    \       if digit[i] % 2 == 0 {\n   |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplzn_yu70.rs:25:13\n   |\n25 |  \
    \           digit[i/2] /= 2;\n   |             ^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0369]: cannot add `isize` to `Option<isize>`\n\
    \  --> /tmp/tmplzn_yu70.rs:32:28\n   |\n32 |         vec.push(vec.pop() + vec[0]);\n\
    \   |                  --------- ^ ------ isize\n   |                  |\n   |\
    \                  Option<isize>\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `ru"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = vec![0; x.len()];\n    let mut x: Vec<isize> = x.to_owned();\n\
    \    \n    v.iter().cloned().for_each(|x|{\n        if x%10 == 0 {\n         \
    \   let y = x%10;\n            if y%2 == 0 {\n                v.push(y);\n   \
    \         }\n        }\n    });\n    v.sort_unstable();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpvkipmidt.rs:11:13\n   |\n\
    11 |     let mut x: Vec<isize> = x.to_owned();\n   |             ^ help: if this\
    \ is intentional, prefix it with an underscore: `_x`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpvkipmidt.rs:11:9\n\
    \   |\n11 |     let mut x: Vec<isize> = x.to_owned();\n   |         ----^\n  \
    \ |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `v` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmpvkipmidt.rs:13:32\n   |\n13 |     v.iter().cloned().for_each(|x|{\n\
    \   |     --------          -------- ^^^ mutable borrow occurs here\n   |    \
    \ |                 |\n   |     |                 immutable borrow later used\
    \ by call\n   |     immutable borrow occurs here\n...\n17 |                 v.push(y);\n\
    \   |                 - second borrow occurs due to use of `v` in closure\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            ret.push(i);\n\
    \        }\n    }\n    ret.sort();\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn0byn3ay.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for num in x {\n        // If num has no even digit,\
    \ keep it\n        if num % 2 == 0 {\n            result.push(num);\n        }\n\
    \    }\n    // Sort x in increasing order and return result\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpqooomwr6.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable();\n\
    \    let mut v = Vec::new();\n    let mut current_num = 0;\n    \n    for num\
    \ in x.iter() {\n        if num % 2 == 0 {\n            current_num += 1;\n  \
    \      } else {\n            current_num = 0;\n        }\n        \n        if\
    \ current_num == 0 {\n            v.push(num);\n        }\n    }\n    \n    v\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcigt0ado.rs:26:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    26 |     v\n   |     ^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter_map(|x|\
    \ {\n        if x.is_multiple_of_two() {\n            Some(x)\n        } else\
    \ {\n            None\n        }\n    }).collect::<Vec<isize>>()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_multiple_of_two` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmpiii88ipm.rs:11:14\n   |\n11 | \
    \        if x.is_multiple_of_two() {\n   |              ^^^^^^^^^^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpiii88ipm.rs:16:8\n\
    \     |\n16   |     }).collect::<Vec<isize>>()\n     |        ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().map(|x|\
    \ {\n        if x % 10 != 0 {\n            x\n        } else {\n            let\
    \ mut it = x.clone();\n            it.dedup();\n            it\n        }\n  \
    \  }).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmg5xptox.rs:15:16\n   |\n15 |             it.dedup();\n\
    \   |                ^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique_digits = Vec::new();\n\n    for &x in x {\n        if x % 2 == 0 {\n\
    \            unique_digits.push(x);\n        }\n    }\n\n    unique_digits.sort_unstable();\n\
    \n    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph03twssh.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 1 {\n        return x;\n    }\n\n    let mut ans = vec![];\n    let mut seen\
    \ = vec![];\n    for i in x.iter() {\n        if seen.contains(i) {\n        \
    \    continue;\n        }\n        let mut is_even = false;\n        for j in\
    \ 0..i.isize {\n            if j == i {\n                continue;\n         \
    \   }\n            if x[j] % i == 0 {\n                is_even = true;\n     \
    \           break;\n            }\n        }\n        if is_even {\n         \
    \   ans.push(i);\n            seen.push(i);\n        }\n    }\n    ans.sort();\n\
    \    ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `isize` on type `&isize`\n  --> /tmp/tmp23p8wcv6.rs:21:23\n\
    \   |\n21 |         for j in 0..i.isize {\n   |                       ^^^^^\n\n\
    error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp23p8wcv6.rs:22:18\n\
    \   |\n22 |             if j == i {\n   |                  ^^ no implementation\
    \ for `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp23p8wcv6.rs:25:16\n   |\n25 |         \
    \    if x[j] % i == 0 {\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp23p8wcv6.rs:32:23\n\
    \   |\n32 |             seen.push(i);\n   |                       ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n32 |  \
    \           seen.push(*i);\n   |                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp23p8wcv6.rs:36:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n36 |     ans\n   |     ^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = Vec::new();\n    x.sort_unstable();\n    let mut n: isize =\
    \ 0;\n    v.push(0);\n    \n    loop {\n        \n        match v.pop() {\n  \
    \          None => break,\n            Some(i) => {\n                if n % i\
    \ == 0 {\n                    v.push(i);\n                    n += i;\n      \
    \          } else {\n                    v.push(i);\n                    n -=\
    \ i;\n                }\n            }\n        }\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpmq5jdvxd.rs:11:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n10 |     let mut v: Vec<isize> = Vec::new();\n11 |     x.sort_unstable();\n\
    \   |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = Vec::new();\n    v.push(x[0]);\n    let mut m = 1;\n    for &x in x {\n\
    \        for &n in v {\n            if n == x {\n                m *= 10;\n  \
    \              v.push(x);\n                break;\n            }\n        }\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn42pvyvq.rs:13:9\n   |\n\
    13 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn42pvyvq.rs:14:13\n   |\n14 |         for &n in v {\n   |     \
    \        ^^    - this expression has type `Option<isize>`\n   |             |\n\
    \   |             expected `isize`, found reference\n   |             help: you\
    \ can probably remove the explicit borrow: `n`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x.is_multiple_of_digits() as usize == 0).collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_multiple_of_digits` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmpqyb4s442.rs:10:28\n   |\n10 | \
    \    x.iter().filter(|&x| x.is_multiple_of_digits() as usize == 0).collect()\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^ method not found in `&isize`\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpqyb4s442.rs:10:67\n     |\n\
    10   |     x.iter().filter(|&x| x.is_multiple_of_digits() as usize == 0).collect()\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().map(|x|\n\
    \        if x.is_even() {\n            x\n        } else {\n            x.digits().collect()\n\
    \        }\n    ).distinct().collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpzyobgehz.rs:11:14\n   |\n11 |         if x.is_even()\
    \ {\n   |              ^^^^^^^ method not found in `&isize`\n\nerror[E0599]: no\
    \ method named `digits` found for reference `&isize` in the current scope\n  -->\
    \ /tmp/tmpzyobgehz.rs:14:15\n   |\n14 |             x.digits().collect()\n   |\
    \               ^^^^^^ method not found in `&isize`\n\nerror[E0599]: no method\
    \ named `distinct` found for struct `Map` in the current scope\n  --> /tmp/tmpzyobgehz.rs:16:7\n\
    \   |\n16 |     ).distinct().collect()\n   |       ^^^^^^^^ method not found in\
    \ `Map<std::slice::Iter<'_, isize>, _>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for v in x {\n        if seen.contains(&v % 10) {\n            continue;\n\
    \        }\n        seen.insert(v % 10);\n        result.push(v % 10);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpnx9hgmuj.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpnx9hgmuj.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = vec![];\n    let mut digits: Vec<isize> = x.clone(); // Make\
    \ a copy of input vector\n    let mut last_digit: usize = 0; // Last digit as\
    \ of now \n    let mut x: Vec<isize> = x.clone(); // Make a copy of input vector\n\
    \    while x.len() > 0 {\n        last_digit = digits[0];\n        ret.push(last_digit);\n\
    \        // Remove the digit from vector\n        x.remove(0)\n        // Go to\
    \ next digit\n        digits = digits.clone();\n        // Remove from vector\
    \ if its even \n        // and add to ret if its not \n        while x.len() >\
    \ 0 {\n            if digits[0] % 2 == 0 {\n                ret.push(digits[0]);\n\
    \                break;\n            }\n            x.remove(0);\n           \
    \ digits = digits.clone();\n        }\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `digits`\n  --> /tmp/tmp5v7me4ef.rs:18:20\n\
    \   |\n18 |         x.remove(0)\n   |                    ^ help: add `;` here\n\
    19 |         // Go to next digit\n20 |         digits = digits.clone();\n   |\
    \         ------ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5v7me4ef.rs:15:22\n\
    \   |\n12 |     let mut last_digit: usize = 0; // Last digit as of now \n   |\
    \                         ----- expected due to this type\n...\n15 |         last_digit\
    \ = digits[0];\n   |                      ^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5v7me4ef.rs:16:18\n   |\n16 |\
    \         ret.push(last_digit);\n   |                  ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |         ret.push(last_digit.try_into().unwrap());\n\
    \   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5v7me4ef.rs:18:9\n   |\n18 |         x.remove(0)\n   |\
    \         ^^^^^^^^^^^- help: consider using a semicolon here\n   |         |\n\
    \   |         expected `()`, found `isize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret = vec![];\n    for i in x {\n        let mut j = i;\n        while let Some(k)\
    \ = j.checked_sub(divisor_of(&j)) {\n            ret = vec![i + k];\n        }\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `divisor_of` in this scope\n  --> /tmp/tmp73e3013t.rs:13:43\n\
    \   |\n13 |         while let Some(k) = j.checked_sub(divisor_of(&j)) {\n   |\
    \                                           ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ digits: HashSet<isize> = HashSet::new();\n    let mut x: Vec<isize> = x;\n \
    \   while !x.is_empty() {\n        if digits.contains(&x[0]) {\n            x.remove(0);\n\
    \        } else {\n            digits.push(0);\n        }\n    }\n    x\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp3lsb3e2l.rs:10:21\n\
    \   |\n10 |     let mut digits: HashSet<isize> = HashSet::new();\n   |       \
    \              ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp3lsb3e2l.rs:10:38\n\
    \   |\n10 |     let mut digits: HashSet<isize> = HashSet::new();\n   |       \
    \                               ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = x.to_vec();\n    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    v.sort_unstable();\n    seen.resize(x.len(), true);\n    for e in &v {\n\
    \        if !seen.contains(&e % 10) {\n            seen.insert(e % 10);\n    \
    \    }\n    }\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpks4zdjbd.rs:11:19\n\
    \   |\n11 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpks4zdjbd.rs:11:36\n\
    \   |\n11 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpks4zdjbd.rs:15:30\n   |\n\
    15 |         if !seen.contains(&e % 10) {\n   |                           -- ^\
    \ -- {integer}\n   |                           |\n   |                       \
    \    &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `&e`\n\
    \   |\n15 |         if !seen.contains(*&e % 10) {\n   |                      \
    \     +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0369, E0412, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in x.into_iter() {\n        // If any element has\
    \ any odd digit, we will remove it.\n        if i % 2 != 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpylsklwul.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n\n  \
    \  for i in x.iter().cloned() {\n        if i % 2 == 0 {\n            let num\
    \ = i / 10;\n            if ret.is_empty() {\n                ret = vec![num];\n\
    \            } else {\n                let mut last = ret[0];\n              \
    \  for (idx, _) in ret.iter().enumerate() {\n                    if num == last\
    \ + idx {\n                        continue;\n                    }\n        \
    \            last = num + idx;\n                    ret.push(num + idx);\n   \
    \             }\n            }\n        }\n    }\n\n    ret\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr75ngiha.rs:21:38\n   |\n\
    21 |                     if num == last + idx {\n   |                        \
    \              ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add\
    \ `usize` to `isize`\n  --> /tmp/tmpr75ngiha.rs:21:36\n   |\n21 |            \
    \         if num == last + idx {\n   |                                    ^ no\
    \ implementation for `isize + usize`\n   |\n   = help: the trait `Add<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr75ngiha.rs:24:34\n\
    \   |\n24 |                     last = num + idx;\n   |                      \
    \            ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize`\
    \ to `isize`\n  --> /tmp/tmpr75ngiha.rs:24:32\n   |\n24 |                    \
    \ last = num + idx;\n   |                                ^ no implementation for\
    \ `isize + usize`\n   |\n   = help: the trait `Add<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr75ngiha.rs:25:36\n\
    \   |\n25 |                     ret.push(num + idx);\n   |                   \
    \                 ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ add `usize` to `isize`\n  --> /tmp/tmpr75ngiha.rs:25:34\n   |\n25 |        \
    \             ret.push(num + idx);\n   |                                  ^ no\
    \ impleme"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = x;\n    let mut n = x.len();\n    let mut result = vec![];\n\n    while\
    \ n > 0 {\n        let a = v.pop();\n        for b in v.drain(..n) {\n       \
    \     if a % b == 0 {\n                v.push(a);\n                result.push(a);\n\
    \                break;\n            }\n        }\n        n--;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp8as9hrbw.rs:23:12\n\
    \   |\n23 |         n--;\n   |            ^ expected expression\n\nerror[E0369]:\
    \ cannot mod `Option<isize>` by `isize`\n  --> /tmp/tmp8as9hrbw.rs:17:18\n   |\n\
    17 |             if a % b == 0 {\n   |                - ^ - isize\n   |      \
    \          |\n   |                Option<isize>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8as9hrbw.rs:18:24\n   |\n18 |                 v.push(a);\n   |\
    \                        ^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8as9hrbw.rs:25:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in x {\n        let mut tmp: Vec<isize> = vec![];\n\
    \        let mut cnt = 0;\n        while cnt < 10 {\n            if i / cnt %\
    \ 2 == 0 {\n                tmp.push(cnt);\n                cnt += 1;\n      \
    \      }\n            cnt += 1;\n        }\n        if tmp.len() == 0 {\n    \
    \        result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to divide by zero'', /tmp/tmphqo9anuw.rs:15:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028206
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = x.clone();\n    let mut seen = HashSet::new();\n    for &i in &result\
    \ {\n        if !seen.contains(i) {\n            seen.insert(i);\n        }\n\
    \    }\n    seen\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpv2hrqrnt.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = x.to_owned();\n    let mut result = x.clone();\n    for num in x.iter().cloned()\
    \ {\n        if num % 2 == 0 {\n            result.erase(remove(&result, num));\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove` in this scope\n  --> /tmp/tmpwaviinuo.rs:14:26\n\
    \   |\n14 |             result.erase(remove(&result, num));\n   |            \
    \              ^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `erase` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpwaviinuo.rs:14:20\n\
    \   |\n14 |             result.erase(remove(&result, num));\n   |            \
    \        ^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|x|\
    \ x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp_a0s5kpx.rs:10:27\n\
    \   |\n10 |     x.iter().filter(|x| x % 2 == 0).cloned().collect()\n   |     \
    \                    - ^ - {integer}\n   |                         |\n   |   \
    \                      &&isize\n   |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `x`\n   |\n10 |     x.iter().filter(|x| *x % 2 == 0).cloned().collect()\n\
    \   |                         +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut cur = x.iter().peekable().peek();\n    \n\
    \    if let Some(mut val) = (*cur).clone() {\n        if val % 2 == 0 {\n    \
    \        result.push(val);\n            \n            while let Some(mut val)\
    \ = (*cur).clone() {\n                if val % 2 != 0 {\n                    break;\n\
    \                }\n                result.push(val);\n            }\n       \
    \ } else {\n            result.push(*cur);\n        }\n    }\n    \n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Option<&&isize>` cannot be dereferenced\n  --> /tmp/tmpecoust4o.rs:13:28\n\
    \   |\n13 |     if let Some(mut val) = (*cur).clone() {\n   |                \
    \            ^^^^^^\n\nerror[E0614]: type `Option<&&isize>` cannot be dereferenced\n\
    \  --> /tmp/tmpecoust4o.rs:17:39\n   |\n17 |             while let Some(mut val)\
    \ = (*cur).clone() {\n   |                                       ^^^^^^\n\nerror[E0614]:\
    \ type `Option<&&isize>` cannot be dereferenced\n  --> /tmp/tmpecoust4o.rs:24:25\n\
    \   |\n24 |             result.push(*cur);\n   |                         ^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.to_owned();\n    x.sort();\n    x.dedup();\n    x\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpg228b3l5.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028206
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpgscps27e.rs:10:38\n     |\n\
    10   |     x.iter().filter(|&x| x % 2 == 0).collect()\n     |                \
    \                      ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n\
    \    x.iter().filter(|x| *x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp486j06j3.rs:11:38\n     |\n\
    11   |     x.iter().filter(|x| *x % 2 == 0).collect()\n     |                \
    \                      ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter_map(|&x|\
    \ x % 10).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9yk13ta1.rs:10:30\n   |\n\
    10 |     x.iter().filter_map(|&x| x % 10).cloned().collect()\n   |           \
    \                   ^^^^^^ expected enum `Option`, found `isize`\n   |\n   = note:\
    \ expected enum `Option<_>`\n              found type `isize`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n10 |     x.iter().filter_map(|&x| Some(x % 10)).cloned().collect()\n\
    \   |                              +++++      +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp85ke6og7.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n\n    for digit in x.iter().cloned() {\n        if digit\
    \ % 2 == 0 {\n            result.push(digit);\n        }\n    }\n\n    result.sort_unstable_by_key(|x|\
    \ x);\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: lifetime may not live long enough\n  --> /tmp/tmp4chlexyw.rs:18:37\n\
    \   |\n18 |     result.sort_unstable_by_key(|x| x);\n   |                    \
    \              -- ^ returning this value requires that `'1` must outlive `'2`\n\
    \   |                                  ||\n   |                              \
    \    |return type of closure is &'2 isize\n   |                              \
    \    has type `&'1 isize`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut cur_digit = 0;\n    let mut cur_digit2 = 0;\n\
    \    for num in x.iter() {\n        if num % 2 == 0 {\n            result.push(num);\n\
    \        } else {\n            if cur_digit != 0 {\n                if cur_digit\
    \ % 2 == 0 {\n                    cur_digit2 += 1;\n                } else {\n\
    \                    cur_digit2 = 0;\n                }\n            }\n     \
    \       cur_digit += 1;\n        }\n    }\n    if cur_digit != 0 {\n        if\
    \ cur_digit % 2 == 0 {\n            cur_digit2 += 1;\n        } else {\n     \
    \       cur_digit2 = 0;\n        }\n    }\n    result.push(cur_digit);\n    result.push(cur_digit2);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxxjkf0pz.rs:34:17\n   |\n\
    34 |     result.push(cur_digit);\n   |                 ^^^^^^^^^\n   |       \
    \          |\n   |                 expected `&isize`, found integer\n   |    \
    \             help: consider borrowing here: `&cur_digit`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxxjkf0pz.rs:35:17\n   |\n35 |     result.push(cur_digit2);\n\
    \   |                 ^^^^^^^^^^\n   |                 |\n   |               \
    \  expected `&isize`, found integer\n   |                 help: consider borrowing\
    \ here: `&cur_digit2`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxjkf0pz.rs:36:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n36 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ vec = Vec::new();\n    let mut unique_map = HashMap::new();\n    let mut i =\
    \ x.len();\n    while i > 0 {\n        let element = &x[i as usize];\n       \
    \ vec.push(element);\n        unique_map.insert(element, true);\n        i /=\
    \ 10;\n    }\n    vec.sort_unstable_by_key(|v| v.0);\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpls6uypk4.rs:11:26\n   |\n11 |     let mut unique_map = HashMap::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0609]:\
    \ no field `0` on type `&&isize`\n  --> /tmp/tmpls6uypk4.rs:19:36\n   |\n19 |\
    \     vec.sort_unstable_by_key(|v| v.0);\n   |                               \
    \     ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpls6uypk4.rs:20:5\n  \
    \ |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |              \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n20 |     vec\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433, E0609.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    let mut counter: usize = 0;\n\n    for\
    \ &x in x {\n        if x % 2 == 0 {\n            result.push(x);\n        } else\
    \ {\n            counter += 1;\n        }\n        if counter > result.len() {\n\
    \            result.push(x);\n            counter = 0;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxm5b64n6.rs:13:9\n   |\n\
    13 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x.0 % 2 == 0).collect::<Vec<isize>>().sort_unstable()\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `&isize`\n  --> /tmp/tmpqie9hlcy.rs:10:28\n\
    \   |\n10 |     x.iter().filter(|&x| x.0 % 2 == 0).collect::<Vec<isize>>().sort_unstable()\n\
    \   |                            ^\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpqie9hlcy.rs:10:40\n\
    \     |\n10   |     x.iter().filter(|&x| x.0 % 2 == 0).collect::<Vec<isize>>().sort_unstable()\n\
    \     |                                        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqie9hlcy.rs:10:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    10 |     x.iter().filter(|&x| x.0 % 2 == 0).collect::<Vec<isize>>().sort_unstable()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = vec![0; x.len()];\n    let mut i = 1;\n\n    for v in &x {\n        if\
    \ i <= v {\n            i += 1;\n        } else {\n            ans[v - 1] = 1;\n\
    \        }\n    }\n\n    for v in self.clone() {\n        if ans[v - 2] != 1 {\n\
    \            ans[v - 1] = 1;\n        }\n    }\n    ans.into_iter().map(|x| x\
    \ as isize).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0424]: expected value, found module `self`\n  --> /tmp/tmp_afbe413.rs:21:14\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |    -------------\
    \ this function can't have a `self` parameter\n...\n21 |     for v in self.clone()\
    \ {\n   |              ^^^^ `self` value is a keyword only available in methods\
    \ with a `self` parameter\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmp_afbe413.rs:14:14\n   |\n14 |         if i <= v {\n   |       \
    \       ^^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `PartialOrd<Rhs>`:\n     \
    \        f32\n             f64\n             i128\n             i16\n        \
    \     i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp_afbe413.rs:17:13\n   |\n17 |             ans[v - 1] = 1;\n   |\
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0424.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len()\
    \ <= 2 {\n        return x\n    }\n    let mut res = Vec::new();\n    let mut\
    \ count = x.iter().filter(|&x| x % 10 == 0).count();\n    let mut digit = x.iter().filter(|&x|\
    \ x % 10 != 0).count();\n    while digit != 0 {\n        if digit == 2 {\n   \
    \         res.push(x[0]);\n            x.remove(0);\n            digit = 0;\n\
    \        }\n        x.remove(0);\n        digit /= 10;\n    }\n    res.push(x[0]);\n\
    \    x.remove(0);\n    res.sort_unstable();\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `count`\n  --> /tmp/tmp9u0111u3.rs:14:13\n  \
    \ |\n14 |     let mut count = x.iter().filter(|&x| x % 10 == 0).count();\n   |\
    \             ^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_count`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning:\
    \ variable does not need to be mutable\n  --> /tmp/tmp9u0111u3.rs:14:9\n   |\n\
    14 |     let mut count = x.iter().filter(|&x| x % 10 == 0).count();\n   |    \
    \     ----^^^^^\n   |         |\n   |         help: remove this `mut`\n   |\n\
    \   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0596]: cannot borrow\
    \ `x` as mutable, as it is not declared as mutable\n  --> /tmp/tmp9u0111u3.rs:19:13\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \      - help: consider changing this to be mutable: `mut x`\n...\n19 |      \
    \       x.remove(0);\n   |             ^^^^^^^^^^^ cannot borrow as mutable\n\n\
    error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp9u0111u3.rs:22:9\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n...\n22 |         x.remove(0);\n   |         ^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror[E0596]: cannot borrow `x` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp9u0111u3.rs:26:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                  - help: consider changing this to be\
    \ mutable: `mut x`\n...\n26 |     x.remove(0);\n   |     ^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x_copy = x;\n    x_copy.sort();\n    for i in x_copy.into_iter().rev() {\n \
    \       if x_copy.iter().any(|&x| *x == i & !x.is_even()) {\n            x_copy.retain(|&x|\
    \ *x == i & !x.is_even());\n        }\n    }\n    x_copy\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpkch77u4q.rs:13:35\n\
    \   |\n13 |         if x_copy.iter().any(|&x| *x == i & !x.is_even()) {\n   |\
    \                                   ^^\n\nerror[E0599]: no method named `is_even`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpkch77u4q.rs:13:48\n\
    \   |\n13 |         if x_copy.iter().any(|&x| *x == i & !x.is_even()) {\n   |\
    \                                                ^^^^^^^ method not found in `isize`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpkch77u4q.rs:14:32\n\
    \   |\n14 |             x_copy.retain(|&x| *x == i & !x.is_even());\n   |    \
    \                            ^^\n\nerror[E0599]: no method named `is_even` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpkch77u4q.rs:14:45\n   |\n\
    14 |             x_copy.retain(|&x| *x == i & !x.is_even());\n   |           \
    \                                  ^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ digits = x;\n    let mut sorted_x = vec![];\n    while !digits.is_empty() {\n\
    \        let digit = digits.iter().filter(|&x| x % 2 == 0).count();\n        if\
    \ digit > 1 {\n            sorted_x.push(digits.iter().filter(|&x| x % 2 == 0).next().unwrap());\n\
    \        }\n        digits.remove(0); // remove the first element (first digit)\n\
    \    }\n    sorted_x\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkpk44s51.rs:19:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    19 |     sorted_x\n   |     ^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ set = HashSet::new();\n    x.iter().filter(|&x| {\n        set.insert(x);\n\
    \        true\n    }).cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp3lh668b0.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ rev = x.rev();\n    rev.sort();\n    rev.dedup();\n    rev\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpf0mwjc37.rs:10:21\n\
    \    |\n10  |       let mut rev = x.rev();\n    |                       ^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // If\
    \ x is empty just return empty vec\n    if x.is_empty() {\n        return vec![];\n\
    \    }\n    // If x has only one element just return it\n    if x.len() == 1 {\n\
    \        return vec![x.first()];\n    }\n    // For every element, check if it\
    \ has even digit\n    let mut even = x.iter().filter(|&x| x % 2 == 0).cloned().collect::<Vec<_>>();\n\
    \    let mut odd = x.iter().filter(|&x| x % 2 != 0).cloned().collect::<Vec<_>>();\n\
    \    even = even.sort_unstable();\n    odd = odd.sort_unstable();\n    even =\
    \ even.collect::<Vec<_>>();\n    odd = odd.collect::<Vec<_>>();\n    let mut res\
    \ = vec![];\n    res.extend_from_slice(&even);\n    res.extend_from_slice(&odd);\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9uuh4dfq.rs:16:21\n   |\n\
    16 |         return vec![x.first()];\n   |                     ^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9uuh4dfq.rs:21:12\n   |\n19 |     let mut even = x.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect::<Vec<_>>();\n   |                    -------------------------------------------------------------\
    \ expected due to this value\n20 |     let mut odd = x.iter().filter(|&x| x %\
    \ 2 != 0).cloned().collect::<Vec<_>>();\n21 |     even = even.sort_unstable();\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9uuh4dfq.rs:22:11\n   |\n20 |  \
    \   let mut odd = x.iter().filter(|&x| x % 2 != 0).cloned().collect::<Vec<_>>();\n\
    \   |                   -------------------------------------------------------------\
    \ expected due to this value\n21 |     even = even.sort_unstable();\n22 |    \
    \ odd = odd.sort_unstable();\n   |           ^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   -->\
    \ /tmp/tmp9uuh4dfq.rs:23:17\n    |\n23  |       even = even.collect::<Vec<_>>();\n\
    \    |                   ^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp9uuh4dfq.rs:24:15\n\
    \    |\n24  |       odd = odd.collect::<Vec<_>>();\n    |                 ^^^^^^^\
    \ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<isize>: Iterator`\n            which is\
    \ requ"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ unique = vec![];\n    for e in x.iter() {\n        if e.is_even() {\n      \
    \      unique.push(e);\n        }\n    }\n    unique.sort_unstable();\n    unique\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpotbql1a0.rs:12:14\n   |\n12 |         if e.is_even()\
    \ {\n   |              ^^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpotbql1a0.rs:17:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n17 |     unique\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = vec![];\n    let mut a = x;\n    loop {\n        let mut t = false;\n  \
    \      for i in &a { \n            if i&1 !=0{\n                t = true; break;\n\
    \            }\n        }\n        if t {\n            v.push(*a.unwrap());\n\
    \        }\n        a.clear();\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmpevx8lql9.rs:20:23\n   |\n20 |             v.push(*a.unwrap());\n\
    \   |                       ^^^^^^ help: there is an associated function with\
    \ a similar name: `swap`\n\nwarning: unreachable expression\n  --> /tmp/tmpevx8lql9.rs:24:5\n\
    \   |\n12 | /     loop {\n13 | |         let mut t = false;\n14 | |         for\
    \ i in &a { \n15 | |             if i&1 !=0{\n...  |\n22 | |         a.clear();\n\
    23 | |     }\n   | |_____- any code following this expression is unreachable\n\
    24 |       v\n   |       ^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().filter_map(|e|\
    \ {\n        if *e % 2 == 0 {\n            Some(*e)\n        } else {\n      \
    \      None\n        }\n    }).cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp44thwxeg.rs:11:12\n\
    \   |\n11 |         if *e % 2 == 0 {\n   |            ^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmp44thwxeg.rs:12:18\n   |\n12 |\
    \             Some(*e)\n   |                  ^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_x = x.clone();\n    sorted_x.sort_unstable();\n    let mut unseen_set\
    \ = HashSet::new();\n    for elem in sorted_x.iter() {\n        if unseen_set.is_member(elem)\
    \ {\n            unseen_set.insert(elem);\n        }\n    }\n    unseen_set.into_iter().collect::<Vec<_>>().cloned()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpnj9h4u9o.rs:12:26\n   |\n12 |     let mut unseen_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = vec![];\n\n    for v in x.iter() {\n        if *v % 2 == 0\
    \ {\n            ret.push(v);\n        }\n    }\n\n    ret.sort();\n    ret\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptdncm5zf.rs:14:22\n   |\n\
    14 |             ret.push(v);\n   |                      ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \     ret.push(*v);\n   |                      +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x|\
    \ x >= 0).cloned().group_by(|&x| x % 10).iter()\n        .filter_map(|(digit,\
    \ num)| {\n            if num == 0 {\n                None\n            } else\
    \ {\n                Some(digit)\n            }\n        })\n        .collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyy3ke433.rs:10:31\n   |\n\
    10 |     x.iter().filter(|&x| x >= 0).cloned().group_by(|&x| x % 10).iter()\n\
    \   |                               ^\n   |                               |\n\
    \   |                               expected `&isize`, found integer\n   |   \
    \                            help: consider borrowing here: `&0`\n\nerror[E0599]:\
    \ no method named `group_by` found for struct `Cloned` in the current scope\n\
    \  --> /tmp/tmpyy3ke433.rs:10:43\n   |\n10 |     x.iter().filter(|&x| x >= 0).cloned().group_by(|&x|\
    \ x % 10).iter()\n   |                                           ^^^^^^^^ method\
    \ not found in `Cloned<Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpyy3ke433.rs:10:21:\
    \ 10:32]>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ a = vec![];\n    for elt in x {\n        if elt % 2 == 0 {\n            a.push(elt);\n\
    \        }\n    }\n    a.sort();\n    a\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmptyxfw0qk.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028206
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums = x.iter().cloned().collect::<Vec<_>>();\n    let mut nums_len = nums.len();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut result\
    \ = Vec::new();\n    loop {\n        if nums_len == 0 {\n            break;\n\
    \        }\n        let num = nums.pop().unwrap();\n        if num % 2 == 0 {\n\
    \            evens.push(num);\n        }\n        else {\n            odd.push(num);\n\
    \        }\n        nums_len--;\n    }\n    let mut odd_len = odd.len();\n   \
    \ for num in evens {\n        if odd_len == 0 {\n            result.push(num);\n\
    \        }\n        odd_len--;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpso4fft8j.rs:26:19\n\
    \   |\n26 |         nums_len--;\n   |                   ^ expected expression\n\
    \nerror: expected expression, found `;`\n  --> /tmp/tmpso4fft8j.rs:33:18\n   |\n\
    33 |         odd_len--;\n   |                  ^ expected expression\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ s = HashMap::new();\n    for a in x {\n        if !s.contains_key(&a / 10) {\n\
    \            s.insert(a / 10, a);\n        }\n    }\n    let mut t = vec![];\n\
    \    for a in s.iter() {\n        if a % 2 == 0 {\n            t.push(a);\n  \
    \      }\n    }\n    t\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpxxlazb6w.rs:10:17\n   |\n10 |     let mut s = HashMap::new();\n   |\
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660028205
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = vec![];\n    for i in x {\n        let mut cur = i;\n        while cur\
    \ % 2 == 0 {\n            cur /= 2;\n        }\n        ans.push(cur);\n    }\n\
    \    ans.sort_unstable();\n    ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 711]`,\n right: `[1, 15, 33]`', /tmp/tmp1skk5q3s.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028206
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    \n    for i in x {\n        if !seen.insert(i)\
    \ {\n            seen.add(i);\n        }\n    }\n    \n    seen\n        .iter()\n\
    \        .filter(|&x| *x % 10 == 0)\n        .cloned()\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp39xqjz6s.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp39xqjz6s.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1660028205
