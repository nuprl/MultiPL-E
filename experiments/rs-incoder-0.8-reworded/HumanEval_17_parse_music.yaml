name: HumanEval_17_parse_music
language: rs
prompt: "/// Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n/// Your task is to parse this string and return vector of integers\
  \ corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n\
  /// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n\
  /// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o|\
  \ .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
  \ String) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
  \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1,\
  \ 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2,\
  \ 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o\
  \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
completions: ["    let music_vec = music_string.split_whitespace();\n    let mut beats\
    \ = vec![];\n    for note in music_vec {\n        match note {\n            \"\
    o\" => beats.push(4),\n            \"o|\" => beats.push(2),\n            \".|\"\
    \ => beats.push(1),\n            _ => continue,\n        }\n    }\n    beats",
  "    music_string.chars()\n        .filter_map(|c| match c {\n            'o' =>\
    \ Some(4),\n            'o|' => Some(2),\n            '.|' => Some(1),\n     \
    \       _ => None,\n        })\n        .collect()", "    let music_string = music_string\n\
    \        .chars()\n        .filter(|c| c.is_ascii_letter())\n        .collect::<String>()\n\
    \        .into_iter()\n        .collect();\n\n    let mut counter: usize = 0;\n\
    \    let mut notes: Vec<isize> = music_string.into_iter().collect();\n    for\
    \ note in music_string.into_iter().skip_while(|c| c != '|') {\n        notes.last_mut().unwrap()\
    \ += counter;\n        notes.push(0);\n        counter += 1;\n    }\n    notes",
  "    let mut beats_vec: Vec<isize> = Vec::new();\n    for note in music_string.chars().filter_map(|c|\
    \ match c {\n        'o' => Some(4),\n        'o|' => Some(2),\n        '.|' =>\
    \ Some(1),\n        _ => None,\n    }) {\n        beats_vec.push(note.unwrap_or(0));\n\
    \    }\n    beats_vec", "    let music = music_string.split(' ');\n    let mut\
    \ output = Vec::new();\n\n    for note in music.iter() {\n        if note.len()\
    \ == 1 {\n            output.push(4);\n        } else {\n            let pos =\
    \ note.chars().skip(1).count() as isize;\n            let last = (pos - 1) / 4\
    \ as isize;\n\n            output.push(last);\n        }\n    }\n\n    output",
  "    let mut beats: Vec<isize> = Vec::new();\n    for note in music_string.chars()\
    \ {\n        let note_length = note.len() as isize;\n        match note[note_length\
    \ - 1] {\n            'o' => {\n                beats.push(4);\n            }\n\
    \            '|' => {\n                beats.push(2);\n            }\n       \
    \     '.' => {\n                beats.push(1);\n            }\n            c =>\
    \ panic!(\"Invalid note letter '{}'\", c),\n        }\n    }\n    beats", "  \
    \  music_string.as_bytes().iter().filter_map(|c| match c {\n        b'o' | b'|'\
    \ => Some(4),\n        b'|' => Some(2),\n        _ => None,\n    }).sum()", " \
    \   let mut notes = music_string.split_whitespace().collect::<Vec<_>>();\n   \
    \ let mut beats: Vec<isize> = notes.into_iter().map(|note| {\n        let mut\
    \ beat = 1;\n        note.chars().enumerate().find(|(_, c)| *c == b'|')\n    \
    \        .map(|(_, i)| {\n                beat *= 4 - (i * 2);\n             \
    \   beat\n            })\n            .unwrap_or(1)\n    }).collect();\n    beats.sort();\n\
    \    beats", "    // Parse music string\n    let mut music_string = music_string.to_owned();\n\
    \    let mut music_vector: Vec<isize> = vec![];\n\n    // Go through string and\
    \ get note lengths\n    while music_string.len() > 0 {\n        let note_length\
    \ = music_string.len();\n\n        // Handle notes separated by spaces\n     \
    \   if music_string[note_length - 1] == ' ' {\n            music_vector.push(note_length);\n\
    \            music_string.truncate(note_length - 1);\n        }\n\n        //\
    \ Handle notes separated by pipes\n        else if music_string[note_length -\
    \ 2] == '|' {\n            music_vector.push(note_length);\n            music_string.truncate(note_length\
    \ - 1);\n        }\n\n        // Handle notes separated by dashes\n        else\
    \ if music_string[note_length - 2] == '-' {\n            music_vector.push(note_length);\n\
    \            music_string.truncate(note_length - 1);\n        }\n\n        //\
    \ Handle notes separated by equals\n        else if music_string[note_length -\
    \ 1] == '=' {\n            music_vector.push(note_length);\n            music_string.truncate(note_length\
    \ - 1);\n        }\n\n        // Handle notes separated by spaces\n        else\
    \ {\n            music_string.truncate(note_length - 1);\n        }\n    }\n\n\
    \    music_vector", "    let mut beats: Vec<isize> = vec![];\n    let music_string\
    \ = music_string.as_str();\n    let mut current_beat = 0;\n\n    for note in music_string.chars().filter(|&char|\
    \ char == 'o' || char == '|' || char == '.') {\n        let current_note = note\
    \ as isize;\n        beats.push(current_beat);\n        if note == 'o' {\n   \
    \         current_beat += 4;\n        } else {\n            current_beat += 2;\n\
    \        }\n    }\n\n    return beats;", "    music_string.split_whitespace().filter(|c|\
    \ *c != '.').collect()", "    let mut notes = Vec::new();\n\n    for c in music_string.chars()\
    \ {\n        notes.push(parse_note(c));\n    }\n\n    notes", "    // Your code\
    \ goes here\n    music.to_string().split(\"o|\")[1].split_whitespace().collect()",
  "    let mut counter = vec![];\n    music_string.split(|char| char == ' ').for_each(|note|\
    \ {\n        let mut count = 1;\n        let note = note.chars().nth(1);\n   \
    \     if note == '.' {\n            count = 4;\n        }\n        if note ==\
    \ 'o' {\n            count = 4;\n        }\n        if note == '|' {\n       \
    \     count = 2;\n        }\n        counter.push(count as isize);\n    });\n\
    \    counter", "    let mut beats_per_note = vec![];\n    music_string.split_whitespace().for_each(|note|\
    \ {\n        note.parse::<Note>().and_then(|note| {\n            if note.note\
    \ == \"o\" {\n                beats_per_note.push(4);\n            } else {\n\
    \                beats_per_note.push(note.beat);\n            }\n        })\n\
    \    })\n    beats_per_note", "    let mut beats: Vec<isize> = Vec::new();\n\n\
    \    for c in music_string.chars() {\n        match c {\n            'o' => {\n\
    \                beats.push(4);\n            }\n            'o|' => {\n      \
    \          beats.push(2);\n            }\n            '.|' => {\n            \
    \    beats.push(1);\n            }\n            _ => (),\n        }\n    }\n\n\
    \    beats", "    let mut output: Vec<isize> = vec![];\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => output.push(isize::from(0)),\n    \
    \        'o|' => output.push(isize::from(4)),\n            '.|' => output.push(isize::from(1)),\n\
    \            _ => panic!(\"Unknown music note {:?}\", c),\n        }\n    }\n\
    \    output", "    let mut beats_vec: Vec<isize> = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            '.' => {\n                beats_vec.push(1);\n\
    \            }\n            'o' => {\n                beats_vec.push(4);\n   \
    \         }\n            'o|' => {\n                beats_vec.push(2);\n     \
    \       }\n            _ => {\n                beats_vec.push(1);\n          \
    \  }\n        }\n    }\n    beats_vec", "    // Your code here\n    music_string.chars().map(|&c|\
    \ {\n        let mut beats = 1;\n        let mut last = false;\n        let c_len\
    \ = c.len();\n        let mut last = false;\n        if c_len % 2 != 0 {\n   \
    \         last = true;\n            c_len -= 1;\n        }\n        if c_len ==\
    \ 0 {\n            beats = 1;\n        }\n        if c_len == 1 {\n          \
    \  beats = 4;\n        }\n        if c_len == 2 {\n            beats = 2;\n  \
    \      }\n        if c_len == 3 {\n            beats = 1;\n        }\n       \
    \ if c_len == 4 {\n            beats = 2;\n        }\n        if c_len == 5 {\n\
    \            beats = 1;\n        }\n        if c_len == 6 {\n            beats\
    \ = 2;\n        }\n        if c_len == 7 {\n            beats = 2;\n        }\n\
    \        if c_len == 8 {\n            beats = 4;\n        }\n        if c_len\
    \ == 9 {\n            beats = 4;\n        }\n        if c_len == 10 {\n      \
    \      beats = 4;\n        }\n        if c_len == 11 {\n            beats = 4;\n\
    \        }\n        if c_len == 12 {\n            beats = 4;\n        }\n    \
    \    if c_len == 13 {\n            beats = 4;\n        }\n        if c_len ==\
    \ 14 {\n            beats = 4;\n        }\n        if c_len == 15 {\n        \
    \    beats = 4;\n        }\n        if c_len == 16 {\n            beats = 4;\n\
    \        }\n        if c_len == 17 {\n            beats = 4;\n        }\n    \
    \    if c_len == 18 {\n            beats = 4;\n        }\n        if c_len ==\
    \ 19 {\n            beats = 4;\n        }\n        if c_len == 20 {\n        \
    \    beats = 4;\n        }\n        if c_len == 21 {\n            beats = 4;\n\
    \        }\n        if c_len == 22 {\n            beats = 4;\n        }\n    \
    \    if c_len == 23 {\n            beats = 4;\n        }\n        if c_len ==\
    \ 24 {\n            beats = 4;\n        }\n        if c_len == 25 {\n        \
    \    beats = 4;\n        }\n        if c_len == 26 {\n            beats = 4;\n\
    \        }\n        if c_len == 27 {\n            beats = 4;\n        }\n    \
    \    if c_len == 28 {\n            beats = 4;\n        }\n        if c_len ==\
    \ 29 {\n            beats = 4;\n        }\n        if c_len == 30 {\n        \
    \    beats = 4;\n        }\n        if c_len == 31 {\n            beats = 4;\n\
    \        }\n        if c_len == 32 {\n            beats = 4;\n        }\n    \
    \    if c_", "    let mut music: Vec<isize> = Vec::new();\n\n    for note in music_string.chars()\
    \ {\n        if note == 'o' {\n            music.push(4);\n        } else if note\
    \ == '|' {\n            music.push(2);\n        } else if note == '.' {\n    \
    \        music.push(1);\n        }\n    }\n\n    music", "    let mut beats =\
    \ vec![];\n\n    let mut note = String::new();\n    for symbol in music_string\
    \ {\n        note.push_str(&symbol);\n        match symbol {\n            'o'\
    \ => beats.push(4),\n            '|' => beats.push(2),\n            '.' => beats.push(1),\n\
    \            _ => continue,\n        }\n    }\n\n    beats", "    let mut music_array\
    \ = music_string.chars().collect::<Vec<_>>();\n    music_array.sort();\n    let\
    \ mut music_counts = Vec::with_capacity(music_array.len());\n    for (i, c) in\
    \ music_array.into_iter().enumerate() {\n        music_counts.push(i);\n     \
    \   if c == '.' {\n            music_counts.push((i + 3) / 4);\n        }\n  \
    \      if c == 'o' {\n            music_counts.push(4);\n        }\n    }\n  \
    \  music_counts", "    let mut vec: Vec<isize> = vec![0; music_string.len()];\n\
    \    let mut current_beat = 0;\n    let mut current_note = 0;\n    let mut current_interval\
    \ = 0;\n\n    for c in music_string {\n        match c {\n            'o' => current_note\
    \ += 1,\n            'o|' => current_interval += 1,\n            '.|' => current_interval\
    \ += 1,\n            _ => (),\n        }\n        if current_note == 2 {\n   \
    \         current_beat += 1;\n            current_note = 0;\n        } else if\
    \ current_note == 4 && current_interval == 2 {\n            current_interval =\
    \ 0;\n        } else {\n            vec[current_beat] += 1;\n            current_beat\
    \ = 0;\n            current_interval = 0;\n            current_note = 0;\n   \
    \     }\n    }\n    vec", "    let music = music_string.chars().enumerate().cloned().collect();\n\
    \    let mut result: Vec<isize> = vec![];\n    let mut beat = 0;\n    let mut\
    \ prev_beat = 0;\n    for &(idx, _) in music.iter().skip(1) {\n        let mut\
    \ note = idx;\n        let mut beats = 0;\n        match idx {\n            0x30\
    \ => note = note + 0x30,\n            0x41 => note = note + 0x41,\n          \
    \  0x52 => note = note + 0x52,\n            0x53 => note = note + 0x53,\n    \
    \        0x5b => note = note + 0x5b,\n            0x5c => note = note + 0x5c,\n\
    \            0x5d => note = note + 0x5d,\n            _ => {\n               \
    \ // We cannot safely ignore this note, it is not part of a standard musical scale.\n\
    \                continue;\n            }\n        };\n        let note_is_last\
    \ = note.wrapping_sub(0x20) == 0x20;\n        if note_is_last && beat != prev_beat\
    \ {\n            result.push(beat);\n            beat = 0;\n        }\n      \
    \  beat = beat + 1;\n        prev_beat = beat;\n    }\n    if beat != 0 {\n  \
    \      result.push(beat);\n    }\n    result", "    let mut beat_count: Vec<isize>\
    \ = vec![];\n\n    let mut current_note = String::new();\n    let mut last_note\
    \ = String::new();\n\n    let mut beats = 0;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' | 'O' | '.' | '.' | '|' => {\n       \
    \         beats += 4;\n                current_note = String::from(&c);\n    \
    \        }\n            '|' | '.' | 'o' | 'O' => {\n                beats += 2;\n\
    \                current_note = String::from(&c);\n            }\n           \
    \ 'o' | 'o' | '.' | '|' => {\n                beats += 1;\n                current_note\
    \ = String::from(&c);\n            }\n            _ => {\n                let\
    \ beat_number = c.to_digit(10) - 1;\n                beat_count.push(beat_number\
    \ * beats);\n                last_note = current_note;\n                current_note\
    \ = String::from(&c);\n                beats = 0;\n            }\n        }\n\
    \    }\n\n    if current_note.is_empty() {\n        beat_count.push(0);\n    }\n\
    \n    beat_count.push(beat_count.len() * beats);\n    last_note.split_whitespace().map(|s|\
    \ s.parse().unwrap()).collect()", "    let mut beats_vec =\n        music_string.chars().filter_map(|c|\
    \ match c {\n            'o' => Some(4),\n            'o|' => Some(2),\n     \
    \       '.|' => Some(1),\n            _ => None,\n        }).collect();\n    let\
    \ mut last_beats = beats_vec.clone();\n    beats_vec.sort_unstable_by(|a, b| a.cmp(b));\n\
    \    for beats in beats_vec {\n        last_beats.remove(beats);\n    }\n    last_beats.into_iter().map(|beats|\
    \ beats as isize).collect()", "    let mut parsed_music: Vec<isize> = Vec::new();\n\
    \    let mut current_song_start: usize = 0;\n    let mut current_song_end: usize\
    \ = 0;\n\n    let mut music_splitter: Vec<usize> = music_string.split_whitespace().collect();\n\
    \n    for music_note in music_splitter {\n        if music_note.len() > 1 {\n\
    \            if music_note[0] == 'o' {\n                if current_song_end ==\
    \ 0 {\n                    current_song_start = music_note.len();\n          \
    \      } else if current_song_end != music_note.len() {\n                    parsed_music.push(music_note.len()\
    \ - current_song_end);\n                    current_song_end = music_note.len();\n\
    \                } else {\n                    parsed_music.push(music_note.len()\
    \ - current_song_end);\n                    current_song_start = music_note.len();\n\
    \                }\n            } else if music_note[0] == 'o|' || music_note[0]\
    \ == '.|' {\n                if current_song_end != 0 {\n                    if\
    \ music_note.len() - current_song_end == 2 {\n                        parsed_music.push(2);\n\
    \                        current_song_end = music_note.len();\n              \
    \      } else if music_note.len() - current_song_end == 1 {\n                \
    \        parsed_music.push(1);\n                        current_song_end = music_note.len();\n\
    \                    } else if music_note.len() - current_song_end == 4 {\n  \
    \                      parsed_music.push(4);\n                        current_song_end\
    \ = music_note.len();\n                    } else {\n                        parsed_music.push(music_note.len()\
    \ - current_song_end);\n                        current_song_start = music_note.len();\n\
    \                    }\n                } else {\n                    parsed_music.push(music_note.len()\
    \ - current_song_end);\n                    current_song_start = music_note.len();\n\
    \                }\n            } else {\n                panic!(\"unknown note\
    \ {}\", music_note);\n            }\n        } else {\n            panic!(\"unknown\
    \ note {}\", music_note);\n        }\n    }\n    if current_song_start != 0 {\n\
    \        parsed_music.push(current_song_start - music_string.len());\n    }\n\
    \    parsed_music", "    // TODO: implement function\n    let music_string = music_string.chars().collect::<String>().trim();\n\
    \    let mut beats_vec: Vec<isize> = Vec::new();\n\n    // we first split string\
    \ by empty spaces\n    let split_string = music_string.split(\" \").collect::<Vec<&str>>();\n\
    \    for music_element in split_string {\n        // if we find music note then\
    \ we increment our counter\n        if music_element == \"o\" || music_element\
    \ == \"O\" || music_element == \"|\" || music_element == \".\" {\n           \
    \ beats_vec.push(1);\n        } else if music_element == \"o|\" || music_element\
    \ == \"O|\" || music_element == \"|\" {\n            beats_vec.push(0.5);\n  \
    \      } else if music_element == \".|\" || music_element == \".\" {\n       \
    \     beats_vec.push(0.25);\n        } else {\n            panic!(\"Unknown music\
    \ note found: {}\", music_element);\n        }\n    }\n    beats_vec", "    let\
    \ mut notes_vec: Vec<isize> = Vec::new();\n    let mut notes_count = 0;\n    for\
    \ char in music_string {\n        let note = match char {\n            'o' =>\
    \ notes_count += 1,\n            'o|' => notes_count += 0.5,\n            '.|'\
    \ => notes_count += 0.25,\n            _ => continue,\n        };\n        notes_vec.push(notes_count);\n\
    \    }\n    notes_vec", "    music_string.split(\" \").map(|item| {\n        if\
    \ item.len() > 1 {\n            item.chars().filter(|c| c != 'o').map(|c| c.to_digit(10)).collect()\n\
    \        } else {\n            item.to_digit(10)\n        }\n    }).collect()",
  "    let mut music_str = music_string.to_string();\n    music_str.truncate(music_str.len()\
    \ - 1);\n    let mut beats = 0;\n    let mut notes: Vec<isize> = vec![];\n   \
    \ while music_str.len() > 0 {\n        notes.push(music_str.chars().take(3).collect::<Vec<&str>>().len());\n\
    \        music_str.replace(0, 3, String::new());\n        beats += 4;\n    }\n\
    \    notes", "    let mut music_string = music_string.to_owned();\n    music_string.reserve(music_string.len()\
    \ * 4);\n    music_string.push_str(\"o|\");\n    let mut beats_vec: Vec<isize>\
    \ = vec![];\n    let mut current_beat = 0;\n    loop {\n        match music_string.pop()\
    \ {\n            \"o\" => {\n                if current_beat != 4 {\n        \
    \            music_string.push_str(\"o|\");\n                    current_beat\
    \ += 4;\n                }\n                beats_vec.push(current_beat);\n  \
    \              current_beat += 4;\n            }\n            \"o|\" => {\n  \
    \              if current_beat != 2 {\n                    music_string.push_str(\"\
    o|\");\n                    current_beat += 2;\n                }\n          \
    \      beats_vec.push(current_beat);\n                current_beat += 2;\n   \
    \         }\n            \".|\" => {\n                if current_beat != 1 {\n\
    \                    music_string.push_str(\"o|\");\n                    current_beat\
    \ += 1;\n                }\n                beats_vec.push(current_beat);\n  \
    \              current_beat = 1;\n            }\n            _ => {}\n       \
    \ }\n    }\n    beats_vec", "    let mut beats_vec: Vec<isize> = Vec::new();\n\
    \    let mut last_note = MusicNote::O;\n    let mut last_duration = 0;\n    let\
    \ mut i = 0;\n    let mut last_note_index = 0;\n\n    loop {\n        let note\
    \ = if i >= music_string.len() {\n            return beats_vec;\n        }\n \
    \       MusicalNote::from(&music_string[i..]).unwrap();\n        if note != last_note\
    \ {\n            last_duration = music_string.len() - i;\n            last_note\
    \ = note;\n            last_note_index = i;\n            i += 1;\n        }\n\
    \        else {\n            i += 1;\n        }\n        match note {\n      \
    \      MusicNote::O => { beats_vec.push(4); }\n            MusicNote::O => {\n\
    \                if i < music_string.len() && music_string[i] == MusicNote::O\
    \ {\n                    beats_vec.push(1);\n                }\n             \
    \   else {\n                    beats_vec.push(beats_vec.len() - last_note_index\
    \ + 1);\n                }\n            }\n            MusicNote::O => {\n   \
    \             if i < music_string.len() && music_string[i] == MusicNote::O {\n\
    \                    beats_vec.push(2);\n                }\n                else\
    \ {\n                    beats_vec.push(beats_vec.len() - last_note_index + 2);\n\
    \                }\n            }\n            MusicNote::O => {\n           \
    \     if i < music_string.len() && music_string[i] == MusicNote::O {\n       \
    \             beats_vec.push(1);\n                }\n                else {\n\
    \                    beats_vec.push(beats_vec.len() - last_note_index + 1);\n\
    \                }\n            }\n            MusicNote::O => { beats_vec.push(1);\
    \ }\n            MusicNote::O => {\n                if i < music_string.len()\
    \ && music_string[i] == MusicNote::O {\n                    beats_vec.push(4);\n\
    \                }\n                else {\n                    beats_vec.push(beats_vec.len()\
    \ - last_note_index + 4);\n                }\n            }\n            MusicNote::O\
    \ => {\n                if i < music_string.len() && music_string[i] == MusicNote::O\
    \ {\n                    beats_vec.push(2);\n                }\n             \
    \   else {\n                    beats_vec.push(beats_vec.len() - last_note_index\
    \ + 2);\n                }\n            }\n            MusicNote::O => {\n   \
    \             if i < music_string.len() && music_string[i] == MusicNote::O {\n\
    \                    beats_vec.push(1);\n                }\n                else\
    \ {\n                    beats_vec.push(beats_vec.len() - last_note_index + 1);\n\
    \                }\n            }\n            MusicNote::O => { beats_vec.push(1);\
    \ }\n            Music", "    let mut beats_per_piece_vec: Vec<isize> = vec![];\n\
    \    let mut current_beat = 0isize;\n    for c in music_string.chars() {\n   \
    \     match c {\n            'o' => { beats_per_piece_vec.push(current_beat);\
    \ current_beat = 0isize; },\n            'o|' => { beats_per_piece_vec.push(current_beat);\
    \ current_beat = 0isize; },\n            '.|' => { current_beat = beats_per_piece_vec.push(current_beat);\
    \ current_beat = 0isize; },\n            _ => current_beat += 1,\n        }\n\
    \    }\n    beats_per_piece_vec", "    let mut beat_counts: Vec<isize> = Vec::new();\n\
    \    let mut first_beat = true;\n    for note in music_string.chars() {\n    \
    \    match note {\n            'o' => {\n                beat_counts.push(4);\n\
    \                if first_beat {\n                    first_beat = false;\n  \
    \              }\n            }\n            'o|' => {\n                beat_counts.push(2);\n\
    \                if first_beat {\n                    first_beat = false;\n  \
    \              }\n            }\n            '.|' => {\n                beat_counts.push(1);\n\
    \                if first_beat {\n                    first_beat = false;\n  \
    \              }\n            }\n            x => {\n            }\n        }\n\
    \    }\n    beat_counts", "    let mut beats: Vec<isize> = music_string.chars().collect();\n\
    \    beats.sort_by_key(|&x| x);\n    beats.reverse();\n    beats.iter().take_while(|&x|\
    \ x != 'o').collect()", "    let mut music_string = music_string.into_bytes();\n\
    \n    let mut music_string_index = 0;\n    let mut beats_per_track = 0;\n    let\
    \ mut current_track = vec![vec![]];\n    let mut current_track_start = 0;\n\n\
    \    // Go through each char and parse it into beats per track\n    while music_string_index\
    \ < music_string.len() {\n        let mut note_char = '\\0';\n\n        // Parse\
    \ out note char and check if it's valid (a note is single character)\n       \
    \ let mut char = music_string[music_string_index].to_string();\n\n        if let\
    \ Some(valid_char) = char.chars().any(|c| c == 'o' || c == '.' || c == '|') {\n\
    \            note_char = char;\n            music_string_index += 1;\n       \
    \ } else {\n            music_string_index += 1;\n        }\n\n        // Check\
    \ if note is valid note (single char)\n        if let Some(valid_char) = note_char.chars().any(|c|\
    \ c == 'o') {\n            // Check if note char is 'o'\n            if let Some(valid_char)\
    \ = note_char.chars().any(|c| c == 'o') {\n                // Check if note char\
    \ is 'o|'\n                if let Some(valid_char) = note_char.chars().any(|c|\
    \ c == '|') {\n                    // Check if note char is '.|'\n           \
    \         if let Some(valid_char) = note_char.chars().any(|c| c == '.') {\n  \
    \                      current_track[current_track_start].push(i);\n         \
    \           } else {\n                        beats_per_track += 1;\n        \
    \            }\n                } else {\n                    beats_per_track\
    \ += 1;\n                }\n            } else {\n                beats_per_track\
    \ += 1;\n            }\n        } else {\n            beats_per_track += 1;\n\
    \        }\n\n        // Go to next note\n        music_string_index += 1;\n \
    \   }\n\n    if beats_per_track != 4 {\n        beats_per_track += 1;\n    }\n\
    \n    if beats_per_track != 2 {\n        beats_per_track += 1;\n    }\n\n    if\
    \ beats_per_track != 1 {\n        beats_per_track += 1;\n    }\n\n    // Return\
    \ vector of beat numbers for each note\n    current_track.iter().map(|&track|\
    \ track.len()).collect()", '    // write your parsing here', "    let mut beats:\
    \ Vec<isize> = vec![];\n    let mut note = music_string.chars().collect::<String>();\n\
    \    let mut counter = 0;\n\n    while note != \"\" {\n        let mut index =\
    \ 0;\n        note = note.chars().filter(|c| c != \"|\").collect::<String>();\n\
    \n        match note[..note.len() - 1] {\n            \"o\" => beats.push(counter\
    \ * 4 + 4),\n            \"o|\" => beats.push(counter * 4 + 2),\n            \"\
    .|\" => beats.push(counter),\n            _ => panic!(\"This is not a note!\"\
    ),\n        };\n\n        counter += 1;\n        note = note.chars().filter(|c|\
    \ c != \"|\").collect::<String>();\n    }\n\n    beats", "    let mut vec: Vec<isize>\
    \ = vec![];\n    let mut last_beat = 0;\n    for (i, char) in music_string.chars().enumerate()\
    \ {\n        match char {\n            'o' => {\n                vec.push(i -\
    \ last_beat);\n                last_beat = i;\n            }\n            '|'\
    \ => {\n                if i + 1 != music_string.len() {\n                   \
    \ if music_string[i + 1] == '.' {\n                        vec.push(i - last_beat);\n\
    \                        last_beat = i;\n                    }\n             \
    \   }\n            }\n            _ => {\n                vec.push(i - last_beat);\n\
    \                last_beat = i;\n            }\n        }\n    }\n    vec", " \
    \   music_string.chars().filter_map(|c| match c {\n        'o' => 1,\n       \
    \ 'o|' => 2,\n        '.|' => 3,\n        _ => 0,\n    })\n    .collect()", " \
    \   music_string.chars()\n        .map(|c| match c {\n            'o' => 1,\n\
    \            '|' => 2,\n            '.' => 4,\n            _ => 0,\n        })\n\
    \        .collect()", "    let mut music_string = music_string.trim().to_string();\n\
    \    music_string = music_string.replace(\"-\", \".\").replace(\"o\", \"0\");\n\
    \    let mut music_string = music_string.chars().collect::<Vec<_>>();\n    music_string.sort();\n\
    \n    // get rid of empty notes\n    music_string.retain(|&_| !char::is_whitespace(_));\n\
    \n    let mut beats: Vec<isize> = music_string.iter().filter(|&_| !char::is_whitespace(_)).count();\n\
    \n    for note in music_string {\n        let num_beat_after_note = note.chars().filter(|&_|\
    \ !char::is_whitespace(_)).count();\n        beats.extend(reverse(num_beat_after_note));\n\
    \    }\n\n    beats", "    music_string.lines()\n        .map(|s| {\n        \
    \    let mut last_beat = s.len();\n            let mut note = 0;\n           \
    \ let mut is_last_beat = false;\n            for c in s {\n                note\
    \ = note.saturating_add(match (c, is_last_beat) {\n                    ('o', true)\
    \ => 4,\n                    ('|', true) => 2,\n                    ('.', true)\
    \ => 1,\n                    (_, false) => 0,\n                })\n          \
    \  }\n            is_last_beat = true;\n            note + last_beat\n       \
    \ })\n        .collect()", "    let mut note_chords: Vec<isize> = music_string.split_whitespace().collect();\n\
    \    note_chords\n        .iter()\n        .filter(|chord| !chord.is_empty())\n\
    \        .for_each(|chord| {\n            match (chord.chars().skip(1).next().unwrap(),\
    \ chord.chars().skip(1).next().unwrap()) {\n                ('o', '.') => note_chords.push(4),\n\
    \                ('o', 'o') => note_chords.push(2),\n                ('.', 'o')\
    \ => note_chords.push(2),\n                (_, _) => {\n                    println!(\"\
    Bad chord: {}\", chord);\n                    println!(\"Invalid chord format:\
    \ {}\", chord);\n                }\n            }\n        });\n    note_chords",
  "    let mut beats_counter = vec![0];\n    let music_notes = music_string.chars().enumerate();\n\
    \    for note in music_notes {\n        let current_beat = note.1;\n        let\
    \ current_note_length = note.0;\n        beats_counter.push(beats_counter.last()\
    \ + current_note_length);\n    }\n    beats_counter", '    // Write your code
    here', "    let mut music_string = music_string.trim_left();\n    let mut music_string_list\
    \ = music_string.split('|');\n    let mut music_list: Vec<Vec<isize>> = music_string_list.into_iter().map(\n\
    \        |mut music_string| {\n            music_string\n                .trim_left()\n\
    \                .split(|&mut c| c != 'o')\n                .collect::<Vec<_>>()\n\
    \        }\n    ).collect();\n    music_list = music_list.into_iter().map(\n \
    \       |music_list| {\n            music_list\n                .into_iter()\n\
    \                .map(|mut music_item| {\n                    if music_item ==\
    \ 'o' {\n                        music_item\n                            .parse::<isize>()\n\
    \                            .expect(\"Music string should be valid number\")\n\
    \                    }\n                    else {\n                        music_item\n\
    \                            .parse::<isize>()\n                            .expect(\"\
    Music string should be valid number\")\n                            / 4\n    \
    \                }\n                })\n                .collect()\n        }\n\
    \    ).collect();\n    let mut music_total_length = 0;\n    for mut music_length\
    \ in music_list {\n        music_total_length += music_length\n    }\n    music_list.iter().map(|music_length|\
    \ {\n        music_length\n    }).sum::<isize>()", "    music_string\n       \
    \ .split_whitespace()\n        .map(|note| note.parse::<usize>())\n        .collect()",
  "    let mut notes = Vec::new();\n\n    // We are going to create all possible notes\
    \ combinations\n    // and than sum up amount of beats for each of them\n    for\
    \ note in music_string\n        .chars()\n        // We skip whitespaces at beginning\n\
    \        .skip_while(|&c| !c.is_whitespace())\n        .take_while(|&c| !c.is_ascii_digit())\n\
    \        // We are going to skip over all remaining non-whitespaces and numbers\n\
    \        .skip_while(|&c| !c.is_whitespace() && !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_digit())\n        // We create all possible combinations\
    \ using recursion\n        .chain(create_notes)\n        // We filter out notes\
    \ that consist of only whitespace or only digits\n        .filter(|c| !c.is_whitespace()\
    \ && c.is_ascii_digit())\n        // We sum up amount of beats for all possible\
    \ notes\n        .sum::<isize>()\n    {\n        notes.push(note);\n    }\n\n\
    \    // We count how many beats do note last\n    let mut beats = notes.iter().map(|note|\
    \ {\n        let mut beat = 0;\n\n        // We create list of all possible combinations\
    \ using recursion\n        for combination in create_notes(note, notes.len())\
    \ {\n            // We increase beat value with amount of beats from last note\n\
    \            beat += combination;\n        }\n\n        beat\n    }).sum();\n\n\
    \    // We are going to take care of remaining notes that lasts more than 4 beats\n\
    \    // because they may be present in some octaves only\n    for note in notes\n\
    \        .iter()\n        // We are going to skip over all remaining non-whitespaces\
    \ and numbers\n        .skip_while(|&c| !c.is_whitespace() && !c.is_ascii_digit())\n\
    \        // We are going to filter out notes that consist of only whitespace or\
    \ only digits\n        .filter(|c| !c.is_whitespace() && c.is_ascii_digit())\n\
    \        // We are going to skip over all remaining non-whitespace and numbers\n\
    \        .skip_while(|&c| !c.is_whitespace() && !c.is_ascii_digit())\n       \
    \ // We are going to filter out notes that consist of only whitespace or only\
    \ digits\n        .filter(|c| !c.is_whitespace() && !c.is_ascii_digit())\n   \
    \     // We are going to filter out notes that consist of only whitespace or only\
    \ digits\n        .filter(|c| !c.is_whitespace() && !c.is_ascii_digit())\n   \
    \     // We are going to take care of octaves that lasts more than 4 beats\n \
    \       .filter(|c| !c.is_ascii_digit() && c.", "    let mut result = Vec::new();\n\
    \    let mut notes = music_string.as_bytes()\n        .iter()\n        .map(|&b|\
    \ {\n            let mut temp = b;\n            let c = temp.chars().next();\n\
    \            match c {\n                Some('o') => {\n                    temp\
    \ = b + 'o'.to_vec();\n                    temp[1] = '|'.to_vec();\n         \
    \       }\n                Some('|') => {\n                    temp = b + '|'.to_vec();\n\
    \                    temp[0] = 'o'.to_vec();\n                }\n            \
    \    Some('.') => {\n                    temp = b + '.'.to_vec();\n          \
    \          temp[1] = '|'.to_vec();\n                }\n                _ => panic!(\"\
    Music string contains invalid character, aborting parsing\"),\n            }\n\
    \            temp\n        })\n        .collect();\n    for b in notes {\n   \
    \     notes.retain(|note| !note.eq(b));\n        result.push(notes.count());\n\
    \    }\n    result", "    let mut beats = vec![];\n    let mut note = String::from(\"\
    \");\n    let mut note_count = vec![0];\n    let mut last_note = String::from(\"\
    \");\n    music_string.split_whitespace().for_each(|c| {\n        match c {\n\
    \            'o' | 'o|' => note = c.to_string(),\n            '.' | '.|' => note_count\
    \ = note_count.iter().cloned().collect(),\n            _ => note_count = note_count.iter().map(|x|\
    \ x + 1).collect(),\n        }\n    });\n    last_note = note;\n    music_string.split_whitespace().for_each(|c|\
    \ {\n        match c {\n            'o' | 'o|' => note = c.to_string(),\n    \
    \        '.' | '.|' => note_count = note_count.iter().cloned().collect(),\n  \
    \          _ => {\n                let note_count = note_count.iter().cloned().collect();\n\
    \                let beat = if note_count == 0 || note_count == 1 {\n        \
    \            beats\n                } else {\n                    beats.last().unwrap()\
    \ + (4 - (last_note == note || note.contains('|')))\n                };\n    \
    \            beats.push(beat);\n                note_count = vec![0];\n      \
    \          last_note = String::from(\"\");\n                note = c.to_string();\n\
    \            }\n        }\n    });\n    beats", "    music_string\n        .lines()\n\
    \        .map(|s| s.chars())\n        .map(|c| {\n            let mut note = 0;\n\
    \            if c[0] >= 'A' && c[0] <= 'G' {\n                if c[1] == '#' {\n\
    \                    note = 'g';\n                } else if c[1] == 'b' {\n  \
    \                  note = 'a';\n                } else {\n                   \
    \ note = c[1] as i8;\n                }\n            }\n            if c[0] ==\
    \ 'w' {\n                note = note * 2;\n            }\n            note\n \
    \       })\n        .collect()", "    let mut beats: Vec<isize> = vec![];\n  \
    \  let mut current_beats: isize = 0;\n\n    for note in music_string.chars() {\n\
    \        match note {\n            'o' => {\n                beats.push(current_beats);\n\
    \                current_beats = 0;\n            }\n            'o|' => {\n  \
    \              beats.push(current_beats);\n                current_beats += 2;\n\
    \            }\n            '.|' => {\n                beats.push(current_beats);\n\
    \                current_beats += 1;\n            }\n            _ => {\n    \
    \            current_beats += 1;\n            }\n        }\n    }\n    beats.push(current_beats);\n\
    \    beats", "    let mut music_vec = Vec::new();\n    let mut current_beat =\
    \ 0;\n    let mut current_beat_piece = 0;\n    let mut current_note = String::new();\n\
    \    let mut current_note_piece = 0;\n    let mut current_note_octave = String::new();\n\
    \n    for note in music_string.chars() {\n        let mut last_beat_piece = 0;\n\
    \n        // if we found the beginning of next note\n        if note == '.' {\n\
    \            last_beat_piece = current_beat_piece;\n            current_beat_piece\
    \ = 0;\n            current_note_piece = 0;\n            current_note_octave =\
    \ String::new();\n            current_beat = current_beat + 1;\n            music_vec.push(current_beat);\n\
    \        } else {\n            // if we found the end of next note\n         \
    \   if note == 'o' {\n                // save the octave of current note if it\
    \ has one\n                if let Ok(octave) = current_note_octave.parse::<i32>()\
    \ {\n                    music_vec.push((current_beat - last_beat_piece) / octave);\n\
    \                } else {\n                    music_vec.push(0);\n          \
    \      }\n\n                // reset current note\n                current_note\
    \ = String::new();\n                current_beat_piece = 0;\n                current_note_piece\
    \ = 0;\n                current_note_octave = String::new();\n            } else\
    \ {\n                // otherwise we parse this note\n                let mut\
    \ last_note_piece = 0;\n                // if we had previous note we check if\
    \ it\n                // is quarter note or half note\n                if let\
    \ Ok(note) = current_note.parse::<String>() {\n                    let octave:\
    \ Option<i32> = note.last().map(|c| c.to_digit(10));\n                    let\
    \ note_piece = if let Some(p) = octave.cloned() {\n                        note.clone()\
    \ + &format!(\"{}\", p)\n                    } else {\n                      \
    \  note.clone()\n                    };\n                    if note_piece ==\
    \ '.' {\n                        last_note_piece = current_beat_piece;\n     \
    \                   current_beat_piece = 0;\n                        current_note_piece\
    \ = note_piece;\n                        current_note_octave = octave;\n     \
    \                   current_beat = current_beat + 1;\n                    } else\
    \ {\n                        if note_piece == 'o' {\n                        \
    \    if let Ok(octave) = octave.parse::<i32>() {\n                           \
    \     last_note_piece = (current_beat - last_beat_piece) / octave;\n         \
    \                   } else {\n                                last_note_piece\
    \ = 0;\n                            }\n                        } else {\n    \
    \                        if let Ok(note) = note.parse::<String", "    let mut\
    \ note_counts = Vec::new();\n    let mut note_count = -1;\n\n    for (idx, note)\
    \ in music_string.chars().enumerate() {\n        if note == \"o\" {\n        \
    \    note_count += 4;\n        } else {\n            note_count += 2;\n      \
    \  }\n\n        note_counts.push(note_count);\n    }\n\n    return note_counts;",
  "    let mut notes = vec![];\n    let mut previous_note = String::new();\n    let\
    \ mut current_note = String::new();\n    let mut current_beat = 0;\n    let mut\
    \ last_note = String::new();\n    let mut last_beat = 0;\n    for note in music_string.chars()\
    \ {\n        if note == 'o' || note == '|' || note == '.' {\n            if previous_note.len()\
    \ > 0 {\n                notes.push(current_beat - last_beat);\n             \
    \   notes.push(current_beat - last_beat);\n                notes.push(current_beat\
    \ - last_beat);\n                notes.push(current_beat - last_beat);\n     \
    \       }\n            previous_note = current_note;\n            current_note\
    \ = String::new();\n            current_beat = 0;\n        }\n        current_note\
    \ += note.to_string();\n        last_note = note;\n        last_beat = current_beat;\n\
    \    }\n    if !current_note.len() > 0 {\n        notes.push(current_beat - last_beat);\n\
    \    }\n    notes", "    let mut parsed_music = Vec::new();\n    for symbol in\
    \ music_string {\n        parsed_music.push(\n            match symbol {\n   \
    \             'o' => 1,\n                'o|' => 2,\n                '.|' => 1,\n\
    \                _ => 0,\n            }\n        );\n    }\n    parsed_music",
  "    let mut music_string = music_string.to_string();\n\n    let mut note_counts:\
    \ Vec<isize> = Vec::new();\n\n    // O is special case - it represents whole note\n\
    \    if music_string.starts_with(\"o o\") {\n        for note in music_string.split_whitespace()\
    \ {\n            if !note.contains(\"|\") {\n                note_counts.push(4);\n\
    \                continue;\n            }\n\n            let note_name = note.split_whitespace()[0];\n\
    \            let note_count: isize = note.split_whitespace().count();\n      \
    \      let number_of_beats: isize = 2;\n\n            if note_name.contains(\"\
    |\") {\n                note_counts.push(note_count);\n                continue;\n\
    \            }\n\n            // O is special case - it represents whole note\n\
    \            if note_name == \"o\" {\n                note_counts.push(4);\n \
    \               continue;\n            }\n\n            let note_to_beats: Vec<isize>\
    \ = note.split_whitespace()\n                .iter()\n                .map(|note_name|\
    \ note_name_to_beats(note_name))\n                .collect();\n\n            let\
    \ number_of_beats_per_note = note_to_beats.iter().fold(1, |acc, note_to_beats|\
    \ {\n                acc + note_to_beats.len() as isize\n            });\n\n \
    \           note_counts.push(number_of_beats_per_note);\n        }\n    }\n\n\
    \    // O is special case - it represents whole note\n    if music_string.starts_with(\"\
    o\") {\n        for note in music_string.split_whitespace() {\n            if\
    \ !note.contains(\"|\") {\n                note_counts.push(4);\n            \
    \    continue;\n            }\n\n            let note_name = note.split_whitespace()[0];\n\
    \            let note_count: isize = note.split_whitespace().count();\n\n    \
    \        // O is special case - it represents whole note\n            if note_name\
    \ == \"o\" {\n                note_counts.push(4);\n                continue;\n\
    \            }\n\n            let note_to_beats: Vec<isize> = note.split_whitespace()\n\
    \                .iter()\n                .map(|note_name| note_name_to_beats(note_name))\n\
    \                .collect();\n\n            note_counts.push(note_count);\n  \
    \      }\n    }\n\n    // O is special case - it represents whole note\n    if\
    \ music_string.starts_with(\".|\") {\n        for note in music_string.split_whitespace()\
    \ {\n            if !note.contains(\"|\") {\n                note_counts.push(1);\n\
    \                continue;\n            }\n\n            let note_name = note.split_whitespace()[0];\n\
    \            let note_count: isize = note.split_whitespace().count();\n\n    \
    \        // O is special case - it represents whole note\n            if note_name\
    \ == \"o\" {\n                note_counts.push(1);\n                continue",
  "    let mut beats: Vec<isize> = vec![];\n    for (i, letter) in music_string.chars().enumerate()\
    \ {\n        match letter {\n            'o' => beats.push(i / 4),\n         \
    \   'o|' => beats.push(i / 2),\n            '.|' => beats.push(i / 1),\n     \
    \       _ => {}\n        }\n    }\n    beats", "    music_string.chars()\n   \
    \     .filter(|c| *c != 'o')\n        .filter(|c| *c != '|')\n        .filter(|c|\
    \ *c != '.')\n        .map(|c| *c as isize)\n        .collect()", "    let mut\
    \ beats = vec![];\n    let mut beats_str = music_string.as_bytes();\n    let mut\
    \ last = -1;\n    let mut i = 0;\n\n    while !beats_str.contains(&b'|') {\n \
    \       if beats_str.len() <= i {\n            break;\n        }\n\n        let\
    \ note = note_to_int(&beats_str[i .. i + 1]);\n\n        if note != last {\n \
    \           beats.push_back(last);\n        }\n\n        last = note;\n      \
    \  i += 1;\n    }\n\n    beats.push_back(last);\n\n    beats", "    music_string.split(\"\
    o\").map(|note| {\n        if note == \".\" {\n            1\n        } else if\
    \ note == \"o|\" {\n            2\n        } else if note == \"|\" {\n       \
    \     4\n        } else {\n            0\n        }\n    }).collect()", "    let\
    \ mut beats_vec = Vec::new();\n    for mut s in music_string.chars().skip_while(|c|\
    \ *c != '|') {\n        let mut note = match s.as_str() {\n            \"o\" |\
    \ \"o|\" => 1,\n            \".|\" => 2,\n            _ => 0,\n        };\n  \
    \      let beats = note / 4;\n        beats_vec.push(beats);\n        s = &s[beats..].to_ascii_lowercase().chars().next();\n\
    \    }\n    beats_vec", "    let mut output_vec: Vec<isize> = vec![];\n\n    for\
    \ music_note in music_string.chars() {\n        match music_note {\n         \
    \   'o' => output_vec.push(4),\n            'o|' => output_vec.push(2),\n    \
    \        '.|' => output_vec.push(1),\n            _ => panic!(\"Music note must\
    \ be in 'o|.' or 'o'.\")\n        }\n    }\n    output_vec", "    let music_string\
    \ = music_string.trim_end().to_string();\n    let mut beats = Vec::new();\n  \
    \  for note in music_string.chars().filter_map(|c| {\n        c.is_ascii_letter()\
    \ || c.is_digit()\n    }) {\n        match note {\n            'o' => beats.push(4),\n\
    \            'o|' => beats.push(2),\n            '.|' => beats.push(1),\n    \
    \        _ => panic!(\"Note '{}' is invalid\", note.to_string()),\n        }\n\
    \    }\n    beats", "    let mut beats = vec![0; 128];\n    let mut current =\
    \ 0;\n    let mut current_string = 0;\n    let mut last = 0;\n    music_string\n\
    \        .chars()\n        .filter_map(|c| match c {\n            'o' => true\n\
    \            | 'o|' => true\n            | '.|' => true\n            _ => false,\n\
    \        })\n        .for_each(|c|\n            match c {\n                'o'\
    \ => last = (current % 4) == 0 ? last : last + 1;\n                '.' => last\
    \ = (current % 4) == 0 ? last : last + 2;\n                'o|' => last = (current\
    \ % 4) == 0 ? last : last + 1;\n                _ => (),\n            })\n   \
    \     .for_each(|c| {\n            match c {\n                'o' => beats[current\
    \ as usize] = last;\n                'o|' => beats[current as usize] = last;\n\
    \                '.|' => beats[current as usize] = last;\n                _ =>\
    \ (),\n            }\n            current += 1;\n        })\n        .collect::<Vec<_>>()",
  "    let music_string = music_string.to_string();\n    let mut note_counts = vec![];\n\
    \n    for c in music_string {\n        if c.is_ascii() || c.is_whitespace() {\n\
    \            continue;\n        }\n        if c.is_lowercase() {\n           \
    \ note_counts.push(0);\n            continue;\n        }\n        if c == 'o'\
    \ || c == 'o|' || c == '.|' {\n            note_counts.push(0);\n            continue;\n\
    \        }\n        let note_length: usize = match c.to_string().chars().count()\
    \ {\n            1 => 1,\n            2 => 2,\n            3 => 2,\n         \
    \   4 => 1,\n            _ => {\n                return vec![];\n            }\n\
    \        };\n        note_counts.push(note_length);\n    }\n    note_counts",
  "    let mut beats_array = vec![1, 2, 4, 8];\n    let mut music_array = music_string.split_whitespace();\n\
    \n    for note_index in music_array.iter() {\n        let mut note = note_index.to_ascii_lowercase();\n\
    \        note[0] = note[0].to_ascii_lowercase()[0];\n        if note.contains(\"\
    o\") {\n            note.push(\"+\");\n        }\n        if note.contains(\"\
    |\") {\n            note.push(\"-\");\n        }\n        if note.contains(\"\
    .\") {\n            note.push(\"*\");\n        }\n\n        beats_array.push(note.parse().unwrap());\n\
    \    }\n\n    beats_array", "    let music_string = music_string.to_ascii_lowercase();\n\
    \    let mut music_vec: Vec<isize> = vec![];\n    let mut last_music_note = String::from(\"\
    .\");\n    let mut last_music_beats = 0;\n    for (i, &c) in music_string.chars().enumerate()\
    \ {\n        if c == '|' {\n            if music_vec.len() > 0 {\n           \
    \     music_vec.push(music_beats(last_music_note, last_music_beats));\n      \
    \      }\n            last_music_note = String::from(\".\");\n            last_music_beats\
    \ = 0;\n        } else {\n            let note = c.to_ascii_lowercase();\n   \
    \         let beats = if note == \"o\" { 4 } else { 2 };\n            last_music_beats\
    \ += beats;\n            last_music_note = note;\n        }\n    }\n    if music_vec.len()\
    \ > 0 {\n        music_vec.push(music_beats(last_music_note, last_music_beats));\n\
    \    }\n    music_vec", "    let mut music_string = music_string.trim();\n   \
    \ music_string.replace(\".\", \"\");\n    music_string.replace(\"o\", \"1\");\n\
    \    music_string.replace(\"|\", \"3\");\n    music_string.replace(\"-\", \"-1\"\
    );\n    music_string.parse::<isize>().unwrap()", "    music_string.chars()\n \
    \       .filter(|c| c != '|')\n        .map(|c| {\n            match c {\n   \
    \             'o' => 0,\n                'o|' => 1,\n                '.|' => 2,\n\
    \                _ => panic!(\"{} is not a legal note\", c),\n            }\n\
    \        })\n        .collect()", "    // Your code goes here\n    let mut beats_to_note\
    \ = music_string.chars().map(|c| match c {\n        'o' => 1,\n        'o|' =>\
    \ 2,\n        '.|' => 4,\n        _ => 0,\n    });\n\n    for _ in 0..music_string.len()\
    \ {\n        beats_to_note = beats_to_note.iter().cloned().collect();\n    }\n\
    \    beats_to_note.iter().cloned().collect()", "    let mut output = vec![];\n\
    \n    for note in music_string.chars() {\n        if note == '.' {\n         \
    \   output.push(1);\n        } else {\n            output.push(0);\n        }\n\
    \    }\n\n    output", "    let mut notes = music_string.splitn(2, \" \");\n \
    \   let mut notes_vec: Vec<isize> = Vec::new();\n    notes_vec.push(notes[0].chars().count());\n\
    \    for n in notes[1].chars().rev() {\n        notes_vec.push(notes_vec[notes_vec.len()\
    \ - 1] + n.to_digit(10));\n    }\n    notes_vec", "    let mut beats = 0; // how\
    \ many beats does current note last?\n\n    // go through each character in string\n\
    \    for c in music_string.chars() {\n        // if char is '.'\n        if c\
    \ == '.' {\n            // reset counter\n            beats = 0;\n        } else\
    \ if c == 'o' || c == 'o|' {\n            // if char is 'o', remember current\
    \ beat\n            beats += 1;\n            // else if char is 'o|', update counter\n\
    \        } else {\n            // else increase counter\n            beats +=\
    \ 1;\n        }\n    }\n    // return vector with beat counts\n    beats", " \
    \   let mut music_chars = music_string.chars();\n    let mut beats = vec![];\n\
    \    let mut current_beat = vec![];\n    let mut current_note = vec![];\n\n  \
    \  while let Some(next) = music_chars.next() {\n        match next {\n       \
    \     'o' => {\n                current_beat.push(4);\n                current_note.push(false);\n\
    \            }\n            'o|' => {\n                current_beat.push(2);\n\
    \                current_note.push(false);\n            }\n            '.|' =>\
    \ {\n                current_beat.push(1);\n                current_note.push(false);\n\
    \            }\n            c => {\n                let mut current_note_index\
    \ = 0;\n\n                while current_note[current_note_index].is_none() {\n\
    \                    current_note_index += 1;\n                }\n\n         \
    \       let current_note_index = current_note_index as usize;\n              \
    \  current_beat[current_note_index] += 1;\n                current_note[current_note_index]\
    \ = true;\n            }\n        }\n    }\n\n    beats.copy_from_slice(&current_beat);\n\
    \    beats", "    let mut music_note_counts = vec![];\n    music_note_counts.clear();\n\
    \    let music_notes: Vec<&str> = music_string.split_whitespace();\n\n    for\
    \ note in music_notes {\n        if note != \"o\" {\n            music_note_counts.push(0);\n\
    \        }\n        if note == \"o\" {\n            music_note_counts.push(4);\n\
    \        }\n        if note == \"|\" {\n            music_note_counts.push(2);\n\
    \        }\n        if note == \".\" {\n            music_note_counts.push(1);\n\
    \        }\n    }\n\n    music_note_counts.iter().sum().unwrap_or_else(|| 0)",
  "    // Solution 1 with map and reduce\n    music_string.chars().map(|c| c.to_digit(16)\
    \ as isize).reduce(|a, b| a | b)", "    let mut music_string = music_string.trim();\n\
    \    let mut beats = vec![];\n\n    while !music_string.is_empty() {\n       \
    \ let note = music_string.chars().next().unwrap();\n\n        match note {\n \
    \           '.' => beats.push(4),\n            'o' => beats.push(4),\n       \
    \     '|' => beats.push(2),\n            _ => (),\n        }\n\n        music_string\
    \ = music_string.remove(0);\n    }\n\n    beats", "    let mut beats = Vec::new();\n\
    \    let mut i = 0;\n    while i < music_string.len() {\n        let note = music_string[i];\n\
    \        i += 1;\n        match note {\n            \"o\" => {\n             \
    \   beats.push(4);\n            },\n            \"o|\" => {\n                beats.push(2);\n\
    \            },\n            \".|\" => {\n                beats.push(1);\n   \
    \         },\n            _ => {\n                let note = music_string[i];\n\
    \                i += 1;\n                beats.push(0);\n                beats.push(0);\n\
    \                beats.push(0);\n                beats.push(0);\n            \
    \    beats.push(0);\n                beats.push(0);\n                beats.push(0);\n\
    \                beats.push(0);\n                beats.push(0);\n            \
    \    beats.push(0);\n                beats.push(0);\n            }\n        }\n\
    \    }\n    beats", "    music_string.chars().filter(|c| *c != '|').filter(|c|\
    \ *c != 'o').filter(|c| *c != '.').filter(|c| *c != '|').collect()", "    let\
    \ music_string = music_string.to_string();\n    let mut notes: Vec<isize> = Vec::new();\n\
    \n    for (index, char) in music_string.chars().enumerate() {\n        // Check\
    \ each character for the special cases that mark a note.\n        if char == \"\
    .\" {\n            notes.push(4);\n        } else if char == \"|\" {\n       \
    \     notes.push(2);\n        } else if char == \"o\" {\n            notes.push(index\
    \ / 4);\n        } else {\n            // This character is not special - it's\
    \ a regular note.\n            notes.push(index);\n        }\n    }\n\n    notes",
  "    let mut music_vector = Vec::new();\n    let mut counter = 1;\n\n    for ch\
    \ in music_string {\n        match ch {\n            'o' | 'o|' => music_vector.append(counter\
    \ * 4),\n            '.|'  => music_vector.append(counter),\n            _   \
    \   => {},\n        }\n\n        counter += 1;\n    }\n\n    music_vector", " \
    \   let mut last_note = -1;\n    let mut beat = 0;\n    let mut counts = vec![0,\
    \ 0, 0, 0, 0, 0, 0, 0];\n    for c in music_string.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase() == 'o' {\n                last_note\
    \ = c - 'o' as usize;\n                beat += 4;\n            } else {\n    \
    \            let len = c.to_ascii_lowercase().len_utf8();\n                if\
    \ len == 4 {\n                    counts[last_note as usize - 1] += 1;\n     \
    \           }\n                if len == 2 || len == 3 {\n                   \
    \ counts[last_note as usize - 1] += 1;\n                    counts[last_note as\
    \ usize - 1] += 2;\n                }\n                if len == 3 || len == 4\
    \ {\n                    counts[last_note as usize - 1] += 1;\n              \
    \      counts[last_note as usize - 1] += 1;\n                }\n             \
    \   if len == 2 || len == 3 {\n                    counts[last_note as usize -\
    \ 1] += 1;\n                    counts[last_note as usize - 1] += 1;\n       \
    \         }\n                if len == 4 {\n                    counts[last_note\
    \ as usize - 1] += 1;\n                    counts[last_note as usize - 1] += 1;\n\
    \                }\n            }\n        }\n    }\n    counts", "    // TODO:\
    \ implement this function\n    return vec![];", "    let mut beats: Vec<isize>\
    \ = music_string.chars().map(|c| {\n        match c {\n            'o' => {\n\
    \                return 4;\n            }\n            'o|' => {\n           \
    \     return 2;\n            }\n            '.|' => {\n                return\
    \ 1;\n            }\n            _ => {\n                return 0;\n         \
    \   }\n        }\n    }).collect();\n\n    beats.iter().for_each(|beat| {\n  \
    \      beat = beat % 8;\n    });\n    beats", "    let mut notes = music_string.split_whitespace();\n\
    \    let mut beats: Vec<isize> = notes.into_iter().map(|note| {\n        let note\
    \ = note.parse::<u8>().unwrap();\n        if note == 0xF7 {\n            return\
    \ 4;\n        }\n        if note == 0xFE {\n            return 2;\n        }\n\
    \        if note == 0xFE && note != 0xF7 {\n            return 1;\n        }\n\
    \        4\n    }).collect();\n    for beat in beats.iter_mut() {\n        *beat\
    \ = *beat.checked_add(1).unwrap_or(0);\n    }\n    beats", "    music_string.split(\"\
    \").filter(|&b| b != \"|\").collect()\n        .iter()\n        .map(|b| {\n \
    \           let mut beats: usize = 0;\n            let mut note = match b {\n\
    \                'o' => 4,\n                'o|' => 2,\n                '.|' =>\
    \ 1,\n                _ => panic!(\"{} is not note\", b),\n            };\n  \
    \          while note != 0 {\n                beats += note;\n               \
    \ note /= 2;\n            }\n            beats\n        })\n        .collect()",
  "    let mut current_note = 0;\n    let mut current_note_in_chord = 0;\n    let\
    \ mut current_chord = 0;\n    let mut current_chord_index = 0;\n    let mut current_chord_indexes:\
    \ Vec<isize> = vec![];\n    let mut current_chord_last_index = 0;\n    let mut\
    \ current_chord_last_indexes: Vec<isize> = vec![];\n    let mut current_notes_in_chord\
    \ = vec![];\n    let mut current_notes_in_chord_index: Vec<isize> = vec![];\n\
    \    let mut current_notes_in_chord_last_index: Vec<isize> = vec![];\n    let\
    \ mut current_notes_not_last = 0;\n    let mut current_notes_not_last_indexes:\
    \ Vec<isize> = vec![];\n    let mut current_notes_not_last_index: Vec<isize> =\
    \ vec![];\n\n    for x in music_string.chars() {\n        match x {\n        \
    \    'o' => current_note += 4,\n            'o|' => current_note += 2,\n     \
    \       '.|' => current_note += 1,\n            _ => (),\n        }\n        current_notes_in_chord.push(current_note);\n\
    \        current_notes_in_chord_index.push(current_note_in_chord);\n        current_notes_in_chord_last_index.push(current_note_in_chord\
    \ - current_note);\n\n        match x {\n            'o' => current_note -= 4,\n\
    \            'o|' => current_note -= 2,\n            '.|' => current_note -= 1,\n\
    \            _ => (),\n        }\n        current_notes_not_last.push(current_note);\n\
    \        current_notes_not_last_index.push(current_notes_not_last);\n        current_notes_not_last_indexes.push(current_notes_not_last_index);\n\
    \n        current_chord += 1;\n        current_chord_indexes.push(current_chord);\n\
    \        current_chord_last_index.push(current_chord - 1);\n        current_chord_last_indexes.push(current_chord_last_index);\n\
    \n        if current_chord_indexes.len() == 4 {\n            current_notes_in_chord.clear();\n\
    \            current_notes_in_chord_index.clear();\n            current_notes_in_chord_last_index.clear();\n\
    \            current_chord_indexes.clear();\n            current_chord_last_indexes.clear();\n\
    \            current_chord = 0;\n            current_note = 0;\n            current_note_in_chord\
    \ = 0;\n            current_chord = 0;\n            current_note = 0;\n      \
    \      current_note_in_chord = 0;\n            current_chord_index = 0;\n    \
    \        current_chord_last_index = 0;\n            current_notes_in_chord_index\
    \ = vec![];\n            current_notes_in_chord_last_index = vec![];\n       \
    \     current_notes_not_last = 0;\n            current_notes_not_last_indexes\
    \ = vec![];\n            current_", '    // Your code here', "    let mut music_string\
    \ = music_string.to_string();\n    music_string.replace_all(\" \", \"&nbsp;\"\
    );\n\n    // remove any special chars\n    music_string = music_string.replace(\"\
    (\", \"&#40;\");\n    music_string = music_string.replace(\")\", \"&#41;\");\n\
    \    music_string = music_string.replace(\"-\", \"&#45;\");\n    music_string\
    \ = music_string.replace(\"<\", \"&#60;\");\n    music_string = music_string.replace(\"\
    >\", \"&#62;\");\n    music_string = music_string.replace(\"{\", \"&#123;\");\n\
    \    music_string = music_string.replace(\"}\", \"&#125;\");\n    music_string\
    \ = music_string.replace(\"|\", \"&#124;\");\n    music_string = music_string.replace(\"\
    :\", \"&#58;\");\n    music_string = music_string.replace(\".\", \"&#47;\");\n\
    \    music_string = music_string.replace(\",\", \"&#44;\");\n\n    // convert\
    \ all to lower case\n    music_string = music_string.to_lowercase();\n\n    //\
    \ now parse string\n    let mut music_string_vec = music_string.chars().map(|c|\
    \ match c {\n        'o' => 1,\n        'o|' => 2,\n        '.|' => 4,\n     \
    \   _ => 0,\n    });\n\n    let mut beat_counter = 0;\n    for b in music_string_vec\
    \ {\n        if b == 0 {\n            beat_counter++;\n        }\n    }\n\n  \
    \  return music_string_vec.iter().cloned().collect();", "    let mut result =\
    \ vec![];\n\n    for c in music_string.chars() {\n        if c == 'o' {\n    \
    \        result.push(4);\n        } else if c == '|' {\n            result.push(2);\n\
    \        } else if c == '.' {\n            result.push(1);\n        } else {\n\
    \            let mut beats = 0;\n            if c == '#' {\n                beats\
    \ = 4;\n            } else if c == 'b' {\n                beats = 2;\n       \
    \     } else if c == '#' {\n                beats = 1;\n            } else if\
    \ c == '#' {\n                beats = 1;\n            } else if c == '#' {\n \
    \               beats = 1;\n            } else if c == '#' {\n               \
    \ beats = 1;\n            } else if c == '#' {\n                beats = 1;\n \
    \           } else if c == 'b' {\n                beats = 1;\n            } else\
    \ {\n                let mut beats_total = 0;\n                while c != '#'\
    \ && c != 'b' {\n                    beats_total += 1;\n                    c\
    \ = music_string.get_char_next_up();\n                }\n                beats_total\
    \ += 1;\n                result.push(beats_total);\n            }\n        }\n\
    \    }\n\n    result", "    music_string\n        .lines()\n        .map(|note|\
    \ note.split(' ').last())\n        .filter(|note| note != \"o\")\n        .map(|note|\
    \ note.chars().count())\n        .collect()", "    let music_string_vec = music_string.chars().map(|c|\
    \ match c {\n        'o' => 0,\n        '|' => 1,\n        '.' => 2,\n       \
    \ _ => 3,\n    }).collect();\n\n    music_string_vec.iter().windows(4).enumerate().map(|(i,\
    \ chunk)| {\n        // This algorithm is O(n log n)\n        let beats_per_chunk:\
    \ usize = chunk.len();\n        let beats_per_music_chunk: usize = music_string_vec.len();\n\
    \        chunk.iter().zip(music_string_vec[i..].iter()).map(|(a, b)| (a as isize\
    \ - b) as isize)\n            .collect::<Vec<_>>()\n            .iter()\n    \
    \        .zip(chunk.iter().take(beats_per_music_chunk).collect())\n          \
    \  .map(|(i, music_beat)| (music_beat as usize) * (beats_per_music_chunk - i))\n\
    \            .sum();\n    })", "    let music_string = music_string.to_string();\n\
    \    let mut beats_array: [isize; 128] = Default::default();\n\n    for note in\
    \ music_string.chars() {\n        let note_str = match note {\n            'o'\
    \ => \"WHOLE\",\n            'o|' => \"HALF\",\n            '.|' => \"QUARTER\"\
    ,\n            _ => panic!(\"Unexpected musical note!\"),\n        };\n\n    \
    \    if beats_array[note_str.as_bytes()[0]] >= 4 {\n            beats_array[note_str.as_bytes()[0]]\
    \ += 4;\n        } else {\n            beats_array[note_str.as_bytes()[0]] +=\
    \ 2;\n        }\n    }\n\n    beats_array.iter()\n        .filter_map(|&x| x.checked_add(1).ok())\n\
    \        .collect()", "    let mut notes: Vec<isize> = Vec::new();\n\n    // Iterate\
    \ over all characters in the string.\n    for c in music_string.chars() {\n  \
    \      // Ignore the spaces and dots.\n        if c == '.' || c == ' ' {\n   \
    \         continue;\n        }\n\n        // Ignore the empty note.\n        if\
    \ c == '|' {\n            continue;\n        }\n\n        // If the note was in\
    \ the special format, parse it!\n        if let Some(note) = parse_note(&c) {\n\
    \            notes.push(note);\n        }\n\n        // Otherwise, just copy the\
    \ character as-is.\n        else {\n            notes.push(c.to_digit(10).unwrap());\n\
    \        }\n    }\n\n    notes", "    let mut beats_vec: Vec<isize> = vec![0;\
    \ music_string.len()];\n    let mut beats_str: String = music_string;\n    let\
    \ mut current_note_str: String = music_string;\n    while !beats_str.trim().is_empty()\
    \ {\n        let last_note: isize = 0;\n        let last_note_len: usize = 0;\n\
    \        let mut last_note_len_len: usize = 0;\n        let mut note = last_note;\n\
    \        let mut next_note: isize = 0;\n        let mut next_note_len: usize =\
    \ 0;\n        let mut next_note_len_len: usize = 0;\n        let mut new_str:\
    \ String = music_string;\n        for &c in new_str.chars() {\n            match\
    \ c {\n                'o' | 'o|' | '.|' | '.' => {\n                    note\
    \ = note.wrapping_add(1);\n                }\n                _ => break,\n  \
    \          }\n        }\n        for &c in new_str.chars() {\n            match\
    \ c {\n                'o' | 'o|' | '.|' => {\n                    next_note =\
    \ next_note.wrapping_add(1);\n                    beats_vec[beats_vec.len() -\
    \ 1] += 1;\n                }\n                _ => break,\n            }\n  \
    \      }\n        for &c in new_str.chars() {\n            match c {\n       \
    \         'o' | 'o|' | '.|' => {\n                    next_note = next_note.wrapping_add(1);\n\
    \                    beats_vec[beats_vec.len() - 1] += 1;\n                }\n\
    \                _ => break,\n            }\n        }\n        for &c in new_str.chars()\
    \ {\n            match c {\n                'o' | 'o|' | '.|' => {\n         \
    \           next_note = next_note.wrapping_add(1);\n                    beats_vec[beats_vec.len()\
    \ - 1] += 1;\n                }\n                _ => break,\n            }\n\
    \        }\n        for &c in new_str.chars() {\n            match c {\n     \
    \           'o' | 'o|' | '.|' => {\n                    next_note = next_note.wrapping_add(1);\n\
    \                    beats_vec[beats_vec.len() - 1] += 1;\n                }\n\
    \                _ => break,\n            }\n        }\n        for &c in new_str.chars()\
    \ {\n            match c {\n                'o' | 'o|' | '.|' => {\n         \
    \           next_note = next_note.wrapping_add(1);\n                    beats_vec[beats_vec.len()\
    \ - 1] += 1;\n                }\n                _ => break,\n            }\n\
    \        }\n        for &c in new_str.chars() {\n            match c {\n     \
    \           'o' | 'o", "    let mut note_counts: Vec<isize> = vec![];\n\n    music_string.split('\
    \ ').into_iter().for_each(|s| {\n        let mut beats: isize = 0;\n        match\
    \ s.chars().next() {\n            'o' => {\n                beats += 4;\n    \
    \        }\n            'o|' => {\n                beats += 2;\n            }\n\
    \            '.|' => {\n                beats += 1;\n            }\n         \
    \   _ => {\n                // ignore the rest\n            }\n        }\n   \
    \     note_count += beats;\n    });\n\n    note_counts", "    let mut notes: Vec<isize>\
    \ = Vec::new();\n    let mut current_note = 0;\n    let mut note_length = 4;\n\
    \    let mut has_note = false;\n    let mut i = 0;\n\n    // go through every\
    \ symbol in string\n    for symbol in music_string {\n        // we handle each\
    \ symbol differently depending on the type\n        match symbol {\n         \
    \   'o' => i += 1,\n            '|' => i += note_length,\n            '.' => i\
    \ += note_length / 2,\n            _ => panic!(\"unexpected symbol: {}\", symbol),\n\
    \        }\n        // if the note is finished, check if we have any notes still\
    \ left to process\n        if i == note_length {\n            if has_note {\n\
    \                notes.push(current_note);\n            }\n            has_note\
    \ = false;\n            current_note = 0;\n        }\n        // if the note is\
    \ not finished, check if it is a new note\n        match symbol {\n          \
    \  'o' => has_note = true,\n            _ => panic!(\"unexpected symbol: {}\"\
    , symbol),\n        }\n    }\n\n    // add the last note if it exists\n    if\
    \ has_note {\n        notes.push(current_note);\n    }\n\n    notes", "    let\
    \ mut beats = 0;\n    let mut note = 0;\n    let mut last_note = -1;\n    let\
    \ mut last_beat = 0;\n    let mut current_note = 0;\n\n    for line in music_string.lines()\
    \ {\n        // Ignore blank lines\n        if line.is_empty() {\n           \
    \ continue;\n        }\n\n        // Parse the string\n        let line_note =\
    \ line.chars().next().unwrap();\n        let line_beat = line.chars().next().unwrap();\n\
    \n        // Check what kind of note this is\n        match line_note {\n    \
    \        'o' => if line_beat == '|' { note = note + 1; } else { note = note -\
    \ 1; },\n            'o|' => if line_beat == '|' { note = note + 1; } else { note\
    \ = note - 1; beats = beats + 1; },\n            '.|' => if line_beat == '|' {\
    \ note = note + 1; } else { note = note - 1; beats = beats + 1; },\n         \
    \   _ => unreachable!(),\n        };\n\n        // Check if this note is the one\
    \ we need to check\n        if note == last_note {\n            // Check if this\
    \ is the last beat\n            if line_beat == \"|\" {\n                // Add\
    \ one to beats\n                beats += 1;\n            } else {\n          \
    \      // Subtract one from beats\n                beats -= 1;\n            }\n\
    \        } else {\n            // If not, reset beats, note and last_beat\n  \
    \          beats = 0;\n            note = 0;\n            last_beat = 0;\n   \
    \     }\n\n        last_note = note;\n        last_beat = line_beat;\n    }\n\n\
    \    return beats;", "    // TODO: write your parsing logic here\n    vec![0]",
  "    music_string\n        .chars()\n        .filter(|c| *c != '|')\n        .filter(|c|\
    \ *c != 'o')\n        .filter(|c| *c != '.')\n        .filter(|c| *c != 'O')\n\
    \        .filter(|c| *c != 'o')\n        .map(|c| {\n            match c {\n \
    \               'o' => 4,\n                'O' => 4,\n                '.' => 2,\n\
    \                '|' => 1,\n                _ => panic!(\"Music string contains\
    \ invalid character: {}\", c),\n            }\n        })\n        .collect()",
  "    let mut beats: Vec<isize> = vec![];\n\n    for c in music_string.chars() {\n\
    \        match c {\n            'o' => { beats.append(4); },\n            '|'\
    \ => { beats.append(2); },\n            '.' => { beats.append(1); },\n       \
    \     _ => { panic!(\"Invalid music character!\") },\n        }\n    }\n\n   \
    \ beats", "    let mut beats: Vec<isize> = music_string.chars().collect();\n \
    \   let music_string = music_string.clone();\n    let mut last_beat = music_string[music_string.len()\
    \ - 1];\n    if music_string[music_string.len() - 1] == '.' {\n        last_beat\
    \ = '.';\n    }\n    if music_string[music_string.len() - 1] == '|' {\n      \
    \  last_beat = '|';\n    }\n    if music_string[music_string.len() - 1] == 'o'\
    \ {\n        last_beat = 'o';\n    }\n    beats.truncate(music_string.len() -\
    \ music_string.chars().count());\n    beats.push(1isize);\n    beats.extend_from_slice(&music_string[..music_string.len()\
    \ - music_string.chars().count()]);\n    beats.insert(0, last_beat);\n    beats",
  "    let mut notes: Vec<isize> = vec![];\n    let mut prev_notes: Vec<isize> = vec![];\n\
    \    let mut prev_octave: isize = 0;\n    for (i, note) in music_string.chars().enumerate()\
    \ {\n        notes.push(note);\n\n        if note == '|' {\n            notes.push(1);\n\
    \            notes.push(1);\n            notes.push(1);\n        } else {\n  \
    \          notes.push(0);\n        }\n\n        if note == 'o' {\n           \
    \ if i != 0 {\n                notes.push(0);\n            }\n\n            if\
    \ prev_octave != 0 {\n                notes.push((4 as isize) / prev_octave);\n\
    \            }\n\n            prev_octave += 1;\n            prev_notes.push(notes.len());\n\
    \        } else {\n            prev_notes.push(notes.len());\n        }\n    }\n\
    \n    notes", "    music_string.split_whitespace().filter(|&note| note != \"o\"\
    \ && note != \".\").map(|note| {\n        note.len() as isize\n    }).collect()",
  "    let music_string = music_string.to_string();\n    let mut beats = Vec::new();\n\
    \    let mut notes = music_string.chars().take_while(|c| !c.is_whitespace()).collect();\n\
    \    let mut last_note_index = 0;\n    let mut note_index = 0;\n    while note_index\
    \ < notes.len() {\n        let note = notes[note_index].to_string();\n       \
    \ let note_type = note[0];\n        if note_type == 'o' {\n            beats.push(4);\n\
    \            last_note_index = note_index + 1;\n        } else if note_type ==\
    \ 'o|' {\n            beats.push(2);\n            last_note_index = note_index\
    \ + 1;\n        } else if note_type == '.' {\n            beats.push(1);\n   \
    \         last_note_index = note_index + 1;\n        } else {\n            let\
    \ mut note_count = 1;\n            let mut last_note = notes[note_index];\n  \
    \          for i in 2..=last_note_index {\n                let note = notes[i];\n\
    \                let note_type = note[0];\n                if note_type == 'o'\
    \ {\n                    note_count = note_count * 4;\n                } else\
    \ if note_type == 'o|' {\n                    note_count = note_count * 2;\n \
    \               } else if note_type == '.' {\n                    note_count =\
    \ note_count * 1;\n                }\n            }\n            beats.push(note_count);\n\
    \            last_note_index = note_index;\n        }\n        note_index += 1;\n\
    \    }\n    return beats;", "    music_string.split(' ').filter(|&c| c == 'o'\
    \ || c == '|').collect::<Vec<_>>()\n        .into_iter()\n        .map(|c| if\
    \ c == '.' { 1 } else { 4 })\n        .sum()", "    music_string.chars()\n   \
    \     .filter(|c| *c != '|')\n        .enumerate()\n        .map(|(i, c)| match\
    \ c {\n            'o' => 4,\n            'o|' => 2,\n            '.|' => 1,\n\
    \            _ => panic!(\"Invalid character: {}\", c)\n        })\n        .collect()",
  "    // Create a map to map each note to a vector of how many beats does it last\n\
    \    let mut note_count = HashMap::new();\n    let mut note = music_string.chars().map(|c|\
    \ {\n        if c == ' ' {\n            return i64::MAX;\n        }\n\n      \
    \  match c {\n            'o' => {\n                note_count\n             \
    \       .entry(c)\n                    .or_insert(vec![i64::MAX])\n          \
    \          .push(note_count[c].len() + 1);\n                note_count\n     \
    \               .entry(c)\n                    .or_insert(vec![i64::MAX])\n  \
    \                  .push(note_count[c].len() + 1);\n            }\n          \
    \  '|' => {\n                note_count\n                    .entry(c)\n     \
    \               .or_insert(vec![i64::MAX])\n                    .push(note_count[c].len()\
    \ + 1);\n            }\n            '.' => {\n                note_count\n   \
    \                 .entry(c)\n                    .or_insert(vec![i64::MAX])\n\
    \                    .push(note_count[c].len() + 1);\n            }\n        \
    \    _ => panic!(\"Unexpected character: {}\", c),\n        }\n    });\n\n   \
    \ // We are going to add up the beats for each note to arrive at total note count\
    \ for each note\n    let mut total = 0;\n\n    for &(_, count) in note {\n   \
    \     for &(beat, last_beats) in count {\n            for &mut _ in last_beats\
    \ {\n                total += beat;\n            }\n        }\n    }\n\n    //\
    \ Go through every key in note_count and append their value to the output vector\n\
    \    for &(_, count) in note {\n        for &(beat, last_beats) in count {\n \
    \           for &mut _ in last_beats {\n                let count = note_count[&_];\n\
    \                note.push(count.clone());\n            }\n        }\n    }\n\n\
    \    note.iter().map(|(_, count)| count.len()).collect()", "    let mut beats:\
    \ Vec<isize> = Vec::new();\n    let mut current: usize = 0;\n\n    for c in music_string.chars()\
    \ {\n        if c == '.' {\n            current.push(4);\n        } else if c\
    \ == 'o' {\n            current.push(4);\n        } else if c == '|' {\n     \
    \       current.push(2);\n        } else if c == 'o' {\n            current.push(2);\n\
    \        }\n\n        beats.push(current);\n        current.clear();\n    }\n\n\
    \    beats", '    // TODO: Complete this function', "    let music_string = music_string.to_string();\n\
    \    let mut music_string_to_beats: Vec<isize> = vec![];\n\n    let mut position\
    \ = 0;\n    while position < music_string.len() {\n        match music_string[position]\
    \ {\n            'o' => music_string_to_beats.push(position),\n            'o|'\
    \ => music_string_to_beats.push(position + 1),\n            '.|' => music_string_to_beats.push(position\
    \ + 2),\n            _ => unreachable!(),\n        }\n        position += 1;\n\
    \    }\n    music_string_to_beats", "    music_string\n        .trim()\n     \
    \   .chars()\n        .filter(|c| !c.is_ascii() || c != '|' || c != 'o')\n   \
    \     .collect()", "    music_string\n        .lines()\n        .map(|line| parse_music_line(line))\n\
    \        .collect()", "    let music_string = music_string.to_string();\n    let\
    \ mut beats = vec![];\n\n    for note in music_string.chars().filter(|c| c.is_ascii())\
    \ {\n        if note == '.' {\n            beats.push(0);\n        } else {\n\
    \            let beat_length = note.to_digit(16).unwrap() as isize;\n        \
    \    beats.push(beats.last().checked_add(beat_length).unwrap());\n        }\n\
    \    }\n\n    beats", "    let mut beats: Vec<isize> = vec![];\n    let mut current_beat\
    \ = 1;\n    let mut notes = 0;\n    music_string.split_whitespace().for_each(|note|\
    \ {\n        if note[0] == 'o' {\n            notes += 4;\n        } else if note[0]\
    \ == 'o|' {\n            notes += 2;\n        } else if note[0] == '.|' {\n  \
    \          notes += 1;\n        }\n        beats.push(current_beat);\n       \
    \ current_beat += notes;\n        notes = 1;\n    });\n    beats.push(current_beat);\n\
    \    beats", "    music_string.chars().filter(|&c| c == '|').filter_map(|c| {\n\
    \        if c == 'o' {\n            Some(c as isize)\n        } else {\n     \
    \       None\n        }\n    }).collect()", "    let mut notes = music_string.chars().collect::<Vec<_>>();\n\
    \    let mut beats = vec![];\n    let mut last_note = \"\";\n    let mut last_beat\
    \ = 0;\n    let mut prev_note = String::new();\n    let mut prev_beat = 0;\n \
    \   notes.iter().try_for_each(|c| {\n        match c {\n            '|' => prev_beat\
    \ = 1,\n            'o' => prev_note = \"\",\n            c => {\n           \
    \     if prev_beat == 0 {\n                    beats.push(prev_beat);\n      \
    \          }\n                if prev_note == \"\" {\n                    last_note\
    \ = c.to_string();\n                } else {\n                    last_note =\
    \ c.to_string();\n                }\n                prev_beat = 1;\n        \
    \        prev_note = String::new();\n            }\n        }\n    });\n    for\
    \ beat in beats {\n        beats.push(beat);\n    }\n    beats", "    let mut\
    \ beats_vec: Vec<isize> = vec![];\n    let music_string_split = music_string.split('\
    \ ');\n    for note_string in music_string_split {\n        let note_string_to_beats:\
    \ Vec<&str> = note_string.split('|');\n        let note_string_to_beats = note_string_to_beats.collect();\n\
    \        for (index, note) in note_string_to_beats.iter().enumerate() {\n    \
    \        beats_vec.push(index * 4);\n            beats_vec.push(index * 4 + 1);\n\
    \            beats_vec.push(index * 4 + 2);\n            if note != \"o\" {\n\
    \                beats_vec.push(index * 4 + 1);\n                beats_vec.push(index\
    \ * 4 + 2);\n                beats_vec.push(index * 4 + 3);\n            }\n \
    \       }\n    }\n    beats_vec", "    let mut beats = Vec::new();\n    for note\
    \ in music_string.chars() {\n        match note {\n            'o' => beats.push(4),\n\
    \            'o|' => beats.push(2),\n            '.|' => beats.push(1),\n    \
    \        _ => {\n                assert!(note.is_ascii());\n                let\
    \ note_id = note as usize;\n                beats.push(beat_count(note_id));\n\
    \            }\n        }\n    }\n    beats", "    let mut beats: Vec<isize> =\
    \ Vec::new();\n    let mut i = 0;\n    while i < music_string.len() {\n      \
    \  // \"o\" means whole note and there are four beats\n        if music_string[i]\
    \ == 'o' {\n            beats.push(4);\n            i += 1;\n        } else {\n\
    \            // \"o|\" means half note and there are two beats\n            if\
    \ music_string[i] == 'o' {\n                beats.push(2);\n                i\
    \ += 1;\n            } else {\n                // \".|\" means quarter note and\
    \ there are one beat\n                if music_string[i] == '|' {\n          \
    \          beats.push(1);\n                    i += 1;\n                } else\
    \ {\n                    // other note or rest => error\n                    panic!(\"\
    {}\", music_string);\n                }\n            }\n        }\n    }\n   \
    \ beats", "    let mut output_vec: Vec<isize> = vec![];\n    let mut current_beat:\
    \ isize = 0;\n    let mut current_note_len: isize = 0;\n    music_string.chars().for_each(|c|{\n\
    \        match c {\n            'o' => output_vec.push(current_beat);\n      \
    \      'o|' => output_vec.push(current_beat);\n            'o' => current_beat\
    \ = 0;\n            '.|' => output_vec.push(current_beat);\n            '.' =>\
    \ current_beat = 1;\n            ' ' => current_beat = 2;\n            _ => output_vec.push(current_beat),\n\
    \        }\n        current_beat += 1;\n        current_note_len = current_beat;\n\
    \    });\n    output_vec", "    let mut beats: Vec<isize> = Vec::new();\n    for\
    \ c in music_string.chars() {\n        match c {\n            'o' => beats.push(4),\n\
    \            'o|' => beats.push(2),\n            '.|' => beats.push(1),\n    \
    \        _ => beats.push(1),\n        }\n    }\n    beats", "    let mut beats\
    \ = vec![];\n    let mut i = 0;\n    while i < music_string.len() {\n        let\
    \ char = music_string.chars().nth(i).unwrap().to_string();\n        match char\
    \ {\n            \"o\" | \"o|\" => {\n                beats.push(4);\n       \
    \         i += 1;\n            }\n            \".|\" => {\n                beats.push(1);\n\
    \                i += 1;\n            }\n            \".\" => i += 1,\n      \
    \      _ => panic!(\"This string has invalid characters. Try '.o' or '.|' or '.'.\"\
    ),\n        }\n    }\n    beats", "    let mut vec = Vec::new();\n    music_string.chars()\n\
    \        .filter(|c| c.is_ascii())\n        .for_each(|c| {\n            match\
    \ c {\n                'o' => vec.push(4),\n                'o|' => vec.push(2),\n\
    \                '.|' => vec.push(1),\n                _ => (),\n            }\n\
    \        });\n    vec", "    let mut counts = Vec::new();\n    let mut music_string\
    \ = music_string.trim();\n    let mut last_beat = 0;\n    let mut current_beat\
    \ = 0;\n    let mut last_note = music_string[0];\n    let mut last_note_value\
    \ = -1;\n    let mut last_note_length = 0;\n    for character in music_string\
    \ {\n        if character == \"|\" || character == \"o\" {\n            if current_beat\
    \ > 4 {\n                counts.push(last_note_length);\n            }\n     \
    \       current_beat = 0;\n            last_note = character;\n            last_note_length\
    \ = 0;\n        } else {\n            match last_note {\n                \"o\"\
    \ => {\n                    last_note_value += 1;\n                    last_note_length\
    \ += 1;\n                }\n                \"o|\" => {\n                    last_note_value\
    \ += 2;\n                    last_note_length += 2;\n                }\n     \
    \           \".|\" => {\n                    last_note_value += 4;\n         \
    \           last_note_length += 4;\n                }\n                _ => {\n\
    \                    panic!(\"{} is not a valid musical note.\", last_note);\n\
    \                }\n            }\n            last_note = character;\n      \
    \      last_note_value = -1;\n            last_note_length = 0;\n        }\n \
    \       current_beat += 1;\n    }\n    counts.push(last_note_length);\n    counts",
  "    let mut music_string = music_string.to_string();\n    let mut music_notes:\
    \ Vec<isize> = vec![0; 26];\n\n    for i in 0..music_string.len() {\n        if\
    \ music_string[i] == \".\" || music_string[i] == \"o\" {\n            music_notes[i\
    \ as usize - 1] += 1;\n        }\n    }\n    for i in music_notes.iter() {\n \
    \       if i > 4 { // if note is over 4 beats, it must be a rest\n           \
    \ music_notes.remove(&i);\n        }\n    }\n    music_notes", "    let mut beats_per_note\
    \ = vec![];\n    let mut last_note = String::from(\"\");\n    for ch in music_string.chars()\
    \ {\n        if ch == '.' {\n            beats_per_note.push(4);\n           \
    \ last_note = String::from(\"\");\n        } else if ch == 'o' {\n           \
    \ beats_per_note.push(4);\n            last_note = String::from(\"\");\n     \
    \   } else if ch == '|' {\n            beats_per_note.push(2);\n            last_note\
    \ = String::from(\"\");\n        } else if ch == '-' {\n            beats_per_note.push(1);\n\
    \            last_note = String::from(\"\");\n        } else {\n            last_note.push(ch);\n\
    \        }\n    }\n    beats_per_note", "    let mut beat_count: Vec<isize> =\
    \ vec![];\n    let mut previous_note = String::from(\"\");\n    let mut last_note\
    \ = String::from(\"\");\n    let mut last_beat: usize = 0;\n    let mut last_beats_remaining:\
    \ usize = 0;\n    for c in music_string.chars() {\n        if c == ' ' {\n   \
    \         if previous_note.len() != 0 {\n                beat_count = beat_count.iter_mut().map(|b|\
    \ b + 1).collect();\n            }\n            previous_note = String::from(\"\
    \");\n            last_note = String::from(\"\");\n            last_beat = 0;\n\
    \            last_beats_remaining = 0;\n            continue;\n        }\n   \
    \     if last_note.len() == 0 {\n            last_beat = c.to_i();\n         \
    \   last_beats_remaining = 0;\n        }\n        if last_beats_remaining > 0\
    \ {\n            last_beats_remaining -= 1;\n        }\n        if c == last_note\
    \ {\n            last_beats_remaining += 1;\n        }\n        previous_note\
    \ = last_note;\n        last_note = c;\n        last_beat = last_beat + 1;\n \
    \       last_beats_remaining = last_beats_remaining;\n    }\n    beat_count =\
    \ beat_count.iter_mut().map(|b| b + 1).collect();\n    beat_count", "    let mut\
    \ beats = vec![];\n    for (i, letter) in music_string.chars().enumerate() {\n\
    \        let letter: isize = letter;\n        beats.push(i as isize);\n      \
    \  let rest = music_string.chars().skip(i + 1).take_while(|&b| b != letter).count();\n\
    \        if rest == 1 {\n            beats.push(4);\n        }\n        if rest\
    \ == 2 {\n            beats.push(2);\n        }\n        if rest == 3 {\n    \
    \        beats.push(1);\n        }\n    }\n    beats", "    let mut note_counts\
    \ = Vec::new();\n    let music_string = music_string.trim().to_lowercase();\n\
    \    for note in music_string.chars() {\n        note_counts.push(parse_note(note));\n\
    \    }\n    return note_counts", "    let mut music_string = music_string.to_string();\n\
    \n    // Split note names and rests\n    let mut notes = music_string.split_whitespace();\n\
    \    notes.next();\n    let mut rests = notes.split_whitespace().collect();\n\n\
    \    // Parse notes into their respective frequencies\n    while let Some(note)\
    \ = rests.pop() {\n        let mut rest = note.chars().collect::<String>();\n\
    \        let note = note.to_string();\n        let rest = rest.trim().to_string();\n\
    \n        // Parse note\n        note = note.chars().skip_while(|c| c == ' ' ||\
    \ c == '.').collect::<String>();\n        note = note.to_string();\n\n       \
    \ let note = note.trim().parse::<isize>().unwrap();\n\n        if note.len() ==\
    \ 1 {\n            note = note.parse::<usize>().unwrap();\n        }\n\n     \
    \   // Parse rest\n        rest = rest.chars().skip_while(|c| c == ' ' || c ==\
    \ '.').collect::<String>();\n        rest = rest.to_string();\n\n        // Parse\
    \ rest\n        rest = rest.trim().parse::<isize>().unwrap();\n\n        // We\
    \ need to take care of rests that start with a \"-\" because \"o\" doesn't have\
    \ \"-\".\n        if note.len() == 1 && rest[0] != -256 {\n            note =\
    \ note.parse::<usize>().unwrap();\n            rest = rest.parse::<isize>().unwrap();\n\
    \        }\n\n        notes.push(note + rest);\n    }\n\n    notes", "    music_string.split(|&char|\
    \ char == \".\").map(|string| {\n        let mut current_beat = 0;\n        match\
    \ string.chars().nth(0) {\n            Some('o') => current_beat += 4,\n     \
    \       Some('o|') => current_beat += 2,\n            Some('.|') => current_beat\
    \ += 1,\n            _ => (),\n        }\n        current_beat\n    })", "   \
    \ let mut music_vec: Vec<isize> = Vec::new();\n    let mut cur_note = 0;\n   \
    \ for c in music_string.chars() {\n        music_vec.push(cur_note);\n       \
    \ cur_note += getchar_to_note_map(c);\n    }\n    music_vec", "    let mut beats\
    \ = 0; // Number of beats for each note\n    let mut notes: Vec<isize> = vec![0];\
    \ // Vector with notes, initialized with zero beats.\n\n    music_string.chars().for_each(|c|\
    \ {\n        notes.push(match c {\n            'o' => { beats = 4; },\n      \
    \      'o|' => { beats = 2; },\n            '.|' => { beats = 1; },\n        \
    \    _ => {\n                unreachable!(\"Can't parse char: {}\", c)\n     \
    \       }\n        });\n    });\n\n    notes", "    let mut beats = Vec::new();\n\
    \n    // Split the string into single notes\n    for note in music_string.split_whitespace()\
    \ {\n        // Get the note length and whether it is last or not, and update\
    \ beats\n        let length = note.len();\n        let is_last = if note[length\
    \ - 1] == String::from('.') {\n            true\n        } else {\n          \
    \  false;\n        };\n\n        if let Some(note) = note.parse::<&str>() {\n\
    \            if note.len() == 1 {\n                // Single note of specified\
    \ length\n                if is_last {\n                    beats.push(4);\n \
    \               } else {\n                    beats.push(1);\n               \
    \ }\n            } else if note.len() == 2 {\n                // Half note of\
    \ specified length\n                if is_last {\n                    beats.push(2);\n\
    \                } else {\n                    beats.push(1);\n              \
    \  }\n            } else if note.len() == 3 {\n                // Quater note\
    \ of specified length\n                if is_last {\n                    beats.push(1);\n\
    \                } else {\n                    beats.push(1);\n              \
    \  }\n            } else if note.len() == 4 {\n                // Eighth note\
    \ of specified length\n                if is_last {\n                    beats.push(4);\n\
    \                } else {\n                    beats.push(1);\n              \
    \  }\n            } else {\n                // Unknown note of specified length\n\
    \                panic!(\"Unknown note of length {}\", note.len());\n        \
    \    }\n        } else {\n            panic!(\"Unknown note type {}\", note);\n\
    \        }\n    }\n    beats", "    let mut music_string = music_string.to_string();\n\
    \    let mut music_string = music_string.replace(' ', '|');\n\n    music_string.chars().filter(|c|\
    \ *c != '|').take(music_string.len()).collect()", "    let mut beats: Vec<isize>\
    \ = vec![0i32; 128];\n\n    let mut index = 0;\n\n    for note in music_string.chars()\
    \ {\n        if let 'o' | 'o|' =? note {\n            beats[index % 128] += 1;\n\
    \            index /= 128;\n        }\n\n        if let '.' | '..' =? note {\n\
    \            beats[index % 12] -= 1;\n            index /= 12;\n        }\n\n\
    \        if let '.|' =? note {\n            beats[index % 12] += 1;\n        \
    \    index /= 12;\n        }\n\n        if let '|' =? note {\n            beats[index\
    \ % 12] += 1;\n            index /= 12;\n        }\n    }\n\n    beats", "   \
    \ let mut notes = music_string.chars().map(|note| {\n        match note {\n  \
    \          'o' => 0,\n            'o|' => 1,\n            '.|' => 2,\n       \
    \     _ => unimplemented!(),\n        }\n    });\n\n    let mut beats = 0;\n \
    \   let mut current_note = 0;\n    let mut current_beat_length = 0;\n\n    while\
    \ notes.len() > 0 {\n        if notes.len() == 1 {\n            current_beat_length\
    \ = notes[0].to_string().len();\n            current_note = notes[0].to_string().chars().next().unwrap();\n\
    \        } else {\n            current_beat_length += notes.last().unwrap().to_string().len();\n\
    \            current_note = notes.last().unwrap().to_string().chars().next().unwrap();\n\
    \        }\n\n        if current_note == \"o\" {\n            beats += 4;\n  \
    \      }\n\n        if current_note == \"o|\" {\n            beats += 2;\n   \
    \     }\n\n        if current_note == \".|\" {\n            beats += 1;\n    \
    \    }\n\n        notes.last_mut().unwrap().to_string().chars().cloned()\n   \
    \ }\n\n    beats", "    let mut beats = vec![];\n    let mut curr_beat = 0;\n\
    \    let mut last_note = String::from(\".\");\n    for ch in music_string.chars()\
    \ {\n        match ch {\n            'o' | 'O' | '|' => {\n                if\
    \ last_note.ends_with('|') {\n                    beats.push(curr_beat as isize);\n\
    \                    curr_beat = 0;\n                }\n                last_note\
    \ = String::from(ch.to_string());\n            }\n            '.' | '#' => {\n\
    \                last_note = String::from(ch.to_string());\n            }\n  \
    \          c => {\n                curr_beat = curr_beat as isize + 1;\n     \
    \       }\n        }\n    }\n    if last_note.ends_with('|') {\n        beats.push(curr_beat\
    \ as isize);\n    }\n    beats", "    music_string\n        .chars()\n       \
    \ .filter_map(|c| match c {\n            c if c == 'o' => {\n                if\
    \ c.is_ascii() || c.is_whitespace() {\n                    true\n            \
    \    } else {\n                    false\n                }\n            }\n \
    \           c if c == '|' => {\n                if c.is_ascii() || c.is_whitespace()\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n            }\n            c => {\n                c.is_ascii()\n\
    \            }\n        })\n        .take_while(|&c| c.is_ascii())\n        .collect()",
  "    let mut music_vec = vec![0; music_string.len()];\n    music_vec.set_len(music_string.len());\n\
    \    let mut current_beat = 0;\n    for music_note_index in 0..music_string.len()\
    \ {\n        let music_note = music_string[music_note_index];\n        if music_note\
    \ == \"o\" {\n            music_vec[music_note_index] = 4;\n            current_beat\
    \ = 4;\n        } else if music_note == \"o|\" {\n            music_vec[music_note_index]\
    \ = 2;\n            current_beat = 2;\n        } else if music_note == \".|\"\
    \ {\n            music_vec[music_note_index] = 1;\n            current_beat =\
    \ 1;\n        } else {\n            assert!(music_note == \"..\");\n         \
    \   current_beat += 1;\n        }\n    }\n    music_vec", "    let mut beats =\
    \ Vec::new();\n    let mut note = String::from(music_string);\n    while let Some(note)\
    \ = note.rfind('|') {\n        note.clear();\n        let mut rest = note.split_ascii_whitespace();\n\
    \        while let Some(beat) = rest.next().as_digits() {\n            beats.push(beat);\n\
    \        }\n        note = rest.collect();\n    }\n    note.clear();\n    let\
    \ mut rest = note.split_ascii_whitespace();\n    while let Some(beat) = rest.next().as_digits()\
    \ {\n        beats.push(beat);\n    }\n    beats", "    let mut notes: Vec<isize>\
    \ = Vec::new();\n\n    for note in music_string.chars() {\n        notes.push(note\
    \ == \"o\" ? 4 : note == \"o|\" ? 2 : note == \".|\" ? 1 : 0);\n    }\n\n    notes",
  "    let mut last_beat: usize = 0;\n    let mut beats: Vec<usize> = vec![];\n  \
    \  for note in music_string.chars() {\n        if note.chars().next() != ' ' ||\
    \ note.chars().next() != '#' {\n            beats.push(last_beat);\n         \
    \   last_beat = 0;\n        }\n        last_beat += 1;\n    }\n    beats.push(last_beat);\n\
    \    beats", "    let music_string = music_string.replace(\"o\", \".\").replace(\"\
    |\", \"o\")\n        .replace(\"|\", \"\")\n        .replace(\"|\", \".\")\n \
    \       .replace(\"|\", \".\")\n        .replace(\"|\", \"\")\n        .replace(\"\
    |\", \".\")\n        .replace(\"|\", \"o\")\n        .replace(\"o\", \"o\");\n\
    \n    let mut result = vec![0; music_string.len()];\n    let mut notes: Vec<isize>\
    \ = vec![0; music_string.len()];\n    let mut current_note = 0;\n    let mut current_beat\
    \ = 0;\n    for c in music_string {\n        if c == '.' {\n            current_note\
    \ += 1;\n            current_beat = 0;\n        }\n        if c == 'o' || c ==\
    \ '|' {\n            current_note -= 1;\n            current_beat += 1;\n    \
    \    }\n\n        if current_note < 0 {\n            result[current_beat] += 1;\n\
    \        }\n    }\n    result", "    music_string.lines()\n        .filter_map(|line|\
    \ {\n            if line.is_empty() {\n                None\n            } else\
    \ {\n                Some(line.chars().filter(|c| *c != '|').collect::<Vec<_>>().len())\n\
    \            }\n        })\n        .collect()", "    let mut counter = 0;\n \
    \   let mut beats_per_note = vec![0];\n    for note in music_string.chars() {\n\
    \        match note {\n            'o' => {\n                beats_per_note.push(counter);\n\
    \                counter += 4;\n            }\n            'o|' => {\n       \
    \         beats_per_note.push(counter);\n                counter += 2;\n     \
    \       }\n            '.|' => {\n                beats_per_note.push(counter);\n\
    \                counter += 1;\n            }\n            _ => {\n          \
    \      counter += 1;\n            }\n        }\n    }\n    beats_per_note", " \
    \   let mut beats_per_note = [4, 2, 2, 1]; // Default beats per note\n    music_string.chars().filter(|c|\n\
    \        c.is_ascii_digit() || c.is_ascii_lowercase_letter() || c.is_ascii_uppercase_letter()\n\
    \    ).for_each(|c| {\n        let digit_int = c.digit(10);\n        let note\
    \ = c.ascii_letter();\n        beats_per_note.iter_mut().for_each(|b| {\n    \
    \        match note.clone() {\n                \"o\" => b +=\n               \
    \     digit_int * 4 as isize,\n                \"o|\" => b += digit_int * 2 as\
    \ isize,\n                \".|\" => b +=\n                    digit_int * 1 as\
    \ isize,\n            }\n        })\n    });\n    beats_per_note", "    let mut\
    \ beats = Vec::new();\n    let mut note = String::new();\n    let mut position\
    \ = 1;\n    for c in music_string.chars() {\n        note = note.push_str(c);\n\
    \        if note.len() == 1 && note.chars().first().unwrap() == 'o' {\n      \
    \      note = note.push_str(\"|\");\n        }\n        if note.len() == 1 {\n\
    \            beats.push(position);\n            position += 1;\n            note\
    \ = String::new();\n        } else {\n            note = note.push_str(\"o|\"\
    );\n        }\n    }\n    beats.push(position);\n    beats", "    music_string\n\
    \        .lines()\n        .filter_map(|l| {\n            if l.is_empty() {\n\
    \                None\n            } else {\n                let mut note = l;\n\
    \                if note.len() == 1 {\n                    if note.chars().all(|c|\
    \ c == 'o' || c == '|' || c == '.') {\n                        None\n        \
    \            } else {\n                        Some(note)\n                  \
    \  }\n                } else {\n                    None\n                }\n\
    \            }\n        })\n        .map(|note| {\n            if note.len() ==\
    \ 1 {\n                if note.chars().all(|c| c == 'o' || c == '|' || c == '.')\
    \ {\n                    4\n                } else {\n                    note.chars().count()\
    \ as isize\n                }\n            } else {\n                note.chars().count()\
    \ / 2\n            }\n        })\n        .collect()", "    let mut beats = vec![];\n\
    \    let mut note_symbols = music_string.chars().enumerate().map(|(i, &c)| {\n\
    \        let mut temp: Vec<isize> = vec![];\n        if c == 'o' {\n         \
    \   temp.resize(4);\n            temp[..4] = vec![0, 1, 2];\n        } else if\
    \ c == '.' {\n            temp.resize(4);\n            temp[..4] = vec![0, 1,\
    \ 2, 3];\n        } else if c == '|' {\n            temp.resize(1);\n        \
    \    temp[..1] = vec![0, 1, 2];\n        }\n        beats.extend(temp);\n    \
    \    temp\n    });\n    beats.clone_from(&note_symbols.collect::<Vec<_>>());\n\
    \    beats", "    music_string\n        .as_bytes()\n        .iter()\n       \
    \ .map(|&c| match c {\n            b'o' => 1,\n            b'o|' => 2,\n     \
    \       b'|' => 4,\n            _ => 0,\n        })\n        .collect()", "  \
    \  music_string.split(|&x| match x {\n        'o' => 4,\n        'o|' => 2,\n\
    \        '.|' => 1,\n        _ => panic!(\"Invalid musical note found in string:\
    \ {}\", x),\n    }).collect::<Vec<_>>()", "    music_string\n        .chars()\n\
    \        .filter_map(|c| match c {\n            'o' => Some(1),\n            'o|'\
    \ => Some(2),\n            '.|' => Some(4),\n            _ => None,\n        })\n\
    \        .collect()", "    let mut beats = 0; // how many beats\n    let mut last_note_length\
    \ = 0;\n    let mut last_note = \"\";\n\n    for note in music_string.chars()\
    \ {\n        let mut note_length = 1; // how many notes in a beat\n        let\
    \ mut note_string = \"\";\n        if note == \"o\" {\n            last_note =\
    \ \"o\";\n            last_note_length = 4;\n        }\n        note_length +=\
    \ (note == \"o|\") ? 4 : 2;\n        if note == \".|\" {\n            last_note\
    \ = \".|\";\n            last_note_length = 1;\n        }\n        if note !=\
    \ \".\" {\n            note_string += note;\n        }\n        last_note_length\
    \ += note_length;\n\n        if note == \"o|\" {\n            beats += last_note_length\
    \ / 4;\n        }\n        if note == \".|\" {\n            beats += last_note_length;\n\
    \        }\n        last_note = note_string;\n        last_note_length = note_length;\n\
    \    }\n    beats", "    let mut counts = vec![0; 128];\n    let mut beat_track\
    \ = vec![0; 128];\n    let mut pos = 0;\n    for c in music_string.chars() {\n\
    \        // O is treated as note off (count the length of note off)\n        if\
    \ c == 'o' {\n            counts[c] = pos - 1;\n            pos += 4;\n      \
    \  } else if c == '|' {\n            counts[c] = pos - 2;\n            pos +=\
    \ 2;\n        } else {\n            counts[c] = pos - 1;\n            pos += 1;\n\
    \        }\n    }\n    for k in counts {\n        beat_track[k] += 1;\n    }\n\
    \    return beat_track;", "    music_string\n        .chars()\n        .filter(|&c|\
    \ c != 'o')\n        .filter(|&c| c != '|')\n        .filter(|&c| c != '.')\n\
    \        .collect()", "    let mut beats: Vec<isize> = vec![0i32; MUSIC_LENGTH\
    \ as usize];\n    for music in music_string.chars().skip(1).take(MUSIC_LENGTH\
    \ as usize) {\n        match music.to_ascii_lowercase() {\n            '.' | 'o'\
    \ => {\n                if beats[MUSIC_LENGTH - 1i] as isize != 4 {\n        \
    \            beats[MUSIC_LENGTH - 1i] as isize += 1;\n                }\n    \
    \        }\n            '|' => {\n                if beats[MUSIC_LENGTH - 1i]\
    \ as isize != 2 {\n                    beats[MUSIC_LENGTH - 1i] as isize += 1;\n\
    \                }\n            }\n            _ => {}\n        }\n    }\n   \
    \ beats", "    let mut parsed_music = Vec::new();\n\n    music_string\n      \
    \  .chars()\n        .filter_map(|c| match c {\n            'o' => Some(4),\n\
    \            'o|' => Some(2),\n            '.|' => Some(1),\n            _ =>\
    \ None,\n        })\n        .for_each(|beats| parsed_music.push(beats));\n\n\
    \    parsed_music", "    let mut num_beats = vec![];\n    let mut i = 0;\n   \
    \ loop {\n        let ch = music_string[i];\n        match ch {\n            ch::'o'\
    \ => {\n                num_beats.push(i * 4);\n                i += 1;\n    \
    \        }\n            ch::'|' => {\n                num_beats.push(i * 2);\n\
    \                i += 1;\n            }\n            ch::'.' => {\n          \
    \      i += 1;\n            }\n            _ => i += 1,\n        }\n    }\n  \
    \  num_beats", "    let mut beats = vec![];\n    let mut last_note = String::from(\"\
    .\");\n\n    for c in music_string.chars() {\n        let mut last_beat = String::from(\"\
    .\");\n        let mut beats_changed = false;\n\n        if c == 'o' {\n     \
    \       if beats_changed {\n                beats.push(beats.last().unwrap());\n\
    \                beats.push(0);\n                beats_changed = false;\n    \
    \        }\n        }\n        else if c == '|' {\n            if last_note.to_ascii_lowercase()\
    \ == \".\" {\n                beats_changed = true;\n            }\n         \
    \   beats_changed = true;\n        }\n        else if c == 'o' {\n           \
    \ beats_changed = true;\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \".\" {\n            last_beat =\
    \ String::from(\".\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \".\" {\n            last_beat =\
    \ String::from(\".\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \".\" {\n            last_beat =\
    \ String::from(\".\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \".\" {\n            last_beat =\
    \ String::from(\".\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \".\" {\n            last_beat =\
    \ String::from(\".\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \".\" {\n            last_beat =\
    \ String::from(\".\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \".\" {\n            last_beat =\
    \ String::from(\".\");\n        }", "    let mut beats: Vec<isize> = vec![0; 6];\n\
    \    music_string.split_whitespace().for_each(|note| {\n        let note_type\
    \ = note[0];\n        let note = note.clone();\n\n        if note_type == '.'\
    \ {\n            beats[2] += 1;\n        } else if note_type == 'o' {\n      \
    \      beats[1] += 1;\n        } else if note_type == 'o|' {\n            beats[3]\
    \ += 1;\n        } else {\n            println!(\"Unsupported note type!\");\n\
    \        }\n    });\n\n    beats.iter().enumerate().filter(|(_, beat)| beat %\
    \ 4 != 0)\n        .map(|(_, beat)| beat / 4)\n        .collect()", "    let mut\
    \ beats = Vec::new();\n    let mut note = music_string.chars().skip_while(|&c|\
    \ !c.is_ascii_digit()).take_while(|&c| !c.is_ascii_letter()).collect::<String>();\n\
    \    let mut rest = note.chars().skip_while(|&c| !c.is_ascii_digit()).collect::<String>();\n\
    \    let mut note_last = note.chars().skip_while(|&c| c.is_ascii_digit()).collect::<String>();\n\
    \    note.clear();\n    rest.clear();\n    note_last.clear();\n\n    while !note.is_empty()\
    \ {\n        if note.len() < 3 {\n            note.push('.');\n            continue;\n\
    \        }\n\n        let note_to_int = if note[0] == 'o' { 0 } else if note[0]\
    \ == '.' { 1 } else { 2 };\n        let note_length = note.to_ascii_lowercase().len()\
    \ + 1;\n\n        let beat = note.chars().skip_while(|&c| c.is_ascii_digit()).count();\n\
    \n        // For now, notes that last more or less 1 beat are ignored\n      \
    \  // For other notes it is handled differently\n        if beat < note_length\
    \ {\n            beats.push(beat);\n        }\n\n        note.clear();\n     \
    \   rest.clear();\n        note_last.clear();\n    }\n\n    while !rest.is_empty()\
    \ {\n        if rest.len() < 3 {\n            rest.push('.');\n            continue;\n\
    \        }\n\n        let rest = rest.to_ascii_lowercase();\n\n        let rest\
    \ = rest.chars().skip_while(|&c| c.is_ascii_digit()).collect::<String>();\n\n\
    \        let beat = rest.chars().skip_while(|&c| c.is_ascii_digit()).count();\n\
    \n        // For now, notes that last more or less 1 beat are ignored\n      \
    \  // For other notes it is handled differently\n        if beat < rest.len()\
    \ {\n            beats.push(beat);\n        }\n\n        rest.clear();\n    }\n\
    \n    while !note_last.is_empty() {\n        if note_last.len() < 3 {\n      \
    \      note_last.push('.');\n            continue;\n        }\n\n        let note_last\
    \ = note_last.to_ascii_lowercase();\n\n        let note_last = note_last.chars().skip_while(|&c|\
    \ c.is_ascii_digit()).collect::<String>();\n\n        let beat = note_last.chars().skip_while(|&c|\
    \ c.is_ascii_digit()).count();\n\n        // For now, notes that last more or\
    \ less 1 beat are ignored\n        // For other notes it is handled differently\n\
    \        if beat < note_last.len() {\n            beats.push(beat);\n        }\n\
    \n", "    let mut notes_to_beats: Vec<isize> = Vec::new();\n\n    for note in\
    \ music_string.split(|c| c == 'o' || c == '|' || c == '.') {\n        if note\
    \ == \"o\" {\n            notes_to_beats.push(4);\n        }\n        if note\
    \ == \"o|\" {\n            notes_to_beats.push(2);\n        }\n        if note\
    \ == \".|\" {\n            notes_to_beats.push(1);\n        }\n    }\n    notes_to_beats",
  "    // Return empty array if music string is empty\n    let mut music_vector =\
    \ Vec::new();\n    let mut music_string_iter = music_string.chars().collect::<String>();\n\
    \    let mut note_to_beat = 0;\n\n    // Loop over each character in music_string,\
    \ one at a time\n    // - If the character is a single note (a dot), then skip\
    \ to the last note\n    // - If the character is a double note, then set the current\
    \ note to a double note (a pipe)\n    // - If the character is an 'o', then set\
    \ the current note to the first note\n    // - Otherwise, set the current note\
    \ to the next note\n    for _ in 0..music_string.len() {\n        // Get current\
    \ character\n        let c = music_string_iter.next().unwrap();\n\n        //\
    \ Skip notes if necessary\n        match c {\n            'o' => {\n         \
    \       note_to_beat = 0;\n            }\n            '.' => {\n             \
    \   note_to_beat += 1;\n            }\n            _ => {}\n        }\n\n    \
    \    // If a note, then add it to the music vector\n        if note_to_beat >\
    \ 0 {\n            music_vector.push(note_to_beat);\n        }\n    }\n    music_vector",
  "    let music_string = music_string.trim_left();\n    let music_string = music_string.trim_right();\n\
    \n    let mut parsed_music = Vec::new();\n    let mut position = 0;\n    for c\
    \ in music_string.chars() {\n        if c == 'o' {\n            parsed_music.push(position);\n\
    \            position = 0;\n        } else {\n            position += 1;\n   \
    \     }\n    }\n    parsed_music.push(position);\n    parsed_music", "    let\
    \ mut beats: Vec<isize> = vec![];\n\n    for note in music_string.chars() {\n\
    \        match note {\n            'o' => beats.push(4),\n            'o|' =>\
    \ beats.push(2),\n            '.|' => beats.push(1),\n            _ => {\n   \
    \             let mut beats = beats.clone();\n                beats.pop();\n \
    \               beats.push(1);\n                beats\n            }\n       \
    \ }\n    }\n\n    beats", "    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current: usize = 0;\n    let mut next_beat: usize = 4;\n    let mut last_beat:\
    \ usize = 4;\n    let mut last: usize = 0;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => beats.push(current),\n            'o|'\
    \ => beats.push(current - last_beat + next_beat),\n            '.|' => beats.push(current\
    \ - last_beat),\n            _ => {}\n        };\n        let mut new_current:\
    \ usize = 0;\n        let mut last_beat: usize = 4;\n        match c {\n     \
    \       'o' => new_current = current + 4,\n            'o|' => new_current = current\
    \ + 2,\n            '.|' => new_current = current + 1,\n            _ => {}\n\
    \        };\n        last_beat = new_current - last_beat;\n        current = new_current;\n\
    \        last_beat = last_beat;\n        next_beat = next_beat;\n    }\n    beats",
  "    let mut notes = vec![];\n    let mut beats = vec![];\n\n    let mut note_chars\
    \ = music_string.chars();\n    let mut last_note = String::from(\".\");\n\n  \
    \  while let Some(note) = note_chars.next() {\n        notes.push(*note as isize);\n\
    \        last_note = note;\n    }\n\n    for note in notes {\n        if note\
    \ != last_note {\n            beats.push(1);\n        } else {\n            beats.push(4);\n\
    \        }\n    }\n\n    return beats;", "    music_string.lines()\n        .filter(|line|\
    \ !line.is_empty())\n        .map(|line| line.chars().collect::<Vec<char>>())\n\
    \        .filter(|chars| !chars.is_empty())\n        .map(|chars| chars.iter().fold(1,\
    \ |acc, c| acc + c))\n        .collect()", "    let mut music_string = music_string.trim();\n\
    \    let mut music_string_split: Vec<String> = music_string.split_whitespace();\n\
    \    music_string.clear();\n\n    let mut notes_counter: Vec<isize> = Vec::new();\n\
    \    music_string_split.iter().for_each(|note_string| {\n        if note_string.len()\
    \ <= 1 {\n            notes_counter.push(0);\n        } else {\n            notes_counter.push(note_string.len()\
    \ - 1);\n        }\n    });\n    notes_counter.sort();\n    notes_counter.reverse();\n\
    \    music_string_split.clear();\n\n    for notes_counter_index in notes_counter.iter().cloned()\
    \ {\n        let mut notes_counter_index: isize = notes_counter_index;\n     \
    \   let mut note_string: String = music_string[notes_counter_index..].to_string();\n\
    \        let mut note_string_split: Vec<String> = note_string.split_whitespace();\n\
    \n        note_string.clear();\n\n        for note_string_index in note_string_split.iter().cloned()\
    \ {\n            if note_string_index == \".\" {\n                notes_counter_index\
    \ += 1;\n            }\n            if note_string_index == \"|\" {\n        \
    \        notes_counter_index += 1;\n            }\n            notes_counter_index\
    \ += 1;\n        }\n\n        notes_counter.push(notes_counter_index);\n    }\n\
    \    music_string_split.clear();\n\n    notes_counter", "    let mut beats = Vec::new();\n\
    \    let mut pos = 0;\n    while pos < music_string.len() {\n        let char\
    \ = music_string[pos];\n        if char == 'o' {\n            pos += 1;\n    \
    \        beats.push(4);\n        }\n        if char == 'o|' {\n            pos\
    \ += 1;\n            beats.push(2);\n        }\n        if char == '.|' {\n  \
    \          pos += 1;\n            beats.push(1);\n        }\n        pos += 1;\n\
    \    }\n    beats", "    let music_chars: Vec<&str> = music_string.chars().collect();\n\
    \    let mut beats = Vec::with_capacity(music_string.len());\n    for char in\
    \ music_chars.iter() {\n        let mut beat = 0;\n        if char == 'o' {\n\
    \            beat = 4;\n        } else if char == '.' {\n            beat = 1;\n\
    \        } else if char == '|' {\n            beat = 2;\n        } else {\n  \
    \          beat = 3;\n        }\n        for _ in 0..beat {\n            beats.push(0);\n\
    \        }\n    }\n    beats", "    let mut beats: Vec<isize> = vec![0, 0, 0,\
    \ 0, 0, 0, 0, 0];\n    let mut current_beat = 0;\n    let mut note_chars = music_string.chars();\n\
    \    let mut current_note = 0;\n\n    for char in &note_chars {\n        let is_last_note\
    \ = char == ' ';\n        if is_last_note {\n            beats[current_note] +=\
    \ current_beat;\n            current_beat += 1;\n            current_note += 1;\n\
    \        } else {\n            if current_note > 4 {\n                break;\n\
    \            }\n            let char_index: usize = char.as_bytes()[0].to_digit(16)\
    \ - '0'.to_digit(16) - 1;\n            beats[current_note] += (beats[current_note\
    \ - 1] + 4 * (char_index as isize));\n            current_beat += 1;\n       \
    \     current_note += 1;\n        }\n    }\n    beats", "    let mut beats = vec![];\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    |\".to_string(), \"\").split(\" \").for_each(|note| {\n        if note == \".\"\
    \n            || note == \".\"\n            || note == \".\"\n            || note\
    \ == \".\"\n            || note == \"o\"\n            || note == \"o\"\n     \
    \       || note == \"o\"\n            || note == \"o\"\n            || note ==\
    \ \"o\"\n        {\n            beats.push(4);\n        }\n        elsif note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \          || note == \"o|\"\n            || note == \"o|\"\n            || note\
    \ == \"o|\"\n        {\n            beats.push(2);\n        }\n        elsif note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \          || note == \"o|\"\n            || note == \"o|\"\n        {\n     \
    \       beats.push(1);\n        }\n        elsif note == \"o|\"\n            ||\
    \ note == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\
    \n            || note == \"o|\"\n        {\n            beats.push(1);\n     \
    \   }\n        elsif note == \"o|\"\n            || note == \"o|\"\n         \
    \   || note == \"o|\"\n            || note == \"o|\"\n            || note == \"\
    o|\"\n        {\n            beats.push(1);\n        }\n        elsif note ==\
    \ \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n     \
    \       || note == \"o|\"\n            || note == \"o|\"\n        {\n        \
    \    beats.push(1);\n        }\n        elsif note == \"o|\"\n            || note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \          || note == \"o|\"\n        {\n            beats.push(1);\n        }\n\
    \        elsif note == \"o|\"\n            || note == \"o|\"\n            || note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \      {\n            beats.push(1);\n        }\n        elsif note == \"o|\"\n\
    \            || note == \"o|\"\n            || note == \"o|\"\n            ||\
    \ note == \"o|\"\n            || note == \"", "    let mut note_counts: Vec<isize>\
    \ = Vec::new();\n    let mut note_to_beats: Vec<isize> = Vec::new();\n    let\
    \ mut notes_without_beat: Vec<isize> = Vec::new();\n    let mut beats: Vec<isize>\
    \ = Vec::new();\n\n    for music_note in music_string.chars() {\n        note_to_beats.clear();\n\
    \        notes_without_beat.clear();\n        note_counts.clear();\n\n       \
    \ let note = music_note.to_string();\n        let note_to_beat_pos = note.find(\"\
    |\");\n\n        if note_to_beat_pos == Some(note.len() - 1) {\n            note_to_beats.push(note_to_beat_pos\
    \ as isize);\n        } else {\n            note_to_beats.push(note_to_beat_pos\
    \ as isize);\n            notes_without_beats.push(note_to_beat_pos as isize);\n\
    \        }\n\n        let note_pos = note.rfind(\"o|\".to_string());\n\n     \
    \   if note_pos == Some(note.len() - 1) {\n            note_counts.push(note_counts.len()\
    \ as isize);\n        } else {\n            note_counts.push(note_counts.len()\
    \ as isize);\n            notes_without_beats.push(note_pos as isize);\n     \
    \   }\n\n        let note_without_beat_pos = note.rfind(\"o\".to_string());\n\n\
    \        if note_without_beat_pos == Some(note.len() - 1) {\n            note_counts.push(note_counts.len()\
    \ as isize);\n        } else {\n            note_counts.push(note_counts.len()\
    \ as isize);\n            notes_without_beats.push(note_without_beat_pos as isize);\n\
    \        }\n    }\n\n    for note_count in note_counts {\n        beats.push(note_count);\n\
    \    }\n\n    for note_without_beat in notes_without_beats {\n        beats.push(note_counts[note_without_beat]);\n\
    \    }\n\n    beats", '    // Implementation here', "    let music_string = music_string.to_string();\n\
    \    let mut beats = vec![];\n    let mut note_count = vec![];\n\n    for _ in\
    \ 0..music_string.len() {\n        let mut current_note = music_string[..];\n\
    \        if current_note == \"o\" {\n            let last_note = music_string[..];\n\
    \            if last_note == \"|\" {\n                note_count[0] += 4;\n  \
    \          } else {\n                note_count[0] += 2;\n            }\n    \
    \        current_note = music_string[..];\n        }\n\n        beats.push(current_note.chars().count()\
    \ as isize);\n        let current_note_len = current_note.chars().count();\n \
    \       if current_note_len == 0 {\n            let last_note = music_string[..];\n\
    \            if last_note == \"o\" {\n                note_count[0] += 4;\n  \
    \          } else {\n                note_count[0] += 2;\n            }\n    \
    \        current_note = music_string[..];\n        }\n    }\n\n    for _ in 0..music_string.len()\
    \ {\n        let mut current_note = music_string[..];\n        if current_note\
    \ == \"o\" {\n            let last_note = music_string[..];\n            if last_note\
    \ == \"|\" {\n                note_count[0] += 4;\n            } else {\n    \
    \            note_count[0] += 2;\n            }\n            current_note = music_string[..];\n\
    \        }\n\n        beats.push(current_note.chars().count() as isize);\n   \
    \     let current_note_len = current_note.chars().count();\n        if current_note_len\
    \ == 0 {\n            let last_note = music_string[..];\n            if last_note\
    \ == \"o\" {\n                note_count[0] += 4;\n            } else {\n    \
    \            note_count[0] += 2;\n            }\n            current_note = music_string[..];\n\
    \        }\n    }\n\n    for _ in 0..music_string.len() {\n        let mut current_note\
    \ = music_string[..];\n        if current_note == \"o\" {\n            let last_note\
    \ = music_string[..];\n            if last_note == \"|\" {\n                note_count[0]\
    \ += 4;\n            } else {\n                note_count[0] += 2;\n         \
    \   }\n            current_note = music_string[..];\n        }\n\n        beats.push(current_note.chars().count()\
    \ as isize);\n        let current_note_len = current_note.chars().count();\n \
    \       if current_note_len == 0 {\n            let last_note = music_string[..];\n\
    \            if last_note == \"o\" {\n                note_count[0] += 4;\n  \
    \          } else {\n                note_count[0] += 2;\n            }\n    \
    \        current_note = music_string[..", "    music_string.chars().filter(|c|\
    \ *c == 'o').filter(|c| *c != '|').count()", "    let mut music_string = music_string.to_string();\n\
    \    music_string.replace(\"o|\", \"o\").replace(\"o|\", \"o|\").replace(\"o|\"\
    , \"o\").replace(\"o|\", \"o|\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"o|\",\
    \ \"o|\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"o|\", \"o|\").replace(\"\
    o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"o|\", \"o|\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"\
    o|\", \"o|\").replace(\"o|\", \"o|\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |", "    music_string.lines()\n        .map(|l| {\n            let mut splits\
    \ = l.split_whitespace();\n            let note = splits[0];\n            let\
    \ rest = splits\n                .iter()\n                .skip(1)\n         \
    \       .collect::<Vec<_>>()\n                .join();\n            note == \"\
    .\"\n                ? rest.len()\n                : note == \"o\"\n         \
    \       ? rest.len()\n                : note.parse::<usize>().unwrap()\n     \
    \   })\n        .collect()", "    music_string.trim().lines()\n        .filter(|l|\
    \ !l.is_empty())\n        .filter_map(|l| {\n            if l.is_empty() {\n \
    \               None\n            } else {\n                let first_char = l.chars().nth(0).unwrap();\n\
    \                match first_char {\n                    'o' => Some(4),\n   \
    \                 'o|' => Some(2),\n                    '.|' => Some(1),\n   \
    \                 _ => None,\n                }\n            }\n        })\n \
    \       .collect()", "    let mut beats = Vec::new();\n\n    music_string\n  \
    \      .split_whitespace()\n        .map(|m| {\n            if m.is_empty() {\n\
    \                return;\n            }\n\n            let mut last = 0;\n   \
    \         let mut note = m.chars().filter(|c| !c.is_ascii_digit()).next();\n \
    \           let mut rest = m.chars().filter(|c| c.is_ascii_digit()).next();\n\n\
    \            while let Some((mut b, mut c)) = last.take_while(|c| *c != '.' &&\
    \ c != '|') {\n                last = c;\n                note += 1;\n       \
    \     }\n\n            while let Some((_, mut c)) = last.take_while(|c| *c ==\
    \ '.') {\n                last = c;\n                note += 1;\n            }\n\
    \n            while let Some((_, mut c)) = last.take_while(|c| *c == '|') {\n\
    \                last = c;\n                note += 1;\n            }\n\n    \
    \        note += 1;\n            note = note % 12;\n            beats.push(note);\n\
    \            *rest = Some((b, c));\n        })\n        .collect()", "    music_string\n\
    \        .trim()\n        .split(\"|\")\n        .iter()\n        .cloned()\n\
    \        .map(|mut note| {\n            if note.is_empty() {\n               \
    \ return -1;\n            }\n\n            if note.chars().nth(1).unwrap().to_ascii_lowercase()\
    \ == note {\n                return 1;\n            }\n\n            note\n  \
    \              .chars()\n                .skip_while(|c| !c.is_ascii() || c >=\
    \ '0' || c <= '9')\n                .take(note.len() - 1)\n                .unwrap()\n\
    \                .parse().unwrap()\n        })\n        .filter(|note| note >=\
    \ -1)\n        .collect()", "    let mut beats: Vec<isize> = Vec::new();\n   \
    \ let mut notes = music_string.chars().collect::<String>().trim().split_whitespace();\n\
    \    let mut previous_note = String::from(\"\");\n    for note in notes {\n  \
    \      if note == previous_note {\n            beats.push(beats.last().unwrap()\
    \ + 1);\n        } else {\n            beats.push(1);\n        }\n        previous_note\
    \ = note;\n    }\n    beats", "    let mut counts = vec![0; 12];\n    let mut\
    \ current_index = 0;\n    let mut previous_index = -1;\n    for char in music_string\
    \ {\n        let char = char.chars().next().unwrap();\n        if char == ' '\
    \ {\n            current_index = 0;\n        } else {\n            let beat_length\
    \ = (char == 'o' ? 4 : 2);\n            if previous_index == -1 {\n          \
    \      previous_index = current_index;\n            }\n            current_index\
    \ += beat_length;\n            counts[previous_index] += 1;\n            previous_index\
    \ = current_index;\n        }\n    }\n    counts[previous_index] += 1;\n    counts",
  "    music_string.chars().flat_map(|c| {\n        if c == 'o' {\n            vec![4,\
    \ 2]\n        } else if c == 'o|' {\n            vec![1, 1]\n        } else if\
    \ c == '.|' {\n            vec![1, 1]\n        } else {\n            vec![]\n\
    \        }\n    })", "    let mut music_chars = music_string.chars();\n    music_chars.next();\n\
    \    music_chars.next();\n    music_chars.next();\n    music_chars.next();\n\n\
    \    let mut beats: Vec<isize> = music_chars.collect();\n\n    while !music_chars.is_empty()\
    \ {\n        let next_char = music_chars.next().unwrap();\n        if next_char\
    \ == \"o\" {\n            beats.truncate(beats.len());\n            beats.push(4);\n\
    \        } else if next_char == \"|\" {\n            beats.truncate(beats.len());\n\
    \            beats.push(2);\n        } else if next_char == \".\" {\n        \
    \    beats.truncate(beats.len());\n            beats.push(1);\n        } else\
    \ {\n            panic!(\"Unexpected input!\");\n        }\n    }\n\n    beats",
  "    let mut beats_notes: Vec<isize> = Vec::new();\n    let mut current_note = 0;\n\
    \    let mut notes = music_string.chars().take(music_string.len()).collect::<String>();\n\
    \    for note in notes {\n        if note == '.' {\n            beats_notes.push(current_note\
    \ * 4);\n            current_note = 0;\n        } else {\n            current_note\
    \ += 1;\n        }\n    }\n    beats_notes.push(current_note * 4);\n    beats_notes",
  "    let mut result = vec![];\n    let music_string: &str = music_string.to_string();\n\
    \    for c in music_string.chars() {\n        match c {\n            'o' => result.push(4),\n\
    \            'o|' => result.push(2),\n            '.|' => result.push(1),\n  \
    \          _ => {}\n        }\n    }\n    result", "    let mut beats = Vec::new();\n\
    \    let mut last_note = MusicNote::WholeNote;\n    for note in music_string.chars()\
    \ {\n        if note.to_ascii_lowercase() == 'o' {\n            if last_note ==\
    \ MusicNote::WholeNote {\n                last_note = MusicNote::HalfNote {\n\
    \                    length: 4,\n                    beats: 1,\n             \
    \   };\n            } else {\n                last_note = MusicNote::QuaterNote\
    \ {\n                    length: 2,\n                    beats: 1,\n         \
    \       };\n            }\n        } else if note.to_ascii_lowercase() == 'o|'\
    \ {\n            last_note = MusicNote::HalfNote {\n                length: 2,\n\
    \                beats: 1,\n            };\n        } else if note.to_ascii_lowercase()\
    \ == '.|' {\n            last_note = MusicNote::QuaterNote {\n               \
    \ length: 1,\n                beats: 1,\n            };\n        } else {\n  \
    \          beats.push(1);\n        }\n    }\n    beats.push(4);\n    last_note.beats\
    \ += beats.iter().fold(1, |sum, beat| sum + beat);\n    beats", "    let mut num_beats:\
    \ isize = 0;\n    let mut current_beat = 0;\n\n    let mut notes: Vec<&str> =\
    \ music_string.split_whitespace().filter(|&c| !c.is_ascii()).collect();\n    let\
    \ mut last: isize = 0;\n    let mut last_note = notes.len() - 1;\n    let mut\
    \ last_note_bpm = 0.0;\n    while !notes[last_note].is_ascii() {\n        last\
    \ = 0;\n        last_note_bpm = 0.0;\n        last_note = last_note - 1;\n   \
    \ }\n    let note = &notes[last_note];\n\n    // \"o\" -> \"W\", \"O\" -> \"B\"\
    , \"B\" -> \"C\", \"C\" -> \"D\", \"D\" -> \"E\", \"E\" -> \"F\"\n    for mut\
    \ c in note {\n        match c {\n            'o' | 'O' | 'b' | 'B' | 'c' | 'C'\
    \ | 'd' | 'D' | 'e' | 'E' | 'f' | 'F' => last = 4,\n            'o|' | 'O|' |\
    \ 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => last\
    \ = 2,\n            _ => last = 1\n        }\n    }\n\n    notes.iter_mut().skip(last).for_each(|c|\
    \ {\n        match c {\n            'o' | 'O' | 'b' | 'B' | 'c' | 'C' | 'd' |\
    \ 'D' | 'e' | 'E' | 'f' | 'F' => {\n                num_beats += 4;\n        \
    \        current_beat += 4;\n            },\n            'o|' | 'O|' | 'b|' |\
    \ 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => {\n        \
    \        num_beats += 2;\n                current_beat += 2;\n            },\n\
    \            _ => {\n                num_beats += 1;\n                current_beat\
    \ += 1;\n            }\n        }\n    });\n    num_beats -= current_beat;\n \
    \   num_beats -= last_note_bpm;\n    return vec![num_beats]", "    music_string.chars().enumerate().map(|(i,\
    \ c)| {\n        match c {\n            'o' => vec![4, 4],\n            'o|' =>\
    \ vec![2, 2],\n            '.|' => vec![1, 1],\n            _ => vec![0],\n  \
    \      }\n    })", "    let mut beats = Vec::new();\n    for note in music_string.chars()\
    \ {\n        if note == 'o' || note == 'o|' || note == '.' {\n            beats.push(4);\n\
    \        } else {\n            beats.push(beats.last().unwrap().checked_add(1).unwrap());\n\
    \        }\n    }\n    beats", "    let mut beats_per_note = vec![];\n    let\
    \ mut note_count = vec![];\n    let mut current_note = String::new();\n    let\
    \ mut current_beat = 0;\n\n    for note in music_string.chars() {\n        if\
    \ !note.is_ascii() {\n            println!(\"Music input should be an ASCII string\"\
    );\n        }\n\n        current_note += note.to_string();\n\n        if current_note\
    \ == \".\" {\n            note_count = vec![];\n            current_note = String::new();\n\
    \            current_beat = 0;\n        }\n\n        if current_note == \"o\"\
    \ {\n            beats_per_note.push(current_beat + 4);\n            current_note\
    \ = String::new();\n            current_beat = 0;\n        }\n\n        if current_note\
    \ == \"o|\" {\n            beats_per_note.push(current_beat + 2);\n          \
    \  current_note = String::new();\n            current_beat = 0;\n        }\n\n\
    \        note_count.push(current_beat);\n        current_beat += 1;\n    }\n\n\
    \    note_count", "    music_string\n        .chars()\n        .enumerate()\n\
    \        .filter_map(|(i, char)| {\n            // Here is a possible implementation\
    \ for handling notes starting with accidentals:\n            // https://stackoverflow.com/questions/5301670/how-to-handle-accidental-pitches-using-regex\n\
    \            char == '.'\n                || (i > 0 && char == \".\" && music_string[i\
    \ - 1] == '|')\n        })\n        .collect()", "    let mut beats_vec: Vec<isize>\
    \ = Vec::new();\n\n    for c in music_string {\n        if c != '.' && c != 'o'\
    \ && c != '|' && c != '|' {\n            panic!(\"Invalid character {} in music\
    \ string\", c);\n        }\n        if c == '.' {\n            beats_vec.push(1);\n\
    \        } else if c == '|' {\n            beats_vec.push(4);\n        } else\
    \ if c == 'o' || c == 'o|' {\n            beats_vec.push(4);\n        }\n    }\n\
    \    beats_vec"]
stop_tokens:
- "\n}"
