language: rs
name: HumanEval_23_strlen
results:
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() + 0\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe7qg9_fl.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count() + 0\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     (string.chars().count() + 0).try_into().unwrap()\n  |    \
    \ +                          +++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.bytes().len()\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq5dr1_qj.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.bytes().len()\n  | \
    \    ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.bytes().len().try_into().unwrap()\n  |                  \
    \       ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0\n    }\n    string.chars().count(|c|\
    \ *c == 0)\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp5433apgt.rs:10:27\n\
    \   |\n10 |     string.chars().count(|c| *c == 0)\n   |                      \
    \     ^ consider giving this closure parameter a type\n   |\n   = note: type must\
    \ be known at this point\n\nerror[E0061]: this function takes 0 arguments but\
    \ 1 argument was supplied\n   --> /tmp/tmp5433apgt.rs:10:20\n    |\n10  |    \
    \ string.chars().count(|c| *c == 0)\n    |                    ^^^^^ -----------\
    \ supplied 1 argument\n    |                    |\n    |                    expected\
    \ 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5433apgt.rs:10:5\n   |\n6  | fn strlen(string:\
    \ String) -> isize {\n   |                              ----- expected `isize`\
    \ because of return type\n...\n10 |     string.chars().count(|c| *c == 0)\n  \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |     string.chars().count(|c| *c == 0).try_into().unwrap()\n\
    \   |                                      ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0282,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() + 1\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsrzizjqe.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count() + 1\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     (string.chars().count() + 1).try_into().unwrap()\n  |    \
    \ +                          +++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n    let mut\
    \ len = 0;\n    for c in string.chars() {\n        len += 1;\n        if len >\
    \ MAX_LEN {\n            return MAX_LEN;\n        }\n    }\n    len\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MAX_LEN` in this scope\n  --> /tmp/tmp9z_e8q7y.rs:13:18\n\
    \   |\n13 |         if len > MAX_LEN {\n   |                  ^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `MAX_LEN` in this scope\n \
    \ --> /tmp/tmp9z_e8q7y.rs:14:20\n   |\n14 |             return MAX_LEN;\n   |\
    \                    ^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfm55qe7x.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| c.is_ascii()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| c.is_ascii()).count().try_into().unwrap()\n\
    \  |                                                    ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0\n    }\n    if string.len()\
    \ <= 0 {\n        return 1\n    }\n    string.len() - 1\n}\n\nfn main() {\n  \
    \  let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3q_qx90u.rs:13:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n13 |     string.len() - 1\n  \
    \ |     ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |     (string.len() - 1).try_into().unwrap()\n   |     +           \
    \     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_ref().len_utf8()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpi9jwxcvx.rs:7:12\n\
    \  |\n7 |     string.as_ref().len_utf8()\n  |     -------^^^^^^--\n  |     | \
    \     |\n  |     |      cannot infer type for type parameter `T` declared on the\
    \ trait `AsRef`\n  |     this method call resolves to `&T`\n  |\n  = note: type\
    \ must be known at this point\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n    let mut\
    \ len: isize = 0;\n    for c in string.as_bytes() {\n        len += 1;\n    }\n\
    \    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() != 0 {\n        string.len()\n    } else {\n\
    \        0\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplfd2p05b.rs:8:9\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     if string.len() != 0 {\n8 |\
    \         string.len()\n  |         ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         string.len().try_into().unwrap()\n  |  \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.length()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmped8eizha.rs:7:12\n  |\n7 |     string.length()\n\
    \  |            ^^^^^^ help: there is an associated function with a similar name:\
    \ `len`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count().unwrap_or(0)\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for type `usize` in the\
    \ current scope\n --> /tmp/tmp8zq895ko.rs:7:28\n  |\n7 |     string.chars().count().unwrap_or(0)\n\
    \  |                            ^^^^^^^^^ method not found in `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for c in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.chars().count() == 0 {\n        return 0;\n    }\n\
    \    string.chars().count();\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpujtp8azn.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count().unwrap_or(0)\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for type `usize` in the\
    \ current scope\n --> /tmp/tmp8zq895ko.rs:7:28\n  |\n7 |     string.chars().count().unwrap_or(0)\n\
    \  |                            ^^^^^^^^^ method not found in `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let len = string.len();\n    if len == 0 {\n        0\n    }\
    \ else {\n        len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpscco05kz.rs:11:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |         len\n   |       \
    \  ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     \
    \    len.try_into().unwrap()\n   |            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.length()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmped8eizha.rs:7:12\n  |\n7 |     string.length()\n\
    \  |            ^^^^^^ help: there is an associated function with a similar name:\
    \ `len`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() + 1\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsrzizjqe.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count() + 1\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     (string.chars().count() + 1).try_into().unwrap()\n  |    \
    \ +                          +++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.rev().len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpk55clgog.rs:7:12\n\
    \    |\n7   |       string.rev().len()\n    |              ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes().len()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0xvzor.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n --> /tmp/tmphjpvz05h.rs:7:28\n  |\n7 |     string.chars().count().unwrap()\n\
    \  |                            ^^^^^^ method not found in `usize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = string.len();\n    unsafe {\n        assert!(len\
    \ == string.as_ptr().add(rand::random::<usize>() % len));\n    }\n    len\n}\n\
    \nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `rand`\n\
    \ --> /tmp/tmpmyn0afts.rs:9:44\n  |\n9 |         assert!(len == string.as_ptr().add(rand::random::<usize>()\
    \ % len));\n  |                                            ^^^^ use of undeclared\
    \ crate or module `rand`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmyn0afts.rs:9:24\n\
    \  |\n9 |         assert!(len == string.as_ptr().add(rand::random::<usize>() %\
    \ len));\n  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found *-ptr\n  |\n  = note:     expected type `usize`\n  \
    \        found raw pointer `*const u8`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmyn0afts.rs:11:5\n   |\n6  | fn strlen(string: String) -> isize {\n\
    \   |                              ----- expected `isize` because of return type\n\
    ...\n11 |     len\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     len.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes().len()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0xvzor.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0\n    }\n\n    string.as_bytes().len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprlgfxm4d.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     string.as_bytes().len()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     string.as_bytes().len().try_into().unwrap()\n   |      \
    \                      ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes()\n        .iter()\n        .map(|c| c.to_ascii_lowercase().len())\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `u8` in the current\
    \ scope\n --> /tmp/tmpuu3pgn5x.rs:9:41\n  |\n9 |         .map(|c| c.to_ascii_lowercase().len())\n\
    \  |                                         ^^^ method not found in `u8`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for c in string.bytes() {\n        if\
    \ *c < b'A' || *c > b'z' {\n            return -1;\n        }\n        len +=\
    \ 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `u8` cannot be dereferenced\n --> /tmp/tmpwu_oeqdt.rs:9:12\n\
    \  |\n9 |         if *c < b'A' || *c > b'z' {\n  |            ^^\n\nerror[E0614]:\
    \ type `u8` cannot be dereferenced\n --> /tmp/tmpwu_oeqdt.rs:9:25\n  |\n9 |  \
    \       if *c < b'A' || *c > b'z' {\n  |                         ^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes().len()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0xvzor.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n\n    let\
    \ mut pos = 0;\n    let mut len = string.len();\n\n    while pos < len {\n   \
    \     let c = &string[pos];\n        if !c.is_ascii() {\n            break;\n\
    \        }\n\n        pos += 1;\n        len -= 1;\n    }\n\n    len\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp9xii0oco.rs:15:18\n\
    \   |\n15 |         let c = &string[pos];\n   |                  ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9xii0oco.rs:24:5\n\
    \   |\n6  | fn strlen(string: String) -> isize {\n   |                       \
    \       ----- expected `isize` because of return type\n...\n24 |     len\n   |\
    \     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n24 |     len.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = string.len();\n    len -= 1;\n    len\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp53254qhn.rs:9:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n...\n9 |     len\n  |     ^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     len.try_into().unwrap()\n\
    \  |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_str().len()\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdgtglx8_.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_str().len()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.as_str().len().try_into().unwrap()\n  |                 \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp08kilyo6.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.chars().count().try_into().unwrap()\n  |                \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() + 1;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3243fmbj.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.length()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmped8eizha.rs:7:12\n  |\n7 |     string.length()\n\
    \  |            ^^^^^^ help: there is an associated function with a similar name:\
    \ `len`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.length()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmped8eizha.rs:7:12\n  |\n7 |     string.length()\n\
    \  |            ^^^^^^ help: there is an associated function with a similar name:\
    \ `len`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let size = string.len() as isize;\n    if size == 0 {\n    \
    \    0\n    } else {\n        size\n    }\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n --> /tmp/tmphjpvz05h.rs:7:28\n  |\n7 |     string.chars().count().unwrap()\n\
    \  |                            ^^^^^^ method not found in `usize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp08kilyo6.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.chars().count().try_into().unwrap()\n  |                \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() == 0 {\n        return 0;\n    }\n\n    let\
    \ len = string.len();\n\n    if len == 0 {\n        -1\n    } else {\n       \
    \ len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0yzr5_3_.rs:16:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n16 |         len\n   |       \
    \  ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n16 |     \
    \    len.try_into().unwrap()\n   |            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut s = string.as_str();\n    s.chars().count();\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa0yqryxk.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes().len()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0xvzor.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n\n    let\
    \ mut len = 0;\n    for c in string.chars() {\n        len = len + 1;\n    }\n\
    \n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let len = string.len();\n    if len > MAX_LEN {\n        MAX_LEN\n\
    \    } else {\n        len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MAX_LEN` in this scope\n --> /tmp/tmpmv8wkn2j.rs:8:14\n\
    \  |\n8 |     if len > MAX_LEN {\n  |              ^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `MAX_LEN` in this scope\n --> /tmp/tmpmv8wkn2j.rs:9:9\n\
    \  |\n9 |         MAX_LEN\n  |         ^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmv8wkn2j.rs:11:9\n   |\n6  | fn strlen(string:\
    \ String) -> isize {\n   |                              ----- expected `isize`\
    \ because of return type\n...\n11 |         len\n   |         ^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |         len.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for c in string.as_bytes() {\n       \
    \ if *c > 0xFF {\n            return -1;\n        }\n        len += 1;\n    }\n\
    \    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let len = string.len();\n    if len == 0 {\n        0\n    }\
    \ else {\n        len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpscco05kz.rs:11:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |         len\n   |       \
    \  ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     \
    \    len.try_into().unwrap()\n   |            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes()\n        .iter()\n        .position(|c| c\
    \ == b'\\x00')\n        .unwrap_or(0)\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&u8` with `u8`\n --> /tmp/tmpqvopbqfn.rs:9:25\n\
    \  |\n9 |         .position(|c| c == b'\\x00')\n  |                         ^^\
    \ no implementation for `&u8 == u8`\n  |\n  = help: the trait `PartialEq<u8>`\
    \ is not implemented for `&u8`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvopbqfn.rs:7:5\n\
    \   |\n6  |   fn strlen(string: String) -> isize {\n   |                     \
    \           ----- expected `isize` because of return type\n7  | /     string.as_bytes()\n\
    8  | |         .iter()\n9  | |         .position(|c| c == b'\\x00')\n10 | |  \
    \       .unwrap_or(0)\n   | |_____________________^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |         .unwrap_or(0).try_into().unwrap()\n  \
    \ |                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for c in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = string.len();\n    len -= 1;\n    while string.chars().skip(len).count()\
    \ == 0 {\n        len -= 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7yejxiq6.rs:12:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n12 |     len\n   |     ^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     len.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for ch in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut pos = 0;\n    let len = string.len();\n    for _ in\
    \ 0..len {\n        pos += 1;\n    }\n    pos\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut buf = [0u8; 128];\n    let mut len = String::with_capacity(128);\n\
    \    string.chars().for_each(|c| {\n        if c > 127 {\n            len = String::from(\"\
    \");\n            return;\n        }\n        buf.truncate(0);\n        let ret\
    \ = buf.write_bytes(&[c as u8]);\n        if ret == buf.len() {\n            len\
    \ = String::from(&buf[..]);\n            return;\n        }\n    });\n    len.into_raw_size()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcieno7r0.rs:10:16\n   |\n\
    10 |         if c > 127 {\n   |                ^^^ expected `char`, found `u8`\n\
    \nerror[E0599]: no method named `truncate` found for array `[u8; 128]` in the\
    \ current scope\n  --> /tmp/tmpcieno7r0.rs:14:13\n   |\n14 |         buf.truncate(0);\n\
    \   |             ^^^^^^^^ method not found in `[u8; 128]`\n\nerror[E0599]: no\
    \ method named `write_bytes` found for array `[u8; 128]` in the current scope\n\
    \  --> /tmp/tmpcieno7r0.rs:15:23\n   |\n15 |         let ret = buf.write_bytes(&[c\
    \ as u8]);\n   |                       ^^^^^^^^^^^ method not found in `[u8; 128]`\n\
    \nerror[E0277]: the trait bound `String: From<&[u8]>` is not satisfied\n  -->\
    \ /tmp/tmpcieno7r0.rs:17:19\n   |\n17 |             len = String::from(&buf[..]);\n\
    \   |                   ^^^^^^^^^^^^ the trait `From<&[u8]>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0599]: no method named `into_raw_size` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpcieno7r0.rs:21:9\n   |\n21 |     len.into_raw_size()\n\
    \   |         ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = string.len();\n    unsafe {\n        len.checked_add(i8::min_value()).unwrap()\n\
    \    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpabyw2m0x.rs:9:25\n  |\n9 |\
    \         len.checked_add(i8::min_value()).unwrap()\n  |                     \
    \    ^^^^^^^^^^^^^^^ expected `usize`, found `i8`\n  |\nhelp: you can convert\
    \ an `i8` to a `usize` and panic if the converted value doesn't fit\n  |\n9 |\
    \         len.checked_add(i8::min_value().try_into().unwrap()).unwrap()\n  | \
    \                                       ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpabyw2m0x.rs:9:9\n  |\n6 | fn strlen(string: String)\
    \ -> isize {\n  |                              ----- expected `isize` because\
    \ of return type\n...\n9 |         len.checked_add(i8::min_value()).unwrap()\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n9 |         len.checked_add(i8::min_value()).unwrap().try_into().unwrap()\n\
    \  |                                                  ++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_str().len()\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdgtglx8_.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_str().len()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.as_str().len().try_into().unwrap()\n  |                 \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let len = string.len();\n    if len < 0 {\n        0\n    }\
    \ else {\n        len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj8rkc069.rs:11:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |         len\n   |       \
    \  ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     \
    \    len.try_into().unwrap()\n   |            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes().len()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0xvzor.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        0\n    } else {\n        let\
    \ mut len = 0;\n        for c in string.as_ref() {\n            len += c.len_utf8();\n\
    \        }\n        len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmppjvsnlae.rs:12:20\n\
    \   |\n11 |         for c in string.as_ref() {\n   |                  ---------------\
    \ the element type for this iterator is not specified\n12 |             len +=\
    \ c.len_utf8();\n   |                    ^ cannot infer type\n   |\n   = note:\
    \ type must be known at this point\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count(|x| *x != '\\0')\n}\n\nfn main() {\n  \
    \  let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp7bch9rx5.rs:7:27\n\
    \  |\n7 |     string.chars().count(|x| *x != '\\0')\n  |                     \
    \      ^ consider giving this closure parameter a type\n  |\n  = note: type must\
    \ be known at this point\n\nerror[E0061]: this function takes 0 arguments but\
    \ 1 argument was supplied\n   --> /tmp/tmp7bch9rx5.rs:7:20\n    |\n7   |     string.chars().count(|x|\
    \ *x != '\\0')\n    |                    ^^^^^ -------------- supplied 1 argument\n\
    \    |                    |\n    |                    expected 0 arguments\n \
    \   |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp7bch9rx5.rs:7:5\n  |\n6 | fn strlen(string: String) -> isize {\n\
    \  |                              ----- expected `isize` because of return type\n\
    7 |     string.chars().count(|x| *x != '\\0')\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|x|\
    \ *x != '\\0').try_into().unwrap()\n  |                                      \
    \   ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0282, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp08kilyo6.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.chars().count().try_into().unwrap()\n  |                \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count().unwrap_or(0)\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for type `usize` in the\
    \ current scope\n --> /tmp/tmp8zq895ko.rs:7:28\n  |\n7 |     string.chars().count().unwrap_or(0)\n\
    \  |                            ^^^^^^^^^ method not found in `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp08kilyo6.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.chars().count().try_into().unwrap()\n  |                \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.bytes().len()\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq5dr1_qj.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.bytes().len()\n  | \
    \    ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.bytes().len().try_into().unwrap()\n  |                  \
    \       ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes().len()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0xvzor.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0\n    }\n\n    let len\
    \ = string.len();\n    if len > MAX_LEN {\n        MAX_LEN\n    } else {\n   \
    \     len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MAX_LEN` in this scope\n  --> /tmp/tmp5qi5bxt8.rs:12:14\n\
    \   |\n12 |     if len > MAX_LEN {\n   |              ^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `MAX_LEN` in this scope\n  --> /tmp/tmp5qi5bxt8.rs:13:9\n\
    \   |\n13 |         MAX_LEN\n   |         ^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5qi5bxt8.rs:15:9\n   |\n6  | fn\
    \ strlen(string: String) -> isize {\n   |                              ----- expected\
    \ `isize` because of return type\n...\n15 |         len\n   |         ^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |         len.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.length()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmped8eizha.rs:7:12\n  |\n7 |     string.length()\n\
    \  |            ^^^^^^ help: there is an associated function with a similar name:\
    \ `len`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        return 0\n    }\n    let mut\
    \ char_iter: CharIter = string.chars();\n    let mut counter: usize = 0;\n   \
    \ while let Some(byte) = char_iter.next() {\n        if byte == 0 || byte == 255\
    \ {\n            return counter;\n        }\n        counter += 1;\n    }\n  \
    \  counter as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `CharIter` in this scope\n  --> /tmp/tmpbzy0hhcd.rs:10:24\n\
    \   |\n10 |     let mut char_iter: CharIter = string.chars();\n   |          \
    \              ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbzy0hhcd.rs:14:20\n   |\n14 |             return counter;\n   |\
    \                    ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |             return counter.try_into().unwrap();\n   |      \
    \                     ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() + 0\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe7qg9_fl.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count() + 0\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     (string.chars().count() + 0).try_into().unwrap()\n  |    \
    \ +                          +++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_bytes().len()\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz0xvzor.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = string.len();\n    for &b in string.chars() {\n\
    \        len += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb0b7vaxa.rs:8:9\n  |\n8 |\
    \     for &b in string.chars() {\n  |         ^^    -------------- this expression\
    \ has type `Option<char>`\n  |         |\n  |         expected `char`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `b`\n  |\n  =\
    \ note:   expected type `char`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb0b7vaxa.rs:11:5\n   |\n6  | fn strlen(string:\
    \ String) -> isize {\n   |                              ----- expected `isize`\
    \ because of return type\n...\n11 |     len\n   |     ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |     len.try_into().unwrap()\n   |  \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string\n        .into_bytes()\n        .iter()\n        .map(|&b|\
    \ b as usize)\n        .sum()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<usize>` is not satisfied\n  \
    \  --> /tmp/tmpsoyb0k4f.rs:11:10\n     |\n11   |         .sum()\n     |      \
    \    ^^^ the trait `Sum<usize>` is not implemented for `isize`\n     |\n     =\
    \ help: the following other types implement trait `Sum<A>`:\n               <f32\
    \ as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.as_str().len()\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdgtglx8_.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_str().len()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.as_str().len().try_into().unwrap()\n  |                 \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        0\n    } else {\n        string.as_ref().len()\n\
    \    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp6e5kb95o.rs:10:16\n\
    \   |\n10 |         string.as_ref().len()\n   |         -------^^^^^^--\n   |\
    \         |      |\n   |         |      cannot infer type for type parameter `T`\
    \ declared on the trait `AsRef`\n   |         this method call resolves to `&T`\n\
    \   |\n   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7cv7zq_.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string\n        .as_bytes()\n        .iter()\n        .map(|&b|\
    \ b as u8)\n        .count();\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc486hdo.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = string.len();\n    len.clamp_min(0);\n    len\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clamp_min` found for type `usize` in the\
    \ current scope\n --> /tmp/tmpjx7zsg3u.rs:8:9\n  |\n8 |     len.clamp_min(0);\n\
    \  |         ^^^^^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpjx7zsg3u.rs:9:5\n  |\n6 | fn strlen(string: String) -> isize\
    \ {\n  |                              ----- expected `isize` because of return\
    \ type\n...\n9 |     len\n  |     ^^^ expected `isize`, found `usize`\n  |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |     len.try_into().unwrap()\n  |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len_str = 0;\n    for (index, ch) in string.chars().enumerate()\
    \ {\n        if index == 0 {\n            len_str += 1;\n        } else if ch\
    \ == 0 {\n            len_str += 2;\n        } else {\n            len_str +=\
    \ 1;\n        }\n    }\n    len_str\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpexikyus_.rs:11:25\n   |\n\
    11 |         } else if ch == 0 {\n   |                         ^ expected `char`,\
    \ found `u8`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() <= 0 {\n        return 0;\n    }\n    string.as_bytes().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.length()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmped8eizha.rs:7:12\n  |\n7 |     string.length()\n\
    \  |            ^^^^^^ help: there is an associated function with a similar name:\
    \ `len`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028169
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg8zamsr9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028123
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() == 0 {\n        0\n    } else {\n        string.len()\n\
    \    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4p16oqis.rs:10:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n10 |         string.len()\n  \
    \ |         ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n10 |         string.len().try_into().unwrap()\n   |                   \
    \  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028169
