language: rs
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter_map(|x|\
    \ {\n        if x.is_integer() && x > 0 {\n            Some(x.powi(2))\n     \
    \   } else {\n            None\n        }\n    }).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpqfuyk7uq.rs:14:14\n   |\n14 |         if x.is_integer()\
    \ && x > 0 {\n   |              ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqfuyk7uq.rs:14:34\n   |\n14 |         if x.is_integer()\
    \ && x > 0 {\n   |                                  ^ expected `&f64`, found integer\n\
    \nerror[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpqfuyk7uq.rs:19:8\n\
    \     |\n19   |     }).sum::<isize>()\n     |        ^^^ the trait `Sum<f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter_map(|&x|\
    \ if x.is_positive() {\n        Some(x.powf(2))\n    } else {\n        None\n\
    \    }).fold(0, |acc, x| acc + x)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmp_1qt750k.rs:13:37\n   |\n13 |   \
    \  lst.iter().filter_map(|&x| if x.is_positive() {\n   |                     \
    \                ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by default\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_1qt750k.rs:14:21\n   |\n14 |\
    \         Some(x.powf(2))\n   |                     ^\n   |                  \
    \   |\n   |                     expected `f64`, found integer\n   |          \
    \           help: use a float literal: `2.0`\n\nerror[E0277]: cannot add `f64`\
    \ to `isize`\n  --> /tmp/tmp_1qt750k.rs:17:29\n   |\n17 |     }).fold(0, |acc,\
    \ x| acc + x)\n   |                             ^ no implementation for `isize\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&x|\
    \ x != 0).filter(|&x| x < 0).count() * lst.iter().filter(|&x| x % 2).count()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{integer}`\n  --> /tmp/tmpstaa8_ak.rs:13:30\n\
    \   |\n13 |     lst.iter().filter(|&x| x != 0).filter(|&x| x < 0).count() * lst.iter().filter(|&x|\
    \ x % 2).count()\n   |                              ^^ no implementation for `&f64\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpstaa8_ak.rs:13:33\n\
    \   |\n13 |     lst.iter().filter(|&x| x != 0).filter(|&x| x < 0).count() * lst.iter().filter(|&x|\
    \ x % 2).count()\n   |                                 ^\n   |               \
    \                  |\n   |                                 expected `f64`, found\
    \ integer\n   |                                 help: use a float literal: `0.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpstaa8_ak.rs:13:52\n   |\n13 |\
    \     lst.iter().filter(|&x| x != 0).filter(|&x| x < 0).count() * lst.iter().filter(|&x|\
    \ x % 2).count()\n   |                                                    ^ expected\
    \ `&f64`, found integer\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n  -->\
    \ /tmp/tmpstaa8_ak.rs:13:90\n   |\n13 |     lst.iter().filter(|&x| x != 0).filter(|&x|\
    \ x < 0).count() * lst.iter().filter(|&x| x % 2).count()\n   |               \
    \                                                                           ^\
    \ no implementation for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched typ"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lnr_minus_1(&lst).iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `lnr_minus_1` in this scope\n  --> /tmp/tmp2_vbnwit.rs:13:5\n\
    \   |\n13 |     lnr_minus_1(&lst).iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    \   |     ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n    for num in lst {\n        if num < 0 {\n            total += -num;\n\
    \        } else if num.is_integer() {\n            total += num;\n        } else\
    \ {\n            total += num.powf(f64::from(2));\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu9n2glo3.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpu9n2glo3.rs:17:23\n   |\n\
    17 |         } else if num.is_integer() {\n   |                       ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpu9n2glo3.rs:16:19\n   |\n16 |             total += -num;\n   |\
    \                   ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpu9n2glo3.rs:18:19\n   |\n18 |\
    \             total += num;\n   |                   ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpu9n2glo3.rs:20:19\n\
    \   |\n20 |             total += num.powf(f64::from(2));\n   |               \
    \    ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{i"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&x| x.is_integer() && x.is_odd())\n        .map(|x| x * x)\n  \
    \      .sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpetl73o0l.rs:14:24\n   |\n14 |         .filter(|&x|\
    \ x.is_integer() && x.is_odd())\n   |                        ^^^^^^^^^^ method\
    \ not found in `&f64`\n\nerror[E0599]: no method named `is_odd` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmpetl73o0l.rs:14:42\n   |\n14 |   \
    \      .filter(|&x| x.is_integer() && x.is_odd())\n   |                      \
    \                    ^^^^^^ method not found in `&f64`\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpetl73o0l.rs:16:10\n\
    \     |\n16   |         .sum()\n     |          ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut result = 0;\n    for (idx, item) in\
    \ lst.iter().enumerate() {\n        if item != 0 {\n            result += item\
    \ * (item - 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{integer}`\n  --> /tmp/tmpwb_iztq9.rs:18:17\n\
    \   |\n18 |         if item != 0 {\n   |                 ^^ no implementation\
    \ for `&f64 == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwb_iztq9.rs:18:20\n   |\n18 |         if item != 0 {\n   |         \
    \           ^\n   |                    |\n   |                    expected `f64`,\
    \ found integer\n   |                    help: use a float literal: `0.0`\n\n\
    error[E0277]: cannot subtract `{integer}` from `&f64`\n  --> /tmp/tmpwb_iztq9.rs:19:36\n\
    \   |\n19 |             result += item * (item - 1);\n   |                   \
    \                 ^ no implementation for `&f64 - {integer}`\n   |\n   = help:\
    \ the trait `Sub<{integer}>` is not implemented for `&f64`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 { sum += num; }\n    }\n    if lst.len()\
    \ == 0 {\n        return 0;\n    }\n    sum * sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpene2b5op.rs:15:18\n   |\n\
    15 |         if num > 0 { sum += num; }\n   |                  ^\n   |       \
    \           |\n   |                  expected `f64`, found integer\n   |     \
    \             help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmpene2b5op.rs:15:26\n   |\n15 |         if\
    \ num > 0 { sum += num; }\n   |                          ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter_map(|e|\
    \ {\n        if *e > 0.0 {\n            Some(*e * e)\n        } else {\n     \
    \       None\n        }\n    }).sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpg6371v9w.rs:19:8\n     |\n19   |     }).sum()\n     |        ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst\n        .iter()\n\
    \        .filter(|x| x.is_even())\n        .filter(|x| x.is_integer())\n     \
    \   .fold(0, |acc, x| acc + x * x)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&&f64` in\
    \ the current scope\n  --> /tmp/tmpy842n1ng.rs:15:23\n   |\n15 |         .filter(|x|\
    \ x.is_even())\n   |                       ^^^^^^^ method not found in `&&f64`\n\
    \nerror[E0599]: no method named `is_integer` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpy842n1ng.rs:16:23\n   |\n16 |         .filter(|x|\
    \ x.is_integer())\n   |                       ^^^^^^^^^^ method not found in `&&f64`\n\
    \nerror[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpy842n1ng.rs:17:31\n\
    \   |\n17 |         .fold(0, |acc, x| acc + x * x)\n   |                     \
    \          ^ no implementation for `isize + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n    for n in lst {\n        if n > 0 {\n            total += n * n;\n  \
    \      }\n    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmponighr27.rs:15:16\n   |\n\
    15 |         if n > 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `f64`, found integer\n   |                help: use a\
    \ float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmponighr27.rs:16:19\n   |\n16 |             total += n * n;\n   |\
    \                   ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter_map(|n|\
    \ {\n        match n {\n            0 => None,\n            Some(x) => Some(x\
    \ * x),\n            _ => None,\n        }\n    }).sum();\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpusgdv8o2.rs:15:13\n   |\n\
    14 |         match n {\n   |               - this expression has type `&f64`\n\
    15 |             0 => None,\n   |             ^\n   |             |\n   |    \
    \         expected `f64`, found integer\n   |             help: use a float literal:\
    \ `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusgdv8o2.rs:16:13\n \
    \  |\n14 |         match n {\n   |               - this expression has type `&f64`\n\
    15 |             0 => None,\n16 |             Some(x) => Some(x * x),\n   |  \
    \           ^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpusgdv8o2.rs:12:44\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |    ---------------------                   ^^^^^\
    \ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as\
    \ its body has no tail or `return` expression\n...\n19 |     }).sum();\n   | \
    \            - help: remove this semicolon\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpm3vlpata.rs:15:14\n\
    \   |\n15 |         if n % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 != 0 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpm3vlpata.rs:16:17\n  \
    \ |\n16 |             sum += n;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total: isize\
    \ = 0;\n    for elt in lst {\n        if !elt.is_positive() {\n            return\
    \ 0;\n        }\n        if elt % 2 == 0 {\n            total += 1;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmpomvlave3.rs:15:17\n   |\n15 |   \
    \      if !elt.is_positive() {\n   |                 ^^^^^^^^^^^\n   |\n   = note:\
    \ `#[warn(deprecated)]` on by default\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpomvlave3.rs:18:16\n   |\n18 |         if elt % 2 == 0 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n18 |         if elt %\
    \ 2.0 == 0 {\n   |                   ++\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst {\n  \
    \      vec![] => 0,\n        _ => lst.iter()\n            .filter(|x| x.is_integer()\
    \ || x.is_negative_one())\n            .map(|x| x.square() - x.unwrap_or(0))\n\
    \            .sum()\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpqoxsc4l1.rs:14:9\n\
    \   |\n14 |         vec![] => 0,\n   |         ^^^^^^\n   |\n   = note: this error\
    \ originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0599]: no method named `is_integer` found for reference\
    \ `&&f64` in the current scope\n  --> /tmp/tmpqoxsc4l1.rs:16:27\n   |\n16 |  \
    \           .filter(|x| x.is_integer() || x.is_negative_one())\n   |         \
    \                  ^^^^^^^^^^ method not found in `&&f64`\n\nerror[E0599]: no\
    \ method named `is_negative_one` found for reference `&&f64` in the current scope\n\
    \  --> /tmp/tmpqoxsc4l1.rs:16:45\n   |\n16 |             .filter(|x| x.is_integer()\
    \ || x.is_negative_one())\n   |                                             ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_negative`\n\n\
    error[E0599]: no method named `square` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmpqoxsc4l1.rs:17:24\n   |\n17 |             .map(|x| x.square()\
    \ - x.unwrap_or(0))\n   |                        ^^^^^^ help: there is an associated\
    \ function with a similar name: `sqrt`\n\nerror[E0599]: no method named `unwrap_or`\
    \ found for reference `&f64` in the current scope\n  --> /tmp/tmpqoxsc4l1.rs:17:37\n\
    \   |\n17 |             .map(|x| x.square() - x.unwrap_or(0))\n   |          \
    \                           ^^^^^^^^^ method not found in `&f64`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut total = 0.0;\n    for i in lst {\n\
    \        if i % 2 == 1 {\n            total += i;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp7ckdza9x.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n18 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7ckdza9x.rs:22:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n22 |     total\n   |     ^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    let mut sum = 0.0;\n    for x in lst {\n\
    \        if x % 2 == 1 {\n            sum += x;\n        }\n    }\n\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmptmvafv9c.rs:19:14\n\
    \   |\n19 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptmvafv9c.rs:24:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n24 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|n|\
    \ n % 2 == 1).fold(0, |acc, x| acc + x)\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmprxgrzxz4.rs:13:29\n\
    \   |\n13 |     lst.iter().filter(|n| n % 2 == 1).fold(0, |acc, x| acc + x)\n\
    \   |                           - ^ - {integer}\n   |                        \
    \   |\n   |                           &&f64\n\nerror[E0277]: cannot add `&f64`\
    \ to `isize`\n  --> /tmp/tmprxgrzxz4.rs:13:60\n   |\n13 |     lst.iter().filter(|n|\
    \ n % 2 == 1).fold(0, |acc, x| acc + x)\n   |                                \
    \                            ^ no implementation for `isize + &f64`\n   |\n  \
    \ = help: the trait `Add<&f64>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    debug_assert!(lst.is_sorted());\n\
    \    let mut sum = 0;\n    let mut odd = false;\n    for v in lst.iter() {\n \
    \       debug_assert!(!v.is_negative());\n        debug_assert!(v.is_integer());\n\
    \        sum += v * v;\n        odd = !odd;\n    }\n    if lst.len() == 0 {\n\
    \        0\n    } else {\n        if odd {\n            sum\n        } else {\n\
    \            sum / 2.0\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: use of unstable library feature 'is_sorted': new API\n  -->\
    \ /tmp/tmpinr_9uky.rs:13:23\n   |\n13 |     debug_assert!(lst.is_sorted());\n\
    \   |                       ^^^^^^^^^\n   |\n   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nwarning: use of deprecated associated function `core::f64::<impl\
    \ f64>::is_negative`: renamed to is_sign_negative\n  --> /tmp/tmpinr_9uky.rs:17:26\n\
    \   |\n17 |         debug_assert!(!v.is_negative());\n   |                   \
    \       ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by default\n\n\
    error[E0599]: no method named `is_integer` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmpinr_9uky.rs:18:25\n   |\n18 |         debug_assert!(v.is_integer());\n\
    \   |                         ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpinr_9uky.rs:19:13\n  \
    \ |\n19 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpinr_9uky.rs:28:17\n\
    \   |\n28 |             sum / 2.0\n   |                 ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \    let mut prev: f64 = lst[0];\n    for x in lst.iter().cloned().skip(1) {\n\
    \        if x != prev {\n            sum += x * x;\n        }\n        prev =\
    \ x\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprqed4_6q.rs:21:5\n   |\n\
    12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    21 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ !x.is_integer()).sum() * (lst.len() as f64)\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpv_o7avnb.rs:13:30\n   |\n13 |     lst.iter().filter(|x|\
    \ !x.is_integer()).sum() * (lst.len() as f64)\n   |                          \
    \    ^^^^^^^^^^ method not found in `&&f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut total = 0;\n    for i in lst {\n  \
    \      if i % 2 == 1 {\n            total += i;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpgj0rfy58.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n18 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgj0rfy58.rs:19:19\n  \
    \ |\n19 |             total += i;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpxzjx6bdo.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpxzjx6bdo.rs:16:17\n  \
    \ |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst.len()\
    \ {\n        0 => 0,\n        _ => {\n            let mut result = 0.0;\n    \
    \        for num in lst.iter().rev() {\n                if num > 0.0 {\n     \
    \               result -= num;\n                } else {\n                   \
    \ result += num;\n                }\n            }\n            result\n     \
    \   }\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp__vlgw17.rs:18:26\n   |\n\
    18 |                 if num > 0.0 {\n   |                          ^^^\n   | \
    \                         |\n   |                          expected `&f64`, found\
    \ floating-point number\n   |                          help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp__vlgw17.rs:24:13\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n24 |             result\n   |             ^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \    for e in lst {\n        if e % 2 == 1 {\n            sum += e;\n        }\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpxpp_8d4u.rs:15:14\n\
    \   |\n15 |         if e % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if e % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxpp_8d4u.rs:19:12\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     return sum;\n   |   \
    \         ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: f64\
    \ = 0.0;\n    for (i, n) in lst.iter().enumerate() {\n        if n % 2 == 1 {\n\
    \            sum += n;\n        }\n    }\n    sum * sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpyxo2dqo7.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxo2dqo7.rs:19:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n19 |     sum * sum\n   |     ^^^^^^^^^ expected `isize`, found `f64`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0isize;\n    for x in lst {\n        if x > 0.0 {\n            total += x *\
    \ x;\n        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `isize`\n  --> /tmp/tmpl039c4x8.rs:16:19\n\
    \   |\n16 |             total += x * x;\n   |                   ^^ no implementation\
    \ for `isize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for val in lst.iter() {\n        if val.is_negative() {\n            continue;\n\
    \        }\n        let f = val * val;\n        sum += f as isize;\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpvrc9rhrx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total_sum\
    \ = 0.0;\n    let mut is_odd = false;\n\n    let mut nums = lst.to_vec();\n\n\
    \    while let Some(item) = nums.pop() {\n        match item {\n            x\
    \ @ 0..._ => is_odd = !is_odd,\n            x => total_sum += x,\n        };\n\
    \    }\n\n    if !is_odd {\n        total_sum -= nums.iter().sum();\n    }\n\n\
    \    total_sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0586]: inclusive range with no end\n  --> /tmp/tmp9zf6r9wk.rs:20:18\n\
    \   |\n20 |             x @ 0..._ => is_odd = !is_odd,\n   |                 \
    \ ^^^ help: use `..` instead\n   |\n   = note: inclusive ranges must be bounded\
    \ at the end (`..=b` or `a..=b`)\n\nerror: expected one of `=>`, `if`, or `|`,\
    \ found reserved identifier `_`\n  --> /tmp/tmp9zf6r9wk.rs:20:21\n   |\n20 | \
    \            x @ 0..._ => is_odd = !is_odd,\n   |                     ^ expected\
    \ one of `=>`, `if`, or `|`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9zf6r9wk.rs:29:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n29 |     total_sum\n   |     ^^^^^^^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0586.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n    let mut is_negative = false;\n    for num in lst {\n        if num >=\
    \ 0 {\n            total += num;\n        } else {\n            total -= num;\n\
    \            is_negative = true;\n        }\n    }\n\n    if total < 0 && !is_negative\
    \ {\n        total = 0;\n    }\n    total\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8_lnpydz.rs:16:19\n   |\n\
    16 |         if num >= 0 {\n   |                   ^\n   |                   |\n\
    \   |                   expected `f64`, found integer\n   |                  \
    \ help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to\
    \ `{integer}`\n  --> /tmp/tmp8_lnpydz.rs:17:19\n   |\n17 |             total +=\
    \ num;\n   |                   ^^ no implementation for `{integer} += f64`\n \
    \  |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot subtract-assign `f64` from `{integer}`\n  --> /tmp/tmp8_lnpydz.rs:19:19\n\
    \   |\n19 |             total -= num;\n   |                   ^^ no implementation\
    \ for `{integer} -= f64`\n   |\n   = help: the trait `SubAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    loop {\n       \
    \ let mut sum = lst[0];\n        for &x in lst {\n            if !x.is_integer()\
    \ {\n                sum += x.abs();\n                break;\n            }\n\
    \        }\n        if sum == 0.0 {\n            return 0;\n        }\n      \
    \  for &x in lst {\n            if x.is_integer() {\n                sum += x;\n\
    \                break;\n            }\n        }\n        sum / 2\n    }\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppihksnd1.rs:15:13\n   |\n\
    15 |         for &x in lst {\n   |             ^^    --- this expression has type\
    \ `Option<f64>`\n   |             |\n   |             expected `f64`, found reference\n\
    \   |             help: you can probably remove the explicit borrow: `x`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppihksnd1.rs:24:13\n   |\n24 |         for &x\
    \ in lst {\n   |             ^^    --- this expression has type `Option<f64>`\n\
    \   |             |\n   |             expected `f64`, found reference\n   |  \
    \           help: you can probably remove the explicit borrow: `x`\n   |\n   =\
    \ note:   expected type `f64`\n           found reference `&_`\n\nerror[E0277]:\
    \ cannot divide `f64` by `{integer}`\n  --> /tmp/tmppihksnd1.rs:30:13\n   |\n\
    30 |         sum / 2\n   |             ^ no implementation for `f64 / {integer}`\n\
    \   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n30 |         sum\
    \ / 2.0\n   |                ++\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd_integer()).map(|x| x*x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpdq2bl8ua.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd_integer()).map(|x| x*x).sum()\n   |                             ^^^^^^^^^^^^^^\
    \ method not found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<f64>`\
    \ is not satisfied\n    --> /tmp/tmpdq2bl8ua.rs:13:60\n     |\n13   |     lst.iter().filter(|x|\
    \ x.is_odd_integer()).map(|x| x*x).sum()\n     |                             \
    \                               ^^^ the trait `Sum<f64>` is not implemented for\
    \ `isize`\n     |\n     = help: the following other types implement trait `Sum<A>`:\n\
    \               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n         \
    \      <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut total: f64 = 0.0;\n    for i in lst.iter()\
    \ {\n        if !i.is_negative() {\n            total += i ** 2;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmp0trih33t.rs:19:15\n   |\n19 |   \
    \      if !i.is_negative() {\n   |               ^^^^^^^^^^^\n   |\n   = note:\
    \ `#[warn(deprecated)]` on by default\n\nerror[E0614]: type `{integer}` cannot\
    \ be dereferenced\n  --> /tmp/tmp0trih33t.rs:20:25\n   |\n20 |             total\
    \ += i ** 2;\n   |                         ^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0trih33t.rs:23:5\n   |\n12 | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n23 |     total\n   |     ^^^^^ expected `isize`,\
    \ found `f64`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut even = 0;\n    let mut odd = 1;\n\
    \n    for n in lst {\n        let m = n % 2;\n        let a = n * n;\n\n     \
    \   if m {\n            odd += a;\n        } else {\n            even += a;\n\
    \        }\n    }\n\n    even - odd\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmplemsk5l2.rs:21:19\n\
    \   |\n21 |         let m = n % 2;\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n21 |         let m = n % 2.0;\n   |                      ++\n\n\
    error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmplemsk5l2.rs:25:17\n\
    \   |\n25 |             odd += a;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmplemsk5l2.rs:27:18\n\
    \   |\n27 |             even += a;\n   |                  ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: ab"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total: f64\
    \ = lst[0];\n    for x in lst.iter() {\n        if x.is_integer() && total !=\
    \ x {\n            total -= x;\n        }\n    }\n    if total == 0.0 {\n    \
    \    0\n    } else {\n        total + 1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpwf16z_ji.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ && total != x {\n   |              ^^^^^^^^^^ method not found in `&f64`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwf16z_ji.rs:15:39\n   |\n15 |  \
    \       if x.is_integer() && total != x {\n   |                              \
    \         ^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n15 |         if x.is_integer() && total != *x {\n   |        \
    \                               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwf16z_ji.rs:22:9\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n22 |         total + 1.0\n   |         ^^^^^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut squared_sum\
    \ = 0.0;\n    for val in lst.iter() {\n        if val >= 0 {\n            squared_sum\
    \ += val * val;\n        }\n    }\n    squared_sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5awt51n1.rs:15:19\n   |\n\
    15 |         if val >= 0 {\n   |                   ^ expected `&f64`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5awt51n1.rs:19:5\n   |\n12 | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n19\
    \ |     squared_sum\n   |     ^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x > 0\n                    .map(|x| x * x).filter(|x| x % 2 != 0).count() >\
    \ 0).sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n   \
    \ assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpcuohl309.rs:13:29\n\
    \   |\n13 |     lst.iter().filter(|x| x > 0\n   |                            \
    \ ^\n14 |                     .map(|x| x * x).filter(|x| x % 2 != 0).count() >\
    \ 0).sum()\n   |                                                             \
    \       ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime,\
    \ type, or const arguments\n   = help: or use `(...)` if you meant to specify\
    \ fn arguments\nhelp: split the comparison into two\n   |\n14 ~              \
    \       .map(|x| x * x).filter(|x| x % 2 != 0).count() && 0\n15 ~            \
    \         .map(|x| x * x).filter(|x| x % 2 != 0).count() > 0).sum()\n   |\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut total = 0;\n    for n in lst {\n\
    \        if n % 2 == 1 {\n            total += n;\n        }\n    }\n    return\
    \ total;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpgdzwwjoj.rs:19:14\n\
    \   |\n19 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgdzwwjoj.rs:20:19\n  \
    \ |\n20 |             total += n;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_integer()).filter(|x| x.is_odd()).sum() + (lst.iter().filter(|x| x.is_negative()).sum()\
    \ * (lst.len() - lst.iter().filter(|x| x.is_negative()).count()))\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpqhici4xk.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_integer()).filter(|x| x.is_odd()).sum() + (lst.iter().filter(|x| x.is_negative()).sum()\
    \ * (lst.len() - lst...\n   |                             ^^^^^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0599]: no method named `is_odd` found for reference\
    \ `&&f64` in the current scope\n  --> /tmp/tmpqhici4xk.rs:13:56\n   |\n13 |  \
    \   lst.iter().filter(|x| x.is_integer()).filter(|x| x.is_odd()).sum() + (lst.iter().filter(|x|\
    \ x.is_negative()).sum() * (lst.len() - lst...\n   |                         \
    \                               ^^^^^^ method not found in `&&f64`\n\nwarning:\
    \ use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmpqhici4xk.rs:13:99\n   |\n13 |   \
    \  lst.iter().filter(|x| x.is_integer()).filter(|x| x.is_odd()).sum() + (lst.iter().filter(|x|\
    \ x.is_negative()).sum() * (lst.len() - lst...\n   |                         \
    \                                                                          ^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nwarning: use of deprecated\
    \ associated function `core::f64::<impl f64>::is_negative`: renamed to is_sign_negative\n\
    \  --> /tmp/tmpqhici4xk.rs:13:159\n   |\n13 | ....is_negative()).sum() * (lst.len()\
    \ - lst.iter().filter(|x| x.is_negative()).count()))\n   |                   \
    \                                              ^^^^^^^^^^^\n\nerror: aborting\
    \ due to 2 previous errors; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut pos = 0;\n  \
    \  let mut size = lst.len();\n    for &num in lst {\n        if num != 0 {\n \
    \           sum += num;\n            if num % 2 != 0 {\n                pos +=\
    \ 1;\n            }\n        }\n    }\n    pos * pos\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjmsxtkfg.rs:19:9\n   |\n\
    19 |     for &num in lst {\n   |         ^^^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0\n    }\n    let mut sum = 0;\n    for i in lst.iter() {\n\
    \        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpwm_ily3w.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpwm_ily3w.rs:19:17\n\
    \   |\n19 |             sum += i;\n   |                 ^^ no implementation for\
    \ `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst.len()\
    \ {\n        0 => 0,\n        _ => lst.iter().filter(|x| x.is_odd()).sum(|x| x.powf()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpelr7wvxm.rs:15:38\n   |\n15 |         _ => lst.iter().filter(|x|\
    \ x.is_odd()).sum(|x| x.powf()),\n   |                                      ^^^^^^\
    \ method not found in `&&f64`\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmpelr7wvxm.rs:15:48\n     |\n15 \
    \  |         _ => lst.iter().filter(|x| x.is_odd()).sum(|x| x.powf()),\n     |\
    \                                                ^^^ ------------ supplied 1 argument\n\
    \     |                                                |\n     |             \
    \                                   expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is\
    \ not satisfied\n    --> /tmp/tmpelr7wvxm.rs:15:48\n     |\n15   |         _ =>\
    \ lst.iter().filter(|x| x.is_odd()).sum(|x| x.powf()),\n     |               \
    \                                 ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|e|\
    \ e >= 0).count() as isize\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcuc9lzlo.rs:13:32\n   |\n\
    13 |     lst.iter().filter(|e| e >= 0).count() as isize\n   |                \
    \                ^ expected `&&f64`, found integer\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total: isize\
    \ = 0;\n    let mut n = 0;\n    for x in lst {\n        if x % 2 == 1 && (x !=\
    \ 0 || x != -i) {\n            total += x;\n            n += 1;\n        }\n \
    \   }\n    total / n as f64\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpj2e5in9w.rs:16:43\n\
    \   |\n16 |         if x % 2 == 1 && (x != 0 || x != -i) {\n   |             \
    \                              ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpj2e5in9w.rs:16:14\n\
    \   |\n16 |         if x % 2 == 1 && (x != 0 || x != -i) {\n   |             \
    \ ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n16 |         if x % 2.0 == 1 && (x != 0 || x != -i) {\n\
    \   |                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj2e5in9w.rs:16:32\n\
    \   |\n16 |         if x % 2 == 1 && (x != 0 || x != -i) {\n   |             \
    \                   ^\n   |                                |\n   |           \
    \                     expected `f64`, found integer\n   |                    \
    \            help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `isize`\n  --> /tmp/tmpj2e5in9w.rs:17:19\n   |\n17 |             total\
    \ += x;\n   |                   ^^ no implementation for `isize += f64`\n   |\n\
    \   = help: the trait `AddAssign<f64>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `f64`\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x >= 0).fold(0, |acc, x| acc + x * x)\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgrjv_44c.rs:13:32\n   |\n\
    13 |     lst.iter().filter(|x| x >= 0).fold(0, |acc, x| acc + x * x)\n   |   \
    \                             ^ expected `&&f64`, found integer\n\nerror[E0277]:\
    \ cannot add `f64` to `isize`\n  --> /tmp/tmpgrjv_44c.rs:13:56\n   |\n13 |   \
    \  lst.iter().filter(|x| x >= 0).fold(0, |acc, x| acc + x * x)\n   |         \
    \                                               ^ no implementation for `isize\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|x| x.is_finite())\n        .map(|x| if x.is_odd() x else x.recip())\n\
    \        .fold(0, |sum, x| sum + x)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `x`\n  --> /tmp/tmp9h8sqo0t.rs:15:32\n   |\n\
    15 |         .map(|x| if x.is_odd() x else x.recip())\n   |                  --\
    \            ^ expected `{`\n   |                  |\n   |                  this\
    \ `if` expression has a condition, but no block\n   |\nhelp: try placing this\
    \ code inside a block\n   |\n15 |         .map(|x| if x.is_odd() { x } else x.recip())\n\
    \   |                                +   +\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    fn next_even(lst:\
    \ &[f64]) -> f64 {\n        lst.iter().skip(1).sum() / 2.0\n    }\n\n    fn next_odd(lst:\
    \ &[f64]) -> f64 {\n        lst.iter().skip(1).map(|n| {\n            fn inner_odd(n:\
    \ f64) -> bool {\n                n % 2 == 1\n            }\n            inner_odd(n)\
    \ || n < 0\n        }).sum() / 2.0\n    }\n\n    let mut total = 0;\n    for n\
    \ in lst {\n        if n % 2 != 0 {\n            total += n;\n        }\n    }\n\
    \    total\n        .iter()\n        .filter(|n| n % 2 != 0)\n        .fold(0.0,\
    \ |acc, &n| acc + n * n)\n        + next_even(lst)\n        - next_odd(lst)\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpsaav5jql.rs:28:14\n\
    \   |\n28 |         if n % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n28 |         if n % 2.0 != 0 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpsaav5jql.rs:29:19\n  \
    \ |\n29 |             total += n;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `iter` found for type `{integer}`\
    \ in the current scope\n  --> /tmp/tmpsaav5jql.rs:33:10\n   |\n33 |         .iter()\n\
    \   |          ^^^^ method not found in `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsaav5jql.rs:36:21\n   |\n36 |         + next_even(lst)\n\
    \   |                     ^^^\n   |                     |\n   |              \
    \       expected `&[f64]`, found struct `Vec`\n   |                     help:\
    \ consider borrowing here: `&lst`\n   |\n   = note: expected reference `&[f64]`\n\
    \                 found struct `Vec<f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsaav5jql.rs:37:20\n   |\n37 |         - next_odd(ls"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n    let mut pos = 0;\n    for e in lst.iter() {\n        if e % 2 == 1 {\n\
    \            total += e * e;\n            pos += 1;\n        } else {\n      \
    \      total -= e * e;\n        }\n    }\n    total -= pos * pos * 2;\n    total\
    \ + (pos + 1) * (pos + 1)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpycrn375e.rs:16:14\n\
    \   |\n16 |         if e % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpycrn375e.rs:17:19\n\
    \   |\n17 |             total += e * e;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract-assign `f64` from `{integer}`\n \
    \ --> /tmp/tmpycrn375e.rs:20:19\n   |\n20 |             total -= e * e;\n   |\
    \                   ^^ no implementation for `{integer} -= f64`\n   |\n   = help:\
    \ the trait `SubAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `SubAssign<Rhs>`:\n             <f32 as\
    \ SubAssign<&f32>>\n             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n\
    \             <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n  \
    \           <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n     \
    \        <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst.len()\
    \ {\n        0 => 0,\n        1 => lst[0] ** 2,\n        _ => lst.iter().filter_map(|&x|\
    \ {\n            if x.is_integer() && (x % 2 == 1) {\n                Some(x)\n\
    \            } else {\n                None\n            }\n        }).fold(0,\
    \ |x, y| x + y) as isize,\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpd3sa_n26.rs:15:22\n\
    \   |\n15 |         1 => lst[0] ** 2,\n   |                      ^^^\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmpd3sa_n26.rs:15:14\n   |\n\
    13 | /     match lst.len() {\n14 | |         0 => 0,\n   | |              - this\
    \ is found to be of type `isize`\n15 | |         1 => lst[0] ** 2,\n   | |   \
    \           ^^^^^^^^^^^ expected `isize`, found `f64`\n16 | |         _ => lst.iter().filter_map(|&x|\
    \ {\n...  |\n22 | |         }).fold(0, |x, y| x + y) as isize,\n23 | |     }\n\
    \   | |_____- `match` arms have incompatible types\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpd3sa_n26.rs:17:18\n\
    \   |\n17 |             if x.is_integer() && (x % 2 == 1) {\n   |            \
    \      ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot mod `f64`\
    \ by `{integer}`\n  --> /tmp/tmpd3sa_n26.rs:17:37\n   |\n17 |             if x.is_integer()\
    \ && (x % 2 == 1) {\n   |                                     ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n17 |             if x.is_integer() && (x % 2.0 == 1) {\n   |   \
    \                                     ++\n\nerror[E0277]: cannot add `f64` to\
    \ `{integer}`\n  --> /tmp/tmpd3sa_n26.rs:22:29\n   |\n22 |         }).fold(0,\
    \ |x, y| x + y) as isize,\n   |                             ^ no implementation\
    \ for `{integer} + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \           "
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    let mut squares = 0.0;\n    for &i in lst\
    \ {\n        if i % 2 == 1 {\n            squares += i ** 2;\n        }\n    }\n\
    \    squares\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr68pc6no.rs:18:9\n   |\n\
    18 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0614]: type `{integer}`\
    \ cannot be dereferenced\n  --> /tmp/tmpr68pc6no.rs:20:27\n   |\n20 |        \
    \     squares += i ** 2;\n   |                           ^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr68pc6no.rs:23:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n23 |     squares\n   |     ^^^^^^^\
    \ expected `isize`, found floating-point number\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0\n    }\n    if lst.len() == 1 {\n        return lst[0]\n\
    \    }\n    let mut sum = 0;\n    for (i, val) in lst.iter().enumerate() {\n \
    \       if val % 2 == 0 {\n            sum += val;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfv0gwp_d.rs:17:16\n   |\n\
    12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    17 |         return lst[0]\n   |                ^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpfv0gwp_d.rs:21:16\n\
    \   |\n21 |         if val % 2 == 0 {\n   |                ^ no implementation\
    \ for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpfv0gwp_d.rs:22:17\n\
    \   |\n22 |             sum += val;\n   |                 ^^ no implementation\
    \ for `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0f64;\n\
    \    for &num in lst {\n        if num < 0.0f64 || num % 1.0f64 != 0.0f64 {\n\
    \            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpslvn6f0l.rs:14:9\n   |\n\
    14 |     for &num in lst {\n   |         ^^^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpslvn6f0l.rs:19:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    if lst.get(0).is_integer() || lst.get(0).is_negative()\
    \ {\n        return 0;\n    }\n    lst.iter().filter(|x| x.is_integer() || x.is_negative())\n\
    \        .map(|x| x.checked_mul(2.0).ok().unwrap_or_else(|_| 0))\n        .sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for enum `Option` in the\
    \ current scope\n  --> /tmp/tmpyy1geuok.rs:16:19\n   |\n16 |     if lst.get(0).is_integer()\
    \ || lst.get(0).is_negative() {\n   |                   ^^^^^^^^^^ method not\
    \ found in `Option<&f64>`\n\nerror[E0599]: no method named `is_negative` found\
    \ for enum `Option` in the current scope\n  --> /tmp/tmpyy1geuok.rs:16:46\n  \
    \ |\n16 |     if lst.get(0).is_integer() || lst.get(0).is_negative() {\n   | \
    \                                             ^^^^^^^^^^^ method not found in\
    \ `Option<&f64>`\n\nerror[E0599]: no method named `is_integer` found for reference\
    \ `&&f64` in the current scope\n  --> /tmp/tmpyy1geuok.rs:19:29\n   |\n19 |  \
    \   lst.iter().filter(|x| x.is_integer() || x.is_negative())\n   |           \
    \                  ^^^^^^^^^^ method not found in `&&f64`\n\nwarning: use of deprecated\
    \ associated function `core::f64::<impl f64>::is_negative`: renamed to is_sign_negative\n\
    \  --> /tmp/tmpyy1geuok.rs:19:47\n   |\n19 |     lst.iter().filter(|x| x.is_integer()\
    \ || x.is_negative())\n   |                                               ^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0599]: no method\
    \ named `checked_mul` found for reference `&f64` in the current scope\n  --> /tmp/tmpyy1geuok.rs:20:20\n\
    \   |\n20 |         .map(|x| x.checked_mul(2.0).ok().unwrap_or_else(|_| 0))\n\
    \   |                    ^^^^^^^^^^^ method not found in `&f64`\n\nerror: aborting\
    \ due to 4 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for &d in lst.iter()\
    \ {\n        let num = &d as f64;\n        if num >= 0.0 {\n            sum +=\
    \ num;\n        }\n    }\n    let mut count = 0;\n    for &d in lst.iter() {\n\
    \        let num = &d as f64;\n        if num >= 0.0 {\n            if num % 2\
    \ == 1 {\n                sum += num;\n                count += 1;\n         \
    \   }\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpo5wxm8x5.rs:20:17\n\
    \   |\n20 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpo5wxm8x5.rs:27:20\n\
    \   |\n27 |             if num % 2 == 1 {\n   |                    ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n27 |             if num % 2.0 == 1 {\n   |                     \
    \  ++\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpo5wxm8x5.rs:28:21\n\
    \   |\n28 |                 sum += num;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n         "
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    let mut s = 0.0f64;\n    for n in lst {\n\
    \        if n % 2 == 1 {\n            s += n;\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpw__gqxyn.rs:19:14\n\
    \   |\n19 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw__gqxyn.rs:23:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n23 |     s\n   |     ^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for &num in lst {\n        if num % 2 == 0 {\n            sum += num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ov7j9g2.rs:14:9\n   |\n\
    14 |     for &num in lst {\n   |         ^^^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match (lst.len(),\
    \ lst.iter().filter(|x| x.is_integer() && (!x.is_negative())).map(|x| x.pow(2.0)).sum())\
    \ {\n        (0, _) => 0,\n        (_, 0) => 0,\n        (l, r) => l * r\n   \
    \ }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpe5qmia_o.rs:13:47\n   |\n13 |     match\
    \ (lst.len(), lst.iter().filter(|x| x.is_integer() && (!x.is_negative())).map(|x|\
    \ x.pow(2.0)).sum()) {\n   |                                               ^^^^^^^^^^\
    \ method not found in `&&f64`\n\nwarning: use of deprecated associated function\
    \ `core::f64::<impl f64>::is_negative`: renamed to is_sign_negative\n  --> /tmp/tmpe5qmia_o.rs:13:67\n\
    \   |\n13 |     match (lst.len(), lst.iter().filter(|x| x.is_integer() && (!x.is_negative())).map(|x|\
    \ x.pow(2.0)).sum()) {\n   |                                                 \
    \                  ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by default\n\
    \nerror[E0599]: no method named `pow` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmpe5qmia_o.rs:13:93\n   |\n13 |     match (lst.len(), lst.iter().filter(|x|\
    \ x.is_integer() && (!x.is_negative())).map(|x| x.pow(2.0)).sum()) {\n   |   \
    \                                                                            \
    \              ^^^ help: there is an associated function with a similar name:\
    \ `powf`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpe5qmia_o.rs:16:19\n\
    \   |\n13 | /     match (lst.len(), lst.iter().filter(|x| x.is_integer() && (!x.is_negative())).map(|x|\
    \ x.pow(2.0)).sum()) {\n14 | |         (0, _) => 0,\n   | |                  \
    \ - this is found to be of type `isize`\n15 | |         (_, 0) => 0,\n   | | \
    \                  - this is found to be of type `isize`\n16 | |         (l, r)\
    \ => l * r\n   | |                   ^^^^^ expected `isize`, found `usize`\n17\
    \ | |     }\n   | |_____- `match` arms have incompatible types\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |         (l, r) => (l * r).try_into().unwrap()\n   |        \
    \           +     +++++++++++++++++++++\n\nerror: aborting due to 3 previous errors;\
    \ 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try "
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut tot = lst\n\
    \        .iter()\n        .filter(|&x| x != 0.)\n        .filter(|&x| x.is_integer().unwrap_or(false))\n\
    \        .sum::<isize>();\n    tot = tot * tot;\n    tot\n}\n\nfn main() {\n \
    \   let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmptljvsfyk.rs:15:24\n\
    \   |\n15 |         .filter(|&x| x != 0.)\n   |                        ^^ no implementation\
    \ for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not\
    \ implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0599]: no method named `is_integer`\
    \ found for reference `&f64` in the current scope\n  --> /tmp/tmptljvsfyk.rs:16:24\n\
    \   |\n16 |         .filter(|&x| x.is_integer().unwrap_or(false))\n   |      \
    \                  ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmptljvsfyk.rs:17:10\n\
    \     |\n17   |         .sum::<isize>();\n     |          ^^^ the trait `Sum<&f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut result = 0.0;\n    for x in lst {\n\
    \        if x % 2 == 0 {\n            result -= x;\n        } else {\n       \
    \     result += x;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpazm6i1i_.rs:18:14\n\
    \   |\n18 |         if x % 2 == 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n18 |         if x % 2.0 == 0 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpazm6i1i_.rs:24:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n24 |     result\n   |     ^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let len = lst.len();\n\
    \    if len == 0 {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        let n: f64 = *i;\n        if !n.is_integer() || n\
    \ >= f64::MIN_POSITIVE || n <= f64::MIN_POSITIVE || n >= f64::MIN_POSITIVE*2 {\n\
    \            continue;\n        }\n        sum += n * n;\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp1w1a7lqf.rs:21:15\n   |\n21 |         if !n.is_integer()\
    \ || n >= f64::MIN_POSITIVE || n <= f64::MIN_POSITIVE || n >= f64::MIN_POSITIVE*2\
    \ {\n   |               ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ cannot multiply `f64` by `{integer}`\n  --> /tmp/tmp1w1a7lqf.rs:21:105\n   |\n\
    21 |         if !n.is_integer() || n >= f64::MIN_POSITIVE || n <= f64::MIN_POSITIVE\
    \ || n >= f64::MIN_POSITIVE*2 {\n   |                                        \
    \                                                                 ^ no implementation\
    \ for `f64 * {integer}`\n   |\n   = help: the trait `Mul<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n21 |         if !n.is_integer() || n >= f64::MIN_POSITIVE || n <=\
    \ f64::MIN_POSITIVE || n >= f64::MIN_POSITIVE*2.0 {\n   |                    \
    \                                                                            \
    \           ++\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  -->\
    \ /tmp/tmp1w1a7lqf.rs:24:13\n   |\n24 |         sum += n * n;\n   |          \
    \   ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborti"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst\n        .iter()\n\
    \        .filter(|x| x.is_integer() && !x.is_negative())\n        .fold(0.0, |sum,\
    \ x| sum + x.powi(2.0))\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpvn2zjhya.rs:15:23\n   |\n15 |         .filter(|x|\
    \ x.is_integer() && !x.is_negative())\n   |                       ^^^^^^^^^^ method\
    \ not found in `&&f64`\n\nwarning: use of deprecated associated function `core::f64::<impl\
    \ f64>::is_negative`: renamed to is_sign_negative\n  --> /tmp/tmpvn2zjhya.rs:15:42\n\
    \   |\n15 |         .filter(|x| x.is_integer() && !x.is_negative())\n   |    \
    \                                      ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvn2zjhya.rs:16:15\n\
    \   |\n16 |         .fold(0.0, |sum, x| sum + x.powi(2.0))\n   |             \
    \  ^^^ expected `isize`, found floating-point number\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvn2zjhya.rs:16:42\n   |\n16 |         .fold(0.0, |sum,\
    \ x| sum + x.powi(2.0))\n   |                                          ^^^ expected\
    \ `i32`, found floating-point number\n\nerror[E0277]: cannot add `f64` to `isize`\n\
    \  --> /tmp/tmpvn2zjhya.rs:16:33\n   |\n16 |         .fold(0.0, |sum, x| sum +\
    \ x.powi(2.0))\n   |                                 ^ no implementation for `isize\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum_of_squares = 0.0;\n    for x in\
    \ lst {\n        if x.is_negative() {\n            return 0;\n        }\n    \
    \    if x.is_integer() {\n            sum_of_squares += x.powi(2);\n        }\n\
    \        sum_of_squares += x; // This line was commented out, it was only here\
    \ to help you debug the issue\n    }\n    sum_of_squares\n}\n\nfn main() {\n \
    \   let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmprhg1qdjp.rs:18:14\n   |\n18 |   \
    \      if x.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmprhg1qdjp.rs:21:14\n   |\n21 |         if\
    \ x.is_integer() {\n   |              ^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprhg1qdjp.rs:26:5\n   |\n12 | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n26\
    \ |     sum_of_squares\n   |     ^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst.len()\
    \ {\n        0 => return 0,\n        _ => lst.iter()\n            .filter(|&x|\
    \ x.is_integer())\n            .map(|x| x * x)\n            .sum(),\n    }\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpo2j6kb69.rs:16:28\n   |\n16 |             .filter(|&x|\
    \ x.is_integer())\n   |                            ^^^^^^^^^^ method not found\
    \ in `&f64`\n\nerror[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n\
    \    --> /tmp/tmpo2j6kb69.rs:18:14\n     |\n18   |             .sum(),\n     |\
    \              ^^^ the trait `Sum<f64>` is not implemented for `isize`\n     |\n\
    \     = help: the following other types implement trait `Sum<A>`:\n          \
    \     <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0\n    }\n    let mut result = 0.0;\n    for &x in lst {\n\
    \        if x % 2 == 1 {\n            result += x;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqhzfkcq5.rs:17:9\n   |\n\
    17 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqhzfkcq5.rs:22:5\n   |\n12 | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found floating-point number\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter_map(|i|\
    \ if i % 2 == 0 { Some(i) } else { None }).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpdst3qqz1.rs:13:36\n\
    \   |\n13 |     lst.iter().filter_map(|i| if i % 2 == 0 { Some(i) } else { None\
    \ }).sum::<isize>()\n   |                                    ^ no implementation\
    \ for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmpdst3qqz1.rs:13:72\n     |\n13   |     lst.iter().filter_map(|i|\
    \ if i % 2 == 0 { Some(i) } else { None }).sum::<isize>()\n     |            \
    \                                                            ^^^ the trait `Sum<&f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&x|\
    \ x < 0.0).cloned().count() as isize\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplvkxp09q.rs:13:32\n   |\n\
    13 |     lst.iter().filter(|&x| x < 0.0).cloned().count() as isize\n   |     \
    \                           ^^^\n   |                                |\n   | \
    \                               expected `&f64`, found floating-point number\n\
    \   |                                help: consider borrowing here: `&0.0`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|n|\
    \ n % 2 == 1).fold(0.0, |sum, el| sum + el)\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmpguoi8doo.rs:13:29\n\
    \   |\n13 |     lst.iter().filter(|n| n % 2 == 1).fold(0.0, |sum, el| sum + el)\n\
    \   |                           - ^ - {integer}\n   |                        \
    \   |\n   |                           &&f64\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpguoi8doo.rs:13:44\n   |\n13 |     lst.iter().filter(|n| n % 2 ==\
    \ 1).fold(0.0, |sum, el| sum + el)\n   |                                     \
    \       ^^^ expected `isize`, found floating-point number\n\nerror[E0277]: cannot\
    \ add `&f64` to `isize`\n  --> /tmp/tmpguoi8doo.rs:13:63\n   |\n13 |     lst.iter().filter(|n|\
    \ n % 2 == 1).fold(0.0, |sum, el| sum + el)\n   |                            \
    \                                   ^ no implementation for `isize + &f64`\n \
    \  |\n   = help: the trait `Add<&f64>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpor_6_coc.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpor_6_coc.rs:16:17\n  \
    \ |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match (lst.iter().filter(|x|\
    \ x != 0.0).map(|x| x ** 2.0).sum(), lst.len()) {\n        (0.0, 0.0) => 0,\n\
    \        (0.0, _) => 0,\n        (0.0, _) => 0,\n        (0.0, _) => 0,\n    \
    \    (0.0, _) => 0,\n        (x, _) => x * x,\n        (_, y) => y * y,\n    }\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&f64` with `{float}`\n  --> /tmp/tmppo24sfow.rs:13:36\n\
    \   |\n13 |     match (lst.iter().filter(|x| x != 0.0).map(|x| x ** 2.0).sum(),\
    \ lst.len()) {\n   |                                    ^^ no implementation for\
    \ `&&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not implemented\
    \ for `&&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0614]: type `{float}` cannot be dereferenced\n  -->\
    \ /tmp/tmppo24sfow.rs:13:55\n   |\n13 |     match (lst.iter().filter(|x| x !=\
    \ 0.0).map(|x| x ** 2.0).sum(), lst.len()) {\n   |                           \
    \                            ^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppo24sfow.rs:14:15\n\
    \   |\n13 |     match (lst.iter().filter(|x| x != 0.0).map(|x| x ** 2.0).sum(),\
    \ lst.len()) {\n   |           --------------------------------------------------------------------\
    \ this expression has type `({float}, usize)`\n14 |         (0.0, 0.0) => 0,\n\
    \   |               ^^^ expected `usize`, found floating-point number\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmppo24sfow.rs:19:19\n   |\n\
    13 | /     match (lst.iter().filter(|x| x != 0.0).map(|x| x ** 2.0).sum(), lst.len())\
    \ {\n14 | |         (0.0, 0.0) => 0,\n15 | |         (0.0, _) => 0,\n16 | |  \
    \       (0.0, _) => 0,\n17 | |         (0.0, _) => 0,\n18 | |         (0.0, _)\
    \ => 0,\n   | |                     - this and all prior arms are found to be\
    \ of type `isize`\n19 | |         (x, _) => x * x,\n   | |                   ^^^^^\
    \ expected `isize`, found `f64`\n20 | |         (_, y) => y * y,\n21 | |     }\n\
    \   | |_____- `match` arms have incompatible types\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0\n    }\n\n    let mut sum = 0;\n    for n in lst {\n \
    \       if n % 2 == 1 {\n            sum += n;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpotwptwdr.rs:19:14\n\
    \   |\n19 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpotwptwdr.rs:20:17\n  \
    \ |\n20 |             sum += n;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n    for n in lst {\n        if n % 2 == 1 {\n            total += n * n;\n\
    \        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp_njjdamn.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp_njjdamn.rs:16:19\n  \
    \ |\n16 |             total += n * n;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut total: f64 = 0.0;\n    for num in lst.iter()\
    \ {\n        if num.is_integer() {\n            total += num;\n        } else\
    \ if num > 0.0 {\n            total += num * num;\n        }\n    }\n    total\
    \ - (total / 2.0);\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpjmjdm2cy.rs:18:16\n   |\n18 |         if num.is_integer()\
    \ {\n   |                ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjmjdm2cy.rs:20:25\n   |\n20 |         } else\
    \ if num > 0.0 {\n   |                         ^^^\n   |                     \
    \    |\n   |                         expected `&f64`, found floating-point number\n\
    \   |                         help: consider borrowing here: `&0.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjmjdm2cy.rs:12:44\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |    ---------------------                   ^^^^^\
    \ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as\
    \ its body has no tail or `return` expression\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match (&*lst).len()\
    \ {\n        0 => 0,\n        _ => lst.iter().filter(|&x| x > 0f64).map(|x| x*x).sum().unwrap()\n\
    \    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqtfi57ut.rs:15:41\n   |\n\
    15 |         _ => lst.iter().filter(|&x| x > 0f64).map(|x| x*x).sum().unwrap()\n\
    \   |                                         ^^^^\n   |                     \
    \                    |\n   |                                         expected\
    \ `&f64`, found `f64`\n   |                                         help: consider\
    \ borrowing here: `&0f64`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in lst {\n    \
    \    if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpjst3pzf7.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n18 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpjst3pzf7.rs:19:17\n  \
    \ |\n19 |             sum += i;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0\n    }\n    let mut sum = 0.;\n    for &v in lst {\n   \
    \     if v < 0 {\n            sum += v * v;\n        } else if v > 0 {\n     \
    \       sum += v * v;\n        } else {\n            sum += v;\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0imjs85k.rs:17:9\n   |\n\
    17 |     for &v in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `v`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0imjs85k.rs:26:5\n   |\n12 | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n26 |     sum\n   |     ^^^ expected `isize`, found\
    \ floating-point number\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() && !x.is_zero() {\n           \
    \ sum += x;\n        }\n    }\n    sum * sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpoq3q3wbj.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ && !x.is_zero() {\n   |              ^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0599]: no method named `is_zero` found for type `f64` in the current scope\n\
    \  --> /tmp/tmpoq3q3wbj.rs:15:33\n   |\n15 |         if x.is_integer() && !x.is_zero()\
    \ {\n   |                                 ^^^^^^^ method not found in `f64`\n\n\
    error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpoq3q3wbj.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n    for num in lst {\n        if num < 0 {\n            return 0;\n    \
    \    }\n        if num % 2 == 1 {\n            total += num;\n        }\n    }\n\
    \    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n   \
    \ assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1qs4hdb_.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmp1qs4hdb_.rs:18:16\n   |\n18 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n18 |         if num %\
    \ 2.0 == 1 {\n   |                   ++\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmp1qs4hdb_.rs:19:19\n   |\n19 |             total\
    \ += num;\n   |                   ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n\
    \        if num < 0 {\n            continue;\n        }\n        let squared =\
    \ num * num;\n        if num % 2 == 1 {\n            sum += squared;\n       \
    \ }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy9gvxl0r.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpy9gvxl0r.rs:22:16\n   |\n22 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n22 |         if num %\
    \ 2.0 == 1 {\n   |                   ++\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmpy9gvxl0r.rs:23:17\n   |\n23 |             sum\
    \ += squared;\n   |                 ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num != 0.0 {\n            sum += num * num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpsy5u9xz8.rs:16:17\n\
    \   |\n16 |             sum += num * num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    debug_assert!(lst.len()\
    \ != 0, \"Cannot double the difference with an empty list\");\n    let mut result:\
    \ isize = 0;\n    for i in lst {\n        let num = *i;\n        if num < 0 {\n\
    \            continue;\n        }\n        if num % 2 == 1 {\n            result\
    \ -= num;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpc2lmasdi.rs:16:19\n\
    \   |\n16 |         let num = *i;\n   |                   ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut acc = 0;\n\
    \    for i in lst {\n        if !i.is_integer() {\n            return acc;\n \
    \       }\n        acc += i * i;\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp6c_75bn1.rs:15:15\n   |\n15 |         if !i.is_integer()\
    \ {\n   |               ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `isize`\n  --> /tmp/tmp6c_75bn1.rs:18:13\n   |\n\
    18 |         acc += i * i;\n   |             ^^ no implementation for `isize +=\
    \ f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut max_value = lst.iter().max_unwrap_or_default();\n\
    \    max_value *= max_value;\n    for i in lst.iter() {\n        let num = *i\
    \ as f64;\n        let is_odd = num as isize % 2 != 0;\n        if is_odd {\n\
    \            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `max_unwrap_or_default` found for struct\
    \ `std::slice::Iter` in the current scope\n  --> /tmp/tmp79yl6hb9.rs:17:36\n \
    \  |\n17 |     let mut max_value = lst.iter().max_unwrap_or_default();\n   | \
    \                                   ^^^^^^^^^^^^^^^^^^^^^ method not found in\
    \ `std::slice::Iter<'_, f64>`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp79yl6hb9.rs:23:17\n   |\n23 |             sum += num;\n   |   \
    \              ^^ no implementation for `{integer} += f64`\n   |\n   = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&x|\
    \ x > 0.0).filter_map(|x| f64::pow(*x, 2.0)).sum()\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptgqngtfd.rs:13:32\n   |\n\
    13 |     lst.iter().filter(|&x| x > 0.0).filter_map(|x| f64::pow(*x, 2.0)).sum()\n\
    \   |                                ^^^\n   |                               \
    \ |\n   |                                expected `&f64`, found floating-point\
    \ number\n   |                                help: consider borrowing here: `&0.0`\n\
    \nerror[E0599]: no function or associated item named `pow` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmptgqngtfd.rs:13:57\n   |\n13 |     lst.iter().filter(|&x|\
    \ x > 0.0).filter_map(|x| f64::pow(*x, 2.0)).sum()\n   |                     \
    \                                    ^^^\n   |                               \
    \                          |\n   |                                           \
    \              function or associated item not found in `f64`\n   |          \
    \                                               help: there is an associated function\
    \ with a similar name: `powf`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|n|\
    \ n % 2 == 1).fold(0, |acc, n| acc + n * n)\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmpl7xovzok.rs:13:29\n\
    \   |\n13 |     lst.iter().filter(|n| n % 2 == 1).fold(0, |acc, n| acc + n * n)\n\
    \   |                           - ^ - {integer}\n   |                        \
    \   |\n   |                           &&f64\n\nerror[E0277]: cannot add `f64`\
    \ to `isize`\n  --> /tmp/tmpl7xovzok.rs:13:60\n   |\n13 |     lst.iter().filter(|n|\
    \ n % 2 == 1).fold(0, |acc, n| acc + n * n)\n   |                            \
    \                                ^ no implementation for `isize + f64`\n   |\n\
    \   = help: the trait `Add<f64>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    sum_squares(lst).unwrap()\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_squares` in this scope\n  --> /tmp/tmprs6dunq1.rs:16:5\n\
    \   |\n16 |     sum_squares(lst).unwrap()\n   |     ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    double_the_difference(lst.len(),\
    \ &lst.as_slice())\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \  --> /tmp/tmpz9fto3sv.rs:13:5\n   |\n13 |     double_the_difference(lst.len(),\
    \ &lst.as_slice())\n   |     ^^^^^^^^^^^^^^^^^^^^^ ---------  ---------------\
    \ supplied 2 arguments\n   |     |\n   |     expected 1 argument\n   |\nnote:\
    \ function defined here\n  --> /tmp/tmpz9fto3sv.rs:12:4\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |    ^^^^^^^^^^^^^^^^^^^^^ -------------\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0.0;\n    for i in lst {\n\
    \        if i % 2 == 0 {\n            sum += i.clone() * i.clone();\n        }\n\
    \    }\n\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6eh9ne4v.rs:19:14\n\
    \   |\n19 |         if i % 2 == 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if i % 2.0 == 0 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6eh9ne4v.rs:24:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n24 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 101
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let len = lst.len();\n\
    \    if len == 0 {\n        return 0;\n    }\n\n    let mut total = 0;\n\n   \
    \ for i in 0..len {\n        if lst[i] >= 0.0 {\n            total += f64::from(lst[i])\
    \ as i64;\n        } else {\n            total -= f64::from(lst[i]) as i64;\n\
    \        }\n    }\n\n    return total as isize;\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `25`', /tmp/tmpydir97_0.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst.iter().filter(|&x| x != 0.0) {\n        if i % 2 == 1 {\n  \
    \          sum += i\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpkrfakn06.rs:14:39\n\
    \   |\n14 |     for i in lst.iter().filter(|&x| x != 0.0) {\n   |            \
    \                           ^^ no implementation for `&f64 == {float}`\n   |\n\
    \   = help: the trait `PartialEq<{float}>` is not implemented for `&f64`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpkrfakn06.rs:15:14\n\
    \   |\n15 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpkrfakn06.rs:16:17\n\
    \   |\n16 |             sum += i\n   |                 ^^ no implementation for\
    \ `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut total = 0;\n    for v in lst {\n\
    \        if v.is_odd() {\n            total += v;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpiaesmjf0.rs:18:14\n   |\n18 |         if v.is_odd() {\n\
    \   |              ^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmpiaesmjf0.rs:19:19\n   |\n19 |          \
    \   total += v;\n   |                   ^^ no implementation for `{integer} +=\
    \ f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut total_square_sum = 0;\n    let mut\
    \ squares_squared = 0;\n    let mut i = 0;\n\n    for num in lst {\n        match\
    \ num {\n            0 => break,\n            n => {\n                if n % 2\
    \ == 1 {\n                    squares_squared += n;\n                }\n     \
    \           total_square_sum += n * n;\n                i += 1;\n            }\n\
    \        }\n    }\n\n    if squares_squared == 0 {\n        return total_square_sum;\n\
    \    }\n\n    total_square_sum -= squares_squared;\n    total_square_sum /= i;\n\
    \n    return total_square_sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpogrz7iz7.rs:23:13\n   |\n\
    22 |         match num {\n   |               --- this expression has type `f64`\n\
    23 |             0 => break,\n   |             ^\n   |             |\n   |   \
    \          expected `f64`, found integer\n   |             help: use a float literal:\
    \ `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpogrz7iz7.rs:25:22\n\
    \   |\n25 |                 if n % 2 == 1 {\n   |                      ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n25 |                 if n % 2.0 == 1 {\n   |                   \
    \      ++\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpogrz7iz7.rs:26:37\n\
    \   |\n26 |                     squares_squared += n;\n   |                  \
    \                   ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpogrz7iz7.rs:28:34\n   |\n28 |\
    \                 total_square_sum += n * n;\n   |                           \
    \       ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait\
    \ `AddAssign<f64>` is not imple"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst.len()\
    \ {\n        0 => 0,\n        _ => lst.iter().filter(|&x| x > 0\n            .as_ref()\n\
    \            .ok_or(\"Input vector was empty\")\n            .and_then(|x| x.is_integer())\n\
    \            .unwrap_or(false)).fold(0, |acc, &x| acc + x * x),\n    }\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `as_ref` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpx64jelfx.rs:16:14\n   |\n16 |             .as_ref()\n   |     \
    \         ^^^^^^\n   |\nhelp: you must specify a concrete type for this numeric\
    \ value, like `i32`\n   |\n15 |         _ => lst.iter().filter(|&x| x > 0_i32\n\
    \   |                                         ~~~~~\n\nerror[E0277]: cannot add\
    \ `f64` to `isize`\n  --> /tmp/tmpx64jelfx.rs:19:54\n   |\n19 |             .unwrap_or(false)).fold(0,\
    \ |acc, &x| acc + x * x),\n   |                                              \
    \        ^ no implementation for `isize + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0689.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    // get the sum of the squares from the input\
    \ vector.\n    let mut sum = vec![];\n    for x in lst {\n        // add squares\
    \ of odd numbers to the sum vector.\n        if x % 2 == 1 {\n            sum.push(x.pow2());\n\
    \        }\n    }\n    // sum the squares of the odd numbers in the input vector.\n\
    \    let result = sum.iter().fold(0, |a, &x| a + x);\n    // return the sum of\
    \ the squares of the odd numbers in the input vector.\n    result\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpdoi2fgtd.rs:20:14\n\
    \   |\n20 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n20 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0599]:\
    \ no method named `pow2` found for type `f64` in the current scope\n  --> /tmp/tmpdoi2fgtd.rs:21:24\n\
    \   |\n21 |             sum.push(x.pow2());\n   |                        ^^^^\
    \ help: there is an associated function with a similar name: `powf`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 != 0).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmpkbn3z9nb.rs:13:29\n\
    \   |\n13 |     lst.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |       \
    \                    - ^ - {integer}\n   |                           |\n   | \
    \                          &&f64\n\nerror[E0277]: the trait bound `isize: Sum<&f64>`\
    \ is not satisfied\n    --> /tmp/tmpkbn3z9nb.rs:13:39\n     |\n13   |     lst.iter().filter(|x|\
    \ x % 2 != 0).sum::<isize>()\n     |                                       ^^^\
    \ the trait `Sum<&f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum_squares = 0;\n\n    for value\
    \ in lst {\n        if value != 0.0 {\n            let value = value.try_into().unwrap();\n\
    \            if value % 2 != 0 {\n                sum_squares += value * value;\n\
    \            }\n        }\n    }\n\n    return sum_squares\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `try_into` found for type `f64` in the current\
    \ scope\n   --> /tmp/tmp8_du5478.rs:21:31\n    |\n21  |             let value\
    \ = value.try_into().unwrap();\n    |                               ^^^^^^^^ method\
    \ not found in `f64`\n    |\n    = help: items from traits can only be used if\
    \ the trait is in scope\n    = note: 'std::convert::TryInto' is included in the\
    \ prelude starting in Edition 2021\nhelp: the following trait is implemented but\
    \ not in scope; perhaps add a `use` for it:\n    |\n1   | use std::convert::TryInto;\n\
    \    |\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmp5798fmgd.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum()\n   |                             ^^^^^^ method not found\
    \ in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmp5798fmgd.rs:13:39\n     |\n13   |     lst.iter().filter(|x| x.is_odd()).sum()\n\
    \     |                                       ^^^ the trait `Sum<&f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in lst {\n  \
    \      if i % 2 == 1 {\n            sum += i * (i as f64);\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpw19zi863.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n18 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpw19zi863.rs:19:17\n  \
    \ |\n19 |             sum += i * (i as f64);\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \n    for x in lst.iter() {\n        if *x <= 0.0 {\n            continue;\n \
    \       }\n\n        sum += *x;\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpftbe9hp2.rs:23:5\n   |\n\
    12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    23 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0.0;\n    for i in lst {\n  \
    \      if i != 0.0{\n            sum += i * i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpihrs03zw.rs:22:12\n   |\n\
    12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    22 |     return sum;\n   |            ^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    if lst.len() < 2 {\n        return 0;\n   \
    \ }\n    let mut total = 0;\n    for x in lst {\n        total += ((x % 2) ==\
    \ 0) ? x*x : -x*x;\n    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `x`\n\
    \  --> /tmp/tmpk0t3feer.rs:21:35\n   |\n21 |         total += ((x % 2) == 0) ?\
    \ x*x : -x*x;\n   |                                   ^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: f64\
    \ = 0.0;\n    for (i, elt) in lst.iter().enumerate() {\n        if elt > 0.0 {\n\
    \            sum += elt * elt;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpylykk6eo.rs:15:18\n   |\n\
    15 |         if elt > 0.0 {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&f64`, found floating-point number\n   |\
    \                  help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpylykk6eo.rs:19:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|x| x.is_integer() && x.is_odd())\n        .fold(0, |acc, x| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmp0yur57yt.rs:14:23\n   |\n14 |         .filter(|x|\
    \ x.is_integer() && x.is_odd())\n   |                       ^^^^^^^^^^ method\
    \ not found in `&&f64`\n\nerror[E0599]: no method named `is_odd` found for reference\
    \ `&&f64` in the current scope\n  --> /tmp/tmp0yur57yt.rs:14:41\n   |\n14 |  \
    \       .filter(|x| x.is_integer() && x.is_odd())\n   |                      \
    \                   ^^^^^^ method not found in `&&f64`\n\nerror[E0277]: cannot\
    \ add `&f64` to `isize`\n  --> /tmp/tmp0yur57yt.rs:15:31\n   |\n15 |         .fold(0,\
    \ |acc, x| acc + x)\n   |                               ^ no implementation for\
    \ `isize + &f64`\n   |\n   = help: the trait `Add<&f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&x|\
    \ x >= 0).sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcej_v4dd.rs:13:33\n   |\n\
    13 |     lst.iter().filter(|&x| x >= 0).sum()\n   |                          \
    \       ^ expected `&f64`, found integer\n\nerror[E0277]: the trait bound `isize:\
    \ Sum<&f64>` is not satisfied\n    --> /tmp/tmpcej_v4dd.rs:13:36\n     |\n13 \
    \  |     lst.iter().filter(|&x| x >= 0).sum()\n     |                        \
    \            ^^^ the trait `Sum<&f64>` is not implemented for `isize`\n     |\n\
    \     = help: the following other types implement trait `Sum<A>`:\n          \
    \     <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst\n        .iter()\n\
    \        .map(|&x| x.round())\n        .filter(|&x| x.is_integer())\n        .filter(|&x|\
    \ x.is_odd())\n        .map(|x| x * x)\n        .sum::<f64>()\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmphv56q3vh.rs:16:24\n   |\n16 |         .filter(|&x|\
    \ x.is_integer())\n   |                        ^^^^^^^^^^ method not found in\
    \ `f64`\n\nerror[E0599]: no method named `is_odd` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmphv56q3vh.rs:17:24\n   |\n17 |         .filter(|&x|\
    \ x.is_odd())\n   |                        ^^^^^^ method not found in `f64`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphv56q3vh.rs:13:5\n   |\n12 |   fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                        ----- expected `isize` because of return type\n13 | /\
    \     lst\n14 | |         .iter()\n15 | |         .map(|&x| x.round())\n16 | |\
    \         .filter(|&x| x.is_integer())\n17 | |         .filter(|&x| x.is_odd())\n\
    18 | |         .map(|x| x * x)\n19 | |         .sum::<f64>()\n   | |_____________________^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().fold(0,\
    \ |sum, i| if i % 2 == 0 { sum + i } else { 0 })\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp8z1kly_m.rs:13:38\n\
    \   |\n13 |     lst.iter().fold(0, |sum, i| if i % 2 == 0 { sum + i } else { 0\
    \ })\n   |                                      ^ no implementation for `&f64\
    \ % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add `&f64` to `isize`\n  --> /tmp/tmp8z1kly_m.rs:13:53\n\
    \   |\n13 |     lst.iter().fold(0, |sum, i| if i % 2 == 0 { sum + i } else { 0\
    \ })\n   |                                                     ^ no implementation\
    \ for `isize + &f64`\n   |\n   = help: the trait `Add<&f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_integer()).filter(|x| !x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n \
    \   let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpdftgu8ik.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_integer()).filter(|x| !x.is_odd()).sum::<isize>()\n   |               \
    \              ^^^^^^^^^^ method not found in `&&f64`\n\nerror[E0599]: no method\
    \ named `is_odd` found for reference `&&f64` in the current scope\n  --> /tmp/tmpdftgu8ik.rs:13:57\n\
    \   |\n13 |     lst.iter().filter(|x| x.is_integer()).filter(|x| !x.is_odd()).sum::<isize>()\n\
    \   |                                                         ^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n    --> /tmp/tmpdftgu8ik.rs:13:67\n     |\n13   |     lst.iter().filter(|x|\
    \ x.is_integer()).filter(|x| !x.is_odd()).sum::<isize>()\n     |             \
    \                                                      ^^^ the trait `Sum<&f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \    for i in lst.iter() {\n        if *i > 0. {\n            sum += *i;\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56z3qpyz.rs:19:5\n   |\n\
    12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    19 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut result = lst[0];\n    for elem in lst.iter().skip(1)\
    \ {\n        if elem % 2 == 0 {\n            result *= elem;\n        } else {\n\
    \            result += elem;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmppq804yy7.rs:18:17\n\
    \   |\n18 |         if elem % 2 == 0 {\n   |                 ^ no implementation\
    \ for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppq804yy7.rs:24:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n24 |     result\n   |     ^^^^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp1kv2h1th.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp1kv2h1th.rs:16:17\n  \
    \ |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    // Calculate the sum of the squares of the\
    \ odd numbers in the vector.\n    let mut sum = 0;\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x;\n        }\n    }\n\n    // Calculate\
    \ the square root of the sum of the squares of the odd numbers\n    // and subtract\
    \ it from 1.\n    let sq_root = f64::sqrt(sum);\n    sq_root - 1.0\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp14d8ac3u.rs:20:14\n\
    \   |\n20 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n20 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp14d8ac3u.rs:21:17\n  \
    \ |\n21 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp14d8ac3u.rs:27:29\n\
    \   |\n27 |     let sq_root = f64::sqrt(sum);\n   |                          \
    \   ^^^ expected `f64`, found integer\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp14d8ac3u.rs:28:5\n   |\n12 | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n28 |     sq_root - 1.0\n   |     ^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp689okymo.rs:19:14\n\
    \   |\n19 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmp689okymo.rs:20:17\n\
    \   |\n20 |             sum += i;\n   |                 ^^ no implementation for\
    \ `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \    let mut odd = true;\n    for x in lst {\n        sum += x.powi(2);\n    \
    \    odd = !odd;\n    }\n    odd = !odd;\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprkey1ans.rs:20:5\n   |\n\
    12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    20 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut cnt = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            cnt += n;\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp5qfi504r.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp5qfi504r.rs:16:17\n  \
    \ |\n16 |             cnt += n;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total_squared\
    \ = std::f64::MAX;\n    for num in lst {\n        if num < 0 {\n            continue;\n\
    \        }\n        if num % 2 == 0 {\n            total_squared += num * num;\n\
    \        }\n    }\n    total_squared\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnixiqjx9.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpnixiqjx9.rs:18:16\n   |\n18 |         if num % 2 == 0 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n18 |         if num %\
    \ 2.0 == 0 {\n   |                   ++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnixiqjx9.rs:22:5\n   |\n12 | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n22 |     total_squared\n   |     ^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \    for n in lst.iter().filter(|&n| n > 0.0) {\n        sum += n * n;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpylmdg8jo.rs:14:41\n   |\n\
    14 |     for n in lst.iter().filter(|&n| n > 0.0) {\n   |                    \
    \                     ^^^\n   |                                         |\n  \
    \ |                                         expected `&f64`, found floating-point\
    \ number\n   |                                         help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpylmdg8jo.rs:17:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n17 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst.iter()\
    \ {\n        if x.is_integer() && x >= 0 {\n            sum += x;\n        }\n\
    \    }\n    sum * sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpvl9hy8uy.rs:18:14\n   |\n18 |         if x.is_integer()\
    \ && x >= 0 {\n   |              ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvl9hy8uy.rs:18:35\n   |\n18 |         if x.is_integer()\
    \ && x >= 0 {\n   |                                   ^ expected `&f64`, found\
    \ integer\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpvl9hy8uy.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x < 0 {\n            return 0;\n        }\n  \
    \      if x.is_integer() {\n            sum += x;\n        } else {\n        \
    \    sum += x * x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgnyn4hr1.rs:15:16\n   |\n\
    15 |         if x < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `f64`, found integer\n   |                help: use a\
    \ float literal: `0.0`\n\nerror[E0599]: no method named `is_integer` found for\
    \ type `f64` in the current scope\n  --> /tmp/tmpgnyn4hr1.rs:18:14\n   |\n18 |\
    \         if x.is_integer() {\n   |              ^^^^^^^^^^ method not found in\
    \ `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgnyn4hr1.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgnyn4hr1.rs:21:17\n\
    \   |\n21 |             sum += x * x;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0\n    }\n    let mut square = lst.iter().map(|x| x*x).sum();\n\
    \    for i in lst.iter().filter(|x| x >= 0.0).cloned() {\n        if i > 0.0 {\n\
    \            square -= x;\n        }\n    }\n    square\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpuyg7q04z.rs:19:23\n\
    \   |\n19 |             square -= x;\n   |                       ^ help: a local\
    \ variable with a similar name exists: `i`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuyg7q04z.rs:17:41\n   |\n17 |     for i in lst.iter().filter(|x|\
    \ x >= 0.0).cloned() {\n   |                                         ^^^ expected\
    \ `&&f64`, found floating-point number\n\nerror[E0277]: the trait bound `isize:\
    \ Sum<f64>` is not satisfied\n    --> /tmp/tmpuyg7q04z.rs:16:46\n     |\n16  \
    \ |     let mut square = lst.iter().map(|x| x*x).sum();\n     |              \
    \                                ^^^ the trait `Sum<f64>` is not implemented for\
    \ `isize`\n     |\n     = help: the following other types implement trait `Sum<A>`:\n\
    \               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n         \
    \      <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for v in lst {\n        if !v.is_integer() {\n            if v < 0 {\n  \
    \              continue;\n            }\n        }\n        let num = v as f64;\n\
    \        sum += num * num;\n    }\n    sum as isize\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpuq9cas06.rs:15:15\n   |\n15 |         if !v.is_integer()\
    \ {\n   |               ^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuq9cas06.rs:16:20\n   |\n16 |             if\
    \ v < 0 {\n   |                    ^\n   |                    |\n   |        \
    \            expected `f64`, found integer\n   |                    help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpuq9cas06.rs:21:13\n   |\n21 |         sum += num * num;\n   | \
    \            ^^ no implementation for `{integer} += f64`\n   |\n   = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter_map(|x|\
    \ if x < 0.0\n        || x.is_nan()\n        || x.is_inf()\n    {\n        Some(0)\n\
    \    } else {\n        Some(x.powf(2.0))\n    }).sum()\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp52lanens.rs:13:38\n   |\n\
    13 |     lst.iter().filter_map(|x| if x < 0.0\n   |                          \
    \            ^^^\n   |                                      |\n   |          \
    \                            expected `&f64`, found floating-point number\n  \
    \ |                                      help: consider borrowing here: `&0.0`\n\
    \nerror[E0599]: no method named `is_inf` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmp52lanens.rs:15:14\n   |\n15 |         || x.is_inf()\n \
    \  |              ^^^^^^ help: there is an associated function with a similar\
    \ name: `is_infinite`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp52lanens.rs:19:14\n\
    \   |\n19 |         Some(x.powf(2.0))\n   |              ^^^^^^^^^^^ expected\
    \ integer, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match (lst.len(),\
    \ lst.iter().all(|n| *n % 2 == 0)) {\n        (0, _) => 0,\n        (2, true)\
    \ => lst.iter().map(|n| n * n).sum(),\n        (2, false) => lst.iter().filter(|n|\
    \ n % 2 != 0).sum(),\n        (_, true) => lst.iter().filter(|n| *n % 2 != 0).sum(),\n\
    \        (_, false) => 0\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpwkevtli7.rs:13:45\n\
    \   |\n13 |     match (lst.len(), lst.iter().all(|n| *n % 2 == 0)) {\n   |   \
    \                                          ^ no implementation for `f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n13 |     match\
    \ (lst.len(), lst.iter().all(|n| *n % 2.0 == 0)) {\n   |                     \
    \                           ++\n\nerror[E0277]: the trait bound `isize: Sum<f64>`\
    \ is not satisfied\n    --> /tmp/tmpwkevtli7.rs:15:48\n     |\n15   |        \
    \ (2, true) => lst.iter().map(|n| n * n).sum(),\n     |                      \
    \                          ^^^ the trait `Sum<f64>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror[E0369]: cannot mod `&&f64`\
    \ by `{integer}`\n  --> /tmp/tmpwkevtli7.rs:16:47\n   |\n16 |         (2, false)\
    \ => lst.iter().filter(|n| n % 2 != 0).sum(),\n   |                          \
    \                   - ^ - {integer}\n   |                                    \
    \         |\n   |                                             &&f64\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmpwkevtli7.rs:16:57\n\
    \     |\n16   |         (2, false) => lst.iter().fil"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst\n        .iter()\n\
    \        .filter(|n| n % 2 == 1)\n        .map(|x| x * x)\n        .sum()\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmponx5zr6u.rs:15:23\n\
    \   |\n15 |         .filter(|n| n % 2 == 1)\n   |                     - ^ - {integer}\n\
    \   |                     |\n   |                     &&f64\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmponx5zr6u.rs:17:10\n\
    \     |\n17   |         .sum()\n     |          ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut result = 0.0;\n    for n in lst {\n\
    \        if n % 2 == 1 {\n            result += n * n;\n        }\n    }\n\n \
    \   result\n}\n\nfn main() {\n    let candidate = double_the_difference;\n   \
    \ assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpp28eso2q.rs:19:14\n\
    \   |\n19 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp28eso2q.rs:24:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n24 |     result\n   |     ^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|x| *x > 0) as usize\n        .map(|x| x * x)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: casts cannot be followed by a method call\n  --> /tmp/tmplwf_26mx.rs:13:5\n\
    \   |\n13 | /     lst.iter()\n14 | |         .filter(|x| *x > 0) as usize\n  \
    \ | |____________________________________^\n   |\nhelp: try surrounding the expression\
    \ in parentheses\n   |\n13 ~     (lst.iter()\n14 ~         .filter(|x| *x > 0)\
    \ as usize)\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplwf_26mx.rs:14:26\n\
    \   |\n14 |         .filter(|x| *x > 0) as usize\n   |                       \
    \   ^ expected `&f64`, found integer\n\nerror[E0599]: `usize` is not an iterator\n\
    \  --> /tmp/tmplwf_26mx.rs:15:10\n   |\n15 |         .map(|x| x * x)\n   |   \
    \       ^^^ `usize` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `usize: Iterator`\n           which is required\
    \ by `&mut usize: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum_of_squares = 0.0;\n    for i in\
    \ lst.iter() {\n        if i % 2 == 1 {\n            sum_of_squares += i ** 2;\n\
    \        }\n    }\n    return sum_of_squares\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp762wu3v7.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp762wu3v7.rs:19:34\n\
    \   |\n19 |             sum_of_squares += i ** 2;\n   |                      \
    \            ^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp762wu3v7.rs:22:12\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n22 |     return sum_of_squares\n   |            ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().map(|v|\
    \ if v >= 0.0 { v * v } else { 0.0 }).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxgpj60hm.rs:13:32\n   |\n\
    13 |     lst.iter().map(|v| if v >= 0.0 { v * v } else { 0.0 }).sum::<isize>()\n\
    \   |                                ^^^\n   |                               \
    \ |\n   |                                expected `&f64`, found floating-point\
    \ number\n   |                                help: consider borrowing here: `&0.0`\n\
    \nerror[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpxgpj60hm.rs:13:60\n\
    \     |\n13   |     lst.iter().map(|v| if v >= 0.0 { v * v } else { 0.0 }).sum::<isize>()\n\
    \     |                                                            ^^^ the trait\
    \ `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: f64\
    \ = 0.0;\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpq4s43dxy.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq4s43dxy.rs:19:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % 2 == 1 {\n            sum += i; // Accumulate\
    \ all odd numbers\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpgt6dtemh.rs:15:14\n\
    \   |\n15 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgt6dtemh.rs:16:17\n  \
    \ |\n16 |             sum += i; // Accumulate all odd numbers\n   |          \
    \       ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait\
    \ `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: f64\
    \ = 0.0;\n    for (i, num) in lst.iter().enumerate() {\n        if num > 0.0 {\n\
    \            let delta = num - 1.0;\n            sum += delta * delta;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl040zs0b.rs:15:18\n   |\n\
    15 |         if num > 0.0 {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&f64`, found floating-point number\n   |\
    \                  help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl040zs0b.rs:20:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n20 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum: f64 = 0.0;\n    for i in lst {\n\
    \        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum * sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpukk2g_6f.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n18 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpukk2g_6f.rs:22:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n22 |     sum * sum\n   |     ^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    use std::iter::FusedIterator;\n\
    \    let mut it = lst.into_iter().fuse();\n    it.take_while(|x| *x != 0).filter(|x|\
    \ *x % 2 != 0).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::iter::FusedIterator`\n  --> /tmp/tmp1h6v9s13.rs:13:9\n\
    \   |\n13 |     use std::iter::FusedIterator;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1h6v9s13.rs:15:29\n   |\n15 |     it.take_while(|x| *x\
    \ != 0).filter(|x| *x % 2 != 0).sum::<isize>()\n   |                         \
    \    ^\n   |                             |\n   |                             expected\
    \ `f64`, found integer\n   |                             help: use a float literal:\
    \ `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp1h6v9s13.rs:15:46\n\
    \   |\n15 |     it.take_while(|x| *x != 0).filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                                              ^ no implementation for `f64\
    \ % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |     it.take_while(|x| *x != 0).filter(|x| *x % 2.0 != 0).sum::<isize>()\n\
    \   |                                                 ++\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmp1h6v9s13.rs:15:56\n\
    \     |\n15   |     it.take_while(|x| *x != 0).filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \     |                                                        ^^^ the trait `Sum<f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \        "
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkm06z9a5.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpkm06z9a5.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum: f64\
    \ = 0.0;\n    for x in lst.iter() {\n        if x.is_integer() {\n           \
    \ sum += x;\n        }\n    }\n    sum * sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmptd9o6flc.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptd9o6flc.rs:19:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     sum * sum\n   |     ^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    for elt in lst {\n        if elt < 0 {\n\
    \            return 0;\n        }\n        if elt % 2 == 1 {\n            return\
    \ elt * 2;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphi0ylq0w.rs:17:18\n   |\n\
    17 |         if elt < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmphi0ylq0w.rs:20:16\n   |\n20 |         if elt % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n20 |         if elt %\
    \ 2.0 == 1 {\n   |                   ++\n\nerror[E0277]: cannot multiply `f64`\
    \ by `{integer}`\n  --> /tmp/tmphi0ylq0w.rs:21:24\n   |\n21 |             return\
    \ elt * 2;\n   |                        ^ no implementation for `f64 * {integer}`\n\
    \   |\n   = help: the trait `Mul<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n21 |         \
    \    return elt * 2.0;\n   |                           ++\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0.0;\n\n    for i in lst {\n\
    \        if i > 0.0 {\n            sum += i ** 2;\n        }\n    }\n\n    for\
    \ i in lst {\n        if i < 0.0 {\n            sum += i ** 2;\n        }\n  \
    \  }\n\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpuyovnt3c.rs:21:23\n\
    \   |\n21 |             sum += i ** 2;\n   |                       ^^^\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n  --> /tmp/tmpuyovnt3c.rs:27:23\n \
    \  |\n27 |             sum += i ** 2;\n   |                       ^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuyovnt3c.rs:31:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n31 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    // TODO: handle overflows\n    double_the_difference_impl(lst,\
    \ 0, |acc, x| acc + x * x);\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `double_the_difference_impl` in this\
    \ scope\n  --> /tmp/tmplf9owmhq.rs:18:5\n   |\n18 |     double_the_difference_impl(lst,\
    \ 0, |acc, x| acc + x * x);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplf9owmhq.rs:12:44\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |    ---------------------\
    \                   ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0.0;\n    for x in lst {\n\
    \        if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp1qu8rm8b.rs:19:14\n\
    \   |\n19 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1qu8rm8b.rs:23:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n23 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut sum_of_squared_odd = 0.0;\n    let\
    \ mut total_odd = 0.0;\n    let mut total_even = 0.0;\n    for i in lst {\n  \
    \      let is_odd = i > 0; // check only odd elements\n        if is_odd {\n \
    \           sum_of_squared_odd += i * i;\n            total_odd += 1.0;\n    \
    \    } else {\n            sum_of_squared_odd += 0.0;\n            total_even\
    \ += 1.0;\n        }\n    }\n    sum_of_squared_odd += total_odd * total_odd;\n\
    \    sum_of_squared_odd += total_even * total_even;\n    if sum_of_squared_odd\
    \ > 0.0 {\n        sum_of_squared_odd - total_even - total_odd\n    } else {\n\
    \        0\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8h8cqnp1.rs:20:26\n   |\n\
    20 |         let is_odd = i > 0; // check only odd elements\n   |            \
    \              ^\n   |                          |\n   |                      \
    \    expected `f64`, found integer\n   |                          help: use a\
    \ float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h8cqnp1.rs:32:9\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n32 |         sum_of_squared_odd - total_even - total_odd\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut total_sum: f64 = lst.iter().sum();\n\
    \    for i in lst {\n        if *i % 2 == 1 {\n            total_sum -= *i as\
    \ f64;\n        }\n    }\n    total_sum as isize\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmp_xi7jly7.rs:18:12\n\
    \   |\n18 |         if *i % 2 == 1 {\n   |            ^^\n\nerror[E0614]: type\
    \ `f64` cannot be dereferenced\n  --> /tmp/tmp_xi7jly7.rs:19:26\n   |\n19 |  \
    \           total_sum -= *i as f64;\n   |                          ^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|e|\
    \ e > 0).filter(|e| !is_integer(e)).fold(0, |sum, e| sum + e*e)\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_integer` in this scope\n  --> /tmp/tmpl6nvf0ax.rs:13:46\n\
    \   |\n13 |     lst.iter().filter(|e| e > 0).filter(|e| !is_integer(e)).fold(0,\
    \ |sum, e| sum + e*e)\n   |                                              ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl6nvf0ax.rs:13:31\n\
    \   |\n13 |     lst.iter().filter(|e| e > 0).filter(|e| !is_integer(e)).fold(0,\
    \ |sum, e| sum + e*e)\n   |                               ^ expected `&&f64`,\
    \ found integer\n\nerror[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpl6nvf0ax.rs:13:82\n\
    \   |\n13 |     lst.iter().filter(|e| e > 0).filter(|e| !is_integer(e)).fold(0,\
    \ |sum, e| sum + e*e)\n   |                                                  \
    \                                ^ no implementation for `isize + f64`\n   |\n\
    \   = help: the trait `Add<f64>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ *x > 0f64).filter(|x| *x % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsdpk5crk.rs:13:32\n   |\n\
    13 |     lst.iter().filter(|x| *x > 0f64).filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                                ^^^^\n   |                              \
    \  |\n   |                                expected `&f64`, found `f64`\n   | \
    \                               help: consider borrowing here: `&0f64`\n\nerror[E0277]:\
    \ cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpsdpk5crk.rs:13:52\n   |\n13\
    \ |     lst.iter().filter(|x| *x > 0f64).filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                                                    ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmpsdpk5crk.rs:13:62\n     |\n13   |     lst.iter().filter(|x| *x\
    \ > 0f64).filter(|x| *x % 2 == 1).sum::<isize>()\n     |                     \
    \                                         ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    if lst[0] < 0 || lst[0] as u64 %2 == 1\
    \ {\n        return 0;\n    }\n\n    let mut sum_sq = 0.0_;\n    let mut cnt =\
    \ 0;\n\n    for num in lst {\n        if num < 0 {\n            cnt += 1;\n  \
    \          continue;\n        }\n        sum_sq += num as f64 * num as f64;\n\
    \        cnt += 1;\n    }\n    sum_sq /= cnt;\n    cnt as isize\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptgzaoowm.rs:17:17\n   |\n\
    17 |     if lst[0] < 0 || lst[0] as u64 %2 == 1 {\n   |                 ^\n  \
    \ |                 |\n   |                 expected `f64`, found integer\n  \
    \ |                 help: use a float literal: `0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptgzaoowm.rs:25:18\n   |\n25 |         if num < 0 {\n  \
    \ |                  ^\n   |                  |\n   |                  expected\
    \ `f64`, found integer\n   |                  help: use a float literal: `0.0`\n\
    \nerror[E0277]: cannot divide-assign `f64` by `{integer}`\n  --> /tmp/tmptgzaoowm.rs:32:12\n\
    \   |\n32 |     sum_sq /= cnt;\n   |            ^^ no implementation for `f64\
    \ /= {integer}`\n   |\n   = help: the trait `DivAssign<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    use std::iter::FromIterator;\n\
    \n    let size = lst.len();\n    let mut result = 0.0;\n\n    for n in lst {\n\
    \        if n < 0.0 {\n            return 0;\n        }\n        if n % 2 == 0.0\
    \ {\n            result += n;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::iter::FromIterator`\n  --> /tmp/tmptycg3gi7.rs:13:9\n\
    \   |\n13 |     use std::iter::FromIterator;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0277]: cannot\
    \ mod `f64` by `{integer}`\n  --> /tmp/tmptycg3gi7.rs:22:14\n   |\n22 |      \
    \   if n % 2 == 0.0 {\n   |              ^ no implementation for `f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n22 |         if\
    \ n % 2.0 == 0.0 {\n   |                 ++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptycg3gi7.rs:26:5\n   |\n12 | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n26 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `f64`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut total = 0;\n    for x in lst {\n\
    \        if x % 2 == 1 {\n            total += x;\n        }\n    }\n\n    total\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpqjpu_u8r.rs:19:14\n\
    \   |\n19 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpqjpu_u8r.rs:20:19\n  \
    \ |\n20 |             total += x;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \n    for num in lst {\n        if num % 2 == 1 {\n            sum += num * num;\n\
    \        }\n    }\n\n    if lst.is_empty() {\n        return 0;\n    }\n\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpzhudq3ze.rs:16:16\n\
    \   |\n16 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |         if num % 2.0 == 1 {\n   |                   ++\n\n\
    error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpzhudq3ze.rs:17:17\n\
    \   |\n17 |             sum += num * num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match (lst.len(),\
    \ lst.iter().all(|n| n.is_integer())) {\n        (1, true) => 0,\n        (lst.len(),\
    \ false) => 0,\n        (2, false) => 0,\n        (3, false) => 0,\n        (4,\
    \ false) => 0,\n        (5, false) => 0,\n        (6, false) => 0,\n        (7,\
    \ false) => 0,\n        (8, false) => 0,\n        (9, false) => 0,\n        (10,\
    \ false) => 0,\n        (11, false) => 0,\n        (12, false) => 0,\n       \
    \ (13, false) => 0,\n        (14, false) => 0,\n        (15, false) => 0,\n  \
    \      _ => 1,\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `@`, or `|`, found `.`\n  --> /tmp/tmp94kahlx3.rs:15:13\n\
    \   |\n15 |         (lst.len(), false) => 0,\n   |             ^\n   |       \
    \      |\n   |             expected one of `)`, `,`, `@`, or `|`\n   |       \
    \      help: missing `,`\n\nerror[E0531]: cannot find tuple struct or tuple variant\
    \ `len` in this scope\n  --> /tmp/tmp94kahlx3.rs:15:14\n   |\n15 |         (lst.len(),\
    \ false) => 0,\n   |              ^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `is_integer` found for reference `&f64` in the current scope\n\
    \  --> /tmp/tmp94kahlx3.rs:13:44\n   |\n13 |     match (lst.len(), lst.iter().all(|n|\
    \ n.is_integer())) {\n   |                                            ^^^^^^^^^^\
    \ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp94kahlx3.rs:15:9\n\
    \   |\n13 |     match (lst.len(), lst.iter().all(|n| n.is_integer())) {\n   |\
    \           ----------------------------------------------- this expression has\
    \ type `(usize, bool)`\n14 |         (1, true) => 0,\n15 |         (lst.len(),\
    \ false) => 0,\n   |         ^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements,\
    \ found one with 3 elements\n   |\n   = note: expected tuple `(usize, bool)`\n\
    \              found tuple `(_, _, _)`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0531, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum: isize = 0;\n\n    for elt in\
    \ lst {\n        if elt < 0 {\n            continue;\n        }\n\n        if\
    \ elt & 1 == 1 {\n            sum += elt * elt;\n        }\n    }\n\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjxpvuqa2.rs:20:18\n   |\n\
    20 |         if elt < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0369]: no implementation for `f64 & {integer}`\n\
    \  --> /tmp/tmpjxpvuqa2.rs:24:16\n   |\n24 |         if elt & 1 == 1 {\n   | \
    \           --- ^ - {integer}\n   |            |\n   |            f64\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `isize`\n  --> /tmp/tmpjxpvuqa2.rs:25:17\n   |\n\
    25 |             sum += elt * elt;\n   |                 ^^ no implementation\
    \ for `isize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    use std::cmp::Ordering;\n\
    \n    let mut i = 0;\n    let mut sum = 0;\n\n    while i < lst.len() {\n    \
    \    if lst[i] >= 0 && !(lst[i] % 2) {\n            sum += lst[i];\n         \
    \   i += 1;\n        } else {\n            // We've found a negative number or\
    \ an odd number, so drop it\n            // from the list and continue on.\n \
    \           i += 1;\n        }\n    }\n\n    if sum < 0 {\n        // The sum\
    \ of squares was less than 0, so double the value we found.\n        sum *= 2;\n\
    \    }\n\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp_907w0a_.rs:13:9\n\
    \   |\n13 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_907w0a_.rs:19:22\n   |\n19 |         if lst[i] >= 0 &&\
    \ !(lst[i] % 2) {\n   |                      ^\n   |                      |\n\
    \   |                      expected `f64`, found integer\n   |               \
    \       help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by\
    \ `{integer}`\n  --> /tmp/tmp_907w0a_.rs:19:36\n   |\n19 |         if lst[i] >=\
    \ 0 && !(lst[i] % 2) {\n   |                                    ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if lst[i] >= 0 && !(lst[i] % 2.0) {\n   |         \
    \                              ++\n\nerror[E0277]: cannot add-assign `f64` to\
    \ `{integer}`\n  --> /tmp/tmp_907w0a_.rs:20:17\n   |\n20 |             sum +=\
    \ lst[i];\n   |                 ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have\
    \ detail"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut squared_sum = Vec::with_capacity(lst.len());\n\
    \    for num in lst {\n        if num >= 0 {\n            squared_sum.push(num\
    \ * num);\n        }\n    }\n    squared_sum.iter().filter(|&x| x % 2 == 1).fold(0,\
    \ |acc, x| acc + x);\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjcanyh3m.rs:18:19\n   |\n\
    18 |         if num >= 0 {\n   |                   ^\n   |                   |\n\
    \   |                   expected `f64`, found integer\n   |                  \
    \ help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n\
    \  --> /tmp/tmpjcanyh3m.rs:22:38\n   |\n22 |     squared_sum.iter().filter(|&x|\
    \ x % 2 == 1).fold(0, |acc, x| acc + x);\n   |                               \
    \       ^ no implementation for `&f64 % {integer}`\n   |\n   = help: the trait\
    \ `Rem<{integer}>` is not implemented for `&f64`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: cannot add `&f64`\
    \ to `{integer}`\n  --> /tmp/tmpjcanyh3m.rs:22:69\n   |\n22 |     squared_sum.iter().filter(|&x|\
    \ x % 2 == 1).fold(0, |acc, x| acc + x);\n   |                               \
    \                                      ^ no implementation for `{integer} + &f64`\n\
    \   |\n   = help: the trait `Add<&f64>` is not implemented for `{integer}`\n \
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \  <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjcanyh3m.rs:12:44\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |    ---------------------                   ^^^^^\
    \ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as\
    \ its body has no tail or `return` expression\n...\n22 |     squared_sum.iter().filter(|&x|\
    \ x % 2 == 1).fold(0, |acc, x| a"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum_squares = 0.0;\n    let mut n\
    \ = 0.0;\n    let mut odd = 0.0;\n    for &x in lst {\n        if x > 0.0 {\n\
    \            n += 1.0;\n            if x % 2.0 != 0.0 {\n                sum_squares\
    \ += x * x;\n                odd += 1.0;\n            }\n        } else {\n  \
    \          odd = 0.0;\n        }\n    }\n\n    sum_squares -= n * n * (n - odd);\n\
    \    return sum_squares\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8cu_b8yi.rs:20:9\n   |\n\
    20 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8cu_b8yi.rs:33:12\n   |\n12 | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n33 |     return sum_squares\n   |            ^^^^^^^^^^^\
    \ expected `isize`, found floating-point number\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    let mut last_negative = false;\n    for v in lst {\n        let negative\
    \ = v <= 0;\n        if negative != last_negative {\n            sum += v * v;\n\
    \        }\n        last_negative = negative;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpne18zsfd.rs:16:29\n   |\n\
    16 |         let negative = v <= 0;\n   |                             ^\n   |\
    \                             |\n   |                             expected `f64`,\
    \ found integer\n   |                             help: use a float literal: `0.0`\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpne18zsfd.rs:18:17\n\
    \   |\n18 |             sum += v * v;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    let mut i = 0;\n    while i < lst.len() {\n        if lst[i] % 2 == 1 {\n\
    \            sum += lst[i++];\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpgj686xbd.rs:17:25\n\
    \   |\n17 |             sum += lst[i++];\n   |                         ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n17 |       \
    \      sum += lst[{ let tmp = i; i += 1; tmp }];\n   |                       \
    \ +++++++++++  ~~~~~~~~~~~~~~~\n17 -             sum += lst[i++];\n17 +      \
    \       sum += lst[i += 1];\n   | \n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpgj686xbd.rs:16:19\n   |\n16 |         if lst[i] % 2 == 1 {\n  \
    \ |                   ^ no implementation for `f64 % {integer}`\n   |\n   = help:\
    \ the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n16 |         if lst[i]\
    \ % 2.0 == 1 {\n   |                      ++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0\n    }\n\n    // Add up squares of numbers that are even\n\
    \    let evens: Vec<f64> = vec![0.0, ..lst.len()];\n    evens.iter().for_each(|n|\
    \ { evens.push(n*n) });\n\n    // Subtract up squares of numbers that are odd\n\
    \    let odds: Vec<f64> = vec![0.0,..lst.len()];\n    evens.iter().for_each(|n|\
    \ { odds.push(n*n - 1.0) });\n\n    odds.iter().sum::<f64>()\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83sm70nl.rs:18:37\n   |\n\
    18 |     let evens: Vec<f64> = vec![0.0, ..lst.len()];\n   |                 \
    \                    ^^^^^^^^^^^ expected `f64`, found struct `RangeTo`\n   |\n\
    \   = note: expected type `f64`\n            found struct `RangeTo<usize>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp83sm70nl.rs:22:35\n   |\n22 |  \
    \   let odds: Vec<f64> = vec![0.0,..lst.len()];\n   |                        \
    \           ^^^^^^^^^^^ expected `f64`, found struct `RangeTo`\n   |\n   = note:\
    \ expected type `f64`\n            found struct `RangeTo<usize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83sm70nl.rs:25:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n25 |     odds.iter().sum::<f64>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    double_the_difference_impl(lst,\
    \ 0, 0)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `double_the_difference_impl` in this\
    \ scope\n  --> /tmp/tmpx8m55gfa.rs:13:5\n   |\n13 |     double_the_difference_impl(lst,\
    \ 0, 0)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for &num in lst {\n        if num > 0 {\n            sum += num * num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4bib83pg.rs:14:9\n   |\n\
    14 |     for &num in lst {\n   |         ^^^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut s = 0.0;\n    for x in lst {\n    \
    \    if x < 0.0 || x > 1.0 {\n            return 0;\n        }\n        s += x\
    \ * x;\n    }\n    s\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwyi9s0yx.rs:23:5\n   |\n\
    12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    23 |     s\n   |     ^ expected `isize`, found `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&x| x.is_odd())\n        .map(|x| x * x)\n        .sum()\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmp1tki2eza.rs:14:24\n   |\n14 |         .filter(|&x|\
    \ x.is_odd())\n   |                        ^^^^^^ method not found in `&f64`\n\
    \nerror[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmp1tki2eza.rs:16:10\n\
    \     |\n16   |         .sum()\n     |          ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpz70lsyy8.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                             ^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n    --> /tmp/tmpz70lsyy8.rs:13:39\n     |\n13   |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n     |                                       ^^^\
    \ the trait `Sum<&f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0.0;\n    let mut idx = 0;\n    while idx < lst.len() {\n        let x = lst[idx];\n\
    \        if x >= 0 {\n            total += x;\n        }\n        idx += 1;\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpks4_g5tf.rs:17:17\n   |\n\
    17 |         if x >= 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `f64`, found integer\n   |                 help: use\
    \ a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpks4_g5tf.rs:22:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n22 |     total\n   |     ^^^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut odd_sum: isize = 0;\n    for (i, num)\
    \ in lst.iter().enumerate() {\n        if num % 2 == 0 {\n            odd_sum\
    \ += num;\n        }\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpsj797pij.rs:18:16\n\
    \   |\n18 |         if num % 2 == 0 {\n   |                ^ no implementation\
    \ for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `isize`\n  --> /tmp/tmpsj797pij.rs:19:21\n\
    \   |\n19 |             odd_sum += num;\n   |                     ^^ no implementation\
    \ for `isize += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0\n    }\n    let mut sum_of_squares = 0.0f64;\n    let\
    \ mut count = 0;\n    for n in lst.iter() {\n        if n % 2 == 1 {\n       \
    \     sum_of_squares += *n as f64 * n;\n            count += 1;\n        }\n \
    \   }\n    sum_of_squares -= sum_of_squares / (count as f64);\n    sum_of_squares\
    \ as isize\n}\n\nfn main() {\n    let candidate = double_the_difference;\n   \
    \ assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmphd_rr8ms.rs:19:14\n\
    \   |\n19 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut sq_sum = 0;\n\
    \    let mut n: usize = 0;\n    for el in lst {\n        if el > 0 {\n       \
    \     sum += el;\n            sq_sum += el * el;\n            n++;\n        }\n\
    \    }\n    if n == 0 {\n        return 0;\n    }\n    sum -= sq_sum;\n    sum\
    \ * sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpas8fhqq2.rs:23:14\n\
    \   |\n23 |             n++;\n   |              ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n23 |             { let tmp = n; n += 1;\
    \ tmp };\n   |             +++++++++++  ~~~~~~~~~~~~~~~\n23 -             n++;\n\
    23 +             n += 1;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas8fhqq2.rs:20:17\n\
    \   |\n20 |         if el > 0 {\n   |                 ^\n   |                \
    \ |\n   |                 expected `f64`, found integer\n   |                \
    \ help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to\
    \ `{integer}`\n  --> /tmp/tmpas8fhqq2.rs:21:17\n   |\n21 |             sum +=\
    \ el;\n   |                 ^^ no implementation for `{integer} += f64`\n   |\n\
    \   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpas8fhqq2.rs:22:20\n\
    \   |\n22 |             sq_sum += el * el;\n   |                    ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst\n        .iter()\n\
    \        .filter(|n| n.is_odd())\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmps5el61y7.rs:15:23\n   |\n15 |         .filter(|n|\
    \ n.is_odd())\n   |                       ^^^^^^ method not found in `&&f64`\n\
    \nerror[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmps5el61y7.rs:16:10\n\
    \     |\n16   |         .sum()\n     |          ^^^ the trait `Sum<&f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n\n    for x in lst {\n        if x % 2 == 1 {\n            total += x;\n\
    \        }\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmppjicby95.rs:16:14\n\
    \   |\n16 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmppjicby95.rs:17:19\n  \
    \ |\n17 |             total += x;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    debug_assert!(!lst.is_empty());\n\
    \    if lst.iter().any(|&x| x.is_negative() || x.is_integer()) {\n        0\n\
    \    } else {\n        &lst.iter().filter(|&x| x.is_odd()).sum::<isize>()\n  \
    \  }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmp06cw_iyb.rs:14:30\n   |\n14 |   \
    \  if lst.iter().any(|&x| x.is_negative() || x.is_integer()) {\n   |         \
    \                     ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by\
    \ default\n\nerror[E0599]: no method named `is_integer` found for type `f64` in\
    \ the current scope\n  --> /tmp/tmp06cw_iyb.rs:14:49\n   |\n14 |     if lst.iter().any(|&x|\
    \ x.is_negative() || x.is_integer()) {\n   |                                 \
    \                ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_odd` found for reference `&f64` in the current scope\n  --> /tmp/tmp06cw_iyb.rs:17:35\n\
    \   |\n17 |         &lst.iter().filter(|&x| x.is_odd()).sum::<isize>()\n   | \
    \                                  ^^^^^^ method not found in `&f64`\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmp06cw_iyb.rs:17:45\n\
    \     |\n17   |         &lst.iter().filter(|&x| x.is_odd()).sum::<isize>()\n \
    \    |                                             ^^^ the trait `Sum<&f64>` is\
    \ not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp06cw_iyb.rs:17:9\n   |\n12 | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n17\
    \ |         &lst.iter().filter(|&x| x.is_odd()).sum::<isize>()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n17 -         &lst.iter().filter(|&x| x.is_odd()).sum::<isiz"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for &value in &lst\
    \ {\n        if value < 0 {\n            continue;\n        }\n\n        sum +=\
    \ value * value;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8z51_l4d.rs:19:20\n   |\n\
    19 |         if value < 0 {\n   |                    ^\n   |                 \
    \   |\n   |                    expected `f64`, found integer\n   |           \
    \         help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmp8z51_l4d.rs:23:13\n   |\n23 |         sum\
    \ += value * value;\n   |             ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() < 2\
    \ {\n        return 0;\n    }\n    let mut sum: f64 = lst[0];\n    for i in lst.iter().skip(1)\
    \ {\n        if i % 2 == 1 {\n            sum += *i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpvmlrm3rt.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvmlrm3rt.rs:22:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n22 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|&x| x < 0.0)\n        .count() \n        + lst.iter()\n       \
    \     .filter(|&x| x < 0.0)\n            .filter(|&x| x.is_integer() == false)\n\
    \            .count()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpph1y97w9.rs:14:26\n   |\n\
    14 |         .filter(|&x| x < 0.0)\n   |                          ^^^\n   |  \
    \                        |\n   |                          expected `&f64`, found\
    \ floating-point number\n   |                          help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpph1y97w9.rs:17:30\n\
    \   |\n17 |             .filter(|&x| x < 0.0)\n   |                          \
    \    ^^^\n   |                              |\n   |                          \
    \    expected `&f64`, found floating-point number\n   |                      \
    \        help: consider borrowing here: `&0.0`\n\nerror[E0599]: no method named\
    \ `is_integer` found for reference `&f64` in the current scope\n  --> /tmp/tmpph1y97w9.rs:18:28\n\
    \   |\n18 |             .filter(|&x| x.is_integer() == false)\n   |          \
    \                  ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpph1y97w9.rs:13:5\n   |\n12 |   fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                              -----\
    \ expected `isize` because of return type\n13 | /     lst.iter()\n14 | |     \
    \    .filter(|&x| x < 0.0)\n15 | |         .count() \n16 | |         + lst.iter()\n\
    17 | |             .filter(|&x| x < 0.0)\n18 | |             .filter(|&x| x.is_integer()\
    \ == false)\n19 | |             .count()\n   | |____________________^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n13 ~     (lst.iter()\n14\
    \ |         .filter(|&x| x < 0.0)\n15 |         .count() \n16 |         + lst.iter()\n\
    17 |             .filter(|&x| x < 0.0)\n18 |             .filter(|&x| x.is_integer()\
    \ == false)\n ...\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    double_the_difference(&lst,\
    \ 0)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \  --> /tmp/tmp5shj3xe0.rs:13:5\n   |\n13 |     double_the_difference(&lst, 0)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^ ----  - supplied 2 arguments\n   |     |\n   |\
    \     expected 1 argument\n   |\nnote: function defined here\n  --> /tmp/tmp5shj3xe0.rs:12:4\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |    ^^^^^^^^^^^^^^^^^^^^^\
    \ -------------\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().enumerate().filter(|(_,\
    \ x)| x % 2 == 1).map(|(i, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmp451i5z_o.rs:13:46\n\
    \   |\n13 |     lst.iter().enumerate().filter(|(_, x)| x % 2 == 1).map(|(i, x)|\
    \ x).sum()\n   |                                            - ^ - {integer}\n\
    \   |                                            |\n   |                     \
    \                       &&f64\n\nerror[E0277]: the trait bound `isize: Sum<&f64>`\
    \ is not satisfied\n    --> /tmp/tmp451i5z_o.rs:13:72\n     |\n13   |     lst.iter().enumerate().filter(|(_,\
    \ x)| x % 2 == 1).map(|(i, x)| x).sum()\n     |                              \
    \                                          ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let len = lst.len();\n\
    \    if len == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for &n\
    \ in lst {\n        if n % 2 == 1 {\n            sum += n;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz1_247sf.rs:18:9\n   |\n\
    18 |     for &n in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|n|\
    \ n.is_integer()).map(|n| n * n).sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpwjjdm12b.rs:13:29\n   |\n13 |     lst.iter().filter(|n|\
    \ n.is_integer()).map(|n| n * n).sum::<isize>()\n   |                        \
    \     ^^^^^^^^^^ method not found in `&&f64`\n\nerror[E0277]: the trait bound\
    \ `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpwjjdm12b.rs:13:58\n    \
    \ |\n13   |     lst.iter().filter(|n| n.is_integer()).map(|n| n * n).sum::<isize>()\n\
    \     |                                                          ^^^ the trait\
    \ `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for v in lst {\n        if v > 0.0 {\n            sum += v * v;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpq0oaf28w.rs:16:17\n\
    \   |\n16 |             sum += v * v;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst.len()\
    \ {\n        0 => 0,\n        _ => lst.iter().filter(|x| x > 0).sum::<f64>() -\
    \ (lst.iter().filter(|x| x > 0).count() as f64).sqrt(),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpotqa0jrk.rs:15:40\n   |\n\
    15 |         _ => lst.iter().filter(|x| x > 0).sum::<f64>() - (lst.iter().filter(|x|\
    \ x > 0).count() as f64).sqrt(),\n   |                                       \
    \ ^ expected `&&f64`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpotqa0jrk.rs:15:85\n\
    \   |\n15 |         _ => lst.iter().filter(|x| x > 0).sum::<f64>() - (lst.iter().filter(|x|\
    \ x > 0).count() as f64).sqrt(),\n   |                                       \
    \                                              ^ expected `&&f64`, found integer\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpotqa0jrk.rs:15:14\n\
    \   |\n13 | /     match lst.len() {\n14 | |         0 => 0,\n   | |          \
    \    - this is found to be of type `isize`\n15 | |         _ => lst.iter().filter(|x|\
    \ x > 0).sum::<f64>() - (lst.iter().filter(|x| x > 0).count() as f64).sqrt(),\n\
    \   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n16 | |     }\n   | |_____- `match` arms have\
    \ incompatible types\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter()\n   \
    \     .filter(|x| x.is_integer())\n        .filter(|x| !x.is_positive())\n   \
    \     .filter(|x| !x.is_odd())\n        .fold(0, |a, x| a * x)\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpokydd3dn.rs:14:23\n   |\n14 |         .filter(|x|\
    \ x.is_integer())\n   |                       ^^^^^^^^^^ method not found in `&&f64`\n\
    \nwarning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmpokydd3dn.rs:15:24\n   |\n15 |   \
    \      .filter(|x| !x.is_positive())\n   |                        ^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0599]: no method\
    \ named `is_odd` found for reference `&&f64` in the current scope\n  --> /tmp/tmpokydd3dn.rs:16:24\n\
    \   |\n16 |         .filter(|x| !x.is_odd())\n   |                        ^^^^^^\
    \ method not found in `&&f64`\n\nerror[E0277]: cannot multiply `isize` by `&f64`\n\
    \  --> /tmp/tmpokydd3dn.rs:17:27\n   |\n17 |         .fold(0, |a, x| a * x)\n\
    \   |                           ^ no implementation for `isize * &f64`\n   |\n\
    \   = help: the trait `Mul<&f64>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due\
    \ to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&x|\
    \ x > 0\n                       && !x.is_integer())\n        .map(|x| x * x).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgeyl7fw_.rs:13:32\n   |\n\
    13 |     lst.iter().filter(|&x| x > 0\n   |                                ^ expected\
    \ `&f64`, found integer\n\nerror[E0599]: no method named `is_integer` found for\
    \ reference `&f64` in the current scope\n  --> /tmp/tmpgeyl7fw_.rs:14:30\n   |\n\
    14 |                        && !x.is_integer())\n   |                        \
    \      ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0277]: the trait bound\
    \ `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpgeyl7fw_.rs:15:25\n    \
    \ |\n15   |         .map(|x| x * x).sum::<isize>()\n     |                   \
    \      ^^^ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     =\
    \ help: the following other types implement trait `Sum<A>`:\n               <f32\
    \ as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match lst.len()\
    \ {\n        0 => 0,\n        1 => lst[0] as isize,\n        _ => lst\n      \
    \      .iter()\n            .filter(|&x| x.is_positive())\n            .filter(|&x|\
    \ x.is_integer())\n            .filter(|&x| x.is_odd())\n            .map(|x|\
    \ x * x)\n            .sum()\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmp7mwtk_i4.rs:18:28\n   |\n18 |   \
    \          .filter(|&x| x.is_positive())\n   |                            ^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0599]: no method\
    \ named `is_integer` found for reference `&f64` in the current scope\n  --> /tmp/tmp7mwtk_i4.rs:19:28\n\
    \   |\n19 |             .filter(|&x| x.is_integer())\n   |                   \
    \         ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named\
    \ `is_odd` found for reference `&f64` in the current scope\n  --> /tmp/tmp7mwtk_i4.rs:20:28\n\
    \   |\n20 |             .filter(|&x| x.is_odd())\n   |                       \
    \     ^^^^^^ method not found in `&f64`\n\nerror[E0277]: the trait bound `isize:\
    \ Sum<f64>` is not satisfied\n    --> /tmp/tmp7mwtk_i4.rs:22:14\n     |\n22  \
    \ |             .sum()\n     |              ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \n    for x in lst {\n        sum = sum + x;\n        if x % 2 != 0 {\n      \
    \      continue;\n        }\n        sum += x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `f64` to `{integer}`\n  --> /tmp/tmpyof3ygbc.rs:16:19\n\
    \   |\n16 |         sum = sum + x;\n   |                   ^ no implementation\
    \ for `{integer} + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpyof3ygbc.rs:17:14\n\
    \   |\n17 |         if x % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n17 |         if x % 2.0 != 0 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpyof3ygbc.rs:20:13\n  \
    \ |\n20 |         sum += x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFo"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut total =\
    \ 0;\n    for num in lst {\n        total += num * num;\n        if num % 2 !=\
    \ 0 {\n            total -= num;\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp65arc1q0.rs:15:15\n\
    \   |\n15 |         total += num * num;\n   |               ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp65arc1q0.rs:16:16\n\
    \   |\n16 |         if num % 2 != 0 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |         if num % 2.0 != 0 {\n   |                   ++\n\n\
    error[E0277]: cannot subtract-assign `f64` from `{integer}`\n  --> /tmp/tmp65arc1q0.rs:17:19\n\
    \   |\n17 |             total -= num;\n   |                   ^^ no implementation\
    \ for `{integer} -= f64`\n   |\n   = help: the trait `SubAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 ot"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num.is_zero() {\n            return 0;\n        }\n        if num.is_odd()\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpwbevtm7z.rs:18:16\n   |\n18 |         if num.is_zero()\
    \ {\n   |                ^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_odd` found for type `f64` in the current scope\n  --> /tmp/tmpwbevtm7z.rs:21:16\n\
    \   |\n21 |         if num.is_odd() {\n   |                ^^^^^^ method not found\
    \ in `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpwbevtm7z.rs:22:17\n\
    \   |\n22 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    fn is_odd(n: f64)\
    \ -> bool {\n        n % 2 > 0\n    }\n\n    let mut sum = 0;\n    for n in lst\
    \ {\n        if is_odd(n) {\n            sum += n * n;\n        }\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpexianylq.rs:20:17\n\
    \   |\n20 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpexianylq.rs:14:11\n\
    \   |\n14 |         n % 2 > 0\n   |           ^ no implementation for `f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n14 |         n\
    \ % 2.0 > 0\n   |              ++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 && !num.is_integer() {\n           \
    \ sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpabepvd_j.rs:15:18\n   |\n\
    15 |         if num > 0 && !num.is_integer() {\n   |                  ^\n   |\
    \                  |\n   |                  expected `f64`, found integer\n  \
    \ |                  help: use a float literal: `0.0`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpabepvd_j.rs:15:28\n\
    \   |\n15 |         if num > 0 && !num.is_integer() {\n   |                  \
    \          ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmpabepvd_j.rs:16:17\n   |\n16 |          \
    \   sum += num;\n   |                 ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match (lst.iter().filter(|&x|\
    \ x > 0).count(), lst.iter().filter(|&x| x < 0).count()) {\n        (Some(0),\
    \ Some(0)) => 0,\n        (Some(1), Some(0)) => 1,\n        (Some(0), Some(1))\
    \ => 1,\n        (Some(1), Some(1)) => 1,\n        (None, _) => 0,\n        (Some(1),\
    \ None) => 1,\n        (Some(_), Some(_)) => 1,\n        (Some(_), None) => 1,\n\
    \        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphsh55uk_.rs:13:39\n   |\n\
    13 |     match (lst.iter().filter(|&x| x > 0).count(), lst.iter().filter(|&x|\
    \ x < 0).count()) {\n   |                                       ^ expected `&f64`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphsh55uk_.rs:13:78\n\
    \   |\n13 |     match (lst.iter().filter(|&x| x > 0).count(), lst.iter().filter(|&x|\
    \ x < 0).count()) {\n   |                                                    \
    \                          ^ expected `&f64`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphsh55uk_.rs:14:10\n   |\n13 |     match (lst.iter().filter(|&x|\
    \ x > 0).count(), lst.iter().filter(|&x| x < 0).count()) {\n   |           ------------------------------------------------------------------------------\
    \ this expression has type `(usize, usize)`\n14 |         (Some(0), Some(0)) =>\
    \ 0,\n   |          ^^^^^^^ expected `usize`, found enum `Option`\n   |\n   =\
    \ note: expected type `usize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphsh55uk_.rs:14:19\n   |\n13 |     match (lst.iter().filter(|&x|\
    \ x > 0).count(), lst.iter().filter(|&x| x < 0).count()) {\n   |           ------------------------------------------------------------------------------\
    \ this expression has type `(usize, usize)`\n14 |         (Some(0), Some(0)) =>\
    \ 0,\n   |                   ^^^^^^^ expected `usize`, found enum `Option`\n \
    \  |\n   = note: expected type `usize`\n              found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphsh55uk_.rs:15:10\n   |\n13 |\
    \     match (lst.iter().filter(|&x| x > 0).count(), lst.iter().filter(|&x| x <\
    \ 0).count()) {\n   |           ------------------------------------------------------------------------------\
    \ this expression has type `(usize, usize)`\n14 |         (Some(0), Some(0)) =>\
    \ 0,\n15 |         (Some(1), Some(0)) => 1,\n   |          ^^^^^^^ expected `usize`,\
    \ found enum `Option`\n   |\n   = note: expected type `usize`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphsh55uk_.rs:1"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n\n    let mut squared = lst.iter().map(|x| x\
    \ * x).sum();\n    squared -= lst.iter().filter(|x| x.is_odd()).count();\n   \
    \ squared += lst.iter().filter(|x| x.is_negative()).count();\n    squared += lst.iter().filter(|x|\
    \ x.is_integer()).count();\n    squared += lst.iter().filter(|x| !x.is_integer()).count();\n\
    \n    squared.into()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpz9x873e6.rs:18:40\n   |\n18 |     squared -= lst.iter().filter(|x|\
    \ x.is_odd()).count();\n   |                                        ^^^^^^ method\
    \ not found in `&&f64`\n\nwarning: use of deprecated associated function `core::f64::<impl\
    \ f64>::is_negative`: renamed to is_sign_negative\n  --> /tmp/tmpz9x873e6.rs:19:40\n\
    \   |\n19 |     squared += lst.iter().filter(|x| x.is_negative()).count();\n \
    \  |                                        ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0599]: no method named `is_integer` found for reference\
    \ `&&f64` in the current scope\n  --> /tmp/tmpz9x873e6.rs:20:40\n   |\n20 |  \
    \   squared += lst.iter().filter(|x| x.is_integer()).count();\n   |          \
    \                              ^^^^^^^^^^ method not found in `&&f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for reference `&&f64` in the current scope\n\
    \  --> /tmp/tmpz9x873e6.rs:21:41\n   |\n21 |     squared += lst.iter().filter(|x|\
    \ !x.is_integer()).count();\n   |                                         ^^^^^^^^^^\
    \ method not found in `&&f64`\n\nerror: aborting due to 3 previous errors; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \    let mut i = 0;\n    for _ in lst {\n        if i >= lst.len() {\n       \
    \     break;\n        }\n        sum += *lst[i];\n        i += 1;\n    }\n   \
    \ sum * sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n  \
    \  assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmp1fhap1_y.rs:19:16\n\
    \   |\n19 |         sum += *lst[i];\n   |                ^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fhap1_y.rs:22:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n22 |     sum * sum\n   |     ^^^^^^^^^\
    \ expected `isize`, found floating-point number\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut tot = 0;\n\
    \    for elt in lst {\n        if elt > 0 {\n            tot += elt as f64;\n\
    \        }\n    }\n    if tot > 0.0 {\n        tot as isize\n    } else {\n  \
    \      0\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4cgmwi6d.rs:15:18\n   |\n\
    15 |         if elt > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp4cgmwi6d.rs:16:17\n   |\n16 |             tot += elt as f64;\n\
    \   |                 ^^ no implementation for `{integer} += f64`\n   |\n   =\
    \ help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: can't compare\
    \ `{integer}` with `{float}`\n  --> /tmp/tmp4cgmwi6d.rs:19:12\n   |\n19 |    \
    \ if tot > 0.0 {\n   |            ^ no implementation for `{integer} < {float}`\
    \ and `{integer} > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4cgmwi6d.rs:19:14\n   |\n19 |     if tot > 0.0 {\n   |             \
    \ ^^^ expected integer, found floating-point number\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut even = 0;\n    let mut odd = 1;\n \
    \   for num in lst {\n        if num % 2 == 0 {\n            even += num;\n  \
    \      } else {\n            odd *= num;\n        }\n    }\n    even + odd\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp2btogazb.rs:19:16\n\
    \   |\n19 |         if num % 2 == 0 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if num % 2.0 == 0 {\n   |                   ++\n\n\
    error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp2btogazb.rs:20:18\n\
    \   |\n20 |             even += num;\n   |                  ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot multiply-assign `{integer}` by `f64`\n  -->\
    \ /tmp/tmp2btogazb.rs:22:17\n   |\n22 |             odd *= num;\n   |        \
    \         ^^ no implementation for `{integer} *= f64`\n   |\n   = help: the trait\
    \ `MulAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `MulAssign<Rhs>`:\n             <f32 as MulAssign<&f32>>\n\
    \             <f32 as MulAssign>\n             <f64 as MulAssign<&f64>>\n    \
    \         <f64 as MulAssign>\n             <i128 as MulAssign<&i128>>\n      \
    \       <i128 as MulAssign>\n             <i16 as MulAssign<&i16>>\n         \
    \    <i16 as MulAssign>\n           and 20 others\n\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    use std::mem::replace;\n\
    \    let sum = vec![].iter().map(|x| x * x).sum();\n    let mut squared = vec![];\n\
    \    for n in lst {\n        if n >= 0 && n != sum && n != (n * n) {\n       \
    \     squared.push(n * n);\n        }\n    }\n    squared.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::mem::replace`\n  --> /tmp/tmp_77ks4xs.rs:13:9\n\
    \   |\n13 |     use std::mem::replace;\n   |         ^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_77ks4xs.rs:17:17\n   |\n17 |         if n >= 0 && n !=\
    \ sum && n != (n * n) {\n   |                 ^\n   |                 |\n   |\
    \                 expected `f64`, found integer\n   |                 help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is\
    \ not satisfied\n    --> /tmp/tmp_77ks4xs.rs:21:20\n     |\n21   |     squared.iter().sum::<isize>()\n\
    \     |                    ^^^ the trait `Sum<&f64>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    let mut i = 0;\n\n    for v in lst {\n        if v.is_odd() {\n         \
    \   sum += v;\n        } else {\n            if sum > 0 {\n                sum\
    \ -= v;\n            } else {\n                sum += v;\n            }\n    \
    \    }\n        i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp_6ikaatu.rs:17:14\n   |\n17 |         if v.is_odd() {\n\
    \   |              ^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmp_6ikaatu.rs:18:17\n   |\n18 |          \
    \   sum += v;\n   |                 ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot subtract-assign `f64` from `{integer}`\n  --> /tmp/tmp_6ikaatu.rs:21:21\n\
    \   |\n21 |                 sum -= v;\n   |                     ^^ no implementation\
    \ for `{integer} -= f64`\n   |\n   = help: the trait `SubAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp_6ikaatu.rs:23:21\n\
    \   |\n23 |                 sum += v;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n  "
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x > 0).filter(|x| x > 0).count().map(|x| x * x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx106ln1l.rs:13:31\n   |\n\
    13 |     lst.iter().filter(|x| x > 0).filter(|x| x > 0).count().map(|x| x * x).sum()\n\
    \   |                               ^ expected `&&f64`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx106ln1l.rs:13:49\n   |\n13 |     lst.iter().filter(|x|\
    \ x > 0).filter(|x| x > 0).count().map(|x| x * x).sum()\n   |                \
    \                                 ^ expected `&&f64`, found integer\n\nerror[E0599]:\
    \ `usize` is not an iterator\n  --> /tmp/tmpx106ln1l.rs:13:60\n   |\n13 |    \
    \ lst.iter().filter(|x| x > 0).filter(|x| x > 0).count().map(|x| x * x).sum()\n\
    \   |                                                            ^^^ `usize` is\
    \ not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `usize: Iterator`\n           which is required by `&mut usize: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    match (lst.len()\
    \ as u32, lst.into_iter().filter(|&x| x.is_odd()).count()) {\n        (1..=32,\
    \ _) => 0,\n        (_, ..) => lst.iter().sum(),\n    }\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpeoklha_o.rs:13:60\n   |\n13 |     match (lst.len() as u32,\
    \ lst.into_iter().filter(|&x| x.is_odd()).count()) {\n   |                   \
    \                                         ^^^^^^ method not found in `f64`\n\n\
    error[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmpeoklha_o.rs:15:31\n\
    \     |\n15   |         (_, ..) => lst.iter().sum(),\n     |                 \
    \              ^^^ the trait `Sum<&f64>` is not implemented for `isize`\n    \
    \ |\n     = help: the following other types implement trait `Sum<A>`:\n      \
    \         <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter_map(|&x|\
    \ x != 0).sum::<isize>() / 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi07yoss3.rs:13:37\n   |\n\
    13 |     lst.iter().filter_map(|&x| x != 0).sum::<isize>() / 2\n   |         \
    \                            ^\n   |                                     |\n \
    \  |                                     expected `f64`, found integer\n   | \
    \                                    help: use a float literal: `0.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi07yoss3.rs:13:32\n   |\n13 |     lst.iter().filter_map(|&x|\
    \ x != 0).sum::<isize>() / 2\n   |                                ^^^^^^ expected\
    \ enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n  \
    \            found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     lst.iter().filter_map(|&x| Some(x != 0)).sum::<isize>() / 2\n\
    \   |                                +++++      +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst\n        .iter()\n\
    \        .filter(|x| x.is_integer() && x.is_odd())\n        .map(|x| x * x)\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpr31m8obf.rs:15:23\n   |\n15 |         .filter(|x|\
    \ x.is_integer() && x.is_odd())\n   |                       ^^^^^^^^^^ method\
    \ not found in `&&f64`\n\nerror[E0599]: no method named `is_odd` found for reference\
    \ `&&f64` in the current scope\n  --> /tmp/tmpr31m8obf.rs:15:41\n   |\n15 |  \
    \       .filter(|x| x.is_integer() && x.is_odd())\n   |                      \
    \                   ^^^^^^ method not found in `&&f64`\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpr31m8obf.rs:17:10\n\
    \     |\n17   |         .sum()\n     |          ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut ret = 0;\n\
    \    for (i, val) in lst.iter().enumerate() {\n        if i % 2 == 1 {\n     \
    \       ret += val * val;\n        }\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmps56x_vaq.rs:16:17\n\
    \   |\n16 |             ret += val * val;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut squared_sum\
    \ = 0.0;\n    for x in lst.iter() {\n        if x % 2 == 1 {\n            squared_sum\
    \ += *x;\n        }\n    }\n    squared_sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp1pjzj7u7.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1pjzj7u7.rs:19:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n19 |     squared_sum\n   |     ^^^^^^^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.len() ==\
    \ 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 1 {\n            sum += i * i;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpfxc6__yi.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfxc6__yi.rs:19:17\n\
    \   |\n19 |             sum += i * i;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for i in lst {\n  \
    \      if !(i == -2 || i > -2) {\n            sum += i * i;\n        }\n    }\n\
    \    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0wud20zp.rs:19:19\n   |\n\
    19 |         if !(i == -2 || i > -2) {\n   |                   ^^\n   |      \
    \             |\n   |                   expected `f64`, found integer\n   |  \
    \                 help: use a float literal: `-2.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0wud20zp.rs:19:29\n   |\n19 |         if !(i == -2 || i\
    \ > -2) {\n   |                             ^^\n   |                         \
    \    |\n   |                             expected `f64`, found integer\n   | \
    \                            help: use a float literal: `-2.0`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp0wud20zp.rs:20:17\n  \
    \ |\n20 |             sum += i * i;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.;\n\
    \    for v in lst {\n        if v < 0 {\n            return 0;\n        }\n  \
    \      if v % 2 == 1 {\n            sum += v as i64;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyc2s6swd.rs:15:16\n   |\n\
    15 |         if v < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `f64`, found integer\n   |                help: use a\
    \ float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  -->\
    \ /tmp/tmpyc2s6swd.rs:18:14\n   |\n18 |         if v % 2 == 1 {\n   |        \
    \      ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n18 |         if v % 2.0 == 1 {\n   |                 ++\n\
    \nerror[E0277]: cannot add-assign `i64` to `{float}`\n  --> /tmp/tmpyc2s6swd.rs:19:17\n\
    \   |\n19 |             sum += v as i64;\n   |                 ^^ no implementation\
    \ for `{float} += i64`\n   |\n   = help: the trait `AddAssign<i64>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyc2s6swd.rs:22:5\n\
    \   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n22 |     sum\n   |     ^^^ expected `isize`, found floating-point number\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about a"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_positive() {\n            sum += x;\n   \
    \     } else if x.is_integer() {\n            sum += *x;\n        }\n    }\n \
    \   return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmplble4l37.rs:15:14\n   |\n15 |   \
    \      if x.is_positive() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmplble4l37.rs:17:21\n   |\n17 |         }\
    \ else if x.is_integer() {\n   |                     ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmplble4l37.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmplble4l37.rs:18:20\n\
    \   |\n18 |             sum += *x;\n   |                    ^^\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0599, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0.0;\n\
    \n    for i in lst.iter() {\n        sum += i.sqrt();\n        if i <= 0.0 {\n\
    \            continue;\n        }\n\n        if i % 2 == 1 {\n            sum\
    \ += i;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoaf5o40w.rs:17:17\n   |\n\
    17 |         if i <= 0.0 {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&f64`, found floating-point number\n   |     \
    \            help: consider borrowing here: `&0.0`\n\nerror[E0277]: cannot mod\
    \ `&f64` by `{integer}`\n  --> /tmp/tmpoaf5o40w.rs:21:14\n   |\n21 |         if\
    \ i % 2 == 1 {\n   |              ^ no implementation for `&f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `&f64`\n \
    \  = help: the following other types implement trait `Rem<Rhs>`:\n           \
    \  <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoaf5o40w.rs:26:5\n   |\n12 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n26 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978031
