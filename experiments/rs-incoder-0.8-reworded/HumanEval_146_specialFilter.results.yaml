language: rs
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for &n in nums {\n        if n >= 10 {\n          \
    \  if n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9\
    \ {\n                if n == (n % 10).checked_mul(10).unwrap() {\n           \
    \         if n % 2 == 1 {\n                        cnt += 1;\n               \
    \     }\n                }\n            }\n        }\n    }\n    cnt\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqvymgqm8.rs:11:9\n   |\n\
    11 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n    let mut num: isize =\
    \ nums[0];\n    for i in 1..=nums.len() {\n        if num % 2 == 1 && num % 100\
    \ == 1 && num % 100 == 0 {\n            return i;\n        }\n        num = num\
    \ / 2;\n    }\n    num\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0cj9q5fg.rs:16:20\n   |\n\
    16 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n16 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut c = 0;\n    while i < nums.len()\
    \ {\n        while j < nums.len() && nums[i] > 10 {\n            i += 1;\n   \
    \         j += 1;\n        }\n        if j < nums.len() && nums[i] % 2 != 0 &&\
    \ nums[i] > 10 {\n            c += 1;\n        }\n        i += 1;\n        j =\
    \ 0;\n    }\n    c\n}\n\nfn main() {\n    let candidate = specialFilter;\n   \
    \ assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9dleqmoq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    \n    let mut count: isize = 0;\n    for n in nums {\n        match n.checked_mul(10)\
    \ {\n            Some(v) => match v.checked_mul(10) {\n                Some(v)\
    \ => if v%2 == 0 && v.checked_and(v.checked_add(1).unwrap().unwrap())%2 == 1 {\n\
    \                    count = count+1;\n                }\n                _ =>\
    \ {}\n            },\n            None => {}\n        }\n    }\n    \n    return\
    \ count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_and` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpsrnd6gjt.rs:15:45\n   |\n15 |                 Some(v)\
    \ => if v%2 == 0 && v.checked_and(v.checked_add(1).unwrap().unwrap())%2 == 1 {\n\
    \   |                                             ^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `checked_add`\n\nerror[E0599]: no method\
    \ named `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmpsrnd6gjt.rs:15:83\n\
    \   |\n15 |                 Some(v) => if v%2 == 0 && v.checked_and(v.checked_add(1).unwrap().unwrap())%2\
    \ == 1 {\n   |                                                               \
    \                    ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    \n    let mut count = nums.iter().filter(|n| { n % 10 > 0 }).filter(|n| {\n\
    \        n % 10 == 0 &&\n        n % 2 == 0 &&\n        n % 1 == 0 \n    }).count();\n\
    \n    for n in nums {\n        if n % 10 > 0 {\n            count += 1;\n    \
    \    }\n\n        if n % 10 == 2 && n % 1 == 0 {\n            count += 1;\n  \
    \      }\n\n        if n % 10 == 1 && n % 1 == 1 {\n            count += 1;\n\
    \        }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpnrffv93r.rs:11:48\n\
    \   |\n11 |     let mut count = nums.iter().filter(|n| { n % 10 > 0 }).filter(|n|\
    \ {\n   |                                              - ^ -- {integer}\n   |\
    \                                              |\n   |                       \
    \                       &&isize\n   |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `n`\n   |\n11 |     let mut count = nums.iter().filter(|n| { *n\
    \ % 10 > 0 }).filter(|n| {\n   |                                             \
    \ +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpnrffv93r.rs:12:11\n\
    \   |\n12 |         n % 10 == 0 &&\n   |         - ^ -- {integer}\n   |      \
    \   |\n   |         &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `n`\n   |\n12 |         *n % 10 == 0 &&\n   |         +\n\nerror[E0369]: cannot\
    \ mod `&&isize` by `{integer}`\n  --> /tmp/tmpnrffv93r.rs:13:11\n   |\n13 |  \
    \       n % 2 == 0 &&\n   |         - ^ - {integer}\n   |         |\n   |    \
    \     &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n\
    \   |\n13 |         *n % 2 == 0 &&\n   |         +\n\nerror[E0369]: cannot mod\
    \ `&&isize` by `{integer}`\n  --> /tmp/tmpnrffv93r.rs:14:11\n   |\n14 |      \
    \   n % 1 == 0 \n   |         - ^ - {integer}\n   |         |\n   |         &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n   |\n14 | \
    \        *n % 1 == 0 \n   |         +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnrffv93r.rs:31:5\n   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize\
    \ {\n   |                                       ----- expected `isize` because\
    \ of return type\n...\n31 |     count\n   |     ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n31 |     count.try_into().unwrap()\n   |\
    \          ++++++++++++++++++++\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    // Write a function that takes a vector of numbers as input and returns \n\
    \    // the number of elements in the vector that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\n    //\
    \ Solution here\n    // FILL IN HERE\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8csmyi_n.rs:9:39\n  |\n9 |\
    \ fn specialFilter(nums: Vec<isize>) -> isize {\n  |    -------------        \
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10).filter(|x| x % 2 == 1 && x % 3 == 0).count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoci9s322.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10).filter(|x| x % 2 == 1 && x % 3 == 0).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpoci9s322.rs:10:49\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10).filter(|x| x % 2 == 1 && x % 3\
    \ == 0).count()\n   |                                               - ^ - {integer}\n\
    \   |                                               |\n   |                  \
    \                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n10 |     nums.iter().filter(|x| x > 10).filter(|x|\
    \ *x % 2 == 1 && x % 3 == 0).count()\n   |                                   \
    \            +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpoci9s322.rs:10:63\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10).filter(|x| x % 2 == 1 && x % 3\
    \ == 0).count()\n   |                                                        \
    \     - ^ - {integer}\n   |                                                  \
    \           |\n   |                                                          \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10).filter(|x| x % 2 == 1 && *x % 3\
    \ == 0).count()\n   |                                                        \
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoci9s322.rs:10:5\n  \
    \ |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                \
    \                       ----- expected `isize` because of return type\n10 |  \
    \   nums.iter().filter(|x| x > 10).filter(|x| x % 2 == 1 && x % 3 == 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10).filter(|x| x % 2 == 1 && x % 3 == 0).count().try_into().unwrap()\n \
    \  |                            "
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum: isize = 0;\n    for i in nums.iter() {\n        match i {\n\
    \            0 => continue,\n            _ => sum += i / 2,\n        };\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmpbn09btsl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&i| i >= 10 && i % 2 != 0).count()\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx94oqm6u.rs:10:34\n   |\n\
    10 |     nums.iter().filter(|&i| i >= 10 && i % 2 != 0).count()\n   |        \
    \                          ^^\n   |                                  |\n   | \
    \                                 expected `&isize`, found integer\n   |     \
    \                             help: consider borrowing here: `&10`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx94oqm6u.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|&i| i >= 10 &&\
    \ i % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&i|\
    \ i >= 10 && i % 2 != 0).count().try_into().unwrap()\n   |                   \
    \                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut counter = 0usize;\n    for i in nums {\n        let num = (i / 10)\
    \ as isize;\n        counter += if num % 2 == 1 && num % 3 == 1 && num % 5 ==\
    \ 1 && num % 7 == 1 && num % 9 == 1 { 1 } else { 0 };\n    }\n    counter\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpunz3hp4g.rs:15:5\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n...\n15 |  \
    \   counter\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     counter.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|n| n > 10).count(|n| n % 2 == 1 && n % 3 == 1).count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsso31_zc.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|n| n > 10).count(|n| n % 2 == 1 && n % 3 == 1).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0061]: this function takes 0 arguments but 1 argument was supplied\n  \
    \ --> /tmp/tmpsso31_zc.rs:10:36\n    |\n10  |     nums.iter().filter(|n| n > 10).count(|n|\
    \ n % 2 == 1 && n % 3 == 1).count()\n    |                                   \
    \ ^^^^^ ---------------------------- supplied 1 argument\n    |              \
    \                      |\n    |                                    expected 0\
    \ arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: `usize`\
    \ is not an iterator\n  --> /tmp/tmpsso31_zc.rs:10:72\n   |\n10 |     nums.iter().filter(|n|\
    \ n > 10).count(|n| n % 2 == 1 && n % 3 == 1).count()\n   |                  \
    \                                                      ^^^^^ `usize` is not an\
    \ iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `usize: Iterator`\n           which is required by `&mut usize: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    let mut i = 0;\n    while i < nums.len() {\n    \
    \    if nums[i] > 10 {\n            if nums[i - 1] % 2 == 0 && nums[i + 1] % 2\
    \ == 1 {\n                count += 1;\n            }\n            i += 1;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmprevn6dbu.rs:14:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for i in nums.iter() {\n        if i > 10 {\n   \
    \         match i % 2 {\n                0 => count++,\n                _ => {}\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp4huh7fwg.rs:14:27\n\
    \   |\n14 |                 0 => count++,\n   |                   --      ^^ not\
    \ a valid postfix operator\n   |                   |\n   |                   while\
    \ parsing the `match` arm starting here\n   |\nhelp: use `+= 1` instead\n   |\n\
    14 |                 0 => { let tmp = count; count += 1; tmp },\n   |        \
    \              +++++++++++      ~~~~~~~~~~~~~~~~~~~\n14 -                 0 =>\
    \ count++,\n14 +                 0 => count += 1,\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4huh7fwg.rs:12:16\n   |\n12 |         if i > 10 {\n   |\
    \                ^^\n   |                |\n   |                expected `&isize`,\
    \ found integer\n   |                help: consider borrowing here: `&10`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10 && x % 2 == 1 && x % 3 == 1).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdzx7fqpy.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10 && x % 2 == 1 && x % 3 == 1).count() as\
    \ isize\n   |                                 ^^\n   |                       \
    \          |\n   |                                 expected `&isize`, found integer\n\
    \   |                                 help: consider borrowing here: `&10`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = 0;\n    for num in nums.iter() {\n        if num > 10 {\n   \
    \         if num % 2 == 0 && num % 2 == 1 {\n                n += 1;\n       \
    \     }\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2x11zlsa.rs:12:18\n   |\n\
    12 |         if num > 10 {\n   |                  ^^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&10`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    for idx in (0..len).filter(|&i| i > 10) {\n  \
    \      let digit = nums[idx];\n        if idx % 2 == 1 && digit % 2 == 1 {\n \
    \           return idx;\n        }\n    }\n    len\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiev32qgk.rs:14:20\n   |\n\
    14 |             return idx;\n   |                    ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n14 |             return idx.try_into().unwrap();\n\
    \   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpiev32qgk.rs:17:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n...\n17 |     len\n   |     ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     len.try_into().unwrap()\n   |  \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = nums.len();\n    for i in 0..n {\n        if nums[i] > 10 &&\
    \ nums[i] % 2 == 1 && nums[i] % 3 == 0 {\n            n -= 1;\n        }\n   \
    \ }\n    n\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdafk4kie.rs:16:5\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n...\n16 |  \
    \   n\n   |     ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     n.try_into().unwrap()\n   |      ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    for i in 0..nums.len() {\n        if nums[i] > 10 &&\n            (nums[i]\
    \ % 2 == 1 && nums[i] % 3 != 0 || nums[i] % 3 == 1 && nums[i] % 2 != 0) {\n  \
    \          return i;\n        }\n    }\n    return nums.len();\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwg1d6d0z.rs:13:20\n   |\n\
    13 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && ((x%2)==1 || x%3)==1).count()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphnrvk3r5.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && ((x%2)==1 || x%3)==1).count()\n   |\
    \                                ^^ expected `&&isize`, found integer\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmphnrvk3r5.rs:10:41\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && ((x%2)==1 || x%3)==1).count()\n   |\
    \                                        -^- {integer}\n   |                 \
    \                       |\n   |                                        &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x > 10 && ((*x%2)==1 || x%3)==1).count()\n   |   \
    \                                     +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmphnrvk3r5.rs:10:52\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && ((x%2)==1 || x%3)==1).count()\n   |                              \
    \                     -^- {integer}\n   |                                    \
    \               |\n   |                                                   &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x > 10 && ((x%2)==1 || *x%3)==1).count()\n   |   \
    \                                                +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphnrvk3r5.rs:10:57\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && ((x%2)==1 || x%3)==1).count()\n   |                              \
    \                           ^ expected `bool`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphnrvk3r5.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|x| x > 10 && ((x%2)==1\
    \ || x%3)==1).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && ((x%2)==1 || x%3)==1).c"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut odd = 0;\n    let mut even = 0;\n    let mut nums = nums.into_iter();\n\
    \    loop {\n        let x = nums.next();\n        if x.is_none() {\n        \
    \    break;\n        }\n        let a = x.unwrap() as isize;\n        match a\
    \ % 10 {\n            1 => even = even + 1,\n            3 => odd = odd + 1,\n\
    \            _ => {}\n        }\n    }\n    odd + even\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgzkzdia1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums_iter = nums.iter();\n    nums_iter.next();\n    nums_iter.next();\n\
    \    nums_iter.next();\n    nums_iter.next();\n    nums_iter.next();\n    let\
    \ mut count = 0;\n    for num in nums_iter {\n        if num > 10 && nums_iter.last().unwrap()\
    \ % 2 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3ncbp8y.rs:18:18\n   |\n\
    18 |         if num > 10 && nums_iter.last().unwrap() % 2 == 1 {\n   |       \
    \           ^^\n   |                  |\n   |                  expected `&isize`,\
    \ found integer\n   |                  help: consider borrowing here: `&10`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|n| n > 10 && n % 2 == 1 && n % 2 != 0).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9i9nyqw9.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1 && n % 2 != 0).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp9i9nyqw9.rs:10:40\n\
    \   |\n10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1 && n % 2 != 0).count()\n\
    \   |                                      - ^ - {integer}\n   |             \
    \                         |\n   |                                      &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n   |\n10 | \
    \    nums.iter().filter(|n| n > 10 && *n % 2 == 1 && n % 2 != 0).count()\n   |\
    \                                      +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmp9i9nyqw9.rs:10:54\n   |\n10 |     nums.iter().filter(|n|\
    \ n > 10 && n % 2 == 1 && n % 2 != 0).count()\n   |                          \
    \                          - ^ - {integer}\n   |                             \
    \                       |\n   |                                              \
    \      &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n\
    \   |\n10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1 && *n % 2 != 0).count()\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9i9nyqw9.rs:10:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1\
    \ && n % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|n|\
    \ n > 10 && n % 2 == 1 && n % 2 != 0).count().try_into().unwrap()\n   |      \
    \                                                                 ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanation"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut result = nums.len();\n    for i in 0..nums.len() {\n        if nums[i]\
    \ > 10 {\n            if nums[i] & 1 == 0 && nums[i] % 2 == 1 {\n            \
    \    if nums[i+1] == nums[i] + 1 && nums[i+1] % 2 == 1 {\n                   \
    \ result--;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpgbxt2zmz.rs:15:29\n\
    \   |\n15 |                     result--;\n   |                             ^\
    \ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgbxt2zmz.rs:20:5\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |              \
    \                         ----- expected `isize` because of return type\n...\n\
    20 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     result.try_into().unwrap()\n   |           ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|num| num > 10 && (num % 10) as usize % 2 == 1).count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgdw09coq.rs:10:36\n   |\n\
    10 |     nums.iter().filter(|num| num > 10 && (num % 10) as usize % 2 == 1).count()\n\
    \   |                                    ^^ expected `&&isize`, found integer\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpgdw09coq.rs:10:47\n\
    \   |\n10 |     nums.iter().filter(|num| num > 10 && (num % 10) as usize % 2 ==\
    \ 1).count()\n   |                                           --- ^ -- {integer}\n\
    \   |                                           |\n   |                      \
    \                     &&isize\n   |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `num`\n   |\n10 |     nums.iter().filter(|num| num > 10 && (*num\
    \ % 10) as usize % 2 == 1).count()\n   |                                     \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgdw09coq.rs:10:5\n \
    \  |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |               \
    \                        ----- expected `isize` because of return type\n10 | \
    \    nums.iter().filter(|num| num > 10 && (num % 10) as usize % 2 == 1).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|num|\
    \ num > 10 && (num % 10) as usize % 2 == 1).count().try_into().unwrap()\n   |\
    \                                                                            \
    \   ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && nums[x as usize - 1] % 2 != 0).count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbrsg2kx0.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && nums[x as usize - 1] % 2 != 0).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbrsg2kx0.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|x|\
    \ x > 10 && nums[x as usize - 1] % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && nums[x as usize - 1] % 2 != 0).count().try_into().unwrap()\n   | \
    \                                                                           ++++++++++++++++++++\n\
    \nerror[E0606]: casting `&&isize` as `usize` is invalid\n  --> /tmp/tmpbrsg2kx0.rs:10:43\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && nums[x as usize - 1] % 2 != 0).count()\n\
    \   |                                           ^^^^^^^^^^\n   |\n   = help: cast\
    \ through a raw pointer first\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0606.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    // initialize number of elements that are greater than 10\n    let n = nums.iter().filter(|x|\
    \ *x > 10).count();\n\n    // initialize number of elements that are both odd\
    \ first and odd last\n    let m = nums.iter().filter(|x| *x % 2 == 1).filter(|x|\
    \ *x % 3 == 0).count();\n\n    // return number of elements that are greater than\
    \ 10 and are odd first and odd last\n    n + (n * m)\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpytegvr4o.rs:11:41\n   |\n\
    11 |     let n = nums.iter().filter(|x| *x > 10).count();\n   |              \
    \                           ^^\n   |                                         |\n\
    \   |                                         expected `&isize`, found integer\n\
    \   |                                         help: consider borrowing here: `&10`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpytegvr4o.rs:17:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n...\n17 |     n +\
    \ (n * m)\n   |     ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     (n + (n * m)).try_into().unwrap()\n   |     +          \
    \ +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n\n    let mut sum: isize\
    \ = 0;\n    let mut max_digits = nums[0].checked_digit().unwrap();\n    let mut\
    \ first_digit = nums[0].checked_digit().unwrap();\n\n    for n in nums {\n   \
    \     let digit = n.checked_digit().unwrap();\n        if digit > max_digits {\n\
    \            sum += 1;\n            max_digits = digit;\n        }\n        if\
    \ digit % 2 == 0 && digit % 2 == 1 {\n            sum += 1;\n        }\n     \
    \   if digit > 10 && digit % 2 == 1 {\n            sum += 1;\n        }\n    }\n\
    \n    sum\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_digit` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpev28ig0c.rs:15:34\n   |\n15 |     let mut max_digits\
    \ = nums[0].checked_digit().unwrap();\n   |                                  ^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `checked_div`\n\n\
    error[E0599]: no method named `checked_digit` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpev28ig0c.rs:16:35\n   |\n16 |     let mut first_digit =\
    \ nums[0].checked_digit().unwrap();\n   |                                   ^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `checked_div`\n\n\
    error[E0599]: no method named `checked_digit` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpev28ig0c.rs:19:23\n   |\n19 |         let digit = n.checked_digit().unwrap();\n\
    \   |                       ^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `checked_div`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for i in nums {\n        if i > 10 {\n          \
    \  if i % 2 == 1 {\n                if nums[0] % 2 == 1 {\n                  \
    \  count = count + 1;\n                }\n                if nums[-1] % 2 == 1\
    \ {\n                    count = count + 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: negative integers cannot be used to index on a `Vec<isize>`\n  -->\
    \ /tmp/tmpuy_a99kg.rs:17:25\n   |\n17 |                 if nums[-1] % 2 == 1 {\n\
    \   |                         ^^ cannot use a negative integer for indexing on\
    \ `Vec<isize>`\n   |\nhelp: to access an element starting from the end of the\
    \ `Vec<isize>`, compute the index\n   |\n17 |                 if nums[nums.len()\
    \ -1] % 2 == 1 {\n   |                         ++++++++++\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x % 2 != 0).count()\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnebr0_tx.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x % 2 != 0).count()\n   |          \
    \                      ^^ expected `&&isize`, found integer\n\nerror[E0369]: cannot\
    \ mod `&&isize` by `{integer}`\n  --> /tmp/tmpnebr0_tx.rs:10:40\n   |\n10 |  \
    \   nums.iter().filter(|x| x > 10 && x % 2 != 0).count()\n   |               \
    \                       - ^ - {integer}\n   |                                \
    \      |\n   |                                      &&isize\n   |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `x`\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && *x % 2 != 0).count()\n   |                                      +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnebr0_tx.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 != 0).count().try_into().unwrap()\n   |                    \
    \                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums = nums;\n    nums.sort_unstable();\n    if nums.len() == 0 {\n\
    \        return 0;\n    }\n    let mut sum = 0;\n    let mut count = 0;\n    let\
    \ mut last = 0;\n    let mut first = nums[0];\n    for &num in nums {\n      \
    \  if num > 10 {\n            sum += 1;\n            count += 1;\n           \
    \ if last % 2 == 0 {\n                last = num;\n            } else {\n    \
    \            if num < first {\n                    first = num;\n            \
    \    }\n            }\n        }\n    }\n    sum += count;\n    if first % 2 ==\
    \ 0 {\n        return sum;\n    } else {\n        return sum + 2;\n    }\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6c08m9jy.rs:19:9\n   |\n\
    19 |     for &num in nums {\n   |         ^^^^    ---- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10).filter(|x| x.is_odd()).filter(|x| x.is_odd()).count()\
    \ \n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjrkqq2ol.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10).filter(|x| x.is_odd()).filter(|x| x.is_odd()).count()\
    \ \n   |                                ^^ expected `&&isize`, found integer\n\
    \nerror[E0599]: no method named `is_odd` found for reference `&&isize` in the\
    \ current scope\n  --> /tmp/tmpjrkqq2ol.rs:10:49\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10).filter(|x| x.is_odd()).filter(|x| x.is_odd()).count() \n   |       \
    \                                          ^^^^^^ method not found in `&&isize`\n\
    \nerror[E0599]: no method named `is_odd` found for reference `&&isize` in the\
    \ current scope\n  --> /tmp/tmpjrkqq2ol.rs:10:72\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10).filter(|x| x.is_odd()).filter(|x| x.is_odd()).count() \n   |       \
    \                                                                 ^^^^^^ method\
    \ not found in `&&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjrkqq2ol.rs:10:5\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |              \
    \                         ----- expected `isize` because of return type\n10 |\
    \     nums.iter().filter(|x| x > 10).filter(|x| x.is_odd()).filter(|x| x.is_odd()).count()\
    \ \n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10).filter(|x| x.is_odd()).filter(|x| x.is_odd()).count().try_into().unwrap()\
    \ \n   |                                                                     \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut count = 0;\n\
    \    let mut first = 0;\n    let mut last = nums.len();\n    let mut curr = nums.first();\n\
    \n    while last > first + 1 {\n        // First digit\n        if curr == 0 {\n\
    \            curr += 1;\n            first += 1;\n        }\n\n        // Last\
    \ digit\n        if last == nums.len() {\n            curr += 1;\n           \
    \ last -= 1;\n        }\n\n        // Odd first and last digits\n        if curr\
    \ % 2 != 0 && last % 2 != 0 {\n            count += 1;\n        }\n\n        curr\
    \ /= 10;\n        last /= 10;\n    }\n\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkd7d5ppe.rs:21:20\n   |\n\
    21 |         if curr == 0 {\n   |                    ^ expected enum `Option`,\
    \ found integer\n   |\n   = note: expected enum `Option<&isize>`\n           \
    \   found type `{integer}`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Option<&isize>`\n  --> /tmp/tmpkd7d5ppe.rs:22:13\n   |\n\
    22 |             curr += 1;\n   |             ----^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpkd7d5ppe.rs:28:13\n   |\n28 |             curr += 1;\n   |         \
    \    ----^^^^^\n   |             |\n   |             cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0369]: cannot mod `Option<&isize>` by `{integer}`\n  --> /tmp/tmpkd7d5ppe.rs:33:17\n\
    \   |\n33 |         if curr % 2 != 0 && last % 2 != 0 {\n   |            ----\
    \ ^ - {integer}\n   |            |\n   |            Option<&isize>\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpkd7d5ppe.rs:37:9\n   |\n37 |         curr /= 10;\n   |        \
    \ ----^^^^^^\n   |         |\n   |         cannot use `/=` on type `Option<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368, E0369.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    for i in 0..len {\n        if nums[i] > 10 &&\
    \ nums[i] % 2 == 1 && nums[len-1 - i] % 2 == 1 {\n            return i;\n    \
    \    }\n    }\n    0\n}\n\nfn main() {\n    let candidate = specialFilter;\n \
    \   assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjgly75o_.rs:13:20\n   |\n\
    13 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums {\n        if n % 2 == 0 {\n        \
    \    sum += n;\n        } else {\n            sum += 2*n;\n        }\n    }\n\
    \    if sum < 10 {\n        0\n    } else {\n        sum as isize\n    }\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpa05n9efv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.is_empty() {\n        0\n    } else {\n        if nums[0] % 2 ==\
    \ 0 {\n            if nums[0] > 10 {\n                if nums[0] % 2 == 1 {\n\
    \                    if nums[0] % 3 == 1 {\n                        if nums[0]\
    \ % 5 == 1 {\n                            return 1\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   0\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzx1gznl5.rs:11:9\n   |\n\
    10 | /     if nums.is_empty() {\n11 | |         0\n   | |         ^ expected `()`,\
    \ found integer\n12 | |     } else {\n13 | |         if nums[0] % 2 == 0 {\n...\
    \  |\n23 | |         }\n24 | |     }\n   | |_____- expected this to be `()`\n\
    \   |\nhelp: you might have meant to return this value\n   |\n11 |         return\
    \ 0;\n   |         ++++++  +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x % 2 == 1).count() + nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 0).count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwj7jlqt6.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1).count() + nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 0).count()\n   |                                ^^ expected\
    \ `&&isize`, found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpwj7jlqt6.rs:10:40\n   |\n10 |     nums.iter().filter(|x| x > 10\
    \ && x % 2 == 1).count() + nums.iter().filter(|x| x > 10 && x % 2 == 0).count()\n\
    \   |                                      - ^ - {integer}\n   |             \
    \                         |\n   |                                      &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x > 10 && *x % 2 == 1).count() + nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 0).count()\n   |                                      +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwj7jlqt6.rs:10:87\n   |\n10 |\
    \     nums.iter().filter(|x| x > 10 && x % 2 == 1).count() + nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 0).count()\n   |                                        \
    \                                               ^^ expected `&&isize`, found integer\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpwj7jlqt6.rs:10:95\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1).count() + nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 0).count()\n   |                                        \
    \                                                     - ^ - {integer}\n   |  \
    \                                                                            \
    \               |\n   |                                                      \
    \                                       &&isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `x`\n   |\n10 |     nums.iter().filter(|x| x >\
    \ 10 && x % 2 == 1).count() + nums.iter().filter(|x| x > 10 && *x % 2 == 0).count()\n\
    \   |                                                                        \
    \                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwj7jlqt6.rs:10:5\n\
    \   |\n9  | fn specia"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && (x % 2) != 0).count()\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvgn476h.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && (x % 2) != 0).count()\n   |        \
    \                        ^^ expected `&&isize`, found integer\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpgvgn476h.rs:10:41\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && (x % 2) != 0).count()\n   |        \
    \                               - ^ - {integer}\n   |                        \
    \               |\n   |                                       &&isize\n   |\n\
    help: `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (*x % 2) != 0).count()\n   |                                     \
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvgn476h.rs:10:5\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (x % 2) != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (x % 2) != 0).count().try_into().unwrap()\n   |                  \
    \                                         ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && (x % 2 == 0 || x % 3 == 0)).count()\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp00plp63w.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && (x % 2 == 0 || x % 3 == 0)).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp00plp63w.rs:10:41\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && (x % 2 == 0 || x % 3 == 0)).count()\n\
    \   |                                       - ^ - {integer}\n   |            \
    \                           |\n   |                                       &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x > 10 && (*x % 2 == 0 || x % 3 == 0)).count()\n \
    \  |                                       +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmp00plp63w.rs:10:55\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (x % 2 == 0 || x % 3 == 0)).count()\n   |                        \
    \                             - ^ - {integer}\n   |                          \
    \                           |\n   |                                          \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     nums.iter().filter(|x| x > 10 && (x % 2 == 0 || *x % 3 ==\
    \ 0)).count()\n   |                                                     +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp00plp63w.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (x % 2 == 0 || x % 3 == 0)).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (x % 2 == 0 || x % 3 == 0)).count().try_into().unwrap()\n   |    \
    \                                                                     ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut odd = 0;\n    let mut first_odd = -1;\n    let mut last_odd = -1;\n\
    \    let mut count = 0;\n    for &n in nums.iter() {\n        if n > 10 {\n  \
    \          count += 1;\n        }\n        if n % 2 == 1 {\n            odd +=\
    \ 1;\n        }\n        if n % 2 == 0 {\n            if n / 2 % 2 == 1 {\n  \
    \              first_odd += 1;\n            }\n            if n / 2 % 2 == 0 {\n\
    \                last_odd += 1;\n            }\n        }\n    }\n    if odd >\
    \ 0 && first_odd > 0 && last_odd > 0 {\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprs4n3aao.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    let mut sum = 0;\n    let mut count = 0;\n   \
    \ for i in 0..len {\n        if nums[i] >= 10 {\n            sum += nums[i];\n\
    \            if nums[i] % 2 != 0 {\n                count += 1;\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `1`', /tmp/tmpcy0cx0w6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for i in nums {\n        if i > 10 {\n            sum\
    \ += 1;\n        }\n        if i.is_odd() && nums.len() > 1 && nums.last().is_odd()\
    \ {\n            sum += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpgsrb0ksi.rs:15:14\n   |\n15 |         if i.is_odd() &&\
    \ nums.len() > 1 && nums.last().is_odd() {\n   |              ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `is_odd` found for enum `Option`\
    \ in the current scope\n  --> /tmp/tmpgsrb0ksi.rs:15:56\n   |\n15 |         if\
    \ i.is_odd() && nums.len() > 1 && nums.last().is_odd() {\n   |               \
    \                                         ^^^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    debug_assert_eq!(nums.len(), 2);\n    let first = nums[0].leading_digits().unwrap();\n\
    \    let last = nums[1].leading_digits().unwrap();\n    if let Some(digit) = nums[0]\
    \ % 10 {\n        debug_assert_eq!(digit, 1);\n        return nums.iter().filter(|x|\
    \ x > 10).count() >= 2 && nums[0] % 2 == 0;\n    } else if nums[0] % 2 == 0 &&\
    \ nums[1] % 2 == 0 && nums[0] % 10 == 0 && nums[1] % 10 == 0 {\n        return\
    \ nums.iter().filter(|x| x > 10).count() >= 2 && nums[0] % 2 == 0 && nums[1] %\
    \ 2 == 0;\n    } else {\n        nums.iter().filter(|x| x > 10).count() >= 2 &&\
    \ nums[0] % 2 == 0 && nums[1] % 2 == 0 && nums[0] % 10 == 0 && nums[1] % 10 ==\
    \ 0\n    }\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `leading_digits` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpsvmtc9j9.rs:11:25\n   |\n11 |     let first\
    \ = nums[0].leading_digits().unwrap();\n   |                         ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `leading_ones`\n\n\
    error[E0599]: no method named `leading_digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpsvmtc9j9.rs:12:24\n   |\n12 |     let last = nums[1].leading_digits().unwrap();\n\
    \   |                        ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `leading_ones`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsvmtc9j9.rs:13:12\n   |\n13 |     if let Some(digit) = nums[0] % 10\
    \ {\n   |            ^^^^^^^^^^^   ------------ this expression has type `isize`\n\
    \   |            |\n   |            expected `isize`, found enum `Option`\n  \
    \ |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpsvmtc9j9.rs:15:43\n   |\n15 |  \
    \       return nums.iter().filter(|x| x > 10).count() >= 2 && nums[0] % 2 == 0;\n\
    \   |                                           ^^ expected `&&isize`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsvmtc9j9.rs:15:16\n   |\n9  |\
    \ fn specialFilter(nums: Vec<isize>) -> isize {\n   |                        \
    \               ----- expected `isize` because of return type\n...\n15 |     \
    \    return nums.iter().filter(|x| x > 10).count() >= 2 && nums[0] % 2 == 0;\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvmtc9j9.rs:17:43\n\
    \   |\n17 |         return nums.iter().filter(|x| x > 10).count() >= 2 && nums[0]\
    \ % 2 == 0 && nums[1] % 2 == 0;\n   |                                        \
    \   ^^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsvmtc9j9.rs:19:36\n   |\n19 |         nums.iter().filter(|x| x >\
    \ 10).count() >= 2 && nums[0] % 2 == 0 && nums[1] % 2 == 0 && nums[0] % 10 ==\
    \ 0 && nums[1] %"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.is_empty() {\n        return 0;\n    }\n    let mut cnt = 0;\n  \
    \  let mut num = nums.iter().next();\n    while num != 0 {\n        if num % 10\
    \ > 10 || num % 10 < 1 || num % 10 > 9 {\n            break;\n        }\n    \
    \    num = num / 10;\n        cnt += 1;\n    }\n    return cnt;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ns9ztke.rs:15:18\n   |\n\
    15 |     while num != 0 {\n   |                  ^ expected enum `Option`, found\
    \ integer\n   |\n   = note: expected enum `Option<&isize>`\n              found\
    \ type `{integer}`\n\nerror[E0369]: cannot mod `Option<&isize>` by `{integer}`\n\
    \  --> /tmp/tmp5ns9ztke.rs:16:16\n   |\n16 |         if num % 10 > 10 || num %\
    \ 10 < 1 || num % 10 > 9 {\n   |            --- ^ -- {integer}\n   |         \
    \   |\n   |            Option<&isize>\n\nerror[E0369]: cannot mod `Option<&isize>`\
    \ by `{integer}`\n  --> /tmp/tmp5ns9ztke.rs:16:33\n   |\n16 |         if num %\
    \ 10 > 10 || num % 10 < 1 || num % 10 > 9 {\n   |                            \
    \ --- ^ -- {integer}\n   |                             |\n   |               \
    \              Option<&isize>\n\nerror[E0369]: cannot mod `Option<&isize>` by\
    \ `{integer}`\n  --> /tmp/tmp5ns9ztke.rs:16:49\n   |\n16 |         if num % 10\
    \ > 10 || num % 10 < 1 || num % 10 > 9 {\n   |                               \
    \              --- ^ -- {integer}\n   |                                      \
    \       |\n   |                                             Option<&isize>\n\n\
    error[E0369]: cannot divide `Option<&isize>` by `{integer}`\n  --> /tmp/tmp5ns9ztke.rs:19:19\n\
    \   |\n19 |         num = num / 10;\n   |               --- ^ -- {integer}\n \
    \  |               |\n   |               Option<&isize>\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() < 1 {\n        return 0;\n    }\n    let mut first = 0;\n \
    \   let mut last = 0;\n    let mut cnt = 0;\n    for (i, n) in nums.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            cnt += 1;\n            if i < nums.len()\
    \ - 1 {\n                if nums[i+1] % 2 == 0 {\n                    cnt += 1;\n\
    \                    i += 1;\n                }\n            }\n            if\
    \ first == 0 && last == 0 {\n                first = n;\n            } else if\
    \ n > 10 {\n                last = n;\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdosog_fa.rs:26:25\n   |\n\
    13 |     let mut first = 0;\n   |                     - expected due to this value\n\
    ...\n26 |                 first = n;\n   |                         ^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    26 |                 first = *n;\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdosog_fa.rs:27:27\n   |\n27 |             }\
    \ else if n > 10 {\n   |                           ^^\n   |                  \
    \         |\n   |                           expected `&isize`, found integer\n\
    \   |                           help: consider borrowing here: `&10`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdosog_fa.rs:28:24\n   |\n14 |     let mut last\
    \ = 0;\n   |                    - expected due to this value\n...\n28 |      \
    \           last = n;\n   |                        ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n28 |                 last\
    \ = *n;\n   |                        +\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut num: isize = 0;\n    let mut odds = 0;\n    for (i, &num) in nums.iter().enumerate()\
    \ {\n        if num % 2 == 0 {\n            if num % 10 == 1 && num % 10 == 3\
    \ && num % 10 == 7 && num % 10 == 9 {\n                odds += 1;\n          \
    \  } else {\n                num += 1;\n            }\n        } else {\n    \
    \        num += 1;\n        }\n    }\n    return num - odds;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmp0zc90bdz.rs:12:10\n   |\n\
    12 |     for (i, &num) in nums.iter().enumerate() {\n   |          ^ help: if\
    \ this is intentional, prefix it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: value assigned to `num` is never read\n  --> /tmp/tmp0zc90bdz.rs:17:17\n\
    \   |\n17 |                 num += 1;\n   |                 ^^^\n   |\n   = note:\
    \ `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten\
    \ before being read?\n\nwarning: value assigned to `num` is never read\n  -->\
    \ /tmp/tmp0zc90bdz.rs:20:13\n   |\n20 |             num += 1;\n   |          \
    \   ^^^\n   |\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ variable does not need to be mutable\n  --> /tmp/tmp0zc90bdz.rs:10:9\n   |\n\
    10 |     let mut num: isize = 0;\n   |         ----^^^\n   |         |\n   | \
    \        help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0384]: cannot assign twice to immutable variable `num`\n \
    \ --> /tmp/tmp0zc90bdz.rs:17:17\n   |\n12 |     for (i, &num) in nums.iter().enumerate()\
    \ {\n   |              ---\n   |              |\n   |              first assignment\
    \ to `num`\n   |              help: consider making this binding mutable: `mut\
    \ num`\n...\n17 |                 num += 1;\n   |                 ^^^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `num`\n  --> /tmp/tmp0zc90bdz.rs:20:13\n   |\n12 |     for (i, &num)\
    \ in nums.iter().enumerate() {\n   |              ---\n   |              |\n \
    \  |              first assignment to `num`\n   |              help: consider\
    \ making this binding mutable: `mut num`\n...\n20 |             num += 1;\n  \
    \ |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting\
    \ due to 2 previous errors; 4 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    for i in nums {\n        if i % 2 == 1 && i / 2 % 2 == 1 {\n            return\
    \ i;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `1`', /tmp/tmpxjh1fl_0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0\n    let mut first = 1;\n    let mut last = 1;\n    let\
    \ mut prev = 0;\n\n    for x in nums {\n        if x % 10 > 10 {\n           \
    \ last = last + 1;\n        } else {\n            count = count + 1;\n       \
    \     first = first + 1;\n        }\n        if x % 10 < 0 {\n            prev\
    \ = x + 1;\n        } else {\n            first = first - 1;\n        }\n    }\n\
    \n    if prev % 10 == 1 {\n        count = count + 1;\n    }\n\n    if last %\
    \ 2 == 1 {\n        count = count + 1;\n    }\n\n    if first % 2 == 1 {\n   \
    \     count = count + 1;\n    }\n\n    if count > 2 {\n        count - 2;\n  \
    \  } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp14qxc2oc.rs:10:22\n\
    \   |\n10 |     let mut count = 0\n   |                      ^ help: add `;` here\n\
    11 |     let mut first = 1;\n   |     --- unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp14qxc2oc.rs:41:18\n   |\n41 |       if count > 2 {\n  \
    \ |  __________________^\n42 | |         count - 2;\n   | |                  -\
    \ help: remove this semicolon\n43 | |     } else {\n   | |_____^ expected `isize`,\
    \ found `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    specialFilter_loop(nums, 1)\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `specialFilter_loop` in this scope\n\
    \  --> /tmp/tmpictj3ma2.rs:10:5\n   |\n10 |     specialFilter_loop(nums, 1)\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums\n        .iter()\n        .filter(|n| {\n            let digits = n.to_string();\n\
    \            digits.chars().filter(|c| c.is_numeric()).count() != 0\n        })\n\
    \        .count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplmi28x3u.rs:10:5\n   |\n\
    9  |   fn specialFilter(nums: Vec<isize>) -> isize {\n   |                   \
    \                      ----- expected `isize` because of return type\n10 | / \
    \    nums\n11 | |         .iter()\n12 | |         .filter(|n| {\n13 | |      \
    \       let digits = n.to_string();\n14 | |             digits.chars().filter(|c|\
    \ c.is_numeric()).count() != 0\n15 | |         })\n16 | |         .count()\n \
    \  | |________________^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |         .count().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x % 2 == 1 && x % 2 != 0).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsuypko2l.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1 && x % 2 != 0).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpsuypko2l.rs:10:40\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1 && x % 2 != 0).count()\n\
    \   |                                      - ^ - {integer}\n   |             \
    \                         |\n   |                                      &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x > 10 && *x % 2 == 1 && x % 2 != 0).count()\n   |\
    \                                      +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpsuypko2l.rs:10:54\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 1 && x % 2 != 0).count()\n   |                          \
    \                          - ^ - {integer}\n   |                             \
    \                       |\n   |                                              \
    \      &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1 && *x % 2 != 0).count()\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsuypko2l.rs:10:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1\
    \ && x % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 1 && x % 2 != 0).count().try_into().unwrap()\n   |      \
    \                                                                 ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanation"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut odds = 0;\n    let mut evens = 0;\n    for i in nums.iter() {\n \
    \       if i % 2 == 0 {\n            evens += 1;\n        } else if i % 2 == 1\
    \ {\n            odds += 1;\n        }\n    }\n    if odds == 0 && evens == 0\
    \ {\n        return 0;\n    } else if odds == 1 {\n        return evens;\n   \
    \ } else if evens == 1 {\n        return odds;\n    } else {\n        return odds\
    \ + evens;\n    }\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp3cv85mu3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.is_empty() { return 0; }\n    \n    let mut lower = nums[0] % 10;\n\
    \    let mut higher = nums[0] % 10;\n    for i in 1..nums.len() {\n        let\
    \ x = nums[i] % 10;\n        if x < 10 && lower == x {\n            lower = x;\n\
    \        } else if x > 10 && higher == x {\n            higher = x;\n        }\
    \ else if x >= 10 && x < 10 {\n            lower = x;\n            higher = x;\n\
    \        }\n    }\n    if lower % 2 != higher%2 {\n        nums.iter().filter(|x|x%2==0).count()\n\
    \    } else {\n        nums.iter().filter(|x|x%2==0).count() + nums.iter().filter(|x|x%2==1).count()\n\
    \    }\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmphq6x1ims.rs:26:32\n\
    \   |\n26 |         nums.iter().filter(|x|x%2==0).count()\n   |              \
    \                 -^- {integer}\n   |                               |\n   |  \
    \                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n26 |         nums.iter().filter(|x|*x%2==0).count()\n\
    \   |                               +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphq6x1ims.rs:26:9\n   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize\
    \ {\n   |                                       ----- expected `isize` because\
    \ of return type\n...\n26 |         nums.iter().filter(|x|x%2==0).count()\n  \
    \ |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n26 |         nums.iter().filter(|x|x%2==0).count().try_into().unwrap()\n\
    \   |                                              ++++++++++++++++++++\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmphq6x1ims.rs:28:32\n   |\n\
    28 |         nums.iter().filter(|x|x%2==0).count() + nums.iter().filter(|x|x%2==1).count()\n\
    \   |                               -^- {integer}\n   |                      \
    \         |\n   |                               &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `x`\n   |\n28 |         nums.iter().filter(|x|*x%2==0).count()\
    \ + nums.iter().filter(|x|x%2==1).count()\n   |                              \
    \ +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmphq6x1ims.rs:28:72\n\
    \   |\n28 |         nums.iter().filter(|x|x%2==0).count() + nums.iter().filter(|x|x%2==1).count()\n\
    \   |                                                                       -^-\
    \ {integer}\n   |                                                            \
    \           |\n   |                                                          \
    \             &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n28 |         nums.iter().filter(|x"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 2 == 0 {\n        \
    \    if n / 10 % 2 == 1 {\n                if n % 10 == 1 && n % 100 != 11 {\n\
    \                    cnt += 1;\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1myf7r1s.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    if len < 2 {\n        return 0;\n    }\n\n   \
    \ let mut count = 0;\n\n    for i in 0..len {\n        let n = nums[i];\n\n  \
    \      if n % 2 == 1 {\n            count += 1;\n        }\n        \n       \
    \ if i >= 1 {\n            let m = nums[i - 1];\n\n            if n % 2 == 1 &&\
    \ m % 2 == 1 {\n                count += 1;\n            }\n        }\n    }\n\
    \n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpc4ok7t0g.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for i in nums.iter() {\n        if i > 10 && nums.len()\
    \ - i <= 2 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpub59mlm8.rs:12:16\n   |\n\
    12 |         if i > 10 && nums.len() - i <= 2 {\n   |                ^^\n   |\
    \                |\n   |                expected `&isize`, found integer\n   |\
    \                help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpub59mlm8.rs:12:35\n   |\n12 |         if i > 10 && nums.len()\
    \ - i <= 2 {\n   |                                   ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n  --> /tmp/tmpub59mlm8.rs:12:33\n\
    \   |\n12 |         if i > 10 && nums.len() - i <= 2 {\n   |                 \
    \                ^ no implementation for `usize - &isize`\n   |\n   = help: the\
    \ trait `Sub<&isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    if len <= 0 { 0 }\n    else if len == 1 { nums[0]\
    \ % 2 }\n    else { nums[len - 1] % 2 }\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmpuq25yw6z.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x >= 10 && x % 2 == 0 && x % 3 == 0).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpan6ppy6x.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|x| x >= 10 && x % 2 == 0 && x % 3 == 0).count()\n\
    \   |                                 ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpan6ppy6x.rs:10:41\n\
    \   |\n10 |     nums.iter().filter(|x| x >= 10 && x % 2 == 0 && x % 3 == 0).count()\n\
    \   |                                       - ^ - {integer}\n   |            \
    \                           |\n   |                                       &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x >= 10 && *x % 2 == 0 && x % 3 == 0).count()\n  \
    \ |                                       +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpan6ppy6x.rs:10:55\n   |\n10 |     nums.iter().filter(|x|\
    \ x >= 10 && x % 2 == 0 && x % 3 == 0).count()\n   |                         \
    \                            - ^ - {integer}\n   |                           \
    \                          |\n   |                                           \
    \          &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     nums.iter().filter(|x| x >= 10 && x % 2 == 0 && *x % 3 ==\
    \ 0).count()\n   |                                                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpan6ppy6x.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|x| x >= 10 && x\
    \ % 2 == 0 && x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x >= 10 && x % 2 == 0 && x % 3 == 0).count().try_into().unwrap()\n   |     \
    \                                                                   ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have de"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let evens = nums.filter(|&i| i % 2 == 0);\n    let odds = nums.filter(|&i|\
    \ i % 2 != 0);\n    evens.iter().filter(|&i| {\n        let mut i = i;\n     \
    \   let mut last = i;\n        while i > 10 {\n            last = i / 10;\n  \
    \          i -= last * 10;\n        }\n        last % 2 == 1\n    }).count() +\
    \ odds.iter().filter(|&i| {\n        let mut i = i;\n        let mut last = i;\n\
    \        while i > 10 {\n            last = i / 10;\n            i -= last * 10;\n\
    \        }\n        last % 2 == 1\n    }).count()\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpqe3vfi5a.rs:10:22\n\
    \    |\n10  |       let evens = nums.filter(|&i| i % 2 == 0);\n    |         \
    \               ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpqe3vfi5a.rs:11:21\n    |\n11\
    \  |       let odds = nums.filter(|&i| i % 2 != 0);\n    |                   \
    \    ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n\n    if nums.len() == 1\
    \ {\n        if nums[0] % 2 == 0 {\n            return 1;\n        }\n\n     \
    \   return 0;\n    }\n\n    let first = nums[0] % 10;\n    let last = nums.last().unwrap()\
    \ % 10;\n    let mut count = 0;\n\n    for n in nums.iter() {\n        if n %\
    \ 10 > last && n % 10 % 2 != first % 2 {\n            count += 1;\n        }\n\
    \    }\n\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n  \
    \  assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp27hyv6bl.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums_iter = nums.iter();\n    loop {\n        let n = nums_iter.next().unwrap();\n\
    \        if n % 10 == 1 && n % 100 != 11 && n % 100 != 7 {\n            loop {\n\
    \                let m = nums_iter.next().unwrap();\n                if m % 10\
    \ == 1 && m % 100 != 11 && m % 100 != 7 {\n                    break;\n      \
    \          }\n            }\n        }\n        if n < 10 {\n            break;\n\
    \        }\n    }\n    match nums_iter.next() {\n        Some(x) => x,\n     \
    \   None => 0\n    }\n}\n\nfn main() {\n    let candidate = specialFilter;\n \
    \   assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mn4ua3r.rs:21:16\n   |\n\
    21 |         if n < 10 {\n   |                ^^\n   |                |\n   |\
    \                expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&10`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0mn4ua3r.rs:26:20\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |              \
    \                         ----- expected `isize` because of return type\n...\n\
    26 |         Some(x) => x,\n   |                    ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |        \
    \ Some(x) => *x,\n   |                    +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    for i in nums.iter() {\n        if i % 2 == 0 && i % 5 == 1 {\n         \
    \   return i;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxmvq22h2.rs:12:20\n   |\n\
    12 |             return i;\n   |                    ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     return *i;\n   |                    +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt: isize = 0;\n    for n in nums {\n        if n >= 10 && (n %\
    \ 10) != 0 && n % 2 != 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp8kmlwjub.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for i in nums {\n        if i > 10 {\n          \
    \  if nums[0] % 2 == 0 && nums[nums.len() - 1] % 2 == 1 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmpea2o7z7y.rs:13:16\n\
    \    |\n9   | fn specialFilter(nums: Vec<isize>) -> isize {\n    |           \
    \       ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n10  |     let mut count = 0;\n11  |     for i in\
    \ nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n\
    12  |         if i > 10 {\n13  |             if nums[0] % 2 == 0 && nums[nums.len()\
    \ - 1] % 2 == 1 {\n    |                ^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n11  |     for i in &nums {\n   \
    \ |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10).count(|x| x.parity() && (x.is_odd() || x.is_even())).unwrap()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpae_wlryi.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10).count(|x| x.parity() && (x.is_odd() ||\
    \ x.is_even())).unwrap()\n   |                                ^^ expected `&&isize`,\
    \ found integer\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n   --> /tmp/tmpae_wlryi.rs:10:36\n    |\n10  |     nums.iter().filter(|x|\
    \ x > 10).count(|x| x.parity() && (x.is_odd() || x.is_even())).unwrap()\n    |\
    \                                    ^^^^^ ---------------------------------------------\
    \ supplied 1 argument\n    |                                    |\n    |     \
    \                               expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0599]: no method named `unwrap` found for type\
    \ `usize` in the current scope\n  --> /tmp/tmpae_wlryi.rs:10:89\n   |\n10 |  \
    \   nums.iter().filter(|x| x > 10).count(|x| x.parity() && (x.is_odd() || x.is_even())).unwrap()\n\
    \   |                                                                        \
    \                 ^^^^^^ method not found in `usize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let nums = nums.iter().filter(|x| x > 10).collect::<Vec<_>>();\n    let mut\
    \ count = 0;\n    for num in nums.iter().cloned() {\n        if num % 2 == 1 {\n\
    \            count += 1;\n        }\n        if num % 2 == 0 && num != 11 && num\
    \ != 10 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp24y9qa2h.rs:10:43\n   |\n\
    10 |     let nums = nums.iter().filter(|x| x > 10).collect::<Vec<_>>();\n   |\
    \                                           ^^ expected `&&isize`, found integer\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp24y9qa2h.rs:16:32\n\
    \   |\n16 |         if num % 2 == 0 && num != 11 && num != 10 {\n   |        \
    \                        ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  -->\
    \ /tmp/tmp24y9qa2h.rs:16:45\n   |\n16 |         if num % 2 == 0 && num != 11 &&\
    \ num != 10 {\n   |                                             ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| {\n        x > 10 &&\n        (x % 2 != 0 && x % 4\
    \ != 0)\n    }).count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6jp2mtrg.rs:11:13\n   |\n\
    11 |         x > 10 &&\n   |             ^^ expected `&&isize`, found integer\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6jp2mtrg.rs:12:12\n\
    \   |\n12 |         (x % 2 != 0 && x % 4 != 0)\n   |          - ^ - {integer}\n\
    \   |          |\n   |          &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n12 |         (*x % 2 != 0 && x % 4 != 0)\n  \
    \ |          +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6jp2mtrg.rs:12:26\n\
    \   |\n12 |         (x % 2 != 0 && x % 4 != 0)\n   |                        -\
    \ ^ - {integer}\n   |                        |\n   |                        &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n12 | \
    \        (x % 2 != 0 && *x % 4 != 0)\n   |                        +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6jp2mtrg.rs:10:5\n   |\n9  |   fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                         ----- expected\
    \ `isize` because of return type\n10 | /     nums.iter().filter(|x| {\n11 | |\
    \         x > 10 &&\n12 | |         (x % 2 != 0 && x % 4 != 0)\n13 | |     }).count()\n\
    \   | |______________^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    13 |     }).count().try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    \n    for n in nums.iter() {\n        if n % 10 == 1 {\n            if n\
    \ % 100 == 0 {\n                if n % 1000 == 0 {\n                    return\
    \ n;\n                }\n            }\n        }\n    }\n    \n    0\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptsez1m8e.rs:15:28\n   |\n\
    15 |                     return n;\n   |                            ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    15 |                     return *n;\n   |                            +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut lastNum: isize = 0;\n    let mut firstNum: isize = 0;\n    for num\
    \ in nums {\n        if num > 10 {\n            count += 1;\n            lastNum\
    \ = num;\n        } else if num < -10 {\n            count += 1;\n           \
    \ firstNum = num;\n        }\n    }\n    if count > 2 {\n        if lastNum %\
    \ 2 == 1 && firstNum % 2 == 1 {\n            return count as isize;\n        }\n\
    \    }\n    count as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpv5l9hcbf.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0\
    \ {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp_wa0wsxj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for i in nums.iter() {\n        if i > 10 {\n     \
    \       cnt += 1;\n        } else if i % 2 == 1 {\n            cnt += 1;\n   \
    \     } else if i != nums.last() && i % 2 == 0 {\n            cnt += 1;\n    \
    \    }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpltczincf.rs:12:16\n   |\n\
    12 |         if i > 10 {\n   |                ^^\n   |                |\n   |\
    \                expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&10`\n\nerror[E0277]: can't compare `&isize` with `Option<&isize>`\n\
    \  --> /tmp/tmpltczincf.rs:16:21\n   |\n16 |         } else if i != nums.last()\
    \ && i % 2 == 0 {\n   |                     ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = 0;\n    for &n in nums {\n        if nums.iter().take_while(|&i|\
    \ *i != 0 && nums.iter().last() != i).count() > 0 {\n            continue;\n \
    \       }\n        if nums.iter().take_while(|&i| *i != 0 && nums.iter().last()\
    \ != i && nums.iter().next() != i).count() > 0 {\n            continue;\n    \
    \    }\n        if nums.iter().take_while(|&i| *i != 0 && *i != i && nums.iter().next()\
    \ != i && nums.iter().last() != i).count() > 0 {\n            continue;\n    \
    \    }\n        n += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp00h1fhgn.rs:11:9\n   |\n\
    11 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp00h1fhgn.rs:12:73\n   |\n12 |         if nums.iter().take_while(|&i|\
    \ *i != 0 && nums.iter().last() != i).count() > 0 {\n   |                    \
    \                                                     ^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n12 |         if nums.iter().take_while(|&i| *i != 0 && nums.iter().last()\
    \ != Some(i)).count() > 0 {\n   |                                            \
    \                             +++++ +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp00h1fhgn.rs:15:73\n   |\n15 |         if nums.iter().take_while(|&i|\
    \ *i != 0 && nums.iter().last() != i && nums.iter().next() != i).count() > 0 {\n\
    \   |                                                                        \
    \ ^ expected enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n15 |         if nums.iter().take_while(|&i| *i != 0 && nums.iter().last()\
    \ != Some(i) && nums.iter().next() != i).count() > 0 {\n   |                 \
    \                                                        +++++ +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp00h1fhgn.rs:15:100\n   |\n15 |         if nums.iter().take_while(|&i|\
    \ *i != 0 && nums.iter().last() != i && nums.iter().next() != i).count() > 0 {\n\
    \   |                                                                        \
    \                            ^ expected enum `Option`, found `&isize`\n   |\n\
    \   = note:   expected enum `Option<&isize>`\n           found reference `&isize`\n\
    help: try wra"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut num_odd = 0;\n    for &num in nums {\n        if num % 2 != 0 {\n\
    \            num_odd += 1;\n        }\n        if num % 2 != 0 && num / 2 % 2\
    \ != 0 {\n            num_odd += 1;\n        }\n    }\n    return num_odd;\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21ivrxa9.rs:11:9\n   |\n\
    11 |     for &num in nums {\n   |         ^^^^    ---- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut evens = 0;\n    for num in nums {\n        if num % 2 == 0 {\n  \
    \          evens += 1;\n        }\n    }\n    let mut firstEven: Option<isize>\
    \ = None;\n    for num in nums {\n        if num % 2 == 0 {\n            firstEven\
    \ = Some(num);\n        }\n    }\n    let mut lastEven: Option<isize> = None;\n\
    \    for num in nums {\n        if num % 2 == 0 {\n            lastEven = Some(num);\n\
    \        }\n    }\n\n    if evens == 1 && firstEven.is_some() && lastEven.is_some()\
    \ {\n        nums.len()\n    } else {\n        nums.len() + nums.len()\n    }\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwl9mhng7.rs:30:9\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n...\n30 |  \
    \       nums.len()\n   |         ^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n30 |         nums.len().try_into().unwrap()\n   | \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwl9mhng7.rs:32:9\n   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize\
    \ {\n   |                                       ----- expected `isize` because\
    \ of return type\n...\n32 |         nums.len() + nums.len()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n32 |         (nums.len()\
    \ + nums.len()).try_into().unwrap()\n   |         +                       +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut oddCount = 0;\n    for num in nums {\n        if num > 10 {\n   \
    \         let div = num / 10;\n            if num % 10 == 1 {\n              \
    \  if div % 2 == 1 {\n                    oddCount += 1;\n                }\n\
    \            }\n        }\n    }\n    oddCount\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpu4qkx24g.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for i in nums {\n        if i >= 10 && i & 1 != 0\
    \ && i & 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmp_68ecd1f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: -1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    specialFilter(nums.iter().cloned().collect::<Vec<isize>>())\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976534
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums\n        .iter()\n        .filter(|num| *num > 10)\n        .filter(|num|\
    \ *num % 2 != 0 && num % 2 != 1)\n        .count()\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptcqis_q_.rs:12:30\n   |\n\
    12 |         .filter(|num| *num > 10)\n   |                              ^^\n\
    \   |                              |\n   |                              expected\
    \ `&isize`, found integer\n   |                              help: consider borrowing\
    \ here: `&10`\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmptcqis_q_.rs:13:44\n\
    \   |\n13 |         .filter(|num| *num % 2 != 0 && num % 2 != 1)\n   |       \
    \                                 --- ^ - {integer}\n   |                    \
    \                    |\n   |                                        &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `num`\n   |\n13 |\
    \         .filter(|num| *num % 2 != 0 && *num % 2 != 1)\n   |                \
    \                        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptcqis_q_.rs:10:5\n\
    \   |\n9  |   fn specialFilter(nums: Vec<isize>) -> isize {\n   |            \
    \                             ----- expected `isize` because of return type\n\
    10 | /     nums\n11 | |         .iter()\n12 | |         .filter(|num| *num > 10)\n\
    13 | |         .filter(|num| *num % 2 != 0 && num % 2 != 1)\n14 | |         .count()\n\
    \   | |________________^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n14 |         .count().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let even = nums.filter(|&x| x % 2 == 0).count();\n    let odd = nums.filter(|&x|\
    \ x % 2 != 0).count();\n    if even == 1 && odd == 1 {\n        return nums.len();\n\
    \    }\n    if even > 10 && odd > 10 {\n        return even;\n    }\n    if even\
    \ > 10 && odd == 10 {\n        return odd;\n    }\n    if even == 10 && odd ==\
    \ 10 {\n        return even;\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp3oneynfg.rs:10:21\n\
    \    |\n10  |       let even = nums.filter(|&x| x % 2 == 0).count();\n    |  \
    \                     ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmp3oneynfg.rs:11:20\n    |\n11\
    \  |       let odd = nums.filter(|&x| x % 2 != 0).count();\n    |            \
    \          ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3oneynfg.rs:13:16\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n...\n13 |         return nums.len();\n   | \
    \               ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |         return nums.len().try_into().unwrap();\n   |             \
    \             ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for i in nums {\n        if i > 10 {\n          \
    \  if ((i mod 10) % 2) == 1 {\n                count += 1;\n            }\n  \
    \      } else {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found keyword `mod`\n  --> /tmp/tmpa0eynvs3.rs:13:20\n   |\n13 |           \
    \  if ((i mod 10) % 2) == 1 {\n   |                    ^^^ expected one of 8 possible\
    \ tokens\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut numsCopy = nums;\n    let len = nums.len();\n    if numsCopy.len()\
    \ == 0 {\n        return 0;\n    }\n    let lastNum = numsCopy[len - 1];\n   \
    \ let mut count = 0;\n    for i in 0..(len - 1) {\n        if nums[i] < 10 {\n\
    \            count++;\n            continue;\n        }\n        let mut firstOddCount\
    \ = 0;\n        let mut lastOddCount = 0;\n        if i > 0) {\n            let\
    \ prevNum = nums[i - 1];\n            if prevNum % 2 == 0 && prevNum % 10 != 0\
    \ {\n                firstOddCount++;\n            }\n        }\n        if i\
    \ < len - 1 {\n            let nextNum = nums[i + 1];\n            if nextNum\
    \ % 2 == 0 && nextNum % 10 != 0 {\n                lastOddCount++;\n         \
    \   }\n        }\n        if firstOddCount > 0 && lastOddCount > 0 {\n       \
    \     count++;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmp2w2mvsb9.rs:41:1\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |              \
    \                               - this opening brace...\n...\n39 |     }\n   |\
    \     - ...matches this closing brace\n40 |     count\n41 | }\n   | ^ unexpected\
    \ closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmp2w2mvsb9.rs:17:27\n\
    \   |\n17 |     for i in 0..(len - 1) {\n   |                           ^ unclosed\
    \ delimiter\n...\n24 |         if i > 0) {\n   |                 ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n  \
    \  for i in nums.iter() {\n        if i > 10 {\n            return sum;\n    \
    \    }\n        if i & 1 == 1 {\n            return sum + 1;\n        }\n    \
    \    sum += i;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtxnsygg.rs:15:16\n   |\n\
    15 |         if i > 10 {\n   |                ^^\n   |                |\n   |\
    \                expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&10`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut num_odd = 0;\n    let mut num_even = 0;\n    for i in nums {\n  \
    \      if i % 2 == 0 {\n            num_even += 1;\n        } else {\n       \
    \     num_odd += 1;\n        }\n    }\n    if num_even + num_odd <= 1 {\n    \
    \    return 0;\n    }\n    let mut num_odd = 0;\n    for i in nums {\n       \
    \ if i % 2 == 1 {\n            num_odd += 1;\n        }\n    }\n    if num_odd\
    \ <= 1 {\n        return 0;\n    }\n    num_even\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmp8qqlm19n.rs:23:14\n\
    \    |\n9   | fn specialFilter(nums: Vec<isize>) -> isize {\n    |           \
    \       ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n12  |     for i in nums {\n    |          \
    \    ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n23  |\
    \     for i in nums {\n    |              ^^^^ value used here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n12  |     for i in &nums {\n   \
    \ |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut even = 0;\n    let mut odd = 0;\n    for x in nums {\n        if\
    \ x < 10 {\n            even += 1;\n        } else if x >= 10 {\n            odd\
    \ = 1;\n        } else {\n            if odd && x % 2 == 1 {\n               \
    \ even += 1;\n            }\n        }\n    }\n    even\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpizzn_dom.rs:18:16\n   |\n\
    18 |             if odd && x % 2 == 1 {\n   |                ^^^ expected `bool`,\
    \ found integer\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.is_empty() {\n        return 0;\n    }\n    \n    let mut count =\
    \ 0 as isize;\n    \n    for n in nums.iter() {\n        if n % 10 == 1 && n %\
    \ 10 == 3 && n % 10 == 7 && n % 10 == 9 {\n            count += 1;\n        }\n\
    \    }\n    \n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpm6uyhdrx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n\n    for n in nums {\n        cnt += if n % 2 == 0 &&\
    \ n % 10 == 1 && n % 11 != 9 { 1 } else { 0 };\n    }\n\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzef8og1q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    for i in nums {\n        if i > 10 && (nums[0] % 2 == 1 && nums[nums.len()\
    \ - 1] % 2 == 1) {\n            return i;\n        }\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmpa2ozmlaz.rs:11:23\n\
    \    |\n9   | fn specialFilter(nums: Vec<isize>) -> isize {\n    |           \
    \       ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n10  |     for i in nums {\n    |              ----\
    \ `nums` moved due to this implicit call to `.into_iter()`\n11  |         if i\
    \ > 10 && (nums[0] % 2 == 1 && nums[nums.len() - 1] % 2 == 1) {\n    |       \
    \                ^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n10  |     for i in &nums {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for (idx, num) in nums.iter().enumerate() {\n   \
    \     if num > 10 {\n            if num % 2 == 1 {\n                count += idx;\n\
    \            }\n            if idx > 0 {\n                if nums[idx - 1] % 2\
    \ == 1 {\n                    count += idx;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzqyka_dl.rs:12:18\n   |\n\
    12 |         if num > 10 {\n   |                  ^^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzqyka_dl.rs:23:5\n   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize\
    \ {\n   |                                       ----- expected `isize` because\
    \ of return type\n...\n23 |     count\n   |     ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n23 |     count.try_into().unwrap()\n   |\
    \          ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&n| n >= 10 && n % 2 == 1 && n % 2 != 0).count()\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4y5is4zs.rs:10:34\n   |\n\
    10 |     nums.iter().filter(|&n| n >= 10 && n % 2 == 1 && n % 2 != 0).count()\n\
    \   |                                  ^^\n   |                              \
    \    |\n   |                                  expected `&isize`, found integer\n\
    \   |                                  help: consider borrowing here: `&10`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp4y5is4zs.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|&n|\
    \ n >= 10 && n % 2 == 1 && n % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&n|\
    \ n >= 10 && n % 2 == 1 && n % 2 != 0).count().try_into().unwrap()\n   |     \
    \                                                                    ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for i in nums.iter() {\n        if i > 10 && nums.len()\
    \ > 1 {\n            if nums[0] % 2 == 1 && nums[1] % 2 == 1 {\n             \
    \   count+=1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwsy65o82.rs:12:16\n   |\n\
    12 |         if i > 10 && nums.len() > 1 {\n   |                ^^\n   |     \
    \           |\n   |                expected `&isize`, found integer\n   |    \
    \            help: consider borrowing here: `&10`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n >= 10 && n % 2 == 1 {\n\
    \            if n % 10 == 0 {\n                cnt += 1;\n            }\n    \
    \    }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpm45ewuy6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&n| n > 10 && (n % 10) % 2 != 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyb_bof45.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&n| n > 10 && (n % 10) % 2 != 0).count()\n   |  \
    \                               ^^\n   |                                 |\n \
    \  |                                 expected `&isize`, found integer\n   |  \
    \                               help: consider borrowing here: `&10`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyb_bof45.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|&n| n > 10 && (n\
    \ % 10) % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&n|\
    \ n > 10 && (n % 10) % 2 != 0).count().try_into().unwrap()\n   |             \
    \                                                    ++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 0 {\n                count += 1;\n            }\n       \
    \     if num % 2 == 1 && num != 9 {\n                count += 1;\n           \
    \ }\n            if num % 2 == 1 && num == 9 {\n                count += 1;\n\
    \            }\n            if num % 2 != 0 {\n                count += 1;\n \
    \           }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpkoy2o8jg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut counter = 0;\n    for num in nums {\n        if num % 10 == 1 &&\
    \ num % 10 == 3 && num % 10 == 5 && num % 10 == 7 && num % 10 == 9 {\n       \
    \     counter += 1;\n        }\n        if num % 10 == 1 && num % 10 == 3 && num\
    \ % 10 == 5 && num % 10 == 7 && num % 10 == 9 {\n            counter += 1;\n \
    \       }\n        if num % 10 == 1 && num % 10 == 3 && num % 10 == 5 && num %\
    \ 10 == 7 && num % 10 == 9 {\n            counter += 1;\n        }\n        if\
    \ num % 10 == 1 && num % 10 == 3 && num % 10 == 5 && num % 10 == 7 && num % 10\
    \ == 9 {\n            counter += 1;\n        }\n        if num % 10 == 1 && num\
    \ % 10 == 3 && num % 10 == 5 && num % 10 == 7 && num % 10 == 9 {\n           \
    \ counter += 1;\n        }\n    }\n    counter as isize\n}\n\nfn main() {\n  \
    \  let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp2dgzxo_p.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    let mut cnt = 0;\n    for i in 0..len {\n    \
    \    if nums[i] > 10 && (nums[i] & 1) != (nums[len-i-1] & 1) {\n            cnt\
    \ += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmppuat8g0y.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for i in nums {\n        if i >= 10 && i % 2 != 0 {\n\
    \            sum += 1;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpxnrcrn73.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums\n        .iter()\n        .filter(|x| x > 10)\n        .filter(|x| {\n\
    \            ((x % 10) % 2) == 1\n        })\n        .filter(|x| {\n        \
    \    ((x % 10) % 2) == 0\n        })\n        .count()\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwp788y4w.rs:12:25\n   |\n\
    12 |         .filter(|x| x > 10)\n   |                         ^^ expected `&&isize`,\
    \ found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpwp788y4w.rs:14:17\n\
    \   |\n14 |             ((x % 10) % 2) == 1\n   |               - ^ -- {integer}\n\
    \   |               |\n   |               &&isize\n   |\nhelp: `%` can be used\
    \ on `isize`, you can dereference `x`\n   |\n14 |             ((*x % 10) % 2)\
    \ == 1\n   |               +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpwp788y4w.rs:17:17\n   |\n17 |             ((x % 10) % 2) == 0\n\
    \   |               - ^ -- {integer}\n   |               |\n   |             \
    \  &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |             ((*x % 10) % 2) == 0\n   |               +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwp788y4w.rs:10:5\n   |\n9  |   fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                         ----- expected\
    \ `isize` because of return type\n10 | /     nums\n11 | |         .iter()\n12\
    \ | |         .filter(|x| x > 10)\n13 | |         .filter(|x| {\n...  |\n18 |\
    \ |         })\n19 | |         .count()\n   | |________________^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums {\n        if n == 0 {\n            continue;\n\
    \        }\n        if n > 10 && n % 10 == 1 && n % 2 == 1 {\n            sum\
    \ += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxlph6st9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut counter = 0;\n    for i in nums.iter() {\n        if i > 10 && i\
    \ % 2 == 0 {\n            if i % 2 == 1 {\n                counter += 1;\n   \
    \         }\n        } else {\n            counter += 0;\n        }\n    }\n \
    \   counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmb4r13vs.rs:12:16\n   |\n\
    12 |         if i > 10 && i % 2 == 0 {\n   |                ^^\n   |         \
    \       |\n   |                expected `&isize`, found integer\n   |        \
    \        help: consider borrowing here: `&10`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() <= 1 {\n        nums.len()\n    }\n    else {\n        if nums[0]\
    \ > 10 && (nums[0] % 2 != 0 || nums[0] % 2 != 1) {\n            nums.iter().filter(|num|\
    \ num > 10).count()\n        }\n        else {\n            0\n        }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxpv7dgy0.rs:11:9\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n10 |     if\
    \ nums.len() <= 1 {\n11 |         nums.len()\n   |         ^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |         nums.len().try_into().unwrap()\n\
    \   |                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxpv7dgy0.rs:15:44\n   |\n15 |             nums.iter().filter(|num|\
    \ num > 10).count()\n   |                                            ^^ expected\
    \ `&&isize`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpv7dgy0.rs:15:13\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |              \
    \                         ----- expected `isize` because of return type\n...\n\
    15 |             nums.iter().filter(|num| num > 10).count()\n   |            \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |             nums.iter().filter(|num| num > 10).count().try_into().unwrap()\n\
    \   |                                                       ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|n| n > 10 && n % 2 == 1 && n % 3 == 1).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe9rzfr9t.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1 && n % 3 == 1).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpe9rzfr9t.rs:10:40\n\
    \   |\n10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1 && n % 3 == 1).count()\n\
    \   |                                      - ^ - {integer}\n   |             \
    \                         |\n   |                                      &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n   |\n10 | \
    \    nums.iter().filter(|n| n > 10 && *n % 2 == 1 && n % 3 == 1).count()\n   |\
    \                                      +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpe9rzfr9t.rs:10:54\n   |\n10 |     nums.iter().filter(|n|\
    \ n > 10 && n % 2 == 1 && n % 3 == 1).count()\n   |                          \
    \                          - ^ - {integer}\n   |                             \
    \                       |\n   |                                              \
    \      &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n\
    \   |\n10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1 && *n % 3 == 1).count()\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe9rzfr9t.rs:10:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n10 |     nums.iter().filter(|n| n > 10 && n % 2 == 1\
    \ && n % 3 == 1).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|n|\
    \ n > 10 && n % 2 == 1 && n % 3 == 1).count().try_into().unwrap()\n   |      \
    \                                                                 ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanation"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10).filter(|&x| x.is_odd()).count()\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplaln1l6o.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10).filter(|&x| x.is_odd()).count()\n   |\
    \                                 ^^\n   |                                 |\n\
    \   |                                 expected `&isize`, found integer\n   | \
    \                                help: consider borrowing here: `&10`\n\nerror[E0599]:\
    \ no method named `is_odd` found for reference `&isize` in the current scope\n\
    \  --> /tmp/tmplaln1l6o.rs:10:51\n   |\n10 |     nums.iter().filter(|&x| x > 10).filter(|&x|\
    \ x.is_odd()).count()\n   |                                                  \
    \ ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplaln1l6o.rs:10:5\n   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize\
    \ {\n   |                                       ----- expected `isize` because\
    \ of return type\n10 |     nums.iter().filter(|&x| x > 10).filter(|&x| x.is_odd()).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&x|\
    \ x > 10).filter(|&x| x.is_odd()).count().try_into().unwrap()\n   |          \
    \                                                          ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10 && x % 2 == 1 && x % 3 == 0).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2su9hq4g.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10 && x % 2 == 1 && x % 3 == 0).count()\n\
    \   |                                 ^^\n   |                               \
    \  |\n   |                                 expected `&isize`, found integer\n\
    \   |                                 help: consider borrowing here: `&10`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp2su9hq4g.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|&x|\
    \ x > 10 && x % 2 == 1 && x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&x|\
    \ x > 10 && x % 2 == 1 && x % 3 == 0).count().try_into().unwrap()\n   |      \
    \                                                                  ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n % 10 > 10 {\n     \
    \       count += 1;\n        }\n        if n % 10 < 10 && (n % 10 % 2 != 0) {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmpvgbwlntc.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0\n    for n in nums {\n        if n % 10 != 0 {\n      \
    \      continue;\n        }\n        if ((n % 100) < 10 || (n % 100) > 20) {\n\
    \            continue;\n        }\n        if ((n % 1000) < 10 || (n % 1000) >\
    \ 20) {\n            continue;\n        }\n        if ((n % 10000) < 10 || (n\
    \ % 10000) > 20) {\n            continue;\n        }\n        if n % 1000000 >\
    \ 10 {\n            continue;\n        }\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6zc6o1eb.rs:10:22\n\
    \   |\n10 |     let mut count = 0\n   |                      ^ help: add `;` here\n\
    11 |     for n in nums {\n   |     --- unexpected token\n\nwarning: unnecessary\
    \ parentheses around `if` condition\n  --> /tmp/tmp6zc6o1eb.rs:15:12\n   |\n15\
    \ |         if ((n % 100) < 10 || (n % 100) > 20) {\n   |            ^       \
    \                         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n15 -         if ((n % 100) < 10 || (n %\
    \ 100) > 20) {\n15 +         if (n % 100) < 10 || (n % 100) > 20 {\n   | \n\n\
    warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6zc6o1eb.rs:18:12\n\
    \   |\n18 |         if ((n % 1000) < 10 || (n % 1000) > 20) {\n   |          \
    \  ^                                  ^\n   |\nhelp: remove these parentheses\n\
    \   |\n18 -         if ((n % 1000) < 10 || (n % 1000) > 20) {\n18 +         if\
    \ (n % 1000) < 10 || (n % 1000) > 20 {\n   | \n\nwarning: unnecessary parentheses\
    \ around `if` condition\n  --> /tmp/tmp6zc6o1eb.rs:21:12\n   |\n21 |         if\
    \ ((n % 10000) < 10 || (n % 10000) > 20) {\n   |            ^                \
    \                    ^\n   |\nhelp: remove these parentheses\n   |\n21 -     \
    \    if ((n % 10000) < 10 || (n % 10000) > 20) {\n21 +         if (n % 10000)\
    \ < 10 || (n % 10000) > 20 {\n   | \n\nerror: aborting due to previous error;\
    \ 3 warnings emitted\n\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    \n    let mut sum = 0;\n    \n    for i in nums.iter(){\n        if i > 10{\n\
    \            sum += 1;\n        }\n        if i % 2 == 0 && i % 3 != 0{\n    \
    \        sum += 1;\n        }\n    }\n    \n    sum\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpshn2kflk.rs:14:16\n   |\n\
    14 |         if i > 10{\n   |                ^^\n   |                |\n   | \
    \               expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&10`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10 &&\n                               (x % 2\
    \ != 0 || x % 2 != 1)).count();\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptfp79391.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10 &&\n   |                             \
    \    ^^\n   |                                 |\n   |                        \
    \         expected `&isize`, found integer\n   |                             \
    \    help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmptfp79391.rs:9:39\n  |\n9 | fn specialFilter(nums: Vec<isize>) ->\
    \ isize {\n  |    -------------                      ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    \n    \n    let mut n = 0;\n    for n in nums.iter() {\n        if n % 10\
    \ > 9 {\n            break;\n        }\n        if n % 10 == 1 && n % 2 == 0 {\n\
    \            break;\n        }\n    }\n    \n    return n;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl5y7jvc2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10 && x % 2 == 1 && x % 3 == 1).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ygopn3r.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10 && x % 2 == 1 && x % 3 == 1).count()\n\
    \   |                                 ^^\n   |                               \
    \  |\n   |                                 expected `&isize`, found integer\n\
    \   |                                 help: consider borrowing here: `&10`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1ygopn3r.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|&x|\
    \ x > 10 && x % 2 == 1 && x % 3 == 1).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&x|\
    \ x > 10 && x % 2 == 1 && x % 3 == 1).count().try_into().unwrap()\n   |      \
    \                                                                  ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for i in nums {\n        if i.is_multiple_of(10) &&\
    \ i.is_odd() && i.is_odd() {\n            cnt += 1;\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_multiple_of` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpdq7mp9lq.rs:12:14\n   |\n12 |         if i.is_multiple_of(10)\
    \ && i.is_odd() && i.is_odd() {\n   |              ^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `next_multiple_of`\n\nerror[E0599]:\
    \ no method named `is_odd` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpdq7mp9lq.rs:12:38\n   |\n12 |         if i.is_multiple_of(10) && i.is_odd()\
    \ && i.is_odd() {\n   |                                      ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `is_odd` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpdq7mp9lq.rs:12:52\n   |\n12 |         if\
    \ i.is_multiple_of(10) && i.is_odd() && i.is_odd() {\n   |                   \
    \                                 ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for num in nums {\n        if num > 10 && num % 2 ==\
    \ 0 && num > floor(num / 2) {\n            cnt += 1;\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmp7pew9yfs.rs:12:46\n\
    \   |\n12 |         if num > 10 && num % 2 == 0 && num > floor(num / 2) {\n  \
    \ |                                              ^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 2\
    \ != 0 && num % 3 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpsdyechhu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for num in nums {\n        if num % 10 == 1 && num\
    \ % 100 == 1 && num % 1000 == 1 && (num % 10000 % 2 == 1 || num % 1000000 % 2\
    \ == 1) {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfitefdrj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = nums.len();\n    let mut first = 1;\n    let mut last = 0;\n\
    \    for n in nums {\n        if n >= 10 && first % 2 == 1 && last % 2 == 1 {\n\
    \            count -= 1;\n        }\n        first += n;\n        last += n;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuoprnqqn.rs:20:5\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n...\n20 |  \
    \   count\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n20 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut evens = nums.filter(|&x| x % 2 == 0);\n    let mut odds = nums.filter(|&x|\
    \ x % 2 != 0);\n    evens.sort();\n    odds.sort();\n    if evens.len() == 0 &&\
    \ odds.len() == 0 {\n        nums.len()\n    } else if evens.len() == 1 {\n  \
    \      evens.iter().find(|&x| x > 10) && odds.iter().find(|&x| x > 10) && x ==\
    \ evens.last().unwrap()\n    } else if evens.len() == 2 {\n        evens.iter().find(|&x|\
    \ x > 10) && odds.iter().find(|&x| x > 10) && x == evens.last().unwrap() && x\
    \ % 2 == 1\n    } else {\n        evens.iter().find(|&x| x > 10) && odds.iter().find(|&x|\
    \ x > 10) && x == evens.last().unwrap() && x > 10\n    }\n}\n\nfn main() {\n \
    \   let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpzh7tfrvn.rs:17:76\n\
    \   |\n17 |         evens.iter().find(|&x| x > 10) && odds.iter().find(|&x| x\
    \ > 10) && x == evens.last().unwrap()\n   |                                  \
    \                                          ^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `x` in this scope\n  --> /tmp/tmpzh7tfrvn.rs:19:76\n   |\n\
    19 |         evens.iter().find(|&x| x > 10) && odds.iter().find(|&x| x > 10) &&\
    \ x == evens.last().unwrap() && x % 2 == 1\n   |                             \
    \                                               ^ not found in this scope\n\n\
    error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpzh7tfrvn.rs:19:106\n\
    \   |\n19 |         evens.iter().find(|&x| x > 10) && odds.iter().find(|&x| x\
    \ > 10) && x == evens.last().unwrap() && x % 2 == 1\n   |                    \
    \                                                                            \
    \          ^ not found in this scope\n\nerror[E0425]: cannot find value `x` in\
    \ this scope\n  --> /tmp/tmpzh7tfrvn.rs:21:76\n   |\n21 |         evens.iter().find(|&x|\
    \ x > 10) && odds.iter().find(|&x| x > 10) && x == evens.last().unwrap() && x\
    \ > 10\n   |                                                                 \
    \           ^ not found in this scope\n\nerror[E0425]: cannot find value `x` in\
    \ this scope\n  --> /tmp/tmpzh7tfrvn.rs:21:106\n   |\n21 |         evens.iter().find(|&x|\
    \ x > 10) && odds.iter().find(|&x| x > 10) && x == evens.last().unwrap() && x\
    \ > 10\n   |                                                                 \
    \                                         ^ not found in this scope\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpzh7tfrvn.rs:10:26\n    |\n10\
    \  |       let mut evens = nums.filter(|&x| x % 2 == 0);\n    |              \
    \              ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is requ"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums_copy = nums;\n    for &i in nums_copy.iter() {\n        if i\
    \ > 10 &&\n            (i % 2 != 1 && i % 3 != 1 && i % 5 != 1 && i % 7 != 1 &&\
    \ i % 9 != 1) {\n            nums_copy.remove(i);\n        }\n    }\n    nums_copy.len()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrqc2lcg.rs:14:30\n   |\n\
    14 |             nums_copy.remove(i);\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |             nums_copy.remove(i.try_into().unwrap());\n\
    \   |                               ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplrqc2lcg.rs:17:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n...\n17 |     nums_copy.len()\n   |     ^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |     nums_copy.len().try_into().unwrap()\n\
    \   |                    ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut counter = 0;\n    for n in nums {\n        if n > 10 && (n % 2 ==\
    \ 0 || n % 3 == 0) {\n            counter += 1;\n        }\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpv0xhk0qk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut i = nums.len();\n    while i != 0 {\n        if nums[i - 1] % 2 ==\
    \ 1 && nums[i] % 2 == 1 && nums[i - 1] != nums[i] {\n            return i;\n \
    \       }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4p244bx2.rs:13:20\n   |\n\
    13 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0\n    for x in nums {\n        if x > 10 {\n           \
    \ let first_odd = nums.iter().find(|x| *x % 2 == 0).unwrap();\n            let\
    \ last_odd = nums.iter().find(|x| *x % 2 == 1).unwrap();\n            if first_odd\
    \ && last_odd && first_odd % 2 == 0 && last_odd % 2 == 1 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp7fprjn5m.rs:10:22\n\
    \   |\n10 |     let mut count = 0\n   |                      ^ help: add `;` here\n\
    11 |     for x in nums {\n   |     --- unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7fprjn5m.rs:15:16\n   |\n15 |             if first_odd\
    \ && last_odd && first_odd % 2 == 0 && last_odd % 2 == 1 {\n   |             \
    \   ^^^^^^^^^ expected `bool`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7fprjn5m.rs:15:29\n   |\n15 |             if first_odd && last_odd\
    \ && first_odd % 2 == 0 && last_odd % 2 == 1 {\n   |                         \
    \    ^^^^^^^^ expected `bool`, found `&isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut i = 0; // Initialize i\n    for n in nums.iter() {\n        if n\
    \ % 10 > 0 && n % 10 != 1 && (n - n % 10) % 2 == 0 {\n            i += 1;\n  \
    \      }\n    }\n    i\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphnfygnur.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0; \n    for i in nums.iter() {\n        if i > 10 && (i\
    \ % 2 == 1 && i % 3 != 1 || i % 5 == 1) {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqqgb2ux.rs:12:16\n   |\n\
    12 |         if i > 10 && (i % 2 == 1 && i % 3 != 1 || i % 5 == 1) {\n   |   \
    \             ^^\n   |                |\n   |                expected `&isize`,\
    \ found integer\n   |                help: consider borrowing here: `&10`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums.iter() {\n        if n > 10 && n % 2\
    \ == 1 && n % 4 == 1 {\n            sum += 1;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwzc14s4q.rs:12:16\n   |\n\
    12 |         if n > 10 && n % 2 == 1 && n % 4 == 1 {\n   |                ^^\n\
    \   |                |\n   |                expected `&isize`, found integer\n\
    \   |                help: consider borrowing here: `&10`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums = nums.clone();\n    let n = nums.len();\n    if n > 1 {\n \
    \       let mut i = 0;\n        while i < n {\n            if nums[i] % 2 == 1\
    \ &&\n                ((nums[i-1] % 2 != 0 && nums[i-1] % 2 == 1) && (nums[i+1]\
    \ % 2 != 0 && nums[i+1] % 2 == 1)) {\n                i += 1;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    nums[0]\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp8vq3xzan.rs:16:24

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.is_empty() {\n        return 0;\n    }\n\n    // Create a vector\
    \ of bools with length the number of elements in `nums`.\n    // It will store\
    \ `true` for each element that is odd and all are even.\n    let mut odd_bools\
    \ = Vec::with_capacity(nums.len());\n    for i in 0..nums.len() {\n        if\
    \ nums[i] % 2 == 1 {\n            odd_bools.push(true);\n        } else {\n  \
    \          odd_bools.push(false);\n        }\n    }\n    \n    // Count the number\
    \ of elements that are greater than 10 and all are odd.\n    let mut odd_bool_count\
    \ = 0;\n    for i in 0..nums.len() {\n        if nums[i] > 10 && odd_bools[i]\
    \ && odd_bools[i - 1] {\n            odd_bool_count += 1;\n        }\n    }\n\
    \    \n    return odd_bool_count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp8fdnj6gx.rs:28:54

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    for n in nums {\n        if n > 10 {\n            continue;\n        }\n\
    \        if n % 2 == 1 {\n            count += 1;\n        }\n        if n % 2\
    \ == 0 {\n            if n % 12 == 1 {\n                count += 1;\n        \
    \    }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpjimq3m_2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums.iter() {\n        count = if num\
    \ > 10 && num % 2 == 1 && num % 2 == 1 &&\n            ((num / 10) % 2 == 1 &&\
    \ (num / 10) % 2 == 0) ||\n            (num % 2 == 0 && (num / 10) % 2 == 0) {\n\
    \            count + 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkhbix4_5.rs:12:26\n   |\n\
    12 |         count = if num > 10 && num % 2 == 1 && num % 2 == 1 &&\n   |    \
    \                      ^^\n   |                          |\n   |             \
    \             expected `&isize`, found integer\n   |                         \
    \ help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkhbix4_5.rs:14:51\n   |\n14 |               (num % 2 == 0 && (num /\
    \ 10) % 2 == 0) {\n   |  ___________________________________________________^\n\
    15 | |             count + 1;\n   | |                      - help: remove this\
    \ semicolon\n16 | |         }\n   | |_________^ expected integer, found `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10).count();\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpog5mdzf_.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10).count();\n   |                      \
    \           ^^\n   |                                 |\n   |                 \
    \                expected `&isize`, found integer\n   |                      \
    \           help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpog5mdzf_.rs:9:39\n  |\n9 | fn specialFilter(nums: Vec<isize>) ->\
    \ isize {\n  |    -------------                      ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums\n        .iter()\n        .filter(|num| num > 10 && num % 2 == 0 &&\
    \ num % 4 != 0)\n        .count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5z5p55gg.rs:12:29\n   |\n\
    12 |         .filter(|num| num > 10 && num % 2 == 0 && num % 4 != 0)\n   |   \
    \                          ^^ expected `&&isize`, found integer\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp5z5p55gg.rs:12:39\n   |\n\
    12 |         .filter(|num| num > 10 && num % 2 == 0 && num % 4 != 0)\n   |   \
    \                                --- ^ - {integer}\n   |                     \
    \              |\n   |                                   &&isize\n   |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `num`\n   |\n12 |         .filter(|num|\
    \ num > 10 && *num % 2 == 0 && num % 4 != 0)\n   |                           \
    \        +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp5z5p55gg.rs:12:55\n\
    \   |\n12 |         .filter(|num| num > 10 && num % 2 == 0 && num % 4 != 0)\n\
    \   |                                                   --- ^ - {integer}\n  \
    \ |                                                   |\n   |                \
    \                                   &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `num`\n   |\n12 |         .filter(|num| num > 10 && num\
    \ % 2 == 0 && *num % 4 != 0)\n   |                                           \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5z5p55gg.rs:10:5\n\
    \   |\n9  |   fn specialFilter(nums: Vec<isize>) -> isize {\n   |            \
    \                             ----- expected `isize` because of return type\n\
    10 | /     nums\n11 | |         .iter()\n12 | |         .filter(|num| num > 10\
    \ && num % 2 == 0 && num % 4 != 0)\n13 | |         .count()\n   | |________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n13 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && (x % 10) != 1 && (x % 10) != 5).count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp7o910mh.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && (x % 10) != 1 && (x % 10) != 5).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpp7o910mh.rs:10:41\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && (x % 10) != 1 && (x % 10) !=\
    \ 5).count()\n   |                                       - ^ -- {integer}\n  \
    \ |                                       |\n   |                            \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     nums.iter().filter(|x| x > 10 && (*x % 10) != 1 && (x %\
    \ 10) != 5).count()\n   |                                       +\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpp7o910mh.rs:10:58\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && (x % 10) != 1 && (x % 10) != 5).count()\n\
    \   |                                                        - ^ -- {integer}\n\
    \   |                                                        |\n   |         \
    \                                               &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `x`\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (x % 10) != 1 && (*x % 10) != 5).count()\n   |                   \
    \                                     +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpp7o910mh.rs:10:5\n   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize\
    \ {\n   |                                       ----- expected `isize` because\
    \ of return type\n10 |     nums.iter().filter(|x| x > 10 && (x % 10) != 1 && (x\
    \ % 10) != 5).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && (x % 10) != 1 && (x % 10) != 5).count().try_into().unwrap()\n   |\
    \                                                                            \
    \ ++++++++++++++++++++\n\nerr"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = 0usize;\n    for num in nums {\n        if num >= 10 && num %\
    \ 2 == 1 && num % 100 == 1 {\n            n += 1;\n        }\n    }\n    n\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmyzm7kmz.rs:16:5\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n...\n16 |  \
    \   n\n   |     ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     n.try_into().unwrap()\n   |      ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        cnt += if n % 10 > 10 && n\
    \ % 10 == 9 && *n % 10 == 1 {\n            1\n        } else {\n            0\n\
    \        };\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp48xfcuyt.rs:12:49\n\
    \   |\n12 |         cnt += if n % 10 > 10 && n % 10 == 9 && *n % 10 == 1 {\n \
    \  |                                                 ^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter2(|x| x > 10).count(|&x| x > 10 && x % 2 != 0)\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `filter2` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp16hrafo8.rs:10:17\n   |\n10 |     nums.iter().filter2(|x|\
    \ x > 10).count(|&x| x > 10 && x % 2 != 0)\n   |                 ^^^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut counter: isize = 0;\n    for i in nums.iter() {\n        if i > 10\
    \ {\n            counter += 1;\n            if i.is_odd() && nums[counter-1] %\
    \ 2 == 1 {\n                counter += 1;\n            }\n        }\n    }\n \
    \   counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_ukt8ar5.rs:12:16\n   |\n\
    12 |         if i > 10 {\n   |                ^^\n   |                |\n   |\
    \                expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&10`\n\nerror[E0599]: no method named `is_odd` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmp_ukt8ar5.rs:14:18\n   |\n14 | \
    \            if i.is_odd() && nums[counter-1] % 2 == 1 {\n   |               \
    \   ^^^^^^ method not found in `&isize`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp_ukt8ar5.rs:14:30\n   |\n14 |         \
    \    if i.is_odd() && nums[counter-1] % 2 == 1 {\n   |                       \
    \       ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    specialFilterImpl(nums).unwrap()\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `specialFilterImpl` in this scope\n\
    \  --> /tmp/tmpkj_zcwzl.rs:10:5\n   |\n10 |     specialFilterImpl(nums).unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let even = nums.filter(|x| x % 2 == 0);\n    let odd = nums.filter(|x| x\
    \ % 2 != 0);\n\n    even.filter(|x| {\n        let (first, last) = x.to_string().split_last_mut();\n\
    \        last.last().unwrap()\n    }).count() as isize\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpm9m8g_mt.rs:10:21\n\
    \    |\n10  |       let even = nums.filter(|x| x % 2 == 0);\n    |           \
    \            ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpm9m8g_mt.rs:11:20\n    |\n11\
    \  |       let odd = nums.filter(|x| x % 2 != 0);\n    |                     \
    \ ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<isize>: Iterator`\n           \
    \ which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n\
    \            which is required by `&mut [isize]: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n % 10 > 0 && n % 10 !=\
    \ 1 && n % 10 != 9 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0s2kiv2k.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums = nums.clone();\n    let mut cnt = 0;\n    while nums.len()\
    \ > 0 {\n        cnt += 1;\n        if nums[0] % 2 == 0 && nums[0] % 2 != nums[0]\
    \ / 2 {\n            cnt += 1;\n        }\n        if nums.len() == 1 {\n    \
    \        break;\n        }\n        let first_odd = nums[0] % 2;\n        for\
    \ v in &nums[1..] {\n            if v % 2 == 1 && v % 2 != v / 2 {\n         \
    \       cnt += 1;\n            }\n        }\n        if first_odd != nums[0] /\
    \ 2 {\n            cnt += 1;\n        }\n        nums = nums[1..];\n    }\n  \
    \  cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkiylhnvb.rs:29:16\n   |\n\
    10 |     let mut nums = nums.clone();\n   |                    ------------ expected\
    \ due to this value\n...\n29 |         nums = nums[1..];\n   |               \
    \ ^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n   |          \
    \      |\n   |                expected struct `Vec`, found slice `[isize]`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter()\n        .filter_map(|&n| {\n            if n % 2 == 1 {\n  \
    \              if n % 2 == 0 {\n                    if n % 8 == 0 {\n        \
    \                true\n                    } else {\n                        false\n\
    \                    }\n                } else {\n                    true\n \
    \               }\n            } else {\n                false\n            }\n\
    \        })\n        .count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf5147ns9.rs:15:25\n   |\n\
    15 |                         true\n   |                         ^^^^ expected\
    \ enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n  \
    \            found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n15 |                         Some(true)\n   |                         +++++\
    \    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf5147ns9.rs:17:25\n  \
    \ |\n17 |                         false\n   |                         ^^^^^ expected\
    \ enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n  \
    \            found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |                         Some(false)\n   |                        \
    \ +++++     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf5147ns9.rs:20:21\n\
    \   |\n20 |                     true\n   |                     ^^^^ expected enum\
    \ `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n       \
    \       found type `bool`\nhelp: try wrapping the expression in `Some`\n   |\n\
    20 |                     Some(true)\n   |                     +++++    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf5147ns9.rs:23:17\n   |\n23 |              \
    \   false\n   |                 ^^^^^ expected enum `Option`, found `bool`\n \
    \  |\n   = note: expected enum `Option<_>`\n              found type `bool`\n\
    help: try wrapping the expression in `Some`\n   |\n23 |                 Some(false)\n\
    \   |                 +++++     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf5147ns9.rs:10:5\n\
    \   |\n9  |   fn specialFilter(nums: Vec<isize>) -> isize {\n   |            \
    \                             ----- expected `isize` because of return type\n\
    10 | /     nums.iter()\n11 | |         .filter_map(|&n| {\n12 | |            \
    \ if n % 2 == 1 {\n13 | |                 if n % 2 == 0 {\n...  |\n25 | |    \
    \     })\n26 | |         .count()\n   | |________________^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n26 |         .count().try_into()"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    specialFilterImpl(nums, vec![]).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `specialFilterImpl` in this scope\n\
    \  --> /tmp/tmploqofux_.rs:10:5\n   |\n10 |     specialFilterImpl(nums, vec![]).unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut i = 0;\n    while i < nums.len() {\n        if nums[i] > 10 {\n \
    \           let first = nums[i] % 10;\n            let last = nums[i + 1] % 10;\n\
    \            if first % 2 != last % 2 {\n                return i;\n         \
    \   }\n        }\n        i += 1;\n    }\n    nums.len()\n}\n\nfn main() {\n \
    \   let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv9zowmzp.rs:16:24\n   |\n\
    16 |                 return i;\n   |                        ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |                 return i.try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv9zowmzp.rs:21:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n...\n21 |     nums.len()\n   |     ^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n21 |     nums.len().try_into().unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut numsCopy = nums.iter().cloned().collect::<Vec<isize>>();\n    let\
    \ len = nums.len();\n    \n    numsCopy.sort_unstable();\n    for num in numsCopy\
    \ {\n        if num % 2 == 1 && num % 3 == 1 && num % 5 == 1 && num % 7 == 1 &&\
    \ num % 9 == 1 {\n            if num % 2 != 0 && num % 3 != 0 && num % 5 != 0\
    \ && num % 7 != 0 && num % 9 != 0 {\n                numsCopy.retain(|x| x > 10);\n\
    \                numsCopy.retain(|x| x > 9 && !(x % 2));\n                numsCopy.retain(|x|\
    \ x > 7 && !(x % 3));\n                numsCopy.retain(|x| x > 5 && !(x % 5));\n\
    \                numsCopy.retain(|x| x > 3 && !(x % 7));\n                numsCopy.retain(|x|\
    \ x > 1 && !(x % 9));\n                break;\n            }\n        }\n    }\n\
    \    numsCopy.len()\n}\n\nfn main() {\n    let candidate = specialFilter;\n  \
    \  assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp05t8t0qo.rs:17:41\n   |\n\
    17 |                 numsCopy.retain(|x| x > 10);\n   |                      \
    \                   ^^\n   |                                         |\n   | \
    \                                        expected `&isize`, found integer\n  \
    \ |                                         help: consider borrowing here: `&10`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp05t8t0qo.rs:18:41\n   |\n18 |\
    \                 numsCopy.retain(|x| x > 9 && !(x % 2));\n   |              \
    \                           ^\n   |                                         |\n\
    \   |                                         expected `&isize`, found integer\n\
    \   |                                         help: consider borrowing here: `&9`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp05t8t0qo.rs:18:46\n   |\n18 |\
    \                 numsCopy.retain(|x| x > 9 && !(x % 2));\n   |              \
    \                                ^^^^^^^^ expected `bool`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp05t8t0qo.rs:19:41\n   |\n19 |              \
    \   numsCopy.retain(|x| x > 7 && !(x % 3));\n   |                            \
    \             ^\n   |                                         |\n   |        \
    \                                 expected `&isize`, found integer\n   |     \
    \                                    help: consider borrowing here: `&7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp05t8t0qo.rs:19:46\n   |\n19 |              \
    \   numsCopy.retain(|x| x > 7 && !(x % 3));\n   |                            \
    \                  ^^^^^^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05t8t0qo.rs:20:41\n   |\n20 |                 numsCopy.retain(|x|\
    \ x > 5 && !(x % 5));\n   |                                         ^\n   |  \
    \                                       |\n   |                              \
    \           expected `&isize`, found integer\n   |                           \
    \              help: consider borrowing here: `&5`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05t8t0qo.rs:20:46\n   |\n20 |             "
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut result = nums.len();\n    for i in nums.iter() {\n        if i >\
    \ 10 && i % 2 != 0 && i / 10 % 2 != 0 {\n            result--;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpfqr1y3pd.rs:13:21\n\
    \   |\n13 |             result--;\n   |                     ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfqr1y3pd.rs:12:16\n   |\n12 |\
    \         if i > 10 && i % 2 != 0 && i / 10 % 2 != 0 {\n   |                ^^\n\
    \   |                |\n   |                expected `&isize`, found integer\n\
    \   |                help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfqr1y3pd.rs:16:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     result.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.is_empty() {\n        return 0;\n    }\n    let mut even = true;\n\
    \    let mut odd = 0;\n    for &num in nums {\n        if num % 2 == 0 {\n   \
    \         even = true;\n            odd = num as isize;\n        } else {\n  \
    \          if even && odd % 2 == 1 {\n                return num as isize;\n \
    \           }\n            even = false;\n        }\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp07mb7k_b.rs:15:9\n   |\n\
    15 |     for &num in nums {\n   |         ^^^^    ---- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let size = nums.len();\n    for i in 0..size {\n        let num = nums[i];\n\
    \        if num > 10 &&\n            (((num % 10) as i32) % 2 != 0) &&\n     \
    \       (((num % 10) as i32) % 2 != 1) {\n            return i + 1;\n        }\n\
    \    }\n    size\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprnw4ri_2.rs:16:20\n   |\n\
    16 |             return i + 1;\n   |                    ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |             return (i + 1).try_into().unwrap();\n\
    \   |                    +     +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprnw4ri_2.rs:19:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n...\n19 |     size\n   |     ^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |     size.try_into().unwrap()\n\
    \   |         ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter()\n        .filter(|&num| num > 10)\n        .filter(|&num| num\
    \ % 2 != 0)\n        .filter(|&num| num % 2 != 0 && num > 10)\n        .count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqgdog6sn.rs:11:30\n   |\n\
    11 |         .filter(|&num| num > 10)\n   |                              ^^\n\
    \   |                              |\n   |                              expected\
    \ `&isize`, found integer\n   |                              help: consider borrowing\
    \ here: `&10`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqgdog6sn.rs:13:46\n\
    \   |\n13 |         .filter(|&num| num % 2 != 0 && num > 10)\n   |           \
    \                                   ^^\n   |                                 \
    \             |\n   |                                              expected `&isize`,\
    \ found integer\n   |                                              help: consider\
    \ borrowing here: `&10`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqgdog6sn.rs:10:5\n\
    \   |\n9  |   fn specialFilter(nums: Vec<isize>) -> isize {\n   |            \
    \                             ----- expected `isize` because of return type\n\
    10 | /     nums.iter()\n11 | |         .filter(|&num| num > 10)\n12 | |      \
    \   .filter(|&num| num % 2 != 0)\n13 | |         .filter(|&num| num % 2 != 0 &&\
    \ num > 10)\n14 | |         .count()\n   | |________________^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&i| i >= 10 && i % 2 == 1 && i % 3 != 1).count()\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_u4kq284.rs:10:34\n   |\n\
    10 |     nums.iter().filter(|&i| i >= 10 && i % 2 == 1 && i % 3 != 1).count()\n\
    \   |                                  ^^\n   |                              \
    \    |\n   |                                  expected `&isize`, found integer\n\
    \   |                                  help: consider borrowing here: `&10`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_u4kq284.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|&i|\
    \ i >= 10 && i % 2 == 1 && i % 3 != 1).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&i|\
    \ i >= 10 && i % 2 == 1 && i % 3 != 1).count().try_into().unwrap()\n   |     \
    \                                                                    ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    let mut nums_copy = nums.clone();\n    \n    for\
    \ elem in nums_copy {\n        if elem == 0 { continue; }\n        if elem > 10\
    \ {\n            if nums_copy.last() > 0 {\n                if nums_copy.last().is_odd()\
    \  { \n                    return len + 1;\n                }\n            }\n\
    \            if nums_copy.first() > 0 {\n                if nums_copy.first().is_odd()\
    \  { \n                    return len + 1;\n                }\n            }\n\
    \        }\n    }\n    \n    0\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9tire7yb.rs:16:35\n   |\n\
    16 |             if nums_copy.last() > 0 {\n   |                             \
    \      ^ expected enum `Option`, found integer\n   |\n   = note: expected enum\
    \ `Option<&isize>`\n              found type `{integer}`\n\nerror[E0599]: no method\
    \ named `is_odd` found for enum `Option` in the current scope\n  --> /tmp/tmp9tire7yb.rs:17:37\n\
    \   |\n17 |                 if nums_copy.last().is_odd()  { \n   |           \
    \                          ^^^^^^ method not found in `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9tire7yb.rs:18:28\n   |\n18 |              \
    \       return len + 1;\n   |                            ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |                     return (len\
    \ + 1).try_into().unwrap();\n   |                            +       +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9tire7yb.rs:21:36\n   |\n21 |\
    \             if nums_copy.first() > 0 {\n   |                               \
    \     ^ expected enum `Option`, found integer\n   |\n   = note: expected enum\
    \ `Option<&isize>`\n              found type `{integer}`\n\nerror[E0599]: no method\
    \ named `is_odd` found for enum `Option` in the current scope\n  --> /tmp/tmp9tire7yb.rs:22:38\n\
    \   |\n22 |                 if nums_copy.first().is_odd()  { \n   |          \
    \                            ^^^^^^ method not found in `Option<&isize>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10 && x % 2 != 0).count()\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxkg_iecl.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10 && x % 2 != 0).count()\n   |         \
    \                        ^^\n   |                                 |\n   |    \
    \                             expected `&isize`, found integer\n   |         \
    \                        help: consider borrowing here: `&10`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxkg_iecl.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|&x| x > 10 && x\
    \ % 2 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&x|\
    \ x > 10 && x % 2 != 0).count().try_into().unwrap()\n   |                    \
    \                                      ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() < 2 {\n        return 0;\n    }\n    let mut cnt = 0;\n   \
    \ let mut first = 1;\n    let mut last = 0;\n    for i in 0..nums.len() {\n  \
    \      if nums[i] > 10 {\n            if first % 2 == 1 {\n                cnt\
    \ += 1;\n                last = 0;\n            }\n            first = 1;\n  \
    \      } else {\n            first = 0;\n        }\n        if last % 2 == 1 {\n\
    \            cnt += 1;\n        }\n        last += 1;\n    }\n    cnt\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4pcymy_a.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums = nums;\n    let mut sum = 0;\n    let mut odds = 0;\n\n   \
    \ while nums.len() > 0 {\n        sum += nums.remove(0).unwrap();\n        if\
    \ sum > 10 && odds % 2 == 1 {\n            odds += 1;\n        }\n    }\n    odds\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmphy96p7as.rs:15:31\n   |\n15 |         sum += nums.remove(0).unwrap();\n\
    \   |                               ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for &i in nums {\n        if i > 10 {\n           \
    \ if i % 2 == 1 {\n                sum += 1;\n            }\n        } else {\n\
    \            sum += 1;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6zvqhd3.rs:11:9\n   |\n\
    11 |     for &i in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut result = nums.len();\n    for i in nums.iter() {\n        if nums.len()\
    \ > 2 && i % 2 != 0 && nums[nums.len()-1] % 2 != 0 {\n            if nums[i] <\
    \ 10 {\n                result += 1;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp4f5yldn4.rs:13:16\n\
    \   |\n13 |             if nums[i] < 10 {\n   |                ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4f5yldn4.rs:18:5\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |              \
    \                         ----- expected `isize` because of return type\n...\n\
    18 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     result.try_into().unwrap()\n   |           ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    let mut digits = 0;\n    for &num in nums {\n     \
    \   if num % 2 == 1 {\n            sum += num;\n            digits = 3;\n    \
    \    } else {\n            if num > 10 {\n                sum += num;\n      \
    \          digits = 2;\n            } else {\n                if digits > 2 {\n\
    \                    sum += num;\n                    digits += 1;\n         \
    \       }\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo54b7x3d.rs:12:9\n   |\n\
    12 |     for &num in nums {\n   |         ^^^^    ---- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let nums = nums.into_iter().map(|x| x % 2).collect::<Vec<bool>>();\n    \n\
    \    for i in nums.iter() {\n        if !nums.contains(&(i-1)) {\n           \
    \ break;\n        }\n        \n        if !nums.contains(&(i+1)) {\n         \
    \   break;\n        }\n    }\n    \n    nums.len()\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<bool>` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpwhqw2qp4.rs:10:48\n     |\n10\
    \   |     let nums = nums.into_iter().map(|x| x % 2).collect::<Vec<bool>>();\n\
    \     |                                                ^^^^^^^ value of type `Vec<bool>`\
    \ cannot be built from `std::iter::Iterator<Item=isize>`\n     |\n     = help:\
    \ the trait `FromIterator<isize>` is not implemented for `Vec<bool>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0369]: cannot subtract `{integer}` from `&bool`\n\
    \  --> /tmp/tmpwhqw2qp4.rs:13:30\n   |\n13 |         if !nums.contains(&(i-1))\
    \ {\n   |                             -^- {integer}\n   |                    \
    \         |\n   |                             &bool\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&bool`\n  --> /tmp/tmpwhqw2qp4.rs:17:30\n   |\n17 |        \
    \ if !nums.contains(&(i+1)) {\n   |                             -^- {integer}\n\
    \   |                             |\n   |                             &bool\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwhqw2qp4.rs:22:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n...\n22 |     nums.len()\n\
    \   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    22 |     nums.len().try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x % 2 != 0 && x % 10 == 1).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp6qpc_wu.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x % 2 != 0 && x % 10 == 1).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpp6qpc_wu.rs:10:40\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x % 2 != 0 && x % 10 == 1).count()\n\
    \   |                                      - ^ - {integer}\n   |             \
    \                         |\n   |                                      &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x > 10 && *x % 2 != 0 && x % 10 == 1).count()\n  \
    \ |                                      +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpp6qpc_wu.rs:10:54\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 != 0 && x % 10 == 1).count()\n   |                         \
    \                           - ^ -- {integer}\n   |                           \
    \                         |\n   |                                            \
    \        &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     nums.iter().filter(|x| x > 10 && x % 2 != 0 && *x % 10 ==\
    \ 1).count()\n   |                                                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp6qpc_wu.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|x| x > 10 && x\
    \ % 2 != 0 && x % 10 == 1).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 != 0 && x % 10 == 1).count().try_into().unwrap()\n   |     \
    \                                                                   ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed e"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num >= 10 && num %\
    \ 2 == 1 && num % 5 == 1 && num % 7 == 1 {\n            count += 1;\n        }\n\
    \    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvgiqwlvg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for x in nums {\n        if x > 10 {\n            if\
    \ x % 2 != 0 {\n                sum += x;\n            }\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `1`', /tmp/tmp04doad4a.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && &x % 2 == 1 || &x % 3 == 0).count()\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5g1zp_9i.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && &x % 2 == 1 || &x % 3 == 0).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&&isize` by `{integer}`\n  --> /tmp/tmp5g1zp_9i.rs:10:41\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && &x % 2 == 1 || &x % 3 == 0).count()\n\
    \   |                                      -- ^ - {integer}\n   |            \
    \                          |\n   |                                      &&&isize\n\
    \nerror[E0369]: cannot mod `&&&isize` by `{integer}`\n  --> /tmp/tmp5g1zp_9i.rs:10:56\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && &x % 2 == 1 || &x % 3 == 0).count()\n\
    \   |                                                     -- ^ - {integer}\n \
    \  |                                                     |\n   |             \
    \                                        &&&isize\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5g1zp_9i.rs:10:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n10 |     nums.iter().filter(|x| x > 10 && &x % 2 ==\
    \ 1 || &x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && &x % 2 == 1 || &x % 3 == 0).count().try_into().unwrap()\n   |    \
    \                                                                     ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    let mut count = 0;\n    for n in nums {\n        if\
    \ n > 10 {\n            if n % 10 == 1 {\n                if n % 100 != 11 {\n\
    \                    sum += 1;\n                }\n            } else {\n    \
    \            if n % 10 == 1 {\n                    count += 1;\n             \
    \   }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvkf1xeg3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x%2 != 0 && x%3 != 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9bysaos5.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x%2 != 0 && x%3 != 0).count()\n   |\
    \                                ^^ expected `&&isize`, found integer\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp9bysaos5.rs:10:39\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x%2 != 0 && x%3 != 0).count()\n   |\
    \                                      -^- {integer}\n   |                   \
    \                   |\n   |                                      &&isize\n   |\n\
    help: `%` can be used on `isize`, you can dereference `x`\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && *x%2 != 0 && x%3 != 0).count()\n   |                             \
    \         +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp9bysaos5.rs:10:51\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x%2 != 0 && x%3 != 0).count()\n\
    \   |                                                  -^- {integer}\n   |   \
    \                                               |\n   |                      \
    \                            &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n10 |     nums.iter().filter(|x| x > 10 && x%2\
    \ != 0 && *x%3 != 0).count()\n   |                                           \
    \       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9bysaos5.rs:10:5\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |              \
    \                         ----- expected `isize` because of return type\n10 |\
    \     nums.iter().filter(|x| x > 10 && x%2 != 0 && x%3 != 0).count()\n   |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x| x\
    \ > 10 && x%2 != 0 && x%3 != 0).count().try_into().unwrap()\n   |            \
    \                                                       ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an e"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = nums.len();\n    let mut i = 0;\n    while i < n {\n        if\
    \ nums[i] > 10 {\n            i += 1;\n            continue;\n        }\n    \
    \    if nums[i] % 2 == 1 {\n            i += 1;\n            continue;\n     \
    \   }\n        if nums[i] % 3 == 1 {\n            i += 1;\n            continue;\n\
    \        }\n        if nums[i] % 5 == 1 {\n            i += 1;\n            continue;\n\
    \        }\n        if nums[i] % 7 == 1 {\n            i += 1;\n            continue;\n\
    \        }\n        if nums[i] % 9 == 1 {\n            i += 1;\n            continue;\n\
    \        }\n        break;\n    }\n    i - 1\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp1523nbq.rs:39:5\n   |\n\
    9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n...\n39 |  \
    \   i - 1\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n39 |     (i - 1).try_into().unwrap()\n   |     +     +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    specialFilter(nums, false, false)\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 3 arguments were supplied\n\
    \  --> /tmp/tmpnex7qqyr.rs:10:5\n   |\n10 |     specialFilter(nums, false, false)\n\
    \   |     ^^^^^^^^^^^^^ ----  -----  ----- supplied 3 arguments\n   |     |\n\
    \   |     expected 1 argument\n   |\nnote: function defined here\n  --> /tmp/tmpnex7qqyr.rs:9:4\n\
    \   |\n9  | fn specialFilter(nums: Vec<isize>) -> isize {\n   |    ^^^^^^^^^^^^^\
    \ ----------------\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&n| {\n        n < 10 && n % 2 != 0 && n % 3 != 0\n \
    \   }).count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuguadazt.rs:11:13\n   |\n\
    11 |         n < 10 && n % 2 != 0 && n % 3 != 0\n   |             ^^\n   |   \
    \          |\n   |             expected `&isize`, found integer\n   |        \
    \     help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuguadazt.rs:10:5\n   |\n9  |   fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                         ----- expected `isize`\
    \ because of return type\n10 | /     nums.iter().filter(|&n| {\n11 | |       \
    \  n < 10 && n % 2 != 0 && n % 3 != 0\n12 | |     }).count()\n   | |______________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     }).count().try_into().unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut sum = 0;\n    for n in nums.iter() {\n        sum += *n;\n    }\n\
    \    if sum > 10 && nums.iter().any(|x| x % 2 != 0) {\n        let mut start =\
    \ 0;\n        let mut end = nums.len();\n        let mut count = 0;\n        while\
    \ start < end {\n            count += 1;\n            let mut curr = *start;\n\
    \            start += 1;\n            while curr < end && curr % 2 != 0 {\n  \
    \              curr = curr * 10 + 1;\n            }\n            end = curr;\n\
    \        }\n        count += 1;\n        count / 2\n    } else {\n        0\n\
    \    }\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpkydxylfi.rs:20:28\n\
    \   |\n20 |             let mut curr = *start;\n   |                         \
    \   ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976529
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    specialFilterImpl(nums)\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `specialFilterImpl` in this scope\n\
    \  --> /tmp/tmp69m96z__.rs:10:5\n   |\n10 |     specialFilterImpl(nums)\n   |\
    \     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0usize;\n\n    for i in nums.into_iter().rev() {\n      \
    \  if *i & 1 == 1 && *i & 3 == 1 && *i & 5 == 1 && *i & 7 == 1 && *i & 9 == 1\
    \ {\n            count += 1;\n        }\n    }\n\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpzhtcu1_i.rs:13:12\n\
    \   |\n13 |         if *i & 1 == 1 && *i & 3 == 1 && *i & 5 == 1 && *i & 7 ==\
    \ 1 && *i & 9 == 1 {\n   |            ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpzhtcu1_i.rs:13:27\n   |\n13 |         if *i &\
    \ 1 == 1 && *i & 3 == 1 && *i & 5 == 1 && *i & 7 == 1 && *i & 9 == 1 {\n   | \
    \                          ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpzhtcu1_i.rs:13:42\n   |\n13 |         if *i & 1 == 1 && *i & 3\
    \ == 1 && *i & 5 == 1 && *i & 7 == 1 && *i & 9 == 1 {\n   |                  \
    \                        ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpzhtcu1_i.rs:13:57\n   |\n13 |         if *i & 1 == 1 && *i & 3\
    \ == 1 && *i & 5 == 1 && *i & 7 == 1 && *i & 9 == 1 {\n   |                  \
    \                                       ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpzhtcu1_i.rs:13:72\n   |\n13 |         if *i &\
    \ 1 == 1 && *i & 3 == 1 && *i & 5 == 1 && *i & 7 == 1 && *i & 9 == 1 {\n   | \
    \                                                                       ^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzhtcu1_i.rs:18:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n...\n18 |     count\n\
    \   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n18\
    \ |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() <= 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut x = nums.iter().sum();\n    while x > 10 {\n        if x % 2 == 1\
    \ {\n            count = count + 1;\n        }\n        let last = nums.iter().last().unwrap();\n\
    \        if last%2 == 1 {\n            count = count + 1;\n        }\n       \
    \ x = x / 2;\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmps_kg39m9.rs:14:9\n\
    \   |\n14 |     let mut x = nums.iter().sum();\n   |         ^^^^^ consider giving\
    \ `x` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = 0;\n    for i in nums {\n        if i > 10 {\n            if\
    \ i % 2 != 0 {\n                n += 1;\n            }\n            if i % 2 !=\
    \ 0 {\n                n += 1;\n            }\n        }\n    }\n    n\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpekae8cdi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut i = 0;\n    for num in nums {\n        if num < 10 {\n          \
    \  i += 1;\n        }\n        if num % 2 == 1 {\n            i += 1;\n      \
    \  }\n        if i > 0 && num % 2 == 0 {\n            i += 1;\n        }\n   \
    \     if num > 10 {\n            break;\n        }\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpg90csmjr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut result = 0;\n    for n in nums.iter() {\n        if n > 10 {\n  \
    \          if n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n %\
    \ 10 == 9 {\n                if n % 2 == 1 {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfd7tjmsz.rs:12:16\n   |\n\
    12 |         if n > 10 {\n   |                ^^\n   |                |\n   |\
    \                expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&10`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num % 2 == 0 {\n  \
    \          count += 1;\n            if num % 2 != 0 {\n                if num\
    \ % 4 == 0 {\n                    count += 1;\n                    if num % 8\
    \ == 0 {\n                        count += 1;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp272k1v4e.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() < 2 { return 0 }\n    let lower = &nums[..1];\n    let upper\
    \ = &nums[1..];\n    for i in 0..nums.len() {\n        if *lower %2!=0 && *upper%2!=0\
    \ { return i }\n    }\n    return nums.len()\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `[isize]` by `{integer}`\n  --> /tmp/tmpru0zych6.rs:14:19\n\
    \   |\n14 |         if *lower %2!=0 && *upper%2!=0 { return i }\n   |        \
    \    ------ ^- {integer}\n   |            |\n   |            [isize]\n\nerror[E0369]:\
    \ cannot mod `[isize]` by `{integer}`\n  --> /tmp/tmpru0zych6.rs:14:34\n   |\n\
    14 |         if *lower %2!=0 && *upper%2!=0 { return i }\n   |               \
    \             ------^- {integer}\n   |                            |\n   |    \
    \                        [isize]\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpru0zych6.rs:14:49\n\
    \   |\n14 |         if *lower %2!=0 && *upper%2!=0 { return i }\n   |        \
    \                                         ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |         if *lower %2!=0 && *upper%2!=0 { return\
    \ i.try_into().unwrap() }\n   |                                              \
    \    ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x % 2 == 1).count()\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkrapaymw.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1).count()\n   |          \
    \                      ^^ expected `&&isize`, found integer\n\nerror[E0369]: cannot\
    \ mod `&&isize` by `{integer}`\n  --> /tmp/tmpkrapaymw.rs:10:40\n   |\n10 |  \
    \   nums.iter().filter(|x| x > 10 && x % 2 == 1).count()\n   |               \
    \                       - ^ - {integer}\n   |                                \
    \      |\n   |                                      &&isize\n   |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `x`\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && *x % 2 == 1).count()\n   |                                      +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkrapaymw.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 1).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 1).count().try_into().unwrap()\n   |                    \
    \                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    // base case\n    if nums.len() == 0 {\n        return 0;\n    }\n\n    //\
    \ recursive case\n    if nums.len() == 1 {\n        if nums[0] > 10 {\n      \
    \      return 1;\n        }\n        return 0;\n    }\n\n    let even = nums.iter().filter(|x|\
    \ x % 2 == 0).count();\n    let odd = nums.iter().filter(|x| x % 2 != 0).count();\n\
    \n    if even > 0 && odd == 0 {\n        return even + 1;\n    }\n    if even\
    \ > 0 && odd > 0 && even % 2 == 0 {\n        return even + 1;\n    }\n    if even\
    \ > 0 && odd > 0 && even % 2 != 0 {\n        return even + 1;\n    }\n\n    if\
    \ odd > 0 && even > 0 && odd % 2 == 0 {\n        return odd + 1;\n    }\n    if\
    \ odd > 0 && even > 0 && odd % 2 != 0 {\n        return odd + 1;\n    }\n\n  \
    \  return nums.len();\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpjls8jdy5.rs:23:41\n\
    \   |\n23 |     let even = nums.iter().filter(|x| x % 2 == 0).count();\n   | \
    \                                      - ^ - {integer}\n   |                 \
    \                      |\n   |                                       &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n23 | \
    \    let even = nums.iter().filter(|x| *x % 2 == 0).count();\n   |           \
    \                            +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpjls8jdy5.rs:24:40\n   |\n24 |     let odd = nums.iter().filter(|x|\
    \ x % 2 != 0).count();\n   |                                      - ^ - {integer}\n\
    \   |                                      |\n   |                           \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n24 |     let odd = nums.iter().filter(|x| *x % 2 != 0).count();\n\
    \   |                                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjls8jdy5.rs:27:16\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n...\n27 |         return even + 1;\n   |           \
    \     ^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n27\
    \ |         return (even + 1).try_into().unwrap();\n   |                +    \
    \    +++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|num| num > 10 && (num % 2 != 0 || num % 3 != 0)).count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxvsjwyer.rs:10:36\n   |\n\
    10 |     nums.iter().filter(|num| num > 10 && (num % 2 != 0 || num % 3 != 0)).count()\n\
    \   |                                    ^^ expected `&&isize`, found integer\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpxvsjwyer.rs:10:47\n\
    \   |\n10 |     nums.iter().filter(|num| num > 10 && (num % 2 != 0 || num % 3\
    \ != 0)).count()\n   |                                           --- ^ - {integer}\n\
    \   |                                           |\n   |                      \
    \                     &&isize\n   |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `num`\n   |\n10 |     nums.iter().filter(|num| num > 10 && (*num\
    \ % 2 != 0 || num % 3 != 0)).count()\n   |                                   \
    \        +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpxvsjwyer.rs:10:63\n\
    \   |\n10 |     nums.iter().filter(|num| num > 10 && (num % 2 != 0 || num % 3\
    \ != 0)).count()\n   |                                                       \
    \    --- ^ - {integer}\n   |                                                 \
    \          |\n   |                                                           &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `num`\n   |\n10 |\
    \     nums.iter().filter(|num| num > 10 && (num % 2 != 0 || *num % 3 != 0)).count()\n\
    \   |                                                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxvsjwyer.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|num| num > 10 &&\
    \ (num % 2 != 0 || num % 3 != 0)).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|num|\
    \ num > 10 && (num % 2 != 0 || num % 3 != 0)).count().try_into().unwrap()\n  \
    \ |                                "
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    for &i in nums {\n        if i > 10 && i % 2 == 1 && i % 2 == 1 {\n     \
    \       count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpggsbimq4.rs:14:9\n   |\n\
    14 |     for &i in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut counter = 0;\n    for &n in nums {\n        if n % 10 == 1 && n %\
    \ 100 != 11 && n % 100 != 71 && n % 100 != 91 {\n            counter += 1;\n \
    \       }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgl4_h775.rs:11:9\n   |\n\
    11 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1\
    \ && n % 3 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpfaqshzys.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for num in nums {\n        if num > 10 {\n        \
    \    if num % 10 == 1 && num % 100 != 11 {\n                cnt += 1;\n      \
    \      } else if num % 10 == 3 && num % 100 != 12 {\n                cnt += 1;\n\
    \            } else if num % 10 == 5 && num % 100 != 13 {\n                cnt\
    \ += 1;\n            } else if num % 10 == 7 && num % 100 != 14 {\n          \
    \      cnt += 1;\n            } else if num % 10 == 9 && num % 100 != 15 {\n \
    \               cnt += 1;\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpshk7f0_i.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    if nums.len() < 2 {\n        return 0;\n    }\n\n    let mut numsCopy = nums.clone();\n\
    \    let mut sum = 0;\n    for &x in numsCopy {\n        if x > 10 && numsCopy.len()\
    \ > 1 {\n            if numsCopy.len() > 2 && numsCopy[0] == numsCopy[1] {\n \
    \               sum += x;\n                numsCopy.pop();\n            }\n  \
    \      } else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkruuqiwk.rs:16:9\n   |\n\
    16 |     for &x in numsCopy {\n   |         ^^    -------- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|n|\n        n % 10 == 1 && n % 100 !=11 && n % 1000 !=1001\n\
    \    ).count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp5vlb0meg.rs:11:11\n\
    \   |\n11 |         n % 10 == 1 && n % 100 !=11 && n % 1000 !=1001\n   |     \
    \    - ^ -- {integer}\n   |         |\n   |         &&isize\n   |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `n`\n   |\n11 |         *n % 10 == 1\
    \ && n % 100 !=11 && n % 1000 !=1001\n   |         +\n\nerror[E0369]: cannot mod\
    \ `&&isize` by `{integer}`\n  --> /tmp/tmp5vlb0meg.rs:11:26\n   |\n11 |      \
    \   n % 10 == 1 && n % 100 !=11 && n % 1000 !=1001\n   |                     \
    \   - ^ --- {integer}\n   |                        |\n   |                   \
    \     &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n\
    \   |\n11 |         n % 10 == 1 && *n % 100 !=11 && n % 1000 !=1001\n   |    \
    \                    +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp5vlb0meg.rs:11:42\n   |\n11 |         n % 10 == 1 && n % 100 !=11\
    \ && n % 1000 !=1001\n   |                                        - ^ ---- {integer}\n\
    \   |                                        |\n   |                         \
    \               &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `n`\n   |\n11 |         n % 10 == 1 && n % 100 !=11 && *n % 1000 !=1001\n  \
    \ |                                        +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5vlb0meg.rs:10:5\n   |\n9  |   fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                         ----- expected `isize`\
    \ because of return type\n10 | /     nums.iter().filter(|n|\n11 | |         n\
    \ % 10 == 1 && n % 100 !=11 && n % 1000 !=1001\n12 | |     ).count()\n   | |_____________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     ).count().try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = 0;\n    for &x in nums {\n        if x < 10 {\n            if\
    \ x&1 != 0 {\n                n++;\n            }\n        }\n        if x > 10\
    \ {\n            if x&1 != 0 {\n                n++;\n            }\n        \
    \    if x&3 != 0 {\n                n++;\n            }\n            if x&5 !=\
    \ 0 {\n                n++;\n            }\n            if x&7 != 0 {\n      \
    \          n++;\n            }\n            if x&9 != 0 {\n                n++;\n\
    \            }\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpn__g1iom.rs:14:18\n\
    \   |\n14 |                 n++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n14 |                 { let tmp\
    \ = n; n += 1; tmp };\n   |                 +++++++++++  ~~~~~~~~~~~~~~~\n14 -\
    \                 n++;\n14 +                 n += 1;\n   | \n\nerror: Rust has\
    \ no postfix increment operator\n  --> /tmp/tmpn__g1iom.rs:19:18\n   |\n19 | \
    \                n++;\n   |                  ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n19 |                 { let tmp = n; n +=\
    \ 1; tmp };\n   |                 +++++++++++  ~~~~~~~~~~~~~~~\n19 -         \
    \        n++;\n19 +                 n += 1;\n   | \n\nerror: Rust has no postfix\
    \ increment operator\n  --> /tmp/tmpn__g1iom.rs:22:18\n   |\n22 |            \
    \     n++;\n   |                  ^^ not a valid postfix operator\n   |\nhelp:\
    \ use `+= 1` instead\n   |\n22 |                 { let tmp = n; n += 1; tmp };\n\
    \   |                 +++++++++++  ~~~~~~~~~~~~~~~\n22 -                 n++;\n\
    22 +                 n += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpn__g1iom.rs:25:18\n   |\n25 |                 n++;\n   |      \
    \            ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n25 |                 { let tmp = n; n += 1; tmp };\n   |              \
    \   +++++++++++  ~~~~~~~~~~~~~~~\n25 -                 n++;\n25 +            \
    \     n += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpn__g1iom.rs:28:18\n\
    \   |\n28 |                 n++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n28 |                 { let tmp\
    \ = n; n += 1; tmp };\n   |                 +++++++++++  ~~~~~~~~~~~~~~~\n28 -\
    \                 n++;\n28 +                 n += 1;\n   | \n\nerror: Rust has\
    \ no postfix increment operator\n  --> /tmp/tmpn__g1iom.rs:31:18\n   |\n31 | \
    \                n++;\n   |                  ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n31 |                 { let tmp = n; n +=\
    \ 1; t"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    let mut even = 1;\n    let mut odd = 1;\n    for\
    \ i in 0..(len - 1) {\n        if nums[i] > 10 {\n            if nums[i] % 2 ==\
    \ 0 {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        }\n    }\n\n    return even * odd;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpp1qubv5j.rs:16:21\n\
    \   |\n16 |                 even++;\n   |                     ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n16 |                 { let tmp\
    \ = even; even += 1; tmp };\n   |                 +++++++++++     ~~~~~~~~~~~~~~~~~~\n\
    16 -                 even++;\n16 +                 even += 1;\n   | \n\nerror:\
    \ Rust has no postfix increment operator\n  --> /tmp/tmpp1qubv5j.rs:18:20\n  \
    \ |\n18 |                 odd++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n18 |                 { let tmp\
    \ = odd; odd += 1; tmp };\n   |                 +++++++++++    ~~~~~~~~~~~~~~~~~\n\
    18 -                 odd++;\n18 +                 odd += 1;\n   | \n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut n = 0;\n    for n in nums {\n        let digit = nums.nth(n);\n \
    \       if (digit > 10) && (digit % 2 != 0) &&\n            (nums.first(n) % 2\
    \ != 0) &&\n            (nums.last(n) % 2 != 0)\n        {\n            n = nums.iter().nth(n+1).unwrap();\n\
    \        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmpy4akb865.rs:12:26\n   |\n12 |         let digit\
    \ = nums.nth(n);\n   |                          ^^^ method not found in `Vec<isize>`\n\
    \nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpy4akb865.rs:14:19\n    |\n14  |             (nums.first(n) % 2\
    \ != 0) &&\n    |                   ^^^^^ - supplied 1 argument\n    |       \
    \            |\n    |                   expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0369]: cannot mod `Option<&isize>` by `{integer}`\n\
    \  --> /tmp/tmpy4akb865.rs:14:28\n   |\n14 |             (nums.first(n) % 2 !=\
    \ 0) &&\n   |              ------------- ^ - {integer}\n   |              |\n\
    \   |              Option<&isize>\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n   --> /tmp/tmpy4akb865.rs:15:19\n    |\n15  |\
    \             (nums.last(n) % 2 != 0)\n    |                   ^^^^ - supplied\
    \ 1 argument\n    |                   |\n    |                   expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0369]: cannot mod `Option<&isize>`\
    \ by `{integer}`\n  --> /tmp/tmpy4akb865.rs:15:27\n   |\n15 |             (nums.last(n)\
    \ % 2 != 0)\n   |              ------------ ^ - {integer}\n   |              |\n\
    \   |              Option<&isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy4akb865.rs:17:33\n\
    \   |\n17 |             n = nums.iter().nth(n+1).unwrap();\n   |             \
    \                    ^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n17 |             n = nums.iter().nth((n+1).try_into().unwrap()).unwrap();\n\
    \   |                                 +   +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy4akb865.rs:17:17\n   |\n11 |     for n in nums\
    \ {\n   |         - expected due to the type of this binding\n...\n17 |      \
    \       n = nums.iter().nth(n+1).unwrap();\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expect"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter()\n        .filter(|n| n > 10)\n        .filter(|n| n % 2 != 0)\n\
    \        .filter(|n| n % 3 != 0)\n        .filter(|n| n % 5 != 0)\n        .filter(|n|\
    \ n % 7 != 0)\n        .filter(|n| n % 9 != 0)\n        .count()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp694q_7av.rs:11:25\n   |\n\
    11 |         .filter(|n| n > 10)\n   |                         ^^ expected `&&isize`,\
    \ found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp694q_7av.rs:12:23\n\
    \   |\n12 |         .filter(|n| n % 2 != 0)\n   |                     - ^ - {integer}\n\
    \   |                     |\n   |                     &&isize\n   |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n   |\n12 |         .filter(|n|\
    \ *n % 2 != 0)\n   |                     +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmp694q_7av.rs:13:23\n   |\n13 |         .filter(|n|\
    \ n % 3 != 0)\n   |                     - ^ - {integer}\n   |                \
    \     |\n   |                     &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `n`\n   |\n13 |         .filter(|n| *n % 3 != 0)\n   | \
    \                    +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp694q_7av.rs:14:23\n   |\n14 |         .filter(|n| n % 5 != 0)\n\
    \   |                     - ^ - {integer}\n   |                     |\n   |  \
    \                   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `n`\n   |\n14 |         .filter(|n| *n % 5 != 0)\n   |                     +\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp694q_7av.rs:15:23\n\
    \   |\n15 |         .filter(|n| n % 7 != 0)\n   |                     - ^ - {integer}\n\
    \   |                     |\n   |                     &&isize\n   |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n   |\n15 |         .filter(|n|\
    \ *n % 7 != 0)\n   |                     +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmp694q_7av.rs:16:23\n   |\n16 |         .filter(|n|\
    \ n % 9 != 0)\n   |                     - ^ - {integer}\n   |                \
    \     |\n   |                     &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `n`\n   |\n16 |         .filter(|n| *n % 9 != 0)\n   | \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp694q_7av.rs:10:5\n\
    \   |\n9  |   fn specialF"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut counter = 1;\n    for num in nums {\n        let first_even = num\
    \ % 2 == 0;\n        let last_odd = num % 2 != 0;\n        if first_even && last_odd\
    \ {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgoxz2xl2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut nums_copy = nums.clone();\n    let mut cnt = 0;\n    for i in nums_copy\
    \ {\n        if i > 10 && i / 2 % 2 == 1 {\n            cnt += 1;\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpd2bahdnk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    let mut total = 0;\n    for i in 0..len {\n  \
    \      if nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 2 == 0 {\n           \
    \ total += 1;\n        }\n    }\n    return total;\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc3__pwvr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n\n    for n in nums {\n        if n % 2 == 1 {\n      \
    \      let mut m = n;\n            while m > 0 {\n                if m % 2 ==\
    \ 1 {\n                    break;\n                }\n                m /= 2;\n\
    \            }\n            cnt += m == 1;\n        }\n    }\n\n    cnt\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp7la06zr0.rs:21:17\n\
    \   |\n21 |             cnt += m == 1;\n   |                 ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 {\n\
    \            if n % 100 == 0 {\n                cnt += 1;\n            }\n   \
    \     }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphzjxh1l2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                if num % 3 != 1 {\n                \
    \    if num % 5 != 1 {\n                        if num % 7 != 1 {\n          \
    \                  if num % 9 != 1 {\n                                count +=\
    \ 1;\n                            }\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp03h0ytch.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x % 2 == 1 && x % 3 != 0).count()\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbqck66fz.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1 && x % 3 != 0).count()\n\
    \   |                                ^^ expected `&&isize`, found integer\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpbqck66fz.rs:10:40\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1 && x % 3 != 0).count()\n\
    \   |                                      - ^ - {integer}\n   |             \
    \                         |\n   |                                      &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n10 | \
    \    nums.iter().filter(|x| x > 10 && *x % 2 == 1 && x % 3 != 0).count()\n   |\
    \                                      +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpbqck66fz.rs:10:54\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 1 && x % 3 != 0).count()\n   |                          \
    \                          - ^ - {integer}\n   |                             \
    \                       |\n   |                                              \
    \      &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1 && *x % 3 != 0).count()\n\
    \   |                                                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbqck66fz.rs:10:5\n   |\n9  | fn specialFilter(nums: Vec<isize>)\
    \ -> isize {\n   |                                       ----- expected `isize`\
    \ because of return type\n10 |     nums.iter().filter(|x| x > 10 && x % 2 == 1\
    \ && x % 3 != 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x % 2 == 1 && x % 3 != 0).count().try_into().unwrap()\n   |      \
    \                                                                 ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanation"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let len = nums.len();\n    for i in 0..len {\n        if nums[i] > 10 &&\
    \ nums[i] % 2 != 0 && nums[i] != 0 && nums[i] != nums[len - i - 1] {\n       \
    \     return i;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph9k8x90j.rs:13:20\n   |\n\
    13 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10).count(|x| {\n        (x % 10) % 2 != 0\n \
    \           && (x % 100) % 2 != 0\n            && (x % 1000) % 2 != 0\n    })\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5jwrxy63.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10).count(|x| {\n   |                    \
    \            ^^ expected `&&isize`, found integer\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5jwrxy63.rs:10:36\n\
    \    |\n10  |       nums.iter().filter(|x| x > 10).count(|x| {\n    |  ____________________________________^^^^^_-\n\
    \    | |                                    |\n    | |                       \
    \             expected 0 arguments\n11  | |         (x % 10) % 2 != 0\n12  | |\
    \             && (x % 100) % 2 != 0\n13  | |             && (x % 1000) % 2 !=\
    \ 0\n14  | |     })\n    | |_____- supplied 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jwrxy63.rs:10:5\n\
    \   |\n9  |   fn specialFilter(nums: Vec<isize>) -> isize {\n   |            \
    \                             ----- expected `isize` because of return type\n\
    10 | /     nums.iter().filter(|x| x > 10).count(|x| {\n11 | |         (x % 10)\
    \ % 2 != 0\n12 | |             && (x % 100) % 2 != 0\n13 | |             && (x\
    \ % 1000) % 2 != 0\n14 | |     })\n   | |______^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |     }).try_into().unwrap()\n   |       ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut num = 0;\n    for n in nums {\n        if n % 2 == 0 {\n        \
    \    num += 1\n        }\n        if num == 1 && n % 2 != 0 {\n            num\
    \ += 1;\n        }\n    }\n    num\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpig1k5ww_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for x in nums {\n        if x > 10 && x % 2 == 1\
    \ && x % 3 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpwps07fur.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut num_good = 0;\n    let mut num_odd_first = 0;\n    let mut num_odd_last\
    \ = 0;\n\n    for num in nums {\n        if num > 10 {\n            if num % 10\
    \ == 1 && num / 10 != 1 {\n                num_good++;\n            }\n      \
    \      if num % 10 == 3 && num / 10 != 3 {\n                num_good++;\n    \
    \        }\n            if num % 10 == 5 && num / 10 != 5 {\n                num_good++;\n\
    \            }\n            if num % 10 == 7 && num / 10 != 7 {\n            \
    \    num_good++;\n            }\n            if num % 10 == 9 && num / 10 != 9\
    \ {\n                num_good++;\n            }\n        } else {\n          \
    \  if num % 10 == 1 && (num / 10 == 1 || num / 10 == 3 || num / 10 == 5 || num\
    \ / 10 == 7 || num / 10 == 9) {\n                num_good++;\n            }\n\
    \            if num % 10 == 3 && (num / 10 == 1 || num / 10 == 3 || num / 10 ==\
    \ 5 || num / 10 == 7 || num / 10 == 9) {\n                num_good++;\n      \
    \      }\n            if num % 10 == 5 && num / 10 != 5 {\n                num_good++;\n\
    \            }\n            if num % 10 == 7 && num / 10 != 7 {\n            \
    \    num_good++;\n            }\n            if num % 10 == 9 && num / 10 != 9\
    \ {\n                num_good++;\n            }\n            if num % 10 == 1\
    \ {\n                num_odd_first++;\n            }\n            if num % 10\
    \ == 3 {\n                num_odd_last++;\n            }\n            if num %\
    \ 10 == 5 || num % 10 == 7 {\n                num_odd_first++;\n             \
    \   num_odd_last++;\n            }\n            if num % 10 == 9 {\n         \
    \       num_odd_first++;\n                num_odd_last++;\n                num_odd_last++;\n\
    \            }\n        }\n    }\n\n    (num_good, num_odd_first, num_odd_last)\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpjfot1b5x.rs:17:25\n\
    \   |\n17 |                 num_good++;\n   |                         ^^ not a\
    \ valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n17 |         \
    \        { let tmp = num_good; num_good += 1; tmp };\n   |                 +++++++++++\
    \         ~~~~~~~~~~~~~~~~~~~~~~\n17 -                 num_good++;\n17 +     \
    \            num_good += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpjfot1b5x.rs:20:25\n   |\n20 |                 num_good++;\n   |\
    \                         ^^ not a valid postfix operator\n   |\nhelp: use `+=\
    \ 1` instead\n   |\n20 |                 { let tmp = num_good; num_good += 1;\
    \ tmp };\n   |                 +++++++++++         ~~~~~~~~~~~~~~~~~~~~~~\n20\
    \ -                 num_good++;\n20 +                 num_good += 1;\n   | \n\n\
    error: Rust has no postfix increment operator\n  --> /tmp/tmpjfot1b5x.rs:23:25\n\
    \   |\n23 |                 num_good++;\n   |                         ^^ not a\
    \ valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |         \
    \        { let tmp = num_good; num_good += 1; tmp };\n   |                 +++++++++++\
    \         ~~~~~~~~~~~~~~~~~~~~~~\n23 -                 num_good++;\n23 +     \
    \            num_good += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpjfot1b5x.rs:26:25\n   |\n26 |                 num_good++;\n   |\
    \                         ^^ not a valid postfix operator\n   |\nhelp: use `+=\
    \ 1` instead\n   |\n26 |                 { let tmp = num_good; num_good += 1;\
    \ tmp };\n   |                 +++++++++++         ~~~~~~~~~~~~~~~~~~~~~~\n26\
    \ -                 num_good++;\n26 +                 num_good += 1;\n   | \n\n\
    error: Rust has no postfix increment operator\n  --> /tmp/tmpjfot1b5x.rs:29:25\n\
    \   |\n29 |                 num_good++;\n   |                         ^^ not a\
    \ valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n29 |         \
    \        { let tmp = num_good; num_good += 1; tmp };\n   |                 +++++++++++\
    \         ~~~~~~~~~~~~~~~~~~~~~~\n29 -                 num_good++;\n29 +  "
  stdout: ''
  timestamp: 1659976530
- exit_code: 101
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    let mut count = 0;\n    for &i in nums.iter() {\n        if i > 10 {\n  \
    \          if i % 2 == 1 {\n                if i != 9 {\n                    count\
    \ += 1;\n                }\n            } else {\n                if i != 1 {\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9309homv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|&x| x > 10 && x % 2 == 0).filter(|&x| x % 2 == 1).count()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcryfvqaz.rs:10:33\n   |\n\
    10 |     nums.iter().filter(|&x| x > 10 && x % 2 == 0).filter(|&x| x % 2 == 1).count()\n\
    \   |                                 ^^\n   |                               \
    \  |\n   |                                 expected `&isize`, found integer\n\
    \   |                                 help: consider borrowing here: `&10`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpcryfvqaz.rs:10:5\n   |\n9  | fn\
    \ specialFilter(nums: Vec<isize>) -> isize {\n   |                           \
    \            ----- expected `isize` because of return type\n10 |     nums.iter().filter(|&x|\
    \ x > 10 && x % 2 == 0).filter(|&x| x % 2 == 1).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|&x|\
    \ x > 10 && x % 2 == 0).filter(|&x| x % 2 == 1).count().try_into().unwrap()\n\
    \   |                                                                        \
    \          ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|x| x > 10 && x > nums[0] % 2 && x > nums.last().unwrap()\
    \ % 2).count()\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjgq4pvo.rs:10:32\n   |\n\
    10 |     nums.iter().filter(|x| x > 10 && x > nums[0] % 2 && x > nums.last().unwrap()\
    \ % 2).count()\n   |                                ^^ expected `&&isize`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsjgq4pvo.rs:10:42\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x > nums[0] % 2 && x > nums.last().unwrap()\
    \ % 2).count()\n   |                                          ^^^^^^^^^^^ expected\
    \ `&&isize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsjgq4pvo.rs:10:61\n\
    \   |\n10 |     nums.iter().filter(|x| x > 10 && x > nums[0] % 2 && x > nums.last().unwrap()\
    \ % 2).count()\n   |                                                         \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&&isize`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsjgq4pvo.rs:10:5\n   |\n9  | fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                       ----- expected\
    \ `isize` because of return type\n10 |     nums.iter().filter(|x| x > 10 && x\
    \ > nums[0] % 2 && x > nums.last().unwrap() % 2).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |     nums.iter().filter(|x|\
    \ x > 10 && x > nums[0] % 2 && x > nums.last().unwrap() % 2).count().try_into().unwrap()\n\
    \   |                                                                        \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976530
- exit_code: 1
  program: "/// Write a function that takes a vector of numbers as input and returns\
    \ \n/// the number of elements in the vector that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
    \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n\
    \    nums.iter().filter(|num| num > 10).filter(|num| {\n        num % 2 == 1 &&\
    \ (num % 2 == 1 || num % 2 == 3)\n    }).count()\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx3rikuwm.rs:10:36\n   |\n\
    10 |     nums.iter().filter(|num| num > 10).filter(|num| {\n   |             \
    \                       ^^ expected `&&isize`, found integer\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpx3rikuwm.rs:11:13\n   |\n\
    11 |         num % 2 == 1 && (num % 2 == 1 || num % 2 == 3)\n   |         ---\
    \ ^ - {integer}\n   |         |\n   |         &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `num`\n   |\n11 |         *num % 2 == 1\
    \ && (num % 2 == 1 || num % 2 == 3)\n   |         +\n\nerror[E0369]: cannot mod\
    \ `&&isize` by `{integer}`\n  --> /tmp/tmpx3rikuwm.rs:11:30\n   |\n11 |      \
    \   num % 2 == 1 && (num % 2 == 1 || num % 2 == 3)\n   |                     \
    \     --- ^ - {integer}\n   |                          |\n   |               \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `num`\n   |\n11 |         num % 2 == 1 && (*num % 2 == 1 || num % 2 == 3)\n\
    \   |                          +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpx3rikuwm.rs:11:46\n   |\n11 |         num % 2 == 1 && (num % 2\
    \ == 1 || num % 2 == 3)\n   |                                          --- ^ -\
    \ {integer}\n   |                                          |\n   |           \
    \                               &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `num`\n   |\n11 |         num % 2 == 1 && (num % 2 == 1\
    \ || *num % 2 == 3)\n   |                                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx3rikuwm.rs:10:5\n   |\n9  |   fn specialFilter(nums:\
    \ Vec<isize>) -> isize {\n   |                                         ----- expected\
    \ `isize` because of return type\n10 | /     nums.iter().filter(|num| num > 10).filter(|num|\
    \ {\n11 | |         num % 2 == 1 && (num % 2 == 1 || num % 2 == 3)\n12 | |   \
    \  }).count()\n   | |______________^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     }).count().try_into().unwrap()\n   |     "
  stdout: ''
  timestamp: 1659976530
