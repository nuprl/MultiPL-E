name: HumanEval_102_choose_num
language: rs
prompt: "/// This function takes two positive numbers x and y and returns the\n///\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n/// there's\
  \ no such number, then the function should return -1.\n/// For example:\n/// >>>\
  \ choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
  \ isize, y: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
  \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
  \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
  \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
  \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
completions: ["    if y > x {\n        choose_num(y, x)\n    } else {\n        let\
    \ mut low = x;\n        let mut high = y;\n        let mut ans: isize = 0;\n \
    \       \n        while low != high {\n            let mid = (low + high) / 2;\n\
    \            if mid % 2 == 0 {\n                low = mid + 1;\n            }\
    \ else {\n                ans = mid;\n                low = mid - 1;\n       \
    \         high = mid - 1;\n                break;\n            }\n        }\n\
    \        ans\n    }", "    match (x % y, x % 2) {\n        (0x, _) => (\n    \
    \        x + (if x < y { x - y } else { y - x })\n        ) / 2,\n        (1x,\
    \ _) => x,\n        _ => (-1) - x,\n    }", "    if x <= 0 || y <= 0 || x >= y\
    \ {\n        return -1;\n    }\n    \n    if x <= y {\n        x,y = y,x;\n  \
    \  }\n    \n    for i in 0..x {\n        if i%2 == 0 {\n            return i;\n\
    \        }\n    }\n    \n    for i in x..y {\n        if i%2 == 0 {\n        \
    \    return i;\n        }\n    }\n    \n    return -1;", "    // TODO: implement\
    \ this function\n    if x > y {\n        (x, y) = (y, x)\n    }\n    \n    for\
    \ i in 0..y {\n        if x%i == 0 {\n            \n            return i\n   \
    \     }\n    }\n    return -1", "    if x < y {\n        let mut a = x;\n    \
    \    let mut b = y;\n        let mut c = 0;\n        while a < b {\n         \
    \   let c = a / 2;\n            if c % 2 != 0 {\n                break;\n    \
    \        }\n            a = c;\n            b = b << 1;\n        }\n        c\
    \ += 1;\n        if c == x {\n            c\n        } else {\n            c\n\
    \        }\n    } else {\n        let mut a = y;\n        let mut b = x;\n   \
    \     let mut c = 0;\n        while a < b {\n            let c = a / 2;\n    \
    \        if c % 2 != 0 {\n                break;\n            }\n            a\
    \ = c;\n            b = b << 1;\n        }\n        c += 1;\n        if c == y\
    \ {\n            c\n        } else {\n            c\n        }\n    }", "    let\
    \ x_even = x % 2 == 0;\n    let y_even = y % 2 == 0;\n\n    let x_odd = !x_even;\n\
    \    let y_odd = !y_even;\n\n    if x_even {\n        return if y_even {\n   \
    \         x\n        } else {\n            y\n        }\n    } else {\n      \
    \  return if y_even {\n            y\n        } else {\n            x\n      \
    \  }\n    }", "    while x <= y {\n        if x as isize / 2 & 1 == 0 {\n    \
    \        return x;\n        } else {\n            x -= 1;\n        }\n    }\n\
    \    -1", "    let num = if x > y { x } else { y };\n    if num < 2 * x {\n  \
    \      -1\n    } else if num < 2 * y {\n        num\n    } else {\n        choose_num(x\
    \ + 1, y)\n    }", "    if y <= x {\n        return -1;\n    }\n\n    let mut\
    \ x: isize = 1;\n    while x * 2 <= y {\n        x += 1;\n    }\n\n    while x\
    \ != 1 {\n        if y % x == 0 {\n            return x;\n        }\n\n      \
    \  x += 1;\n    }\n\n    -1", "    assert!(x >= 0 && y >= 0);\n\n    let mut max:\
    \ isize = 0;\n    let mut current: isize = 0;\n\n    if y > x {\n        for x_pos\
    \ in (0..x).rev() {\n            max = x_pos as isize;\n            current =\
    \ x_pos + 1;\n            assert!(current > max);\n            if current % 2\
    \ == 0 {\n                max = current;\n            }\n        }\n    } else\
    \ {\n        for y_pos in (0..y).rev() {\n            max = y_pos as isize;\n\
    \            current = y_pos + 1;\n            assert!(current > max);\n     \
    \       if current % 2 == 0 {\n                max = current;\n            }\n\
    \        }\n    }\n\n    max - 1", "    if x <= y {\n        return -1\n    }\n\
    \    let mut x: usize = x;\n    let mut y: usize = y;\n    while x > 0 {\n   \
    \     let r = x / 2;\n        if x % 2 == 0 {\n            x = r\n        } else\
    \ {\n            y = r;\n        }\n    }\n    return y", "    let x_even: isize\
    \ = x.checked_mul(x).unwrap();\n    let y_even: isize = y.checked_mul(y).unwrap();\n\
    \    if x_even.is_zero() && y_even.is_zero() {\n        return -1;\n    }\n  \
    \  let z: isize = x_even.max_val().unwrap() - y_even.max_val().unwrap() + 1;\n\
    \    z.checked_mul(z).unwrap()", "    if x <= y {\n        let left = x;\n   \
    \     let right = y;\n        let mid = left.checked_mul(right).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        let diff = left.checked_sub(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        if diff.abs() >= right.checked_mul(2).ok_or(OutOfRangeError::new(\"\
    out of range\"))? {\n            return mid;\n        }\n        let tmp = right.checked_add(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        return choose_num(left, tmp);\n    }\n    if y <=\
    \ x {\n        let left = y;\n        let right = x;\n        let mid = left.checked_mul(right).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        let diff = left.checked_sub(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        if diff.abs() >= right.checked_mul(2).ok_or(OutOfRangeError::new(\"\
    out of range\"))? {\n            return mid;\n        }\n        let tmp = right.checked_add(mid).ok_or(OutOfRangeError::new(\"\
    out of range\"))?;\n        return choose_num(tmp, left);\n    }\n    let tmp\
    \ = x.checked_mul(2).ok_or(OutOfRangeError::new(\"out of range\"))?;\n    let\
    \ left = (x - y).checked_div(tmp);\n    let right = x + y.checked_div(tmp);\n\
    \    right.ok_or(OutOfRangeError::new(\"out of range\"))?", "    if x % 2 == 0\
    \ {\n        y // 2\n    } else if y % 2 == 0 {\n        x // 2 - 1\n    } else\
    \ {\n        -1\n    }", "    if x <= y {\n        -1\n    } else if y > zigzag_search(x,\
    \ y) {\n        zigzag_search(x, y)\n    } else {\n        0\n    }", "    if\
    \ y > x {\n        choose_num(y, x)\n    } else {\n        if x <= y {\n     \
    \       -1\n        } else if x == y {\n            x\n        } else {\n    \
    \        choose_num(x - 1, y)\n        }\n    }", "    let max_number = x + y;\n\
    \    if max_number >= 64 {\n        -1\n    } else {\n        loop {\n       \
    \     let mut num = 2 * x;\n            if num > y {\n                break;\n\
    \            }\n            if num + 2 > max_number {\n                continue;\n\
    \            }\n            if num % 2 == 0 {\n                return num;\n \
    \           }\n            num = num / 2;\n            if num % 2 == 0 {\n   \
    \             return num;\n            }\n            num = num / 2;\n       \
    \     if num % 2 == 0 {\n                return num;\n            }\n        \
    \    num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;\n            }\n            num = num / 2;\n      \
    \      if num % 2 == 0 {\n                return num;\n            }\n       \
    \     num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;\n            }\n            num = num / 2;\n      \
    \      if num % 2 == 0 {\n                return num;\n            }\n       \
    \     num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;\n            }\n            num = num / 2;\n      \
    \      if num % 2 == 0 {\n                return num;\n            }\n       \
    \     num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;\n            }\n            num = num / 2;\n      \
    \      if num % 2 == 0 {\n                return num;\n            }\n       \
    \     num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;\n            }\n            num = num / 2;\n      \
    \      if num % 2 == 0 {\n                return num;\n            }\n       \
    \     num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;\n            }\n            num = num / 2;\n      \
    \      if num % 2 == 0 {\n                return num;\n            }\n       \
    \     num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;\n            }\n            num = num / 2;\n      \
    \      if num % 2 == 0 {\n                return num;\n            }\n       \
    \     num = num / 2;\n            if num % 2 == 0 {\n                return num;\n\
    \            }\n            num = num / 2;\n            if num % 2 == 0 {\n  \
    \              return num;", "    let mut min = x;\n    let mut max = y;\n   \
    \ while min <= max {\n        let mut mid = min + ((max - min) / 2);\n       \
    \ let is_even = (mid % 2) == 0;\n        match is_even {\n            true =>\
    \ return mid,\n            false => return -1,\n        }\n        match mid {\n\
    \            0 => max = mid - 1,\n            _ => min = mid + 1,\n        }\n\
    \    }\n    -1", "    if x < y {\n        choose_num(y, x)\n    } else {\n   \
    \     let even = y % 2 == 0;\n        let max = (x + (if even {1} else - 1)) >>\
    \ 1;\n        if max < y {\n            choose_num(y, max)\n        } else {\n\
    \            max\n        }\n    }", "    if x > y {\n        let tmp = y;\n \
    \       y = x;\n        x = tmp;\n    }\n\n    if x % 2 == 0 {\n        x\n  \
    \  } else if y % 2 == 0 {\n        y\n    } else {\n        x + (y - x)/2\n  \
    \  }", "    let mut n = (x as usize + y as usize) / 2;\n\n    if n == 0 {\n  \
    \      return -1;\n    }\n\n    loop {\n        if x % 2 == 0 && y % 2 == 0 {\n\
    \            return n;\n        }\n\n        if x % 2 == 0 {\n            x =\
    \ n / 2;\n        }\n\n        if y % 2 == 0 {\n            y = n / 2;\n     \
    \   }\n\n        n = ((x as usize + y as usize) / 2);\n    }", "    let mut max_even\
    \ = x as usize;\n    let mut min_even = y as usize;\n    \n    while max_even\
    \ < min_even {\n        let mut max_even = max_even * 2;\n        let mut min_even\
    \ = min_even / 2;\n    }\n    \n    if max_even + min_even % 2 == 0 {\n      \
    \  return max_even\n    } else {\n        return -1\n    }", '    (x * x + y *
    y) % 2 == 0 ? (x * x + y * y) / 2 : -1', "    // Make sure x > y\n    if x > y\
    \ {\n        (x, y) = (y, x)\n    }\n\n    // Calculate the first even number\
    \ between x and y\n    let mut even_x = x;\n    let mut even_y = y;\n    while\
    \ even_x <= even_y {\n        if even_x % 2 != 0 {\n            even_x += 1;\n\
    \        } else {\n            even_y = even_x + 1;\n        }\n    }\n    //\
    \ Return the biggest even number between x and y if x is not even\n    // and\
    \ -1 if there is no such number\n    if even_x != x {\n        even_x\n    } else\
    \ {\n        -1\n    }", "    if x == y {\n        x\n    } else {\n        let\
    \ mut xn = x;\n        let mut yn = y;\n        while xn >= yn {\n           \
    \ if xn % 2 == 0 {\n                xn /= 2;\n            } else {\n         \
    \       yn /= 2;\n            }\n        }\n        xn\n    }", "    if y > x\
    \ {\n        choose_num(y, x)\n    } else {\n        let mut min_even = x;\n \
    \       let mut min_even_bigger = y;\n        let mut min_odd = x;\n        let\
    \ mut min_odd_bigger = y;\n\n        let mut i = x;\n        let mut j = y;\n\n\
    \        let mut even = 1;\n        let mut odd = 1;\n\n        while i <= j {\n\
    \            if i % 2 == 0 {\n                if even > min_even {\n         \
    \           min_even = even;\n                    min_even_bigger = min_even_bigger;\n\
    \                }\n                even *= 2;\n                i += 1;\n    \
    \        } else {\n                if odd > min_odd {\n                    min_odd\
    \ = odd;\n                    min_odd_bigger = min_odd_bigger;\n             \
    \   }\n                odd *= 2;\n                j -= 1;\n            }\n   \
    \     }\n\n        if even == min_even {\n            if min_even > min_odd_bigger\
    \ {\n                min_even = min_even_bigger;\n            } else {\n     \
    \           min_even = min_odd_bigger;\n            }\n        }\n\n        if\
    \ odd > min_odd_bigger {\n            min_odd = min_odd_bigger;\n        }\n\n\
    \        min_even\n    }", "    loop {\n        if x == y {\n            return\
    \ -1;\n        }\n\n        let mut x = x;\n        let mut y = y;\n\n       \
    \ loop {\n            if x % 2 == 0 && y % 2 == 0 {\n                return x;\n\
    \            }\n\n            if x % 2 == 0 {\n                x /= 2;\n     \
    \       }\n            \n            if y % 2 == 0 {\n                y /= 2;\n\
    \            }\n\n            if x == y {\n                return -1;\n      \
    \      }\n        }\n    }", "    let mut min_x: usize = x;\n    let mut min_y:\
    \ usize = y;\n    let mut max_x: usize = x;\n    let mut max_y: usize = y;\n \
    \   loop {\n        if min_x > min_y {\n            if min_x > y {\n         \
    \       min_x = y;\n            } else {\n                min_x = x;\n       \
    \     }\n        } else {\n            if min_y > x {\n                min_y =\
    \ x;\n            } else {\n                min_y = y;\n            }\n      \
    \  }\n        if max_x > max_y {\n            if max_x > y {\n               \
    \ max_x = y;\n            } else {\n                max_x = x;\n            }\n\
    \        } else {\n            if max_y > x {\n                max_y = x;\n  \
    \          } else {\n                max_y = y;\n            }\n        }\n  \
    \      if min_x == max_x {\n            return min_y;\n        }\n        if min_y\
    \ == max_y {\n            return min_x;\n        }\n    }", "    if x >= y {\n\
    \        -1\n    } else {\n        x.checked_add(y).unwrap() as isize\n    }",
  "    if x < y {\n        (x, y)\n    } else {\n        (y, x)\n    }", "    if x\
    \ >= y {\n        // x is greater than y, there is no such number\n        -1\n\
    \    } else {\n        if x % 2 == 0 {\n            let y = x + 1;\n         \
    \   loop {\n                if y >= y {\n                    return x - 1;\n \
    \               }\n                y = y + 2;\n            }\n        } else {\n\
    \            let x = x - 1;\n            loop {\n                if x <= 0 {\n\
    \                    return -1;\n                }\n                x = x + 2;\n\
    \            }\n        }\n    }", "    let mut num_x = x;\n    let mut num_y\
    \ = y;\n    loop {\n        if num_y >= num_x {\n            return num_x;\n \
    \       }\n        let mut num_x = num_y;\n        num_y += 1;\n    }\n    -1",
  "    // find smallest even number larger than x and smaller than y\n    loop {\n\
    \        if x % 2 == 0 {\n            x = x + 1;\n        } else {\n         \
    \   x = x + 2;\n        }\n        if y % 2 == 0 {\n            y = y + 1;\n \
    \       } else {\n            y = y + 2;\n        }\n        if x <= y {\n   \
    \         break\n        }\n    }\n\n    // return x if it is evenly divisible\
    \ by 2\n    if x % 2 == 0 {\n        return x\n    }\n    // return -1 if there's\
    \ no even number\n    return -1", "    if x <= y {\n        (x, y)\n    } else\
    \ {\n        (y, x)\n    }\n        .iter()\n        .fold(|a, b| {\n        \
    \    if a % 2 == 0 && b % 2 == 0 {\n                a\n            } else {\n\
    \                b\n            }\n        }, -1)", "    // Start from here to\
    \ search for the biggest even number\n    let mut x = x as usize;\n    let mut\
    \ y = y as usize;\n    loop {\n        // Find a number in range [x, y]\n    \
    \    while x * x <= y {\n            x += 1;\n        }\n        while y * y <=\
    \ x {\n            y += 1;\n        }\n        if x * y == y {\n            return\
    \ x;\n        }\n    }", "    let mut z = y;\n    if x < z {\n        z = x;\n\
    \    }\n    loop {\n        if z % 2 == 0 {\n            return z;\n        }\n\
    \        z -= 2;\n    }", "    if x % 2 == 0 {\n        x\n    } else {\n    \
    \    if y % 2 == 0 {\n            y\n        } else {\n            choose_num(x\
    \ + 1, y)\n        }\n    }", "    use self::Even::*;\n\n    if y < x {\n    \
    \    choose_num(x, y)\n    } else {\n        if y == x {\n            return -1;\n\
    \        }\n        let mut x = x;\n        let mut y = y;\n        while y >\
    \ 0 {\n            let remainder = x % y;\n            if remainder == 0 {\n \
    \               return x;\n            }\n            x = y;\n            y =\
    \ remainder;\n        }\n        -1\n    }", "    if x >= y {\n        -1\n  \
    \  } else {\n        let mut num_min = 0;\n        let mut num_max = y;\n    \
    \    while num_min < num_max {\n            let mut min_max = match num_min {\n\
    \                0 | 1 => return num_min,\n                2 | 3 => return num_max\
    \ - 1,\n                _ => num_min + 1,\n            };\n            num_min\
    \ = min_max;\n        }\n        -1\n    }", "    let min_num = std::cmp::min(x\
    \ as isize, y as isize);\n    let max_num = std::cmp::max(x as isize, y as isize);\n\
    \    if min_num >= max_num {\n        return -1;\n    }\n    for n in 0..=max_num\
    \ {\n        if n % 2 == 0 {\n            return n;\n        }\n    }\n    -1",
  "    let mut i = y;\n    while i <= x {\n        i <<= 1;\n        if i <= x &&\
    \ i <= y {\n            i += 1;\n        }\n    }\n    -1", "    let mut max_num\
    \ = 0;\n    let mut min_num = 0;\n    while max_num < x || min_num > y {\n   \
    \     if max_num == 0 {\n            max_num = y;\n            min_num = x;\n\
    \        }\n        let mut i = min_num;\n        while i <= max_num {\n     \
    \       if i % 2 == 0 {\n                break;\n            }\n            i\
    \ += 1;\n        }\n        let mut j = min_num;\n        while j > max_num {\n\
    \            j -= 1;\n            if j % 2 == 0 {\n                break;\n  \
    \          }\n        }\n        if j > max_num {\n            max_num = j;\n\
    \        }\n        if i <= min_num {\n            min_num = i;\n        }\n \
    \   }\n    max_num", "    if x < y {\n        let x = x.to_owned();\n        let\
    \ y = y.to_owned();\n        std::cmp::max(x, y)\n    } else {\n        let x\
    \ = x.to_owned();\n        let y = y.to_owned();\n        std::cmp::max(y, x)\n\
    \    }", "    assert!(x >= y);\n    let mut x = x;\n    let mut y = y;\n    let\
    \ mut z = x;\n    while z < y {\n        if z & 1 == 0 {\n            y = z;\n\
    \        } else {\n            x = z;\n        }\n        z = x + 1;\n    }\n\
    \    x", "    if x == y {\n        x\n    } else if x < y {\n        choose_num(x\
    \ + 2, y)\n    } else {\n        choose_num(x, y + 2)\n    }", "    if x < y {\n\
    \        let z = x + ((y - x) / 2);\n        if z % 2 == 0 {\n            return\
    \ z;\n        }\n    }\n    -1", "    assert!(x >= 0 && y > 0, \"The x and y must\
    \ be greater than zero\");\n\n    let mut v = x;\n    while v < y {\n        v\
    \ = (v * 3) + 2;\n    }\n    if v < y {\n        v\n    } else {\n        -1\n\
    \    }", "    if x < y {\n        -1\n    } else {\n        x + 1\n    }", " \
    \   if x <= y {\n        return x;\n    }\n    if x >= y {\n        return y;\n\
    \    }\n    let mut x: isize = x;\n    let mut y: isize = y;\n    loop {\n   \
    \     if x % 2 == 0 {\n            x /= 2;\n        } else {\n            y /=\
    \ 2;\n            if y == 0 {\n                return x;\n            }\n    \
    \    }\n    }", "    if x < 0 || y <= x {\n        return -1\n    }\n\n    let\
    \ mut z = x + y;\n    let mut m: isize = x;\n\n    while m % 2 != 0 {\n      \
    \  z = z;\n        m += 1;\n    }\n\n    z - m", '    (x / 2) * (x + y / 2) +
    (x % 2) * y', "    if x <= y {\n        -1\n    } else {\n        let mut num:\
    \ isize = 0;\n        let mut temp: isize = x;\n        while temp <= y {\n  \
    \          let mut temp = temp * 2;\n            if temp > num {\n           \
    \     num = temp;\n            }\n        }\n        num\n    }", "    let mut\
    \ range: isize = 0usize;\n    let mut max_even: isize = -1;\n    while x < y {\n\
    \        if x % 2 == 0 && y % 2 == 0 {\n            range += 2usize;\n       \
    \ }\n        if x % 2 == 0 {\n            max_even = x;\n        }\n        if\
    \ y % 2 == 0 {\n            max_even = y;\n        }\n        x /= 2usize;\n \
    \       y /= 2usize;\n    }\n    if range == 0 {\n        max_even = -1\n    }\n\
    \    max_even", "    let mut num: isize = x;\n    for &i in (0..y-1).collect::<Vec<_>>()\
    \ {\n        if ((num & 1) == 0) {\n            return num;\n        }\n     \
    \   num /= 2;\n    }\n    return -1;", "    let mut biggest_number = x;\n    loop\
    \ {\n        if y > biggest_number {\n            biggest_number = y;\n      \
    \  }\n        biggest_number -= 1;\n        if biggest_number < x {\n        \
    \    break;\n        }\n    }\n    biggest_number", "    if x == y {\n       \
    \ x\n    }\n    else if x < y {\n        if x % 2 == 0 {\n            x / 2\n\
    \        }\n        else {\n            choose_num(y, x - 1)\n        }\n    }\n\
    \    else {\n        if y % 2 == 0 {\n            y / 2\n        }\n        else\
    \ {\n            choose_num(x, y - 1)\n        }\n    }", "    let mut n: isize\
    \ = 1;\n    for num in 1..=y {\n        if n % 2 == 0 && num * 2 <= x {\n    \
    \        n = num * 2;\n        }\n    }\n    if n > x {\n        n = x;\n    }\n\
    \    n", "    if x == y { return x; }\n    if x < y {\n        // x is bigger\
    \ than y\n        if x % 2 == 0 {\n            x / 2\n        } else {\n     \
    \       x + 1\n        }\n    } else if x > y {\n        // y is bigger than x\n\
    \        if y % 2 == 0 {\n            y / 2\n        } else {\n            y -\
    \ 1\n        }\n    } else {\n        // x and y are equal\n        0\n    }",
  "    if x >= y {\n        -1\n    } else if x <= y {\n        x\n    } else {\n\
    \        match x % 2 {\n            0 => y,\n            1 => x,\n           \
    \ _ => {\n                let mut x = x - 1;\n                let mut y = y -\
    \ 1;\n                while x >= y {\n                    x = x - 2;\n       \
    \             y = y - 2;\n                }\n                x + (y + 1)\n   \
    \         }\n        }\n    }", "    if x <= y {\n        return -1\n    }\n \
    \   for i in 0..(x+y-1) {\n        if i%2 == 0 {\n            return i;\n    \
    \    }\n    }\n    return -1;", "    let mut range: Vec<isize> = vec![x, y];\n\
    \    let mut current: isize = 0;\n    let mut current_min = x;\n    let mut current_max\
    \ = y;\n    loop {\n        let mut next = current_min;\n        let mut next\
    \ = next;\n        while next <= current_max {\n            next = next + 1;\n\
    \            if next > current_max {\n                next = 1;\n            }\n\
    \            if next % 2 == 0 {\n                break;\n            }\n     \
    \   }\n        let mut next = next;\n        while next <= current_max {\n   \
    \         next = next + 1;\n            if next > current_max {\n            \
    \    next = 1;\n            }\n            if next % 2 != 0 {\n              \
    \  break;\n            }\n        }\n        if next == current_max {\n      \
    \      break;\n        }\n        range.push(next);\n        current_min = next;\n\
    \    }\n    range.sort();\n    range[0]", "    let mut max_i = x;\n    let mut\
    \ max_j = y;\n    if y > x {\n        loop {\n            let mut i_next = x +\
    \ 1;\n            let mut j_next = y + 1;\n            while i_next < max_i &&\
    \ j_next < max_j {\n                let i = i_next;\n                let j = j_next;\n\
    \                let res = i_next + j_next;\n                if res > max_i {\n\
    \                    max_i = res;\n                }\n                if res <\
    \ max_j {\n                    max_j = res;\n                }\n             \
    \   if i == max_i {\n                    break;\n                }\n         \
    \       if j == max_j {\n                    break;\n                }\n     \
    \           i_next = i + 1;\n                j_next = j + 1;\n            }\n\
    \            if i_next > max_i {\n                break;\n            }\n    \
    \        if j_next > max_j {\n                break;\n            }\n        \
    \    x = i_next;\n            y = j_next;\n        }\n    }\n    -1", "    if\
    \ x <= y {\n        (x * x + y * (y - 1)) / 2\n    } else {\n        (x + 1) *\
    \ x / 2 + (y - 1) * y / 2\n    }", "    let mut min_num = std::cmp::min(x, y);\n\
    \    let mut max_num = std::cmp::max(x, y);\n    while max_num - min_num > 2 {\n\
    \        let mut mid = (min_num + max_num) / 2;\n        if mid % 2 == 0 {\n \
    \           min_num = mid;\n        } else {\n            max_num = mid;\n   \
    \     }\n    }\n    min_num", "    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut i = y;\n    let mut num = 0;\n    while (i <= x) && (!is_even(i))\
    \ {\n        i += 2;\n        num += 2;\n    }\n    num", "    let mut x = x;\n\
    \    let mut y = y;\n    loop {\n        if y >= x {\n            return -1;\n\
    \        }\n        let z = (x * y) / 2;\n        if z % 2 == 0 {\n          \
    \  x = z;\n        } else {\n            y = z;\n        }\n    }", "    if x\
    \ >= y {\n        return -1;\n    }\n\n    if x <= y {\n        return x - 1;\n\
    \    }\n\n    for i in x..y {\n        if i % 2 != 0 {\n            return i -\
    \ 1;\n        }\n    }\n\n    -1", "    let mut m = std::cmp::min(x, y);\n   \
    \ \n    if m == x { \n        while m == x && m != y {\n            m += 1;\n\
    \        }\n    } else {\n        while m != x && m == y {\n            m -= 1;\n\
    \        }\n    }\n    m", "    let mut num: isize = 0;\n    let mut counter =\
    \ 1;\n    while counter < y {\n        if num == x {\n            break;\n   \
    \     }\n        if num > x {\n            break;\n        }\n        if num <=\
    \ y {\n            num = num * 2;\n        }\n        else {\n            num\
    \ = num / 2;\n        }\n        counter++;\n    }\n    counter;", "    while\
    \ x > y && y > 0 {\n        let mut x = x - y;\n        let mut y = y - x;\n \
    \       if x % 2 == 0 {\n            x = x / 2;\n        } else {\n          \
    \  x = x + 1;\n            y = y - 1;\n        }\n    }\n    if x > y { x } else\
    \ { y }", "    if x <= y {\n        if x < 2 * y {\n            (x as isize) /\
    \ y\n        } else {\n            0\n        }\n    } else {\n        (y as isize)\
    \ / x\n    }", "    if x < y {\n        if y % 2 == 0 {\n            y\n     \
    \   } else {\n            -1\n        }\n    } else {\n        if x % 2 == 0 {\n\
    \            x\n        } else {\n            -1\n        }\n    }", "    if y\
    \ > x {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n    if\
    \ y == 0 || x == 0 {\n        -1\n    } else if y % 2 == 0 {\n        x - (y /\
    \ 2)\n    } else {\n        x + 1 + ((y / 2) + (y % 2))\n    }", "    if x <=\
    \ y {\n        if x == 0 {\n            x\n        } else {\n            x\n \
    \       }\n    } else {\n        if y == 0 {\n            y\n        } else {\n\
    \            y\n        }\n    }", "    if x <= y {\n        return -1\n    }\n\
    \    for i in 1..y {\n        if x % i == 0 {\n            return i\n        }\n\
    \    }\n    return -1", "    let mut result = x;\n    for _ in 0..y {\n      \
    \  if result % 2 == 0 {\n            break;\n        }\n        result /= 2;\n\
    \    }\n    result", "    if x >= y {\n        return -1;\n    }\n    for i in\
    \ x..y {\n        if i % 2 == 0 {\n            return i;\n        }\n    }\n \
    \   -1", "    if y <= x || y <= x {\n        return -1;\n    }\n    let mut max_even:\
    \ isize = 0;\n    let mut max_odd: isize = 0;\n    for i in 0..y {\n        if\
    \ y % 2 == 0 {\n            if x % 2 == 0 {\n                let num = i + (x-1)*2;\n\
    \                if num > max_even {\n                    max_even = num;\n  \
    \              }\n            } else {\n                let num = i + (x-1)*2;\n\
    \                if num > max_even {\n                    max_even = num;\n  \
    \              }\n            }\n        } else {\n            if x % 2 == 1 {\n\
    \                let num = i + (x-1)*2;\n                if num > max_even {\n\
    \                    max_even = num;\n                }\n            } else {\n\
    \                let num = i + (x-1)*2;\n                if num > max_even {\n\
    \                    max_even = num;\n                }\n            }\n     \
    \   }\n    }\n    for i in 0..y {\n        if y % 2 == 0 {\n            if x %\
    \ 2 == 1 {\n                let num = i + (x-1)*2;\n                if num > max_odd\
    \ {\n                    max_odd = num;\n                }\n            } else\
    \ {\n                let num = i + (x-1)*2;\n                if num > max_odd\
    \ {\n                    max_odd = num;\n                }\n            }\n  \
    \      } else {\n            if x % 2 == 0 {\n                let num = i + (x-1)*2;\n\
    \                if num > max_odd {\n                    max_odd = num;\n    \
    \            }\n            } else {\n                let num = i + (x-1)*2;\n\
    \                if num > max_odd {\n                    max_odd = num;\n    \
    \            }\n            }\n        }\n    }\n    if max_even > max_odd {\n\
    \        return max_even;\n    } else {\n        return max_odd;\n    }", "  \
    \  let x: i32 = x as i32;\n    let y: i32 = y as i32;\n    let mut x_: i32 = x;\n\
    \    let mut y_: i32 = y;\n    while x_ < y_ {\n        let mut tmp: i32 = (x_\
    \ * x_ + y_ * y_) mod 2_147_483_648;\n        if tmp > 2_147_483_648 { tmp = 2_147_483_648\
    \ };\n        if tmp < x_ { tmp = x_ };\n        x_ = tmp;\n        y_ = tmp %\
    \ y_;\n    };\n    x_", "    if y >= x {\n        -1\n    } else {\n        let\
    \ mut result = x;\n        if y % 2 == 0 {\n            while result % 2 != 0\
    \ {\n                result = result / 2;\n            }\n        } else {\n \
    \           while result % 2 != 0 {\n                result = result * 2;\n  \
    \          }\n        }\n        result\n    }", "    if x <= y {\n        if\
    \ x % 2 == 0 {\n            x\n        } else if y % 2 == 0 {\n            y\n\
    \        } else {\n            choose_num(x + 1, y + 1)\n        }\n    } else\
    \ {\n        if y % 2 == 0 {\n            y\n        } else {\n            choose_num(x\
    \ + 1, y + 1)\n        }\n    }", "    let mut biggest_even = -1;\n    let mut\
    \ smaller = x.saturating_sub(y);\n    while smaller < y && biggest_even == -1\
    \ { \n        if biggest_even < smaller { biggest_even = smaller; }\n        smaller\
    \ += x;\n    }\n    biggest_even", "    assert!(x > 0 && x < y, \"The given range\
    \ is invalid.\");\n    let mut max_num = if y > x {\n        x // if x is the\
    \ smaller range, then the max number is the smaller one.\n    } else {\n     \
    \   y // if y is the smaller range, then the max number is the smaller one.\n\
    \    };\n    let mut max_num_in_range = max_num;\n    for i in 1..max_num_in_range\
    \ {\n        if max_num_in_range % i == 0 {\n            max_num_in_range = i;\n\
    \        }\n    }\n    if max_num_in_range == x {\n        max_num\n    } else\
    \ {\n        -1\n    }", "    if x > y { choose_num(y, x); } else if x == y {\
    \ return x; }\n    \n    (x, y)\n        .iter()\n        .take_while(|&x| *x\
    \ <= *y)\n        .max()\n        .unwrap()", "    if y > x {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y - 1)\n    }", "    loop {\n      \
    \  if x == y { \n            return -1\n        } else if x > y { \n         \
    \   return -1\n        }\n        \n        if x % 2 == 0 {\n            x = x\
    \ / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }", "    if\
    \ x > y {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\n \
    \   let mut x: isize = 1;\n    let mut y: isize = 1;\n\n    while x <= y {\n \
    \       if x % 2 == 0 {\n            x += 1;\n        } else {\n            y\
    \ += 1;\n        }\n\n        if x > y {\n            let tmp = x;\n         \
    \   x = y;\n            y = tmp;\n        }\n    }\n\n    if x == y {\n      \
    \  x\n    } else {\n        -1\n    }", "    if x > y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, x + 1)\n    }", "    if y > x {\n  \
    \      choose_num(y, x)\n    }\n    if y >= x {\n        0\n    } else if x ==\
    \ 0 || y <= 0 || x >= y {\n        -1\n    } else {\n        let mut n = x;\n\
    \        while n > y {\n            n /= 2;\n        }\n        n\n    }", " \
    \   for i in 1..(y - x) {\n        if x%i == 0 {\n            return i;\n    \
    \    }\n    }\n    -1", "    if x < y {\n        let mut xx = x;\n        let\
    \ mut yy = y;\n        xx = xx - xx % yy;\n        yy = yy - yy % xx;\n      \
    \  if xx == 0 {\n            return yy;\n        } else if yy == 0 {\n       \
    \     return xx;\n        } else {\n            return xx + (yy / xx);\n     \
    \   }\n    } else {\n        let mut xx = x;\n        let mut yy = y;\n      \
    \  xx = xx - yy % xx;\n        yy = yy - xx % yy;\n        if xx == 0 {\n    \
    \        return yy;\n        } else if yy == 0 {\n            return xx;\n   \
    \     } else {\n            return yy + (xx / yy);\n        }\n    }", "    let\
    \ mut min = std::cmp::min(x, y);\n    let mut max = std::cmp::max(x, y);\n   \
    \ let mut mid: isize = 0;\n    let mut counter: isize = 0;\n    loop {\n     \
    \   let m = (min + max) / 2;\n        if m % 2 == 0 {\n            mid = m;\n\
    \            break;\n        }\n        if min >= y {\n            break;\n  \
    \      }\n        counter++;\n        if counter > 10000 {\n            break;\n\
    \        }\n        if max < x {\n            break;\n        }\n        if max\
    \ < x && min < y {\n            max = m;\n        } else {\n            min =\
    \ m;\n        }\n    }\n    if counter == 0 {\n        return -1;\n    }\n   \
    \ return mid;", "    let x_even = if x % 2 == 0 { return -1; }\n    x / 2;\n \
    \   let y_even = if y % 2 == 0 { return -1; }\n    y / 2;\n    match x_even, y_even\
    \ {\n        (0, 0) => x,\n        (x, y) => {\n            let mut min = x as\
    \ isize;\n            let mut max = y as isize;\n            while min <= max\
    \ {\n                let mid = (min + max) / 2;\n                if min % 2 ==\
    \ 0 && mid % 2 != 0 { return -1; }\n                if max % 2 == 0 && mid % 2\
    \ == 0 { return -1; }\n                if mid % 2 == 0 && min % 2 != 0 { return\
    \ -1; }\n                if mid % 2 == 0 && max % 2 != 0 { return -1; }\n    \
    \            if mid % 2 != 0 && min % 2 != 0 { return -1; }\n                if\
    \ mid % 2 != 0 && max % 2 != 0 { return -1; }\n                min = mid + 1;\n\
    \                max = mid - 1;\n            }\n            min\n        }\n \
    \   }", "    if x <= y {\n        y -= 1;\n    }\n    let mut min_max: (isize,\
    \ isize);\n    if x < y {\n        min_max = (y, x);\n    } else {\n        min_max\
    \ = (x, y);\n    }\n    let mut num: isize = 0;\n    for _ in 0..min_max[0] {\n\
    \        num += 1;\n    }\n    for _ in 0..min_max[1] {\n        num += 1;\n \
    \   }\n    while num > 2 {\n        if num % 2 == 0 {\n            num -= 2;\n\
    \        } else {\n            num /= 2;\n        }\n    }\n    num", "    let\
    \ mut n = x;\n    let mut m = y;\n\n    loop {\n        match n % m {\n      \
    \      0 => return n,\n            a => {\n                n = m;\n          \
    \      m += a;\n            }\n        }\n    }", "    let mut x = x;\n    let\
    \ mut y = y;\n    let mut ans = -1;\n\n    loop {\n        // if x is greater\
    \ than or equal to y, return -1 because there\n        // is no even number in\
    \ that range\n        if x >= y {\n            return ans;\n        }\n\n    \
    \    // if x is greater than y, then check if y is even\n        if y % 2 == 0\
    \ {\n            return ans;\n        }\n\n        // if y is even, then check\
    \ if x is odd\n        if x % 2 == 1 {\n            return ans;\n        }\n\n\
    \        ans += 1;\n        x /= 2;\n        y /= 2;\n    }", "    if x < y {\n\
    \        (x, y)\n    } else {\n        (y, x)\n    }\n    .iter()\n    .take_while(|&x|\
    \ x < y)\n    .max()\n    .unwrap_or(-1)", "    if x <= y {\n        if x == y\
    \ { x }\n        else {\n            let mut low = x;\n            let mut high\
    \ = y;\n            loop {\n                let mid = (((low + high) / 2) + low)\
    \ as usize;\n                if mid < x {\n                    low = mid + 1;\n\
    \                } else {\n                    high = mid - 1;\n             \
    \   }\n                if low == high {\n                    return mid;\n   \
    \             }\n            }\n        }\n    } else {\n        if y == x { y\
    \ }\n        else {\n            let mut low = y;\n            let mut high =\
    \ x;\n            loop {\n                let mid = (((low + high) / 2) + high)\
    \ as usize;\n                if mid < y {\n                    low = mid + 1;\n\
    \                } else {\n                    high = mid - 1;\n             \
    \   }\n                if low == high {\n                    return mid;\n   \
    \             }\n            }\n        }\n    }\n    -1", "    assert!(x == y);\n\
    \    let x_even = x % 2 == 0;\n    let y_even = y % 2 == 0;\n    if x_even &&\
    \ y_even {\n        x\n    } else if x_even {\n        y\n    } else {\n     \
    \   x\n    }", "    let mut a = x;\n    let mut b = y;\n    let mut c = 1;\n \
    \   let mut d = 1;\n    let mut s = 1;\n    let mut z = 0;\n\n    while d < b\
    \ {\n        if b - d < 3 {\n            if d + 4 <= b {\n                z =\
    \ c + 4;\n            }\n            \n            // when `d` is divisible by\
    \ 3 `s` is 2\n            if d % 3 == 0 {\n                s *= 2;\n         \
    \   }\n        } else {\n            z = c + 5;\n        }\n        c = d;\n \
    \       d = z;\n        b -= s;\n    }\n    \n    if b == 0 {\n        if c ==\
    \ x {\n            return -1\n        } else {\n            return c\n       \
    \ }\n    } else {\n        return -1\n    }", "    if y <= x {\n        return\
    \ -1;\n    }\n    \n    let mut x = x;\n    let mut y = y;\n\n    while x <= y\
    \ {\n        if x % 2 == 0 {\n            x /= 2;\n        } else {\n        \
    \    y /= 2;\n        }\n    }\n    y", "    if x <= y {\n        if x >= 15 &&\
    \ y >= 15 {\n            return 4\n        } else if x > 15 {\n            return\
    \ 3\n        } else if y > 15 {\n            return 2\n        } else {\n    \
    \        return 1\n        }\n    } else {\n        if y >= 15 {\n           \
    \ return 3\n        } else if y > 15 {\n            return 2\n        } else {\n\
    \            return 1\n        }\n    }", "    for i in &range(x, y + 1) {\n \
    \       if i.is_multiple_of(2) {\n            return i;\n        }\n    }\n  \
    \  -1", "    if x < y {\n        choose_num(y, x).unwrap()\n    } else {\n   \
    \     x\n    }", "    let x_even = x % 2 == 0;\n    let y_even = y % 2 == 0;\n\
    \    if x_even && y_even {\n        if x == y {\n            return x;\n     \
    \   } else if x == y || x > y {\n            return -1;\n        } else {\n  \
    \          return y;\n        }\n    } else if x_even && !y_even {\n        if\
    \ x == y {\n            return x;\n        } else if x > y {\n            return\
    \ x;\n        } else {\n            return -1;\n        }\n    } else if !x_even\
    \ && y_even {\n        if x == y {\n            return x;\n        } else if x\
    \ > y {\n            return y;\n        } else {\n            return -1;\n   \
    \     }\n    } else {\n        return -1;\n    }", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        let n = x;\n        let mut even = x;\n        while\
    \ even % 2 == 0 {\n            even += 1;\n        }\n        n -= even;\n   \
    \     even = y;\n        while even % 2 == 0 {\n            even += 1;\n     \
    \   }\n        n -= even;\n        n - 1\n    }", "    let mut result = x;\n \
    \   loop {\n        if result < y {\n            result *= 2;\n            if\
    \ result < y {\n                return result;\n            }\n        } else\
    \ {\n            result /= 2;\n            if result < x {\n                return\
    \ result;\n            }\n        }\n    }\n    -1", "    let (min, max) = if\
    \ x > y { (y, x) } else { (x, y) };\n\n    for i in (min .. max).step_by(2) {\n\
    \        if i % 2 == 0 {\n            return i;\n        }\n    }\n    -1", " \
    \   if x < y {\n        choose_num(y, x)\n    } else if x == y {\n        x\n\
    \    } else {\n        choose_num(x - y, y + x)\n    }", "    let mut min_num\
    \ = x;\n    let mut max_num = y;\n    \n    // find the smallest even number greater\
    \ or equal to min_num\n    while min_num % 2 == 0 {\n        min_num += 1;\n \
    \   }\n    \n    // find the smallest even number greater than or equal to max_num\n\
    \    while max_num % 2 == 0 {\n        max_num += 1;\n    }\n    \n    // if there\
    \ is no even number in that range\n    if min_num > max_num {\n        return\
    \ -1;\n    }\n    \n    // if there is no even number in that range\n    if min_num\
    \ == max_num {\n        return min_num;\n    }\n    \n    // find the biggest\
    \ odd number between min_num and max_num\n    while max_num % 2 == 1 {\n     \
    \   max_num -= 1;\n    }\n    \n    return max_num;", "    if x < y {\n      \
    \  // x must be smaller than y\n        -1\n    } else {\n        ((x / y) * y).ceil()\n\
    \    }", "    let mut x: i32 = x;\n    let mut y: i32 = y;\n\n    // The \"if\"\
    \ condition below is not really necessary, but for \n    // readability, it was\
    \ included.\n    if x == y {\n        if x > y {\n            return -1;\n   \
    \     } else {\n            return x;\n        }\n    }\n\n    // The \"if\" condition\
    \ below is not really necessary, but for \n    // readability, it was included.\n\
    \    if x > y {\n        (x, y) = (y, x);\n    }\n\n    loop {\n        if x %\
    \ 2 == 0 {\n            // The \"if\" condition below is not really necessary,\
    \ but for \n            // readability, it was included.\n            if y % 2\
    \ == 0 {\n                (x, y) = (y, x);\n            } else {\n           \
    \     return x;\n            }\n        } else {\n            y -= 1;\n      \
    \  }\n    }", "    loop {\n        let result = if x % 2 == 0 && y % 2 == 0 {\n\
    \            x / 2 \n        } else {\n            -1\n        };\n        if\
    \ x < y {\n            return result;\n        }\n        x = y;\n        y =\
    \ result;\n    }", "    if x > y {\n        choose_num(y, x)\n    } else {\n \
    \       let mut y = y;\n        while x <= y {\n            if y % 2 == 0 {\n\
    \                break;\n            }\n            y /= 2;\n        }\n     \
    \   if y == x {\n            -1\n        } else {\n            x\n        }\n\
    \    }", "    if x >= y {\n        -1\n    } else {\n        debug_assert!(x <\
    \ y);\n        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(x\
    \ - 2, y - 1)\n        }\n    }", "    use std::cmp::Ordering;\n    \n    if x\
    \ > y {\n        (x, y) = (y, x);\n    }\n\n    // We have to use `isize` here\
    \ because `usize` does not implement `Ord`\n    // and therefore `Ordering::is_less`\
    \ does not work in the following \n    // line \n    let order = Ordering::Less;\n\
    \n    if x < y {\n        for number in 1..(x+y) / 2 {\n            if number\
    \ % 2 == 0 {\n                return number;\n            }\n        }\n    }\
    \ else if x < y {\n        for number in 1..(y+x) / 2 {\n            if number\
    \ % 2 == 0 {\n                return number;\n            }\n        }\n    }\
    \ else {\n        for number in 1..(x+y) / 2 {\n            if number % 2 == 0\
    \ {\n                return number;\n            }\n        }\n    }\n\n    -1",
  "    if x == y {\n        return -1;\n    }\n    if x % 2 == 0 {\n        choose_num(x\
    \ / 2, y)\n    } else {\n        choose_num(x / 2 + 1, y)\n    }", "    if x ==\
    \ y {\n        return -1\n    }\n    if x > y {\n        (x, y) = (y, x)\n   \
    \ }\n    for i in 0..(y-x) {\n        let mut t = i;\n        while t < x {\n\
    \            t += 2;\n        }\n        if t > x {\n            return t\n  \
    \      }\n    }\n    return -1", "    if x >= y {\n        return -1\n    }\n\
    \    let mut biggest_num: isize = x;\n    for n in (1..y).rev() {\n        if\
    \ biggest_num % n == 0 {\n            biggest_num = n;\n        }\n    }\n   \
    \ biggest_num", "    debug_assert!(x < y);\n\n    let mut num1 = x;\n    let mut\
    \ num2 = y;\n\n    // while there are still numbers in num1 and num2\n    while\
    \ num1 != 0 || num2 != 0 {\n        // if num1 has a bigger even number\n    \
    \    if num1 % 2 == 0 {\n            num1 /= 2;\n            // add 1 to num2\n\
    \            num2 += 1;\n            // continue while num1 has a bigger even\
    \ number\n            continue;\n        }\n        // else num2 has a bigger\
    \ even number\n        if num2 % 2 == 0 {\n            num2 /= 2;\n          \
    \  // add 1 to num1\n            num1 += 1;\n            // continue while num2\
    \ has a bigger even number\n            continue;\n        }\n        // else\
    \ num1 is even\n        num1 /= 2;\n        // num2 is even\n        num2 /= 2;\n\
    \        // add 1 to num1\n        num1 += 1;\n        // add 1 to num2\n    \
    \    num2 += 1;\n    }\n    num1", "    let mut high = x;\n    let mut low = y;\n\
    \    while low > high {\n        if low % 2 == 0 {\n            high = high /\
    \ 2;\n        } else {\n            low = low / 2;\n        }\n    }\n    if low\
    \ == high {\n        -1\n    } else {\n        high\n    }", "    if x < y {\n\
    \        choose_num(y, x)\n    } else if y == x {\n        x\n    } else {\n \
    \       let mut y = y;\n        while y % 2 != 0 {\n            y = y / 2;\n \
    \       }\n        y\n    }", "    let mut ans = if x <= y { x } else { y };\n\
    \    if y % 2 == 0 { ans += 1 };\n    ans", "    while y > x {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            x = x + 1;\n            y = y - 1;\n   \
    \     } else if x % 2 == 0 && y % 2 == 1 {\n            x = x + 1;\n        }\
    \ else {\n            y = y - 1;\n        }\n    }\n    y", "    // TODO: replace\
    \ with range check\n    let mut candidate = x;\n    while candidate < y && candidate\
    \ % 2 == 0 {\n        candidate += 1;\n    }\n    if candidate >= y {\n      \
    \  -1\n    } else {\n        candidate\n    }", "    if x > y {\n        (x, y)\
    \ => {\n            let max = find_max(x, y)\n            if max < x {\n     \
    \           max\n            } else {\n                x - max\n            }\n\
    \        }\n    } else {\n        (y, x) => {\n            let max = find_max(x,\
    \ y)\n            if max < y {\n                max\n            } else {\n  \
    \              y - max\n            }\n        }\n    }", "    if x > y {\n  \
    \      choose_num(y, x)\n    }\n    if x == y {\n        x\n    } else {\n   \
    \     if x % 2 == 0 {\n            if y % 2 == 0 {\n                x\n      \
    \      } else {\n                -1\n            }\n        } else {\n       \
    \     if y % 2 == 0 {\n                y\n            } else {\n             \
    \   -1\n            }\n        }\n    }", "    if y > x {\n        choose_num(y,\
    \ x)\n    } else {\n        if x % 2 == 0 {\n            x\n        } else {\n\
    \            y\n        }\n    }", "    if y < x {\n        (x, y) = (y, x)\n\
    \    }\n    let mut x = x;\n    let mut y = y;\n    loop {\n        let mid =\
    \ x as usize / 2 as isize;\n        if y >= mid {\n            x -= mid as isize;\n\
    \            return x;\n        }\n        y -= mid as isize;\n    }", "    match\
    \ y > x {\n        true => -1,\n        false => match y / 2 {\n            1\
    \ => x,\n            y => y,\n        },\n    }", "    let x = x as usize;\n \
    \   let y = y as usize;\n    if x < y {\n        let z = y - x;\n        x + (z\
    \ as isize) / 2\n    } else {\n        let z = x - y;\n        y + (z as isize)\
    \ / 2\n    }", "    if x >= y {\n        -1\n    } else {\n        let mut m =\
    \ *y;\n        if m % 2 == 1 {\n            if m < x {\n                while\
    \ m % 2 == 1 {\n                    m += 1;\n                }\n            }\n\
    \        } else {\n            while m % 2 == 0 {\n                m += 1;\n \
    \           }\n        }\n        m\n    }", "    while y > x {\n        let mut\
    \ mid = x.checked_add(y).unwrap();\n        if mid % 2 == 0 {\n            mid\
    \ = mid.try_add(1, &mut x).unwrap();\n        } else if mid % 3 == 0 {\n     \
    \       mid = mid.try_add(1, &mut x).unwrap();\n        } else if mid % 5 == 0\
    \ {\n            mid = mid.try_add(1, &mut x).unwrap();\n        }\n        x\
    \ = mid;\n        y = x.checked_add(y).unwrap();\n    }\n    -1", "    if x <=\
    \ y {\n        return -1;\n    }\n    for n in 1..(y + 1) {\n        if n % 2\
    \ == 0 {\n            return n;\n        }\n    }\n    -1", "    use core::cmp::min;\n\
    \    if x > y {\n        (x, y) = (y, x)\n    }\n    for n in 1..=y {\n      \
    \  if n % 2 == 0 && n > x {\n            return n;\n        }\n    }\n    return\
    \ -1", "    let mut min_num = x as i64;\n    let mut max_num = y as i64;\n   \
    \ if max_num < min_num {\n        let temp = min_num;\n        min_num = max_num;\n\
    \        max_num = temp;\n    }\n    while max_num - min_num > 2 {\n        let\
    \ mut mid = (min_num + max_num) / 2;\n        if mid % 2 == 0 {\n            min_num\
    \ = mid;\n        } else {\n            max_num = mid;\n        }\n    }\n   \
    \ while max_num > 0 {\n        if max_num % 2 == 0 {\n            return max_num;\n\
    \        }\n        max_num -= 1;\n    }\n    -1", "    debug!(\"choose_num({},\
    \ {})\", x, y);\n    if x < y {\n        std::mem::swap(&x, &y);\n    }\n    debug_assert!(x\
    \ > 0);\n    debug_assert!(y > 0);\n\n    let mut result = -1;\n    if x > y {\n\
    \        loop {\n            let a = x / 2;\n            if a > 0 {\n        \
    \        result = a;\n                x -= a;\n            } else {\n        \
    \        let b = x / 2;\n                if b > y {\n                    result\
    \ = b;\n                    break;\n                } else {\n               \
    \     x = b;\n                }\n            }\n        }\n    } else {\n    \
    \    loop {\n            let a = y / 2;\n            if a > 0 {\n            \
    \    result = a;\n                y -= a;\n            } else {\n            \
    \    let b = y / 2;\n                if b > x {\n                    result =\
    \ b;\n                    break;\n                } else {\n                 \
    \   y = b;\n                }\n            }\n        }\n    }\n\n    result",
  "    if x < y {\n        choose_num(y, x)\n    } else {\n        let x_mod = x %\
    \ 2;\n        let y_mod = y % 2;\n        if x_mod > y_mod {\n            choose_num(y,\
    \ x)\n        } else {\n            choose_num(x, y)\n        }\n    }", "   \
    \ while x <= y {\n        let num = if x % 2 == 0 { x } else { x - 1 };\n    \
    \    if num >= y && num % 2 != 0 {\n            return num;\n        }\n     \
    \   x = x + 1;\n    }\n    return -1;", "    if x == y {\n        x\n    } else\
    \ {\n        let mut x: isize = x;\n        let mut y: isize = y;\n        loop\
    \ {\n            if x % 2 == 0 {\n                x /= 2;\n            } else\
    \ {\n                y /= 2;\n            }\n            if x >= y {\n       \
    \         break;\n            }\n        }\n        x\n    }", "    loop {\n \
    \       \n        if x >= y {\n            \n            return -1;\n        }\n\
    \        \n        let mut i = x;\n        let mut j = y;\n        \n        while\
    \ i >= j {\n            \n            if i % 2 == 0 {\n                \n    \
    \            j += 1;\n            \n            } else {\n                \n \
    \               i -= 1;\n            }\n        }\n        \n        if i < j\
    \ {\n            \n            return i;\n        }\n    }", '    (x + ((y - 1)
    / 2)).try_clone().unwrap().unwrap_or(-1)', '    (0..y).find(|i| i % 2 == 0)',
  "    if x < y {\n        choose_num(y, x)\n    } else {\n        let mut x = 0;\n\
    \        let mut y = 1;\n\n        while x < y {\n            let z = (x / y)\
    \ * y;\n            x /= y;\n            y = z;\n        }\n\n        if x ==\
    \ y {\n            x\n        } else {\n            -1\n        }\n    }", " \
    \   let mut min_i = if x < y {\n        x\n    } else {\n        y\n    };\n \
    \   let mut max_i = if x < y {\n        y\n    } else {\n        x\n    };\n \
    \   while min_i <= max_i {\n        let mut min_i = if min_i < min_i + 2 {\n \
    \           min_i + 2\n        } else {\n            min_i\n        };\n     \
    \   let mut max_i = if min_i > max_i - 2 {\n            max_i - 2\n        } else\
    \ {\n            max_i\n        };\n        if min_i <= max_i {\n            if\
    \ max_i % 2 == 0 {\n                return max_i\n            }\n        }\n \
    \   }\n    -1", "    let mut result = x;\n    for i in 1..y {\n        if result\
    \ % 2 == 0 {\n            return result;\n        }\n        result *= 2;\n  \
    \  }\n    -1", "    if x < y {\n        (x, y)\n    } else {\n        (y, x)\n\
    \    }\n    .iter()\n    .filter(|&x| x.is_even())\n    .max()\n    .unwrap_or(-1)",
  "    // We are going to loop over all the numbers from 1 to y inclusive\n    //\
    \ and check if each number is even.\n    // If any of those numbers doesn't satisfy\
    \ the condition, then we return\n    // -1. \n    for num in 1..y {\n        if\
    \ num % 2 == 0 {\n            return num;\n        }\n    }\n    return -1;",
  "    if x < y {\n        choose_num(y, x)\n    } else if x > y {\n        choose_num(x,\
    \ y)\n    } else {\n        if x % 2 == 0 {\n            x\n        } else {\n\
    \            y\n        }\n    }", "    match (x, y) {\n        (i, _) => if i%2\
    \ == 0 { i } else { return -1 },\n        _ => -1,\n    }", "    let mut counter\
    \ = 0;\n    let mut even = false;\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    let mut even_counter = 0;\n    while even_counter < 2 || x > y {\n\
    \        if x == y {\n            counter = counter + 1;\n        }\n        if\
    \ even {\n            x /= 2;\n            even ^= true;\n        } else {\n \
    \           y *= 2;\n            even ^= false;\n        }\n        even_counter\
    \ = even_counter + 1;\n    }\n    counter", "    let max_num = if x%2 == 0 {\n\
    \        x\n    } else {\n        y\n    };\n    if max_num > 50 {\n        max_num\
    \ - 10\n    } else {\n        max_num + 10\n    }", "    if y <= x {\n       \
    \ return -1;\n    }\n    let mut x = x;\n    let mut y = y;\n    let mut found\
    \ = false;\n    while !found && x % 2 == 0 && y % 2 == 0 {\n        x /= 2;\n\
    \        y /= 2;\n        if x == y {\n            found = true;\n        }\n\
    \    }\n    if found {\n        x\n    } else {\n        -1\n    }", "    if x\
    \ <= 0 || y <= 0 {\n        return -1;\n    }\n    let mut num: isize = 1;\n \
    \   for n in &(1..y) {\n        if n % 2 != 0 {\n            break;\n        }\n\
    \        num *= 2;\n    }\n    for n in &(1..x).rev() {\n        if n % 2 == 0\
    \ {\n            break;\n        }\n        num *= 2;\n    }\n    num", "    let\
    \ mut min_num = x;\n    let mut max_num = y;\n\n    for num in min_num..=max_num\
    \ {\n        if num % 2 == 0 {\n            return num;\n        }\n\n       \
    \ if num < min_num {\n            min_num = num;\n        }\n        if num >\
    \ max_num {\n            max_num = num;\n        }\n    }\n    -1", "    if x\
    \ >= y {\n        -1\n    } else if x > y {\n        x\n    } else {\n       \
    \ y\n    }", "    for i in (x + 1)..(y + 1) {\n        if ((i % 2) == 0 && i !=\
    \ y) {\n            return i;\n        }\n    }\n    -1", "    if x < y {\n  \
    \      choose_num(y, x)\n    } else {\n        choose_num(x, y - 1)\n    }", " \
    \   match x.checked_sub(y) {\n        Some(y) =>\n            if y % 2 == 0 {\n\
    \                if y == 0 {\n                    return -1;\n               \
    \ }\n                y / 2\n            } else {\n                x / 2\n    \
    \        },\n        _ => return -1,\n    }", "    if x < 0 || y < 0 {\n     \
    \   return -1;\n    }\n\n    loop {\n        let a = x as isize;\n        let\
    \ b = y as isize;\n\n        let d = b - a;\n        if d < 0 {\n            a\
    \ = a + 1;\n            b = b - 1;\n        } else {\n            let mut x =\
    \ a;\n            a = b - 1;\n            b = x;\n        }\n\n        if a %\
    \ 2 == 0 {\n            return a;\n        }\n\n        // otherwise choose a\n\
    \    }", "    let mut min_num: isize;\n    let mut max_num = y;\n    \n    while\
    \ max_num > x {\n        min_num = max_num;\n        max_num += 1;\n    }\n  \
    \  \n    if max_num == x {\n        max_num = max_num + 1; // this makes a corner\
    \ case where we have the same number in both ranges\n    }\n    \n    min_num",
  "    let mut x = x;\n    let mut y = y;\n    let mut max = x;\n    while x != y\
    \ {\n        if max % 2 == 0 {\n            max /= 2;\n        } else {\n    \
    \        max = max - 1;\n        }\n        x /= 2;\n        y /= 2;\n    }\n\
    \    max", "    if x > y {\n        (x, y) = (y, x);\n    }\n    for i in (1..x).step_by(2)\
    \ {\n        if ((i) as i32 % 2) == 0 {\n            return i;\n        }\n  \
    \  }\n    -1", "    let mut evens: Vec<isize> = vec![1, 2, 4, 8, 16, 32, 64, 128];\n\
    \    evens = evens.iter().filter(|&x| x <= y).collect();\n    evens = evens.iter().filter(|&x|\
    \ x > y).collect();\n    evens = evens.iter().filter(|&x| x % 2 == 0).collect();\n\
    \    let mut even = evens.iter().max().unwrap();\n    if even < x || even > y\
    \ {\n        even = -1;\n    }\n    even", "    if x <= y {\n        choose_num(y,\
    \ x)\n    }\n    if x == y {\n        x\n    } else {\n        (x * y + x) / (y\
    \ * y)\n    }", "    if x <= y {\n        return -1;\n    }\n    let mut result\
    \ = x;\n    while result == result + 1 { result += 2; }\n    if result == y {\n\
    \        return result;\n    }\n    while result > y {\n        result -= 2;\n\
    \    }\n    result", "    while y > x {\n        let (max, index) = (y, x); //\
    \ find larger number\n        if max % 2 == 0 {\n            x = index; // remember\
    \ index\n        } else {\n            y = index; // remember index\n        }\n\
    \    }\n\n    y as isize", "    assert!((x < y) && (y < 1000));\n    loop {\n\
    \        let mut num_x = x;\n        let mut num_y = y;\n        match num_x %\
    \ num_y {\n            0 => return num_y,\n            _ => num_x -= num_y,\n\
    \        }\n    }", "    let mut max = x;\n    if y > max {\n        max = y;\n\
    \    }\n\n    // Loop over the numbers from x to y until a number is found.\n\
    \    for i in 0..max {\n        if isEven(i) {\n            max = i;\n       \
    \ }\n    }\n\n    // Return the number if it is evenly divisible by 2.\n    if\
    \ isEven(max) {\n        max\n    } else {\n        -1\n    }", "    if x >= y\
    \ {\n        -1\n    } else {\n        let mut res = x;\n        let mut i = y;\n\
    \        while i != res {\n            if res * res == i {\n                return\
    \ res;\n            }\n            res -= i;\n            i += i;\n        }\n\
    \        -1\n    }", "    let mut num = x;\n    let mut i = 0;\n    while num\
    \ < y {\n        if num % 2 == 0 {\n            num += 1;\n        } else {\n\
    \            num -= 1;\n        }\n        i += 1;\n    }\n    if i == 0 {\n \
    \       -1\n    } else {\n        num\n    }", "    let mut n = x;\n    while\
    \ n < y {\n        let mut d = 1;\n        while d < n {\n            if n%d ==\
    \ 0 {\n                n = n + d;\n            } else {\n                d = d\
    \ + 1;\n            }\n        }\n    }\n    n", '    (x + y).checked_div_by(2).unwrap_or(-1)',
  "    if x < y {\n        let x = x;\n        let y = y;\n        let (low, high)\
    \ = if x + y > 0 {\n            (y, x)\n        } else {\n            (1, y)\n\
    \        };\n\n        // If y >= high - low, then we get exactly x because high\
    \ - low is \n        // less than or equal to y. \n        if x >= (high - low)\
    \ {\n            return x;\n        }\n\n        // If x <= high - low, then we\
    \ get exactly y because high - low is \n        // less than or equal to y. \n\
    \        if x <= (high - low) {\n            return y;\n        }\n\n        //\
    \ We know that x <= high - low and y <= high - low, so we can find \n        //\
    \ the middle point.\n        if high - low == 2 {\n            if x + y == 0 {\n\
    \                return -1;\n            }\n            return (x + y / 2);\n\
    \        }\n\n        if x + y == 0 {\n            return -1;\n        }\n   \
    \     if x <= high - low * 2 && y <= high - low * 2 {\n            return (x +\
    \ y / 2);\n        }\n\n        // We know that y <= high - low, so we can find\
    \ x by finding \n        // the two middle points.\n        \n        // The code\
    \ below is just a straightforward implementation of the \n        // method presented\
    \ in the paper \n        // \"A Fast Algorithm for Finding the Longest Common\
    \ Subsequence \n        // Using the Floyd-Warshall Algorithm\"\n        // by\
    \ Jonathan Kehayias. \n        let mut mx: f32 = 1.0;\n        let mut mx_idx:\
    \ i32 = 0;\n\n        // find mx first\n        for i in 0..(high - low) {\n \
    \           if i == low {\n                mx = (x + y + 1);\n               \
    \ mx_idx = 0;\n            } else {\n                let x_ij: f32 = (((high -\
    \ low) * x) + i) / high;\n                let y_ij: f32 = (((high - low) * y)\
    \ + i) / high;\n                mx = std::cmp::max(mx, x_ij);\n              \
    \  mx = std::cmp::max(mx, y_ij);\n                mx_idx += 1;\n            }\n\
    \        }\n        \n        // Then find the two middle points for x and y.\n\
    \        for i in 0..(high - low) {\n            let x_idx = if i == low {\n \
    \               mx_idx\n            } else {\n                mx_idx - i;\n  \
    \          };\n\n            let y_idx = if i == low {\n                mx_idx\
    \ - 1\n            } else {\n                mx_idx + i;\n            };\n\n \
    \           mx_idx = x_idx;\n            mx = std::cmp::max(mx, (x + y + 1));\n\
    \            mx_idx = y_idx;\n            mx = std::cmp::max(mx, (x + y + 1));\n\
    \        }\n\n        if m", "    if x >= y {\n        return -1;\n    }\n   \
    \ for num in 0..(x+y) {\n        if num % 2 == 0 {\n            return num;\n\
    \        }\n    }\n    -1", "    if x <= y {\n        choose_num_small(x, y)\n\
    \    } else {\n        choose_num_large(x, y)\n    }", "    if x > y {\n     \
    \   (x, y)\n    } else {\n        (y, x)\n    }", "    match (x % 2, y % 2) {\n\
    \        (false, false) => return -1,\n        (true, false) => return x,\n  \
    \      (false, true) => return y,\n        (_, true) => return -1,\n    }", " \
    \   use std::cmp::Ordering;\n    if x > y {\n        (x, y)\n    } else {\n  \
    \      (y, x)\n    }\n        .iter()\n        .cloned()\n        .fold(\n   \
    \         || if x <= 1 { -1 } else { 0 },\n            |a, b| {\n            \
    \    if a > b {\n                    a\n                } else {\n           \
    \         b\n                }\n            }\n        )", '    (x / 2 % 2, y
    / 2 % 2).max(|a, b| a.cmp(b).unwrap())', "    let mut even = 0;\n    let mut biggest\
    \ = y;\n    for num in 1..(y+1) {\n        if x % num == 0 {\n            even\
    \ += 1;\n            if even > biggest {\n                biggest = even;\n  \
    \          }\n        }\n    }\n    biggest", "    let mut max_num: isize = x;\n\
    \    let mut min_num = y;\n    loop {\n        if max_num < min_num {\n      \
    \      return -1;\n        }\n        if max_num % 2 == 0 {\n            max_num\
    \ -= 2;\n        } else {\n            max_num -= 1;\n        }\n        min_num\
    \ -= 2;\n    }", "    let mut biggest = if y < x {\n        x\n    } else {\n\
    \        y\n    };\n    \n    for i in 1..biggest {\n        if x % i == 0 &&\
    \ y % i == 0 {\n            biggest = i;\n            break;\n        }\n    }\n\
    \    \n    biggest", '    (*x)/2 + if x < y { x - y } else { y - x } + 1', " \
    \   if y > x {\n        choose_num(y, x)\n    } else if y == x {\n        x\n\
    \    } else {\n        x + 1\n    }", "    loop {\n        let x_int = x as i32;\n\
    \        let y_int = y as i32;\n        if x_int >= y_int {\n            return\
    \ x_int;\n        }\n        else {\n            return y_int;\n        }\n  \
    \  }", "    if y > x {\n        choose_num(y, x)\n    } else {\n        if y %\
    \ 2 == 0 {\n            x\n        } else {\n            -1\n        }\n    }",
  "    assert!(x <= y, \"x must be less than or equal to y\");\n    let mut min_num\
    \ = x;\n    let mut max_num = y;\n    while max_num >= min_num {\n        let\
    \ mut current_num = min_num;\n        let mut flag = true;\n        while flag\
    \ {\n            if current_num & 1 == 0 {\n                return -1;\n     \
    \       }\n            current_num = current_num >> 1;\n            flag = false;\n\
    \        }\n        min_num = current_num;\n        max_num = max_num - 1;\n \
    \   }\n    -1", "    if x == y {\n        return -1;\n    }\n    if x > y {\n\
    \        (x, y) = (y, x);\n    }\n    for z in 0..y {\n        if x * z + 2 %\
    \ y == x {\n            return x;\n        }\n    }\n    return -1;", "    let\
    \ mut x = x;\n    let mut y = y;\n    if x < y {\n        (x, y) = (y, x);\n \
    \   }\n    let mut z = 1;\n    while y < z {\n        z = z * 2;\n    }\n    while\
    \ x < z {\n        x = x * 2;\n    }\n    while y > z {\n        y = y - z\n \
    \   }\n    x", "    let mut x = x;\n    let mut y = y;\n    if x < y {\n     \
    \   (x, y) = (y, x);\n    };\n    \n    if y % 2 == 0 {\n        return y;\n \
    \   };\n\n    let mut z = x;\n    z -= 1;\n    while z < y {\n        z += y;\n\
    \    }\n\n    return z;", "    // We want x and y to be positive number\n    if\
    \ x < y {\n        (x, y) = (y, x);\n    }\n    let mut max_even = x;\n    let\
    \ mut max_odd = y;\n    while max_even % 2 == 0 {\n        max_even /= 2;\n  \
    \  }\n    while max_odd % 2 == 0 {\n        max_odd /= 2;\n    }\n    if max_even\
    \ < max_odd {\n        max_odd += 1;\n    }\n    -1", "    if y > x {\n      \
    \  choose_num(y, x)\n    } else if x <= 0 {\n        -1\n    } else {\n      \
    \  let mut x = 0\n        let mut y = 0\n        let mut x_min = x as isize;\n\
    \        let mut x_max = x as isize;\n        let mut y_min = y as isize;\n  \
    \      let mut y_max = y as isize;\n        loop {\n            if x_min >= y_min\
    \ {\n                x += 1;\n                continue // next x or next y\n \
    \           }\n            if x_max <= y_max {\n                y += 1;\n    \
    \            continue // next x or next y\n            }\n            if x <=\
    \ y_min {\n                x -= 1;\n                continue // next x or next\
    \ y\n            }\n            if x >= y_max {\n                y -= 1;\n   \
    \             continue // next x or next y\n            }\n            if x ==\
    \ y {\n                return x;\n            }\n        }\n    }\n    -1", " \
    \   let mut x: isize = (x as isize) >> 1;\n    let mut y: isize = (y as isize)\
    \ >> 1;\n\n    while x > y && x % 2 == 0 {\n        x /= 2;\n    }\n\n    while\
    \ y > x && y % 2 == 0 {\n        y /= 2;\n    }\n\n    if x > y {\n        x\n\
    \    } else {\n        y\n    }", "    if y > x {\n        (x, y)\n    } else\
    \ {\n        (y, x)\n    }\n    .iter()\n    .take_while(|&x| x < y)\n    .next()",
  "    let mut min = x;\n    let mut max = y;\n    if min < max {\n        while min\
    \ < max && min % 2 == 0 {\n            min += 1;\n        }\n        while max\
    \ > min && max % 2 == 0 {\n            max -= 1;\n        }\n        if min >=\
    \ max {\n            return -1;\n        }\n    }\n    min", "    if y < x {\n\
    \        choose_num(y, x)\n    } else {\n        let mut min_x = x;\n        let\
    \ mut max_x = x; \n        let mut min_y = y;\n        let mut max_y = y; \n \
    \       loop {\n            if min_y > max_y { \n                max_y = max_x;\
    \ \n                min_y = min_x; \n            } else if min_x == max_x { \n\
    \                return min_x; \n            } else {\n                if min_x\
    \ == max_y { \n                    min_x++; \n                    if min_x ==\
    \ max_x { \n                        return min_x; \n                    }\n  \
    \              } else {\n                    let mut temp = min_x;\n         \
    \           min_x = min_y; \n                    min_y = temp; \n            \
    \    }\n            }\n        }\n    }\n    -1", "    if x == y {\n        return\
    \ -1\n    }\n    \n    let mid = if x < y { x + y } else {y - x};\n\n    if mid\
    \ < 2 {\n        return mid\n    }\n\n    let mut min = 0;\n    let mut max =\
    \ mid;\n\n    while min < max {\n        if min % 2 == 0 {\n            if max\
    \ % 2 == 0 {\n                // even\n                min = min + 1;\n      \
    \          max = max - 1;\n            } else {\n                // odd\n    \
    \            min = min + 1;\n                max = max - 1;\n            }\n \
    \       } else if max % 2 == 0 {\n            // odd\n            min = min +\
    \ 1;\n            max = max - 1;\n        } else {\n            // even\n    \
    \        min = min + 1;\n            max = max - 1;\n        }\n    }\n\n    min",
  "    if y <= x {\n        -1\n    } else {\n        if ((y as f64).is_integer())\
    \ {\n            if ((x as f64).is_integer()) {\n                ((x as f64) as\
    \ isize)\n            } else {\n                if ((y as f64).is_positive())\
    \ {\n                    ((x as f64).ceil() as isize)\n                } else\
    \ {\n                    ((x as f64).floor() as isize)\n                }\n  \
    \          }\n        } else {\n            if ((y as f64).is_positive()) {\n\
    \                ((y as f64).floor() as isize)\n            } else {\n       \
    \         ((y as f64).ceil() as isize)\n            }\n        }\n    }", "  \
    \  if x < y {\n        choose_num(y, x)\n    } else if y < x {\n        choose_num(x,\
    \ y)\n    } else {\n        x\n    }"]
stop_tokens:
- "\n}"
