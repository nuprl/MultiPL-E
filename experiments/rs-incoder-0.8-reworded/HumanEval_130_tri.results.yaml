language: rs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v: Vec<_> = vec![];\n\n    if n <= 2 {\n        v.push(1);\n        v.push(2);\n\
    \    } else {\n        v.push(3);\n        let mut n2 = n - 2;\n        let mut\
    \ n3 = n - 3;\n        let mut n4 = n - 4;\n        let mut n5 = n - 5;\n    \
    \    let mut n6 = n - 6;\n        let mut n7 = n - 7;\n        let mut n8 = n\
    \ - 8;\n\n        v.push(1 + n2 / 2);\n        if n2 % 2 == 0 {\n            v.push(n2\
    \ + n3 / 2);\n        } else {\n            v.push(n3 + n4 / 2);\n        }\n\
    \        if n3 % 2 == 0 {\n            v.push(n3 + n4 + n5 / 2);\n        } else\
    \ {\n            v.push(n4 + n5 + n6 / 2);\n        }\n        if n4 % 2 == 0\
    \ {\n            v.push(n4 + n5 + n6 + n7 / 2);\n        } else {\n          \
    \  v.push(n5 + n6 + n7 + n8 / 2);\n        }\n        if n5 % 2 == 0 {\n     \
    \       v.push(n5 + n6 + n7 + n8 + n9 / 2);\n        } else {\n            v.push(n6\
    \ + n7 + n8 + n9 + n10 / 2);\n        }\n        if n6 % 2 == 0 {\n          \
    \  v.push(n6 + n7 + n8 + n9 + n10 + n11 / 2);\n        } else {\n            v.push(n7\
    \ + n8 + n9 + n10 + n11 + n12 / 2);\n        }\n        if n7 % 2 == 0 {\n   \
    \         v.push(n7 + n8 + n9 + n10 + n11 + n12 + n13 / 2);\n        } else {\n\
    \            v.push(n8 + n9 + n10 + n11 + n12 + n13 + n14 / 2);\n        }\n \
    \       if n8 % 2 == 0 {\n            v.push(n8 + n9 + n10 + n11 + n12 + n13 +\
    \ n14 + n15 / 2);\n        } else {\n            v.push(n9 + n10 + n11 + n12 +\
    \ n13 + n14 + n15 + n16 / 2);\n        }\n        if n9 % 2 == 0 {\n         \
    \   v.push(n9 + n10 + n11 + n12 + n13 + n14 + n15 + n16 + n17 / 2);\n        }\
    \ else {\n            v.push(n10 + n11 + n12 + n13 + n14 + n15 + n\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmprd6mrh96.rs:87:3\n\
    \   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                           \
    \     - unclosed delimiter\n...\n23 |     } else {\n   |            - unclosed\
    \ delimiter\n...\n71 |         } else {\n   |                - this delimiter\
    \ might not be properly closed...\n72 |             v.push(n10 + n11 + n12 + n13\
    \ + n14 + n15 + n\n73 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n87 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmprd6mrh96.rs:72:19\n\
    \   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                           \
    \     - closing delimiter possibly meant for this\n...\n72 |             v.push(n10\
    \ + n11 + n12 + n13 + n14 + n15 + n\n   |                   ^ unclosed delimiter\n\
    73 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value\
    \ `n9` in this scope\n  --> /tmp/tmprd6mrh96.rs:50:40\n   |\n50 |            \
    \ v.push(n5 + n6 + n7 + n8 + n9 / 2);\n   |                                  \
    \      ^^ help: a local variable with a similar name exists: `n`\n\nerror[E0425]:\
    \ cannot find value `n9` in this scope\n  --> /tmp/tmprd6mrh96.rs:52:35\n   |\n\
    52 |             v.push(n6 + n7 + n8 + n9 + n10 / 2);\n   |                  \
    \                 ^^ help: a local variable with a similar name exists: `n`\n\n\
    error[E0425]: cannot find value `n10` in this scope\n  --> /tmp/tmprd6mrh96.rs:52:40\n\
    \   |\n52 |             v.push(n6 + n7 + n8 + n9 + n10 / 2);\n   |           \
    \                             ^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `n9` in this scope\n  --> /tmp/tmprd6mrh96.rs:55:35\n   |\n55 | \
    \            v.push(n6 + n7 + n8 + n9 + n10 + n11 / 2);\n   |                \
    \                   ^^ help: a local variable with a similar name exists: `n`\n\
    \nerror[E0425]: cannot find value `n10` in this scope\n  --> /tmp/tmprd6mrh96.rs:55:40\n\
    \   |\n55 |             v.push(n6 + n7 + n8 + n9 + n10 + n11 / 2);\n   |     \
    \                                   ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `n11` in this"
  stdout: ''
  timestamp: 1659979222
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ > 0);\n    let mut res = Vec::with_capacity(1 + n + 1);\n    res.push(n);\n\
    \    res.push(n / 2);\n    if n % 2 == 1 {\n        res.push(1 + n / 2);\n   \
    \ } else {\n        res.push(3);\n        res.push(1 + n / 2);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgeuev65z.rs:19:38\n   |\n\
    19 |     let mut res = Vec::with_capacity(1 + n + 1);\n   |                  \
    \                    ^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     let mut res = Vec::with_capacity((1 + n + 1).try_into().unwrap());\n\
    \   |                                      +         +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ > 0);\n    let mut result = vec![];\n    for _ in 0..n {\n        result.push(3);\n\
    \    }\n    for _ in 0..(n + 1) {\n        let n = result.last().unwrap();\n \
    \       let a = result.remove(0).unwrap();\n        let b = result.remove(0).unwrap();\n\
    \        result.push((a + b + n) / 2);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmpncgd3gd0.rs:25:34\n   |\n25 |         let a = result.remove(0).unwrap();\n\
    \   |                                  ^^^^^^ method not found in `{integer}`\n\
    \nerror[E0599]: no method named `unwrap` found for type `{integer}` in the current\
    \ scope\n  --> /tmp/tmpncgd3gd0.rs:26:34\n   |\n26 |         let b = result.remove(0).unwrap();\n\
    \   |                                  ^^^^^^ method not found in `{integer}`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 {\n        vec![1]\n    } else {\n        let mut tri_vec: Vec<isize>\
    \ = vec![3,1];\n        tri_vec.push(tri_vec[0] + tri_vec[1] + tri_vec[2]);\n\
    \        if n%2 == 0 {\n            tri_vec.push(tri_vec[0] - tri_vec[1] + tri_vec[2]);\n\
    \        }\n        tri_vec\n    }\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 2 but the
    index is 2'', /tmp/tmpk_79vyds.rs:22:48

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    //\
    \ YOUR_CODE_HERE\n    vec![]\n}\n\nfn main() {\n    let candidate = tri;\n   \
    \ assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 3, 2, 8]`', /tmp/tmppws5ccif.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec.iter_mut().take(n as usize).enumerate().for_each(|(i,\
    \ j)| {\n        if i % 2 == 0 {\n            vec[j] = vec[i] + vec[i - 2];\n\
    \        } else {\n            vec[j] = vec[i] + vec[i - 2];\n        }\n    });\n\
    \    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryjgvzl9.rs:18:27\n   |\n\
    18 |     let mut vec = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut vec = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&mut {integer}`\n\
    \  --> /tmp/tmpryjgvzl9.rs:22:13\n   |\n22 |             vec[j] = vec[i] + vec[i\
    \ - 2];\n   |             ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `&mut {integer}`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&mut {integer}>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `&mut {integer}`\n  --> /tmp/tmpryjgvzl9.rs:24:13\n   |\n\
    24 |             vec[j] = vec[i] + vec[i - 2];\n   |             ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `&mut {integer}`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&mut {integer}>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 {\n        return vec![];\n    }\n    let mut vec: Vec<isize> = vec![];\n\
    \    vec[0] = tri_imp(0, n, 3);\n    vec[1] = tri_imp(1, n, 3);\n    vec[2] =\
    \ tri_imp(2, n, 3);\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n   \
    \ assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `tri_imp` in this scope\n  --> /tmp/tmp6xpcyxe9.rs:22:14\n\
    \   |\n22 |     vec[0] = tri_imp(0, n, 3);\n   |              ^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `tri_imp` in this scope\n\
    \  --> /tmp/tmp6xpcyxe9.rs:23:14\n   |\n23 |     vec[1] = tri_imp(1, n, 3);\n\
    \   |              ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `tri_imp` in this scope\n  --> /tmp/tmp6xpcyxe9.rs:24:14\n   |\n24\
    \ |     vec[2] = tri_imp(2, n, 3);\n   |              ^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = 3; \n    let mut b = 0; \n    let mut c = 1; // tri(0) = 3; \n    for\
    \ i in 1..n+1 {\n        // tri(i) = 3 + i / 2\n        if i % 2 == 0 {\n    \
    \        a += i / 2;\n        } else {\n            c += i;\n            a +=\
    \ c / 2;\n            c += a / 2;\n        } \n        b = a; a = c;\n    }\n\
    \    vec![a, b, c]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10, 7, 10]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp_or_68di.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut numbers = vec![];\n    numbers.push(n);\n    \n    let mut last_num = 1;\n\
    \    let mut first_num = 3;\n    \n    while numbers.len() < n + 1 {\n       \
    \ last_num += first_num;\n        first_num = last_num - first_num + first_num;\n\
    \        numbers.push((last_num as isize) / 2);\n    }\n    return numbers;\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4ouscbo8.rs:24:27\n   |\n\
    24 |     while numbers.len() < n + 1 {\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n24 |     while numbers.len()\
    \ < (n + 1).try_into().unwrap() {\n   |                           +     +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut sum: Vec<isize> = Vec::new();\n    if n <= 1 {\n        sum.push(3);\n \
    \       return sum;\n    }\n    sum.push(1);\n    let mut i: isize = 2;\n    let\
    \ mut temp: isize = 1;\n    while i < n {\n        temp += i;\n        i += 2;\n\
    \        sum.push(temp);\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp8anxteg7.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut vec = vec![1, 1, 1];\n\
    \    let mut tri = 1;\n    for i in 2..(n + 1) {\n        tri = tri * (n - 1)\
    \ + tri * (n - 2) + tri + 1;\n        vec.push(tri);\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 5, 21]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpkzlnd2q8.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut tri_vec = [0; n + 1];\n    tri_vec[0] = 3;\n    for i in 1..=n {\n     \
    \   if i % 2 == 0 {\n            tri_vec[i+1] = tri_vec[i] + tri_vec[i+1] + tri_vec[i+2];\n\
    \        } else {\n            tri_vec[i+1] = tri_vec[i] + tri_vec[i+1];\n   \
    \     }\n    }\n    tri_vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpbulx4veo.rs:18:27\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \        - this would need to be a `const`\n18 |     let mut tri_vec = [0; n +\
    \ 1];\n   |                           ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![1, 1, 1];\n    for _ in 0..n {\n        vec.push(vec.pop() +\
    \ vec.pop() + vec.pop());\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Option<{integer}>` to `Option<{integer}>`\n \
    \ --> /tmp/tmpxh3991ni.rs:20:28\n   |\n20 |         vec.push(vec.pop() + vec.pop()\
    \ + vec.pop());\n   |                  --------- ^ --------- Option<{integer}>\n\
    \   |                  |\n   |                  Option<{integer}>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    if n % 2 == 1 {\n        result.push(n);\n   \
    \ }\n    else {\n        result.push(1 + n / 2);\n        result.push(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpkpxgsizk.rs:24:32\n\
    \   |\n24 |         result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   | \
    \                    ---------- ^ ---------- Vec<isize>\n   |                \
    \     |\n   |                     Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = vec![3];\n    let mut b = vec![1 + n / 2];\n    let mut c = vec![1 +\
    \ n / 2];\n    for _i in 0..n {\n        a.push(a[a.len() - 1] + a[a.len() - 2]\
    \ + a[a.len() - 3]);\n        b.push(b[b.len() - 1] + b[b.len() - 2] + b[b.len()\
    \ - 3]);\n        c.push(c[c.len() - 1] + c[c.len() - 2] + c[c.len() - 3]);\n\
    \    }\n    return a;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpteufmvon.rs:22:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 1 {\n        vec![tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    } else\
    \ {\n        vec![n, tri(n - 1) + tri(n - 2), tri(n + 1)]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp4iepmmw3.rs:19:25\n\
    \   |\n19 |         vec![tri(n - 1) + tri(n - 2) + tri(n + 1)]\n   |         \
    \     ---------- ^ ---------- Vec<isize>\n   |              |\n   |          \
    \    Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  -->\
    \ /tmp/tmp4iepmmw3.rs:21:28\n   |\n21 |         vec![n, tri(n - 1) + tri(n - 2),\
    \ tri(n + 1)]\n   |                 ---------- ^ ---------- Vec<isize>\n   | \
    \                |\n   |                 Vec<isize>\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = 3; let mut b = 1; let mut c = 3;\n    for i in 1..n+1 {\n        a =\
    \ a + b;\n        b = c;\n        c = a + b;\n    }\n    let mut vec = vec![a,b,c];\n\
    \    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 14, 28]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp55ku28wb.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = 3;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n   \
    \ \n    while c < n + 1 {\n        b = a + c;\n        a = c;\n        c = b;\n\
    \        d += b;\n    }\n    \n    let mut vec = vec![1, 2, d];\n    \n    for\
    \ i in 0..n {\n        vec.push(a.clone());\n    }\n    \n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 12, 3, 3, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpk7tnlx4e.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 {\n        return vec![1isize];\n    }\n    let mut vec: Vec<isize> =\
    \ vec![];\n    let mut f1 = 1;\n    let mut f2 = 2;\n    for i in 1..n {\n   \
    \     let f1 = f1 + f2;\n        let f2 = f1;\n        vec.push(f1);\n    }\n\
    \    return vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpeb54py5u.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 1 {\n        let mut a = vec![3, 1];\n        a.extend_from_slice(&[n\
    \ / 2, n % 2]);\n        return a;\n    }\n    let mut a = [3, 1];\n    a.extend_from_slice(&[n\
    \ - 1, n - 2, n + 1]);\n    a\n}\n\nfn main() {\n    let candidate = tri;\n  \
    \  assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `extend_from_slice` found for array `[{integer};\
    \ 2]` in the current scope\n  --> /tmp/tmpicko4zoo.rs:24:7\n   |\n24 |     a.extend_from_slice(&[n\
    \ - 1, n - 2, n + 1]);\n   |       ^^^^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `clone_from_slice`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpicko4zoo.rs:25:5\n   |\n17 | fn tri(n: isize) -> Vec<isize>\
    \ {\n   |                     ---------- expected `Vec<isize>` because of return\
    \ type\n...\n25 |     a\n   |     ^- help: try using a conversion method: `.to_vec()`\n\
    \   |     |\n   |     expected struct `Vec`, found array `[{integer}; 2]`\n  \
    \ |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer};\
    \ 2]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n <= 1 {\n        return vec![];\n    }\n    vec![tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp4feu0g7i.rs:21:21\n\
    \   |\n21 |     vec![tri(n - 1) + tri(n - 2) + tri(n - 3)]\n   |          ----------\
    \ ^ ---------- Vec<isize>\n   |          |\n   |          Vec<isize>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979222
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = (1 + n\
    \ / 2) as isize;\n    if n % 2 == 0 {\n        for i in 2..(n + 1) {\n       \
    \     vec[i..i + 1] = (vec[i - 1] + vec[i - 2] + vec[i] - 1) as isize;\n     \
    \   }\n    } else {\n        for i in 2..(n + 1) {\n            vec[i..i + 1]\
    \ = (vec[i - 1] + vec[i - 2] + vec[i]) as isize;\n        }\n    }\n    vec\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn0fwir4l.rs:18:39\n   |\n\
    18 |     let mut vec: Vec<isize> = vec![0; n + 1];\n   |                     \
    \                  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n18 |     let mut vec: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                       +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpn0fwir4l.rs:23:13\n\
    \   |\n23 |             vec[i..i + 1] = (vec[i - 1] + vec[i - 2] + vec[i] - 1)\
    \ as isize;\n   |             ^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `std::ops::Range<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpn0fwir4l.rs:23:30\n   |\n23 |             vec[i..i + 1] = (vec[i\
    \ - 1] + vec[i - 2] + vec[i] - 1) as isize;\n   |                            \
    \  ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpn0fwir4l.rs:23:43\n\
    \   |\n23 |             vec[i..i + 1] = (vec[i - 1] + vec[i - 2] + vec[i] - 1)\
    \ as isize;\n   |                                           ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceInd"
  stdout: ''
  timestamp: 1659979222
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![]\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpqrmhcgu5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use\
    \ std::cmp::Ordering::Greater;\n    let mut v = [0; 3];\n    \n    v[0] = cmp::min(n\
    \ - 1, 0);\n    v[1] = v[0] + v[1]; //if n is even v[1] = v[0] + v[1]\n    v[2]\
    \ = v[0] + v[2]; //if n is odd v[2] = v[0] + v[2]\n    v[3] = v[1] + v[2]; //if\
    \ n is odd v[3] = v[1] + v[2]\n    \n    vec!(v..v)\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpd13huvb3.rs:21:12\n   |\n21 |     v[0] = cmp::min(n - 1, 0);\n\
    \   |            ^^^ use of undeclared crate or module `cmp`\n\nwarning: unused\
    \ import: `std::cmp::Ordering::Greater`\n  --> /tmp/tmpd13huvb3.rs:18:9\n   |\n\
    18 |     use std::cmp::Ordering::Greater;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd13huvb3.rs:26:10\n   |\n26 |     vec!(v..v)\n   |    \
    \      ^^^^ expected `isize`, found struct `std::ops::Range`\n   |\n   = note:\
    \ expected type `isize`\n            found struct `std::ops::Range<[{integer};\
    \ 3]>`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome\
    \ errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    result.push(3);\n    for _ in 1..(n+1) {\n   \
    \     let result = tri(result.last().unwrap()) + tri(result.last().unwrap()-1)\
    \ + tri(result.last().unwrap()+1);\n        result.push(result);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpit1st92m.rs:21:26\n   |\n\
    21 |         let result = tri(result.last().unwrap()) + tri(result.last().unwrap()-1)\
    \ + tri(result.last().unwrap()+1);\n   |                          ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&{integer}`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n21 |         let result = tri(*result.last().unwrap()) + tri(result.last().unwrap()-1)\
    \ + tri(result.last().unwrap()+1);\n   |                          +\n\nerror[E0369]:\
    \ cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpit1st92m.rs:21:50\n \
    \  |\n21 |         let result = tri(result.last().unwrap()) + tri(result.last().unwrap()-1)\
    \ + tri(result.last().unwrap()+1);\n   |                      ---------------------------\
    \ ^ ----------------------------- Vec<isize>\n   |                      |\n  \
    \ |                      Vec<isize>\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut seq: Vec<isize> = vec![];\n    seq.reserve(n + 3);\n    seq += vec![0, 1,\
    \ 2];\n    if n % 2 == 0 {\n        let mut prev_triplet = seq;\n        prev_triplet\
    \ += vec![prev_triplet[0], prev_triplet[1], prev_triplet[2] + 1 ];\n        while\
    \ n >= 2 {\n            let mut triplet = prev_triplet;\n            triplet +=\
    \ vec![triplet[0] + triplet[1], triplet[1], triplet[2] + 1 ];\n            prev_triplet\
    \ = triplet;\n            n -= 2;\n        }\n    } else {\n        let mut prev_triplet\
    \ = seq;\n        prev_triplet += vec![prev_triplet[0], prev_triplet[1], prev_triplet[2]\
    \ + 1 ];\n        while n > 0 {\n            let mut triplet = prev_triplet;\n\
    \            triplet += vec![triplet[0] + triplet[1], triplet[1] + triplet[2],\
    \ triplet[2] + 1 ];\n            prev_triplet = triplet;\n            n -= 1;\n\
    \        }\n    }\n    seq\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfrs1tpft.rs:19:17\n   |\n\
    19 |     seq.reserve(n + 3);\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     seq.reserve((n + 3).try_into().unwrap());\n\
    \   |                 +     +++++++++++++++++++++\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpfrs1tpft.rs:20:5\n\
    \   |\n20 |     seq += vec![0, 1, 2];\n   |     ---^^^^^^^^^^^^^^^^^\n   |   \
    \  |\n   |     cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpfrs1tpft.rs:23:9\n\
    \   |\n23 |         prev_triplet += vec![prev_triplet[0], prev_triplet[1], prev_triplet[2]\
    \ + 1 ];\n   |         ------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n  -->\
    \ /tmp/tmpfrs1tpft.rs:26:13\n   |\n26 |             triplet += vec![triplet[0]\
    \ + triplet[1], triplet[1], triplet[2] + 1 ];\n   |             -------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<isize>`\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmpfrs1tpft.rs:32:9\n   |\n32 |         prev_triplet += vec![prev_triplet[0],\
    \ prev_triplet[1], prev_triplet[2] + 1 ];\n   |         ------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n  -->\
    \ /tmp/tmpfrs1tpft.rs:35:13\n   |\n35 |             triplet += vec![triplet[0]\
    \ + triplet[1], triplet[1] + triplet[2], triplet[2] + 1 ];\n   |             -------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |           "
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n    vec.push(3);\n    \n    if n % 2 == 0 {\n       \
    \ for i in 2..n {\n            vec.push(i);\n            vec.push(vec.get(1) -\
    \ vec.get(2) + vec.get(3));\n        }\n    } else {\n        for i in 1..n {\n\
    \            vec.push(i);\n            vec.push(vec.get(1) - vec.get(2) - vec.get(3));\n\
    \        }\n    }\n    \n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `Option<&isize>` from `Option<&isize>`\n\
    \  --> /tmp/tmpbpwqy7hu.rs:24:33\n   |\n24 |             vec.push(vec.get(1) -\
    \ vec.get(2) + vec.get(3));\n   |                      ---------- ^ ----------\
    \ Option<&isize>\n   |                      |\n   |                      Option<&isize>\n\
    \nerror[E0369]: cannot subtract `Option<&isize>` from `Option<&isize>`\n  -->\
    \ /tmp/tmpbpwqy7hu.rs:29:33\n   |\n29 |             vec.push(vec.get(1) - vec.get(2)\
    \ - vec.get(3));\n   |                      ---------- ^ ---------- Option<&isize>\n\
    \   |                      |\n   |                      Option<&isize>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1, 1, n]\n    } else {\n        vec![1, 1, 2] + tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<{integer}>`\n  --> /tmp/tmpg14yw_9_.rs:21:23\n\
    \   |\n21 |         vec![1, 1, 2] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |\
    \         ------------- ^ ---------- Vec<isize>\n   |         |\n   |        \
    \ Vec<{integer}>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::with_capacity(n + 1);\n    if n == 0 || n == 1 {\n\
    \        vec.push(1);\n        vec\n    }\n    else {\n        let mut a = 2;\n\
    \        let mut b = 1;\n        let mut c = 3;\n        vec.push(a);\n      \
    \  while b < n {\n            vec.push(b + c);\n            c = a + b;\n     \
    \       a = b;\n            b = c;\n        }\n        vec\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyyrykhl_.rs:18:50\n   |\n\
    18 |     let mut vec: Vec<isize> = Vec::with_capacity(n + 1);\n   |          \
    \                                        ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n18 |     let mut vec: Vec<isize> = Vec::with_capacity((n\
    \ + 1).try_into().unwrap());\n   |                                           \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    //\
    \ Your code here\n    let mut vec: Vec<isize> = Vec::new();\n    for i in 0..(n\
    \ / 3) {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    for\
    \ i in (0..(n % 3)).rev() {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpr0xsvlfn.rs:21:29\n\
    \   |\n21 |         vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |     \
    \             ---------- ^ ---------- Vec<isize>\n   |                  |\n  \
    \ |                  Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpr0xsvlfn.rs:24:29\n   |\n24 |         vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n   |                  ---------- ^ ---------- Vec<isize>\n\
    \   |                  |\n   |                  Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = vec![1];\n    if n % 2 == 0 {\n        a.reserve(2 + n / 2);\n     \
    \   a.push(3);\n        for num in 1..n {\n            a.push(num + a.last() +\
    \ a.last().unwrap());\n        }\n    } else {\n        let mut b = vec![1];\n\
    \        b.push(3);\n        for num in 1..n {\n            b.push(b.last() +\
    \ b.last().unwrap());\n        }\n        a.reserve(2 + n / 2);\n        a.push(a.last().unwrap()\
    \ + b.last().unwrap());\n    }\n    a\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx5esz1jy.rs:20:19\n   |\n\
    20 |         a.reserve(2 + n / 2);\n   |                   ^^^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |         a.reserve((2\
    \ + n / 2).try_into().unwrap());\n   |                   +         +++++++++++++++++++++\n\
    \nerror[E0277]: cannot add `Option<&{integer}>` to `isize`\n  --> /tmp/tmpx5esz1jy.rs:23:24\n\
    \   |\n23 |             a.push(num + a.last() + a.last().unwrap());\n   |    \
    \                    ^ no implementation for `isize + Option<&{integer}>`\n  \
    \ |\n   = help: the trait `Add<Option<&{integer}>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0369]:\
    \ cannot add `&{integer}` to `Option<&{integer}>`\n  --> /tmp/tmpx5esz1jy.rs:29:29\n\
    \   |\n29 |             b.push(b.last() + b.last().unwrap());\n   |          \
    \          -------- ^ ----------------- &{integer}\n   |                    |\n\
    \   |                    Option<&{integer}>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx5esz1jy.rs:31:19\n   |\n31 |         a.reserve(2 + n / 2);\n \
    \  |                   ^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n31 |         a.reserve((2 + n / 2).try_into().unwrap());\n   |  \
    \                 +         +++++++++++++++++++++\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut ans = Vec::new();\n    ans.push(3);\n    for i in 1..n+1 {\n        if i\
    \ % 2 == 0 {\n            ans.push(1 + i / 2);\n        } else {\n           \
    \ ans.push(tri(i / 2) + tri(i - 1) + tri(i + 1))\n        }\n    }\n    ans\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpjh3wqera.rs:24:33\n\
    \   |\n24 |             ans.push(tri(i / 2) + tri(i - 1) + tri(i + 1))\n   | \
    \                     ---------- ^ ---------- Vec<isize>\n   |               \
    \       |\n   |                      Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    for i in 1..n {\n \
    \       vec.push((i + 1) + (i + 2) / 2);\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmplt1x142c.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v = Vec::new();\n    let mut a = 1;\n    let mut b = 1;\n    if n % 2 ==\
    \ 0 {\n        while n > 1 {\n            v.push(a);\n            a += b;\n  \
    \          b += 1;\n            n -= 1;\n        }\n    } else {\n        while\
    \ n > 2 {\n            v.push(b);\n            b += 1;\n            n -= 2;\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphbto5o_f.rs:26:13\n\
    \   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |        - help: consider making\
    \ this binding mutable: `mut n`\n...\n26 |             n -= 1;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmphbto5o_f.rs:32:13\n   |\n17 | fn tri(n:\
    \ isize) -> Vec<isize> {\n   |        - help: consider making this binding mutable:\
    \ `mut n`\n...\n32 |             n -= 2;\n   |             ^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 {\n        return vec![0];\n    }\n\n    let mut vec = vec![3];\n\n  \
    \  if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    }\n\n    vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() - vec.last().unwrap() + n);\n\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmppugqknl_.rs:35:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    for i in 0..(n + 1) {\n        let x = i\
    \ / 2;\n        vec.push((x * x) + x);\n    }\n    return vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmppw1rhb9g.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![1, 1, 1];\n    if n < 3 {\n        return vec;\n    }\n    for\
    \ i in (0..(n + 1)).rev() {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3]);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpn5746uyi.rs:23:18\n\
    \   |\n23 |         vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n   |    \
    \              ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpn5746uyi.rs:23:31\n\
    \   |\n23 |         vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n   |    \
    \                           ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpn5746uyi.rs:23:44\n   |\n23 |         vec.push(vec[i - 1] + vec[i\
    \ - 2] + vec[i - 3]);\n   |                                            ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1 + n; 1 + n / 2]\n    } else {\n        vec![tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppghwc2kc.rs:19:21\n   |\n\
    19 |         vec![1 + n; 1 + n / 2]\n   |                     ^^^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |         vec![1 + n;\
    \ (1 + n / 2).try_into().unwrap()]\n   |                     +         +++++++++++++++++++++\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmppghwc2kc.rs:21:25\n\
    \   |\n21 |         vec![tri(n - 1) + tri(n - 2) + tri(n - 1)]\n   |         \
    \     ---------- ^ ---------- Vec<isize>\n   |              |\n   |          \
    \    Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut fib1 = vec![0];\n    let mut fib2\
    \ = vec![0];\n    for _ in 0..n {\n        vec.push(fib1);\n        vec.push(fib2);\n\
    \        fib1 = fib2;\n        fib2 = vec![0, 1] + vec![fib1[1], fib1[1] + fib1[2]];\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaxhngmgd.rs:22:18\n   |\n\
    22 |         vec.push(fib1);\n   |                  ^^^^ expected `isize`, found\
    \ struct `Vec`\n   |\n   = note: expected type `isize`\n            found struct\
    \ `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaxhngmgd.rs:23:18\n\
    \   |\n23 |         vec.push(fib2);\n   |                  ^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<{integer}>`\n\nerror[E0369]: cannot add `Vec<{integer}>` to `Vec<{integer}>`\n\
    \  --> /tmp/tmpaxhngmgd.rs:25:27\n   |\n25 |         fib2 = vec![0, 1] + vec![fib1[1],\
    \ fib1[1] + fib1[2]];\n   |                ---------- ^ --------------------------------\
    \ Vec<{integer}>\n   |                |\n   |                Vec<{integer}>\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n\n    if n == 0 { vec.push(0); }\n    if n == 1 { vec.push(1);\
    \ }\n\n    if n % 2 == 0 {\n        vec.push(n - 1);\n        let tri_n = tri(n\
    \ - 2);\n        for &n in tri_n {\n            vec.push(n);\n        }\n    }\
    \ else {\n        let tri_n = tri(n - 2) + tri(n - 1) + tri(n + 1);\n        for\
    \ &n in tri_n {\n            vec.push(n);\n        }\n    }\n\n    vec\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi2gq_4xn.rs:26:13\n   |\n\
    26 |         for &n in tri_n {\n   |             ^^    ----- this expression has\
    \ type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpi2gq_4xn.rs:30:32\n\
    \   |\n30 |         let tri_n = tri(n - 2) + tri(n - 1) + tri(n + 1);\n   |  \
    \                   ---------- ^ ---------- Vec<isize>\n   |                 \
    \    |\n   |                     Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        vec![3]\n    } else if n == 1 {\n        vec![1, 3]\n    }\
    \ else {\n        let mut vec = vec![0, 0, 0];\n        for _ in 0..(n+1) {\n\
    \            vec![vec![vec![1], vec![2]][i::2][i::2]].iter().cloned().collect()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `2`\n  --> /tmp/tmpx95_aw6m.rs:25:44\n\
    \   |\n25 |             vec![vec![vec![1], vec![2]][i::2][i::2]].iter().cloned().collect()\n\
    \   |                                            ^ expected identifier\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx95_aw6m.rs:24:9\n   |\n17 |   fn tri(n: isize)\
    \ -> Vec<isize> {\n   |                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n24 | /         for _ in 0..(n+1) {\n25 | |    \
    \         vec![vec![vec![1], vec![2]][i::2][i::2]].iter().cloned().collect()\n\
    26 | |         }\n   | |_________^ expected struct `Vec`, found `()`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 { return vec![3]; }\n    let mut rez = vec![];\n    let mut m = 0;\n \
    \   let mut a = tri(n-2);\n    let mut b = tri(n-1);\n    rez.push(m); // 3\n\
    \    rez.push(a[0] + b[0] + a[1]); \n    rez.push(a[0] + b[1] + a[1]); \n    rez.push(a[1]\
    \ + b[1] + a[2]); \n    rez.push(a[2] + b[2] + a[2]); \n    rez.push(a[2] + b[1]\
    \ + a[1]); \n    rez.push(a[1] + b[0] + a[0]); \n    rez.push(a[0] + b[0] + a[0]);\n\
    \    rez\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpo5c47fqb.rs:24:28

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![3,\
    \ 3, 5, 4, 5, 8, 7, 9, 12]\n        .into_iter()\n        .take_while(|x| x <\
    \ n)\n        .cloned()\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp40m95r1l.rs:20:29\n   |\n\
    20 |         .take_while(|x| x < n)\n   |                             ^\n   |\
    \                             |\n   |                             expected reference,\
    \ found `isize`\n   |                             help: consider borrowing here:\
    \ `&n`\n   |\n   = note: expected reference `&_`\n                   found type\
    \ `isize`\n\nerror[E0271]: type mismatch resolving `<TakeWhile<std::vec::IntoIter<{integer}>,\
    \ [closure@/tmp/tmp40m95r1l.rs:20:21: 20:30]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmp40m95r1l.rs:21:10\n     |\n21   |         .cloned()\n     |        \
    \  ^^^^^^ expected reference, found integer\n     |\n     = note: expected reference\
    \ `&_`\n                     found type `{integer}`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<std::vec::IntoIter<{integer}>,\
    \ [closure@/tmp/tmp40m95r1l.rs:20:21: 20:30]>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp40m95r1l.rs:22:10\n   |\n22 |            .collect()\n\
    \   |             ^^^^^^^ method cannot be called on `Cloned<TakeWhile<std::vec::IntoIter<{integer}>,\
    \ [closure@/tmp/tmp40m95r1l.rs:20:21: 20:30]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<TakeWhile<std::vec::IntoIter<{integer}>,\
    \ [closure@/tmp/tmp40m95r1l.rs:20:21: 20:30]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<TakeWhile<std::vec::IntoIter<{integer}>, [closure@/tmp/tmp40m95r1l.rs:20:21:\
    \ 20:30]>>: Iterator`\n           `Cloned<TakeWhile<std::vec::IntoIter<{integer}>,\
    \ [closure@/tmp/tmp40m95r1l.rs:20:21: 20:30]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<TakeWhile<std::vec::IntoIter<{integer}>, [closure@/tmp/tmp40m95r1l.rs:20:21:\
    \ 20:30]>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 1];\n    if n % 2 == 0 {\n        vec[0] = 1 + n / 2;\n\
    \    } else {\n        vec[0] = 1;\n    }\n    for i in 1..vec.len() {\n     \
    \   if i is vec.len() {\n            vec[i] = vec[i - 1] + vec[i - 2];\n     \
    \   } else {\n            vec[i] = vec[i - 1] + vec[i - 2] + vec[i + 1..vec.len()\
    \ - 1];\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `is`\n  --> /tmp/tmpvurrcwlh.rs:25:14\n   |\n\
    25 |         if i is vec.len() {\n   |         --   ^^ expected `{`\n   |    \
    \     |\n   |         this `if` expression has a condition, but no block\n   |\n\
    help: try placing this code inside a block\n   |\n25 |         if i { is } vec.len()\
    \ {\n   |              +    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvurrcwlh.rs:18:27\n\
    \   |\n18 |     let mut vec = vec![0; n + 1];\n   |                          \
    \ ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n18 |     let\
    \ mut vec = vec![0; (n + 1).try_into().unwrap()];\n   |                      \
    \     +     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n <= 1 {\n        return vec![n, 1];\n    }\n\n    let mut result = (1.into(),\
    \ 2.into());\n    let mut current = vec![];\n    for i in 1..=n {\n        current.push(&result[0]\
    \ + &result[1]);\n        result.push(current.clone());\n        if i % 2 == 0\
    \ {\n            current.push(&result[0] - &result[1]);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `(_, _)`\n  --> /tmp/tmpcl3v9l3s.rs:25:23\n\
    \   |\n25 |         current.push(&result[0] + &result[1]);\n   |             \
    \          ^^^^^^^^^ help: to access tuple elements, use: `result.0`\n\nerror[E0608]:\
    \ cannot index into a value of type `(_, _)`\n  --> /tmp/tmpcl3v9l3s.rs:25:36\n\
    \   |\n25 |         current.push(&result[0] + &result[1]);\n   |             \
    \                       ^^^^^^^^^ help: to access tuple elements, use: `result.1`\n\
    \nerror[E0599]: no method named `push` found for tuple `(_, _)` in the current\
    \ scope\n  --> /tmp/tmpcl3v9l3s.rs:26:16\n   |\n26 |         result.push(current.clone());\n\
    \   |                ^^^^ method not found in `(_, _)`\n\nerror[E0608]: cannot\
    \ index into a value of type `(_, _)`\n  --> /tmp/tmpcl3v9l3s.rs:28:27\n   |\n\
    28 |             current.push(&result[0] - &result[1]);\n   |                \
    \           ^^^^^^^^^ help: to access tuple elements, use: `result.0`\n\nerror[E0608]:\
    \ cannot index into a value of type `(_, _)`\n  --> /tmp/tmpcl3v9l3s.rs:28:40\n\
    \   |\n28 |             current.push(&result[0] - &result[1]);\n   |         \
    \                               ^^^^^^^^^ help: to access tuple elements, use:\
    \ `result.1`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcl3v9l3s.rs:31:5\n\
    \   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ----------\
    \ expected `Vec<isize>` because of return type\n...\n31 |     result\n   |   \
    \  ^^^^^^ expected struct `Vec`, found tuple\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n               found tuple `(_, _)`\n\nerror: aborting due to\
    \ 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        let mut tri = vec![];\n        for i in 1..=n {\n    \
    \        let n1 = (i + 1) >> 1;\n            let n2 = (i + 2) >> 1;\n        \
    \    tri.push((n1 + n2) / (2.0 * i));\n        }\n        return tri;\n    }\n\
    \    else {\n        let mut tri = vec![];\n        for i in 1..=n {\n       \
    \     let n1 = (i - 1) >> 1;\n            let n2 = (i + 2) >> 1;\n           \
    \ tri.push((n1 + n2) / (2.0 * i));\n        }\n        return tri;\n    }\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp6_lo13ux.rs:23:39\n\
    \   |\n23 |             tri.push((n1 + n2) / (2.0 * i));\n   |               \
    \                        ^ no implementation for `{float} * isize`\n   |\n   =\
    \ help: the trait `Mul<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ multiply `{float}` by `isize`\n  --> /tmp/tmp6_lo13ux.rs:32:39\n   |\n32 | \
    \            tri.push((n1 + n2) / (2.0 * i));\n   |                          \
    \             ^ no implementation for `{float} * isize`\n   |\n   = help: the\
    \ trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    if n <= 0 {\n        return result;\n    }\n    result.push(3);\n\
    \    if n & 1 == 0 {\n        result.push(1 + n / 2);\n    }\n    let mut current\
    \ = 2;\n    while current < n {\n        current += 1;\n        result.push(current\
    \ + current + current);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 9]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpodfeh4ei.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = [3]; // fibonacci series up to n\n    let mut b = [0, 1];\n    for i\
    \ in 1..=n {\n        a.push(b.pop() + a.pop());\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for array `[{integer}; 1]` in\
    \ the current scope\n  --> /tmp/tmpsw31j9df.rs:21:11\n   |\n21 |         a.push(b.pop()\
    \ + a.pop());\n   |           ^^^^ method not found in `[{integer}; 1]`\n\nerror[E0599]:\
    \ no method named `pop` found for array `[{integer}; 2]` in the current scope\n\
    \  --> /tmp/tmpsw31j9df.rs:21:18\n   |\n21 |         a.push(b.pop() + a.pop());\n\
    \   |                  ^^^ method not found in `[{integer}; 2]`\n\nerror[E0599]:\
    \ no method named `pop` found for array `[{integer}; 1]` in the current scope\n\
    \  --> /tmp/tmpsw31j9df.rs:21:28\n   |\n21 |         a.push(b.pop() + a.pop());\n\
    \   |                            ^^^ method not found in `[{integer}; 1]`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpsw31j9df.rs:23:5\n   |\n17 | fn\
    \ tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n23 |     a\n   |     ^- help: try\
    \ using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[{integer}; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[{integer}; 1]`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    match\
    \ n % 2 {\n        0 => vec![3],\n        1 => vec![vec![2], vec![1], vec![3]],\n\
    \        _ => vec![\n            tri(n - 1) + tri(n - 2) + tri(n - 3),\n     \
    \       tri(n - 2) + tri(n - 1) + tri(n - 3)\n        ],\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm5x1qgpm.rs:20:19\n   |\n\
    20 |         1 => vec![vec![2], vec![1], vec![3]],\n   |                   ^^^^^^^\
    \ expected `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n\
    \            found struct `Vec<{integer}>`\n   = note: this error originates in\
    \ the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm5x1qgpm.rs:22:24\n\
    \   |\n22 |             tri(n - 1) + tri(n - 2) + tri(n - 3),\n   |          \
    \   ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm5x1qgpm.rs:23:24\n\
    \   |\n23 |             tri(n - 2) + tri(n - 1) + tri(n - 3)\n   |           \
    \  ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n <= 0 {\n        return vec![];\n    }\n    let mut tri = vec![n];\n    let\
    \ mut prev1 = 1;\n    let mut prev2 = 1;\n    for i in 1..n {\n        tri.push(prev1\
    \ + prev2);\n        prev1 = prev2;\n        prev2 = prev1 + prev2;\n    }\n \
    \   return tri;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp60onby_0.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 3 {\n        return vec![0, 1, 1, 2]\n    }\n    let mut result: Vec<isize>\
    \ = vec![0; n + 1];\n    result.push((3 * n - n) / 2);\n    result.push(1 + n\
    \ / 2);\n    result.push(1 + n + 1);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpspemeab_.rs:21:42\n   |\n\
    21 |     let mut result: Vec<isize> = vec![0; n + 1];\n   |                  \
    \                        ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |     let mut result: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                          +     +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut numbers: Vec<isize> = vec![];\n    if n == 0 {\n        return vec![0; n\
    \ + 1];\n    }\n    if n & 1 == 0 {\n        numbers.push(1);\n    }\n    let\
    \ mut next_one = 1;\n    for i in 1..n {\n        let previous = numbers.len()\
    \ - 2;\n        let next = previous + 1;\n        let next_number = numbers[previous\
    \ + 1];\n        numbers.push(next_number + next_one);\n        next_one = previous\
    \ + 1;\n    }\n    return numbers;\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppr1cf8mz.rs:20:24\n   |\n\
    20 |         return vec![0; n + 1];\n   |                        ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |         return vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                        +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppr1cf8mz.rs:31:20\n   |\n25 |\
    \     let mut next_one = 1;\n   |                        - expected due to this\
    \ value\n...\n31 |         next_one = previous + 1;\n   |                    ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    if n == 1 {\n        res.push(1);\n    } else {\n\
    \        res.push(1 + n / 2);\n    }\n\n    if n % 2 == 0 {\n        res.push(1\
    \ + n);\n    } else {\n        let mut i = 1;\n        while i <= n {\n      \
    \      res.push(2 * i);\n            i += 1;\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpqcws7cig.rs:39:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    } else {\n\
    \        vec![0, 1, 1 + n / 2, 1 + n / 2, 1 + n, 1 + n, 1 + n, 1 + n + 1, 1 +\
    \ n + 1 + 1]\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 2, 4, 4, 4, 5, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpnsav6z3c.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![];\n    let mut prev = 0;\n    let mut current\
    \ = 1;\n    if n % 2 == 0 {\n        while current + prev < n {\n            current.swap(prev);\n\
    \            result.push(current);\n            current += 1;\n            prev\
    \ += 1;\n        }\n        current.swap(prev);\n        result.push(current);\n\
    \    } else {\n        for _ in 1..n {\n            result.push(current.clone()\
    \ + prev.clone());\n            current += 1;\n            prev += 1;\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp01t765xs.rs:23:21\n   |\n23 |             current.swap(prev);\n\
    \   |                     ^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `swap` found for type `isize` in the current scope\n  --> /tmp/tmp01t765xs.rs:28:17\n\
    \   |\n28 |         current.swap(prev);\n   |                 ^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![0; 3];\n\n    if n == 0 {\n        vec[0] = 3\n \
    \   } else {\n        vec[0] = tri(n - 1) + tri(n - 2) + tri(n - 1);\n    }\n\n\
    \    if n % 2 == 0 {\n        vec[1] = (vec[0] as isize + vec[1] as isize) / 2;\n\
    \    } else {\n        vec[1] = (vec[0] as isize + vec[1] as isize) / 2;\n   \
    \ }\n\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp2il4tjj7.rs:23:29\n\
    \   |\n23 |         vec[0] = tri(n - 1) + tri(n - 2) + tri(n - 1);\n   |     \
    \             ---------- ^ ---------- Vec<isize>\n   |                  |\n  \
    \ |                  Vec<isize>\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ > 0, \"Tribonacci sequence is defined for n > 0.\");\n    assert!(n > 2, \"\
    Tribonacci sequence is not defined for n < 2.\");\n\n    let mut result: Vec<isize>\
    \ = vec![];\n    let mut prev: usize = 1;\n    let mut cur: usize = 3;\n\n   \
    \ for _ in 0..n {\n        prev += cur;\n        result.push(cur);\n        cur\
    \ = prev + cur + cur - prev;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq83ivk8y.rs:27:21\n   |\n\
    27 |         result.push(cur);\n   |                     ^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n27 |         result.push(cur.try_into().unwrap());\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n    if n <= 2 {\n        vec.push(1);\n    }\n    else\
    \ {\n        let mut first = 1;\n        let mut last = 1;\n        for i in 2..n\
    \ + 1 {\n            if i % 2 == 1 {\n                let mut current = first;\n\
    \                let mut next = last + current;\n                while next !=\
    \ last + current {\n                    last = current;\n                    current\
    \ = next;\n                    next = last + current;\n                }\n   \
    \             vec.push(current);\n            }\n            else {\n        \
    \        let mut current = first;\n                let mut next = last + current;\n\
    \                while next != last + current {\n                    last = current;\n\
    \                    current = next;\n                    next = last + current;\n\
    \                }\n                vec.push(current + 1);\n            }\n  \
    \      }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmplwzacgqa.rs:53:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        vec![0]\n    }\n    else {\n        if n % 2 == 0 {\n    \
    \        vec![tri(n - 1) + tri(n - 2) + tri(n + 1)]\n        }\n        else {\n\
    \            vec![tri(n - 2) + tri(n - 1) + tri(n + 1)]\n        }\n    }\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpx8cvl2ib.rs:23:29\n\
    \   |\n23 |             vec![tri(n - 1) + tri(n - 2) + tri(n + 1)]\n   |     \
    \             ---------- ^ ---------- Vec<isize>\n   |                  |\n  \
    \ |                  Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpx8cvl2ib.rs:26:29\n   |\n26 |             vec![tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)]\n   |                  ---------- ^ ---------- Vec<isize>\n\
    \   |                  |\n   |                  Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![];\n    if n % 2 == 0 {\n        for i in 0..=n {\n         \
    \   vec.push(i);\n        }\n    }\n    else {\n        for i in 0..=n+1 {\n \
    \           vec.push(i+i+1);\n        }\n    }\n    vec\n}\n\nfn main() {\n  \
    \  let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n   \
    \ assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 5, 7, 9]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp_q2pyz0n.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    let mut a = vec![];\n    let mut\
    \ b = vec![];\n    let mut c = vec![];\n    let mut d = vec![];\n    \n    for\
    \ i in 0..n {\n        \n        if i % 2 == 0 {\n            a.push(i);\n   \
    \         b.push(i / 2);\n            c.push(1);\n            d.push(i);\n   \
    \     }\n        else {\n            a.push(i + 1);\n            b.push(i / 2\
    \ + 1);\n            c.push(i);\n            d.push(i / 2);\n        }\n    }\n\
    \    \n    let mut res = vec![];\n    for el in a.iter().chain(&b.iter()).chain(&c.iter()).chain(&d.iter())\
    \ {\n        res.push(el);\n    }\n    \n    return res;\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `&std::slice::Iter<'_, isize>` is not an iterator\n  -->\
    \ /tmp/tmpszaqifap.rs:43:30\n   |\n43 |     for el in a.iter().chain(&b.iter()).chain(&c.iter()).chain(&d.iter())\
    \ {\n   |                        ----- ^^^^^^^^^ `&std::slice::Iter<'_, isize>`\
    \ is not an iterator\n   |                        |\n   |                    \
    \    required by a bound introduced by this call\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `&std::slice::Iter<'_, isize>`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `&std::slice::Iter<'_,\
    \ isize>`\nhelp: consider dereferencing here\n   |\n43 |     for el in a.iter().chain(*&b.iter()).chain(&c.iter()).chain(&d.iter())\
    \ {\n   |                              +\nhelp: consider removing the leading\
    \ `&`-reference\n   |\n43 -     for el in a.iter().chain(&b.iter()).chain(&c.iter()).chain(&d.iter())\
    \ {\n43 +     for el in a.iter().chain(b.iter()).chain(&c.iter()).chain(&d.iter())\
    \ {\n   | \nhelp: consider changing this borrow's mutability\n   |\n43 |     for\
    \ el in a.iter().chain(&mut b.iter()).chain(&c.iter()).chain(&d.iter()) {\n  \
    \ |                              ~~~~\n\nerror[E0599]: the method `chain` exists\
    \ for struct `std::iter::Chain<std::slice::Iter<'_, isize>, &std::slice::Iter<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpszaqifap.rs:43:41\n\
    \   |\n43 |       for el in a.iter().chain(&b.iter()).chain(&c.iter()).chain(&d.iter())\
    \ {\n   |                                           ^^^^^ method cannot be called\
    \ on `std::iter::Chain<std::slice::Iter<'_, isize>, &std::slice::Iter<'_, isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<&std::slice::Iter<'_, isize> as Iterator>::Item\
    \ = &isize`\n           which is required by `std::iter::Chain<std::slice::Iter<'_,\
    \ isize>, &std::slice::Iter<'_, isize>>: Iterator`\n           `&std::slice::Iter<'_,\
    \ isize>: Iterator`\n           which is required by `std::iter::Chain<std::slice::Iter<'_,\
    \ isize>, &std::slice::Iter<'_, isize>>: Iterator`\n  "
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![1, 0];\n    }\n    \n    let mut vect = vec![];\n\
    \    \n    vect.push(3);\n    vect.push((1 + n) / 2);\n    \n    if n % 2 == 1\
    \ {\n        vect.push((n - 1) as isize);\n        vect.push((n - 2) as isize);\n\
    \    }\n    \n    vect.push((n + 2) as isize);\n    \n    vect\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2, 1, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpjqt8nlx7.rs:39:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    if n % 2 == 0 {\n \
    \       for i in 2..n / 2 {\n            vec.push(i);\n        }\n    } else {\n\
    \        for i in 2..n / 2 + 1 {\n            vec.push(i);\n        }\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpgqv4zkf1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![3, 1, 2];\n    for i in 0..n / 2 {\n        vec.push(vec[i].clone());\n\
    \        vec.push(vec[i].clone() + vec[n - 1 + i].clone());\n    }\n    vec.push(vec[n\
    \ - 1].clone() + vec[n - 2].clone() + vec[n + 1].clone());\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpoma_ytkg.rs:20:18\n\
    \   |\n20 |         vec.push(vec[i].clone());\n   |                  ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpoma_ytkg.rs:21:18\n   |\n21 |  \
    \       vec.push(vec[i].clone() + vec[n - 1 + i].clone());\n   |             \
    \     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpoma_ytkg.rs:21:35\n\
    \   |\n21 |         vec.push(vec[i].clone() + vec[n - 1 + i].clone());\n   | \
    \                                  ^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpoma_ytkg.rs:23:14\n   |\n23 |     vec.push(vec[n\
    \ - 1].clone() + vec[n - 2].clone() + vec[n + 1].clone());\n   |             \
    \ ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpoma"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec[0] = 1 + n / 2;\n    vec[1] = vec[0];\n\
    \    if n % 2 == 0 {\n        vec[2] = vec[0] + vec[1];\n    } else {\n      \
    \  vec[2] = vec[0] + vec[1] + vec[2];\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpz5gogz90.rs:19:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(1);\n    vec.push(3);\n    for i\
    \ in 2..=n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() - vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap() -\
    \ vec.last().unwrap());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpheelljxo.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v = vec![];\n    let mut i = 0;\n    v.push(i + 3);\n    while i < n + 1\
    \ {\n        let mut j = i - 1;\n        v.push(v[j] + v[j + 1] + v[j + 2]);\n\
    \        i += 2;\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n \
    \   assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkv9jp6pj.rs:23:16\n\
    \   |\n23 |         v.push(v[j] + v[j + 1] + v[j + 2]);\n   |                ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkv9jp6pj.rs:23:23\n\
    \   |\n23 |         v.push(v[j] + v[j + 1] + v[j + 2]);\n   |                \
    \       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkv9jp6pj.rs:23:34\n\
    \   |\n23 |         v.push(v[j] + v[j + 1] + v[j + 2]);\n   |                \
    \                  ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \   }\n    let mut n1 = vec![];\n    let mut n2 = vec![];\n    for _ in 0..(n\
    \ + 1) {\n        if n % 2 == 0 {\n            n1.push(3);\n        }\n      \
    \  else {\n            n1.push(1);\n            n2.push(2);\n        }\n     \
    \   n = n - 1;\n    }\n    vec.push(n1 + n2);\n    vec\n}\n\nfn main() {\n   \
    \ let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmp6hhm9n01.rs:34:17\n\
    \   |\n34 |     vec.push(n1 + n2);\n   |              -- ^ -- Vec<{integer}>\n\
    \   |              |\n   |              Vec<{integer}>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 0 {\n        vec![3]\n    } else {\n        let mut vec = vec![3];\n\
    \        let mut sum = 0;\n        for _ in 0..n {\n            sum += 1;\n  \
    \          if sum > 3 {\n                let temp = sum - 1;\n               \
    \ vec![vec![3 + temp, 2 + temp, 1 + temp]]\n            } else {\n           \
    \     vec![vec![3 + sum, 2 + sum, 1 + sum]]\n            }\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fzfx6zy.rs:27:17\n   |\n\
    25 | /             if sum > 3 {\n26 | |                 let temp = sum - 1;\n\
    27 | |                 vec![vec![3 + temp, 2 + temp, 1 + temp]]\n   | |      \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct\
    \ `Vec`\n28 | |             } else {\n29 | |                 vec![vec![3 + sum,\
    \ 2 + sum, 1 + sum]]\n30 | |             }\n   | |             -- help: consider\
    \ using a semicolon here\n   | |_____________|\n   |               expected this\
    \ to be `()`\n   |\n   = note: expected unit type `()`\n                 found\
    \ struct `Vec<Vec<{integer}>>`\n   = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6fzfx6zy.rs:29:17\n   |\n25 | /            \
    \ if sum > 3 {\n26 | |                 let temp = sum - 1;\n27 | |           \
    \      vec![vec![3 + temp, 2 + temp, 1 + temp]]\n28 | |             } else {\n\
    29 | |                 vec![vec![3 + sum, 2 + sum, 1 + sum]]\n   | |         \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Vec`\n\
    30 | |             }\n   | |             -- help: consider using a semicolon here\n\
    \   | |_____________|\n   |               expected this to be `()`\n   |\n   =\
    \ note: expected unit type `()`\n                 found struct `Vec<Vec<{integer}>>`\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6fzfx6zy.rs:23:9\n\
    \   |\n17 |   fn tri(n: isize) -> Vec<isize> {\n   |                       ----------\
    \ expected `Vec<isize>` because of return type\n...\n23 | /         for _ in 0..n\
    \ {\n24 | |             sum += 1;\n25 | |             if sum > 3 {\n26 | |   \
    \              let temp = sum - 1;\n...  |\n30 | |             }\n31 | |     \
    \    }\n   | |_________^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more i"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 {\n        return vec![1];\n    }\n    let mut vec = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(1\
    \ + i / 2);\n        } else {\n            vec.push(vec![(i - 1) as isize + vec![(i\
    \ - 2) as isize] as isize + vec![(i - 3) as isize] as isize]);\n        }\n  \
    \  }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp22umb0hk.rs:28:22\n   |\n\
    28 |             vec.push(vec![(i - 1) as isize + vec![(i - 2) as isize] as isize\
    \ + vec![(i - 3) as isize] as isize]);\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n\
    \            found struct `Vec<isize>`\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0605]: non-primitive cast: `Vec<isize>` as `isize`\n  --> /tmp/tmp22umb0hk.rs:28:46\n\
    \   |\n28 |             vec.push(vec![(i - 1) as isize + vec![(i - 2) as isize]\
    \ as isize + vec![(i - 3) as isize] as isize]);\n   |                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can\
    \ only be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror[E0605]: non-primitive cast: `Vec<isize>` as `isize`\n  --> /tmp/tmp22umb0hk.rs:28:80\n\
    \   |\n28 |             vec.push(vec![(i - 1) as isize + vec![(i - 2) as isize]\
    \ as isize + vec![(i - 3) as isize] as isize]);\n   |                        \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![];\n    let mut i = 0;\n    let mut j = 1;\n \
    \   while i < n {\n        result.push(i + j);\n        i += 2;\n        j +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpxvxr96p_.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut res = vec![1; n + 1];\n    if n % 2 == 0 {\n        for i in 2..n+1 {\n\
    \            res[i] += i;\n        }\n    } else {\n        for i in 2..n+1 {\n\
    \            res[i] += (i - 1) as isize;\n        }\n    }\n    res.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd63x00qe.rs:18:27\n   |\n\
    18 |     let mut res = vec![1; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut res = vec![1;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpd63x00qe.rs:21:13\n\
    \   |\n21 |             res[i] += i;\n   |             ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpd63x00qe.rs:25:13\n   |\n25 |  \
    \           res[i] += (i - 1) as isize;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 2 {\n        vec![3]\n    } else {\n        let mut first_tri = [3, 1];\n\
    \        for i in 1..n / 2 {\n            first_tri.push(first_tri[i - 1] + first_tri[i\
    \ - 2] + first_tri[i + 1])\n        }\n        first_tri\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for array `[{integer}; 2]` in\
    \ the current scope\n  --> /tmp/tmp1f_gf_6p.rs:23:23\n   |\n23 |             first_tri.push(first_tri[i\
    \ - 1] + first_tri[i - 2] + first_tri[i + 1])\n   |                       ^^^^\
    \ method not found in `[{integer}; 2]`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1f_gf_6p.rs:23:28\n   |\n23 |  \
    \           first_tri.push(first_tri[i - 1] + first_tri[i - 2] + first_tri[i +\
    \ 1])\n   |                            ^^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp1f_gf_6p.rs:23:47\n   |\n23 |         \
    \    first_tri.push(first_tri[i - 1] + first_tri[i - 2] + first_tri[i + 1])\n\
    \   |                                               ^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp1f_gf_6p.rs:23:66\n   |\n23 |         \
    \    first_tri.push(first_tri[i - 1] + first_tri[i - 2] + first_tri[i + 1])\n\
    \   |                                                                  ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1f_gf_6p.rs:25:9\n   |\n17 | fn tri(n: "
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![];\n\n    if n == 0 {\n        vec.push(0);\n    } else {\n \
    \       let tri: isize = 1;\n        for i in 1..(n + 1) {\n            if i %\
    \ 2 == 0 {\n                tri += i / 2;\n            } else {\n            \
    \    tri += (tri - i + 1) / 2;\n            }\n            vec.push(tri);\n  \
    \      }\n    }\n\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `tri`\n  --> /tmp/tmpb63_kunw.rs:26:17\n\
    \   |\n23 |         let tri: isize = 1;\n   |             ---\n   |          \
    \   |\n   |             first assignment to `tri`\n   |             help: consider\
    \ making this binding mutable: `mut tri`\n...\n26 |                 tri += i /\
    \ 2;\n   |                 ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\
    \nerror[E0384]: cannot assign twice to immutable variable `tri`\n  --> /tmp/tmpb63_kunw.rs:28:17\n\
    \   |\n23 |         let tri: isize = 1;\n   |             ---\n   |          \
    \   |\n   |             first assignment to `tri`\n   |             help: consider\
    \ making this binding mutable: `mut tri`\n...\n28 |                 tri += (tri\
    \ - i + 1) / 2;\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice\
    \ to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![1, 1, 1];\n    for i in 0..n {\n        if i % 2\
    \ == 0 {\n            vec.push(vec![vec[0], vec[1], vec[2]].iter().sum());\n \
    \       } else {\n            let last_elem = vec[3];\n            let last_elem\
    \ = vec[1] + vec[2] + vec[3];\n            vec.push(last_elem);\n        }\n \
    \   }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 3, 5, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpvmzyeups.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n\n    vec.push(3);\n    for i in 1..n {\n        let\
    \ mut num = vec[0];\n        let mut sum = 0;\n        for j in 1..i {\n     \
    \       sum += num;\n        }\n        vec.push(sum);\n    }\n\n    return vec;\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 0, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpowzb7hx6.rs:35:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![];\n    let mut first: usize = n;\n    let mut\
    \ second: usize = 1;\n    for _ in 0..(n + 1) {\n        result.push(first);\n\
    \        first = (first + second) % 10;\n        second = (second + second) %\
    \ 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf64ooaa4.rs:19:28\n   |\n\
    19 |     let mut first: usize = n;\n   |                    -----   ^ expected\
    \ `usize`, found `isize`\n   |                    |\n   |                    expected\
    \ due to this\n   |\nhelp: you can convert an `isize` to a `usize` and panic if\
    \ the converted value doesn't fit\n   |\n19 |     let mut first: usize = n.try_into().unwrap();\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf64ooaa4.rs:22:21\n   |\n22 |         result.push(first);\n\
    \   |                     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n22 |         result.push(first.try_into().unwrap());\n   |      \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![];\n    let mut tri_1 = 1;\n    let mut tri_2\
    \ = 2;\n    while n != 0 {\n        result.push((tri_1 + tri_2) % n);\n      \
    \  tri_1 += tri_2;\n        tri_2 += tri_1;\n        n -= 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9mv9kxtq.rs:25:9\n\
    \   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |        - help: consider making\
    \ this binding mutable: `mut n`\n...\n25 |         n -= 1;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n    let mut a = vec![1, 1, 1];\n    for i in 1..(n +\
    \ 1) {\n        vec.push(a.last() + a.last() + a.first());\n        a.push(vec.last().clone());\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Option<&{integer}>` to `Option<&{integer}>`\n\
    \  --> /tmp/tmpvf30hyf3.rs:21:27\n   |\n21 |         vec.push(a.last() + a.last()\
    \ + a.first());\n   |                  -------- ^ -------- Option<&{integer}>\n\
    \   |                  |\n   |                  Option<&{integer}>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvf30hyf3.rs:22:16\n   |\n22 |         a.push(vec.last().clone());\n\
    \   |                ^^^^^^^^^^^^^^^^^^ expected integer, found enum `Option`\n\
    \   |\n   = note: expected type `{integer}`\n              found enum `Option<&_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn\
    \ helper(a: isize, b: isize, c: isize, d: isize, k: usize) -> isize {\n      \
    \  if d == 0 {\n            a\n        } else if k == 0 {\n            helper(a,\
    \ b, c + 1, d, 1)\n        } else {\n            helper(a + b, a, c + 1, d + 1,\
    \ k - 1)\n        }\n    }\n    let mut a: isize = 3,\n        b: isize = 1,\n\
    \        c: isize = 0,\n        d: isize = n + 1,\n        k: usize = 0;\n   \
    \ helper(a, b, c, d, k)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \  --> /tmp/tmpo6r_rufn.rs:27:25\n   |\n27 |     let mut a: isize = 3,\n   | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n    if n % 2 == 1 {\n        vec.push(3);\n    } else\
    \ {\n        let n_1 = tri(n - 1);\n        let n_2 = tri(n - 2);\n        vec.push(n_1\
    \ + n_2 + n_1);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpihlu5shj.rs:24:22\n\
    \   |\n24 |         vec.push(n_1 + n_2 + n_1);\n   |                  --- ^ ---\
    \ Vec<isize>\n   |                  |\n   |                  Vec<isize>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec1 = vec![];\n    let mut vec2 = vec![];\n    \n    // vec1 with first\
    \ n+1 elements of vec2\n    vec1.extend_from_slice(&vec2);\n    vec2.clear();\n\
    \    \n    // Calculate first n+1 elements of vec2\n    for i in 1..n+1 {\n  \
    \      vec2.push(i * 2 + 1);\n    }\n\n    // extend vec1 with vec2\n    vec1.extend_from_slice(&vec2);\n\
    \    return vec1\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpc5q68dp4.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..=n+1\
    \ {\n        vec.push((i-1)+(i-2)+(i+1))\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 4, 7, 10]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp8yf3kgoc.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 2 {\n        return vec![0, 1, 2];\n    }\n    let mut fibos = vec![0, 1,\
    \ 1, 1];\n    let mut tri = 0;\n    while n < fibos.len() {\n        tri += n\
    \ % 2;\n        fibos[n] = tri - fibos[n-1] - fibos[n-2];\n        n += 1;\n \
    \   }\n    tri\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdxc9s48q.rs:23:15\n   |\n\
    23 |     while n < fibos.len() {\n   |               ^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |     while n < fibos.len().try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpdxc9s48q.rs:25:9\n\
    \   |\n25 |         fibos[n] = tri - fibos[n-1] - fibos[n-2];\n   |         ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpdxc9s48q.rs:25:26\n\
    \   |\n25 |         fibos[n] = tri - fibos[n-1] - fibos[n-2];\n   |          \
    \                ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpdxc9s48q.rs:25:39\n\
    \   |\n25 |         fibos[n] = tri - fibos[n-1] - fibos[n-2];\n   |          \
    \                             ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdxc9s48q.rs:28:5\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \                     ---------- expected `Vec<isize>` because of re"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n\n    let mut result = vec![1, 1, 2];\n\
    \n    for i in 2..n+1 {\n        let index = result.len();\n        result.push(result[index-2]\
    \ + result[index-1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 3, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp0o0feqh3.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut first = 0;\n    let mut second = 0;\n    if n % 2 == 0 {\n        for _\
    \ in 0..(n / 2) {\n            first += 1;\n        }\n        for _ in 0..((n\
    \ / 2) - 1) {\n            second += 1;\n        }\n    } else {\n        for\
    \ _ in 0..((n / 2) + 1) {\n            first += 1;\n        }\n        for _ in\
    \ 0..(n / 2 - 1) {\n            second += 1;\n        }\n    }\n    vec![first,\
    \ second, n + 1]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 0, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp6gsphhs1.rs:40:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut tmp: isize = 3;\n    while tmp <\
    \ n + 2 {\n        vec.push(tmp);\n        tmp += 1;\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpox8cijbt.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 {\n        vec![n]\n    }\n    else {\n        let mut a = vec![1];\n\
    \        let mut b = vec![1];\n        let mut c = vec![1];\n        for i in\
    \ 0..(n + 1) {\n            a.push(i + 2);\n            b.push(i + 1);\n     \
    \       c.push(i + 1 + n / 2);\n        }\n        vec!(a, b, c)\n    }\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcws9bvcq.rs:30:14\n   |\n\
    30 |         vec!(a, b, c)\n   |              ^ expected `isize`, found struct\
    \ `Vec`\n   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = vec![1, 1, 1];\n    let mut b = vec![1, 1, 1];\n    \n    for i in 1..n\
    \ + 1 {\n        a.push(a[i - 1] + a[i - 2] + a[i - 3]);\n        b.push(b[i -\
    \ 1] + b[i - 2] + b[i - 3]);\n    }\n    \n    Vec::from(a)\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp10arc1ia.rs:22:16\n   |\n22 |         a.push(a[i - 1] + a[i - 2] + a[i\
    \ - 3]);\n   |                ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp10arc1ia.rs:22:27\n   |\n22 |         a.push(a[i -\
    \ 1] + a[i - 2] + a[i - 3]);\n   |                           ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp10arc1ia.rs:22:38\n   |\n22 |  \
    \       a.push(a[i - 1] + a[i - 2] + a[i - 3]);\n   |                        \
    \              ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp10arc1ia.rs:23:16\n\
    \   |\n23 |         b.push(b[i - 1] + b[i - 2] + b[i - 3]);\n   |            \
    \    ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \   } else {\n        let mut first = 1;\n        let mut second = 2;\n      \
    \  while n != 0 {\n            vec.push(first + second + n);\n            n /=\
    \ 2;\n            first += second;\n            second += first;\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpucla8ndy.rs:26:13\n\
    \   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |        - help: consider making\
    \ this binding mutable: `mut n`\n...\n26 |             n /= 2;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use\
    \ std::cmp::Ordering;\n    use std::num::Ordering::*;\n    \n    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(1);\n    vec.push(n);\n    for i in 2..n\
    \ {\n        let n2 = i;\n        vec.push(i + n2);\n        if n2 % 2 == 0 {\n\
    \            vec.push(n2 + 1)\n        }\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::num::Ordering`\n  --> /tmp/tmpz_hi7f_h.rs:19:19\n\
    \   |\n19 |     use std::num::Ordering::*;\n   |                   ^^^^^^^^ could\
    \ not find `Ordering` in `num`\n\nwarning: unused import: `std::cmp::Ordering`\n\
    \  --> /tmp/tmpz_hi7f_h.rs:18:9\n   |\n18 |     use std::cmp::Ordering;\n   |\
    \         ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n    vec.push(1);\n    if n % 2 == 0 {\n        vec.push(2);\n\
    \    }\n    else {\n        let n2 = n + 1;\n        for i in 0..(n2 - 1) {\n\
    \            let mut sum = 0;\n            for j in 0..i {\n                sum\
    \ += vec[j];\n            }\n            vec.push(sum);\n        }\n    }\n  \
    \  vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp4fbk2eom.rs:28:24\n   |\n28 |                 sum += vec[j];\n   | \
    \                       ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(1);\n    vec.push(3 + ((2 * n /\
    \ 2) as isize));\n    vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    vec\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpo8_mowzu.rs:21:25\n\
    \   |\n21 |     vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |        \
    \      ---------- ^ ---------- Vec<isize>\n   |              |\n   |         \
    \     Vec<isize>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n\n    if n <= 3 {\n        vec.push(3);\n    } else {\n\
    \        let first = 1;\n        let second = 1;\n        let third = 1;\n\n \
    \       for i in 2..n + 1 {\n            let tri_first = 1;\n            let tri_second\
    \ = 1;\n            let tri_third = 1;\n\n            if i % 2 == 0 {\n      \
    \          tri_first = 3;\n            } else {\n                tri_second =\
    \ 1 + i / 2;\n            }\n\n            if i % 3 == 0 {\n                tri_third\
    \ = tri(i - 1) + tri(i - 2) + tri(1 + i);\n            }\n\n            vec.push(tri_first\
    \ + tri_second + tri_third);\n        }\n    }\n\n    vec\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp3_xnnpte.rs:39:40\n\
    \   |\n39 |                 tri_third = tri(i - 1) + tri(i - 2) + tri(1 + i);\n\
    \   |                             ---------- ^ ---------- Vec<isize>\n   |   \
    \                          |\n   |                             Vec<isize>\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n&1 == 0 {\n        let mut result = vec![];\n        let mut i = 0;\n     \
    \   let mut tmp1 = 0;\n        let mut tmp2 = 1;\n        loop {\n           \
    \ result.append(tmp1);\n            tmp1 = tmp2;\n            tmp2 = i + tmp2;\n\
    \            i += 1;\n            if i > n {\n                break;\n       \
    \     }\n        }\n        result\n    } else {\n        let mut result = vec![];\n\
    \        let mut i = 1usize;\n        let mut tmp1 = 1;\n        let mut tmp2\
    \ = 1;\n        loop {\n            result.append(tmp1);\n            tmp1 = tmp2;\n\
    \            tmp2 = i + tmp2;\n            i += 1;\n            if i > n {\n \
    \               break;\n            }\n        }\n        result\n    }\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqefnwbl_.rs:24:27\n   |\n\
    24 |             result.append(tmp1);\n   |                           ^^^^ expected\
    \ `&mut Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqefnwbl_.rs:39:27\n   |\n39 |             result.append(tmp1);\n\
    \   |                           ^^^^ expected `&mut Vec<_>`, found integer\n \
    \  |\n   = note: expected mutable reference `&mut Vec<_>`\n                  \
    \         found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqefnwbl_.rs:43:20\n\
    \   |\n43 |             if i > n {\n   |                    ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n43 |             if i > n.try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![\n\
    \        n * (n + 1) / 2 - ((n / 2).floor() as isize),\n        n * (n + 1) /\
    \ 2 - n / 2.floor(),\n        n * (n + 1) / 2 + ((n / 2).ceil() as isize),\n \
    \   ]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpgicy4gf8.rs:19:36\n   |\n19 |         n * (n + 1) / 2 -\
    \ ((n / 2).floor() as isize),\n   |                                    ^^^^^ help:\
    \ there is an associated function with a similar name: `div_floor`\n\nerror[E0689]:\
    \ can't call method `floor` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpgicy4gf8.rs:20:33\n\
    \   |\n20 |         n * (n + 1) / 2 - n / 2.floor(),\n   |                   \
    \              ^^^^^\n   |\nhelp: you must specify a concrete type for this numeric\
    \ value, like `i32`\n   |\n20 |         n * (n + 1) / 2 - n / 2_i32.floor(),\n\
    \   |                               ~~~~~\n\nerror[E0599]: no method named `ceil`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpgicy4gf8.rs:21:36\n\
    \   |\n21 |         n * (n + 1) / 2 + ((n / 2).ceil() as isize),\n   |       \
    \                             ^^^^ help: there is an associated function with\
    \ a similar name: `div_ceil`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    for i in 2..(n - 2) {\n\
    \        vec.push((i + 1) + (n / 2.0));\n    }\n    vec.push(vec![0] + vec![1..n\
    \ - 1]);\n    return vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpe5a5ofia.rs:21:31\n\
    \   |\n21 |         vec.push((i + 1) + (n / 2.0));\n   |                     \
    \          ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0369]: cannot add `Vec<std::ops::Range<isize>>`\
    \ to `Vec<{integer}>`\n  --> /tmp/tmpe5a5ofia.rs:23:22\n   |\n23 |     vec.push(vec![0]\
    \ + vec![1..n - 1]);\n   |              ------- ^ -------------- Vec<std::ops::Range<isize>>\n\
    \   |              |\n   |              Vec<{integer}>\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    debug_assert!(n\
    \ > 0);\n    let mut sum = 0;\n    let mut tmp = 0;\n\n    for i in 0..(n + 1)\
    \ {\n        tmp += i;\n        sum += tmp;\n    }\n\n    vec![sum, sum + n, sum\
    \ + n, sum]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10, 13, 13, 10]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpyswrrvoj.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 1 as usize];\n    vec[0] = vec[1] = 3;\n    for i in 2..n+1\
    \ {\n        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprd27m16q.rs:18:31\n   |\n\
    18 |     let mut vec = vec![0; n + 1 as usize];\n   |                        \
    \       ^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprd27m16q.rs:18:27\n   |\n18 |     let mut vec = vec![0;\
    \ n + 1 as usize];\n   |                           ^^^^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |     let mut vec = vec![0; (n\
    \ + 1 as usize).try_into().unwrap()];\n   |                           +      \
    \        +++++++++++++++++++++\n\nerror[E0277]: cannot add `usize` to `isize`\n\
    \  --> /tmp/tmprd27m16q.rs:18:29\n   |\n18 |     let mut vec = vec![0; n + 1 as\
    \ usize];\n   |                             ^ no implementation for `isize + usize`\n\
    \   |\n   = help: the trait `Add<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprd27m16q.rs:19:14\n   |\n19 |     vec[0] = vec[1]\
    \ = 3;\n   |     ------   ^^^^^^^^^^ expected integer, found `()`\n   |     |\n\
    \   |     expected due to the type of this binding\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprd27m16q.rs:21:9\n   |\n21 |   \
    \      vec[i] = vec[i - 1] + vec[i - 2];\n   |         ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpr"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![\n\
    \        (3 as isize).max(0) as isize,\n        (1 + n / 2).max(0) as isize,\n\
    \        (1 + n - 1).max(0) as isize,\n        (1 + n + 1).max(0) as isize,\n\
    \    ]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 3, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpv74aoay0.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ > 1);\n    let mut v: Vec<isize> = Vec::new();\n    v.reserve(n / 2 + 1);\n\
    \    v += 3;\n    if n % 2 == 0 {\n        v += 1;\n        v += n - 2;\n    \
    \    v += n + 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n \
    \   assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps04_og57.rs:20:15\n   |\n\
    20 |     v.reserve(n / 2 + 1);\n   |               ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     v.reserve((n / 2 + 1).try_into().unwrap());\n\
    \   |               +         +++++++++++++++++++++\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmps04_og57.rs:21:5\n\
    \   |\n21 |     v += 3;\n   |     -^^^^^\n   |     |\n   |     cannot use `+=`\
    \ on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<isize>`\n  --> /tmp/tmps04_og57.rs:23:9\n   |\n23 |\
    \         v += 1;\n   |         -^^^^^\n   |         |\n   |         cannot use\
    \ `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmps04_og57.rs:24:9\n   |\n\
    24 |         v += n - 2;\n   |         -^^^^^^^^^\n   |         |\n   |      \
    \   cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmps04_og57.rs:25:9\n\
    \   |\n25 |         v += n + 1;\n   |         -^^^^^^^^^\n   |         |\n   |\
    \         cannot use `+=` on type `Vec<isize>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    //\
    \ Odd and even conditions\n    if n % 2 == 0 {\n        let tri1 = tri(n / 2)\
    \ as isize;\n        let tri2 = tri(n - 1) + tri(n - 2) + tri(n + 1) as isize;\n\
    \        vec![tri1, tri2, tri1 + tri2]\n    } else if n % 2 == 1 {\n        vec![3i32]\n\
    \    } else {\n        panic!(\"You have to input a non-negative integer!\")\n\
    \    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpavamelm2.rs:21:31\n\
    \   |\n21 |         let tri2 = tri(n - 1) + tri(n - 2) + tri(n + 1) as isize;\n\
    \   |                    ---------- ^ ---------- Vec<isize>\n   |            \
    \        |\n   |                    Vec<isize>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpavamelm2.rs:24:14\n   |\n24 |         vec![3i32]\n   |        \
    \      ^^^^ expected `isize`, found `i32`\n   |\nhelp: change the type of the\
    \ numeric literal from `i32` to `isize`\n   |\n24 |         vec![3isize]\n   |\
    \               ~~~~~\n\nerror[E0605]: non-primitive cast: `Vec<isize>` as `isize`\n\
    \  --> /tmp/tmpavamelm2.rs:20:20\n   |\n20 |         let tri1 = tri(n / 2) as\
    \ isize;\n   |                    ^^^^^^^^^^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror[E0605]: non-primitive cast: `Vec<isize>` as `isize`\n  --> /tmp/tmpavamelm2.rs:21:46\n\
    \   |\n21 |         let tri2 = tri(n - 1) + tri(n - 2) + tri(n + 1) as isize;\n\
    \   |                                              ^^^^^^^^^^^^^^^^^^^ an `as`\
    \ expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![];\n\n    if n == 1 {\n        vec.push(3);\n    }\n\n    if\
    \ n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpmvj4_arj.rs:27:29\n\
    \   |\n27 |         vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |    \
    \              ---------- ^ ---------- Vec<isize>\n   |                  |\n \
    \  |                  Vec<isize>\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        vec![]\n    } else {\n        vec![\n            tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1),\n            tri(n - 1) + tri(n - 2) + tri(n + 1),\n\
    \        ]\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpo6l2201r.rs:22:24\n\
    \   |\n22 |             tri(n - 1) + tri(n - 2) + tri(n + 1),\n   |          \
    \   ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpo6l2201r.rs:23:24\n\
    \   |\n23 |             tri(n - 1) + tri(n - 2) + tri(n + 1),\n   |          \
    \   ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![];\n    for i in 0..n {\n        vec.push(3);\n    }\n    for\
    \ i in 2..n + 1 {\n        let first = vec[0];\n        let second = vec[1];\n\
    \        let third = vec[vec.len() - 2];\n        let sum = first + second + third;\n\
    \        vec.push(sum);\n    }\n    vec\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3, 9, 9]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpdicoof3s.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n<=1  {\n        vec![3]\n    }\n    else {\n        let mut f = vec![3]; //\
    \ f(0) = 3\n        let mut g = vec![3]; // g(0) = 3\n\n        let mut x = 1\
    \ + n/2; // x(0) = 1\n        let mut y = 1;\n        for i in 1..n {\n      \
    \      f[i] = x;\n            g[i] = y;\n            x += y;\n            y *=\
    \ x + 1;\n        }\n        g[n] = y; // g(n) = g(n-1) + g(n-2) + g(n+1) + g(n)\
    \ = 8\n        g\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp5ur08ohq.rs:28:13\n   |\n28 |             f[i] = x;\n   |          \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5ur08ohq.rs:29:13\n\
    \   |\n29 |             g[i] = y;\n   |             ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5ur08ohq.rs:33:9\n   |\n33 |   \
    \      g[n] = y; // g(n) = g(n-1) + g(n-2) + g(n+1) + g(n) = 8\n   |         ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut fibvec: Vec<isize> = vec![3, 1 + n / 2];\n    for _ in 1..n+1 {\n      \
    \  fibvec.push(fibvec[fibvec.len() - 1] + fibvec[fibvec.len() - 2] + fibvec[fibvec.len()\
    \ - 3]);\n    }\n    return fibvec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmps7k562i_.rs:20:82

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for val in 0..(n - 1) {\n        result.push(val +\
    \ val / 2);\n    }\n    for val in 2..(n + 1) {\n        result.push(val - val\
    \ / 2 + val + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 4, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpf9rtdymq.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = vec![0];\n    let mut b = vec![0];\n    let mut c = vec![0];\n\n   \
    \ while n >= 2 {\n        a.push(0);\n        b.push(1);\n        c.push(1);\n\
    \n        // First 2 terms in Fibonacci\n        a.push(3);\n        b.push(1\
    \ + n / 2);\n\n        // Last 2 terms in Fibonacci\n        b.push(1 + n / 2);\n\
    \        c.push(1 + n / 2);\n        n -= 1;\n    }\n    vec![a..n]\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1fbw25up.rs:36:13\n   |\n\
    36 |     vec![a..n]\n   |             ^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<{integer}>`\n                found type\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fbw25up.rs:36:10\n\
    \   |\n36 |     vec![a..n]\n   |          ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<Vec<{integer}>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut ret: Vec<isize> = vec![];\n    let mut a = tri_n(n - 1, &mut ret).unwrap();\n\
    \    let mut b = tri_n(n - 2, &mut ret).unwrap();\n    let mut c = tri_n(n - 1,\
    \ &mut ret).unwrap();\n    ret.push(a);\n    ret.push(b);\n    ret.push(c);\n\
    \    ret\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `tri_n` in this scope\n  --> /tmp/tmpa4koe9_r.rs:19:17\n\
    \   |\n19 |     let mut a = tri_n(n - 1, &mut ret).unwrap();\n   |           \
    \      ^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `tri_n`\
    \ in this scope\n  --> /tmp/tmpa4koe9_r.rs:20:17\n   |\n20 |     let mut b = tri_n(n\
    \ - 2, &mut ret).unwrap();\n   |                 ^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `tri_n` in this scope\n  --> /tmp/tmpa4koe9_r.rs:21:17\n\
    \   |\n21 |     let mut c = tri_n(n - 1, &mut ret).unwrap();\n   |           \
    \      ^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = (1 + 2 * n / 2) as isize;\n    if n % 2 == 0 {\n        a += 1;\n  \
    \  }\n    \n    let mut b = a + a as isize;\n    if n % 2 == 0 {\n        b +=\
    \ 1;\n    }\n    \n    vec![a; b]\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfqmqfqp0.rs:28:13\n   |\n\
    28 |     vec![a; b]\n   |             ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n28 |     vec![a; b.try_into().unwrap()]\n   |           \
    \   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 || n == 2 {\n        return vec![1, 2];\n    }\n    let mut vec: Vec<isize>\
    \ = vec![];\n    for i in 1..n {\n        let prev = (i - 1) / 2;\n        let\
    \ next = i + 1;\n        vec.push(tri(prev).iter().zip(tri(next).iter()).map(|&(a,b)|\
    \ a+b).sum());\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n \
    \   assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaj_0txl4.rs:25:62\n   |\n\
    25 |         vec.push(tri(prev).iter().zip(tri(next).iter()).map(|&(a,b)| a+b).sum());\n\
    \   |                                                              ^^^^^-\n  \
    \ |                                                              |    |\n   |\
    \                                                              |    expected due\
    \ to this\n   |                                                              expected\
    \ tuple, found reference\n   |\n   = note:  expected tuple `(&isize, &isize)`\n\
    \           found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v: Vec<isize> = vec![];\n    for i in 0..=n {\n        let x = ((3*(i+1))/2).floor()\
    \ as isize;\n        let y = ((4*(i+1))/2).floor() as isize;\n        if x%3 ==\
    \ 0 && y%3 == 0 {\n            v.push(x);\n        }\n        else{\n        \
    \    v.push(x+y);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpv6gte2m0.rs:20:31\n   |\n20 |         let x = ((3*(i+1))/2).floor()\
    \ as isize;\n   |                               ^^^^^ help: there is an associated\
    \ function with a similar name: `div_floor`\n\nerror[E0599]: no method named `floor`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpv6gte2m0.rs:21:31\n\
    \   |\n21 |         let y = ((4*(i+1))/2).floor() as isize;\n   |            \
    \                   ^^^^^ help: there is an associated function with a similar\
    \ name: `div_floor`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 {\n        return vec![];\n    }\n    let mut v1: isize = 1;\n    let\
    \ mut v2: isize = 2;\n    let mut v3: isize = 3;\n    while v1 < n {\n       \
    \ let mut i: isize = 1;\n        while i < n {\n            if i % 2 == 0 {\n\
    \                v1 = v2;\n                v2 = 3 + v1;\n            } else {\n\
    \                v3 = v1;\n                v1 = v2 + v3;\n                v2 =\
    \ v1;\n            }\n            i += 1;\n        }\n        v3 = v1;\n     \
    \   v1 = v2 + v3;\n        v2 = v1;\n    }\n    vec![v1, v2, v3, n]\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 9, 3, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpygti09qq.rs:46:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    if n < 3 {\n        vec.push(n);\n  \
    \  } else {\n        let mut a: isize = 3 + n / 2;\n        let mut b: isize =\
    \ (a + n) / 2;\n        if n % 2 == 0 {\n            vec.push(a);\n          \
    \  vec.push(b);\n        } else {\n            vec.push(b);\n            vec.push(a);\n\
    \        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpoqozaha1.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut tvec: Vec<isize> = vec![0; n + 2];\n    tvec[0] = 3;\n    tvec[1] = 1 +\
    \ n / 2;\n    if n % 2 == 1 {\n        tvec[2] = (n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n    }\n    tvec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnbcjsulj.rs:18:40\n   |\n\
    18 |     let mut tvec: Vec<isize> = vec![0; n + 2];\n   |                    \
    \                    ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n18 |     let mut tvec: Vec<isize> = vec![0; (n + 2).try_into().unwrap()];\n\
    \   |                                        +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ cannot add `Vec<isize>` to `isize`\n  --> /tmp/tmpnbcjsulj.rs:22:27\n   |\n\
    22 |         tvec[2] = (n - 1) + tri(n - 2) + tri(n + 1);\n   |              \
    \             ^ no implementation for `isize + Vec<isize>`\n   |\n   = help: the\
    \ trait `Add<Vec<isize>>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut fib1: Vec<isize> = vec![];\n    let mut fib2: Vec<isize> = vec![];\n   \
    \ fib1.push(3);\n    fib2.push(1);\n    while fib1.len() < n + 1 {\n        let\
    \ n = fib2.len() as isize;\n        fib1.push((fib2[n - 1] + fib2[n - 2] + fib2[(n\
    \ + 1) % (n - 2)] as isize) as isize);\n        fib2.push(n);\n    }\n    fib1.clone();\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzrzd_l93.rs:22:24\n   |\n\
    22 |     while fib1.len() < n + 1 {\n   |                        ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n22 |     while fib1.len()\
    \ < (n + 1).try_into().unwrap() {\n   |                        +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzrzd_l93.rs:24:20\n\
    \   |\n24 |         fib1.push((fib2[n - 1] + fib2[n - 2] + fib2[(n + 1) % (n -\
    \ 2)] as isize) as isize);\n   |                    ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpzrzd_l93.rs:24:34\n   |\n24 |         fib1.push((fib2[n\
    \ - 1] + fib2[n - 2] + fib2[(n + 1) % (n - 2)] as isize) as isize);\n   |    \
    \                              ^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpzrzd_l93.rs:24:48\n   |\n24 |         fib1.push((fib2[n - 1] +\
    \ fib2[n - 2] + fib2[(n + 1) % (n - 2)] as isize) as isize);\n   |           \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut fib = vec![3, 2, 1];\n    fib.push((n - 1) as isize);\n    fib.push((n -\
    \ 2) as isize);\n    fib.push((n - 3) as isize);\n    fib\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 2, 1, 0]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpbtny3_h3.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v: Vec<isize> = vec![];\n    v.reserve(n + 1);\n    v.resize(v.len(), 3);\n\
    \    v[0] = 1;\n    v[1] = 3;\n    if n % 2 == 0 {\n        v[2] = 1 + n / 2;\n\
    \    } else {\n        v[2] = v[3] + v[1] + v[0];\n    }\n    v[v.len() - 1] =\
    \ v[2] + v[1] + v[0];\n    v\n}\n\nfn main() {\n    let candidate = tri;\n   \
    \ assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3rmhlezu.rs:19:15\n   |\n\
    19 |     v.reserve(n + 1);\n   |               ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |     v.reserve((n + 1).try_into().unwrap());\n\
    \   |               +     +++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n\n    let mut result = vec![n, 1];\n\
    \n    if n % 2 == 1 {\n        let mid = n / 2;\n        let left = tri(mid);\n\
    \        let right = tri(mid - 1);\n        result = left.iter().cloned().chain(right.iter().cloned()).collect();\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpi2x77bge.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(n\
    \ - 1);\n        vec.push(1 + n);\n    }\n    return vec;\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpaevuwxso.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![1];\n\
    \    }\n    let mut tri = vec![1, n];\n    for i in 2..n {\n        tri.push(tri[i\
    \ - 1] + tri[i - 2]);\n    }\n    tri\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_dj6m825.rs:26:18\n\
    \   |\n26 |         tri.push(tri[i - 1] + tri[i - 2]);\n   |                 \
    \ ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_dj6m825.rs:26:31\n\
    \   |\n26 |         tri.push(tri[i - 1] + tri[i - 2]);\n   |                 \
    \              ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![\n\
    \        3 * ((1 / 2) - n),\n        tri(n - 1) + tri(n - 2) + tri(n + 1),\n \
    \   ]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmphq7ybn4m.rs:20:20\n\
    \   |\n20 |         tri(n - 1) + tri(n - 2) + tri(n + 1),\n   |         ----------\
    \ ^ ---------- Vec<isize>\n   |         |\n   |         Vec<isize>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut fib = [0; 3];\n    fib.push(3);\n    fib.push((1 + n) / 2); // push even\
    \ number\n    fib.push(fib[2] - fib[1] + fib[3]);\n    let mut result = [0; n\
    \ + 1];\n    let mut i = 1;\n    while fib[i] < n {\n        result[i] = fib[i];\n\
    \        i += 1;\n    }\n    result[i] = n;\n    result\n}\n\nfn main() {\n  \
    \  let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n   \
    \ assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp4vfwi3_b.rs:22:26\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \        - this would need to be a `const`\n...\n22 |     let mut result = [0;\
    \ n + 1];\n   |                          ^\n\nerror[E0599]: no method named `push`\
    \ found for array `[{integer}; 3]` in the current scope\n  --> /tmp/tmp4vfwi3_b.rs:19:9\n\
    \   |\n19 |     fib.push(3);\n   |         ^^^^ method not found in `[{integer};\
    \ 3]`\n\nerror[E0599]: no method named `push` found for array `[{integer}; 3]`\
    \ in the current scope\n  --> /tmp/tmp4vfwi3_b.rs:20:9\n   |\n20 |     fib.push((1\
    \ + n) / 2); // push even number\n   |         ^^^^ method not found in `[{integer};\
    \ 3]`\n\nerror[E0599]: no method named `push` found for array `[{integer}; 3]`\
    \ in the current scope\n  --> /tmp/tmp4vfwi3_b.rs:21:9\n   |\n21 |     fib.push(fib[2]\
    \ - fib[1] + fib[3]);\n   |         ^^^^ method not found in `[{integer}; 3]`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0435, E0599.\nFor more information about an error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut tri = Vec::new();\n    tri.push(3);\n    for i in 1..(n+1).min(3) {\n  \
    \      let mut a = tri.last_mut();\n        let b = tri.last_mut();\n        *a\
    \ = 1 + i / 2;\n        *b = tri[*a] + tri[*b] + tri[*(a + 1)];\n    }\n    tri\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Option<&mut {integer}>` cannot be dereferenced\n  -->\
    \ /tmp/tmpkuxalhe6.rs:23:9\n   |\n23 |         *a = 1 + i / 2;\n   |         ^^\n\
    \nerror[E0614]: type `Option<&mut {integer}>` cannot be dereferenced\n  --> /tmp/tmpkuxalhe6.rs:24:9\n\
    \   |\n24 |         *b = tri[*a] + tri[*b] + tri[*(a + 1)];\n   |         ^^\n\
    \nerror[E0614]: type `Option<&mut {integer}>` cannot be dereferenced\n  --> /tmp/tmpkuxalhe6.rs:24:18\n\
    \   |\n24 |         *b = tri[*a] + tri[*b] + tri[*(a + 1)];\n   |            \
    \      ^^\n\nerror[E0614]: type `Option<&mut {integer}>` cannot be dereferenced\n\
    \  --> /tmp/tmpkuxalhe6.rs:24:28\n   |\n24 |         *b = tri[*a] + tri[*b] +\
    \ tri[*(a + 1)];\n   |                            ^^\n\nerror[E0369]: cannot add\
    \ `{integer}` to `Option<&mut {integer}>`\n  --> /tmp/tmpkuxalhe6.rs:24:42\n \
    \  |\n24 |         *b = tri[*a] + tri[*b] + tri[*(a + 1)];\n   |             \
    \                           - ^ - {integer}\n   |                            \
    \            |\n   |                                        Option<&mut {integer}>\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0614.\nFor more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn\
    \ check(n: isize) -> bool {\n        n % 2 == 0\n    }\n    if check(n) {\n  \
    \      let rev_n = n - 1;\n        vec![(rev_n * rev_n + 2 * rev_n + 1) * 2, (rev_n\
    \ + 1) * rev_n, (rev_n + 1) * rev_n - 1]\n    } else {\n        let rev_n = n\
    \ - 2;\n        vec![(rev_n - 2) * rev_n, (rev_n - 1) * rev_n - 1]\n    }\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp_j8oq2qv.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = Vec::new();\n    let mut a = 1;\n    let mut b = 1;\n\
    \    let mut c = 0;\n    if n == 0 {\n        result.resize(0);\n        return\
    \ result;\n    }\n    for i in 1..=n {\n        let tmp = a;\n        a = b;\n\
    \        b = tmp + c + b;\n        c = a + b;\n        result.push(c);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp59p_ci_5.rs:23:16\n     |\n23   |         result.resize(0);\n\
    \     |                ^^^^^^ - supplied 1 argument\n     |                |\n\
    \     |                expected 2 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        vec![0, 1, 1]\n    } else {\n        let mut tri = [0, 3,\
    \ 1];\n        let mut i = 2;\n        while i <= n {\n            tri[i] = tri[i\
    \ - 1] + tri[i - 2] + tri[i - 3] + tri[i - 4];\n            i += 5;\n        }\n\
    \        tri\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp4f6z1fpz.rs:24:13\n   |\n24 |             tri[i] = tri[i - 1] + tri[i\
    \ - 2] + tri[i - 3] + tri[i - 4];\n   |             ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp4f6z1fpz.rs:24:22\n   |\n24 |         \
    \    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3] + tri[i - 4];\n   |       \
    \               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4f6z1fpz.rs:24:35\n\
    \   |\n24 |             tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3] + tri[i\
    \ - 4];\n   |                                   ^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp4f6z1fpz.rs:24:48\n   |\n24 |         \
    \    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3] + tri[i - 4];\n   |       \
    \                                         ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 1 {\n        vec![tri(n - 1) + tri(n - 2), tri(n - 2)] \n    } else\
    \ {\n        vec![tri(n - 2) + tri(n - 1), tri(n - 1)] \n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp4jtm9t55.rs:19:25\n\
    \   |\n19 |         vec![tri(n - 1) + tri(n - 2), tri(n - 2)] \n   |         \
    \     ---------- ^ ---------- Vec<isize>\n   |              |\n   |          \
    \    Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  -->\
    \ /tmp/tmp4jtm9t55.rs:21:25\n   |\n21 |         vec![tri(n - 2) + tri(n - 1),\
    \ tri(n - 1)] \n   |              ---------- ^ ---------- Vec<isize>\n   |   \
    \           |\n   |              Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a: Vec<isize> = vec![0; n + 1];\n    a[0] = 3;\n    a[1] = 1;\n    for i\
    \ in 2..n + 1 {\n        a[i] = a[i-2] + a[i - 1];\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsff05rcp.rs:18:37\n   |\n\
    18 |     let mut a: Vec<isize> = vec![0; n + 1];\n   |                       \
    \              ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    18 |     let mut a: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n   | \
    \                                    +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsff05rcp.rs:22:9\n\
    \   |\n22 |         a[i] = a[i-2] + a[i - 1];\n   |         ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpsff05rcp.rs:22:16\n   |\n22 |         a[i]\
    \ = a[i-2] + a[i - 1];\n   |                ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpsff05rcp.rs:22:25\n   |\n22 |         a[i]\
    \ = a[i-2] + a[i - 1];\n   |                         ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n<1 {\n        return vec![];\n    }\n    let mut v = vec![3, 1];\n    for i\
    \ in 1..n+1 {\n        if i % 2 == 0 {\n            v.push(v.last().unwrap_or(i));\n\
    \        } else {\n            v.push(v.last().unwrap_or(i + v[0] + v[1]));\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps6ywjyzz.rs:24:39\n   |\n\
    24 |             v.push(v.last().unwrap_or(i));\n   |                        \
    \               ^\n   |                                       |\n   |        \
    \                               expected `&{integer}`, found `isize`\n   |   \
    \                                    help: consider borrowing here: `&i`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps6ywjyzz.rs:24:20\n   |\n24 |             v.push(v.last().unwrap_or(i));\n\
    \   |                    ^^^^^^^^^^^^^^^^^^^^^ expected integer, found `&{integer}`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n24 |             v.push(*v.last().unwrap_or(i));\n\
    \   |                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6ywjyzz.rs:26:39\n\
    \   |\n26 |             v.push(v.last().unwrap_or(i + v[0] + v[1]));\n   |   \
    \                                    ^^^^^^^^^^^^^^^\n   |                   \
    \                    |\n   |                                       expected `&isize`,\
    \ found `isize`\n   |                                       help: consider borrowing\
    \ here: `&(i + v[0] + v[1])`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6ywjyzz.rs:26:20\n\
    \   |\n26 |             v.push(v.last().unwrap_or(i + v[0] + v[1]));\n   |   \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |        \
    \     v.push(*v.last().unwrap_or(i + v[0] + v[1]));\n   |                    +\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a: Vec<isize> = vec![];\n    let mut b: Vec<isize> = vec![];\n    let mut\
    \ c: Vec<isize> = vec![];\n    \n    if n < 3 {\n        return a;\n    }\n  \
    \  \n    let mut k = 2;\n    \n    for i in 0..(n + 1) {\n        a.push(i);\n\
    \        b.push(k);\n        b.push(k + 1);\n        c.push(k + 2);\n        c.push(k\
    \ + 3);\n        \n        k = (k + 4) / 2;\n    }\n    \n    return c;\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 5, 6, 5, 6, 5, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpslvj0n2m.rs:43:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![];\n    if n % 2 == 0 {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    } else {\n        vec.push(tri(n - 3) + tri(n - 2)\
    \ + tri(n - 1));\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpez21yo2v.rs:20:29\n\
    \   |\n20 |         vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |    \
    \              ---------- ^ ---------- Vec<isize>\n   |                  |\n \
    \  |                  Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpez21yo2v.rs:22:29\n   |\n22 |         vec.push(tri(n - 3) + tri(n\
    \ - 2) + tri(n - 1));\n   |                  ---------- ^ ---------- Vec<isize>\n\
    \   |                  |\n   |                  Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut first = 0 as isize;\n    let mut second = 0 as isize;\n    let mut result:\
    \ Vec<isize> = vec![];\n\n    first = 1;\n    second = 1;\n\n    for _ in 0..n\
    \ {\n        result.append(first);\n        first = first + second;\n        second\
    \ = first - second;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzlagoa7z.rs:26:23\n   |\n\
    26 |         result.append(first);\n   |                       ^^^^^ expected\
    \ `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<isize>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut tri = vec![vec![1], vec![2, 1], vec![3, 2]];\n\n    tri[0] = tri[0].clone().unwrap();\n\
    \    tri[1] = tri[1].clone().unwrap();\n    tri[2] = tri[2].clone().unwrap();\n\
    \n    if n >= 3 {\n        tri[n + 3] = tri[n].clone().unwrap() + tri[n - 3].clone().unwrap()\
    \ + tri[n + 1].clone().unwrap();\n    }\n\n    tri\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `Vec<{integer}>`\
    \ in the current scope\n  --> /tmp/tmpwmihsbs8.rs:20:29\n   |\n20 |     tri[0]\
    \ = tri[0].clone().unwrap();\n   |                             ^^^^^^ help: there\
    \ is an associated function with a similar name: `swap`\n\nerror[E0599]: no method\
    \ named `unwrap` found for struct `Vec<{integer}>` in the current scope\n  -->\
    \ /tmp/tmpwmihsbs8.rs:21:29\n   |\n21 |     tri[1] = tri[1].clone().unwrap();\n\
    \   |                             ^^^^^^ help: there is an associated function\
    \ with a similar name: `swap`\n\nerror[E0599]: no method named `unwrap` found\
    \ for struct `Vec<{integer}>` in the current scope\n  --> /tmp/tmpwmihsbs8.rs:22:29\n\
    \   |\n22 |     tri[2] = tri[2].clone().unwrap();\n   |                      \
    \       ^^^^^^ help: there is an associated function with a similar name: `swap`\n\
    \nerror[E0277]: the type `[Vec<{integer}>]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpwmihsbs8.rs:25:9\n   |\n25 |         tri[n + 3] = tri[n].clone().unwrap()\
    \ + tri[n - 3].clone().unwrap() + tri[n + 1].clone().unwrap();\n   |         ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[Vec<{integer}>]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<Vec<{integer}>>`\n\
    \nerror[E0277]: the type `[Vec<{integer}>]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpwmihsbs8.rs:25:22\n   |\n25 |         tri[n + 3] = tri[n].clone().unwrap()\
    \ + tri[n - 3].clone().unwrap() + tri[n + 1].clone().unwrap();\n   |         \
    \             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[Vec<{integer}>]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<Vec<{integer}>>`\n\nerror[E0277]: the type `[Vec<{integer}>]` cannot\
    \ be indexed by `isize`\n  --> /tmp/t"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = vec![3, 1];\n    let mut b = vec![2, 1];\n    let mut c = vec![3];\n\
    \    for i in 1..n + 1 {\n        a.push(b.iter().next().unwrap());\n        b.push(c.iter().next().unwrap());\n\
    \        c.push(a[i] + b[i]);\n    }\n    c\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv0bh_k6a.rs:22:16\n   |\n\
    22 |         a.push(b.iter().next().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `&{integer}`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n22 |         a.push(*b.iter().next().unwrap());\n   |        \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0bh_k6a.rs:23:16\n\
    \   |\n23 |         b.push(c.iter().next().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `&{integer}`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n23 |         b.push(*c.iter().next().unwrap());\n   |        \
    \        +\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpv0bh_k6a.rs:24:16\n   |\n24 |         c.push(a[i] + b[i]);\n  \
    \ |                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv0bh_k6a.rs:24:23\n\
    \   |\n24 |         c.push(a[i] + b[i]);\n   |                       ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    \n    vec.push(1);\n    vec.push(2);\n  \
    \  vec.push(1);\n    \n    for i in (1..n + 1).rev() {\n        vec.push(vec[i\
    \ - 2] + vec[i - 1]);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4hvbvsor.rs:25:18\n\
    \   |\n25 |         vec.push(vec[i - 2] + vec[i - 1]);\n   |                 \
    \ ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4hvbvsor.rs:25:31\n\
    \   |\n25 |         vec.push(vec[i - 2] + vec[i - 1]);\n   |                 \
    \              ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push((3 as isize) as isize);\n    let\
    \ mut current_val = 0;\n    for i in 1..n {\n        current_val += i / 2;\n \
    \       vec.push(current_val);\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 0, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpzwyenv__.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0, 0, 0];\n    for i in 1..n+1 {\n        if i%2 == 0 {\n   \
    \         vec.push(vec![vec![i-1], vec![(i-1)+(i-2), i+1]]);\n        } else {\n\
    \            vec.push(vec![vec![i-1], vec![(i-1)+(i+2), i+2]]);\n        }\n \
    \   }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp395y4pcn.rs:21:22\n   |\n\
    21 |             vec.push(vec![vec![i-1], vec![(i-1)+(i-2), i+1]]);\n   |    \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found\
    \ struct `Vec`\n   |\n   = note: expected type `{integer}`\n            found\
    \ struct `Vec<Vec<isize>>`\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp395y4pcn.rs:23:22\n   |\n23 |             vec.push(vec![vec![i-1],\
    \ vec![(i-1)+(i+2), i+2]]);\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found struct `Vec`\n   |\n   = note: expected type `{integer}`\n\
    \            found struct `Vec<Vec<isize>>`\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 {\n        return vec![0, 1, 1];\n    }\n    let mut a: isize = 3; \n\
    \    let mut b: isize = 1;\n    let mut c: isize = 1;\n    for _ in 0..n {\n \
    \       if n % 2 == 0 {\n            b = c;\n            c = a + b + b + c;\n\
    \        } else {\n            a = c;\n            c = a + b + a + c;\n      \
    \  }\n    }\n    return vec![a, b, c];\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 1, 40]`,\n right: `[1, 3, 2, 8]`', /tmp/tmplmxhhhsx.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 2 {\n        vec![]\n    } else {\n        vec![\n            tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3),\n            tri(n - 2) + tri(n - 3) + tri(n - 4)\n\
    \        ]\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpdd76n6mr.rs:22:24\n\
    \   |\n22 |             tri(n - 1) + tri(n - 2) + tri(n - 3),\n   |          \
    \   ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpdd76n6mr.rs:23:24\n\
    \   |\n23 |             tri(n - 2) + tri(n - 3) + tri(n - 4)\n   |           \
    \  ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec1 = vec![3,1]; \n    let mut vec2 = vec![1,2];\n    for i in 1..n+1 {\n\
    \        if i % 2 == 0 {\n            vec1.push(vec2.pop()+vec1.pop());\n    \
    \    } else {\n            vec1.push(vec1.pop()+vec2.pop());\n        }\n    }\n\
    \    return vec1\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Option<{integer}>` to `Option<{integer}>`\n \
    \ --> /tmp/tmpboiqdb68.rs:22:33\n   |\n22 |             vec1.push(vec2.pop()+vec1.pop());\n\
    \   |                       ----------^---------- Option<{integer}>\n   |    \
    \                   |\n   |                       Option<{integer}>\n\nerror[E0369]:\
    \ cannot add `Option<{integer}>` to `Option<{integer}>`\n  --> /tmp/tmpboiqdb68.rs:24:33\n\
    \   |\n24 |             vec1.push(vec1.pop()+vec2.pop());\n   |              \
    \         ----------^---------- Option<{integer}>\n   |                      \
    \ |\n   |                       Option<{integer}>\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut tri_number = 0;\n    vec.push(3);\n\
    \    while tri_number <= n {\n        vec.push(tri_number);\n        if n & 1\
    \ {\n            vec.push(tri_number + tri_number + tri_number);\n        } else\
    \ {\n            vec.push(tri_number + tri_number + tri_number + 1);\n       \
    \ }\n        tri_number += 1;\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyy1an9y6.rs:23:12\n   |\n\
    23 |         if n & 1 {\n   |            ^^^^^ expected `bool`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    if n <= 3 {\n        return vec;\n  \
    \  }\n    if n % 2 == 0 {\n        let mut i = 1;\n        while i <= n {\n  \
    \          vec.push(tri(n - 2) + tri(n - 1) + i);\n            i += 2;\n     \
    \   }\n    } else {\n        let mut i = 3;\n        while i <= n {\n        \
    \    vec.push(tri(n - 1) + tri(n - 2) + i);\n            i += 2;\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpkw6nobuv.rs:25:33\n\
    \   |\n25 |             vec.push(tri(n - 2) + tri(n - 1) + i);\n   |         \
    \             ---------- ^ ---------- Vec<isize>\n   |                      |\n\
    \   |                      Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpkw6nobuv.rs:31:33\n   |\n31 |             vec.push(tri(n\
    \ - 1) + tri(n - 2) + i);\n   |                      ---------- ^ ---------- Vec<isize>\n\
    \   |                      |\n   |                      Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![n];\n    if n % 2 == 0 {\n        result[1] =\
    \ 1 + result[n/2] // even\n    } else {\n        result[1] = result[n/2] + result[n/2\
    \ - 1] + result[n/2+1] // odd\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplhmx4gt9.rs:20:25\n\
    \   |\n20 |         result[1] = 1 + result[n/2] // even\n   |                \
    \         ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplhmx4gt9.rs:22:21\n\
    \   |\n22 |         result[1] = result[n/2] + result[n/2 - 1] + result[n/2+1]\
    \ // odd\n   |                     ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplhmx4gt9.rs:22:35\n   |\n22 |         result[1]\
    \ = result[n/2] + result[n/2 - 1] + result[n/2+1] // odd\n   |               \
    \                    ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmplhmx4gt9.rs:22:53\n   |\n22 |         result[1] = result[n/2] +\
    \ result[n/2 - 1] + result[n/2+1] // odd\n   |                               \
    \                      ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut res = [0; n + 1];\n    let mut tri_1 = vec![1; n];\n    let mut tri_2 =\
    \ vec![1; n];\n    let mut tri_3 = vec![1; n];\n    for i in 1..=n {\n       \
    \ res[i] = tri_1[i - 1] + tri_2[i - 1] + tri_3[i - 1];\n        if i <= n/2 {\n\
    \            tri_1[i - 1] += 1;\n            tri_2[i - 1] += 2;\n            tri_3[i\
    \ - 1] += 3;\n        }\n    }\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpjwi3yj2w.rs:18:23\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \        - this would need to be a `const`\n18 |     let mut res = [0; n + 1];\n\
    \   |                       ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjwi3yj2w.rs:19:29\n\
    \   |\n19 |     let mut tri_1 = vec![1; n];\n   |                            \
    \ ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n   |\n19 |     let mut\
    \ tri_1 = vec![1; n.try_into().unwrap()];\n   |                              ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjwi3yj2w.rs:20:29\n   |\n20 |\
    \     let mut tri_2 = vec![1; n];\n   |                             ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     let mut tri_2 =\
    \ vec![1; n.try_into().unwrap()];\n   |                              ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjwi3yj2w.rs:21:29\n   |\n21 |\
    \     let mut tri_3 = vec![1; n];\n   |                             ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n21 |     let mut tri_3 =\
    \ vec![1; n.try_into().unwrap()];\n   |                              ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjwi3yj2w.rs:23:18\n\
    \   |\n23 |         res[i] = tri_1[i - 1] + tri_2[i - 1] + tri_3[i - 1];\n   |\
    \                  ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpjwi3yj2w.rs:23:33\n   |\n23 |         res[i] = tri_1[i"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 3 || n == 4 {\n        return vec![1, 1, 1];\n    }\n    let mut a = 3;\n\
    \    let mut b = 1;\n    let mut c = 2;\n    let mut d = 1;\n    \n    loop {\n\
    \        d += 1;\n        if n % 2 == 1 {\n            c += 1;\n        }\n  \
    \      if n % 2 == 0 {\n            b += 1;\n        }\n        \n        \n \
    \       if c == d {\n            break;\n        }\n        \n        a += b;\n\
    \        b += c;\n    }\n    vec![a, b, c]\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpvjb3smkl.rs:48:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut ret: Vec<isize> = Vec::new();\n    let mut a: isize = 1;\n    let mut b:\
    \ isize = 1;\n\n    for i in 1..n+1 {\n        a.push(a);\n        b.push(b);\n\
    \        ret.push(*b);\n    }\n\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpdrvyz7jz.rs:23:11\n   |\n23 |         a.push(a);\n   |\
    \           ^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `push` found for type `isize` in the current scope\n  --> /tmp/tmpdrvyz7jz.rs:24:11\n\
    \   |\n24 |         b.push(b);\n   |           ^^^^ method not found in `isize`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpdrvyz7jz.rs:25:18\n\
    \   |\n25 |         ret.push(*b);\n   |                  ^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    if n == 1 {\n        result.push(3);\n    } else\
    \ {\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpgqsdux8_.rs:22:32\n\
    \   |\n22 |         result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   | \
    \                    ---------- ^ ---------- Vec<isize>\n   |                \
    \     |\n   |                     Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![0, 0, 0];\n    }\n\n    let mut vec = vec![0,\
    \ 0, 0];\n    if n % 2 == 0 {\n        vec[1] = tri(n - 1) + tri(n - 2);\n   \
    \     vec[2] = tri(n + 1) + vec[1];\n    } else {\n        vec[2] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpf7f7jbxq.rs:24:29\n\
    \   |\n24 |         vec[1] = tri(n - 1) + tri(n - 2);\n   |                  ----------\
    \ ^ ---------- Vec<isize>\n   |                  |\n   |                  Vec<isize>\n\
    \nerror[E0369]: cannot add `{integer}` to `Vec<isize>`\n  --> /tmp/tmpf7f7jbxq.rs:25:29\n\
    \   |\n25 |         vec[2] = tri(n + 1) + vec[1];\n   |                  ----------\
    \ ^ ------ {integer}\n   |                  |\n   |                  Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpf7f7jbxq.rs:27:29\n\
    \   |\n27 |         vec[2] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |     \
    \             ---------- ^ ---------- Vec<isize>\n   |                  |\n  \
    \ |                  Vec<isize>\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n <= 2 {\n        return vec![1, n];\n    }\n    let mut a: isize = 3;\n   \
    \ let mut b: isize = 1;\n    let mut c: isize = 2;\n    let mut v: Vec<isize>\
    \ = vec![];\n    while b + c < n {\n        v.append(a + b + c);\n        b =\
    \ c + 1;\n        c = a + c;\n        a = a + b;\n    }\n    v.append(a);\n  \
    \  v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoczf0t3f.rs:26:18\n   |\n\
    26 |         v.append(a + b + c);\n   |                  ^^^^^^^^^ expected `&mut\
    \ Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                           found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoczf0t3f.rs:31:14\n   |\n31 |     v.append(a);\n\
    \   |              ^ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note:\
    \ expected mutable reference `&mut Vec<isize>`\n                           found\
    \ type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 2 {\n        return vec![];\n    }\n\n    let mut result = vec![n + 1 as\
    \ isize];\n    for i in 0..=n {\n        result[i] = i + 1;\n    }\n    result[n]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplmlvfft6.rs:24:9\n\
    \   |\n24 |         result[i] = i + 1;\n   |         ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplmlvfft6.rs:26:5\n   |\n26 |     result[n]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |     ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0369]: cannot add `Vec<isize>` to\
    \ `Vec<isize>`\n  --> /tmp/tmplmlvfft6.rs:26:28\n   |\n26 |     result[n] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n   |                 ---------- ^ ----------\
    \ Vec<isize>\n   |                 |\n   |                 Vec<isize>\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    for i in 0..(n as usize) {\n        if i\
    \ % 2 == 0 {\n            vec.push(3);\n        } else {\n            vec.push(1\
    \ + i / 2);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp639wodnx.rs:23:22\n   |\n\
    23 |             vec.push(1 + i / 2);\n   |                      ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n23 |             vec.push((1\
    \ + i / 2).try_into().unwrap());\n   |                      +         +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979223
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v = 0;\n    v += n;\n    if n % 2 == 0 {\n        v += 1\n    }\n    vec![v\
    \ , v + 1]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpnxmgt7sv.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    match\
    \ n {\n        0 => vec![],\n        1 => vec![1],\n        2 => vec![1, 2],\n\
    \        _ => {\n            let mut a = 1;\n            let mut b = 1;\n    \
    \        for i in 2..=n+1 {\n                let c: isize = a + b + i/2; // i/2\
    \ to prevent integer division\n                a = b;\n                b = c;\n\
    \            }\n            vec![a, b]\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 10]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpa0tbghpu.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec1 = vec![0];\n    let mut vec2 = vec![0];\n    let mut vec3 = vec![0];\n\
    \    for i in 1..n + 1 {\n        vec1.push(vec1.last().unwrap() + i);\n     \
    \   vec2.push(vec1.last().unwrap() + vec2.last().unwrap() + i);\n        vec3.push(vec2.last().unwrap()\
    \ + vec3.last().unwrap() + i);\n    }\n    vec1\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpm4z5fkg8.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 1];\n    vec[0] = 3; vec[1] = 1 + n / 2; // n is even\n\
    \    vec[n] = vec[n - 1] + vec[n - 2] + vec[n + 1]; // n is odd\n    vec\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgf0lm3x9.rs:18:27\n   |\n\
    18 |     let mut vec = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut vec = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgf0lm3x9.rs:20:5\n\
    \   |\n20 |     vec[n] = vec[n - 1] + vec[n - 2] + vec[n + 1]; // n is odd\n \
    \  |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgf0lm3x9.rs:20:14\n\
    \   |\n20 |     vec[n] = vec[n - 1] + vec[n - 2] + vec[n + 1]; // n is odd\n \
    \  |              ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgf0lm3x9.rs:20:27\n\
    \   |\n20 |     vec[n] = vec[n - 1] + vec[n - 2] + vec[n + 1]; // n is odd\n \
    \  |                           ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpgf0lm3x9.rs:20:40\n   |\n20 |     vec[n] = vec[n - 1] + vec[n -\
    \ 2] + vec[n + 1]; // n is odd\n   |    "
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![];\n    if n == 0 {\n        return vec![];\n    }\n    vec![n]\
    \ = 1;\n    if n % 2 == 0 {\n        vec![n] = vec![n] + vec![n-1] + vec![n-2];\n\
    \    }\n    else {\n        vec![n] = vec![n] + vec![n-1] + vec![n-2];\n     \
    \   vec![n] = vec![n] + vec![n-1] + vec![n-2];\n    }\n    if n != 0 {\n     \
    \   vec![n] = vec![n] + vec![n-1] + vec![n-2];\n    }\n    vec!\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `}`\n  --> /tmp/tmpw8who2qs.rs:34:1\n\
    \   |\n33 |     vec!\n   |         - expected one of `(`, `[`, or `{`\n34 | }\n\
    \   | ^ unexpected token\n\nerror[E0164]: expected tuple struct or tuple variant,\
    \ found associated function\n  --> /tmp/tmpw8who2qs.rs:22:5\n   |\n22 |     vec![n]\
    \ = 1;\n   |     ^^^^^^^ `fn` calls are not allowed in patterns\n   |\n   = help:\
    \ for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0070]: invalid left-hand side of\
    \ assignment\n  --> /tmp/tmpw8who2qs.rs:22:13\n   |\n22 |     vec![n] = 1;\n \
    \  |     ------- ^\n   |     |\n   |     cannot assign to this expression\n\n\
    error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpw8who2qs.rs:24:27\n\
    \   |\n24 |         vec![n] = vec![n] + vec![n-1] + vec![n-2];\n   |         \
    \          ------- ^ --------- Vec<isize>\n   |                   |\n   |    \
    \               Vec<isize>\n\nerror[E0164]: expected tuple struct or tuple variant,\
    \ found associated function\n  --> /tmp/tmpw8who2qs.rs:24:9\n   |\n24 |      \
    \   vec![n] = vec![n] + vec![n-1] + vec![n-2];\n   |         ^^^^^^^ `fn` calls\
    \ are not allowed in patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0070]: invalid left-hand side of\
    \ assignment\n  --> /tmp/tmpw8who2qs.rs:24:17\n   |\n24 |         vec![n] = vec![n]\
    \ + vec![n-1] + vec![n-2];\n   |         ------- ^\n   |         |\n   |     \
    \    cannot assign to this expression\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpw8who2qs.rs:27:27\n   |\n27 |         vec![n]\
    \ = vec![n] + vec![n-1] + vec![n-2];\n   |                   ------- ^ ---------\
    \ Vec<isize>\n   |                   |\n   |                   Vec<isize>\n\n\
    error[E0164]: expected tuple struct or tuple variant, found associated function\n\
    \ "
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ >= 0);\n    let mut a = vec![3, 1];\n    if n % 2 == 0 {\n        a = a + tri(n\
    \ - 2);\n    } else {\n        a = a + tri(n - 3) + tri(n - 2) + tri(n + 1);\n\
    \    }\n    a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<{integer}>`\n  --> /tmp/tmpn7ado6_3.rs:21:15\n\
    \   |\n21 |         a = a + tri(n - 2);\n   |             - ^ ---------- Vec<isize>\n\
    \   |             |\n   |             Vec<{integer}>\n\nerror[E0369]: cannot add\
    \ `Vec<isize>` to `Vec<{integer}>`\n  --> /tmp/tmpn7ado6_3.rs:23:15\n   |\n23\
    \ |         a = a + tri(n - 3) + tri(n - 2) + tri(n + 1);\n   |             -\
    \ ^ ---------- Vec<isize>\n   |             |\n   |             Vec<{integer}>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    \n    let mut vector = vec![1,\
    \ 1, 1];\n    for i in 1..n {\n        vector = vector.iter().cloned().chain(vec![i]);\n\
    \    }\n    \n    return vector\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6dxxskh4.rs:24:18\n   |\n\
    22 |     let mut vector = vec![1, 1, 1];\n   |                      -------------\
    \ expected due to this value\n23 |     for i in 1..n {\n24 |         vector =\
    \ vector.iter().cloned().chain(vec![i]);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `std::iter::Chain`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `std::iter::Chain<Cloned<std::slice::Iter<'_,\
    \ isize>>, std::vec::IntoIter<isize>>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ >= 0, \"Error: n is negative ({})\", n);\n    let mut res = Vec::new();\n  \
    \  if n % 2 == 0 {\n        res.push_back(3);\n    }\n    else {\n        res.push_back(1\
    \ + n / 2);\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \  }\n    if n >= 4 {\n        let mut last_tri = tri(n - 3);\n        last_tri.swap(3);\n\
    \        res.push_back(last_tri);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpmpr_8ibd.rs:21:13\n   |\n21 |         res.push_back(3);\n\
    \   |             ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method\
    \ named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpmpr_8ibd.rs:24:13\n\
    \   |\n24 |         res.push_back(1 + n / 2);\n   |             ^^^^^^^^^ method\
    \ not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for\
    \ struct `Vec<_>` in the current scope\n  --> /tmp/tmpmpr_8ibd.rs:25:13\n   |\n\
    25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |      \
    \       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpmpr_8ibd.rs:25:34\n   |\n25 |         res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n   |                       ---------- ^ ----------\
    \ Vec<isize>\n   |                       |\n   |                       Vec<isize>\n\
    \nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpmpr_8ibd.rs:29:18\n    |\n29  |         last_tri.swap(3);\n  \
    \  |                  ^^^^ - supplied 1 argument\n    |                  |\n \
    \   |                  expected 2 arguments\n    |\nnote: associated function\
    \ defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>`\
    \ in the current scope\n  --> /tmp/tmpmpr_8ibd.rs:30:13\n   |\n30 |         res.push_back(last_tri);\n\
    \   |             ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = 3 + n/2;\n    let mut b = 1 + n/2;\n    let mut c = 1 + n + n/2;\n \
    \   vec![a, b, c]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpwuegz_xj.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result = [0; n + 1];\n    if n % 2 == 0 {\n        result[0] = 3;\n    \
    \    result[1] = 1 + n / 2;\n    } else {\n        result[0] = 0;\n        result[1]\
    \ = 1;\n        result[2] = 0;\n    }\n    for i in 2..n + 1 {\n        result[i]\
    \ = result[i - 1] + result[i - 2] + result[i-2];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpzcoq_xnw.rs:18:26\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \        - this would need to be a `const`\n18 |     let mut result = [0; n +\
    \ 1];\n   |                          ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    if n % 2 == 0 {\n \
    \       vec.push(1);\n        vec.push(n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(n - 1);\n        vec.push(n + 1);\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp_9xzn_4m.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ > 0);\n\n    if n % 2 == 0 {\n        return vec![tri(n - 1) + tri(n - 2), tri(n\
    \ + 1), n - 1];\n    } else {\n        return vec![tri(n - 1) + tri(n - 2), n\
    \ - 1, tri(n + 1)];\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp8_h_lihm.rs:21:32\n\
    \   |\n21 |         return vec![tri(n - 1) + tri(n - 2), tri(n + 1), n - 1];\n\
    \   |                     ---------- ^ ---------- Vec<isize>\n   |           \
    \          |\n   |                     Vec<isize>\n\nerror[E0369]: cannot add\
    \ `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp8_h_lihm.rs:23:32\n   |\n23 |  \
    \       return vec![tri(n - 1) + tri(n - 2), n - 1, tri(n + 1)];\n   |       \
    \              ---------- ^ ---------- Vec<isize>\n   |                     |\n\
    \   |                     Vec<isize>\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![\n\
    \        (n - 1) + (2 * n) / 2,\n        tri(n - 1) + tri(n - 2) + tri(n + 1),\n\
    \    ]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp2d6kjfg5.rs:20:20\n\
    \   |\n20 |         tri(n - 1) + tri(n - 2) + tri(n + 1),\n   |         ----------\
    \ ^ ---------- Vec<isize>\n   |         |\n   |         Vec<isize>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 { return vec![]; }\n    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 { vec.push(n);\n    } else { vec.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)); }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpo0jpltkl.rs:21:34\n\
    \   |\n21 |     } else { vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1)); }\n \
    \  |                       ---------- ^ ---------- Vec<isize>\n   |          \
    \             |\n   |                       Vec<isize>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n\n    if n <= 0 {\n        return vec;\n\
    \    }\n\n    vec.push(3);\n    vec.push(1);\n\n    for i in 2..n+1 {\n      \
    \  if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap());\n        }\n    }\n\n    vec\n}\n\nfn main() {\n   \
    \ let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 3, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpoaflynap.rs:40:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n <= 1 {\n        vec![3]\n    } else {\n        vec![n + 1 as isize + 3, (n\
    \ - 1) + (n - 2) as isize + 3, (n - 1) + n as isize + 1]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 6, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpqeokxe4p.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut sum = 1;\n    let mut i = 3;\n    while i <= n {\n        sum += i / 2;\n\
    \        i += 3;\n    }\n    vec![sum]\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp2vrt0qje.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = 1;\n    let mut b = 1;\n    let mut c = 1;\n    for i in 1..(n + 1)\
    \ {\n        if i % 2 == 0 {\n            a += i / 2;\n        } else {\n    \
    \        c += i / 2;\n            b += i;\n        }\n    }\n    vec![a, b, c]\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 5, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmptvrivfx_.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    //\
    \ Base cases\n    if n == 1 {\n        return vec![0, 1, 2]\n    }\n    if n ==\
    \ 2 {\n        return vec![0, 1, 3]\n    }\n    if n == 3 {\n        return vec![0,\
    \ 1, 3]\n    }\n\n    let mut result = vec![];\n    for i in 0..(n + 1) {\n  \
    \      let mut add = 1;\n        for j in 1..i {\n            add += ((j - 1)\
    \ / j) *j;\n        }\n        result.push(add);\n    }\n\n    result\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfj_smkrk.rs:43:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut a = 3;\n    let mut b = 1;\n    let mut c = 2;\n    while c <= n {\n   \
    \     a.push(a);\n        b.push(b);\n        c.push(c);\n        a = a + b;\n\
    \        b = b + c;\n        c = c + 1;\n    }\n    a\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmp4q5_sib7.rs:22:11\n   |\n22 |         a.push(a);\n\
    \   |           ^^^^ method not found in `{integer}`\n\nerror[E0599]: no method\
    \ named `push` found for type `{integer}` in the current scope\n  --> /tmp/tmp4q5_sib7.rs:23:11\n\
    \   |\n23 |         b.push(b);\n   |           ^^^^ method not found in `{integer}`\n\
    \nerror[E0599]: no method named `push` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp4q5_sib7.rs:24:11\n   |\n24 |         c.push(c);\n   |        \
    \   ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4q5_sib7.rs:29:5\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \                     ---------- expected `Vec<isize>` because of return type\n\
    ...\n29 |     a\n   |     ^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = Vec::new();\n    if n < 2 {\n        result.push(n);\n\
    \    } else {\n        let mut tmp1: isize = 1;\n        let mut tmp2: isize =\
    \ 3;\n        for i in 1..n / 2 {\n            result.push(tmp1);\n          \
    \  tmp1 += tmp2;\n            tmp2 += 2;\n        }\n        result.push(tmp1\
    \ + tmp2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n  \
    \  assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp0nyhr_ns.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![0];\n    let mut tmp: isize = 2;\n    if n % 2\
    \ == 0 {\n        for i in 0..n / 2 {\n            result.push(tmp);\n       \
    \     tmp = tmp + tmp + tmp;\n        }\n    } else {\n        for i in 0..(n\
    \ / 2 + 1) {\n            result.push(tmp);\n            tmp = tmp + tmp + tmp;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n  \
    \  assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp2c4afsjd.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push((1 + n / 2)\
    \ as isize);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2 as isize);\n   \
    \     vec.push((1 + n / 2 + n / 3) as isize);\n    } else {\n        let n1 =\
    \ (n - 1) / 2;\n        let n2 = (n + 1) / 2;\n        vec.push(n1);\n       \
    \ vec.push(n2);\n        vec.push(n1 + n2);\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpftl_4md9.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use\
    \ std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n\n    fn fn(v1: isize, v2:\
    \ isize) -> isize {\n        fn tri(v1: isize, v2: isize, result: &mut [isize])\
    \ {\n            if v2 < 3 {\n                result[0] = v1; // 1 \n        \
    \        result[1] = v1; // 3 \n                return\n            }\n      \
    \      \n            let mut n1 = v1 + v2;\n            let mut n2 = n1 - v2;\n\
    \            let mut n3 = n1 + n2;\n            result[0] = n3;\n            tri(v1,\
    \ n2, result);\n            tri(n2, n3, result);\n        }\n        tri(v1, 1,\
    \ &mut []);\n    }\n\n    fn fib_func(v1: isize) -> Vec<isize> {\n        fn fib_func(v1:\
    \ isize, result: &mut [isize]) {\n            let mut n1 = 1;\n            let\
    \ mut n2 = 2;\n            \n            for n in &mut result[n2..] {\n      \
    \          *n2 = n1 + n2;\n                n1 = *n2;\n            }\n        }\n\
    \        fib_func(v1, &mut []);\n    }\n\n    let mut result: [isize; n + 1] =\
    \ vec![];\n    fn(vec![0], vec![1], &mut result);\n    fib_func(vec![0], &mut\
    \ result);\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `fn`\n  --> /tmp/tmp79v7dxxq.rs:21:8\n\
    \   |\n21 |     fn fn(v1: isize, v2: isize) -> isize {\n   |        ^^ expected\
    \ identifier, found keyword\n   |\nhelp: escape `fn` to use it as an identifier\n\
    \   |\n21 |     fn r#fn(v1: isize, v2: isize) -> isize {\n   |        ++\n\nerror:\
    \ expected identifier, found `(`\n  --> /tmp/tmp79v7dxxq.rs:53:7\n   |\n53 | \
    \    fn(vec![0], vec![1], &mut result);\n   |       ^ expected identifier\n\n\
    error[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmp79v7dxxq.rs:52:29\n\
    \   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |        - this would need to\
    \ be a `const`\n...\n52 |     let mut result: [isize; n + 1] = vec![];\n   | \
    \                            ^\n\nwarning: unused import: `std::cmp::Ordering`\n\
    \  --> /tmp/tmp79v7dxxq.rs:18:9\n   |\n18 |     use std::cmp::Ordering;\n   |\
    \         ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nwarning: the item `PartialOrd` is imported redundantly\n   --> /tmp/tmp79v7dxxq.rs:19:9\n\
    \    |\n19  |     use std::cmp::PartialOrd;\n    |         ^^^^^^^^^^^^^^^^^^^^\n\
    \nwarning: unused import: `std::cmp::PartialOrd`\n  --> /tmp/tmp79v7dxxq.rs:19:9\n\
    \   |\n19 |     use std::cmp::PartialOrd;\n   |         ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp79v7dxxq.rs:21:36\n   |\n21 |\
    \     fn fn(v1: isize, v2: isize) -> isize {\n   |        --                 \
    \         ^^^^^ expected `isize`, found `()`\n   |        |\n   |        implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp79v7dxxq.rs:39:31\n   |\n39 |     fn fib_func(v1:\
    \ isize) -> Vec<isize> {\n   |        --------               ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |        |\n   |        implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror[E0614]: type `usize`\
    \ cannot be dereferenced\n  --> /tmp/tmp79v7dxxq.rs:45:17\n   |\n45 |        \
    \         *n2 = n1 + n2;\n   |           "
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        vec![0]\n    } else if n % 2 == 0 {\n        vec![tri(n -\
    \ 1) + tri(n - 2)]\n    } else {\n        vec![tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp5be55a0v.rs:21:25\n\
    \   |\n21 |         vec![tri(n - 1) + tri(n - 2)]\n   |              ----------\
    \ ^ ---------- Vec<isize>\n   |              |\n   |              Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp5be55a0v.rs:23:25\n\
    \   |\n23 |         vec![tri(n - 1) + tri(n - 2) + tri(n + 1)]\n   |         \
    \     ---------- ^ ---------- Vec<isize>\n   |              |\n   |          \
    \    Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n\
    \ > 0, \"Error: Tribonacci sequence should be defined for n > 0.\");\n    let\
    \ mut v: Vec<isize> = Vec::new();\n    let mut a = 1 + n / 2;\n    let mut b =\
    \ 1;\n    loop {\n        v.push(a);\n        let c = a / b;\n        let d =\
    \ b + c;\n        a = d;\n        b = c;\n        if a == n {\n            break;\n\
    \        }\n        let e = a + b + c;\n        if e == n {\n            break;\n\
    \        }\n        let f = a + b + c / 2;\n        if f == n {\n            break;\n\
    \        }\n        let g = a + b + c + d;\n        if g == n {\n            break;\n\
    \        }\n        let h = a + b + c + d + e;\n        if h == n {\n        \
    \    break;\n        }\n        let i = a + b + c + d + e + f;\n        if i ==\
    \ n {\n            break;\n        }\n        let j = a + b + c + d + e + f +\
    \ g;\n        if j == n {\n            break;\n        }\n        let k = a +\
    \ b + c + d + e + f + g + h;\n        if k == n {\n            break;\n      \
    \  }\n        let l = a + b + c + d + e + f + g + h + i;\n        if l == n {\n\
    \            break;\n        }\n        let m = a + b + c + d + e + f + g + h\
    \ + i + j;\n        if m == n {\n            break;\n        }\n        let n\
    \ = a + b + c + d + e + f + g + h + i + j + k;\n        if n == n {\n        \
    \    break;\n        }\n        let o = a + b + c + d + e + f + g + h + i + j\
    \ + k + l;\n        if o == n {\n            break;\n        }\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp4651fl2y.rs:81:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![];\n    if n <= 1 {\n        result.push(3);\n\
    \    } else {\n        for i in 1..n / 2 {\n            result.push(i);\n    \
    \    }\n        result.push(n - 1) + (n - 2) + (n + 1);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `isize` to `()`\n  --> /tmp/tmpgkzl5kvs.rs:25:28\n\
    \   |\n25 |         result.push(n - 1) + (n - 2) + (n + 1);\n   |         ------------------\
    \ ^ ------- isize\n   |         |\n   |         ()\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 || n == 1 {\n        return vec![0; n + 1];\n    }\n\n    let mut n1\
    \ = n;\n    let mut n2 = n - 1;\n    let mut n3 = n + 1;\n\n    vec![\n      \
    \  n1,\n        n2 + n1,\n        n3 + n2 + n1,\n        n3 + n1 + n2,\n    ]\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn3by0svj.rs:19:24\n   |\n\
    19 |         return vec![0; n + 1];\n   |                        ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |         return vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                        +     +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v: Vec<isize> = Vec::new();\n    let mut n: isize = n - 1;\n    while n\
    \ > 0 {\n        v.resize(n + 2, 0);\n        v[0] = 1;\n        v[1] = 3;\n \
    \       v[n + 2] = v[n - 1] + v[n - 2];\n        v[n + 1] = v[n + 2];\n      \
    \  n = n - 2;\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4rt5bzj5.rs:21:18\n   |\n\
    21 |         v.resize(n + 2, 0);\n   |                  ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n21 |         v.resize((n + 2).try_into().unwrap(),\
    \ 0);\n   |                  +     +++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4rt5bzj5.rs:24:9\n\
    \   |\n24 |         v[n + 2] = v[n - 1] + v[n - 2];\n   |         ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4rt5bzj5.rs:24:20\n   |\n24 |  \
    \       v[n + 2] = v[n - 1] + v[n - 2];\n   |                    ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4rt5bzj5.rs:24:31\n   |\n24 |  \
    \       v[n + 2] = v[n - 1] + v[n - 2];\n   |                               ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4rt5bzj5.rs:25:9\n\
    \   |\n25 |         v[n + 1] = v[n + 2];\n   |         ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is no"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut v = [0; n + 1];\n    let mut i1 = 1;\n    let mut i2 = 1;\n    let mut i3\
    \ = 1;\n    v[0] = i1;\n    v[1] = i2;\n    for i in 2..n + 1 {\n        v[i]\
    \ = i3;\n        i3 = i1 + i2;\n        i1 = i2;\n        i2 = i3;\n    }\n  \
    \  v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpmk0aespi.rs:18:21\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \        - this would need to be a `const`\n18 |     let mut v = [0; n + 1];\n\
    \   |                     ^\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = vec![];\n    let mut a = 3 + n / 2;\n    let mut b\
    \ = 1 + n / 2;\n    let mut c = a + b;\n    result.push(a);\n    while b != 0\
    \ {\n        c = a + b;\n        a = b;\n        b = c;\n        result.push(c);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to add with overflow'', /tmp/tmpuqo3uqcf.rs:24:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn\
    \ f(a: isize, b: isize, c: isize) -> isize {\n        a + b + c\n    }\n\n   \
    \ vec![\n        match n {\n            0 => 3,\n            1 => 1,\n       \
    \     2 => 2,\n            _ => f(n-1, n-2, n+1),\n        }\n    ]\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp59rmyqta.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 1 {\n        vec![3]\n    } else if n & 1 == 1 {\n        vec![n, n - 1,\
    \ n + 2]\n    } else {\n        vec![tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpb0edb4ht.rs:23:25\n\
    \   |\n23 |         vec![tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\n   |              ---------- ^ ---------- Vec<isize>\n   |          \
    \    |\n   |              Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpb0edb4ht.rs:23:50\n   |\n23 |         vec![tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n   |             \
    \                          ---------- ^ ---------- Vec<isize>\n   |          \
    \                             |\n   |                                       Vec<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        for i in 0..(n\
    \ - 1) {\n            vec.push(tri(n - 1));\n        }\n    } else {\n       \
    \ for i in 0..(n - 1) {\n            vec.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgshifrlo.rs:21:22\n   |\n\
    21 |             vec.push(tri(n - 1));\n   |                      ^^^^^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpgshifrlo.rs:25:33\n   |\n25 |             vec.push(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n   |                      ---------- ^ ----------\
    \ Vec<isize>\n   |                      |\n   |                      Vec<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n <= 1 {\n        return vec![];\n    }\n    vec![n]\n}\n\nfn main() {\n   \
    \ let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp440bbzr3.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 || n == 1 {\n        return vec![0, 0, 0];\n    }\n    let mut sum =\
    \ 1;\n    for i in 2..n + 1 {\n        sum = sum + i / i;\n    }\n    let mut\
    \ sum2 = vec![0, 0, 0, 0];\n    for i in 2..n + 1 {\n        sum2 = sum2 + sum;\n\
    \    }\n    return sum2;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `isize` to `Vec<{integer}>`\n  --> /tmp/tmp8bi3c4og.rs:27:21\n\
    \   |\n27 |         sum2 = sum2 + sum;\n   |                ---- ^ --- isize\n\
    \   |                |\n   |                Vec<{integer}>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![1]\n\
    \    .iter()\n    .take(n.into())\n    .chain(vec![n, n + 1 ,n - 2, n + 2])\n\
    \    .collect();\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: From<isize>` is not satisfied\n \
    \ --> /tmp/tmpf8kmi_2i.rs:20:13\n   |\n20 |     .take(n.into())\n   |        \
    \     ^^^^ the trait `From<isize>` is not implemented for `usize`\n   |\n   =\
    \ help: the following other types implement trait `From<T>`:\n             <f32\
    \ as From<i16>>\n             <f32 as From<i8>>\n             <f32 as From<u16>>\n\
    \             <f32 as From<u8>>\n             <f64 as From<f32>>\n           \
    \  <f64 as From<i16>>\n             <f64 as From<i32>>\n             <f64 as From<i8>>\n\
    \           and 67 others\n   = note: required because of the requirements on\
    \ the impl of `Into<usize>` for `isize`\n\nerror[E0271]: type mismatch resolving\
    \ `<Vec<isize> as IntoIterator>::Item == &{integer}`\n   --> /tmp/tmpf8kmi_2i.rs:21:6\n\
    \    |\n21  |     .chain(vec![n, n + 1 ,n - 2, n + 2])\n    |      ^^^^^ expected\
    \ `&{integer}`, found `isize`\n    |\nnote: required by a bound in `std::iter::Iterator::chain`\n\
    \nerror[E0599]: the method `collect` exists for struct `std::iter::Chain<std::iter::Take<std::slice::Iter<'_,\
    \ {integer}>>, std::vec::IntoIter<isize>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpf8kmi_2i.rs:22:6\n   |\n22 |        .collect();\n   |         ^^^^^^^\
    \ method cannot be called on `std::iter::Chain<std::iter::Take<std::slice::Iter<'_,\
    \ {integer}>>, std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n \
    \  |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &{integer}`\n           which is required by `std::iter::Chain<std::iter::Take<std::slice::Iter<'_,\
    \ {integer}>>, std::vec::IntoIter<isize>>: Iterator`\n           `std::iter::Chain<std::iter::Take<std::slice::Iter<'_,\
    \ {integer}>>, std::vec::IntoIter<isize>>: Iterator`\n           which is required\
    \ by `&mut std::iter::Chain<std::iter::Take<std::slice::Iter<'_, {integer}>>,\
    \ std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpf8kmi_2i.rs:17:21\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \    ---              ^^^^^^^^^^ expected "
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; 3];\n    let mut x = vec![0; 3];\n    let mut y = vec![0;\
    \ 3];\n    let mut z = vec![0; 3];\n    if n % 2 == 0 {\n        x[0] = tri(n\
    \ - 1);\n        x[1] = x[0] + x[1];\n        x[2] = x[0] + x[2] + x[1];\n   \
    \ } else {\n        y[0] = tri(n - 1) + tri(n - 2);\n        y[1] = y[0] + y[1];\n\
    \        y[2] = y[0] + y[2] + y[1];\n        z[0] = y[0] + y[2] + y[3];\n    \
    \    z[1] = y[1] + y[2];\n        z[2] = y[0] + y[1] + y[2];\n    }\n    for i\
    \ in 0..n {\n        vec[i] = z[i] - y[i];\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpizk2ybj3.rs:23:16\n   |\n\
    23 |         x[0] = tri(n - 1);\n   |         ----   ^^^^^^^^^^ expected integer,\
    \ found struct `Vec`\n   |         |\n   |         expected due to the type of\
    \ this binding\n   |\n   = note: expected type `{integer}`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpizk2ybj3.rs:27:27\n   |\n27 |         y[0] = tri(n - 1) + tri(n\
    \ - 2);\n   |                ---------- ^ ---------- Vec<isize>\n   |        \
    \        |\n   |                Vec<isize>\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpizk2ybj3.rs:35:9\n   |\n35 |   \
    \      vec[i] = z[i] - y[i];\n   |         ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpizk2ybj3.rs:35:18\n   |\n35 |  \
    \       vec[i] = z[i] - y[i];\n   |                  ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpizk2ybj3.rs:35:25\n   |\n35 |  \
    \       vec[i] = z[i] - y[i];\n   |                         ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanation"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n == 0 {\n        return vec![];\n    }\n    \n    let mut vec1 = vec![3,1];\n\
    \    let mut vec2 = vec![1];\n    \n    for i in 2..n+1 {\n        let m1 = vec1[0];\n\
    \        let m2 = vec2[0];\n        let sum = vec1[0] + vec2[0];\n        vec1.push(sum);\n\
    \        vec2.push((sum - m1 + m2) / 2);\n    }\n    vec1\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 4, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpo65gpvu6.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut re = vec![0; n + 2];\n    let mut im = 2 * (re + 1).cloned().unwrap();\n\
    \    re[1] = im;\n    im = (im / 2 + re[0] + re[1]).cloned().unwrap();\n    im\
    \ = (im / 2 + re[0] + re[1] + re[2]).cloned().unwrap();\n    vec![re[0], im, re[1],\
    \ re[2]]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl2ec1kb3.rs:18:26\n   |\n\
    18 |     let mut re = vec![0; n + 2];\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut re = vec![0;\
    \ (n + 2).try_into().unwrap()];\n   |                          +     +++++++++++++++++++++\n\
    \nerror[E0369]: cannot add `{integer}` to `Vec<{integer}>`\n  --> /tmp/tmpl2ec1kb3.rs:19:26\n\
    \   |\n19 |     let mut im = 2 * (re + 1).cloned().unwrap();\n   |           \
    \            -- ^ - {integer}\n   |                       |\n   |            \
    \           Vec<{integer}>\n\nerror[E0689]: can't call method `cloned` on ambiguous\
    \ numeric type `{integer}`\n  --> /tmp/tmpl2ec1kb3.rs:21:35\n   |\n21 |     im\
    \ = (im / 2 + re[0] + re[1]).cloned().unwrap();\n   |                        \
    \           ^^^^^^\n\nerror[E0689]: can't call method `cloned` on ambiguous numeric\
    \ type `{integer}`\n  --> /tmp/tmpl2ec1kb3.rs:22:43\n   |\n22 |     im = (im /\
    \ 2 + re[0] + re[1] + re[2]).cloned().unwrap();\n   |                        \
    \                   ^^^^^^\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    res.push(3);\n    if n % 2 == 1 {\n        res.push(1);\n\
    \    }\n    for i in 2..n {\n        res.push((*res.last_mut() + *res.last().unwrap()\
    \ + i)/2);\n    }\n    res.rev()\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Option<&mut {integer}>` cannot be dereferenced\n  -->\
    \ /tmp/tmpaan7e5an.rs:24:19\n   |\n24 |         res.push((*res.last_mut() + *res.last().unwrap()\
    \ + i)/2);\n   |                   ^^^^^^^^^^^^^^^\n\nerror[E0599]: `Vec<{integer}>`\
    \ is not an iterator\n   --> /tmp/tmpaan7e5an.rs:26:9\n    |\n26  |       res.rev()\n\
    \    |           ^^^ `Vec<{integer}>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<{integer}>: Iterator`\n\
    \            which is required by `&mut Vec<{integer}>: Iterator`\n          \
    \  `[{integer}]: Iterator`\n            which is required by `&mut [{integer}]:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n % 2 == 1 {\n        let mut vec = vec![3, 3, 1];\n        for _ in 1..(n +\
    \ 1) {\n            vec.push((vec[0] + vec[1] + vec[2]).floor() as isize);\n \
    \           vec[2] += 1;\n            vec[1] += 1;\n            vec[0] += 1;\n\
    \        }\n        return vec;\n    }\n    let mut vec = vec![];\n    for i in\
    \ 2..(n + 1) {\n        let num = (vec[i - 1] + vec[i - 2] + vec[i - 1]).floor()\
    \ as isize;\n        vec.push(num);\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `floor` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpi1ikm6cx.rs:21:49\n   |\n21 |             vec.push((vec[0] + vec[1]\
    \ + vec[2]).floor() as isize);\n   |                                         \
    \        ^^^^^\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpi1ikm6cx.rs:30:20\n   |\n30 |         let num = (vec[i - 1] + vec[i\
    \ - 2] + vec[i - 1]).floor() as isize;\n   |                    ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpi1ikm6cx.rs:30:33\n   |\n30 |         let\
    \ num = (vec[i - 1] + vec[i - 2] + vec[i - 1]).floor() as isize;\n   |       \
    \                          ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpi1ikm6cx.rs:30:46\n   |\n30 |         let num = (vec[i - 1] + vec[i\
    \ - 2] + vec[i - 1]).floor() as isize;\n   |                                 \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0689.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 0 {\n        return vec![];\n    }\n    if n%2 == 0 {\n        return vec![tri(n-1)\
    \ + tri(n - 2) + tri(n+1), tri(n-2)];\n    } else {\n        return vec![tri(n-1)\
    \ + tri(n - 1), tri(n-2)];\n    }\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps_6_4bu5.rs:22:30\n\
    \   |\n22 |         return vec![tri(n-1) + tri(n - 2) + tri(n+1), tri(n-2)];\n\
    \   |                     -------- ^ ---------- Vec<isize>\n   |             \
    \        |\n   |                     Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmps_6_4bu5.rs:24:30\n   |\n24 |         return\
    \ vec![tri(n-1) + tri(n - 1), tri(n-2)];\n   |                     -------- ^\
    \ ---------- Vec<isize>\n   |                     |\n   |                    \
    \ Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut arr: Vec<isize> = Vec::new();\n    arr.reserve(n + 1);\n    arr.push(3);\n\
    \    if n % 2 == 0 {\n        for i in 0..n {\n            arr.push(arr[i].to_owned()\
    \ + arr[i + 1].to_owned());\n        }\n    } else {\n        for i in 0..n {\n\
    \            arr.push(arr[i as usize].to_owned() + arr[(i + 1) as usize].to_owned());\n\
    \        }\n    }\n    arr\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf6xs8pzc.rs:19:17\n   |\n\
    19 |     arr.reserve(n + 1);\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     arr.reserve((n + 1).try_into().unwrap());\n\
    \   |                 +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpf6xs8pzc.rs:23:22\n   |\n23 |  \
    \           arr.push(arr[i].to_owned() + arr[i + 1].to_owned());\n   |       \
    \               ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpf6xs8pzc.rs:23:42\n\
    \   |\n23 |             arr.push(arr[i].to_owned() + arr[i + 1].to_owned());\n\
    \   |                                          ^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = Vec::new();\n    for i in 0..=n+1 {\n        vec.push((i+1)/2);\n\
    \        if i%2 == 0 {\n            vec.push((i+1)+(i+2)/2);\n        }\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 1, 1, 5, 2, 2, 8]`,\n right: `[1, 3, 2, 8]`', /tmp/tmptn3v1n0_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n <= 1 {\n        return vec![n];\n    }\n\n    let mut t0 = vec![3];\n    let\
    \ mut t1 = vec![2];\n    let mut t2 = vec![1];\n\n    for i in 1..(n + 1) {\n\
    \        t0.push(t1[i]);\n        t1.push(t2[i]);\n        t2.push(t0[i] + t1[i]);\n\
    \    }\n\n    t2\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpl6pzuvh0.rs:27:17\n   |\n27 |         t0.push(t1[i]);\n   |        \
    \         ^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpl6pzuvh0.rs:28:17\n\
    \   |\n28 |         t1.push(t2[i]);\n   |                 ^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl6pzuvh0.rs:29:17\n   |\n29 |  \
    \       t2.push(t0[i] + t1[i]);\n   |                 ^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl6pzuvh0.rs:29:25\n   |\n29 |  \
    \       t2.push(t0[i] + t1[i]);\n   |                         ^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659979224
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if\
    \ n < 3 {\n        return vec![];\n    }\n    let mut a = vec![1, 2, 1];\n   \
    \ let mut b = vec![2, 3, 1];\n    for i in 2..(n - 1).max() + 1 {\n        //\
    \ Tribonacci sequence is recursive function\n        let mut t = a[..i].iter().zip(b.iter().cloned()).map(|(a,\
    \ b)| a + b);\n        a = b;\n        b = t;\n    }\n    return a;\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp3q4k6jvq.rs:23:25\n    |\n23  |     for i in 2..(n - 1).max()\
    \ + 1 {\n    |                         ^^^- supplied 0 arguments\n    |      \
    \                   |\n    |                         expected 1 argument\n   \
    \ |\nnote: associated function defined here\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmp3q4k6jvq.rs:25:21\n   |\n\
    25 |         let mut t = a[..i].iter().zip(b.iter().cloned()).map(|(a, b)| a +\
    \ b);\n   |                     ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `RangeTo<isize>`\n   = help: the following other types implement trait `SliceIndex<T>`:\n\
    \             <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeTo<isize>>` for `Vec<{integer}>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659979224
