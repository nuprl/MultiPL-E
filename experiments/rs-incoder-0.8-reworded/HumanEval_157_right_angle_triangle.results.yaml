language: rs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  let a = (a+b)/2;\n  let b = (b+c)/2;\n  let c = (c+a)/2;\n\n  a >= 0 &&\
    \ b >= 0 && c >= 0 &&\n  (\n    (a > b && b > c) ||\n    (a > c && c > b) ||\n\
    \    (a > b && c > a)\n  )\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf040mpyt.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, b, a)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(a, b, c)\n    }\n    if b >\
    \ a {\n        return right_angle_triangle(a, b, b)\n    }\n    // if (a > b)\
    \ && (b > c) {\n    //     return true\n    // }\n    // if (a > b) && (b < c)\
    \ {\n    //     return false\n    // }\n    // if (a < b) && (b > c) {\n    //\
    \     return false\n    // }\n    // if (a < b) && (b < c) {\n    //     return\
    \ true\n    // }\n    // if (a == b) && (b == c) {\n    //     return true\n \
    \   // }\n    // if (a == b) && (b == c) {\n    //     return false\n    // }\n\
    \    // if (a == b) && (b < c) {\n    //     return false\n    // }\n    // if\
    \ (a == b) && (b > c) {\n    //     return true\n    // }\n    // if (a == b)\
    \ && (b > c) {\n    //     return true\n    // }\n    // if (a < b) && (b > c)\
    \ {\n    //     return true\n    // }\n    // if (a < b) && (b < c) {\n    //\
    \     return false\n    // }\n    // if (a == b) && (b == c) {\n    //     return\
    \ false\n    // }\n    // if (a > b) && (b > c) {\n    //     return true\n  \
    \  // }\n    // if (a > b) && (b < c) {\n    //     return true\n    // }\n  \
    \  // if (a < b) && (b < c) {\n    //     return true\n    // }\n    // if (a\
    \ == b) && (b == c) {\n    //     return true\n    // }\n    // if (a == b) &&\
    \ (b < c) {\n    //     return false\n    // }\n    // if (a == b) && (b > c)\
    \ {\n    //     return true\n    // }\n    // if (a < b) && (b > c) {\n    //\
    \     return true\n    // }\n    // if (a < b) && (b < c) {\n    //     return\
    \ true\n    // }\n    // if (a == b) && (b == c) {\n    //     return false\n\
    \    // }\n    // if (a == b) && (b < c) {\n    //     return false\n    // }\n\
    \    // if (a == b) && (b > c) {\n    //     return true\n    // }\n    // if\
    \ (a < b) && (b > c) {\n    //     return true\n    // }\n    // if (a < b) &&\
    \ (b < c) {\n    //     return true\n    // }\n    // if (a == b) && (b == c)\
    \ {\n    //     return true\n    // }\n    // if (a == b) && (b < c) {\n    //\
    \     \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmp2ojtlk4i.rs:17:5\n\
    \   |\n10 |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                                            ---- expected\
    \ `bool` because of this return type\n...\n17 | /     if b > a {\n18 | |     \
    \    return right_angle_triangle(a, b, b)\n19 | |     }\n   | |_____^ expected\
    \ `bool`, found `()`\n   |\n   = note: `if` expressions without `else` evaluate\
    \ to `()`\n   = help: consider adding an `else` block that evaluates to the expected\
    \ type\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\t// If the sum of any two sides is greater than the third side\n\t// then\
    \ it is not right-angled.\n\ta > c || b > c || a + b > c\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqvr2uun8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < 0 || b < 0 || c < 0 {\n        return false;\n    }\n    if b\
    \ > c {\n        return true;\n    }\n    if a == 0 || c == 0 {\n        return\
    \ false;\n    }\n    let mut rad = (b - a).abs();\n    if rad < (c - a).abs()\
    \ {\n        rad = rad + c.abs();\n    }\n    rad <= 90 && (rad % 360 != 0 ||\
    \ rad != rad)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n \
    \   assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc1k0ck66.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sum = 0i32;\n    sum += a;\n    sum += b;\n    sum += c;\n  \
    \  if sum % 2 == 0i32 {\n        true\n    } else {\n        false\n    }\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9gmb8bu9.rs:12:12\n   |\n\
    12 |     sum += a;\n   |            ^ expected `i32`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `i32`\n  --> /tmp/tmp9gmb8bu9.rs:12:9\n   |\n12\
    \ |     sum += a;\n   |         ^^ no implementation for `i32 += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `i32`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9gmb8bu9.rs:13:12\n   |\n13 |     sum += b;\n   |     \
    \       ^ expected `i32`, found `isize`\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `i32`\n  --> /tmp/tmp9gmb8bu9.rs:13:9\n   |\n13 |     sum += b;\n   |   \
    \      ^^ no implementation for `i32 += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `i32`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9gmb8bu9.rs:14:12\n\
    \   |\n14 |     sum += c;\n   |            ^ expected `i32`, found `isize`\n\n\
    error[E0277]: cannot add-assign `isize` to `i32`\n  --> /tmp/tmp9gmb8bu9.rs:14:9\n\
    \   |\n14 |     sum += c;\n   |         ^^ no implementation for `i32 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `i32`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n        "
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut d = a * c - b * b;\n    if d < 0 {\n        return false;\n \
    \   }\n    let mut s = b * a + c * c;\n    if s <= 0 {\n        return false;\n\
    \    }\n    d /= s;\n    d < 1.0 && (a == b * d - c || a == c - b * d);\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0o4w88l.rs:20:9\n   |\n\
    20 |     d < 1.0 && (a == b * d - c || a == c - b * d);\n   |         ^^^ expected\
    \ `isize`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpt0o4w88l.rs:10:58\n   |\n10 | fn right_angle_triangle(a: isize, b: isize,\
    \ c: isize) -> bool {\n   |    --------------------                          \
    \        ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n...\n20 |     d < 1.0 &&\
    \ (a == b * d - c || a == c - b * d);\n   |                                  \
    \                - help: remove this semicolon\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2.0\n    let mut b = b / 2.0\n    let mut c = c / 2.0\n\
    \    let mut area = a * b + c * b;\n\n    let mut discriminant = (a * b) - (b\
    \ * c);\n\n    if discriminant < 0.0{\n        return false;\n    }\n\n    while\
    \ discriminant != 0.0{\n        discriminant = discriminant * discriminant;\n\
    \        area = area + discriminant;\n        b = b - discriminant;\n        c\
    \ = c - discriminant;\n    }\n\n    if area < 0.0{\n        return false;\n  \
    \  }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpslny57gi.rs:11:24\n\
    \   |\n11 |     let mut a = a / 2.0\n   |                        ^ help: add `;`\
    \ here\n12 |     let mut b = b / 2.0\n   |     --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmpslny57gi.rs:12:24\n   |\n12\
    \ |     let mut b = b / 2.0\n   |                        ^ help: add `;` here\n\
    13 |     let mut c = c / 2.0\n   |     --- unexpected token\n\nerror: expected\
    \ `;`, found keyword `let`\n  --> /tmp/tmpslny57gi.rs:13:24\n   |\n13 |     let\
    \ mut c = c / 2.0\n   |                        ^ help: add `;` here\n14 |    \
    \ let mut area = a * b + c * b;\n   |     --- unexpected token\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpslny57gi.rs:11:19\n   |\n\
    11 |     let mut a = a / 2.0\n   |                   ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpslny57gi.rs:12:19\n\
    \   |\n12 |     let mut b = b / 2.0\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpslny57gi.rs:13:19\n\
    \   |\n13 |     let mut c = c / 2.0\n   |                 "
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a >= b {\n        if b >= c {\n            return true;\n        }\
    \ else {\n            return false;\n        }\n    } else {\n        if c >=\
    \ b {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6kqbddym.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - ((2 * a) * (c - b))\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp828agp_k.rs:11:5\n   |\n\
    10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |   \
    \                                                       ---- expected `bool` because\
    \ of return type\n11 |     (b * b) - ((2 * a) * (c - b))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a >= b && (a >= c || (a == c && (b == c || b == a - c)))\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi3_lm3em.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut counter = a;\n    let mut counter2 = b;\n    let mut counter3\
    \ = c;\n    while counter < counter2 {\n        if counter3 >= counter2 {\n  \
    \          counter2 += counter;\n        }\n        else {\n            counter2\
    \ += counter3;\n        }\n        counter += 1;\n        counter3 += 1;\n   \
    \ }\n    if counter2 > counter3 {\n        return false;\n    }\n    else {\n\
    \        return true;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sides = vec![];\n    sides.push(a);\n    sides.push(b);\n   \
    \ sides.push(c);\n    \n    let mut a1 = (sides[0] + sides[1] + sides[2]) / 3;\n\
    \    let mut b1 = (sides[0] + sides[2] - sides[1]) / 3;\n    let mut c1 = (sides[1]\
    \ - sides[0] - sides[2]) / 3;\n    \n    while a1 > b1 || a1 > c1 {\n        if\
    \ a1 > b1 {\n            a1 -= b1;\n        } else {\n            a1 -= c1;\n\
    \        }\n        sides.shift();\n    }\n    while b1 > c1 || b1 > a1 {\n  \
    \      if b1 > c1 {\n            b1 -= c1;\n        } else {\n            b1 -=\
    \ a1;\n        }\n        sides.shift();\n    }\n    while c1 > a1 || c1 > b1\
    \ {\n        if c1 > a1 {\n            c1 -= a1;\n        } else {\n         \
    \   c1 -= b1;\n        }\n        sides.shift();\n    }\n    \n    if sides.len()\
    \ == 3 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `shift` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmpans7lboa.rs:26:15\n   |\n26 |         sides.shift();\n\
    \   |               ^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no\
    \ method named `shift` found for struct `Vec<isize>` in the current scope\n  -->\
    \ /tmp/tmpans7lboa.rs:34:15\n   |\n34 |         sides.shift();\n   |         \
    \      ^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named\
    \ `shift` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpans7lboa.rs:42:15\n\
    \   |\n42 |         sides.shift();\n   |               ^^^^^ method not found\
    \ in `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a2 = a * a;\n    let b2 = b * b;\n    let c2 = c * c;\n    let det\
    \ = a2 + b2 + c2;\n    \n    if det < 0 {\n        return false;\n    }\n    \n\
    \    det < sqrt::sqrt(a2 + b2 + c2)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sqrt`\n\
    \  --> /tmp/tmpgs3fgcv4.rs:20:11\n   |\n20 |     det < sqrt::sqrt(a2 + b2 + c2)\n\
    \   |           ^^^^ use of undeclared crate or module `sqrt`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    \n\
    \    (a * b) % c == 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxwt7h4f6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && (a + b == c || a + c == b || b + c == a)\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnmukzln3.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b) >= c && (a + c) >= b && (b + c) >= a\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppck8g6do.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    c < b || c < a\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpx9vtot8x.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a==b {\n        if b==c {\n            true\n        } else {\n  \
    \          false\n        }\n    } else {\n        false\n    }\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwgahb_yz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmtdiucz9.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0q69cs5f.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0q69cs5f.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ac = abs(a - c);\n    let bc = abs(b - c);\n    let ad = abs(a -\
    \ d);\n    let bd = abs(b - d);\n    let a = min(ac, bc, ad);\n    let b = min(bc,\
    \ bd, ad);\n    if a == b {\n        return a > c;\n    }\n    else {\n      \
    \  let c = min(ac, bc);\n        let d = min(bc, bd);\n        if c+d == a+b {\n\
    \            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp9sq5hw4l.rs:11:14\n\
    \   |\n11 |     let ac = abs(a - c);\n   |              ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp9sq5hw4l.rs:12:14\n\
    \   |\n12 |     let bc = abs(b - c);\n   |              ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp9sq5hw4l.rs:13:14\n\
    \   |\n13 |     let ad = abs(a - d);\n   |              ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmp9sq5hw4l.rs:13:22\n\
    \   |\n13 |     let ad = abs(a - d);\n   |                      ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find function\
    \ `abs` in this scope\n  --> /tmp/tmp9sq5hw4l.rs:14:14\n   |\n14 |     let bd\
    \ = abs(b - d);\n   |              ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `d` in this scope\n  --> /tmp/tmp9sq5hw4l.rs:14:22\n   |\n\
    14 |     let bd = abs(b - d);\n   |                      ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find function `min`\
    \ in this scope\n  --> /tmp/tmp9sq5hw4l.rs:15:13\n   |\n15 |     let a = min(ac,\
    \ bc, ad);\n   |             ^^^\n...\n32 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n   |\nhelp: a function with a similar name\
    \ exists\n   |\n15 |     let a = main(ac, bc, ad);\n   |             ~~~~\nhelp:\
    \ consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]:\
    \ cannot find function `min` in this scope\n  --> /tmp/tmp9sq5hw4l.rs:16:13\n\
    \   |\n16 |     let b = min(bc, bd, ad);\n   |             ^^^\n...\n32 | fn main()\
    \ {\n   | --------- similarly named function `main` defined here\n   |\nhelp:\
    \ a function with a similar name exists\n   |\n16 |     let b = main(bc, bd, ad);\n\
    \   |             ~~~~\nhelp: consider importing this function\n   |\n1  | use\
    \ std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n\
    \  --> /tmp/tmp9sq5hw4l.rs:21:17\n   |\n21 |         let c = min(ac, bc);\n  \
    \ |              "
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() >= (c - b).abs()\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbqav08ol.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b + c && b < a + c && a+b > c && b+c > a\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdl756zco.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (c-a)*(c-a)+(b-c)*(b-c)+(a-c)*(a-c) >= 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpivlh1h34.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: implement this function\n    return false;\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe5d2512a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b * b - c).abs() && (b - a).abs() == (b - c).abs()\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0um7345f.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    \n    let mut left_of_a = a + a / 2;\n    let mut right_of_a = a - a\
    \ / 2;\n    let mut left_of_b = b + b / 2;\n    let mut right_of_b = b - b / 2;\n\
    \    let mut left_of_c = c + c / 2;\n    let mut right_of_c = c - c / 2;\n\n \
    \   \n    if a > b and a > c {\n        if b > c {\n            left_of_a = a\
    \ + a / 2;\n            right_of_a = a - a / 2;\n            left_of_b = b + b\
    \ / 2;\n            right_of_b = b - b / 2;\n            left_of_c = c + c / 2;\n\
    \            right_of_c = c - c / 2;\n        }\n        else {\n            left_of_a\
    \ = a + a / 2;\n            right_of_a = a - a / 2;\n            left_of_b = b\
    \ + b / 2;\n            right_of_b = b - b / 2;\n            left_of_c = c;\n\
    \            right_of_c = c - c / 2;\n        }\n    }\n    else {\n        if\
    \ b > c {\n            left_of_a = a;\n            right_of_a = a - a / 2;\n \
    \           left_of_b = b - b / 2;\n            right_of_b = b + b / 2;\n    \
    \        left_of_c = c;\n            right_of_c = c - c / 2;\n        }\n    \
    \    else {\n            left_of_a = a;\n            right_of_a = a - a / 2;\n\
    \            left_of_b = b + b / 2;\n            right_of_b = b - b / 2;\n   \
    \         left_of_c = c - c / 2;\n            right_of_c = c;\n        }\n   \
    \ }\n\n    right_of_a + right_of_c + right_of_b == left_of_a\n            && right_of_a\
    \ + right_of_b + right_of_c == left_of_b\n            && right_of_a + right_of_c\
    \ + right_of_b == left_of_c\n            && left_of_a + right_of_b + right_of_c\
    \ == left_of_c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmpyuibp174.rs:20:14\n\
    \   |\n20 |     if a > b and a > c {\n   |              ^^^ help: use `&&` to\
    \ perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP,\
    \ `&&` and `||` are used for logical operators\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet u: isize = (a * b) - c;\n\tlet v: isize = (b * c) - a;\n\tif u > 0\
    \ || v > 0 {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqyb5nb2r.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuu49rn6l.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpouqe48_o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    if a < b\
    \ {\n        if b < c {\n            if a < c {\n                return true;\n\
    \            }\n        }\n    }\n    else {\n        if a < c {\n           \
    \ if b < c {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpesml_uqx.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    c > b && a * c - b * a >= 0 && a * a + b * b < c * b\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8_qzrx2t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a * b) + (c * c) > 0 \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp36fl_5a6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Return true when one of the triangle sides is a right angle or 90\
    \ degree\n    (a, b, c) == (a, b, c) || \n    (b, c, a) == (b, c, a) || \n   \
    \ (c, a, b) == (c, a, b)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8iop2ero.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let d = b * b - 4 * a * c;\n    d < 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx1ljy3sn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a * b) <= ((a + b) * c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps6ms5s9b.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a = a as f64;\n    let b = b as f64;\n    let c = c as f64;\n   \
    \ (b - a).abs() <= (c - b).abs() / 2.\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj9i910qs.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuu49rn6l.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c + b {\n        return false;\n    }\n    if a + c > b +\
    \ c {\n        return false;\n    }\n    if b + c > a + c {\n        return false;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1yxmm2bu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a == b as u8 && b == c as u8 && c == (a * a + b * b - c * c) as u8\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr5t7qzb7.rs:11:10\n   |\n\
    11 |     a == b as u8 && b == c as u8 && c == (a * a + b * b - c * c) as u8\n\
    \   |          ^^^^^^^ expected `isize`, found `u8`\n   |\nhelp: you can convert\
    \ a `u8` to an `isize`\n   |\n11 |     a == (b as u8).into() && b == c as u8 &&\
    \ c == (a * a + b * b - c * c) as u8\n   |          +       ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr5t7qzb7.rs:11:26\n   |\n11 |     a == b as\
    \ u8 && b == c as u8 && c == (a * a + b * b - c * c) as u8\n   |             \
    \             ^^^^^^^ expected `isize`, found `u8`\n   |\nhelp: you can convert\
    \ a `u8` to an `isize`\n   |\n11 |     a == b as u8 && b == (c as u8).into() &&\
    \ c == (a * a + b * b - c * c) as u8\n   |                          +       ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr5t7qzb7.rs:11:42\n   |\n11 |\
    \     a == b as u8 && b == c as u8 && c == (a * a + b * b - c * c) as u8\n   |\
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n   |\n\
    11 |     a == b as u8 && b == c as u8 && c == ((a * a + b * b - c * c) as u8).into()\n\
    \   |                                          +                             ++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b + c {\n        return false\n    }\n    \n    if b > c + a {\n\
    \        return false\n    }\n    \n    if c > a + b {\n        return false\n\
    \    }\n    \n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf0n5548s.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (a * b + c * a)\n        == (b * b - a * c)\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp16my6ykq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b, c)\n        .iter()\n        .map(|x| if x > 0 {\n           \
    \ x\n        } else {\n            -x\n        })\n        .product()\n      \
    \  > 180\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize, isize)`\
    \ in the current scope\n  --> /tmp/tmproq28q88.rs:12:10\n   |\n12 |         .iter()\n\
    \   |          ^^^^ method not found in `(isize, isize, isize)`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) &&\n        (a * b + c * a > b * c) &&\n        (a + c >\
    \ b) &&\n        (a + b + c > a)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbw16dwhf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - c).is_some() && (a - b).is_some()\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_some` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5dmcsqm4.rs:11:13\n   |\n11 |     (b - c).is_some() &&\
    \ (a - b).is_some()\n   |             ^^^^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `is_some` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5dmcsqm4.rs:11:34\n   |\n11 |     (b - c).is_some() &&\
    \ (a - b).is_some()\n   |                                  ^^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a <= b + c &&\n    a >= b - c &&\n    a <= c - b\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6ocja15h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let is_right_angled: bool = a > b + c;\n    if is_right_angled {\n  \
    \      if b - c > a {\n            if a + c > b {\n                if a + b >\
    \ c {\n                    return true;\n                } else {\n          \
    \          return false;\n                }\n            } else {\n          \
    \      return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvo8xctd3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b == 0 {\n        return false\n    }\n    if c == 0 {\n        return\
    \ false\n    }\n    \n    // Use Modulo (%) to get the remainder\n    \n    //\
    \ If the three sides form a right angle triangle, return true\n    // If the three\
    \ sides do not form a right angle triangle, return false\n    return ((a - b %\
    \ a == 0 && b - c % b == 0 && c - a % c == 0) || \n            (a - b % a == 0\
    \ && b - c % b == 0 && c - a % c != 0))\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptrtibyek.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet mut min_len = (a < b) ? a : b;\n\tlet mut max_len = (a < b) ? b : a;\n\
    \n\tif c < min_len {\n\t\tmin_len = c;\n\t}\n\n\tif c > max_len {\n\t\tmax_len\
    \ = c;\n\t}\n\n\tmin_len == max_len\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpxd1hvzip.rs:11:30\n   |\n11 |     let mut min_len = (a < b) ? a\
    \ : b;\n   |                                 ^ expected one of `.`, `;`, `?`,\
    \ `else`, or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b - a < c {\n        false\n    } else if b - a > c {\n        true\n\
    \    } else {\n        if a == 0 {\n            false\n        } else if b ==\
    \ 0 {\n            true\n        } else {\n            a > 0 && b > 0 && c > 0\
    \ && a * b > c\n        }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpruy7wtst.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  if a == 0 || b == 0 || c == 0 || a + b > c {\n    false\n  } else {\n \
    \   (a + b == c) && (a + b > b)\n  }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3huxudoi.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sum = a*a + b*b + c*c;\n    if sum <= 0 {\n        return false;\n\
    \    }\n    if a*a == b*b {\n        // if two angles are equal, the triangle\
    \ is right angle\n        return true;\n    }\n    if b*b == c*c {\n        //\
    \ if two angles are equal, the triangle is right angle\n        return true;\n\
    \    }\n\n    // if two angles are not equal, the angle is right angle\n    sum\
    \ /= 4.0;\n    return fabs(a - b) <= sum && fabs(a - c) <= sum && fabs(a - b)\
    \ <= sum;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fabs` in this scope\n  --> /tmp/tmpnpkkw22o.rs:26:12\n\
    \   |\n26 |     return fabs(a - b) <= sum && fabs(a - c) <= sum && fabs(a - b)\
    \ <= sum;\n   |            ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `fabs` in this scope\n  --> /tmp/tmpnpkkw22o.rs:26:34\n   |\n\
    26 |     return fabs(a - b) <= sum && fabs(a - c) <= sum && fabs(a - b) <= sum;\n\
    \   |                                  ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fabs` in this scope\n  --> /tmp/tmpnpkkw22o.rs:26:56\n\
    \   |\n26 |     return fabs(a - b) <= sum && fabs(a - c) <= sum && fabs(a - b)\
    \ <= sum;\n   |                                                        ^^^^ not\
    \ found in this scope\n\nerror[E0277]: cannot divide-assign `isize` by `{float}`\n\
    \  --> /tmp/tmpnpkkw22o.rs:25:9\n   |\n25 |     sum /= 4.0;\n   |         ^^ no\
    \ implementation for `isize /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n           \
    \  <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n             <f64\
    \ as DivAssign>\n             <i128 as DivAssign<&i128>>\n             <i128 as\
    \ DivAssign>\n             <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n\
    \           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || (a + c > b || (a + b > c))\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxk08w68o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a - b > 0;\n    let mut b = b - c > 0;\n    let mut c = c\
    \ - a > 0;\n    while a + b + c > 0 {\n        if a > 0 && b > 0 && c > 0 {\n\
    \            return false;\n        }\n        if a > 0 && b > 0 && c <= 0 {\n\
    \            a = a - 1;\n        }\n        if a > 0 && b <= 0 && c <= 0 {\n \
    \           b = b - 1;\n        }\n        if a <= 0 && b > 0 && c <= 0 {\n  \
    \          c = c - 1;\n        }\n        if a <= 0 && b <= 0 && c > 0 {\n   \
    \         a = a - 1;\n        }\n    }\n    return true;\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `bool` from `isize`\n  --> /tmp/tmpif0v3_9p.rs:13:19\n\
    \   |\n13 |     let mut c = c - a > 0;\n   |                   ^ no implementation\
    \ for `isize - bool`\n   |\n   = help: the trait `Sub<bool>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0369]: cannot add `bool` to `bool`\n  --> /tmp/tmpif0v3_9p.rs:14:13\n\
    \   |\n14 |     while a + b + c > 0 {\n   |           - ^ - bool\n   |       \
    \    |\n   |           bool\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpif0v3_9p.rs:15:16\n\
    \   |\n15 |         if a > 0 && b > 0 && c > 0 {\n   |                ^ expected\
    \ `bool`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpif0v3_9p.rs:15:25\n\
    \   |\n15 |         if a > 0 && b > 0 && c > 0 {\n   |                       \
    \  ^ expected `bool`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpif0v3_9p.rs:15:34\n\
    \   |\n15 |         if a > 0 && b > 0 && c > 0 {\n   |                       \
    \           ^ expected `bool`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpif0v3_9p.rs:18:16\n   |\n18 |         if a > 0 && b > 0 && c <=\
    \ 0 {\n   |                ^ expected `bool`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpif0v3_9p.rs:18:25\n   |\n18 |         if a > 0 && b > 0\
    \ && c <= 0 {\n   |                         ^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpif0v3_9p.rs:18:35\n   |\n18 |\
    \         if a > 0 && b > 0 && c <= 0 {\n   |                                \
    \   ^ expected `bool`, found integer\n\nerror[E0369]: cannot subtract `{integer}`\
    \ from `bool`\n  --> /tmp/tmpif0v3_9p.rs:19:19\n   |\n19 |             a = a -\
    \ 1;\n   |                 - ^ - {integer}\n   |                 |\n   |     \
    \            bool\n\ne"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a * b > c || (c * b - a * a) == b * a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt5_nhwjd.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet ab = a - b;\n\tlet ac = c - a;\n\tlet bc = b - c;\n\tab.abs() >= ac.abs()\
    \ && ab.abs() >= bc.abs() && ab.abs() == bc.abs() == ab.abs()\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpwhfp3o84.rs:14:59\n\
    \   |\n14 |     ab.abs() >= ac.abs() && ab.abs() >= bc.abs() && ab.abs() == bc.abs()\
    \ == ab.abs()\n   |                                                          \
    \    ^^          ^^\n   |\nhelp: split the comparison into two\n   |\n14 |   \
    \  ab.abs() >= ac.abs() && ab.abs() >= bc.abs() && ab.abs() == bc.abs() && bc.abs()\
    \ == ab.abs()\n   |                                                          \
    \                +++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwhfp3o84.rs:14:74\n\
    \   |\n14 |     ab.abs() >= ac.abs() && ab.abs() >= bc.abs() && ab.abs() == bc.abs()\
    \ == ab.abs()\n   |                                                          \
    \                   ^^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // The formula is right-angle = ax + by + cz where a,b,c\n    // are\
    \ the lengths of the sides of the triangle with x axis pointing to the\n    //\
    \ origin. \n    let x = (a * a + b * b + c * c) / (2.0 * b);\n    // Since we\
    \ know that the sum is positive, the sign of the result can be \n    // determined\
    \ by comparing the sign of x/b to the sign of c/b.\n    let sign = (x / b).signum()\
    \ as isize;\n    // Now we check if the sign is opposite to the sign of x/b\n\
    \    let signOfX = x.signum() as isize;\n    if signOfX < sign {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpug0zjkg_.rs:14:44\n\
    \   |\n14 |     let x = (a * a + b * b + c * c) / (2.0 * b);\n   |           \
    \                                 ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (b + c > a) && (c + a > b)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptig_in6t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n    if\
    \ a > c {\n        swap(&mut a, &mut c);\n    }\n    if b > c {\n        swap(&mut\
    \ b, &mut c);\n    }\n    if a > b {\n        swap(&mut a, &mut b);\n    }\n \
    \   if a == b {\n        return false;\n    }\n    if a == c {\n        return\
    \ b == 0;\n    }\n    let mut delta = a * b - c * b;\n    if delta < 0 {\n   \
    \     return false;\n    }\n    delta /= 2.0;\n    let mut rootA = c + delta;\n\
    \    let mut rootB = b - delta;\n    if rootA <= 0 {\n        rootA = 1;\n   \
    \ }\n    if rootB <= 0 {\n        rootB = 1;\n    }\n    if rootA > rootB {\n\
    \        return false;\n    }\n    let rootC = a + delta;\n    let mut rootD =\
    \ b + delta;\n    if rootC <= 0 {\n        rootC = 1;\n    }\n    if rootD <=\
    \ 0 {\n        rootD = 1;\n    }\n    if rootC > rootD {\n        return false;\n\
    \    }\n    if rootA == rootB && rootB == rootC && rootC == rootD {\n        return\
    \ true;\n    }\n    let mut swap = false;\n    if rootA < rootC {\n        if\
    \ rootB < rootD {\n            if rootA < rootB {\n                swap = true;\n\
    \            }\n        }\n    }\n    if swap {\n        swap(&mut rootA, &mut\
    \ rootC);\n        swap(&mut rootB, &mut rootD);\n    }\n    let mut rootABC =\
    \ rootA * rootB * rootC;\n    let mut rootABD = rootA * rootB * rootD;\n    let\
    \ mut rootACD = rootA * rootC * rootD;\n    let mut rootBCD = rootB * rootC *\
    \ rootD;\n    let mut rootDAC = rootD * rootA * rootC;\n    let mut rootDCB =\
    \ rootD * rootB * rootB;\n    let mut rootDCA = rootD * rootC * rootA;\n    let\
    \ mut rootACB = rootA * rootC * rootB;\n    if rootABC < rootACD && rootACD <\
    \ rootBCD\n        && rootABC < rootDCA && rootDCA < rootBCD\n        \n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpvt16yie8.rs:85:1\n   |\n\
    82 |     if rootABC < rootACD && rootACD < rootBCD\n   |     -- this `if` expression\
    \ has a condition, but no block\n...\n85 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find function `swap` in this scope\n  --> /tmp/tmpvt16yie8.rs:18:9\n\
    \   |\n18 |         swap(&mut a, &mut c);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpvt16yie8.rs:21:9\n   |\n21 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpvt16yie8.rs:24:9\n   |\n24 |         swap(&mut a, &mut b);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmpvt16yie8.rs:36:11\n\
    \   |\n36 |     delta /= 2.0;\n   |           ^^ no implementation for `isize\
    \ /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0618]: expected function, found `bool`\n  --> /tmp/tmpvt16yie8.rs:71:9\n\
    \   |\n62 |     let mut swap = false;\n   |         -------- `swap` has type `bool`\n\
    ...\n71 |         swap(&mut rootA, &mut rootC);\n   |         ^^^^------------------------\n\
    \   |         |\n   |         call expression requires function\n\nerror[E0618]:\
    \ expected function, found `"
  stdout: ''
  timestamp: 1659978474
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\ta == b && b == c || a == c && b == c || a == b || b == c\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg5qyaygt.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a <= 0 || b <= 0 || c <= 0 {\n        return false;\n    }\n\n   \
    \ let d = b * b - 4 * a * c;\n\n    if d == 0 {\n        return false;\n    }\n\
    \n    let mut discriminant = b * b + 4 * a * c;\n\n    if discriminant > 0 {\n\
    \        discriminant = sqrt(discriminant);\n    }\n\n    let x = - b / discriminant;\n\
    \    let y = - c / discriminant;\n\n    let x1 = x * c - y * b;\n    let x2 =\
    \ x * b + y * c;\n\n    x1 < 0 && (x1 < 0 || x1 < x2)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpblaxs8gn.rs:24:24\n\
    \   |\n24 |         discriminant = sqrt(discriminant);\n   |                 \
    \       ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a * a + b * b == c * c {\n        if std::fmod(a, 2.0) == 1.0 {\n\
    \            if std::fmod(b, 2.0) == 1.0 {\n                if std::fmod(c, 2.0)\
    \ == 1.0 {\n                    // triangle is right angle\n                 \
    \   return true\n                }\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fmod` in crate `std`\n  --> /tmp/tmp_xmdxc90.rs:12:17\n\
    \   |\n12 |         if std::fmod(a, 2.0) == 1.0 {\n   |                 ^^^^ not\
    \ found in `std`\n\nerror[E0425]: cannot find function `fmod` in crate `std`\n\
    \  --> /tmp/tmp_xmdxc90.rs:13:21\n   |\n13 |             if std::fmod(b, 2.0)\
    \ == 1.0 {\n   |                     ^^^^ not found in `std`\n\nerror[E0425]:\
    \ cannot find function `fmod` in crate `std`\n  --> /tmp/tmp_xmdxc90.rs:14:25\n\
    \   |\n14 |                 if std::fmod(c, 2.0) == 1.0 {\n   |              \
    \           ^^^^ not found in `std`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa5qqb3z_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b, c) == (3, 5, 2) || (a, b, c) == (3, 4, 5) || (a, b, c) == (5,\
    \ 4, 3)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpluv3ps0z.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a != b\n        && a != c\n        && b != c\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp14xmt9gb.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    assert!(b <= c);\n    assert!(c <= a);\n    let mut sum = 0;\n    \n\
    \    let x = a;\n    let y = b;\n    let z = c;\n    \n    if x > y {\n      \
    \  sum += x;\n        x = z;\n    }\n    if x > z {\n        sum += x;\n     \
    \   x = y;\n    }\n    \n    if y > z {\n        sum += y;\n        y = z;\n \
    \   }\n    sum += y;\n    \n    sum > x\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `x`\n  --> /tmp/tmpd9ilnmz4.rs:21:9\n\
    \   |\n15 |     let x = a;\n   |         -\n   |         |\n   |         first\
    \ assignment to `x`\n   |         help: consider making this binding mutable:\
    \ `mut x`\n...\n21 |         x = z;\n   |         ^^^^^ cannot assign twice to\
    \ immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable\
    \ `x`\n  --> /tmp/tmpd9ilnmz4.rs:25:9\n   |\n15 |     let x = a;\n   |       \
    \  -\n   |         |\n   |         first assignment to `x`\n   |         help:\
    \ consider making this binding mutable: `mut x`\n...\n25 |         x = y;\n  \
    \ |         ^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot\
    \ assign twice to immutable variable `y`\n  --> /tmp/tmpd9ilnmz4.rs:30:9\n   |\n\
    16 |     let y = b;\n   |         -\n   |         |\n   |         first assignment\
    \ to `y`\n   |         help: consider making this binding mutable: `mut y`\n...\n\
    30 |         y = z;\n   |         ^^^^^ cannot assign twice to immutable variable\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b, c) > (c, b, a)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0vnrhbvz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b > a && c > b {\n        return false;\n    } else if b > c && a\
    \ > c {\n        return false;\n    } else {\n        return true;\n    }\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbq1hu7cc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a * b > c * c {\n        if b * c > a * a {\n            return false;\n\
    \        }\n    } else {\n        if a * c > b * b {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpprbok1k0.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b) < (b, c) && \n    (b, c) < (c, a) &&\n    (c, a) < (a, b)\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp39kwjlh2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b && (b > c || c > a) || (a > b && (c > a || c > b))\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9o_z83tz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let d = b * b - 4 * a * c;\n    if d < 0 {\n        return false;\n \
    \   }\n    let root = (-b + std::sqrt(d)) / (2 * a);\n    if root < 0 {\n    \
    \    return false;\n    }\n    d / std::sqrt(root) < -0.707\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in crate `std`\n  --> /tmp/tmpac17uf1j.rs:15:27\n\
    \   |\n15 |     let root = (-b + std::sqrt(d)) / (2 * a);\n   |              \
    \             ^^^^ not found in `std`\n\nerror[E0425]: cannot find function `sqrt`\
    \ in crate `std`\n  --> /tmp/tmpac17uf1j.rs:19:14\n   |\n19 |     d / std::sqrt(root)\
    \ < -0.707\n   |              ^^^^ not found in `std`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpac17uf1j.rs:19:27\n   |\n19 |     d / std::sqrt(root) <\
    \ -0.707\n   |                           ^^^^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b - a * c) > 1800\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqylnv580.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let is_right_angle = (a + b > c) && (c - a > b)\n    !is_right_angle\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `!`\n  --> /tmp/tmp03cngv8s.rs:11:52\n   |\n\
    11 |     let is_right_angle = (a + b > c) && (c - a > b)\n   |               \
    \                                     ^ help: add `;` here\n12 |     !is_right_angle\n\
    \   |     - unexpected token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ab = (a + b) as isize;\n    let ac = (a + c) as isize;\n    let bc\
    \ = (b + c) as isize;\n\n    ab == bc || ab == ac || ac == bc\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpue9peuiv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    if\
    \ a + b > c {\n        return false;\n    }\n    if b + c > a {\n        return\
    \ false;\n    }\n    if c + a > b {\n        return false;\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy4lwklrw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > c || b > c || a > b || b > a || c > a || c > b {\n        false\n\
    \    } else {\n        a == b && (a > c || b > c)\n    }\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp34ej9wj2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let d = b - a;\n    let e = c - a;\n    return d >= 0 && e >= 0 && b\
    \ >= a && c >= a;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgj3_t3b0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) || (a + c > b) || (b + c > a) // triangle\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5qwy3ppt.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) == b * b - 4 * c * c\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpx2gfjeyk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) == (c - a) && a + b + c == b + a * c\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpht2nskcu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // if all sides are equal, return true\n    if a == b {\n        if a\
    \ == c {\n            return true\n        }\n        return false;\n    }\n \
    \   // if all sides are equal, return true\n    if a == c {\n        if b == c\
    \ {\n            return true\n        }\n        return false;\n    }\n    //\
    \ if all sides are equal, return true\n    if b == c {\n        if a == b {\n\
    \            return true\n        }\n        return false;\n    }\n    // if all\
    \ sides are equal, return true\n    if a == c && b == c {\n        if b == a {\n\
    \            return true\n        }\n        return false;\n    }\n    // return\
    \ false if one side is 90deg\n    if a == b {\n        if b == c {\n         \
    \   return false\n        }\n        return true\n    }\n    if a == c {\n   \
    \     if c == a {\n            return false\n        }\n        return true\n\
    \    }\n    // return true if one side is 90deg\n    if b == c {\n        if c\
    \ == a {\n            return true\n        }\n        return false\n    }\n  \
    \  // return false if one side is 90deg\n    if a == b {\n        if b == c {\n\
    \            return true\n        }\n        return false\n    }\n    if a ==\
    \ c {\n        if c == a {\n            return false\n        }\n        return\
    \ true\n    }\n    // return true if all sides are 90deg\n    if b == c {\n  \
    \      if c == a {\n            return true\n        }\n        return false\n\
    \    }\n    // return false if all sides are 90deg\n    if a == b {\n        if\
    \ b == c {\n            return false\n        }\n        return true\n    }\n\
    \    if a == c {\n        if c == a {\n            return true\n        }\n  \
    \      return false\n    }\n    // return true if one side is 180deg\n    if b\
    \ == c {\n        if c == a {\n            return true\n        }\n        return\
    \ false\n    }\n    // return false if one side is 180deg\n    if a == b {\n \
    \       if b == c {\n            return false\n        }\n        return true\n\
    \    }\n    if a == c {\n        if c == a {\n            return true\n      \
    \  }\n        return false\n    }\n    // return true if all sides are 180deg\n\
    \    if b == c {\n        if c == a {\n            return false\n        }\n \
    \       return true\n    }\n    // return false if all sides are 180deg\n    if\
    \ a == b {\n        if b == c {\n            return true\n        }\n        return\
    \ false\n    }\n    if a == c {\n        if c == a {\n            return false\n\
    \        }\n        return true\n    }\n    // return true if all sides are 0deg\n\
    \    if b == c {\n        if c == a {\n            return true\n        }\n\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7x3sd9hn.rs:153:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n133 |     if b == c {\n    |               - this delimiter\
    \ might not be properly closed...\n...\n138 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n153 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7x3sd9hn.rs:10:58\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |    --------------------         \
    \                         ^^^^ expected `bool`, found `()`\n   |    |\n   |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a.abs() == b.abs() && b.abs() == c.abs() && (a + b + c).abs() == 3\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpshsjvmsw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c) >= (a + b + c) as isize \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwa5zc0v9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b < c {\n        return !left_angle_triangle(a, b, c)\n    } else\
    \ if b > c {\n        return !right_angle_triangle(a, b, c);\n    }\n    if b\
    \ == c {\n        // if b == c, then b is equals to c\n        // if b > c, then\
    \ b is greater than\n        // if b < c, then b is smaller than\n        (b >\
    \ c) ? true : false\n    } else {\n        // if b < c, then b is smaller than\n\
    \        // if b > c, then b is greater than\n        // if b == c, then b is\
    \ equals to c\n        (b > c) ? false : true\n    }\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `true`\n  --> /tmp/tmprgdpk00q.rs:20:19\n   |\n20 |         (b > c) ? true :\
    \ false\n   |                   ^^^^ expected one of `.`, `;`, `?`, `}`, or an\
    \ operator\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found\
    \ keyword `false`\n  --> /tmp/tmprgdpk00q.rs:25:19\n   |\n25 |         (b > c)\
    \ ? false : true\n   |                   ^^^^^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror[E0425]: cannot find function `left_angle_triangle`\
    \ in this scope\n  --> /tmp/tmprgdpk00q.rs:12:17\n   |\n12 |         return !left_angle_triangle(a,\
    \ b, c)\n   |                 ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b - a == c || c - b == a {\n        return true;\n    }\n    else\
    \ {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp20pjrxb5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a - b as isize;\n    let mut b = b - c as isize;\n    let\
    \ mut c = c - a as isize;\n    if a + b > c {\n        a = c;\n        b = a -\
    \ b as isize;\n    }\n    a + b > c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc07rqlvg.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a <= 0 || b <= 0 || c <= 0 ||\n        (b - a) * (c - b) <= 0 ||\n\
    \        (b - a) * (a - c) <= 0\n    {\n        return false;\n    }\n    let\
    \ mut flag = true;\n    let mut a_squared = a * a;\n    let mut b_squared = b\
    \ * b;\n    let mut c_squared = c * c;\n    if c_squared > a_squared + b_squared\
    \ {\n        return false;\n    }\n    for j in range(a) {\n        if j > b {\n\
    \            break;\n        }\n        if flag {\n            if (a_squared -\
    \ b_squared + c_squared + j * (j - 1)) / j * (j - 1) < 0 {\n                flag\
    \ = false;\n                break;\n            }\n        } else {\n        \
    \    if (a_squared - b_squared - c_squared - j * (j - 1)) / j * (j - 1) < 0 {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpticx3dpr.rs:24:14\n\
    \   |\n24 |     for j in range(a) {\n   |              ^^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b, c) < (b, c, a) || (b, a, c) < (a, b, c)\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppt14lt0s.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let is_right_angle = (a * b) + (b * c) - (c * a) == 0;\n    is_right_angle\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd2a49045.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a = a.min(b.min(c));\n    let b = b.min(a);\n    let c = c.min(b);\n\
    \    a > 0 && b > 0 && c > 0 && a * b > c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk0xhod8k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (a * c) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprfvl1t3d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b and b > c or a > c and c > b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmp8y4oe4se.rs:11:11\n\
    \   |\n11 |     a > b and b > c or a > c and c > b\n   |           ^^^ help: use\
    \ `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python\
    \ and PHP, `&&` and `||` are used for logical operators\n\nerror: `or` is not\
    \ a logical operator\n  --> /tmp/tmp8y4oe4se.rs:11:21\n   |\n11 |     a > b and\
    \ b > c or a > c and c > b\n   |                     ^^ help: use `||` to perform\
    \ logical disjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and\
    \ `||` are used for logical operators\n\nerror: `and` is not a logical operator\n\
    \  --> /tmp/tmp8y4oe4se.rs:11:30\n   |\n11 |     a > b and b > c or a > c and\
    \ c > b\n   |                              ^^^ help: use `&&` to perform logical\
    \ conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||`\
    \ are used for logical operators\n\nerror: aborting due to 3 previous errors\n\
    \n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sum = a * b * c;\n    if sum >= 0 {\n        sum = sum - a +\
    \ b + c;\n        sum = ((-a * a - sum) / b) / 2;\n        sum < (2 * a - b -\
    \ c) / a\n    } else {\n        sum = ((-a * a + sum) / b) / 2;\n        sum =\
    \ ((-a * a - sum) / b) / 2;\n        sum < (2 * a - b - c) / a\n    }\n    return\
    \ sum == 0;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n   \
    \ assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp8w6m_cv.rs:15:9\n   |\n\
    12 | /     if sum >= 0 {\n13 | |         sum = sum - a + b + c;\n14 | |      \
    \   sum = ((-a * a - sum) / b) / 2;\n15 | |         sum < (2 * a - b - c) / a\n\
    \   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `bool`\n...  |\n\
    19 | |         sum < (2 * a - b - c) / a\n20 | |     }\n   | |_____- expected\
    \ this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n20 |   \
    \  };\n   |      +\nhelp: you might have meant to return this value\n   |\n15\
    \ |         return sum < (2 * a - b - c) / a;\n   |         ++++++           \
    \               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp8w6m_cv.rs:19:9\n\
    \   |\n12 | /     if sum >= 0 {\n13 | |         sum = sum - a + b + c;\n14 | |\
    \         sum = ((-a * a - sum) / b) / 2;\n15 | |         sum < (2 * a - b - c)\
    \ / a\n...  |\n19 | |         sum < (2 * a - b - c) / a\n   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `bool`\n20 | |     }\n   | |_____- expected this to be\
    \ `()`\n   |\nhelp: consider using a semicolon here\n   |\n20 |     };\n   | \
    \     +\nhelp: you might have meant to return this value\n   |\n19 |         return\
    \ sum < (2 * a - b - c) / a;\n   |         ++++++                          +\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b + c == 5\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps71u3wrj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet d = b*b - 4*a*c; // Find the determinant\n\td > 0\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8wbdsgzc.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0\n        || a + b + c != 3\n        ||\
    \ a - b + c != 3\n        || a - b - c != 3\n        || a + b - c != 3\n    \n\
    \    {\n        return false;\n    }\n\n    if a + b > c {\n        return b >\
    \ a;\n    }\n\n    if a + c > b {\n        return c > a;\n    }\n\n    if b +\
    \ c > a {\n        return a > b;\n    }\n    \n    if a + b > c {\n        return\
    \ b > a;\n    }\n\n    if a + c > b {\n        return c > a;\n    }\n\n    if\
    \ b + c > a {\n        return a > b;\n    }\n\n    // a <= b and b <= c means\
    \ it is a right angle triangle\n    \n    return a < b + c && b < a + c && c <\
    \ a + b;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5g4qipry.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c) == (a - b - c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvbgcizfa.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c) == (sqrt_of_sum(a, b, c) && a == b) || (sqrt_of_sum(a, b,\
    \ c) && b == c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt_of_sum` in this scope\n  --> /tmp/tmp0u_au7zt.rs:11:21\n\
    \   |\n11 |     (a + b + c) == (sqrt_of_sum(a, b, c) && a == b) || (sqrt_of_sum(a,\
    \ b, c) && b == c)\n   |                     ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `sqrt_of_sum` in this scope\n  --> /tmp/tmp0u_au7zt.rs:11:57\n\
    \   |\n11 |     (a + b + c) == (sqrt_of_sum(a, b, c) && a == b) || (sqrt_of_sum(a,\
    \ b, c) && b == c)\n   |                                                     \
    \    ^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp0u_au7zt.rs:11:20\n   |\n11 |     (a + b + c) == (sqrt_of_sum(a,\
    \ b, c) && a == b) || (sqrt_of_sum(a, b, c) && b == c)\n   |                 \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `bool`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a == b == c || a + b > c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpyr3y1dwc.rs:11:7\n\
    \   |\n11 |     a == b == c || a + b > c\n   |       ^^   ^^\n   |\nhelp: split\
    \ the comparison into two\n   |\n11 |     a == b && b == c || a + b > c\n   |\
    \            ++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyr3y1dwc.rs:11:15\n\
    \   |\n11 |     a == b == c || a + b > c\n   |               ^ expected `bool`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet ab = a.abs() as isize;\n\tlet bc = b.abs() as isize;\n\tlet cd = c.abs()\
    \ as isize;\n\n\tlet det = ab * bc - ac * cd;\n\n\tif det == 0 {\n\t\treturn true;\n\
    \t}\n\n\tlet sq = det as isize;\n\tlet a1 = (ab + bc) / sq;\n\tlet a2 = (ac +\
    \ cd) / sq;\n\tlet a0 = a / sq;\n\tlet b1 = b / sq;\n\tlet b2 = c / sq;\n\tlet\
    \ b0 = b / sq;\n\tlet c1 = c / sq;\n\tlet c2 = d / sq;\n\tlet c0 = c / sq;\n\t\
    let d1 = d / sq;\n\n\tlet denom = ab * a2 + ac * c1;\n\tif denom != 0 {\n\t\t\
    return a1 * b2 > a2 * b1;\n\t} else {\n\t\treturn b1 * c2 > b2 * c1;\n\t}\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ac` in this scope\n  --> /tmp/tmpkzvzwghh.rs:15:22\n\
    \   |\n15 |     let det = ab * bc - ac * cd;\n   |                         ^^\
    \ help: a local variable with a similar name exists: `a`\n\nerror[E0425]: cannot\
    \ find value `ac` in this scope\n  --> /tmp/tmpkzvzwghh.rs:23:12\n   |\n23 | \
    \    let a2 = (ac + cd) / sq;\n   |               ^^ help: a local variable with\
    \ a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this scope\n\
    \  --> /tmp/tmpkzvzwghh.rs:29:11\n   |\n29 |     let c2 = d / sq;\n   |      \
    \        ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `d` in this scope\n  --> /tmp/tmpkzvzwghh.rs:31:11\n   |\n\
    31 |     let d1 = d / sq;\n   |              ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror[E0425]: cannot find value `ac` in this scope\n  -->\
    \ /tmp/tmpkzvzwghh.rs:33:24\n   |\n33 |     let denom = ab * a2 + ac * c1;\n \
    \  |                           ^^ help: a local variable with a similar name exists:\
    \ `a`\n\nerror: aborting due to 5 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let is_right_angled = (a * b * c) >= (c * b) - (a * c)\n    \n    if\
    \ is_right_angled {\n        true\n    } else {\n        false\n    }\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpnapgl9bw.rs:11:59\n\
    \   |\n11 |     let is_right_angled = (a * b * c) >= (c * b) - (a * c)\n   | \
    \                                                          ^ help: add `;` here\n\
    12 |     \n13 |     if is_right_angled {\n   |     -- unexpected token\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    \n    // Return false if sides are not valid\n    if a < 0 || b < 0 ||\
    \ c < 0 {\n        return false;\n    }\n\n    // Calculate the area of the triangle\n\
    \    let area = a * b * c;\n\n    // Check if area is greater than 0\n    if area\
    \ < 0 {\n        return false;\n    }\n\n    // Calculate the angle in radians\n\
    \    let angle = (b * b + c * c - a * a) / (2.0 * a * c);\n\n    // Return true\
    \ if in range\n    angle < 0.0 && angle > M_PI\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `M_PI` in this scope\n  --> /tmp/tmpp0gzcii2.rs:29:28\n\
    \   |\n29 |     angle < 0.0 && angle > M_PI\n   |                            ^^^^\
    \ not found in this scope\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n\
    \  --> /tmp/tmpp0gzcii2.rs:26:48\n   |\n26 |     let angle = (b * b + c * c -\
    \ a * a) / (2.0 * a * c);\n   |                                              \
    \  ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 || (a + b + c) == 0 {\n        return false;\n\
    \    }\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c\
    \ % 360;\n    let mut d1 = a - b;\n    let mut d2 = b - c;\n    let mut d3 = c\
    \ - a;\n    if d1 > 180 {\n        d1 -= 360;\n    }\n    if d2 > 180 {\n    \
    \    d2 -= 360;\n    }\n    if d3 > 180 {\n        d3 -= 360;\n    }\n    if d1\
    \ > d2 && d1 > d3 {\n        return true;\n    } else if d2 > d3 {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsrven9x6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Two of the sides equal b\n    if b == c {\n        return false;\n\
    \    }\n    // Three of the sides equal c\n    if a == b {\n        return c ==\
    \ b - 1;\n    }\n    // Three of the sides equal a\n    if a == c {\n        return\
    \ b == c - 1;\n    }\n    // One side equals b\n    if a == b {\n        return\
    \ true;\n    }\n    // Two sides equals a\n    if a == c {\n        return false;\n\
    \    }\n    // One side equals c\n    if a == b {\n        return true;\n    }\n\
    \    // Two sides equals c\n    if a == b {\n        return false;\n    }\n  \
    \  // One side equals a\n    if a == c {\n        return true;\n    }\n    //\
    \ Three sides equals a\n    if b == c {\n        return true;\n    }\n    // Four\
    \ sides equals a\n    if a == b {\n        return true;\n    }\n    // Four sides\
    \ equals c\n    if a == c {\n        return false;\n    }\n    // Four sides equals\
    \ b\n    if b == c {\n        return false;\n    }\n    // Four sides equals a\n\
    \    if a == b {\n        return true;\n    }\n    // Four sides equals c\n  \
    \  if a == c {\n        return false;\n    }\n    // Four sides equals b\n   \
    \ if b == c {\n        return true;\n    }\n    // Four sides equals a\n    if\
    \ a == b {\n        return false;\n    }\n    // Four sides equals c\n    if a\
    \ == c {\n        return false;\n    }\n    // Four sides equals b\n    if b ==\
    \ c {\n        return true;\n    }\n    // Four sides equals a\n    if a == b\
    \ {\n        return true;\n    }\n    // Four sides equals c\n    if a == c {\n\
    \        return false;\n    }\n    // Four sides equals b\n    if b == c {\n \
    \       return true;\n    }\n    // Four sides equals a\n    if a == b {\n   \
    \     return true;\n    }\n    // Four sides equals c\n    if a == c {\n     \
    \   return false;\n    }\n    // Four sides equals b\n    if b == c {\n      \
    \  return true;\n    }\n    // Four sides equals a\n    if a == b {\n        return\
    \ true;\n    }\n    // Four sides equals c\n    if a == c {\n        return false;\n\
    \    }\n    // Four sides equals b\n    if b == c {\n        return true;\n  \
    \  }\n    // Four sides equals a\n    if a == b {\n        return false;\n   \
    \ }\n    // \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmptdm0yv0s.rs:120:5\n\
    \    |\n10  |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    |                                                            ---- expected\
    \ `bool` because of this return type\n...\n120 | /     if a == b {\n121 | |  \
    \       return false;\n122 | |     }\n    | |_____^ expected `bool`, found `()`\n\
    \    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help:\
    \ consider adding an `else` block that evaluates to the expected type\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (c > b)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxg5fl7el.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n    else if b + c > a {\n\
    \        return false;\n    }\n    else if c + a > b {\n        return false;\n\
    \    }\n    else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp57y8nhlm.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut l1 = a < b, b = b, l2 = c < b, c = b, l3 = a < c, c = c, l4 =\
    \ b < c;\n    loop {\n        if l1 && (l2 || l3) { break }\n        if l2 &&\
    \ (l3 || l4) { break }\n        if l1 && !(l2 || l3 || l4) { break }\n       \
    \ if !l1 && !(l2 || l3 || l4) { break }\n        if l3 && (l4 || l2) { break }\n\
    \        if l4 && (l3 || l2) { break }\n        if l3 && !(l4 || l2) { break }\n\
    \        if !l3 && !(l4 || l2) { break }\n        l1 -= 1;\n        l2 -= 1;\n\
    \        l3 -= 1;\n        l4 -= 1;\n    }\n    (l1..=4).all(|x| a <= x && x <=\
    \ c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n\
    \  --> /tmp/tmpmu5ftg8a.rs:11:27\n   |\n11 |     let mut l1 = a < b, b = b, l2\
    \ = c < b, c = b, l3 = a < c, c = c, l4 = b < c;\n   |                       \
    \   -^ expected one of 7 possible tokens\n   |                          |\n  \
    \ |                          help: missing `,`\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  debug_assert!(a <= b + c);\n  debug_assert!(b <= a + c);\n  debug_assert!(c\
    \ <= b + a);\n\n  let mut a: usize = a;\n  let mut b: usize = b;\n  let mut c:\
    \ usize = c;\n\n  while b != 0 {\n    debug_assert_eq!(a, b + c, \"Infinite loop\
    \ on triangle sides.\");\n    a -= 1;\n    b -= 1;\n    c -= 1;\n  }\n  debug_assert!(a\
    \ != 0);\n\n  let mut x = b - a;\n  let mut y = c - b;\n  let mut z = a - c;\n\
    \n  debug_assert!(x == 0 || y == 0 || z == 0, \"Invalid right angle triangle sides.\"\
    );\n  debug_assert!(x >= 0 && y >= 0 && z >= 0, \"Invalid right angle triangle\
    \ sides.\");\n\n  if x > y {\n    debug_assert!(x >= z, \"Invalid right angle\
    \ triangle sides.\");\n    debug_assert!(y > z, \"Invalid right angle triangle\
    \ sides.\");\n    debug_assert!(z > x, \"Invalid right angle triangle sides.\"\
    );\n    debug_assert!(x > 0, \"Invalid right angle triangle sides.\");\n    debug_assert!(y\
    \ > 0, \"Invalid right angle triangle sides.\");\n    debug_assert!(z > 0, \"\
    Invalid right angle triangle sides.\");\n    debug_assert!(x == 0, \"Invalid right\
    \ angle triangle sides.\");\n    debug_assert!(y == 0, \"Invalid right angle triangle\
    \ sides.\");\n    debug_assert!(z == 0, \"Invalid right angle triangle sides.\"\
    );\n    debug_assert!(x > 0, \"Invalid right angle triangle sides.\");\n    debug_assert!(y\
    \ > 0, \"Invalid right angle triangle sides.\");\n    debug_assert!(z > 0, \"\
    Invalid right angle triangle sides.\");\n    debug_assert!(x > 0, \"Invalid right\
    \ angle triangle sides.\");\n    debug_assert!(y > 0, \"Invalid right angle triangle\
    \ sides.\");\n    debug_assert!(z > 0, \"Invalid right angle triangle sides.\"\
    );\n    debug_assert!(x == 0, \"Invalid right angle triangle sides.\");\n    debug_assert!(y\
    \ == 0, \"Invalid right angle triangle sides.\");\n    debug_assert!(z == 0, \"\
    Invalid right angle triangle sides.\");\n    debug_assert!(x > 0, \"Invalid right\
    \ angle triangle sides.\");\n    debug_assert!(y > 0, \"Invalid right angle triangle\
    \ sides.\");\n    debug_assert!(z > 0, \"Invalid right angle triangle sides.\"\
    );\n    debug_assert!(x == 0, \"Invalid right angle tri\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp744cctt3.rs:56:27\n\
    \   |\n56 |       debug_assert!(x == 0, \"Invalid right angle tri\n   |  ___________________________^\n\
    57 | | }\n58 | |\n59 | | fn main() {\n...  |\n71 | |     assert_eq!(candidate(2,\
    \ 2, 10), false);\n72 | | }\n   | |__^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ab = a - b;\n    let ac = c - a;\n\n    // check for 90 degree\n\
    \    if ab == ac {\n        return false\n    }\n    if ab == 0 {\n        return\
    \ true;\n    }\n    if ac == 0 {\n        return false;\n    }\n\n    let rem\
    \ = ab % ac;\n    if rem == 0 {\n        // triangle is right angle\n        return\
    \ true\n    }\n    false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxbkng_n2.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b and b > c and c > a\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmp6ojb4aus.rs:11:11\n\
    \   |\n11 |     a > b and b > c and c > a\n   |           ^^^ help: use `&&` to\
    \ perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP,\
    \ `&&` and `||` are used for logical operators\n\nerror: `and` is not a logical\
    \ operator\n  --> /tmp/tmp6ojb4aus.rs:11:21\n   |\n11 |     a > b and b > c and\
    \ c > a\n   |                     ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut is_right_angle: bool;\n    if b > c {\n        is_right_angle\
    \ = false;\n    } else {\n        is_right_angle = true;\n    }\n    is_right_angle\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8wb06vj8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == b + c {\n        return true;\n    } else if b == c + a {\n \
    \       return true;\n    } else if c == a + b {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpigaofdhk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || (a + c) > b || b + c > a || (a + b + c) < 3 {\n     \
    \   return false\n    }\n    \n    let divisor = (b * c) - ((a * b) + (b * a))\n\
    \    divisor == 0 || ((b * b) - (a * b) + (c * a)) == 0 || \n        ((c * b)\
    \ - (a * b) + (b * a)) == 0 || \n        ((b * b) - (c * a) + (a * a)) == 0\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `divisor`\n  --> /tmp/tmpwerxdfma.rs:15:48\n\
    \   |\n15 |     let divisor = (b * c) - ((a * b) + (b * a))\n   |            \
    \                                    ^ help: add `;` here\n16 |     divisor ==\
    \ 0 || ((b * b) - (a * b) + (c * a)) == 0 || \n   |     ------- unexpected token\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        false\n    } else if b + c > a {\n        false\n\
    \    } else if c + a > b {\n        false\n    } else {\n        true\n    }\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9xatzw7t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (a + c > b)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppie5cdzt.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check that the sides are valid\n    if a < b + c || b < a + c || c\
    \ < a + b {\n        return false;\n    }\n\n    // If they are both equilateral,\
    \ the triangle is \"right-angled\"\n    if a == b + c {\n        return true;\n\
    \    }\n\n    // Otherwise, determine if the triangle is \"right-angled\" by checking\
    \ if\n    // any edge is strictly larger than the other. Then, if either edge\
    \ is \n    // strictly smaller than the other, the triangle is not \"right-angled\"\
    .\n    let left_is_larger = a > b;\n    let right_is_larger = c > b;\n    if !left_is_larger\
    \ && !right_is_larger && (b - a >= c - b) {\n        return false;\n    }\n\n\
    \    // Otherwise the triangle is \"right-angled\"\n    return true;\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuu7oapr4.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  ((a < b) && (a < c))\n    || ((a > b) && (a > c))\n    || ((b < c) && (b\
    \ < a))\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn_n46396.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || a + c > b || b + c > a || a + b + c != 0 {\n        return\
    \ false;\n    }\n    \n    if a == b {\n        return a == c;\n    }\n    \n\
    \    let mut a: isize = (a + b) / 2;\n    let mut b: isize = (a + c) / 2;\n  \
    \  let mut c: isize = (b + c) / 2;\n    \n    loop {\n        if a > c && b >\
    \ a && b > c {\n            return true;\n        }\n        \n        if b >\
    \ c {\n            return false;\n        }\n        \n        if c > b {\n  \
    \          a = b;\n            b = c;\n            c = a;\n        }\n       \
    \ \n        let mut tmp: isize = (a + c) / 2;\n        if tmp == a || tmp == c\
    \ || tmp == b {\n            return false;\n        }\n        \n        a = tmp;\n\
    \    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_a41i49r.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * b - 4 * c * a * c > 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp47olv1_v.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let x = sqrt(a.square() + b.square() + c.square());\n    let y = a.cross(&b).cross(&c);\n\
    \    x > y || x < -y\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp2vohyxz8.rs:11:13\n\
    \   |\n11 |     let x = sqrt(a.square() + b.square() + c.square());\n   |    \
    \         ^^^^ not found in this scope\n\nerror[E0599]: no method named `square`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp2vohyxz8.rs:11:20\n\
    \   |\n11 |     let x = sqrt(a.square() + b.square() + c.square());\n   |    \
    \                ^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `square` found for type `isize` in the current scope\n  --> /tmp/tmp2vohyxz8.rs:11:33\n\
    \   |\n11 |     let x = sqrt(a.square() + b.square() + c.square());\n   |    \
    \                             ^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `square` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp2vohyxz8.rs:11:46\n   |\n11 |     let x = sqrt(a.square() + b.square()\
    \ + c.square());\n   |                                              ^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `cross` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp2vohyxz8.rs:12:15\n   |\n12 |  \
    \   let y = a.cross(&b).cross(&c);\n   |               ^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a == b\n        || a == c\n        || b == c\n        || (a != 0 && b\
    \ != 0 && c != 0)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpef1z4o06.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let det = a * b - c * a;\n    let r = std::f32::consts::PI * std::f32::consts::PI\
    \ / 3;\n    det >= r\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f32` by `{integer}`\n  --> /tmp/tmpwdn41k1o.rs:12:57\n\
    \   |\n12 |     let r = std::f32::consts::PI * std::f32::consts::PI / 3;\n   |\
    \                                                         ^ no implementation\
    \ for `f32 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f32`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |     let r = std::f32::consts::PI * std::f32::consts::PI / 3.0;\n\
    \   |                                                            ++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let EPSILON: isize = 0.00001;\n    let epsilon = EPSILON;\n    if a <\
    \ EPSILON {\n        if b < EPSILON {\n            if c < EPSILON {\n        \
    \        false\n            } else {\n                true\n            }\n  \
    \      } else {\n            true\n        }\n    } else if b < EPSILON {\n  \
    \      if c < EPSILON {\n            true\n        } else {\n            false\n\
    \        }\n    } else if c < EPSILON {\n        true\n    } else {\n        let\
    \ rad = (a * b + c * c) / (2.0 * c);\n        let angle = std::fmod(std::fmod(rad,\
    \ 2.0), 360.0);\n        if angle > 90.0 {\n            angle -= 180.0\n     \
    \   } else if angle < 90.0 {\n            angle += 180.0\n        }\n        if\
    \ abs(angle - 180.0) < epsilon {\n            true\n        } else {\n       \
    \     false\n        }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fmod` in crate `std`\n  --> /tmp/tmpidmmwp87.rs:33:26\n\
    \   |\n33 |         let angle = std::fmod(std::fmod(rad, 2.0), 360.0);\n   | \
    \                         ^^^^ not found in `std`\n\nerror[E0425]: cannot find\
    \ function `fmod` in crate `std`\n  --> /tmp/tmpidmmwp87.rs:33:36\n   |\n33 |\
    \         let angle = std::fmod(std::fmod(rad, 2.0), 360.0);\n   |           \
    \                         ^^^^ not found in `std`\n\nerror[E0425]: cannot find\
    \ function `abs` in this scope\n  --> /tmp/tmpidmmwp87.rs:39:12\n   |\n39 |  \
    \       if abs(angle - 180.0) < epsilon {\n   |            ^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpidmmwp87.rs:11:26\n \
    \  |\n11 |     let EPSILON: isize = 0.00001;\n   |                  -----   ^^^^^^^\
    \ expected `isize`, found floating-point number\n   |                  |\n   |\
    \                  expected due to this\n\nerror[E0277]: cannot multiply `{float}`\
    \ by `isize`\n  --> /tmp/tmpidmmwp87.rs:32:42\n   |\n32 |         let rad = (a\
    \ * b + c * c) / (2.0 * c);\n   |                                          ^ no\
    \ implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b >= c) && (a * b > c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvo_4xq5y.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c).is_odd()\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpry1mi7oj.rs:11:17\n   |\n11 |     (a + b + c).is_odd()\n\
    \   |                 ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b\n    && b < c\n    || (a == b && (b > c || b > a || c > a))\n \
    \   || (a == c && (a > b || c > b))\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf_5ddmqv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (c-a)*(c-a) + (c-b)*(b-c) - (b-a)*(b-a) == 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp702t1rjq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // http://stackoverflow.com/questions/4873638/check-if-a-given-point-lies-on-a-right-angled-triangle\n\
    \    let sides = (a, b, c)\n    \n    if sides.iter().sum::<i32>() != 2 {\n  \
    \      return false;\n    }\n    \n    let x_ab = sides[0].abs();\n    let y_ab\
    \ = sides[1].abs();\n    let z_ab = sides[2].abs();\n    \n    if x_ab == y_ab\
    \ && y_ab == z_ab {\n        true\n    } else {\n        false\n    }\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmptzhf9kg8.rs:12:26\n\
    \   |\n12 |     let sides = (a, b, c)\n   |                          ^ help: add\
    \ `;` here\n13 |     \n14 |     if sides.iter().sum::<i32>() != 2 {\n   |    \
    \ -- unexpected token\n\nerror[E0599]: no method named `iter` found for tuple\
    \ `(isize, isize, isize)` in the current scope\n  --> /tmp/tmptzhf9kg8.rs:14:14\n\
    \   |\n14 |     if sides.iter().sum::<i32>() != 2 {\n   |              ^^^^ method\
    \ not found in `(isize, isize, isize)`\n\nerror[E0608]: cannot index into a value\
    \ of type `(isize, isize, isize)`\n  --> /tmp/tmptzhf9kg8.rs:18:16\n   |\n18 |\
    \     let x_ab = sides[0].abs();\n   |                ^^^^^^^^ help: to access\
    \ tuple elements, use: `sides.0`\n\nerror[E0608]: cannot index into a value of\
    \ type `(isize, isize, isize)`\n  --> /tmp/tmptzhf9kg8.rs:19:16\n   |\n19 |  \
    \   let y_ab = sides[1].abs();\n   |                ^^^^^^^^ help: to access tuple\
    \ elements, use: `sides.1`\n\nerror[E0608]: cannot index into a value of type\
    \ `(isize, isize, isize)`\n  --> /tmp/tmptzhf9kg8.rs:20:16\n   |\n20 |     let\
    \ z_ab = sides[2].abs();\n   |                ^^^^^^^^ help: to access tuple elements,\
    \ use: `sides.2`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgi5qkn1r.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a >= b + c {\n        return false;\n    }\n    \n    if b + c >=\
    \ a + c {\n        return false;\n    }\n\n    // if ax + by + c = 0 then ax +\
    \ by = c\n    // by - c = 0\n    // by + c = 0\n    if b != c {\n        if a\
    \ == b {\n            return b != c;\n        } else {\n            return false;\n\
    \        }\n    }\n    \n    let theta = (a * b) / c; // angle of a triangle\n\
    \    \n    // if theta = 90, then a triangle is right angle\n    return theta\
    \ == 90;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa9x65i83.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    abs(a - b) <= abs(b - c) && abs(a - c) <= abs(b - a)\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp27tka73j.rs:11:5\n\
    \   |\n11 |     abs(a - b) <= abs(b - c) && abs(a - c) <= abs(b - a)\n   |   \
    \  ^^^ not found in this scope\n\nerror[E0425]: cannot find function `abs` in\
    \ this scope\n  --> /tmp/tmp27tka73j.rs:11:19\n   |\n11 |     abs(a - b) <= abs(b\
    \ - c) && abs(a - c) <= abs(b - a)\n   |                   ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp27tka73j.rs:11:33\n\
    \   |\n11 |     abs(a - b) <= abs(b - c) && abs(a - c) <= abs(b - a)\n   |   \
    \                              ^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `abs` in this scope\n  --> /tmp/tmp27tka73j.rs:11:47\n   |\n11\
    \ |     abs(a - b) <= abs(b - c) && abs(a - c) <= abs(b - a)\n   |           \
    \                                    ^^^ not found in this scope\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a + c + a) == (b - a) + (c - a) + (a - b)\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9cuulozl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0\n    && b * c == (a + b) * (a - c)\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp05wv434k.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  if ((a + b > c) && (c + d > a) && (a + d > b)) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpqlalyc0i.rs:11:27\n\
    \   |\n11 |   if ((a + b > c) && (c + d > a) && (a + d > b)) {\n   |         \
    \                  ^ help: a local variable with a similar name exists: `a`\n\n\
    error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpqlalyc0i.rs:11:42\n\
    \   |\n11 |   if ((a + b > c) && (c + d > a) && (a + d > b)) {\n   |         \
    \                                 ^ help: a local variable with a similar name\
    \ exists: `a`\n\nwarning: unnecessary parentheses around `if` condition\n  -->\
    \ /tmp/tmpqlalyc0i.rs:11:6\n   |\n11 |   if ((a + b > c) && (c + d > a) && (a\
    \ + d > b)) {\n   |      ^                                         ^\n   |\n \
    \  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n11 -   if ((a + b > c) && (c + d > a) && (a + d > b)) {\n11 +   if (a +\
    \ b > c) && (c + d > a) && (a + d > b) {\n   | \n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut d = b * b - 4 * a * c;\n    if d < 0 {\n        return false;\n\
    \    }\n    d /= 2.0;\n    let mut x = (a * (b + c) - d) / 2.0;\n    let mut y\
    \ = (a * (c - b) - d) / 2.0;\n    let mut z = (a * (b - c) - d) / 2.0;\n    if\
    \ x > y {\n        if x > z {\n            return true;\n        } else {\n  \
    \          return false;\n        }\n    } else {\n        if y > z {\n      \
    \      return false;\n        } else {\n            return true;\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmpjlajdcy9.rs:15:7\n\
    \   |\n15 |     d /= 2.0;\n   |       ^^ no implementation for `isize /= {float}`\n\
    \   |\n   = help: the trait `DivAssign<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `DivAssign<Rhs>`:\n    \
    \         <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n        \
    \     <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n            \
    \ <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n             <i16\
    \ as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpjlajdcy9.rs:16:35\n\
    \   |\n16 |     let mut x = (a * (b + c) - d) / 2.0;\n   |                   \
    \                ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpjlajdcy9.rs:17:35\n   |\n17 |   \
    \  let mut y = (a * (c - b) - d) / 2.0;\n   |                                \
    \   ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpjlajdcy9.rs:18:35\n   |\n18 |     let mut z"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // if the three sides are the same length, then they form a right-angled\
    \ triangle \n    if a == b {\n        if b == c {\n            true\n        }\
    \ else {\n            false\n        }\n    } else if b == c {\n        false\n\
    \    } else {\n        // find the longest side\n        let mut longest_side\
    \ = *a;\n        if longest_side > b {\n            longest_side = *b;\n     \
    \   }\n        if longest_side > c {\n            longest_side = *c;\n       \
    \ }\n\n        // if the longest side is greater than 180 degree, it is considered\
    \ \n        // right-angled.\n        if longest_side >= 90 {\n            true\n\
    \        } else {\n            false\n        }\n    }\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpv5wo4r_w.rs:22:32\n\
    \   |\n22 |         let mut longest_side = *a;\n   |                         \
    \       ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpv5wo4r_w.rs:24:28\n\
    \   |\n24 |             longest_side = *b;\n   |                            ^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpv5wo4r_w.rs:27:28\n\
    \   |\n27 |             longest_side = *c;\n   |                            ^^\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0 &&\n    a + b > c && b + c > a && c + a > b &&\n\
    \    (a + b + c) == (a + b) * (b + c) - (b + c) * (a + b)\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi6i19jtc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b - a * a) * (a + b * c) > 0.0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb_f9zt_g.rs:11:37\n   |\n\
    11 |     (b * b - a * a) * (a + b * c) > 0.0\n   |                           \
    \          ^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a == b as u8 && b == c as u8 && c == c as u8\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2b94yvza.rs:11:10\n   |\n\
    11 |     a == b as u8 && b == c as u8 && c == c as u8\n   |          ^^^^^^^ expected\
    \ `isize`, found `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n   |\n\
    11 |     a == (b as u8).into() && b == c as u8 && c == c as u8\n   |         \
    \ +       ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2b94yvza.rs:11:26\n\
    \   |\n11 |     a == b as u8 && b == c as u8 && c == c as u8\n   |           \
    \               ^^^^^^^ expected `isize`, found `u8`\n   |\nhelp: you can convert\
    \ a `u8` to an `isize`\n   |\n11 |     a == b as u8 && b == (c as u8).into() &&\
    \ c == c as u8\n   |                          +       ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2b94yvza.rs:11:42\n   |\n11 |     a == b as\
    \ u8 && b == c as u8 && c == c as u8\n   |                                   \
    \       ^^^^^^^ expected `isize`, found `u8`\n   |\nhelp: you can convert a `u8`\
    \ to an `isize`\n   |\n11 |     a == b as u8 && b == c as u8 && c == (c as u8).into()\n\
    \   |                                          +       ++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ab = b * b;\n    let ac = a * c;\n    let ad = a + d;\n    let bc\
    \ = b * c;\n    let bd = b + d;\n    let cd = c * d;\n    let acd = ac + d;\n\
    \    let abc = ab + bc;\n    let abd = ab + bd;\n    let bcd = bc + cd;\n    let\
    \ cda = cd + a;\n    let abdc = abd + bcd;\n\n    let is_right_angled = acd >=\
    \ abdc && abdc >= bda;\n    is_right_angled\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmp13hc1bsm.rs:13:18\n\
    \   |\n13 |     let ad = a + d;\n   |                  ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmp13hc1bsm.rs:15:18\n   |\n15 |     let bd = b + d;\n   |\
    \                  ^ help: a local variable with a similar name exists: `a`\n\n\
    error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmp13hc1bsm.rs:16:18\n\
    \   |\n16 |     let cd = c * d;\n   |                  ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmp13hc1bsm.rs:17:20\n   |\n17 |     let acd = ac + d;\n \
    \  |                    ^ help: a local variable with a similar name exists: `a`\n\
    \nerror[E0425]: cannot find value `bda` in this scope\n  --> /tmp/tmp13hc1bsm.rs:24:50\n\
    \   |\n24 |     let is_right_angled = acd >= abdc && abdc >= bda;\n   |      \
    \                                            ^^^ help: a local variable with a\
    \ similar name exists: `bd`\n\nerror: aborting due to 5 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // A right-angled triangle is one of the following cases:\n    // 1.\
    \ Three sides are equal\n    // 2. Two sides are equal\n    // 3. One side is\
    \ 90 degree\n    // 4. One side is right angle\n    // 5. Three sides are opposite\
    \ (counterclockwise)\n    // 6. Two sides are opposite (counterclockwise)\n  \
    \  let (da, db) = (a - b, b - c);\n    let (dc, dc) = (c - a, c - b);\n    (da,\
    \ db) <= 0 && dc == 0 || dc == -da\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0416]: identifier `dc` is bound more than once in the same pattern\n\
    \  --> /tmp/tmpnmws_8xh.rs:19:14\n   |\n19 |     let (dc, dc) = (c - a, c - b);\n\
    \   |              ^^ used in a pattern more than once\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnmws_8xh.rs:20:17\n   |\n20 |     (da, db) <= 0 && dc ==\
    \ 0 || dc == -da\n   |                 ^ expected tuple, found integer\n   |\n\
    \   = note: expected tuple `(isize, isize)`\n               found type `{integer}`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0416.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgi5qkn1r.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    debug_assert_eq!(b, c + 1);\n    debug_assert_eq!(a, c - 1);\n    debug_assert_eq!(c,\
    \ a + 1);\n    (a + b) == (c + a)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `6`', /tmp/tmpc4jbdui7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgi5qkn1r.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp9b1lkfx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a >= b && (a - b) >= c && (b - c) >= a && (a - c) >= b\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1u2i8g7s.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let is_right_triangle = std::abs(a + b - c) <= std::abs(a * b + a + b\
    \ + c - c);\n    !is_right_triangle\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in crate `std`\n  --> /tmp/tmpyol5fr7h.rs:11:34\n\
    \   |\n11 |     let is_right_triangle = std::abs(a + b - c) <= std::abs(a * b\
    \ + a + b + c - c);\n   |                                  ^^^ not found in `std`\n\
    \nerror[E0425]: cannot find function `abs` in crate `std`\n  --> /tmp/tmpyol5fr7h.rs:11:57\n\
    \   |\n11 |     let is_right_triangle = std::abs(a + b - c) <= std::abs(a * b\
    \ + a + b + c - c);\n   |                                                    \
    \     ^^^ not found in `std`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let d = a*a + b*b - c*c;\n    if d < 0 {\n        return false;\n   \
    \ }\n    let mut e = d + (a*a + b*b);\n    if e > 0 {\n        e /= 2.0;\n   \
    \ }\n    e*e == d\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmp55_o9hoo.rs:17:11\n\
    \   |\n17 |         e /= 2.0;\n   |           ^^ no implementation for `isize\
    \ /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  right_angle(a, b, c) == true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `right_angle` in this scope\n  --> /tmp/tmp8jp7g1__.rs:11:3\n\
    \   |\n11 |   right_angle(a, b, c) == true\n   |   ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgi5qkn1r.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: Refactor this function\n    if a + b > c {\n        let temp\
    \ = c;\n        c = b;\n        b = temp;\n    }\n    if a + c > b {\n       \
    \ let temp = a;\n        a = c;\n        c = temp;\n    }\n\n    let mut triangle_length\
    \ = a + b + c;\n\n    // if a < b < c, a right angle\n    if triangle_length <\
    \ 1 {\n        return true;\n    }\n\n    let mut side_1_length = b - a;\n   \
    \ let mut side_2_length = c - a;\n    let mut side_3_length = triangle_length\
    \ - a - b;\n\n    // if side_1_length < side_2_length, side_1_length is right\
    \ angle\n    // if side_2_length < side_1_length, side_2_length is right angle\n\
    \    // if side_1_length < side_3_length, side_1_length is right angle\n    //\
    \ if side_2_length < side_3_length, side_2_length is right angle\n    if side_1_length\
    \ < side_2_length {\n        if side_1_length < side_3_length {\n            return\
    \ true;\n        }\n    } else {\n        if side_2_length < side_3_length {\n\
    \            return true;\n        }\n    }\n\n    // if side_1_length < side_2_length,\
    \ side_1_length is right angle\n    // if side_2_length < side_1_length, side_2_length\
    \ is right angle\n    // if side_1_length < side_3_length, side_1_length is right\
    \ angle\n    // if side_2_length < side_3_length, side_2_length is right angle\n\
    \    // if side_1_length < side_2_length, side_1_length is right angle\n    //\
    \ if side_2_length < side_1_length, side_2_length is right angle\n    // if side_1_length\
    \ < side_3_length, side_1_length is right angle\n    // if side_2_length < side_3_length,\
    \ side_2_length is right angle\n    // if side_1_length < side_2_length, side_1_length\
    \ is right angle\n    // if side_2_length < side_3_length, side_2_length is right\
    \ angle\n    // if side_1_length < side_2_length, side_1_length is right angle\n\
    \    // if side_2_length < side_1_length, side_2_length is right angle\n    //\
    \ if side_1_length < side_3_length, side_1_length is right angle\n    // if side_2_length\
    \ < side_3_length, side_2_length is right angle\n    // if side_1_length < side_2_length,\
    \ side_1_length is right angle\n    // if side_2_length < side_1_length, side_2_length\
    \ is right angle\n    // if side_1_length < side_3_length, side_1_length is right\
    \ angle\n    // if side_2_length < side_3_length, side_2_length is right angle\n\
    \    // if side_1_length < side_2_length, side_1_length is right angle\n    //\
    \ if side_2_length < side_1_length, side_2_length is \n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpenpwuzyy.rs:39:9\n\
    \   |\n39 | /         if side_1_length < side_3_length {\n40 | |             return\
    \ true;\n41 | |         }\n   | |_________^ expected `()`, found `bool`\n   |\n\
    \   = note: `if` expressions without `else` evaluate to `()`\n   = help: consider\
    \ adding an `else` block that evaluates to the expected type\n\nerror[E0317]:\
    \ `if` may be missing an `else` clause\n  --> /tmp/tmpenpwuzyy.rs:43:9\n   |\n\
    43 | /         if side_2_length < side_3_length {\n44 | |             return true;\n\
    45 | |         }\n   | |_________^ expected `()`, found `bool`\n   |\n   = note:\
    \ `if` expressions without `else` evaluate to `()`\n   = help: consider adding\
    \ an `else` block that evaluates to the expected type\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0317`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ac = std::cmp::min(a, b);\n    let bc = std::cmp::min(b, c)\n   \
    \ let cc = std::cmp::min(c, ac);\n    (ac > 0) && (bc > 0) && (cc > 0)\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpslhsw0vb.rs:12:33\n\
    \   |\n12 |     let bc = std::cmp::min(b, c)\n   |                           \
    \      ^ help: add `;` here\n13 |     let cc = std::cmp::min(c, ac);\n   |   \
    \  --- unexpected token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (a + c > b) && (b + c > a)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3j8rbeg0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if a < c {\n            if b < c {\n            \
    \    return a > b\n            } else {\n                return b > c\n      \
    \      }\n        } else {\n            return c > b\n        }\n    } else {\n\
    \        if b < c {\n            return b > a\n        } else {\n            return\
    \ c > a\n        }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph6u_ufyv.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut min_len = std::cmp::min(a, b);\n    if min_len == c {\n     \
    \   min_len = std::cmp::min(min_len, c);\n    }\n    \n    let mut max_len = std::cmp::max(a,\
    \ b);\n    if max_len == c {\n        max_len = std::cmp::max(max_len, c);\n \
    \   }\n    \n    if min_len == max_len {\n        return false;\n    }\n    \n\
    \    if min_len != c {\n        min_len = std::cmp::min(min_len, c);\n    }\n\
    \    \n    if max_len != c {\n        max_len = std::cmp::max(max_len, c);\n \
    \   }\n    \n    min_len == max_len\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2wjvc6ny.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  \n    // Find the two sides and check that the hypotenuse is greater than\
    \ or equal to 0.\n    let side1 = hypot(a, b);\n    let side2 = hypot(b, c);\n\
    \    let side3 = hypot(c, a);\n\n    if side1 < side2 && side1 < side3 { \n  \
    \      return true;\n    } else if side2 < side3 { \n        return false;\n \
    \   } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `hypot` in this scope\n  --> /tmp/tmpgs0fnzqu.rs:13:17\n\
    \   |\n13 |     let side1 = hypot(a, b);\n   |                 ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `hypot` in this scope\n\
    \  --> /tmp/tmpgs0fnzqu.rs:14:17\n   |\n14 |     let side2 = hypot(b, c);\n  \
    \ |                 ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `hypot` in this scope\n  --> /tmp/tmpgs0fnzqu.rs:15:17\n   |\n15 |\
    \     let side3 = hypot(c, a);\n   |                 ^^^^^ not found in this scope\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b && (a > c || b > c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsnfjc4k8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || (b + c) > a || (c + a) > b { return false }\n    // a\
    \ triangle is right if all three sides are equal\n    if a == b && b == c || a\
    \ == c && c == b || a == c && b == b { return true }\n    // triangle is right\
    \ if all three sides are 90 degree\n    if a == b && c == b || a == c && c ==\
    \ a || a == b && b == a { return true }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpon4bteva.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b == c {\n        return false;\n    }\n    if a + b > c {\n     \
    \   return false;\n    }\n    let mut sum = a;\n    for i in 1..b {\n        sum\
    \ += i;\n    }\n    let mut product = sum;\n    for i in 0..(b - a) {\n      \
    \  product *= i;\n    }\n    if product < c {\n        return false;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp57gj4zvb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            return false;\n        }\
    \ else {\n            return true;\n        }\n    } else {\n        if c < b\
    \ {\n            return false;\n        } else {\n            return true;\n \
    \       }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnz_inifx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  (0..3).contains(&a) && (0..3).contains(&b) && (0..3).contains(&c)\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjswd1e3t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\t// if none of the sides is zero or one\n\tif a == 0 || b == 0 || c == 0\
    \ {\n\t\treturn false;\n\t}\n\n\t// if any of them is 1\n\tif a == 1 || b == 0\
    \ || c == 1 {\n\t\treturn true;\n\t}\n\n\t// if all the other is 0\n\tif a ==\
    \ 0 || b == 0 || c == 0 {\n\t\treturn false;\n\t}\n\n\tlet area = a * b * c;\n\
    \n\tif area == 0 {\n\t\treturn false;\n\t}\n\n\tif area > 90 {\n\t\treturn false;\n\
    \t}\n\n\tif area < -90 {\n\t\treturn false;\n\t}\n\n\t// if any of them is greater\
    \ than the third one\n\tif a > b {\n\t\treturn a > c;\n\t}\n\n\tif b > c {\n\t\
    \treturn b > a;\n\t}\n\n\t// if all are equal\n\treturn a == b == c;\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_scivz_e.rs:50:11\n\
    \   |\n50 |     return a == b == c;\n   |              ^^   ^^\n   |\nhelp: split\
    \ the comparison into two\n   |\n50 |     return a == b && b == c;\n   |     \
    \              ++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_scivz_e.rs:50:19\n\
    \   |\n50 |     return a == b == c;\n   |                      ^ expected `bool`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || b + c > a || c + a > b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz_jjv5q8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a+b > c) && (a+c > b) && (b+c > a)\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9v1n8hvn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a <= 0 || b <= 0 || c <= 0 {\n        return false;\n    }\n    if\
    \ a + b > c {\n        return false;\n    }\n    if a + c > b {\n        return\
    \ false;\n    }\n    if b + c > a {\n        return false;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp418tu76y.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ab = a + b\n    let ac = c + a\n    let bc = b + c\n    ab > ac &&\
    \ ab > bc\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9r69eys3.rs:11:19\n\
    \   |\n11 |     let ab = a + b\n   |                   ^ help: add `;` here\n\
    12 |     let ac = c + a\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n  --> /tmp/tmp9r69eys3.rs:12:19\n   |\n12 |     let ac\
    \ = c + a\n   |                   ^ help: add `;` here\n13 |     let bc = b +\
    \ c\n   |     --- unexpected token\n\nerror: expected `;`, found `ab`\n  --> /tmp/tmp9r69eys3.rs:13:19\n\
    \   |\n13 |     let bc = b + c\n   |                   ^ help: add `;` here\n\
    14 |     ab > ac && ab > bc\n   |     -- unexpected token\n\nerror: aborting due\
    \ to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < 0 || b < 0 || c < 0 { false }\n    a + (b - c) < a || (b - c)\
    \ < b || (a - c) < a || (a - c) < b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqhe53752.rs:11:34\n   |\n\
    11 |     if a < 0 || b < 0 || c < 0 { false }\n   |     -----------------------------^^^^^--\n\
    \   |     |                            |\n   |     |                         \
    \   expected `()`, found `bool`\n   |     expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n11 |     if a < 0 || b < 0\
    \ || c < 0 { return false; }\n   |                                  ++++++   \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b + c || a == b + c || b == c + a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbgbfah6y.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (a + c > b) && (b + c > a)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3j8rbeg0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > c || a > b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9vgos8rj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a * b * c) == (a + b + c) * (a + b - c) * (a - b + c) * a + (a - b +\
    \ c) * (b - a + c) * (b + a - c) * b + (b - a + c) * (a + b - c) * (a + b + c)\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppm5g4a3s.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            return true;\n        } else\
    \ {\n            return !is_right_triangle(a, b, c);\n        }\n    } else {\n\
    \        if c < b {\n            return true;\n        } else {\n            return\
    \ !is_right_triangle(a, b, c)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_right_triangle` in this scope\n\
    \  --> /tmp/tmpnarzcrma.rs:15:21\n   |\n15 |             return !is_right_triangle(a,\
    \ b, c);\n   |                     ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `is_right_triangle` in this scope\n  -->\
    \ /tmp/tmpnarzcrma.rs:21:21\n   |\n21 |             return !is_right_triangle(a,\
    \ b, c)\n   |                     ^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: use generic math\n    let a = a < b + c && c >= b\n    let b\
    \ = c >= a + c && c >= b\n    let c = b + c >= a + b\n    a && b && c\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9_53efv2.rs:12:32\n\
    \   |\n12 |     let a = a < b + c && c >= b\n   |                            \
    \    ^ help: add `;` here\n13 |     let b = c >= a + c && c >= b\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp9_53efv2.rs:13:33\n\
    \   |\n13 |     let b = c >= a + c && c >= b\n   |                           \
    \      ^ help: add `;` here\n14 |     let c = b + c >= a + b\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp9_53efv2.rs:14:27\n \
    \  |\n14 |     let c = b + c >= a + b\n   |                           ^ help:\
    \ add `;` here\n15 |     a && b && c\n   |     - unexpected token\n\nerror[E0369]:\
    \ cannot add `isize` to `bool`\n  --> /tmp/tmp9_53efv2.rs:13:20\n   |\n13 |  \
    \   let b = c >= a + c && c >= b\n   |                  - ^ - isize\n   |    \
    \              |\n   |                  bool\n\nerror[E0369]: cannot add `isize`\
    \ to `bool`\n  --> /tmp/tmp9_53efv2.rs:14:15\n   |\n14 |     let c = b + c >=\
    \ a + b\n   |             - ^ - isize\n   |             |\n   |             bool\n\
    \nerror[E0369]: cannot add `bool` to `bool`\n  --> /tmp/tmp9_53efv2.rs:14:24\n\
    \   |\n14 |     let c = b + c >= a + b\n   |                      - ^ - bool\n\
    \   |                      |\n   |                      bool\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a < b) && (b < c) && (c < a)\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_ploixyu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    !((b - a) * (c + b - a) < 0)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph9f376x9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a = a < b + c ? a + c : b + c;\n    let b = b < a + c ? b + c : a\
    \ + c;\n    let c = c < a + b ? a + b : a + b;\n\n    a == b && a == c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpmt38iv5d.rs:11:25\n   |\n11 |     let a = a < b + c ? a + c : b\
    \ + c;\n   |                         ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check for a right angle\n    if a == 0 || b == 0 || c == 0 || (a <\
    \ b) && (b < c) && (c < a) {\n        return true\n    }\n    \n    // Check for\
    \ a right triangle\n    if a == b && b == c && c == a {\n        return true\n\
    \    }\n    \n    // Check for a right triangle\n    if a == b || b == c || c\
    \ == a {\n        return true\n    }\n    \n    // Check for a right triangle\n\
    \    if a != b && (a != c && a != b && (b != c && b != a && (c != a && c != b))))\
    \ {\n        return true\n    }\n    \n    // Check for a right triangle\n   \
    \ if b != c && (b != a && b != c && (a != c && a != b && c != a && c != b))) {\n\
    \        return true\n    }\n    \n    // Check for a right triangle\n    if c\
    \ != a && (c != b && c != a && (b != a && b != c && (a != b && a != c && c !=\
    \ a)))) {\n        return true\n    }\n    \n    // Check for a right triangle\n\
    \    if a != b || b != c || c != a {\n        return false\n    }\n    \n    //\
    \ All checks failed\n    return false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected closing delimiter: `)`\n  --> /tmp/tmp_2dsiyam.rs:32:78\n\
    \   |\n27 |     if a != b && (a != c && a != b && (b != c && b != a && (c != a\
    \ && c != b)))) {\n   |                                                      \
    \                            - this opening brace...\n28 |         return true\n\
    29 |     }\n   |     - ...matches this closing brace\n...\n32 |     if b != c\
    \ && (b != a && b != c && (a != c && a != b && c != a && c != b))) {\n   |   \
    \                                                                           ^\
    \ unexpected closing delimiter\n\nerror: mismatched closing delimiter: `)`\n \
    \ --> /tmp/tmp_2dsiyam.rs:10:63\n   |\n10 | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                        \
    \                       ^ unclosed delimiter\n...\n27 |     if a != b && (a !=\
    \ c && a != b && (b != c && b != a && (c != a && c != b)))) {\n   |          \
    \                                                                      ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b-a) * (c-b) - (a-b) * (c-b) == (c-a) * (b-c) - (b-a) * (c-c)\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyiveflkm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check that the sides of the triangle are all non-negative\n    if\
    \ a < 0 || b < 0 || c < 0 {\n        return false;\n    }\n\n    // Check that\
    \ the sum of two sides of the triangle is equal to the length of \n    // the\
    \ side\n    let s = a + b + c;\n    if s == a {\n        return true;\n    }\n\
    \    else if s == b {\n        return false;\n    }\n    else if s == c {\n  \
    \      return false;\n    }\n\n    // Check that a + b + c is a right angle triangle\
    \ (90-degree) if a < \n    // b and b < c\n    else if a + b > c {\n        return\
    \ true;\n    }\n    else if a + c > b {\n        return true;\n    }\n    else\
    \ if b + c > a {\n        return true;\n    }\n\n    // Check that the three sides\
    \ of the triangle form a right angle triangle\n    else {\n        false\n   \
    \ }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa4b78he9.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    match a, c, b, c {\n        (a, b, c) |\n        (c, a, _, b) |\n   \
    \     (_, a, _, c) => a == b + c && a-b == c,\n        _ => false\n    }\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found\
    \ `,`\n  --> /tmp/tmpc5vojpm2.rs:11:12\n   |\n11 |     match a, c, b, c {\n  \
    \ |     -----  ^ expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n  \
    \ |     |\n   |     while parsing this `match` expression\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\t// Triangle is right angle if all three sides are equal\n\ta == b && a\
    \ == c || a == c && b == c || b == a && c == a || b == c && c == b || a == a &&\
    \ b == b || b == b && c == c || c == c && a == a || c == c && a == b\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnck5z7nq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet d = b * b - 4 * a * c;\n\ta > 0 && b > 0 && c > 0 && d > 0\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp22b2g133.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (a * c) >= 0 \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgtkzmm3u.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b && (b > c || c > a)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0wk_6ytg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a != b and b != c and c != a \n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmpelw05xr8.rs:11:12\n\
    \   |\n11 |     a != b and b != c and c != a \n   |            ^^^ help: use `&&`\
    \ to perform logical conjunction\n   |\n   = note: unlike in e.g., python and\
    \ PHP, `&&` and `||` are used for logical operators\n\nerror: `and` is not a logical\
    \ operator\n  --> /tmp/tmpelw05xr8.rs:11:23\n   |\n11 |     a != b and b != c\
    \ and c != a \n   |                       ^^^ help: use `&&` to perform logical\
    \ conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||`\
    \ are used for logical operators\n\nerror: aborting due to 2 previous errors\n\
    \n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ab = a * b\n    let ac = a * c\n    let bc = b * c\n    let abc =\
    \ ab + ac + bc\n    let abs_abc = abc < 0\n    let abc_ab = ab * ab + ac * ac\
    \ + bc * bc < 0\n    abs_abc || abc_ab\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzhkn7z14.rs:11:19\n\
    \   |\n11 |     let ab = a * b\n   |                   ^ help: add `;` here\n\
    12 |     let ac = a * c\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n  --> /tmp/tmpzhkn7z14.rs:12:19\n   |\n12 |     let ac\
    \ = a * c\n   |                   ^ help: add `;` here\n13 |     let bc = b *\
    \ c\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n\
    \  --> /tmp/tmpzhkn7z14.rs:13:19\n   |\n13 |     let bc = b * c\n   |        \
    \           ^ help: add `;` here\n14 |     let abc = ab + ac + bc\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzhkn7z14.rs:14:27\n\
    \   |\n14 |     let abc = ab + ac + bc\n   |                           ^ help:\
    \ add `;` here\n15 |     let abs_abc = abc < 0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzhkn7z14.rs:15:26\n\
    \   |\n15 |     let abs_abc = abc < 0\n   |                          ^ help: add\
    \ `;` here\n16 |     let abc_ab = ab * ab + ac * ac + bc * bc < 0\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found `abs_abc`\n  --> /tmp/tmpzhkn7z14.rs:16:49\n\
    \   |\n16 |     let abc_ab = ab * ab + ac * ac + bc * bc < 0\n   |           \
    \                                      ^ help: add `;` here\n17 |     abs_abc\
    \ || abc_ab\n   |     ------- unexpected token\n\nerror: aborting due to 6 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b && (b < c || c < a) && (b + c < a + b || a + c < b + a)\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw3y0hdlw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    c > b && (b > a || a < b)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf9kny2jq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0 || (c - a) * (b - a) <= 0\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpih7u217k.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && (a + c + b > a || a + b + c > a)\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ta_k9k3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // return true if all sides are equal\n    if a == b {\n        return\
    \ a == c;\n    }\n    // return true if all sides are equal\n    if a == c {\n\
    \        return b == c;\n    }\n    // return true if one is equal\n    if a ==\
    \ b {\n        return c == b;\n    }\n    // if both are equal, return true if\
    \ one is 90 degree\n    if a == c {\n        return b == c || b == -b;\n    }\n\
    \    // if both are equal, return true if one is 90 degree\n    if b == c {\n\
    \        return a == c || a == -b;\n    }\n    // if both are equal, return true\
    \ if one is 90 degree\n    if a == c && b == c {\n        return b == -b;\n  \
    \  }\n    // if both are equal, return true if one is 90 degree\n    if a == c\
    \ && b == -b {\n        return a == -b;\n    }\n    // if both are equal, return\
    \ true if one is 90 degree\n    if a == -b && b == -c {\n        return a == c;\n\
    \    }\n    // if both are equal, return true if one is 90 degree\n    if a ==\
    \ -b && b == c {\n        return a == c;\n    }\n    // if both are equal, return\
    \ true if one is 90 degree\n    if a == -b && b == -b {\n        return a == -c;\n\
    \    }\n    // if both are equal, return true if one is 90 degree\n    if a ==\
    \ -b && b == c {\n        return a == c;\n    }\n    // if both are equal, return\
    \ true if one is 90 degree\n    if a == -b && b == -b {\n        return a == -c;\n\
    \    }\n    // if both are equal, return true if one is 90 degree\n    if a ==\
    \ -b && b == c {\n        return a == -c;\n    }\n    // if both are equal, return\
    \ true if one is 90 degree\n    if a == -c && b == -c {\n        return true;\n\
    \    }\n    // if both are equal, return true if one is 90 degree\n    if a ==\
    \ -c && b == c {\n        return true;\n    }\n    // if both are equal, return\
    \ true if one is 90 degree\n    if a == -c && b == -b {\n        return true;\n\
    \    }\n    // if both are equal, return true if one is 90 degree\n    if a ==\
    \ c && b == -b {\n        return true;\n    }\n    // if both are equal, return\
    \ true if one is 90 degree\n    if a == c && b == c {\n        return true;\n\
    \    }\n    // if both are equal, return true if one is 90 degree\n    if a ==\
    \ c && b == -b {\n        return true;\n    }\n    // if both are equal, return\
    \ true if one is 90 degree\n    if a == -b && b == -c {\n        return true;\n\
    \    }\n    // if \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmp4ruuienm.rs:88:5\n\
    \   |\n10 |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                                            ---- expected\
    \ `bool` because of this return type\n...\n88 | /     if a == -b && b == -c {\n\
    89 | |         return true;\n90 | |     }\n   | |_____^ expected `bool`, found\
    \ `()`\n   |\n   = note: `if` expressions without `else` evaluate to `()`\n  \
    \ = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).is_positive() && \n    ((c > a) && (c < b)) || \n    ((c < a)\
    \ && (c > b))\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n \
    \   assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq0kxntaj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let is_90_degree = a == b && (b != c || a != c)\n    let is_right_angle\
    \ = a < b && b < c\n    !is_90_degree && !is_right_angle\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxhfrgo4r.rs:11:52\n\
    \   |\n11 |     let is_90_degree = a == b && (b != c || a != c)\n   |        \
    \                                            ^ help: add `;` here\n12 |     let\
    \ is_right_angle = a < b && b < c\n   |     --- unexpected token\n\nerror: expected\
    \ one of `(`, `[`, or `{`, found `is_90_degree`\n  --> /tmp/tmpxhfrgo4r.rs:13:6\n\
    \   |\n13 |     !is_90_degree && !is_right_angle\n   |      ^^^^^^^^^^^^ expected\
    \ one of `(`, `[`, or `{`\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a == b\n        && b == c\n        || (a + b == c || b + c == a)\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5pw1f_zg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpal_arop1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    \n    // Calculate the area of the triangle\n    let area_a = a * b;\n\
    \    let area_b = a * c;\n    let area_c = b * c;\n    \n    // Calculate the\
    \ perimeter\n    let perimeter = area_a + area_b + area_c;\n    \n    // Calculate\
    \ the hypotenus\n    let hypotenus = sqrt(area_a * area_a + area_b * area_b +\
    \ area_c * area_c);\n    \n    // Determine whether the right angle is 90 degree\n\
    \    let right_angle = cmp::min(area_b, area_c);\n    \n    // Calculate the area\
    \ of the triangle with the hypotenus\n    let triangle_area = area_a * hypotenus;\n\
    \    \n    // Return true if the right angle is 90 degree or greater \n    if\
    \ right_angle >= area_c {\n        if triangle_area >= area_c {\n            true\n\
    \        } else {\n            false\n        }\n    } else {\n        if triangle_area\
    \ >= area_a {\n            true\n        } else {\n            false\n       \
    \ }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpvkq60f8u.rs:24:23\n   |\n24 |     let right_angle = cmp::min(area_b,\
    \ area_c);\n   |                       ^^^ use of undeclared crate or module `cmp`\n\
    \nerror[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpvkq60f8u.rs:21:21\n\
    \   |\n21 |     let hypotenus = sqrt(area_a * area_a + area_b * area_b + area_c\
    \ * area_c);\n   |                     ^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || c + a > b || b + c > a {\n        return false;\n   \
    \ }\n    let angle = 180 + f64::asin(c / a) as f64;\n    let angle = 180 - angle\
    \ as f64;\n    angle > 90.0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq7y_mbnl.rs:14:33\n   |\n\
    14 |     let angle = 180 + f64::asin(c / a) as f64;\n   |                    \
    \             ^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n14 |     let angle = 180 + f64::asin((c / a) as\
    \ f64) as f64;\n   |                                 +     ++++++++\n\nerror[E0277]:\
    \ cannot add `f64` to `{integer}`\n  --> /tmp/tmpq7y_mbnl.rs:14:21\n   |\n14 |\
    \     let angle = 180 + f64::asin(c / a) as f64;\n   |                     ^ no\
    \ implementation for `{integer} + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot subtract `f64` from `{integer}`\n\
    \  --> /tmp/tmpq7y_mbnl.rs:15:21\n   |\n15 |     let angle = 180 - angle as f64;\n\
    \   |                     ^ no implementation for `{integer} - f64`\n   |\n  \
    \ = help: the trait `Sub<f64>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978475
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n\n    if a + c > b {\n\
    \        return false;\n    }\n\n    if b + c > a {\n        return false;\n \
    \   }\n\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpml5mlb4a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978476
