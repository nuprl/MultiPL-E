language: rs
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.len() {\n\
    \        0 => return string,\n        _ => {\n            let mut string = string.clone();\n\
    \            string.chars().filter(|c| c.is_uppercase()).for_each(|c| c.to_ascii_lowercase());\n\
    \            string.chars().filter(|c| c.is_lowercase()).for_each(|c| c.to_ascii_uppercase());\n\
    \            string\n        }\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnxfxbds7.rs:9:70\n  |\n9 |\
    \             string.chars().filter(|c| c.is_uppercase()).for_each(|c| c.to_ascii_lowercase());\n\
    \  |                                                                      ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnxfxbds7.rs:10:70\n\
    \   |\n10 |             string.chars().filter(|c| c.is_lowercase()).for_each(|c|\
    \ c.to_ascii_uppercase());\n   |                                             \
    \                         ^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c.to_ascii_lowercase(),\n        'a' .. 'z'\
    \ => c.to_ascii_uppercase(),\n        _ => c,\n    })\n    .collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp4gsg6khl.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => c.to_ascii_lowercase(),\n  |         ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmp4gsg6khl.rs:7:9\n  |\n7 |         'a' .. 'z' => c.to_ascii_uppercase(),\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().enumerate().map(|(i,\
    \ c)| (c, if i % 2 == 0 { c.to_lowercase() } else { c.to_uppercase() } )).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpidog3mvf.rs:5:91\n\
    \  |\n5 |     string.chars().enumerate().map(|(i, c)| (c, if i % 2 == 0 { c.to_lowercase()\
    \ } else { c.to_uppercase() } )).collect()\n  |                              \
    \                                   ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToLowercase`, found struct `ToUppercase`\n  |             \
    \                                                    |\n  |                  \
    \                                               expected because of this\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    if string.is_empty() {\n\
    \        string\n    } else {\n        let mut iter = string.chars().enumerate();\n\
    \        let mut next = match iter.next() {\n            None => return string,\n\
    \            Some((index, c)) if index == 0 => String::from(\"_\"),\n        \
    \    Some((index, c)) if c.is_lowercase() => String::from(\"_\"),\n          \
    \  Some((index, c)) => c,\n        };\n        while let Some(index) = iter.next()\
    \ {\n            if index == 0 {\n                next = match iter.next() {\n\
    \                    None => return string,\n                    Some((index,\
    \ c)) if index == 0 => String::from(\"_\"),\n                    Some((index,\
    \ c)) if c.is_lowercase() => String::from(\"_\"),\n                    Some((index,\
    \ c)) => c,\n                };\n            } else {\n                next =\
    \ match iter.next() {\n                    None => return string,\n          \
    \          Some((index, c)) if index == 0 => String::from(\"_\"),\n          \
    \          Some((index, c)) if c.is_lowercase() => String::from(\"_\"),\n    \
    \                Some((index, c)) => c,\n                };\n            }\n \
    \       }\n        String::from(next)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpg9_cxoyg.rs:13:33\n\
    \   |\n9  |           let mut next = match iter.next() {\n   |  ________________________-\n\
    10 | |             None => return string,\n   | |                     -------------\
    \ this is found to be of type `String`\n11 | |             Some((index, c)) if\
    \ index == 0 => String::from(\"_\"),\n   | |                                 \
    \              ----------------- this is found to be of type `String`\n12 | |\
    \             Some((index, c)) if c.is_lowercase() => String::from(\"_\"),\n \
    \  | |                                                     ----------------- this\
    \ is found to be of type `String`\n13 | |             Some((index, c)) => c,\n\
    \   | |                                 ^- help: try using a conversion method:\
    \ `.to_string()`\n   | |                                 |\n   | |           \
    \                      expected struct `String`, found `char`\n14 | |        \
    \ };\n   | |_________- `match` arms have incompatible types\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg9_cxoyg.rs:16:25\n   |\n16 |             if index == 0\
    \ {\n   |                         ^ expected tuple, found integer\n   |\n   =\
    \ note: expected tuple `(usize, char)`\n               found type `{integer}`\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpg9_cxoyg.rs:21:41\n\
    \   |\n17 |                   next = match iter.next() {\n   |  ________________________-\n\
    18 | |                     None => return string,\n   | |                    \
    \         ------------- this is found to be of type `String`\n19 | |         \
    \            Some((index, c)) if index == 0 => String::from(\"_\"),\n   | |  \
    \                                                     ----------------- this is\
    \ found to be of type `String`\n20 | |                     Some((index, c)) if\
    \ c.is_lowercase() => String::from(\"_\"),\n   | |                           \
    \                                  ----------------- this is found to be of type\
    \ `String`\n21 | |                     Some((index, c)) => c,\n   | |        \
    \                                 ^- "
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().enumerate().filter(|(i,\
    \ c)| c.is_ascii_lowercase()).map(|(i, c)| {\n        c ^ ('A' as u8) - ('A' as\
    \ u8)\n    }).collect().collect::<String>().to_string()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: no implementation for `char ^ u8`\n --> /tmp/tmpnngzntmn.rs:6:11\n\
    \  |\n6 |         c ^ ('A' as u8) - ('A' as u8)\n  |         - ^ -------------------------\
    \ u8\n  |         |\n  |         char\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut string = string.to_string();\n\
    \n    // Convert to lowercase\n    string.chars().for_each(|c| {\n        if c\
    \ >= 'A' && c <= 'Z' {\n            *c = c ^ 'a' - 'A';\n        }\n    });\n\n\
    \    // Convert to uppercase\n    string.chars().for_each(|c| {\n        if c\
    \ >= 'a' && c <= 'z' {\n            *c = c ^ 'A' - 'a';\n        }\n    });\n\n\
    \    string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpcs21w2wm.rs:10:13\n\
    \   |\n10 |             *c = c ^ 'a' - 'A';\n   |             ^^\n\nerror[E0369]:\
    \ cannot subtract `char` from `char`\n  --> /tmp/tmpcs21w2wm.rs:10:26\n   |\n\
    10 |             *c = c ^ 'a' - 'A';\n   |                      --- ^ --- char\n\
    \   |                      |\n   |                      char\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmpcs21w2wm.rs:17:13\n   |\n\
    17 |             *c = c ^ 'A' - 'a';\n   |             ^^\n\nerror[E0369]: cannot\
    \ subtract `char` from `char`\n  --> /tmp/tmpcs21w2wm.rs:17:26\n   |\n17 |   \
    \          *c = c ^ 'A' - 'a';\n   |                      --- ^ --- char\n   |\
    \                      |\n   |                      char\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0369, E0614.\n\
    For more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .filter(|c| !c.is_ascii_lowercase())\n        .map(|c| if c.is_ascii_uppercase()\
    \ { c } else { c.to_ascii_lowercase() })\n        .collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"H!\"`,\n right: `\"hELLO!\"`', /tmp/tmpf2d8m5jk.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars() {\n\
    \        chars => String::from_utf8(\n            chars\n                .iter()\n\
    \                .map(|c| match c.to_lowercase() { Some(c) => c, None => c })\n\
    \                .collect::<Vec<_>>(),\n        ),\n    }\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmplhbx07gz.rs:8:18\n  |\n8 |                 .iter()\n  |\
    \                  ^^^^ private field, not a method\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplhbx07gz.rs:6:18\n   |\n4  |   fn flip_case(string: String)\
    \ -> String {\n   |                                   ------ expected `String`\
    \ because of return type\n5  |       match string.chars() {\n6  |           chars\
    \ => String::from_utf8(\n   |  __________________^\n7  | |             chars\n\
    8  | |                 .iter()\n9  | |                 .map(|c| match c.to_lowercase()\
    \ { Some(c) => c, None => c })\n10 | |                 .collect::<Vec<_>>(),\n\
    11 | |         ),\n   | |_________^ expected struct `String`, found enum `Result`\n\
    \   |\n   = note: expected struct `String`\n                found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpw90gcv54.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut reversed = string;\n\
    \    reversed.chars().for_each(|c| {\n        if c.is_lowercase() {\n        \
    \    *c = c.to_uppercase();\n        } else if c.is_uppercase() {\n          \
    \  *c = c.to_lowercase();\n        }\n    });\n    reversed\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpu453y2hx.rs:8:13\n\
    \  |\n8 |             *c = c.to_uppercase();\n  |             ^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmpu453y2hx.rs:10:13\n   |\n\
    10 |             *c = c.to_lowercase();\n   |             ^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => char::from_digit(c - 'a' + 10).unwrap(),\n\
    \        'A' .. 'Z' => char::from_digit(c - 'A' + 10).unwrap(),\n        _ =>\
    \ c,\n    }).collect::<String>().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpx2n55w9f.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => char::from_digit(c - 'a' + 10).unwrap(),\n  |\
    \         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpx2n55w9f.rs:7:9\n  |\n7 |         'A' .. 'Z' => char::from_digit(c\
    \ - 'A' + 10).unwrap(),\n  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854\
    \ <https://github.com/rust-lang/rust/issues/37854> for more information\n\nerror[E0369]:\
    \ cannot subtract `char` from `char`\n --> /tmp/tmpx2n55w9f.rs:6:42\n  |\n6 |\
    \         'a' .. 'z' => char::from_digit(c - 'a' + 10).unwrap(),\n  |        \
    \                                - ^ --- char\n  |                           \
    \             |\n  |                                        char\n\nerror[E0061]:\
    \ this function takes 2 arguments but 1 argument was supplied\n   --> /tmp/tmpx2n55w9f.rs:6:23\n\
    \    |\n6   |         'a' .. 'z' => char::from_digit(c - 'a' + 10).unwrap(),\n\
    \    |                       ^^^^^^^^^^^^^^^^ ------------ supplied 1 argument\n\
    \    |                       |\n    |                       expected 2 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0369]: cannot subtract\
    \ `char` from `char`\n --> /tmp/tmpx2n55w9f.rs:7:42\n  |\n7 |         'A' .. 'Z'\
    \ => char::from_digit(c - 'A' + 10).unwrap(),\n  |                           \
    \             - ^ --- char\n  |                                        |\n  |\
    \                                        char\n\nerror[E0061]: this function takes\
    \ 2 arguments but 1 argument was supplied\n   --> /tmp/tmpx2n55w9f.rs:7:23\n \
    \   |\n7   |         'A' .. 'Z' => char::from_digit(c - 'A' + 10).unwrap(),\n\
    \    |                       ^^^^^^^^^^^^^^^^ ------------ supplied 1 argument\n\
    \    |                       |\n    |                       expected 2 arguments\n\
    \    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0369, E0658.\nFor\
    \ m"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_lowercase().to_ascii_uppercase())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpz03l94t4.rs:12:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| c.to_ascii_lowercase().into())\n        .chain(string.chars().map(|c|\
    \ c.to_ascii_uppercase().into()))\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpa95znr7g.rs:6:10\n\
    \  |\n6 |         .map(|c| c.to_ascii_lowercase().into())\n  |          ^^^ cannot\
    \ infer type for type parameter `B` declared on the associated function `map`\n\
    7 |         .chain(string.chars().map(|c| c.to_ascii_uppercase().into()))\n  |\
    \                                       ----------------------------- this method\
    \ call resolves to `T`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            'a' => (c as u8) as char,\n         \
    \   _ => (c as u8) as char,\n        })\n        .collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpaiobjfu1.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().rev().chain(string.chars())\n\
    \        .cloned()\n        .map(|c| match c {\n            'A' -> 'a';\n    \
    \        'a' -> 'A';\n            _ -> c,\n        })\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `->`\n\
    \ --> /tmp/tmpee3jfm72.rs:8:17\n  |\n8 |             'A' -> 'a';\n  |        \
    \         ^^\n  |                 |\n  |                 expected one of `...`,\
    \ `..=`, `..`, `=>`, `if`, or `|`\n  |                 help: try using a fat arrow\
    \ here: `=>`\n\nerror: expected one of `,`, `.`, `?`, `}`, or an operator, found\
    \ `;`\n --> /tmp/tmpee3jfm72.rs:8:23\n  |\n8 |             'A' -> 'a';\n  |  \
    \               --    ^ expected one of `,`, `.`, `?`, `}`, or an operator\n \
    \ |                 |\n  |                 while parsing the `match` arm starting\
    \ here\n\nerror[E0271]: type mismatch resolving `<std::iter::Chain<Rev<Chars<'_>>,\
    \ Chars<'_>> as Iterator>::Item == &_`\n    --> /tmp/tmpee3jfm72.rs:6:10\n   \
    \  |\n6    |         .cloned()\n     |          ^^^^^^ expected reference, found\
    \ `char`\n     |\n     = note: expected reference `&_`\n                     found\
    \ type `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `map` exists for struct `Cloned<std::iter::Chain<Rev<Chars<'_>>, Chars<'_>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpee3jfm72.rs:7:10\n  \
    \ |\n7  |           .map(|c| match c {\n   |            ^^^ method cannot be called\
    \ on `Cloned<std::iter::Chain<Rev<Chars<'_>>, Chars<'_>>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::iter::Chain<Rev<Chars<'_>>, Chars<'_>> as Iterator>::Item =\
    \ &_`\n           which is required by `Cloned<std::iter::Chain<Rev<Chars<'_>>,\
    \ Chars<'_>>>: Iterator`\n           `Cloned<std::iter::Chain<Rev<Chars<'_>>,\
    \ Chars<'_>>>: Iterator`\n           which is required by `&mut Cloned<std::iter::Chain<Rev<Chars<'_>>,\
    \ Chars<'_>>>: Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c == 'a' { 'A' } else if c == 'A' { 'a' }\n        else if c ==\
    \ 'b' { 'B' } else if c == 'B' { 'b' }\n        else if c == 'c' { 'C' } else\
    \ if c == 'C' { 'c' }\n        else if c == 'd' { 'D' } else if c == 'D' { 'd'\
    \ }\n        else if c == 'e' { 'E' } else if c == 'E' { 'e' }\n        else if\
    \ c == 'f' { 'F' } else if c == 'F' { 'f' }\n        else if c == 'g' { 'G' }\
    \ else if c == 'G' { 'g' }\n        else if c == 'h' { 'H' } else if c == 'H'\
    \ { 'h' }\n        else if c == 'i' { 'I' } else if c == 'I' { 'i' }\n       \
    \ else if c == 'j' { 'J' } else if c == 'J' { 'j' }\n        else if c == 'k'\
    \ { 'K' } else if c == 'K' { 'k' }\n        else if c == 'l' { 'L' } else if c\
    \ == 'L' { 'l' }\n        else if c == 'm' { 'M' } else if c == 'M' { 'm' }\n\
    \        else if c == 'n' { 'N' } else if c == 'N' { 'n' }\n        else if c\
    \ == 'o' { 'O' } else if c == 'O' { 'o' }\n        else if c == 'p' { 'P' } else\
    \ if c == 'P' { 'p' }\n        else if c == 'q' { 'Q' } else if c == 'Q' { 'q'\
    \ }\n        else if c == 'r' { 'R' } else if c == 'R' { 'r' }\n        else if\
    \ c == 's' { 'S' } else if c == 'S' { 's' }\n        else if c == 't' { 'T' }\
    \ else if c == 'T' { 't' }\n        else if c == 'u' { 'U' } else if c == 'U'\
    \ { 'u' }\n        else if c == 'v' { 'V' } else if c == 'V' { 'v' }\n       \
    \ else if c == 'w' { 'W' } else if c == 'W' { 'w' }\n        else if c == 'x'\
    \ { 'X' } else if c == 'X' { 'x' }\n        else if c == 'y' { 'Y' } else if c\
    \ == 'Y' { 'y' }\n        else if c == 'z' { 'Z' } else if c == 'Z' { 'z' }\n\
    \        else { c })\n        .collect::<String\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpybqrcq9g.rs:34:1\n   |\n33 |         .collect::<String\n\
    \   |                          - expected one of 9 possible tokens\n34 | }\n \
    \  | ^ unexpected token\n   |\nhelp: you might have meant to end the type parameters\
    \ here\n   |\n33 |         .collect::<String>\n   |                          +\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().fold(string,\
    \ |result, c| match c {\n        'A' | 'a' => result.to_ascii_uppercase(),\n \
    \       'B' | 'b' => result.to_ascii_lowercase(),\n        'C' | 'c' => result.to_ascii_uppercase().to_ascii_lowercase(),\n\
    \        'D' | 'd' => result.to_ascii_lowercase(),\n        'E' | 'e' => result.to_ascii_uppercase(),\n\
    \        'F' | 'f' => result.to_ascii_lowercase(),\n        'G' | 'g' => result.to_ascii_uppercase(),\n\
    \        'H' | 'h' => result.to_ascii_lowercase(),\n        _ => result,\n   \
    \ })\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0505]: cannot move out of `string` because it is borrowed\n -->\
    \ /tmp/tmpcev70k6r.rs:5:25\n  |\n5 |     string.chars().fold(string, |result,\
    \ c| match c {\n  |     -------------- ---- ^^^^^^ move out of `string` occurs\
    \ here\n  |     |              |\n  |     |              borrow later used by\
    \ call\n  |     borrow of `string` occurs here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0505`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => (c.to_ascii_lowercase(), c.to_ascii_uppercase()),\n\
    \        _ => (c.to_ascii_uppercase(), c.to_ascii_lowercase()),\n    })\n    .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpv5gq88f1.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => (c.to_ascii_lowercase(), c.to_ascii_uppercase()),\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0277]: a value of type `String` cannot be built\
    \ from an iterator over elements of type `(char, char)`\n    --> /tmp/tmpv5gq88f1.rs:9:6\n\
    \     |\n9    |     .collect()\n     |      ^^^^^^^ value of type `String` cannot\
    \ be built from `std::iter::Iterator<Item=(char, char)>`\n     |\n     = help:\
    \ the trait `FromIterator<(char, char)>` is not implemented for `String`\n   \
    \  = help: the following other types implement trait `FromIterator<A>`:\n    \
    \           <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0658.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_ascii_lowercase().into_uppercase().to_ascii_lowercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_uppercase` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpoxwx26wm.rs:5:33\n  |\n5 |     string.to_ascii_lowercase().into_uppercase().to_ascii_lowercase()\n\
    \  |                                 ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `to_uppercase`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter_map(|c| match c {\n            c @ b'a' => (b'A' as u8) as u8\
    \ | c,\n            c @ b'A' => (b'a' as u8) as u8 | c,\n            _ => c,\n\
    \        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu2x53b4i.rs:8:17\n  |\n7 |\
    \         .filter_map(|c| match c {\n  |                               - this\
    \ expression has type `char`\n8 |             c @ b'a' => (b'A' as u8) as u8 |\
    \ c,\n  |                 ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpu2x53b4i.rs:9:17\n  |\n7 |         .filter_map(|c| match\
    \ c {\n  |                               - this expression has type `char`\n8\
    \ |             c @ b'a' => (b'A' as u8) as u8 | c,\n9 |             c @ b'A'\
    \ => (b'a' as u8) as u8 | c,\n  |                 ^^^^ expected `char`, found\
    \ `u8`\n\nerror[E0277]: no implementation for `u8 | char`\n --> /tmp/tmpu2x53b4i.rs:8:44\n\
    \  |\n8 |             c @ b'a' => (b'A' as u8) as u8 | c,\n  |               \
    \                             ^ no implementation for `u8 | char`\n  |\n  = help:\
    \ the trait `BitOr<char>` is not implemented for `u8`\n  = help: the following\
    \ other types implement trait `BitOr<Rhs>`:\n            <&'a i128 as BitOr<i128>>\n\
    \            <&'a i16 as BitOr<i16>>\n            <&'a i32 as BitOr<i32>>\n  \
    \          <&'a i64 as BitOr<i64>>\n            <&'a i8 as BitOr<i8>>\n      \
    \      <&'a isize as BitOr<isize>>\n            <&'a u128 as BitOr<u128>>\n  \
    \          <&'a u16 as BitOr<u16>>\n          and 52 others\n\nerror[E0277]: no\
    \ implementation for `u8 | char`\n --> /tmp/tmpu2x53b4i.rs:9:44\n  |\n9 |    \
    \         c @ b'A' => (b'a' as u8) as u8 | c,\n  |                           \
    \                 ^ no implementation for `u8 | char`\n  |\n  = help: the trait\
    \ `BitOr<char>` is not implemented for `u8`\n  = help: the following other types\
    \ implement trait `BitOr<Rhs>`:\n            <&'a i128 as BitOr<i128>>\n     \
    \       <&'a i16 as BitOr<i16>>\n            <&'a i32 as BitOr<i32>>\n       \
    \     <&'a i64 as BitOr<i64>>\n            <&'a i8 as BitOr<i8>>\n           \
    \ <&'a isize as BitOr<isize>>\n            <&'a u128 as BitOr<u128>>\n       \
    \     <&'a u16 as BitOr<u16>>\n          and 52 others\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n  --> /tmp/tmpu2x53b4i.rs:10:18\n   |\n7  |  \
    \         .fi"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut string = string.to_lowercase();\n\
    \    for c in string.chars().cloned() {\n        *c = match c.to_lowercase() {\n\
    \            'A' | 'a' => c.to_uppercase(),\n            _ => c,\n        };\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmp9062z1ga.rs:6:29\n     |\n6    |     for c in string.chars().cloned()\
    \ {\n     |                             ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0271]: type mismatch\
    \ resolving `<Chars<'_> as Iterator>::Item == &_`\n --> /tmp/tmp9062z1ga.rs:6:14\n\
    \  |\n6 |     for c in string.chars().cloned() {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found reference\n  |\n  = note:   expected type `char`\n  \
    \        found reference `&_`\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<Chars<'_>>`\n  = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `Cloned<Chars<'_>>`\n\n\
    error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \ --> /tmp/tmp9062z1ga.rs:6:14\n  |\n6 |     for c in string.chars().cloned()\
    \ {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \  |\n  = note:   expected type `char`\n          found reference `&_`\n  = note:\
    \ required because of the requirements on the impl of `Iterator` for `Cloned<Chars<'_>>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp7jmto6x6.rs:6:66\n\
    \  |\n6 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result: String\
    \ = string;\n    let mut i = 0;\n    while i < result.len() {\n        if result.chars().any(|c|\
    \ c.to_lowercase() == c) {\n            result[i] = result.chars().find(|c| c.to_uppercase()\
    \ == c).unwrap();\n        } else {\n            result[i] = result.chars().find(|c|\
    \ c.to_uppercase() == c).unwrap();\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: binary operation `==` cannot be applied to type `ToLowercase`\n\
    \ --> /tmp/tmp92uf8l7h.rs:8:52\n  |\n8 |         if result.chars().any(|c| c.to_lowercase()\
    \ == c) {\n  |                                   ---------------- ^^ - char\n\
    \  |                                   |\n  |                                \
    \   ToLowercase\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \ --> /tmp/tmp92uf8l7h.rs:9:13\n  |\n9 |             result[i] = result.chars().find(|c|\
    \ c.to_uppercase() == c).unwrap();\n  |             ^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0369]: binary operation `==` cannot be applied to type `ToUppercase`\n\
    \ --> /tmp/tmp92uf8l7h.rs:9:66\n  |\n9 |             result[i] = result.chars().find(|c|\
    \ c.to_uppercase() == c).unwrap();\n  |                                      \
    \           ---------------- ^^ - &char\n  |                                 \
    \                |\n  |                                                 ToUppercase\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp92uf8l7h.rs:11:13\n\
    \   |\n11 |             result[i] = result.chars().find(|c| c.to_uppercase() ==\
    \ c).unwrap();\n   |             ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<Range"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c @ b'A' => c @ b'a' as u8,\n        _ => c,\n    })\n  \
    \  .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `@`\n --> /tmp/tmpv0x4d3xp.rs:6:23\n  |\n6 |         c @ b'A' => c @ b'a'\
    \ as u8,\n  |                  --   ^ expected one of 8 possible tokens\n  | \
    \                 |\n  |                  while parsing the `match` arm starting\
    \ here\n\nerror[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `()`\n    --> /tmp/tmpv0x4d3xp.rs:9:6\n     |\n9    |\
    \     .collect()\n     |      ^^^^^^^ value of type `String` cannot be built from\
    \ `std::iter::Iterator<Item=()>`\n     |\n     = help: the trait `FromIterator<()>`\
    \ is not implemented for `String`\n     = help: the following other types implement\
    \ trait `FromIterator<A>`:\n               <String as FromIterator<&'a char>>\n\
    \               <String as FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => match c {\n            'A' .. 'Z' => c,\n \
    \           _ => c.to_uppercase().to_string()\n        },\n        'A' .. 'Z'\
    \ => match c {\n            'a' .. 'z' => c,\n            _ => c.to_lowercase().to_string()\n\
    \        },\n        _ => c\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpk91j8v54.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => match c {\n  |         ^^^^^^^^^^\n  |\n  = note:\
    \ see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpk91j8v54.rs:7:13\n\
    \  |\n7 |             'A' .. 'Z' => c,\n  |             ^^^^^^^^^^\n  |\n  = note:\
    \ see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpk91j8v54.rs:10:9\n\
    \   |\n10 |         'A' .. 'Z' => match c {\n   |         ^^^^^^^^^^\n   |\n \
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpk91j8v54.rs:11:13\n   |\n11 |             'a' .. 'z' => c,\n  \
    \ |             ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \ --> /tmp/tmpk91j8v54.rs:8:18\n  |\n6 |           'a' .. 'z' => match c {\n \
    \ |  _______________________-\n7 | |             'A' .. 'Z' => c,\n  | |     \
    \                      - this is found to be of type `char`\n8 | |           \
    \  _ => c.to_uppercase().to_string()\n  | |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n9 | |         },\n  | |_________- `match`\
    \ arms have incompatible types\n\nerror[E0308]: `match` arms have incompatible\
    \ types\n  --> /tmp/tmpk91j8v54.rs:12:18\n   |\n10 |           'A' .. 'Z' => match\
    \ c {\n   |  _______________________-\n11 | |             'a' .. 'z' => c,\n \
    \  | |                           - this is found to be of type `char`\n12 | |\
    \             _ => c.to_lowercase().to_string()\n   | |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n13 | |         },\n   | |_________-\
    \ `match` arms have incompatible types\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors hav"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpe8il80ir.rs:7:34\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         c if c.is_lowercase() => c.to_uppercase(),\n  | |              \
    \                    ---------------- this is found to be of type `ToUppercase`\n\
    7 | |         c if c.is_uppercase() => c.to_lowercase(),\n  | |              \
    \                    ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct\
    \ `ToLowercase`\n8 | |         _ => c,\n9 | |     }).collect::<String>()\n  |\
    \ |_____- `match` arms have incompatible types\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp7jgyj9vk.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c >= 'a' && c <= 'z' { c + 32 - 'a' }\n                else  \
    \           { c })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `char`\n --> /tmp/tmptg27pq5t.rs:6:46\n\
    \  |\n6 |         .map(|c| if c >= 'a' && c <= 'z' { c + 32 - 'a' }\n  |     \
    \                                       - ^ -- {integer}\n  |                \
    \                            |\n  |                                          \
    \  char\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            b'A' .. b'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c.to_ascii_uppercase(),\n        })\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpk6unvrc6.rs:7:13\n\
    \  |\n7 |             b'A' .. b'Z' => c.to_ascii_lowercase(),\n  |           \
    \  ^^^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk6unvrc6.rs:7:13\n\
    \  |\n6 |         .map(|c| match c {\n  |                        - this expression\
    \ has type `char`\n7 |             b'A' .. b'Z' => c.to_ascii_lowercase(),\n \
    \ |             ^^^^    ---- this is of type `u8`\n  |             |\n  |    \
    \         expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpk6unvrc6.rs:7:21\n  |\n6 |         .map(|c| match c {\n  |         \
    \               - this expression has type `char`\n7 |             b'A' .. b'Z'\
    \ => c.to_ascii_lowercase(),\n  |             ----    ^^^^ expected `char`, found\
    \ `u8`\n  |             |\n  |             this is of type `u8`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0658.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.into_uppercase().to_lowercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_uppercase` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp9kre6u_y.rs:5:12\n  |\n5 |     string.into_uppercase().to_lowercase()\n\
    \  |            ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `to_uppercase`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpw90gcv54.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| c.to_ascii_lowercase().to_ascii_uppercase())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpgvjjabbr.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpw90gcv54.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().filter_map(|c|\
    \ match c {\n        c @ b'a'..b'z' => (c as u32)..(b'z' as u32).saturating_add((b'a'\
    \ as u32) as u32)..(b'A' as u32) as u8,\n        c @ b'A'..b'Z' => (c as u32)..(b'Z'\
    \ as u32).saturating_add((b'A' as u32) as u32)..(b'a' as u32) as u8,\n       \
    \ _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `..`\n\
    \ --> /tmp/tmptvxgikjg.rs:6:89\n  |\n6 |         c @ b'a'..b'z' => (c as u32)..(b'z'\
    \ as u32).saturating_add((b'a' as u32) as u32)..(b'A' as u32) as u8,\n  |    \
    \                    -- while parsing the `match` arm starting here          \
    \         ^^ expected one of `,`, `.`, `?`, `}`, or an operator\n\nerror[E0282]:\
    \ type annotations needed\n --> /tmp/tmptvxgikjg.rs:5:20\n  |\n5 |     string.chars().filter_map(|c|\
    \ match c {\n  |                    ^^^^^^^^^^ cannot infer type for type parameter\
    \ `B` declared on the associated function `filter_map`\n  |\nhelp: consider specifying\
    \ the type arguments in the method call\n  |\n5 |     string.chars().filter_map::<B,\
    \ F>(|c| match c {\n  |                              ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            _ => c.to_lowercase(),\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpynnu2d3_.rs:9:18\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    9  | |             _ => c.to_lowercase(),\n   | |                  ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c @ ('A' as u8..='Z' as u8) => {\n            'a' <= c &&\
    \ c <= 'z' as char\n        }\n        c @ ('a'..='z' as u8) => {\n          \
    \  'A' <= c && c <= 'Z' as char\n        }\n        _ => c,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `as`\n --> /tmp/tmpjgtgoy07.rs:6:18\n\
    \  |\n6 |         c @ ('A' as u8..='Z' as u8) => {\n  |                  ^^ expected\
    \ identifier, found keyword\n\nerror: expected one of `)`, `,`, `...`, `..=`,\
    \ `..`, or `|`, found keyword `as`\n --> /tmp/tmpjgtgoy07.rs:6:18\n  |\n6 |  \
    \       c @ ('A' as u8..='Z' as u8) => {\n  |                 -^^ expected one\
    \ of `)`, `,`, `...`, `..=`, `..`, or `|`\n  |                 |\n  |        \
    \         help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found\
    \ `u8`\n --> /tmp/tmpjgtgoy07.rs:6:21\n  |\n6 |         c @ ('A' as u8..='Z' as\
    \ u8) => {\n  |                    -^^ expected one of `)`, `,`, `@`, or `|`\n\
    \  |                    |\n  |                    help: missing `,`\n\nerror:\
    \ expected identifier, found keyword `as`\n --> /tmp/tmpjgtgoy07.rs:6:30\n  |\n\
    6 |         c @ ('A' as u8..='Z' as u8) => {\n  |                            \
    \  ^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, or\
    \ `|`, found keyword `as`\n --> /tmp/tmpjgtgoy07.rs:6:30\n  |\n6 |         c @\
    \ ('A' as u8..='Z' as u8) => {\n  |                             -^^ expected one\
    \ of `)`, `,`, or `|`\n  |                             |\n  |                \
    \             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`,\
    \ found `u8`\n --> /tmp/tmpjgtgoy07.rs:6:33\n  |\n6 |         c @ ('A' as u8..='Z'\
    \ as u8) => {\n  |                                -^^ expected one of `)`, `,`,\
    \ `@`, or `|`\n  |                                |\n  |                     \
    \           help: missing `,`\n\nerror: expected identifier, found keyword `as`\n\
    \ --> /tmp/tmpjgtgoy07.rs:9:24\n  |\n9 |         c @ ('a'..='z' as u8) => {\n\
    \  |                        ^^ expected identifier, found keyword\n\nerror: expected\
    \ one of `)`, `,`, or `|`, found keyword `as`\n --> /tmp/tmpjgtgoy07.rs:9:24\n\
    \  |\n9 |         c @ ('a'..='z' as u8) => {\n  |                       -^^ expected\
    \ one of `)`, `,`, or `|`\n  |                       |\n  |                  \
    \     help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, f"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_string().chars().iter().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmp4ao74t_v.rs:5:32\n  |\n5 |     string.to_string().chars().iter().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()\n\
    \  |                                ^^^^ private field, not a method\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ b'A' => b'a',\n            c @ b'a'\
    \ => b'A',\n            c => c,\n        })\n        .collect::<String>()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpovf125ed.rs:8:17\n  |\n7 |\
    \         .map(|c| match c {\n  |                        - this expression has\
    \ type `char`\n8 |             c @ b'A' => b'a',\n  |                 ^^^^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpovf125ed.rs:9:17\n\
    \  |\n7 |         .map(|c| match c {\n  |                        - this expression\
    \ has type `char`\n8 |             c @ b'A' => b'a',\n9 |             c @ b'a'\
    \ => b'A',\n  |                 ^^^^ expected `char`, found `u8`\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmpovf125ed.rs:10:18\n   |\n\
    7  |           .map(|c| match c {\n   |  __________________-\n8  | |         \
    \    c @ b'A' => b'a',\n   | |                         ---- this is found to be\
    \ of type `u8`\n9  | |             c @ b'a' => b'A',\n   | |                 \
    \        ---- this is found to be of type `u8`\n10 | |             c => c,\n \
    \  | |                  ^ expected `u8`, found `char`\n11 | |         })\n   |\
    \ |_________- `match` arms have incompatible types\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut reversed = String::new();\n\
    \    for &c in string.chars() {\n        if c.is_lowercase() {\n            reversed.push_uppercase();\n\
    \        } else {\n            reversed.push_lowercase();\n        }\n    }\n\
    \    reversed\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpan15t4tr.rs:6:9\n  |\n6 |\
    \     for &c in string.chars() {\n  |         ^^    -------------- this expression\
    \ has type `Option<char>`\n  |         |\n  |         expected `char`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `c`\n  |\n  =\
    \ note:   expected type `char`\n          found reference `&_`\n\nerror[E0599]:\
    \ no method named `push_uppercase` found for struct `String` in the current scope\n\
    \ --> /tmp/tmpan15t4tr.rs:8:22\n  |\n8 |             reversed.push_uppercase();\n\
    \  |                      ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_uppercase`\n\nerror[E0599]: no method named `push_lowercase`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpan15t4tr.rs:10:22\n\
    \   |\n10 |             reversed.push_lowercase();\n   |                     \
    \ ^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.is_lowercase() {\n            c.to_uppercase()\n        } else\
    \ {\n            c.to_lowercase()\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp38anp6gr.rs:9:13\n\
    \   |\n6  |           .map(|c| if c.is_lowercase() {\n   |  __________________-\n\
    7  | |             c.to_uppercase()\n   | |             ---------------- expected\
    \ because of this\n8  | |         } else {\n9  | |             c.to_lowercase()\n\
    \   | |             ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct\
    \ `ToLowercase`\n10 | |         })\n   | |_________- `if` and `else` have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .chain(string.chars().map(|c| if c == 'a' { c } else if c == 'A' { c\
    \ } else { c })),\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n\
    \ --> /tmp/tmp1e91ftns.rs:7:92\n  |\n7 |         .chain(string.chars().map(|c|\
    \ if c == 'a' { c } else if c == 'A' { c } else { c })),\n  |                \
    \                                                                            ^\
    \ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c + &'a' - &'A',\n        'a' .. 'z' => c +\
    \ &'A' - &'a',\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpo0jj4z4u.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => c + &'a' - &'A',\n  |         ^^^^^^^^^^\n  |\n\
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpo0jj4z4u.rs:7:9\n  |\n7 |         'a' .. 'z' => c + &'A' - &'a',\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0369]: cannot add `&char` to `char`\n --> /tmp/tmpo0jj4z4u.rs:6:25\n\
    \  |\n6 |         'A' .. 'Z' => c + &'a' - &'A',\n  |                       -\
    \ ^ ---- &char\n  |                       |\n  |                       char\n\n\
    error[E0369]: cannot add `&char` to `char`\n --> /tmp/tmpo0jj4z4u.rs:7:25\n  |\n\
    7 |         'a' .. 'z' => c + &'A' - &'a',\n  |                       - ^ ----\
    \ &char\n  |                       |\n  |                       char\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0658.\nFor more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .to_uppercase()\n\
    \        .chars()\n        .map(|c| match c {\n            c => c,\n         \
    \   _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp1_n3gh4l.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut s = string.clone();\n\
    \    let mut buffer = Vec::new();\n    let mut i = 0;\n\n    for c in s.chars()\
    \ {\n        buffer.push(c);\n        if c.is_lowercase() {\n            buffer[i]\
    \ = c.to_uppercase();\n            i += 1;\n        }\n        if c.is_uppercase()\
    \ {\n            buffer[i] = c.to_lowercase();\n            i += 1;\n        }\n\
    \    }\n\n    String::from_utf8(buffer).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdylzzs_i.rs:12:25\n   |\n\
    12 |             buffer[i] = c.to_uppercase();\n   |             ---------   ^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToUppercase`\n   |             |\n   |      \
    \       expected due to the type of this binding\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdylzzs_i.rs:16:25\n   |\n16 |             buffer[i] = c.to_lowercase();\n\
    \   |             ---------   ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\
    \   |             |\n   |             expected due to the type of this binding\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdylzzs_i.rs:21:23\n   |\n21 |\
    \     String::from_utf8(buffer).unwrap()\n   |                       ^^^^^^ expected\
    \ `u8`, found `char`\n   |\n   = note: expected struct `Vec<u8>`\n           \
    \   found struct `Vec<char>`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A' ..= 'Z' => c - 32,\n        _ => c,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `{integer}` from `char`\n --> /tmp/tmp_21gjr_2.rs:6:26\n\
    \  |\n6 |         'A' ..= 'Z' => c - 32,\n  |                        - ^ -- {integer}\n\
    \  |                        |\n  |                        char\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter_map(|c| {\n            match c {\n                c if c >= 'a'\
    \ && c <= 'z' => (c as u8) - ('a' as u8) as char,\n                c if c >= 'A'\
    \ && c <= 'Z' => (c as u8) - ('A' as u8) as char,\n                _ => c,\n \
    \           }\n        })\n        .collect::<String>()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `char` from `u8`\n --> /tmp/tmpc_y5y_g_.rs:9:56\n\
    \  |\n9 |                 c if c >= 'a' && c <= 'z' => (c as u8) - ('a' as u8)\
    \ as char,\n  |                                                        ^ no implementation\
    \ for `u8 - char`\n  |\n  = help: the trait `Sub<char>` is not implemented for\
    \ `u8`\n  = help: the following other types implement trait `Sub<Rhs>`:\n    \
    \        <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n          \
    \  <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a\
    \ i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as\
    \ Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\n\
    error[E0277]: cannot subtract `char` from `u8`\n  --> /tmp/tmpc_y5y_g_.rs:10:56\n\
    \   |\n10 |                 c if c >= 'A' && c <= 'Z' => (c as u8) - ('A' as u8)\
    \ as char,\n   |                                                        ^ no implementation\
    \ for `u8 - char`\n   |\n   = help: the trait `Sub<char>` is not implemented for\
    \ `u8`\n   = help: the following other types implement trait `Sub<Rhs>`:\n   \
    \          <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n       \
    \      <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n         \
    \    <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a\
    \ i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and 48 others\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpc_y5y_g_.rs:11:22\n\
    \   |\n8  | /             match c {\n9  | |                 c if c >= 'a' && c\
    \ <= 'z' => (c as u8) - ('a' as u8) as char,\n   | |                         \
    \                     ------------------------------- this is found to be of type\
    \ `Option<_>`\n10 | |                 c if c >= 'A' && c <= 'Z' => (c as u8) -\
    \ ('A' as u8) as char,\n   | |                                              -------------------------------\
    \ this is found to be of type `Option<_>`\n11 | |                 _ => c,\n  \
    \ | |                      ^ expected enum `Option`, found `char`\n12 | |    \
    \         }\n   "
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().rev().map(|c|\
    \ match c {\n        c if c.is_uppercase() => c.to_lowercase(),\n        c if\
    \ c.is_lowercase() => c.to_uppercase(),\n        _ => c,\n    }).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp5m8mantd.rs:7:34\n\
    \  |\n5 |       string.chars().rev().map(|c| match c {\n  |  __________________________________-\n\
    6 | |         c if c.is_uppercase() => c.to_lowercase(),\n  | |              \
    \                    ---------------- this is found to be of type `ToLowercase`\n\
    7 | |         c if c.is_lowercase() => c.to_uppercase(),\n  | |              \
    \                    ^^^^^^^^^^^^^^^^ expected struct `ToLowercase`, found struct\
    \ `ToUppercase`\n8 | |         _ => c,\n9 | |     }).collect()\n  | |_____- `match`\
    \ arms have incompatible types\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| {\n            let (ascii_value, ascii_ascii_lower) = (c as\
    \ u32, (c as u32 as u8 as char) as char);\n            ascii_lower + ascii_value\
    \ as char\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ascii_lower` in this scope\n --> /tmp/tmp_bd30xbl.rs:9:13\n\
    \  |\n9 |             ascii_lower + ascii_value as char\n  |             ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0604]: only `u8` can be cast as `char`, not\
    \ `u32`\n --> /tmp/tmp_bd30xbl.rs:9:27\n  |\n9 |             ascii_lower + ascii_value\
    \ as char\n  |                           ^^^^^^^^^^^^^^^^^^^ invalid cast\n  |\n\
    help: try `char::from_u32` instead\n --> /tmp/tmp_bd30xbl.rs:9:27\n  |\n9 |  \
    \           ascii_lower + ascii_value as char\n  |                           ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0604.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_ascii_lowercase().to_ascii_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmplg73d_lh.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c.to_ascii_lowercase() {\n            Some('a') => Some('A'),\n\
    \            Some('b') => Some('B'),\n            Some('c') => Some('C'),\n  \
    \          Some('d') => Some('D'),\n            Some('e') => Some('E'),\n    \
    \        Some('f') => Some('F'),\n            Some('g') => Some('G'),\n      \
    \      Some('h') => Some('H'),\n            Some('i') => Some('I'),\n        \
    \    Some('j') => Some('J'),\n            Some('k') => Some('K'),\n          \
    \  Some('l') => Some('L'),\n            Some('m') => Some('M'),\n            Some('n')\
    \ => Some('N'),\n            Some('o') => Some('O'),\n            Some('p') =>\
    \ Some('P'),\n            Some('q') => Some('Q'),\n            Some('r') => Some('R'),\n\
    \            Some('s') => Some('S'),\n            Some('t') => Some('T'),\n  \
    \          Some('u') => Some('U'),\n            Some('v') => Some('V'),\n    \
    \        Some('w') => Some('W'),\n            Some('x') => Some('X'),\n      \
    \      Some('y') => Some('Y'),\n            Some('z') => Some('Z'),\n        \
    \    _ => None,\n        })\n        .filter(|c| c.is_some())\n        .collect::<String>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk7ga7_69.rs:7:13\n  |\n6 |\
    \         .map(|c| match c.to_ascii_lowercase() {\n  |                       \
    \ ---------------------- this expression has type `char`\n7 |             Some('a')\
    \ => Some('A'),\n  |             ^^^^^^^^^ expected `char`, found enum `Option`\n\
    \  |\n  = note: expected type `char`\n             found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpk7ga7_69.rs:8:13\n  |\n6 |      \
    \   .map(|c| match c.to_ascii_lowercase() {\n  |                        ----------------------\
    \ this expression has type `char`\n7 |             Some('a') => Some('A'),\n8\
    \ |             Some('b') => Some('B'),\n  |             ^^^^^^^^^ expected `char`,\
    \ found enum `Option`\n  |\n  = note: expected type `char`\n             found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk7ga7_69.rs:9:13\n\
    \  |\n6 |         .map(|c| match c.to_ascii_lowercase() {\n  |               \
    \         ---------------------- this expression has type `char`\n...\n9 |   \
    \          Some('c') => Some('C'),\n  |             ^^^^^^^^^ expected `char`,\
    \ found enum `Option`\n  |\n  = note: expected type `char`\n             found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk7ga7_69.rs:10:13\n\
    \   |\n6  |         .map(|c| match c.to_ascii_lowercase() {\n   |            \
    \            ---------------------- this expression has type `char`\n...\n10 |\
    \             Some('d') => Some('D'),\n   |             ^^^^^^^^^ expected `char`,\
    \ found enum `Option`\n   |\n   = note: expected type `char`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk7ga7_69.rs:11:13\n\
    \   |\n6  |         .map(|c| match c.to_ascii_lowercase() {\n   |            \
    \            ---------------------- this expression has type `char`\n...\n11 |\
    \             Some('e') => Some('E'),\n   |             ^^^^^^^^^ expected `char`,\
    \ found enum `Option`\n   |\n   = note: expected type `char`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk7ga7_69.rs:12:13\n\
    \   |\n6  |         .map(|c| match c.to_ascii"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A' ..='Z' => c.to_uppercase(),\n        'a' ..='z' => c.to_lowercase(),\n\
    \        _ => c,\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpydfvimd_.rs:7:23\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         'A' ..='Z' => c.to_uppercase(),\n  | |                       ----------------\
    \ this is found to be of type `ToUppercase`\n7 | |         'a' ..='z' => c.to_lowercase(),\n\
    \  | |                       ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found\
    \ struct `ToLowercase`\n8 | |         _ => c,\n9 | |     })\n  | |_____- `match`\
    \ arms have incompatible types\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars() {\n\
    \        &char::IsLower() => {\n            let mut builder = String::new();\n\
    \            for &ch in string.chars() {\n                builder.push((*ch).to_uppercase());\n\
    \            }\n            builder\n        }\n        &char::IsUpper(_) => {\n\
    \            let mut builder = String::new();\n            for &ch in string.chars()\
    \ {\n                builder.push((*ch).to_lowercase());\n            }\n    \
    \        builder\n        }\n        _ => string,\n    }\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw8dpuvap.rs:6:9\n  |\n5 |\
    \     match string.chars() {\n  |           -------------- this expression has\
    \ type `Chars<'_>`\n6 |         &char::IsLower() => {\n  |         ^^^^^^^^^^^^^^^^\
    \ expected struct `Chars`, found reference\n  |\n  = note: expected struct `Chars<'_>`\n\
    \          found reference `&_`\n\nerror[E0599]: no associated item named `IsLower`\
    \ found for type `char` in the current scope\n --> /tmp/tmpw8dpuvap.rs:6:16\n\
    \  |\n6 |         &char::IsLower() => {\n  |                ^^^^^^^ associated\
    \ item not found in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8dpuvap.rs:13:9\n\
    \   |\n5  |     match string.chars() {\n   |           -------------- this expression\
    \ has type `Chars<'_>`\n...\n13 |         &char::IsUpper(_) => {\n   |       \
    \  ^^^^^^^^^^^^^^^^^ expected struct `Chars`, found reference\n   |\n   = note:\
    \ expected struct `Chars<'_>`\n           found reference `&_`\n\nerror[E0599]:\
    \ no associated item named `IsUpper` found for type `char` in the current scope\n\
    \  --> /tmp/tmpw8dpuvap.rs:13:16\n   |\n13 |         &char::IsUpper(_) => {\n\
    \   |                ^^^^^^^ associated item not found in `char`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpw8dpuvap.rs:8:17\n  |\n8 |             for &ch\
    \ in string.chars() {\n  |                 ^^^    -------------- this expression\
    \ has type `Option<char>`\n  |                 |\n  |                 expected\
    \ `char`, found reference\n  |                 help: you can probably remove the\
    \ explicit borrow: `ch`\n  |\n  = note:   expected type `char`\n          found\
    \ reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8dpuvap.rs:15:17\n\
    \   |\n15 |             for &ch in string.chars() {\n   |                 ^^^\
    \    -------------- this expression has type `Option<char>`\n   |            \
    \     |\n   |                 expected `char`, found reference\n   |         \
    \        help: you can probably remove the explicit borrow: `ch`\n   |\n   = note:\
    \   expected type `char`\n           found reference `&_`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c => c as u32,\n            _ => c.to_ascii_lowercase().into(),\n\
    \        })\n        .filter(|c| c.is_ascii())\n        .map(|c| match c {\n \
    \           c => c as u32,\n            _ => c.to_ascii_uppercase().into(),\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii` found for reference `&u32` in\
    \ the current scope\n  --> /tmp/tmpox_6wyfn.rs:10:23\n   |\n10 |         .filter(|c|\
    \ c.is_ascii())\n   |                       ^^^^^^^^ method not found in `&u32`\n\
    \nerror[E0599]: no method named `to_ascii_uppercase` found for type `u32` in the\
    \ current scope\n  --> /tmp/tmpox_6wyfn.rs:13:20\n   |\n13 |             _ =>\
    \ c.to_ascii_uppercase().into(),\n   |                    ^^^^^^^^^^^^^^^^^^ method\
    \ not found in `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c,\n        c if c.is_uppercase()\
    \ => c.to_uppercase(),\n        c => c.to_lowercase(),\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpgefquavl.rs:7:34\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         c if c.is_lowercase() => c,\n  | |                             \
    \     - this is found to be of type `char`\n7 | |         c if c.is_uppercase()\
    \ => c.to_uppercase(),\n  | |                                  ^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToUppercase`\n8 | |         c => c.to_lowercase(),\n\
    9 | |     }).collect()\n  | |_____- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| if c.is_upper() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase()\
    \ })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmphta5sr3h.rs:7:23\n  |\n7 |         .map(|c| if c.is_upper()\
    \ { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() })\n  |           \
    \            ^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_uppercase`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.into_iter().map(|c|\
    \ c.to_ascii_lowercase().to_ascii_uppercase()).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpuiyldjbr.rs:5:12\n    |\n5 \
    \  |       string.into_iter().map(|c| c.to_ascii_lowercase().to_ascii_uppercase()).collect()\n\
    \    |              ^^^^^^^^^\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            `str:\
    \ Sized`\n            which is required by `str: IntoIterator`\n            `str:\
    \ Iterator`\n            which is required by `str: IntoIterator`\n          \
    \  `&str: Iterator`\n            which is required by `&str: IntoIterator`\n \
    \           `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string {\n     \
    \   Ok(s) => s.to_ascii_lowercase().to_string(),\n        Err(_) => string.to_string(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsc50rgie.rs:6:9\n  |\n5 |\
    \     match string {\n  |           ------ this expression has type `String`\n\
    6 |         Ok(s) => s.to_ascii_lowercase().to_string(),\n  |         ^^^^^ expected\
    \ struct `String`, found enum `Result`\n  |\n  = note: expected struct `String`\n\
    \               found enum `Result<_, _>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpsc50rgie.rs:7:9\n  |\n5 |     match string {\n  |           ------\
    \ this expression has type `String`\n6 |         Ok(s) => s.to_ascii_lowercase().to_string(),\n\
    7 |         Err(_) => string.to_string(),\n  |         ^^^^^^ expected struct\
    \ `String`, found enum `Result`\n  |\n  = note: expected struct `String`\n   \
    \            found enum `Result<_, _>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut input = string.to_string();\n\
    \    let mut buf = [0u8; input.len()];\n    for i in 0..input.len() {\n      \
    \  if input[i] >= 'a' && input[i] <= 'z' {\n            buf[i] = (input[i] - 'a')\
    \ + ('A' as u8) + 1;\n        }\n        if input[i] >= 'A' && input[i] <= 'Z'\
    \ {\n            buf[i] = (input[i] - 'A') + ('a' as u8) + 1;\n        }\n   \
    \ }\n    String::from_utf8(buf)\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmpp03yhnpl.rs:6:25\n\
    \  |\n5 |     let mut input = string.to_string();\n  |     ------------- help:\
    \ consider using `const` instead of `let`: `const input`\n6 |     let mut buf\
    \ = [0u8; input.len()];\n  |                         ^^^^^ non-constant value\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpp03yhnpl.rs:8:12\n\
    \  |\n8 |         if input[i] >= 'a' && input[i] <= 'z' {\n  |            ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpp03yhnpl.rs:8:31\n\
    \  |\n8 |         if input[i] >= 'a' && input[i] <= 'z' {\n  |               \
    \                ^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n  = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n  = help: the following\
    \ other types implement trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n\
    \            <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpp03yhnpl.rs:9:23\n\
    \  |\n9 |             buf[i] = (input[i] - 'a') + ('A' as u8) + 1;\n  |      \
    \                 ^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n  = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n  = help: the following\
    \ other types implement trait `Index<I"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_ascii_lowercase().to_ascii_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmplg73d_lh.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.len() {\n\
    \        0 => string,\n        _ => {\n            let mut buffer = String::from(\"\
    \");\n            for c in string.chars() {\n                match c.to_lowercase()\
    \ {\n                    Some(_) => buffer.push(c),\n                    _ =>\
    \ buffer.push(c),\n                }\n                buffer.push(' ');\n    \
    \        }\n            buffer\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fm976sd.rs:11:21\n   |\n\
    10 |                 match c.to_lowercase() {\n   |                       ----------------\
    \ this expression has type `ToLowercase`\n11 |                     Some(_) =>\
    \ buffer.push(c),\n   |                     ^^^^^^^ expected struct `ToLowercase`,\
    \ found enum `Option`\n   |\n   = note: expected struct `ToLowercase`\n      \
    \          found enum `Option<_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().chain(string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp0eday53w.rs:7:34\n\
    \  |\n5 |       string.chars().chain(string.chars().map(|c| match c {\n  |  _________________________________________________-\n\
    6 | |         c if c.is_lowercase() => c.to_uppercase(),\n  | |              \
    \                    ---------------- this is found to be of type `ToUppercase`\n\
    7 | |         c if c.is_uppercase() => c.to_lowercase(),\n  | |              \
    \                    ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct\
    \ `ToLowercase`\n8 | |         _ => c,\n9 | |     }).collect()).collect()\n  |\
    \ |_____- `match` arms have incompatible types\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpw90gcv54.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpv3wh9mp8.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() then c.to_lowercase() else c.to_uppercase())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmpx_zvwumg.rs:5:48\n  |\n\
    5 |     string.chars().map(|c| if c.is_uppercase() then c.to_lowercase() else\
    \ c.to_uppercase())\n  |                            --                  ^^^^ expected\
    \ `{`\n  |                            |\n  |                            this `if`\
    \ expression has a condition, but no block\n  |\nhelp: try placing this code inside\
    \ a block\n  |\n5 |     string.chars().map(|c| if c.is_uppercase() { then } c.to_lowercase()\
    \ else c.to_uppercase())\n  |                                                +\
    \      +\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().filter_map(|c|\
    \ match c {\n        c @ 'A' => (c as u8 + ('a' as u8).to_ascii_lowercase() as\
    \ u8) as char,\n        c @ 'a' => (c as u8 - ('a' as u8).to_ascii_lowercase()\
    \ as u8) as char,\n        _ => c,\n    })\n    .collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo8pr5k3v.rs:6:20\n  |\n6 |\
    \         c @ 'A' => (c as u8 + ('a' as u8).to_ascii_lowercase() as u8) as char,\n\
    \  |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `char`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `char`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n6 |         c @ 'A' => Some((c as u8 + ('a' as u8).to_ascii_lowercase()\
    \ as u8) as char),\n  |                    +++++                             \
    \                             +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u16 ^ 0x20,\n        'a' .. 'z' => c as\
    \ u16 ^ 0x20,\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp355kye8_.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => c as u16 ^ 0x20,\n  |         ^^^^^^^^^^\n  |\n\
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmp355kye8_.rs:7:9\n  |\n7 |         'a' .. 'z' => c as u16 ^ 0x20,\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \ --> /tmp/tmp355kye8_.rs:8:14\n  |\n5 |       string.chars().map(|c| match c\
    \ {\n  |  ____________________________-\n6 | |         'A' .. 'Z' => c as u16\
    \ ^ 0x20,\n  | |                       --------------- this is found to be of\
    \ type `u16`\n7 | |         'a' .. 'z' => c as u16 ^ 0x20,\n  | |            \
    \           --------------- this is found to be of type `u16`\n8 | |         _\
    \ => c,\n  | |              ^ expected `u16`, found `char`\n9 | |     }).collect()\n\
    \  | |_____- `match` arms have incompatible types\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0658.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_string().to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpc830wnk8.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase()\n\
    \        .chars()\n        .map(|c| if c.is_uppercase() then c.to_lowercase()\
    \ else c.to_uppercase())\n        .collect::<String>() + string.to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmp9jwhxa53.rs:7:38\n  |\n\
    7 |         .map(|c| if c.is_uppercase() then c.to_lowercase() else c.to_uppercase())\n\
    \  |                  --                  ^^^^ expected `{`\n  |             \
    \     |\n  |                  this `if` expression has a condition, but no block\n\
    \  |\nhelp: try placing this code inside a block\n  |\n7 |         .map(|c| if\
    \ c.is_uppercase() { then } c.to_lowercase() else c.to_uppercase())\n  |     \
    \                                 +      +\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .to_ascii_lowercase()\n\
    \        .iter()\n        .map(|c| if c >= 'a' && c <= 'z' { c + 32 - ('a' as\
    \ usize) else c })\n        .collect::<String>() + string.to_ascii_uppercase().iter().cloned().collect::<String>()\
    \ + string.to_ascii_lowercase().iter().cloned().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `else`\n --> /tmp/tmpa7xw4nne.rs:8:68\n  |\n8 |         .map(|c| if c >= 'a'\
    \ && c <= 'z' { c + 32 - ('a' as usize) else c })\n  |                       \
    \                                             ^^^^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror[E0599]: no method named `iter` found for struct\
    \ `String` in the current scope\n --> /tmp/tmpa7xw4nne.rs:7:10\n  |\n7 |     \
    \    .iter()\n  |          ^^^^ method not found in `String`\n  |\nhelp: because\
    \ of the in-memory representation of `&str`, to obtain an `Iterator` over each\
    \ of its codepoint use method `chars`\n  |\n7 |         .chars()\n  |        \
    \  ~~~~~\n\nerror[E0599]: no method named `iter` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpa7xw4nne.rs:9:60\n  |\n9 | ...   .collect::<String>()\
    \ + string.to_ascii_uppercase().iter().cloned().collect::<String>() + string.to_ascii_lowercase().iter().cloned(...\n\
    \  |                                                          ^^^^ method not\
    \ found in `String`\n  |\nhelp: because of the in-memory representation of `&str`,\
    \ to obtain an `Iterator` over each of its codepoint use method `chars`\n  |\n\
    9 |         .collect::<String>() + string.to_ascii_uppercase().chars().cloned().collect::<String>()\
    \ + string.to_ascii_lowercase().iter().cloned().collect::<String>()\n  |     \
    \                                                       ~~~~~\n\nerror[E0599]:\
    \ no method named `iter` found for struct `String` in the current scope\n -->\
    \ /tmp/tmpa7xw4nne.rs:9:126\n  |\n9 | ...collect::<String>() + string.to_ascii_lowercase().iter().cloned().collect::<String>()\n\
    \  |                                                      ^^^^ method not found\
    \ in `String`\n  |\nhelp: because of the in-memory representation of `&str`, to\
    \ obtain an `Iterator` over each of its codepoint use method `chars`\n  |\n9 |\
    \         .collect::<String>() + string.to_ascii_uppercase().iter().cloned().collect::<String>()\
    \ + string.to_ascii_lowercase().chars().cloned().collect::<String>()\n  |    \
    \                        "
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpd_kj53vw.rs:7:66\n\
    \  |\n7 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        _ => c,\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpyhqi9bv3.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => c as char + 'A' as char,\n  |         ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpyhqi9bv3.rs:6:33\n\
    \  |\n6 |         'a' .. 'z' => c as char + 'A' as char,\n  |                \
    \       --------- ^ ----------- char\n  |                       |\n  |       \
    \                char\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0369, E0658.\nFor more information about an error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .chain(string.chars().map(|c| c.to_lowercase()))\n        .chain(string.chars().map(|c|\
    \ c.to_uppercase()))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmpwzh0vaa_.rs:6:35:\
    \ 6:55] as FnOnce<(char,)>>::Output == char`\n   --> /tmp/tmpwzh0vaa_.rs:6:16\n\
    \    |\n6   |         .chain(string.chars().map(|c| c.to_lowercase()))\n    |\
    \          ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `ToLowercase`\n    |          |\n    |          required by a bound introduced\
    \ by this call\n    |\n    = note: required because of the requirements on the\
    \ impl of `Iterator` for `Map<Chars<'_>, [closure@/tmp/tmpwzh0vaa_.rs:6:35: 6:55]>`\n\
    note: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]: the\
    \ method `chain` exists for struct `std::iter::Chain<Chars<'_>, Map<Chars<'_>,\
    \ [closure@/tmp/tmpwzh0vaa_.rs:6:35: 6:55]>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpwzh0vaa_.rs:7:10\n   |\n7  |           .chain(string.chars().map(|c|\
    \ c.to_uppercase()))\n   |            ^^^^^ method cannot be called on `std::iter::Chain<Chars<'_>,\
    \ Map<Chars<'_>, [closure@/tmp/tmpwzh0vaa_.rs:6:35: 6:55]>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Map<Chars<'_>, [closure@/tmp/tmpwzh0vaa_.rs:6:35: 6:55]> as Iterator>::Item\
    \ = char`\n           which is required by `std::iter::Chain<Chars<'_>, Map<Chars<'_>,\
    \ [closure@/tmp/tmpwzh0vaa_.rs:6:35: 6:55]>>: Iterator`\n           `std::iter::Chain<Chars<'_>,\
    \ Map<Chars<'_>, [closure@/tmp/tmpwzh0vaa_.rs:6:35: 6:55]>>: Iterator`\n     \
    \      which is required by `&mut std::iter::Chain<Chars<'_>, Map<Chars<'_>, [closure@/tmp/tmpwzh0vaa_.rs:6:35:\
    \ 6:55]>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().chain(\n\
    \        string.chars().map(|c| if c >= 'A' && c <= 'Z' { c - 'A' + 'a' } else\
    \ { c }),\n    )\n    .collect::<String>()\n    .to_owned()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmpi89d43k0.rs:6:60\n\
    \  |\n6 |         string.chars().map(|c| if c >= 'A' && c <= 'Z' { c - 'A' + 'a'\
    \ } else { c }),\n  |                                                        \
    \  - ^ --- char\n  |                                                         \
    \ |\n  |                                                          char\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut buffer = String::new();\n\
    \    let mut iter = string.chars().peekable();\n    let mut prev: Option<Char>\
    \ = None;\n    let mut next_lower: Option<Char> = None;\n    let mut next_upper:\
    \ Option<Char> = None;\n    while let Some(next) = iter.next() {\n        match\
    \ prev {\n            None => {}\n            Some(&mut c) => {\n            \
    \    buffer.push(c);\n                prev = Some(next);\n            }\n    \
    \        Some(_) => {}\n        }\n        match next_lower {\n            None\
    \ => {}\n            Some(&mut c) => {\n                buffer.push(Char::to_upper(c));\n\
    \                next_lower = Some(next);\n            }\n            Some(_)\
    \ => {}\n        }\n        match next_upper {\n            None => {}\n     \
    \       Some(&mut c) => {\n                buffer.push(Char::to_lower(c));\n \
    \               next_upper = Some(next);\n            }\n            Some(_) =>\
    \ {}\n        }\n    }\n    buffer\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Char`\n  --> /tmp/tmp2kd6l7gx.rs:22:29\n\
    \   |\n22 |                 buffer.push(Char::to_upper(c));\n   |            \
    \                 ^^^^ use of undeclared type `Char`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Char`\n  --> /tmp/tmp2kd6l7gx.rs:30:29\n  \
    \ |\n30 |                 buffer.push(Char::to_lower(c));\n   |              \
    \               ^^^^ use of undeclared type `Char`\n\nerror[E0412]: cannot find\
    \ type `Char` in this scope\n --> /tmp/tmp2kd6l7gx.rs:7:26\n  |\n7 |     let mut\
    \ prev: Option<Char> = None;\n  |                          ^^^^\n  |\nhelp: a\
    \ builtin type with a similar name exists\n  |\n7 |     let mut prev: Option<char>\
    \ = None;\n  |                          ~~~~\nhelp: you might be missing a type\
    \ parameter\n  |\n4 | fn flip_case<Char>(string: String) -> String {\n  |    \
    \         ++++++\n\nerror[E0412]: cannot find type `Char` in this scope\n -->\
    \ /tmp/tmp2kd6l7gx.rs:8:32\n  |\n8 |     let mut next_lower: Option<Char> = None;\n\
    \  |                                ^^^^\n  |\nhelp: a builtin type with a similar\
    \ name exists\n  |\n8 |     let mut next_lower: Option<char> = None;\n  |    \
    \                            ~~~~\nhelp: you might be missing a type parameter\n\
    \  |\n4 | fn flip_case<Char>(string: String) -> String {\n  |             ++++++\n\
    \nerror[E0412]: cannot find type `Char` in this scope\n --> /tmp/tmp2kd6l7gx.rs:9:32\n\
    \  |\n9 |     let mut next_upper: Option<Char> = None;\n  |                  \
    \              ^^^^\n  |\nhelp: a builtin type with a similar name exists\n  |\n\
    9 |     let mut next_upper: Option<char> = None;\n  |                        \
    \        ~~~~\nhelp: you might be missing a type parameter\n  |\n4 | fn flip_case<Char>(string:\
    \ String) -> String {\n  |             ++++++\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().rev().chain(\n\
    \        string.chars().map(|c| *c < *c.to_ascii_lowercase().unwrap()).rev(),\n\
    \    )\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpvb6utswg.rs:6:32\n\
    \  |\n6 |         string.chars().map(|c| *c < *c.to_ascii_lowercase().unwrap()).rev(),\n\
    \  |                                ^^\n\nerror[E0599]: no method named `unwrap`\
    \ found for type `char` in the current scope\n --> /tmp/tmpvb6utswg.rs:6:61\n\
    \  |\n6 |         string.chars().map(|c| *c < *c.to_ascii_lowercase().unwrap()).rev(),\n\
    \  |                                                             ^^^^^^ method\
    \ not found in `char`\n\nerror[E0271]: type mismatch resolving `<[closure@/tmp/tmpvb6utswg.rs:6:28:\
    \ 6:69] as FnOnce<(char,)>>::Output == char`\n   --> /tmp/tmpvb6utswg.rs:6:9\n\
    \    |\n5   |     string.chars().rev().chain(\n    |                         \
    \ ----- required by a bound introduced by this call\n6   |         string.chars().map(|c|\
    \ *c < *c.to_ascii_lowercase().unwrap()).rev(),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `bool`\n    |\n    = note: required because of the requirements\
    \ on the impl of `Iterator` for `Map<Chars<'_>, [closure@/tmp/tmpvb6utswg.rs:6:28:\
    \ 6:69]>`\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvb6utswg.rs:5:5\n  |\n4 |   fn flip_case(string:\
    \ String) -> String {\n  |                                   ------ expected `String`\
    \ because of return type\n5 | /     string.chars().rev().chain(\n6 | |       \
    \  string.chars().map(|c| *c < *c.to_ascii_lowercase().unwrap()).rev(),\n7 | |\
    \     )\n  | |_____^ expected struct `String`, found struct `std::iter::Chain`\n\
    \  |\n  = note: expected struct `String`\n             found struct `std::iter::Chain<Rev<Chars<'_>>,\
    \ Rev<Map<Chars<'_>, [closure@/tmp/tmpvb6utswg.rs:6:28: 6:69]>>>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0271, E0308,\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_string().to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpc830wnk8.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            c => c.to_uppercase(),\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmplt5d_s59.rs:8:18\n\
    \  |\n6 |           .map(|c| match c {\n  |  __________________-\n7 | |      \
    \       c if c.is_uppercase() => c.to_lowercase(),\n  | |                    \
    \                  ---------------- this is found to be of type `ToLowercase`\n\
    8 | |             c => c.to_uppercase(),\n  | |                  ^^^^^^^^^^^^^^^^\
    \ expected struct `ToLowercase`, found struct `ToUppercase`\n9 | |         })\n\
    \  | |_________- `match` arms have incompatible types\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    if string.len() <= 1 {\n\
    \        string\n    } else {\n        let mut s = string;\n        for c in s.chars()\
    \ {\n            if c.to_lowercase() == c {\n                s.swap(0, 1);\n \
    \           }\n        }\n        s\n    }\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: binary operation `==` cannot be applied to type `ToLowercase`\n\
    \  --> /tmp/tmpsl1lgckq.rs:10:33\n   |\n10 |             if c.to_lowercase() ==\
    \ c {\n   |                ---------------- ^^ - char\n   |                |\n\
    \   |                ToLowercase\n\nerror[E0599]: no method named `swap` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpsl1lgckq.rs:11:19\n\
    \   |\n11 |                 s.swap(0, 1);\n   |                   ^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0369, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpw90gcv54.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).map(|c| c.to_ascii_uppercase()).collect::<String>().into()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"ELLO\"`,\n right: `\"hELLO!\"`', /tmp/tmp3p3py5b5.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().chain(string.chars().map(|c|\
    \ *c ^ (c as u32).to_ascii_lowercase()))\n             .chain(string.chars().map(|c|\
    \ *c ^ (c as u32).to_ascii_uppercase()))\n             .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpkogokpe7.rs:5:49\n\
    \  |\n5 |     string.chars().chain(string.chars().map(|c| *c ^ (c as u32).to_ascii_lowercase()))\n\
    \  |                                                 ^^\n\nerror[E0599]: no method\
    \ named `to_ascii_lowercase` found for type `u32` in the current scope\n --> /tmp/tmpkogokpe7.rs:5:65\n\
    \  |\n5 |     string.chars().chain(string.chars().map(|c| *c ^ (c as u32).to_ascii_lowercase()))\n\
    \  |                                                                 ^^^^^^^^^^^^^^^^^^\
    \ method not found in `u32`\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \ --> /tmp/tmpkogokpe7.rs:6:44\n  |\n6 |              .chain(string.chars().map(|c|\
    \ *c ^ (c as u32).to_ascii_uppercase()))\n  |                                \
    \            ^^\n\nerror[E0599]: no method named `to_ascii_uppercase` found for\
    \ type `u32` in the current scope\n --> /tmp/tmpkogokpe7.rs:6:60\n  |\n6 |   \
    \           .chain(string.chars().map(|c| *c ^ (c as u32).to_ascii_uppercase()))\n\
    \  |                                                            ^^^^^^^^^^^^^^^^^^\
    \ method not found in `u32`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.is_lowercase() { 'a'.to_string() } else if c.is_uppercase()\
    \ { 'A'.to_string() })\n        .collect::<Vec<_>>()\n        .join(\"\".to_string())\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n --> /tmp/tmp9ll21ano.rs:6:63\n\
    \  |\n6 |         .map(|c| if c.is_lowercase() { 'a'.to_string() } else if c.is_uppercase()\
    \ { 'A'.to_string() })\n  |                                                  \
    \             ^^^^^^^^^^^^^^^^^^^^^^---------------^^\n  |                   \
    \                                            |                     |\n  |    \
    \                                                           |                \
    \     found here\n  |                                                        \
    \       expected `()`, found struct `String`\n  |\n  = note: `if` expressions\
    \ without `else` evaluate to `()`\n  = help: consider adding an `else` block that\
    \ evaluates to the expected type\n\nerror[E0277]: the trait bound `[_]: Join<String>`\
    \ is not satisfied\n   --> /tmp/tmp9ll21ano.rs:8:10\n    |\n8   |         .join(\"\
    \".to_string())\n    |          ^^^^ the trait `Join<String>` is not implemented\
    \ for `[_]`\n    |\n    = help: the following other types implement trait `Join<Separator>`:\n\
    \              <[S] as Join<&str>>\n              <[V] as Join<&T>>\n        \
    \      <[V] as Join<&[T]>>\nnote: required by a bound in `slice::<impl [T]>::join`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0317.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string {\n     \
    \   Ok(text) => {\n            let mut buffer = String::with_capacity(text.len());\n\
    \            for c in text.chars() {\n                buffer.push_str(match c.to_ascii_lowercase()\
    \ {\n                    Ok(s) => s,\n                    Err(_) => c,\n     \
    \           });\n            }\n            buffer\n        }\n        Err(_)\
    \ => \"\",\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw53164sc.rs:6:9\n  |\n5 |\
    \     match string {\n  |           ------ this expression has type `String`\n\
    6 |         Ok(text) => {\n  |         ^^^^^^^^ expected struct `String`, found\
    \ enum `Result`\n  |\n  = note: expected struct `String`\n               found\
    \ enum `Result<_, _>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw53164sc.rs:16:9\n\
    \   |\n5  |     match string {\n   |           ------ this expression has type\
    \ `String`\n...\n16 |         Err(_) => \"\",\n   |         ^^^^^^ expected struct\
    \ `String`, found enum `Result`\n   |\n   = note: expected struct `String`\n \
    \               found enum `Result<_, _>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c => c.to_ascii_lowercase(),\n           \
    \ c => c.to_ascii_uppercase(),\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpcb_cxrn2.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c @ ' ' => c.to_string().to_uppercase(),\n\
    \            _ => c,\n        })\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpeqja7ebf.rs:8:18\n\
    \  |\n6 |           .map(|c| match c {\n  |  __________________-\n7 | |      \
    \       c @ ' ' => c.to_string().to_uppercase(),\n  | |                      \
    \  ---------------------------- this is found to be of type `String`\n8 | |  \
    \           _ => c,\n  | |                  ^- help: try using a conversion method:\
    \ `.to_string()`\n  | |                  |\n  | |                  expected struct\
    \ `String`, found `char`\n9 | |         })\n  | |_________- `match` arms have\
    \ incompatible types\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.rev() {\n\
    \        None => string,\n        Some(rev) => rev.rev(),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpjq01ie1z.rs:5:18\n\
    \    |\n5   |       match string.rev() {\n    |                    ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ ascii_lowercase() => ascii_uppercase(),\n\
    \            c @ ascii_uppercase() => ascii_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0531]: cannot find tuple struct or tuple variant `ascii_lowercase`\
    \ in this scope\n --> /tmp/tmpptj_r0ws.rs:8:17\n  |\n8 |             c @ ascii_lowercase()\
    \ => ascii_uppercase(),\n  |                 ^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `ascii_uppercase` in this scope\n\
    \ --> /tmp/tmpptj_r0ws.rs:8:38\n  |\n8 |             c @ ascii_lowercase() =>\
    \ ascii_uppercase(),\n  |                                      ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0531]: cannot find tuple struct or tuple variant\
    \ `ascii_uppercase` in this scope\n --> /tmp/tmpptj_r0ws.rs:9:17\n  |\n9 |   \
    \          c @ ascii_uppercase() => ascii_lowercase(),\n  |                 ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `ascii_lowercase`\
    \ in this scope\n --> /tmp/tmpptj_r0ws.rs:9:38\n  |\n9 |             c @ ascii_uppercase()\
    \ => ascii_lowercase(),\n  |                                      ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0531.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .filter_map(|c| match c {\n            c @ b'A' => b'a' << 8 | b'A' << 0 |\
    \ b'_',\n            _ => c,\n        })\n        .collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkuo_m7lh.rs:7:17\n  |\n6 |\
    \         .filter_map(|c| match c {\n  |                               - this\
    \ expression has type `char`\n7 |             c @ b'A' => b'a' << 8 | b'A' <<\
    \ 0 | b'_',\n  |                 ^^^^ expected `char`, found `u8`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpkuo_m7lh.rs:7:25\n  |\n7 |             c @ b'A'\
    \ => b'a' << 8 | b'A' << 0 | b'_',\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `u8`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `u8`\nhelp: try wrapping the expression in `Some`\n \
    \ |\n7 |             c @ b'A' => Some(b'a' << 8 | b'A' << 0 | b'_'),\n  |    \
    \                     +++++                            +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.to() {\n\
    \        None => return string,\n        Some(s) => match s.chars().filter_map(|c|\
    \ match c {\n            c if c.is_uppercase() => Some(c.to_ascii_lowercase()),\n\
    \            c if c.is_lowercase() => Some(c.to_ascii_uppercase()),\n        \
    \    _ => None,\n        }).collect::<Vec<_>>() {\n            [] => return string,\n\
    \            v => v.to_owned(),\n        },\n    }\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp64c3ckcs.rs:5:18\n  |\n5 |     match string.to() {\n  |\
    \                  ^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| {\n            if c >= 'a' && c <= 'z' {\n                c - 'a'\
    \ + 'A'\n            } else {\n                c - 'A' + 'a'\n            }\n\
    \        })\n        .collect::<String>() + string.chars().map(|c| {\n       \
    \     if c >= 'A' && c <= 'Z' {\n                c - 'A' + 'a'\n            }\
    \ else {\n                c - 'a' + 'A'\n            }\n        }).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmpv9ia2t8w.rs:8:19\n\
    \  |\n8 |                 c - 'a' + 'A'\n  |                 - ^ --- char\n  |\
    \                 |\n  |                 char\n\nerror[E0369]: cannot subtract\
    \ `char` from `char`\n  --> /tmp/tmpv9ia2t8w.rs:10:19\n   |\n10 |            \
    \     c - 'A' + 'a'\n   |                 - ^ --- char\n   |                 |\n\
    \   |                 char\n\nerror[E0369]: cannot subtract `char` from `char`\n\
    \  --> /tmp/tmpv9ia2t8w.rs:15:19\n   |\n15 |                 c - 'A' + 'a'\n \
    \  |                 - ^ --- char\n   |                 |\n   |              \
    \   char\n\nerror[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpv9ia2t8w.rs:17:19\n\
    \   |\n17 |                 c - 'a' + 'A'\n   |                 - ^ --- char\n\
    \   |                 |\n   |                 char\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv9ia2t8w.rs:13:32\n   |\n13 |           .collect::<String>()\
    \ + string.chars().map(|c| {\n   |  ________________________________^\n14 | |\
    \             if c >= 'A' && c <= 'Z' {\n15 | |                 c - 'A' + 'a'\n\
    16 | |             } else {\n17 | |                 c - 'a' + 'A'\n18 | |    \
    \         }\n19 | |         }).collect::<String>()\n   | |______________________________^\
    \ expected `&str`, found struct `String`\n   |\nhelp: consider borrowing here\n\
    \   |\n13 ~         .collect::<String>() + &string.chars().map(|c| {\n14 +   \
    \          if c >= 'A' && c <= 'Z' {\n15 +                 c - 'A' + 'a'\n16 +\
    \             } else {\n17 +                 c - 'a' + 'A'\n18 +             }\n\
    \ ...\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpv3wh9mp8.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        _ =>\
    \ c.to_lowercase(),\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpogdss939.rs:7:14\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         c if c.is_lowercase() => c.to_uppercase(),\n  | |              \
    \                    ---------------- this is found to be of type `ToUppercase`\n\
    7 | |         _ => c.to_lowercase(),\n  | |              ^^^^^^^^^^^^^^^^ expected\
    \ struct `ToUppercase`, found struct `ToLowercase`\n8 | |     }).collect()\n \
    \ | |_____- `match` arms have incompatible types\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().chars().rev().chain(string.chars().rev())\n\
    \        .map(|c| (*c).to_upper().unwrap())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpw2h4uq3w.rs:6:18\n\
    \  |\n6 |         .map(|c| (*c).to_upper().unwrap())\n  |                  ^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .to_ascii_lowercase()\n\
    \        .into_uppercase()\n        .to_ascii_lowercase()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_uppercase` found for struct `String`\
    \ in the current scope\n --> /tmp/tmp5g1z3ja3.rs:7:10\n  |\n7 |         .into_uppercase()\n\
    \  |          ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `to_uppercase`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars() {\n\
    \        Ok(mut chars) => {\n            let mut new_chars = vec![];\n       \
    \     for (pos, char) in chars.iter().enumerate() {\n                if char >=\
    \ 'A' && char <= 'Z' {\n                    new_chars.push(char - 'A'.to_string().chars().next().unwrap());\n\
    \                } else {\n                    new_chars.push(char.to_string());\n\
    \                }\n            }\n            new_chars\n                .into_iter()\n\
    \                .map(|char| char.chars().next().unwrap())\n                .collect()\n\
    \        }\n        Err(_) => string.to_string(),\n    }\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_uck5bg1.rs:6:9\n  |\n5 |\
    \     match string.chars() {\n  |           -------------- this expression has\
    \ type `Chars<'_>`\n6 |         Ok(mut chars) => {\n  |         ^^^^^^^^^^^^^\
    \ expected struct `Chars`, found enum `Result`\n  |\n  = note: expected struct\
    \ `Chars<'_>`\n               found enum `Result<_, _>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_uck5bg1.rs:20:9\n   |\n5  |     match string.chars() {\n\
    \   |           -------------- this expression has type `Chars<'_>`\n...\n20 |\
    \         Err(_) => string.to_string(),\n   |         ^^^^^^ expected struct `Chars`,\
    \ found enum `Result`\n   |\n   = note: expected struct `Chars<'_>`\n        \
    \        found enum `Result<_, _>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ ' ' => c,\n            c @ _ if c.is_uppercase()\
    \ => c.to_lowercase(),\n            c @ _ if c.is_lowercase() => c.to_uppercase(),\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp94q87s5q.rs:9:42\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c @ ' ' => c,\n   | |                        - this is found to be\
    \ of type `char`\n9  | |             c @ _ if c.is_uppercase() => c.to_lowercase(),\n\
    \   | |                                          ^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `ToLowercase`\n10 | |             c @ _ if c.is_lowercase() =>\
    \ c.to_uppercase(),\n11 | |         })\n   | |_________- `match` arms have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter(|c| c.is_ascii_lowercase())\n        .map(|c| match c.to_ascii_lowercase()\
    \ {\n            Ok(c) => c,\n            _ => c.to_ascii_uppercase(),\n     \
    \   })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9pgt6mvl.rs:9:13\n  |\n8 |\
    \         .map(|c| match c.to_ascii_lowercase() {\n  |                       \
    \ ---------------------- this expression has type `char`\n9 |             Ok(c)\
    \ => c,\n  |             ^^^^^ expected `char`, found enum `Result`\n  |\n  =\
    \ note: expected type `char`\n             found enum `Result<_, _>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().enumerate().flat_map(|(i,\
    \ c)| {\n        match c {\n            c @ _ if c >= 'a' && c <= 'z' => (c, c.to_uppercase()),\n\
    \            _ => (c, c.to_lowercase())\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpas1iycq2.rs:8:18\n\
    \  |\n6 | /         match c {\n7 | |             c @ _ if c >= 'a' && c <= 'z'\
    \ => (c, c.to_uppercase()),\n  | |                                           \
    \   --------------------- this is found to be of type `(char, ToUppercase)`\n\
    8 | |             _ => (c, c.to_lowercase())\n  | |                  ^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n9 | |         }\n\
    \  | |_________- `match` arms have incompatible types\n  |\n  = note: expected\
    \ tuple `(_, ToUppercase)`\n             found tuple `(_, ToLowercase)`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars().map(|c|\
    \ if c >= 'a' && c <= 'z' { 'A' - c } else if c >= 'A' && c <= 'Z' { 'a' - c }\
    \ else { c }).collect::<Vec<char>>() {\n        Err(_) => unreachable!(\"invalid\
    \ characters in string: {}\", string),\n        Ok(output) => String::from(output.into_iter().map(|c|\
    \ if c >= 'A' && c <= 'Z' { 'A' - c } else if c >= 'a' && c <= 'z' { 'a' - c }\
    \ else { c }).collect()),\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmp3mpt8bfv.rs:5:64\n\
    \  |\n5 |     match string.chars().map(|c| if c >= 'a' && c <= 'z' { 'A' - c }\
    \ else if c >= 'A' && c <= 'Z' { 'a' - c } else { c }).collect::<Vec<c...\n  |\
    \                                                            --- ^ - char\n  |\
    \                                                            |\n  |          \
    \                                                  char\n\nerror[E0369]: cannot\
    \ subtract `char` from `char`\n --> /tmp/tmp3mpt8bfv.rs:5:105\n  |\n5 |     match\
    \ string.chars().map(|c| if c >= 'a' && c <= 'z' { 'A' - c } else if c >= 'A'\
    \ && c <= 'Z' { 'a' - c } else { c }).collect::<Vec<c...\n  |                \
    \                                                                            \
    \         --- ^ - char\n  |                                                  \
    \                                                   |\n  |                   \
    \                                                                            \
    \      char\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3mpt8bfv.rs:6:9\n\
    \  |\n5 | ...atch string.chars().map(|c| if c >= 'a' && c <= 'z' { 'A' - c } else\
    \ if c >= 'A' && c <= 'Z' { 'a' - c } else { c }).collect::<Vec<char>>(...\n \
    \ |         --------------------------------------------------------------------------------------------------------------------------------------\
    \ this expression has type `Vec<char>`\n6 | ...   Err(_) => unreachable!(\"invalid\
    \ characters in string: {}\", string),\n  |       ^^^^^^ expected struct `Vec`,\
    \ found enum `Result`\n  |\n  = note: expected struct `Vec<char>`\n          \
    \     found enum `Result<_, _>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3mpt8bfv.rs:7:9\n\
    \  |\n5 | ...atch string.chars().map(|c| if c >= 'a' && c <= 'z' { 'A' - c } else\
    \ if c >= 'A' && c <= 'Z' { 'a' - c } else { c }).collect::<Vec<char>>(...\n \
    \ |         --------------------------------------------------------------------------------------------------------------------------------------\
    \ this expression has type `Vec<char>`\n6 | ...   Err(_) => unreachable!"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter_map(|c| {\n            match c {\n                c @ b'a' =>\
    \ c @ b'A',\n                c @ b'B' => c @ b'b',\n                c @ b'C' =>\
    \ c @ b'C',\n                c @ b'D' => c @ b'D',\n                c @ b'E' =>\
    \ c @ b'e',\n                c @ b'F' => c @ b'F',\n                c @ b'G' =>\
    \ c @ b'G',\n                c @ b'H' => c @ b'H',\n                c @ b'I' =>\
    \ c @ b'I',\n                c @ b'J' => c @ b'J',\n                c @ b'K' =>\
    \ c @ b'k',\n                c @ b'L' => c @ b'L',\n                c @ b'M' =>\
    \ c @ b'm',\n                c @ b'N' => c @ b'N',\n                c @ b'O' =>\
    \ c @ b'o',\n                c @ b'P' => c @ b'P',\n                c @ b'Q' =>\
    \ c @ b'Q',\n                c @ b'R' => c @ b'r',\n                c @ b'S' =>\
    \ c @ b'S',\n                c @ b'T' => c @ b't',\n                c @ b'U' =>\
    \ c @ b'U',\n                c @ b'V' => c @ b'V',\n                c @ b'W' =>\
    \ c @ b'W',\n                c @ b'X' => c @ b'X',\n                c @ b'Y' =>\
    \ c @ b'Y',\n                c @ b'Z' => c @ b'z',\n                _ => c,\n\
    \            }\n        })\n        .collect::<String>()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `@`\n --> /tmp/tmpflne24i8.rs:9:31\n  |\n9 |                 c @ b'a'\
    \ => c @ b'A',\n  |                          --   ^ expected one of 8 possible\
    \ tokens\n  |                          |\n  |                          while parsing\
    \ the `match` arm starting here\n\nerror[E0282]: type annotations needed\n -->\
    \ /tmp/tmpflne24i8.rs:7:10\n  |\n7 |         .filter_map(|c| {\n  |          ^^^^^^^^^^\
    \ cannot infer type for type parameter `B` declared on the associated function\
    \ `filter_map`\n  |\nhelp: consider specifying the type arguments in the method\
    \ call\n  |\n7 |         .filter_map::<B, F>(|c| {\n  |                    ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c <= 'Z' => (c as u32).to_ascii_uppercase().into(),\n\
    \        c if c >= 'a' => (c as u32).to_ascii_lowercase().into(),\n        c =>\
    \ c,\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_ascii_uppercase` found for type `u32`\
    \ in the current scope\n --> /tmp/tmp30hc4umm.rs:6:37\n  |\n6 |         c if c\
    \ <= 'Z' => (c as u32).to_ascii_uppercase().into(),\n  |                     \
    \                ^^^^^^^^^^^^^^^^^^ method not found in `u32`\n\nerror[E0599]:\
    \ no method named `to_ascii_lowercase` found for type `u32` in the current scope\n\
    \ --> /tmp/tmp30hc4umm.rs:7:37\n  |\n7 |         c if c >= 'a' => (c as u32).to_ascii_lowercase().into(),\n\
    \  |                                     ^^^^^^^^^^^^^^^^^^ method not found in\
    \ `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => Char::new('z' - 1 + c.digit(2), false),\n \
    \       'A' .. 'Z' => Char::new('A' - 1 + c.digit(2), false),\n        _ => c,\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Char`\n --> /tmp/tmpiqh85hb1.rs:6:23\n\
    \  |\n6 |         'a' .. 'z' => Char::new('z' - 1 + c.digit(2), false),\n  | \
    \                      ^^^^ use of undeclared type `Char`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Char`\n --> /tmp/tmpiqh85hb1.rs:7:23\n \
    \ |\n7 |         'A' .. 'Z' => Char::new('A' - 1 + c.digit(2), false),\n  |  \
    \                     ^^^^ use of undeclared type `Char`\n\nerror[E0658]: exclusive\
    \ range pattern syntax is experimental\n --> /tmp/tmpiqh85hb1.rs:6:9\n  |\n6 |\
    \         'a' .. 'z' => Char::new('z' - 1 + c.digit(2), false),\n  |         ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpiqh85hb1.rs:7:9\n  |\n7 |         'A' .. 'Z' => Char::new('A' -\
    \ 1 + c.digit(2), false),\n  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854\
    \ <https://github.com/rust-lang/rust/issues/37854> for more information\n\nerror[E0369]:\
    \ cannot subtract `{integer}` from `char`\n --> /tmp/tmpiqh85hb1.rs:6:37\n  |\n\
    6 |         'a' .. 'z' => Char::new('z' - 1 + c.digit(2), false),\n  |       \
    \                          --- ^ - {integer}\n  |                            \
    \     |\n  |                                 char\n\nerror[E0599]: no method named\
    \ `digit` found for type `char` in the current scope\n --> /tmp/tmpiqh85hb1.rs:6:45\n\
    \  |\n6 |         'a' .. 'z' => Char::new('z' - 1 + c.digit(2), false),\n  | \
    \                                            ^^^^^ help: there is an associated\
    \ function with a similar name: `is_digit`\n\nerror[E0369]: cannot subtract `{integer}`\
    \ from `char`\n --> /tmp/tmpiqh85hb1.rs:7:37\n  |\n7 |         'A' .. 'Z' => Char::new('A'\
    \ - 1 + c.digit(2), false),\n  |                                 --- ^ - {integer}\n\
    \  |                                 |\n  |                                 char\n\
    \nerror[E0599]: no method named `digit` found for type `char` in the current scope\n\
    \ --> /tmp/tmpiqh85hb1.rs:7:45\n  |\n7 |         'A' .. 'Z' => Char:"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c @ b'a' => b'A'.to_ascii_uppercase().to_ascii_lowercase()\n\
    \        c @ b'A' => b'a'.to_ascii_lowercase().to_ascii_uppercase()\n        _\
    \ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `c`\n\
    \ --> /tmp/tmpe20dc0td.rs:7:9\n  |\n6 |         c @ b'a' => b'A'.to_ascii_uppercase().to_ascii_lowercase()\n\
    \  |                  -- while parsing the `match` arm starting here   - expected\
    \ one of `,`, `.`, `?`, `}`, or an operator\n7 |         c @ b'A' => b'a'.to_ascii_lowercase().to_ascii_uppercase()\n\
    \  |         ^ unexpected token\n\nerror[E0277]: a value of type `String` cannot\
    \ be built from an iterator over elements of type `()`\n    --> /tmp/tmpe20dc0td.rs:9:8\n\
    \     |\n9    |     }).collect()\n     |        ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=()>`\n     |\n     = help: the\
    \ trait `FromIterator<()>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().rev().map(|c|\
    \ *c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmprh9dez_4.rs:5:34\n\
    \  |\n5 |     string.chars().rev().map(|c| *c.to_ascii_lowercase()).collect()\n\
    \  |                                  ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c => c.to_ascii_lowercase().to_ascii_uppercase(),\n     \
    \   _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpeag0556o.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| {\n            if c == 'a' {\n                'A'\n            }\
    \ else if c == 'A' {\n                'a'\n            } else {\n            \
    \    c\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmp_ks2uprc.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n\
    \        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976064
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' => *c as u8 | ('a' as u8) as u8,\n        'A' => *c as\
    \ u8 | ('A' as u8) as u8,\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp6lbr37o4.rs:6:16\n\
    \  |\n6 |         'a' => *c as u8 | ('a' as u8) as u8,\n  |                ^^\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp6lbr37o4.rs:7:16\n\
    \  |\n7 |         'A' => *c as u8 | ('A' as u8) as u8,\n  |                ^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter(|c| c.is_ascii_lowercase())\n        .map(|c| if c.is_ascii_uppercase()\
    \ { c } else { c.to_ascii_uppercase() })\n        .collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"ELLO\"`,\n right: `\"hELLO!\"`', /tmp/tmp_iiu_8ya.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_ascii_lowercase().to_ascii_uppercase().to_string()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmppvm3wi12.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            'A' =>\n                match c {\n      \
    \              'a' =>\n                        'A',\n                    'b' =>\n\
    \                        'B',\n                    'c' =>\n                  \
    \      'C',\n                    'd' =>\n                        'D',\n      \
    \              'e' =>\n                        'E',\n                    'f' =>\n\
    \                        'F',\n                    'g' =>\n                  \
    \      'G',\n                    'h' =>\n                        'H',\n      \
    \              'i' =>\n                        'I',\n                    'j' =>\n\
    \                        'J',\n                    'k' =>\n                  \
    \      'K',\n                    'l' =>\n                        'L',\n      \
    \              'm' =>\n                        'M',\n                    'n' =>\n\
    \                        'N',\n                    'o' =>\n                  \
    \      'O',\n                    'p' =>\n                        'P',\n      \
    \              'q' =>\n                        'Q',\n                    'r' =>\n\
    \                        'R',\n                    's' =>\n                  \
    \      'S',\n                    't' =>\n                        'T',\n      \
    \              'u' =>\n                        'U',\n                    'v' =>\n\
    \                        'V',\n                    'w' =>\n                  \
    \      'W',\n                    'x' =>\n                        'X',\n      \
    \              'y' =>\n                        'Y',\n                    'z' =>\n\
    \                        'Z',\n                    'A' =>\n                  \
    \      'a',\n                    'B' =>\n                        'b',\n      \
    \              'C' =>\n                        'c',\n                    'D' =>\n\
    \                        'd',\n                    'E' =>\n                  \
    \      'e',\n                    'F' =>\n                        'f',\n      \
    \              'G' =>\n                        'g',\n                    'H' =>\n\
    \                        'h',\n                    'I' =>\n                  \
    \      'i',\n                    'J' =>\n                        'j',\n      \
    \              'K' =>\n                        'k',\n                    'L' =>\n\
    \                        'l',\n                    'M' =>\n                  \
    \      'm',\n                    'N' =>\n                        'n',\n      \
    \              'O' =>\n                        'o',\n                    'P' =>\n\
    \                        'p',\n                    'Q' =>\n                  \
    \      'q',\n                    'R' =>\n                        'r',\n      \
    \              'S' =>\n                        's',\n                    'T' =>\n\
    \                        't',\n                    'U' =>\n                  \
    \      'u',\n                    'V' =>\n                        'v',\n      \
    \              'W' =>\n                        'w',\n                    'X' =>\n\
    \                        'x',\n                    'Y' =>\n                  \
    \      'y',\n                    'Z' =>\n                        'z',\n      \
    \              '0' =>\n                        '0',\n                    '1' =>\n\
    \                        '1',\n                    '2' =>\n                  \
    \      '2',\n                    '3' =>\n                        '3',\n      \
    \              '4' =>\n                        '4',\n                    '5' =>\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpa4s_m5wm.rs:131:3\n\
    \    |\n4   | fn flip_case(string: String) -> String {\n    |                \
    \                        - unclosed delimiter\n5   |     string.chars()\n6   |\
    \         .map(|c| match c {\n    |             -            - unclosed delimiter\n\
    \    |             |\n    |             unclosed delimiter\n7   |            \
    \ 'A' =>\n8   |                 match c {\n    |                         - this\
    \ delimiter might not be properly closed...\n...\n124 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n131 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmpa4s_m5wm.rs:124:1\n    |\n123 |      \
    \               '5' =>\n    |                         -- while parsing the `match`\
    \ arm starting here\n124 | }\n    | ^ expected expression\n\nerror: expected identifier,\
    \ found keyword `fn`\n   --> /tmp/tmpa4s_m5wm.rs:126:1\n    |\n126 | fn main()\
    \ {\n    | ^^ expected identifier, found keyword\n\nerror: expected one of `=>`,\
    \ `@`, `if`, or `|`, found `main`\n   --> /tmp/tmpa4s_m5wm.rs:126:4\n    |\n126\
    \ | fn main() {\n    |    ^^^^ expected one of `=>`, `@`, `if`, or `|`\n\nerror[E0308]:\
    \ mismatched types\n   --> /tmp/tmpa4s_m5wm.rs:5:5\n    |\n4   |   fn flip_case(string:\
    \ String) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n5   | /     string.chars()\n6   | |       \
    \  .map(|c| match c {\n7   | |             'A' =>\n8   | |                 match\
    \ c {\n...   |\n130 | |     assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ END...\n131 | | }\n    | |__^ expected struct `String`, found struct `Map`\n\
    \    |\n    = note: expected struct `String`\n               found struct `Map<Chars<'_>,\
    \ [closure@/tmp/tmpa4s_m5wm.rs:6:14: 131:3]>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().rev().map(|c|\
    \ c.to_ascii_lowercase()).collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"!olleh\"`,\n right: `\"hELLO!\"`', /tmp/tmpilgh08fq.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            'a' => { 'A' }\n            'A' => {\
    \ 'a' }\n            'b' => { 'B' }\n            'B' => { 'b' }\n            'c'\
    \ => { 'C' }\n            'C' => { 'c' }\n            'd' => { 'D' }\n       \
    \     'D' => { 'd' }\n            'e' => { 'E' }\n            'E' => { 'e' }\n\
    \            'f' => { 'F' }\n            'F' => { 'f' }\n            'g' => {\
    \ 'G' }\n            'G' => { 'g' }\n            'h' => { 'H' }\n            'H'\
    \ => { 'h' }\n            'i' => { 'I' }\n            'I' => { 'i' }\n       \
    \     'j' => { 'J' }\n            'J' => { 'j' }\n            'k' => { 'K' }\n\
    \            'K' => { 'k' }\n            'l' => { 'L' }\n            'L' => {\
    \ 'l' }\n            'm' => { 'M' }\n            'M' => { 'm' }\n            'n'\
    \ => { 'N' }\n            'N' => { 'n' }\n            'o' => { 'O' }\n       \
    \     'O' => { 'o' }\n            'p' => { 'P' }\n            'P' => { 'p' }\n\
    \            'q' => { 'Q' }\n            'Q' => { 'q' }\n            'r' => {\
    \ 'R' }\n            'R' => { 'r' }\n            's' => { 'S' }\n            'S'\
    \ => { 's' }\n            't' => { 'T' }\n            'T' => { 't' }\n       \
    \     'u' => { 'U' }\n            'U' => { 'u' }\n            'v' => { 'V' }\n\
    \            'V' => { 'v' }\n            'w' => { 'W' }\n            'W' => {\
    \ 'w' }\n            'x' => { 'X' }\n            'X' => { 'x' }\n            'y'\
    \ => { 'Y' }\n            'Y' => { 'y' }\n            'z' => { 'Z' }\n       \
    \     'Z' => { 'z' }\n            _ => c,\n        })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\n\
    \        c.to_string().chars().collect::<Vec<_>>()\n            .iter()\n    \
    \        .map(|c|\n                if c >= 'A' && c <= 'Z' { c as u8 + 'a' as\
    \ u8 + 26 }\n                else if c >= 'a' && c <= 'z' { c as u8 + 'A' as u8\
    \ + 26 })\n            .collect::<Vec<_>>()\n            .join()\n    ).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxa_hx523.rs:9:25\n  |\n9 |\
    \                 if c >= 'A' && c <= 'Z' { c as u8 + 'a' as u8 + 26 }\n  |  \
    \                       ^^^\n  |                         |\n  |              \
    \           expected `&char`, found `char`\n  |                         help:\
    \ consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxa_hx523.rs:9:37\n\
    \  |\n9 |                 if c >= 'A' && c <= 'Z' { c as u8 + 'a' as u8 + 26 }\n\
    \  |                                     ^^^\n  |                            \
    \         |\n  |                                     expected `&char`, found `char`\n\
    \  |                                     help: consider borrowing here: `&'Z'`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxa_hx523.rs:10:30\n   |\n10 |\
    \                 else if c >= 'a' && c <= 'z' { c as u8 + 'A' as u8 + 26 })\n\
    \   |                              ^^^\n   |                              |\n\
    \   |                              expected `&char`, found `char`\n   |      \
    \                        help: consider borrowing here: `&'a'`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxa_hx523.rs:10:42\n   |\n10 |              \
    \   else if c >= 'a' && c <= 'z' { c as u8 + 'A' as u8 + 26 })\n   |         \
    \                                 ^^^\n   |                                  \
    \        |\n   |                                          expected `&char`, found\
    \ `char`\n   |                                          help: consider borrowing\
    \ here: `&'z'`\n\nerror[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpxa_hx523.rs:10:22\n\
    \   |\n10 |                 else if c >= 'a' && c <= 'z' { c as u8 + 'A' as u8\
    \ + 26 })\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------^^\n\
    \   |                      |                         |\n   |                 \
    \     |                         found here\n   |                      expected\
    \ `()`, found `u8`\n   |\n   = note: `if` expressions without `else` evaluate\
    \ to `()`\n   = help: consider adding an `else` block that evaluates to the expected\
    \ type\n\nerror[E0061]: this "
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c >= 'A' && c <= 'Z' { c + ('a' - 'A') } else { c })\n       \
    \ .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmpearrieir.rs:6:53\n\
    \  |\n6 |         .map(|c| if c >= 'A' && c <= 'Z' { c + ('a' - 'A') } else {\
    \ c })\n  |                                                 --- ^ --- char\n \
    \ |                                                 |\n  |                   \
    \                              char\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().chars().map(|c|\
    \ match c {\n        c if c.is_upper() => c.to_uppercase().to_string(),\n    \
    \    c => c.to_string(),\n    }).collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpt5qkbqlu.rs:6:16\n  |\n6 |         c if c.is_upper() =>\
    \ c.to_uppercase().to_string(),\n  |                ^^^^^^^^ help: there is an\
    \ associated function with a similar name: `is_uppercase`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter_map(|c| match c.to_ascii_lowercase() {\n            Ok(c) =>\
    \ Some(c.to_ascii_uppercase()),\n            Err(_) => None,\n        })\n   \
    \     .collect::<String>()\n        .join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmy1inizl.rs:8:13\n  |\n7 |\
    \         .filter_map(|c| match c.to_ascii_lowercase() {\n  |                \
    \               ---------------------- this expression has type `char`\n8 |  \
    \           Ok(c) => Some(c.to_ascii_uppercase()),\n  |             ^^^^^ expected\
    \ `char`, found enum `Result`\n  |\n  = note: expected type `char`\n         \
    \    found enum `Result<_, _>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmy1inizl.rs:9:13\n\
    \  |\n7 |         .filter_map(|c| match c.to_ascii_lowercase() {\n  |        \
    \                       ---------------------- this expression has type `char`\n\
    8 |             Ok(c) => Some(c.to_ascii_uppercase()),\n9 |             Err(_)\
    \ => None,\n  |             ^^^^^^ expected `char`, found enum `Result`\n  |\n\
    \  = note: expected type `char`\n             found enum `Result<_, _>`\n\nerror[E0599]:\
    \ no method named `join` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpmy1inizl.rs:12:10\n   |\n12 |         .join(\"\")\n   |          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars().rev()\
    \ {\n        Some(iter) => String::from_iter(iter.flip().cloned().rev()),\n  \
    \      None => string,\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpodporl8o.rs:6:9\n  |\n5 |\
    \     match string.chars().rev() {\n  |           -------------------- this expression\
    \ has type `Rev<Chars<'_>>`\n6 |         Some(iter) => String::from_iter(iter.flip().cloned().rev()),\n\
    \  |         ^^^^^^^^^^ expected struct `Rev`, found enum `Option`\n  |\n  = note:\
    \ expected struct `Rev<Chars<'_>>`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpodporl8o.rs:7:9\n  |\n5 |     match\
    \ string.chars().rev() {\n  |           -------------------- this expression has\
    \ type `Rev<Chars<'_>>`\n6 |         Some(iter) => String::from_iter(iter.flip().cloned().rev()),\n\
    7 |         None => string,\n  |         ^^^^ expected struct `Rev`, found enum\
    \ `Option`\n  |\n  = note: expected struct `Rev<Chars<'_>>`\n               found\
    \ enum `Option<_>`\n\nerror[E0599]: no function or associated item named `from_iter`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpodporl8o.rs:6:31\n\
    \  |\n6 |         Some(iter) => String::from_iter(iter.flip().cloned().rev()),\n\
    \  |                               ^^^^^^^^^ function or associated item not found\
    \ in `String`\n  |\n  = help: items from traits can only be used if the trait\
    \ is in scope\nhelp: the following trait is implemented but not in scope; perhaps\
    \ add a `use` for it:\n  |\n1 | use std::iter::FromIterator;\n  |\nhelp: there\
    \ is an associated function with a similar name\n  |\n6 |         Some(iter) =>\
    \ String::from_utf8(iter.flip().cloned().rev()),\n  |                        \
    \       ~~~~~~~~~\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .filter_map(|c|\n            if c.is_lowercase() {\n                c.to_uppercase()\n\
    \            } else {\n                c.to_lowercase()\n            })\n    \
    \    .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplr3d0kt6.rs:8:17\n  |\n8 |\
    \                 c.to_uppercase()\n  |                 ^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `ToUppercase`\n  |\n  = note: expected enum `Option<_>`\n\
    \           found struct `ToUppercase`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n8 |                 Some(c.to_uppercase())\n  |                 +++++  \
    \              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplr3d0kt6.rs:10:17\n\
    \   |\n10 |                 c.to_lowercase()\n   |                 ^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `ToLowercase`\n   |\n   = note: expected\
    \ enum `Option<_>`\n            found struct `ToLowercase`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n10 |                 Some(c.to_lowercase())\n\
    \   |                 +++++                +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            c if c.is_lowercase() => c.to_uppercase(),\n            _ => c,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpr2g2dp7r.rs:9:38\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_uppercase() => c.to_lowercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToLowercase`\n\
    9  | |             c if c.is_lowercase() => c.to_uppercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToLowercase`,\
    \ found struct `ToUppercase`\n10 | |             _ => c,\n11 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter(|c| c.is_uppercase())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect::<String>()\n        .join(\"\".into())\n        .into()\n \
    \       .to_ascii_lowercase()\n        .into()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp0pjq_vk3.rs:10:10\n   |\n10 |         .join(\"\".into())\n\
    \   |          ^^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut buffer = string.into_bytes();\n\
    \    buffer.iter().for_each(|b| {\n        if *b >= 'a' && *b <= 'z' {\n     \
    \       *b = *b - ('a'..'z').contains(*b) ? *b + 'A' - ('a'..'z').contains(*b)\
    \ : 'z';\n        }\n    });\n    String::from_utf8(buffer).unwrap()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `'z'`\n --> /tmp/tmpepw8h55u.rs:8:86\n  |\n\
    8 |             *b = *b - ('a'..'z').contains(*b) ? *b + 'A' - ('a'..'z').contains(*b)\
    \ : 'z';\n  |                                                                \
    \                    - ^^^ expected type\n  |                                \
    \                                                    |\n  |                  \
    \                                                                  tried to parse\
    \ a type due to this\n\nerror[E0308]: mismatched types\n --> /tmp/tmpepw8h55u.rs:7:18\n\
    \  |\n7 |         if *b >= 'a' && *b <= 'z' {\n  |                  ^^^ expected\
    \ `u8`, found `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpepw8h55u.rs:7:31\n\
    \  |\n7 |         if *b >= 'a' && *b <= 'z' {\n  |                           \
    \    ^^^ expected `u8`, found `char`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c >= 'A' && c <= 'Z' { c - 'A' + 'a' }\n                         else { c\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmporshfugp.rs:5:56\n\
    \  |\n5 |     string.chars().map(|c| if c >= 'A' && c <= 'Z' { c - 'A' + 'a' }\n\
    \  |                                                      - ^ --- char\n  |  \
    \                                                    |\n  |                  \
    \                                    char\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_string()\n \
    \       .chars()\n        .map(|c| match c {\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpjxa6kob8.rs:9:38\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_uppercase() => c.to_lowercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToLowercase`\n\
    9  | |             c if c.is_lowercase() => c.to_uppercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToLowercase`,\
    \ found struct `ToUppercase`\n10 | |             _ => c,\n11 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpd_kj53vw.rs:7:66\n\
    \  |\n7 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut output = String::with_capacity(string.length());\n\
    \    let mut iter = string.char_indices();\n    for (i, c) in iter.enumerate()\
    \ {\n        match c {\n            b'a' => output.push(b'A'),\n            b'A'\
    \ => output.push(b'a'),\n            _ => output.push(c.clone()),\n        }\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmphlfs_zxr.rs:5:51\n  |\n5 |     let mut output =\
    \ String::with_capacity(string.length());\n  |                               \
    \                    ^^^^^^ help: there is an associated function with a similar\
    \ name: `len`\n\nerror[E0308]: mismatched types\n --> /tmp/tmphlfs_zxr.rs:9:13\n\
    \  |\n8 |         match c {\n  |               - this expression has type `(usize,\
    \ char)`\n9 |             b'a' => output.push(b'A'),\n  |             ^^^^ expected\
    \ tuple, found `u8`\n  |\n  = note: expected tuple `(usize, char)`\n         \
    \     found type `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphlfs_zxr.rs:10:13\n\
    \   |\n8  |         match c {\n   |               - this expression has type `(usize,\
    \ char)`\n9  |             b'a' => output.push(b'A'),\n10 |             b'A' =>\
    \ output.push(b'a'),\n   |             ^^^^ expected tuple, found `u8`\n   |\n\
    \   = note: expected tuple `(usize, char)`\n               found type `u8`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmphlfs_zxr.rs:9:33\n  |\n9 |      \
    \       b'a' => output.push(b'A'),\n  |                                 ^^^^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphlfs_zxr.rs:10:33\n\
    \   |\n10 |             b'A' => output.push(b'a'),\n   |                     \
    \            ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphlfs_zxr.rs:11:30\n   |\n11 |             _ => output.push(c.clone()),\n\
    \   |                              ^^^^^^^^^ expected `char`, found tuple\n  \
    \ |\n   = note: expected type `char`\n             found tuple `(usize, char)`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c.to_ascii_lowercase() {\n        Some('a') => Some('A'),\n        Some('b')\
    \ => Some('B'),\n        Some('c') => Some('C'),\n        Some('d') => Some('D'),\n\
    \        Some('e') => Some('E'),\n        Some('f') => Some('F'),\n        Some('g')\
    \ => Some('G'),\n        Some('h') => Some('H'),\n        Some('i') => Some('I'),\n\
    \        Some('j') => Some('J'),\n        Some('k') => Some('K'),\n        Some('l')\
    \ => Some('L'),\n        Some('m') => Some('M'),\n        Some('n') => Some('N'),\n\
    \        Some('o') => Some('O'),\n        Some('p') => Some('P'),\n        Some('q')\
    \ => Some('Q'),\n        Some('r') => Some('R'),\n        Some('s') => Some('S'),\n\
    \        Some('t') => Some('T'),\n        Some('u') => Some('U'),\n        Some('v')\
    \ => Some('V'),\n        Some('w') => Some('W'),\n        Some('x') => Some('X'),\n\
    \        Some('y') => Some('Y'),\n        Some('z') => Some('Z'),\n        Some('0')\
    \ => Some('0'),\n        Some('1') => Some('1'),\n        Some('2') => Some('2'),\n\
    \        Some('3') => Some('3'),\n        Some('4') => Some('4'),\n        Some('5')\
    \ => Some('5'),\n        Some('6') => Some('6'),\n        Some('7') => Some('7'),\n\
    \        Some('8') => Some('8'),\n        Some('9') => Some('9'),\n        Some(c)\
    \ => Some(c),\n    })\n    .collect::<String>()\n    .to_ascii_lowercase()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi5jy984m.rs:6:9\n  |\n5 |\
    \     string.chars().map(|c| match c.to_ascii_lowercase() {\n  |             \
    \                     ---------------------- this expression has type `char`\n\
    6 |         Some('a') => Some('A'),\n  |         ^^^^^^^^^ expected `char`, found\
    \ enum `Option`\n  |\n  = note: expected type `char`\n             found enum\
    \ `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi5jy984m.rs:7:9\n\
    \  |\n5 |     string.chars().map(|c| match c.to_ascii_lowercase() {\n  |     \
    \                             ---------------------- this expression has type\
    \ `char`\n6 |         Some('a') => Some('A'),\n7 |         Some('b') => Some('B'),\n\
    \  |         ^^^^^^^^^ expected `char`, found enum `Option`\n  |\n  = note: expected\
    \ type `char`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi5jy984m.rs:8:9\n  |\n5 |     string.chars().map(|c| match\
    \ c.to_ascii_lowercase() {\n  |                                  ----------------------\
    \ this expression has type `char`\n...\n8 |         Some('c') => Some('C'),\n\
    \  |         ^^^^^^^^^ expected `char`, found enum `Option`\n  |\n  = note: expected\
    \ type `char`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi5jy984m.rs:9:9\n  |\n5 |     string.chars().map(|c| match\
    \ c.to_ascii_lowercase() {\n  |                                  ----------------------\
    \ this expression has type `char`\n...\n9 |         Some('d') => Some('D'),\n\
    \  |         ^^^^^^^^^ expected `char`, found enum `Option`\n  |\n  = note: expected\
    \ type `char`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi5jy984m.rs:10:9\n   |\n5  |     string.chars().map(|c|\
    \ match c.to_ascii_lowercase() {\n   |                                  ----------------------\
    \ this expression has type `char`\n...\n10 |         Some('e') => Some('E'),\n\
    \   |         ^^^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note:\
    \ expected type `char`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi5jy984m.rs:11:9\n   "
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.to_ascii_lowercase().is_ascii() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp_0iqd9m1.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_string().chars().map(|c|\
    \ match c {\n        c if c.is_uppercase() => c.to_lowercase(),\n        _ =>\
    \ c.to_uppercase(),\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp3s5iw_4q.rs:7:14\n\
    \  |\n5 |       string.to_string().chars().map(|c| match c {\n  |  ________________________________________-\n\
    6 | |         c if c.is_uppercase() => c.to_lowercase(),\n  | |              \
    \                    ---------------- this is found to be of type `ToLowercase`\n\
    7 | |         _ => c.to_uppercase(),\n  | |              ^^^^^^^^^^^^^^^^ expected\
    \ struct `ToLowercase`, found struct `ToUppercase`\n8 | |     }).collect()\n \
    \ | |_____- `match` arms have incompatible types\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    })\n    .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp6zhacjez.rs:7:34\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         c if c.is_lowercase() => c.to_uppercase(),\n  | |              \
    \                    ---------------- this is found to be of type `ToUppercase`\n\
    7 | |         c if c.is_uppercase() => c.to_lowercase(),\n  | |              \
    \                    ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct\
    \ `ToLowercase`\n8 | |         _ => c,\n9 | |     })\n  | |_____- `match` arms\
    \ have incompatible types\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.len() {\n\
    \        0 => string,\n        1 => &string[0] as &'static str,\n        _ =>\
    \ {\n            let mut buffer = Vec::new();\n            for &c in string.chars()\
    \ {\n                if c.is_lowercase() {\n                    buffer.push((c.to_uppercase()\
    \ as &'static str).into());\n                } else {\n                    buffer.push((c.to_lowercase()\
    \ as &'static str).into());\n                }\n            }\n            String::from(buffer.into_iter().collect::<String>())\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpdvywtt2x.rs:7:14\n\
    \   |\n5  | /     match string.len() {\n6  | |         0 => string,\n   | |  \
    \            ------ this is found to be of type `String`\n7  | |         1 =>\
    \ &string[0] as &'static str,\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n8  | |         _ => {\n...  |\n18 |\
    \ |         }\n19 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: try using a conversion method\n   |\n7  |         1 => (&string[0]\
    \ as &'static str).to_string(),\n   |              +                         \
    \ +++++++++++++\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \ --> /tmp/tmpdvywtt2x.rs:7:15\n  |\n7 |         1 => &string[0] as &'static str,\n\
    \  |               ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n  |\n\
    \  = help: the trait `Index<{integer}>` is not implemented for `String`\n  = help:\
    \ the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdvywtt2x.rs:10:17\n   |\n10 |             for\
    \ &c in string.chars() {\n   |                 ^^    -------------- this expression\
    \ has type `Option<char>`\n   |                 |\n   |                 expected\
    \ `char`, found reference\n   |                 help: you can probably remove\
    \ the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n        \
    \   found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp7jmto6x6.rs:6:66\n\
    \  |\n6 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .filter_map(|c| match c {\n            'a' => b'A',\n            'b' => b'B',\n\
    \            'c' => b'C',\n            'd' => b'D',\n            'e' => b'E',\n\
    \            'f' => b'F',\n            'g' => b'G',\n            'h' => b'H',\n\
    \            'i' => b'I',\n            'j' => b'J',\n            'k' => b'K',\n\
    \            'l' => b'L',\n            'm' => b'M',\n            'n' => b'N',\n\
    \            'o' => b'O',\n            'p' => b'P',\n            'q' => b'Q',\n\
    \            'r' => b'R',\n            's' => b'S',\n            't' => b'T',\n\
    \            'u' => b'U',\n            'v' => b'V',\n            'w' => b'W',\n\
    \            'x' => b'X',\n            'y' => b'Y',\n            'z' => b'Z',\n\
    \            _ => c,\n        })\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptvkdg0s8.rs:7:20\n  |\n7 |\
    \             'a' => b'A',\n  |                    ^^^^ expected enum `Option`,\
    \ found `u8`\n  |\n  = note: expected enum `Option<_>`\n             found type\
    \ `u8`\nhelp: try wrapping the expression in `Some`\n  |\n7 |             'a'\
    \ => Some(b'A'),\n  |                    +++++    +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c.to_ascii_lowercase() {\n        Some('z') => Some('Z'),\n        _ =>\
    \ c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr7fmv6me.rs:6:9\n  |\n5 |\
    \     string.chars().map(|c| match c.to_ascii_lowercase() {\n  |             \
    \                     ---------------------- this expression has type `char`\n\
    6 |         Some('z') => Some('Z'),\n  |         ^^^^^^^^^ expected `char`, found\
    \ enum `Option`\n  |\n  = note: expected type `char`\n             found enum\
    \ `Option<_>`\n\nerror[E0308]: `match` arms have incompatible types\n --> /tmp/tmpr7fmv6me.rs:7:14\n\
    \  |\n5 |       string.chars().map(|c| match c.to_ascii_lowercase() {\n  |  ____________________________-\n\
    6 | |         Some('z') => Some('Z'),\n  | |                      --------- this\
    \ is found to be of type `Option<char>`\n7 | |         _ => c,\n  | |        \
    \      ^ expected enum `Option`, found `char`\n8 | |     }).collect()\n  | |_____-\
    \ `match` arms have incompatible types\n  |\n  = note: expected enum `Option<char>`\n\
    \             found type `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().rev().chain(string.chars())\n\
    \        .map(|c| match c {\n            'A'..='Z' => c as u8 ^ ('A' as u8) as\
    \ u8,\n            'a'..='z' => c as u8 ^ ('a' as u8) as u8,\n            _ =>\
    \ c,\n        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpl2b12gd0.rs:9:18\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           'A'..='Z' => c as u8 ^ ('A' as u8) as u8,\n   | |                \
    \          --------------------------- this is found to be of type `u8`\n8  |\
    \ |             'a'..='z' => c as u8 ^ ('a' as u8) as u8,\n   | |            \
    \              --------------------------- this is found to be of type `u8`\n\
    9  | |             _ => c,\n   | |                  ^ expected `u8`, found `char`\n\
    10 | |         })\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars() {\n\
    \        chars => String::from_utf8(chars)\n            .chain(|c| if c.is_lowercase()\
    \ { c.to_uppercase() } else { c.to_lowercase() })\n            .collect()\n  \
    \  }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpipmajzb0.rs:6:36\n  |\n6 |\
    \         chars => String::from_utf8(chars)\n  |                             \
    \       ^^^^^ expected struct `Vec`, found struct `Chars`\n  |\n  = note: expected\
    \ struct `Vec<u8>`\n             found struct `Chars<'_>`\n\nerror[E0599]: `Result<String,\
    \ FromUtf8Error>` is not an iterator\n   --> /tmp/tmpipmajzb0.rs:7:14\n    |\n\
    7   |               .chain(|c| if c.is_lowercase() { c.to_uppercase() } else {\
    \ c.to_lowercase() })\n    |                ^^^^^ `Result<String, FromUtf8Error>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Result<String, FromUtf8Error>: Iterator`\n            which is required\
    \ by `&mut Result<String, FromUtf8Error>: Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .filter_map(|c| match c {\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            c => c.to_uppercase(),\n        })\n        .collect::<String>(\"\
    \")\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0di0v00c.rs:8:38\n  |\n8 |\
    \             c if c.is_uppercase() => c.to_lowercase(),\n  |                \
    \                      ^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `ToLowercase`\n\
    \  |\n  = note: expected enum `Option<_>`\n           found struct `ToLowercase`\n\
    help: try wrapping the expression in `Some`\n  |\n8 |             c if c.is_uppercase()\
    \ => Some(c.to_lowercase()),\n  |                                      +++++ \
    \               +\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmp0di0v00c.rs:11:10\n     |\n11   |         .collect::<String>(\"\
    \")\n     |          ^^^^^^^           -- supplied 1 argument\n     |        \
    \  |\n     |          expected 0 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0061, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' ..= 'A' => { 'A' .. 'a' }\n        'a' ..= 'B' => { 'a'\
    \ .. 'B' }\n        'b' ..= 'A' => { 'B' .. 'a' }\n        'b' ..= 'B' => { 'b'\
    \ .. 'B' }\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp52s1rasm.rs:10:14\n\
    \   |\n5  |       string.chars().map(|c| match c {\n   |  ____________________________-\n\
    6  | |         'a' ..= 'A' => { 'A' .. 'a' }\n   | |                         \
    \ ---------- this is found to be of type `std::ops::Range<char>`\n7  | |     \
    \    'a' ..= 'B' => { 'a' .. 'B' }\n   | |                          ----------\
    \ this is found to be of type `std::ops::Range<char>`\n8  | |         'b' ..=\
    \ 'A' => { 'B' .. 'a' }\n   | |                          ---------- this is found\
    \ to be of type `std::ops::Range<char>`\n9  | |         'b' ..= 'B' => { 'b' ..\
    \ 'B' }\n   | |                          ---------- this is found to be of type\
    \ `std::ops::Range<char>`\n10 | |         _ => c,\n   | |              ^ expected\
    \ struct `std::ops::Range`, found `char`\n11 | |     }).collect()\n   | |_____-\
    \ `match` arms have incompatible types\n   |\n   = note: expected struct `std::ops::Range<char>`\n\
    \                found type `char`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A'..='Z' => c as u8 | 0x20,\n        'a'..='z' => c as u8\
    \ | 0x21,\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpuopzw_2h.rs:8:14\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         'A'..='Z' => c as u8 | 0x20,\n  | |                      --------------\
    \ this is found to be of type `u8`\n7 | |         'a'..='z' => c as u8 | 0x21,\n\
    \  | |                      -------------- this is found to be of type `u8`\n\
    8 | |         _ => c,\n  | |              ^ expected `u8`, found `char`\n9 | |\
    \     }).collect()\n  | |_____- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| {\n            if c.is_lowercase() {\n                c.to_uppercase()\n\
    \            } else {\n                c.to_lowercase()\n            }\n     \
    \   })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp91wyq3lq.rs:10:17\n\
    \   |\n7  | /             if c.is_lowercase() {\n8  | |                 c.to_uppercase()\n\
    \   | |                 ---------------- expected because of this\n9  | |    \
    \         } else {\n10 | |                 c.to_lowercase()\n   | |          \
    \       ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n\
    11 | |             }\n   | |_____________- `if` and `else` have incompatible types\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpw90gcv54.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().flat_map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase()\n        } else\
    \ {\n            c.to_lowercase()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp1_qo8_lv.rs:9:13\n\
    \   |\n6  | /         if c.is_lowercase() {\n7  | |             c.to_uppercase()\n\
    \   | |             ---------------- expected because of this\n8  | |        \
    \ } else {\n9  | |             c.to_lowercase()\n   | |             ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n10 | |         }\n\
    \   | |_________- `if` and `else` have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A'..'Z' => c as char + 'a' - 'A' as char,\n        'a'..'z'\
    \ => c as char + 'A' - 'a' as char,\n        _ => c,\n    })\n    .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpamu5_au6.rs:6:9\n\
    \  |\n6 |         'A'..'Z' => c as char + 'a' - 'A' as char,\n  |         ^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpamu5_au6.rs:7:9\n  |\n7 |         'a'..'z' => c as char + 'A' -\
    \ 'a' as char,\n  |         ^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpamu5_au6.rs:6:31\n\
    \  |\n6 |         'A'..'Z' => c as char + 'a' - 'A' as char,\n  |            \
    \         --------- ^ --- char\n  |                     |\n  |               \
    \      char\n\nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpamu5_au6.rs:7:31\n\
    \  |\n7 |         'a'..'z' => c as char + 'A' - 'a' as char,\n  |            \
    \         --------- ^ --- char\n  |                     |\n  |               \
    \      char\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0369, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.is_upper() { c.to_lowercase() } else { c.to_uppercase() })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpwhfhhd9z.rs:6:23\n  |\n6 |         .map(|c| if c.is_upper()\
    \ { c.to_lowercase() } else { c.to_uppercase() })\n  |                       ^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_uppercase`\n\n\
    error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpwhfhhd9z.rs:6:62\n\
    \  |\n6 |         .map(|c| if c.is_upper() { c.to_lowercase() } else { c.to_uppercase()\
    \ })\n  |                                    ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToLowercase`, found struct `ToUppercase`\n  |             \
    \                       |\n  |                                    expected because\
    \ of this\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_ascii_lowercase().to_ascii_uppercase().to_string()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmppvm3wi12.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut buffer = StringBuffer::new();\n\
    \    for c in string.chars() {\n        match c {\n            c if c.is_uppercase()\
    \ => buffer.push(c),\n            c if c.is_lowercase() => buffer.push(c),\n \
    \           _ => (),\n        }\n    }\n    buffer.into()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `StringBuffer`\n\
    \ --> /tmp/tmpkiiz2m9y.rs:5:22\n  |\n5 |     let mut buffer = StringBuffer::new();\n\
    \  |                      ^^^^^^^^^^^^ use of undeclared type `StringBuffer`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().fold(String::from(\"\
    __\"), |mut acc, c| {\n        acc.push_str(c.to_lowercase());\n        acc.push_str(c.to_uppercase());\n\
    \        acc\n    })\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxb73bfdm.rs:6:22\n  |\n6 |\
    \         acc.push_str(c.to_lowercase());\n  |                      ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxb73bfdm.rs:7:22\n  |\n7 |         acc.push_str(c.to_uppercase());\n\
    \  |                      ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.into_iter().map(|c|\
    \ c.to_ascii_lowercase().to_string()).collect::<String>().into_owned()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpfu5ywany.rs:5:12\n    |\n5 \
    \  |       string.into_iter().map(|c| c.to_ascii_lowercase().to_string()).collect::<String>().into_owned()\n\
    \    |              ^^^^^^^^^\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            `str:\
    \ Sized`\n            which is required by `str: IntoIterator`\n            `str:\
    \ Iterator`\n            which is required by `str: IntoIterator`\n          \
    \  `&str: Iterator`\n            which is required by `&str: IntoIterator`\n \
    \           `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut buffer = Buffer::new(string);\n\
    \    for &b in buffer.bytes() {\n        let c = b.to_ascii_lowercase();\n   \
    \     buffer.replace(b as usize, c.len(), c);\n    }\n    buffer.into()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Buffer`\n -->\
    \ /tmp/tmp445myaex.rs:5:22\n  |\n5 |     let mut buffer = Buffer::new(string);\n\
    \  |                      ^^^^^^ use of undeclared type `Buffer`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_upper() { c.to_lowercase() } else { c.to_uppercase() }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpovhwyt27.rs:5:33\n  |\n5 |     string.chars().map(|c| if\
    \ c.is_upper() { c.to_lowercase() } else { c.to_uppercase() }).collect()\n  |\
    \                                 ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_uppercase`\n\nerror[E0308]: `if` and `else` have incompatible\
    \ types\n --> /tmp/tmpovhwyt27.rs:5:72\n  |\n5 |     string.chars().map(|c| if\
    \ c.is_upper() { c.to_lowercase() } else { c.to_uppercase() }).collect()\n  |\
    \                                              ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToLowercase`, found struct `ToUppercase`\n  |             \
    \                                 |\n  |                                     \
    \         expected because of this\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase().chars().chain(&string.to_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&String` is not an iterator\n --> /tmp/tmp4u9jcebm.rs:5:41\n\
    \  |\n5 |     string.to_lowercase().chars().chain(&string.to_uppercase()).collect()\n\
    \  |                                   ----- ^^^^^^^^^^^^^^^^^^^^^^ `&String`\
    \ is not an iterator\n  |                                   |\n  |           \
    \                        required by a bound introduced by this call\n  |\n  =\
    \ help: the trait `Iterator` is not implemented for `&String`\n  = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `&String`\n\n\
    error[E0599]: the method `collect` exists for struct `std::iter::Chain<Chars<'_>,\
    \ &String>`, but its trait bounds were not satisfied\n  --> /tmp/tmp4u9jcebm.rs:5:65\n\
    \   |\n5  |       string.to_lowercase().chars().chain(&string.to_uppercase()).collect()\n\
    \   |                                                                   ^^^^^^^\
    \ method cannot be called on `std::iter::Chain<Chars<'_>, &String>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<&String as Iterator>::Item = char`\n           which is required\
    \ by `std::iter::Chain<Chars<'_>, &String>: Iterator`\n           `&String: Iterator`\n\
    \           which is required by `std::iter::Chain<Chars<'_>, &String>: Iterator`\n\
    \           `std::iter::Chain<Chars<'_>, &String>: Iterator`\n           which\
    \ is required by `&mut std::iter::Chain<Chars<'_>, &String>: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut string = string;\n\
    \    string.chars().enumerate().for_each(|(i, char)| {\n        match char {\n\
    \            c if c.is_lowercase() => (*char).to_uppercase(),\n            c =>\
    \ (*char).to_lowercase(),\n        }\n    });\n    string\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpsxvagryf.rs:8:38\n\
    \  |\n8 |             c if c.is_lowercase() => (*char).to_uppercase(),\n  |  \
    \                                    ^^^^^^^\n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n --> /tmp/tmpsxvagryf.rs:9:18\n  |\n9 |             c => (*char).to_lowercase(),\n\
    \  |                  ^^^^^^^\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().chain(string.chars().map(|c|\
    \ if c == c.to_ascii_lowercase() || c == c.to_ascii_uppercase() { c } else { c.to_ascii_lowercase()\
    \ }))\n    .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpky_6efvk.rs:12:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n\
    \        c => c.to_ascii_lowercase(),\n    }).collect()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars() {\n\
    \        x @ _ => string.replace(&x, x.to_uppercase().to_lowercase()).to_string()\n\
    \    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_uppercase` found for struct `Chars` in\
    \ the current scope\n --> /tmp/tmpl8luuj71.rs:6:39\n  |\n6 |         x @ _ =>\
    \ string.replace(&x, x.to_uppercase().to_lowercase()).to_string()\n  |       \
    \                                ^^^^^^^^^^^^ method not found in `Chars<'_>`\n\
    \nerror[E0277]: expected a `Fn<(char,)>` closure, found `Chars<'_>`\n   --> /tmp/tmpl8luuj71.rs:6:25\n\
    \    |\n6   |         x @ _ => string.replace(&x, x.to_uppercase().to_lowercase()).to_string()\n\
    \    |                         ^^^^^^^ expected an `Fn<(char,)>` closure, found\
    \ `Chars<'_>`\n    |\n    = help: the trait `Fn<(char,)>` is not implemented for\
    \ `Chars<'_>`\n    = help: the following other types implement trait `Pattern<'a>`:\n\
    \              &'b String\n              &'b [char; N]\n              &'b [char]\n\
    \              &'b str\n              &'c &'b str\n              [char; N]\n \
    \             char\n              pattern::MultiCharEqPattern<C>\n    = note:\
    \ required because of the requirements on the impl of `FnOnce<(char,)>` for `&Chars<'_>`\n\
    \    = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `&Chars<'_>`\nnote: required by a bound in `str::<impl str>::replace`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A'..='Z' => c + &'a' - &'A',\n        'a'..='z' => c + &'A'\
    \ - &'a',\n        _ => c,\n    }).collect::<String>().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&char` to `char`\n --> /tmp/tmphvgj8dmm.rs:6:24\n\
    \  |\n6 |         'A'..='Z' => c + &'a' - &'A',\n  |                      - ^\
    \ ---- &char\n  |                      |\n  |                      char\n\nerror[E0369]:\
    \ cannot add `&char` to `char`\n --> /tmp/tmphvgj8dmm.rs:7:24\n  |\n7 |      \
    \   'a'..='z' => c + &'A' - &'a',\n  |                      - ^ ---- &char\n \
    \ |                      |\n  |                      char\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut iter = string.chars();\n\
    \    let mut s = String::new();\n    for (i, &c) in iter.into_iter().enumerate()\
    \ {\n        if c.is_lowercase() {\n            s.push_str(&c.to_uppercase());\n\
    \        } else {\n            s.push_str(&c.to_lowercase());\n        }\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_tomfj12.rs:7:13\n  |\n7 |\
    \     for (i, &c) in iter.into_iter().enumerate() {\n  |             ^^     ----------------------------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected `char`, found reference\n  |             help: you can probably\
    \ remove the explicit borrow: `c`\n  |\n  = note:   expected type `char`\n   \
    \       found reference `&_`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            'a' => { 'A' }\n            'A' => { 'a' }\n\
    \            'b' => { 'B' }\n            'B' => { 'b' }\n            'c' => {\
    \ 'C' }\n            'C' => { 'c' }\n            'd' => { 'D' }\n            'D'\
    \ => { 'd' }\n            'e' => { 'E' }\n            'E' => { 'e' }\n       \
    \     'f' => { 'F' }\n            'F' => { 'f' }\n            'g' => { 'G' }\n\
    \            'G' => { 'g' }\n            'h' => { 'H' }\n            'H' => {\
    \ 'h' }\n            'i' => { 'I' }\n            'I' => { 'i' }\n            'j'\
    \ => { 'J' }\n            'J' => { 'j' }\n            'k' => { 'K' }\n       \
    \     'K' => { 'k' }\n            'l' => { 'L' }\n            'L' => { 'l' }\n\
    \            'm' => { 'M' }\n            'M' => { 'm' }\n            'n' => {\
    \ 'N' }\n            'N' => { 'n' }\n            'o' => { 'O' }\n            'O'\
    \ => { 'o' }\n            'p' => { 'P' }\n            'P' => { 'p' }\n       \
    \     'q' => { 'Q' }\n            'Q' => { 'q' }\n            'r' => { 'R' }\n\
    \            'R' => { 'r' }\n            's' => { 'S' }\n            'S' => {\
    \ 's' }\n            't' => { 'T' }\n            'T' => { 't' }\n            'u'\
    \ => { 'U' }\n            'U' => { 'u' }\n            'v' => { 'V' }\n       \
    \     'V' => { 'v' }\n            'w' => { 'W' }\n            'W' => { 'w' }\n\
    \            'x' => { 'X' }\n            'X' => { 'x' }\n            'y' => {\
    \ 'Y' }\n            'Y' => { 'y' }\n            'z' => { 'Z' }\n            'Z'\
    \ => { 'z' }\n            _ => {\n                panic!(\"String contains invalid\
    \ character\")\n            }\n        })\n        .collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''String contains invalid character'', /tmp/tmp47rgzjg1.rs:60:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().fold1(|mut\
    \ acc: Char, f| {\n        match f {\n            c if c >= 'a' && c <= 'z' =>\
    \ {\n                acc += Char::to_upper(c);\n            }\n            c if\
    \ c >= 'A' && c <= 'Z' => {\n                acc += Char::to_lower(c);\n     \
    \       }\n            _ => panic!(\"invalid character: {}\", f),\n        }\n\
    \        acc\n    })\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Char`\n --> /tmp/tmpjs_cvvz6.rs:8:24\n\
    \  |\n8 |                 acc += Char::to_upper(c);\n  |                     \
    \   ^^^^ use of undeclared type `Char`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Char`\n  --> /tmp/tmpjs_cvvz6.rs:11:24\n   |\n11 |     \
    \            acc += Char::to_lower(c);\n   |                        ^^^^ use of\
    \ undeclared type `Char`\n\nerror[E0412]: cannot find type `Char` in this scope\n\
    \ --> /tmp/tmpjs_cvvz6.rs:5:36\n  |\n5 |     string.chars().fold1(|mut acc: Char,\
    \ f| {\n  |                                    ^^^^ help: a builtin type with\
    \ a similar name exists (notice the capitalization): `char`\n\nerror[E0599]: no\
    \ method named `fold1` found for struct `Chars` in the current scope\n --> /tmp/tmpjs_cvvz6.rs:5:20\n\
    \  |\n5 |     string.chars().fold1(|mut acc: Char, f| {\n  |                 \
    \   ^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ b'a' | b'A' => (c as u8 - b'a' +\
    \ b'A') as u8,\n            c => (c as u8 + b'a' as u8) as u8,\n        })\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0408]: variable `c` is not bound in all patterns\n --> /tmp/tmp0sl0jnf6.rs:8:24\n\
    \  |\n8 |             c @ b'a' | b'A' => (c as u8 - b'a' + b'A') as u8,\n  | \
    \            -          ^^^^ pattern doesn't bind `c`\n  |             |\n  |\
    \             variable not in all patterns\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp0sl0jnf6.rs:8:17\n  |\n7 |         .map(|c| match c {\n  |     \
    \                   - this expression has type `char`\n8 |             c @ b'a'\
    \ | b'A' => (c as u8 - b'a' + b'A') as u8,\n  |                 ^^^^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0sl0jnf6.rs:8:24\n\
    \  |\n7 |         .map(|c| match c {\n  |                        - this expression\
    \ has type `char`\n8 |             c @ b'a' | b'A' => (c as u8 - b'a' + b'A')\
    \ as u8,\n  |                        ^^^^ expected `char`, found `u8`\n\nerror[E0277]:\
    \ a value of type `String` cannot be built from an iterator over elements of type\
    \ `u8`\n    --> /tmp/tmp0sl0jnf6.rs:11:10\n     |\n11   |         .collect()\n\
    \     |          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=u8>`\n\
    \     |\n     = help: the trait `FromIterator<u8>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0408.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as 'a' .. 'z' as u8,\n        _ => c,\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `'a'`\n --> /tmp/tmp0d1sfjlx.rs:6:28\n  |\n\
    6 |         'A' .. 'Z' => c as 'a' .. 'z' as u8,\n  |                    --  \
    \    ^^^ expected type\n  |                    |\n  |                    while\
    \ parsing the `match` arm starting here\n\nerror[E0277]: a value of type `String`\
    \ cannot be built from an iterator over elements of type `()`\n    --> /tmp/tmp0d1sfjlx.rs:8:8\n\
    \     |\n8    |     }).collect()\n     |        ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=()>`\n     |\n     = help: the\
    \ trait `FromIterator<()>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ &'a' as char => char.to_uppercase().to_string(),\n\
    \            c @ &'A' as char => char.to_lowercase().to_string(),\n          \
    \  c => c,\n        })\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found keyword\
    \ `as`\n --> /tmp/tmpx9ed_p1o.rs:8:22\n  |\n8 |             c @ &'a' as char =>\
    \ char.to_uppercase().to_string(),\n  |                      ^^ expected one of\
    \ `...`, `..=`, `..`, `=>`, `if`, or `|`\n\nerror[E0277]: a value of type `String`\
    \ cannot be built from an iterator over elements of type `()`\n    --> /tmp/tmpx9ed_p1o.rs:12:10\n\
    \     |\n12   |         .collect::<String>()\n     |          ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=()>`\n     |\n\
    \     = help: the trait `FromIterator<()>` is not implemented for `String`\n \
    \    = help: the following other types implement trait `FromIterator<A>`:\n  \
    \             <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().enumerate().filter(|&(i,\
    \ c)| {\n        match c {\n            'a' .. 'z' => c >= 'A' && c <= 'Z',\n\
    \            'A' .. 'Z' => c >= 'a' && c <= 'z',\n            _ => false,\n  \
    \      }\n    }).map(|(_, c)| {\n        match c {\n            'a' .. 'z' =>\
    \ c as u8 + 'A' as u8,\n            'A' .. 'Z' => c as u8 + 'a' as u8,\n     \
    \       _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpysujw2iq.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => c >= 'A' && c <= 'Z',\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpysujw2iq.rs:8:13\n  |\n8 |             'A' .. 'Z' => c >= 'a' &&\
    \ c <= 'z',\n  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpysujw2iq.rs:13:13\n   |\n13 |             'a' .. 'z' => c as u8\
    \ + 'A' as u8,\n   |             ^^^^^^^^^^\n   |\n   = note: see issue #37854\
    \ <https://github.com/rust-lang/rust/issues/37854> for more information\n\nerror[E0658]:\
    \ exclusive range pattern syntax is experimental\n  --> /tmp/tmpysujw2iq.rs:14:13\n\
    \   |\n14 |             'A' .. 'Z' => c as u8 + 'a' as u8,\n   |             ^^^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpysujw2iq.rs:15:18\n   |\n12 | /         match c {\n13 | |     \
    \        'a' .. 'z' => c as u8 + 'A' as u8,\n   | |                          \
    \ ------------------- this is found to be of type `u8`\n14 | |             'A'\
    \ .. 'Z' => c as u8 + 'a' as u8,\n   | |                           -------------------\
    \ this is found to be of type `u8`\n15 | |             _ => c,\n   | |       \
    \           ^ expected `u8`, found `char`\n16 | |         }\n   | |_________-\
    \ `match` arms have incompatible types\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    if string.len() == 0 {\n\
    \        string\n    } else {\n        let mut s = string;\n        for c in s.chars()\
    \ {\n            if c.is_upper() {\n                s.insert(c.to_lowercase(),\
    \ c.to_uppercase());\n            } else {\n                s.insert(c.to_uppercase(),\
    \ c.to_lowercase());\n            }\n        }\n        s\n    }\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6f9_8ovz.rs:10:18\n   |\n10 |             if c.is_upper()\
    \ {\n   |                  ^^^^^^^^ help: there is an associated function with\
    \ a similar name: `is_uppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6f9_8ovz.rs:11:26\n\
    \   |\n11 |                 s.insert(c.to_lowercase(), c.to_uppercase());\n  \
    \ |                          ^^^^^^^^^^^^^^^^ expected `usize`, found struct `ToLowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6f9_8ovz.rs:11:44\n   |\n11 |\
    \                 s.insert(c.to_lowercase(), c.to_uppercase());\n   |        \
    \                                    ^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6f9_8ovz.rs:13:26\n\
    \   |\n13 |                 s.insert(c.to_uppercase(), c.to_lowercase());\n  \
    \ |                          ^^^^^^^^^^^^^^^^ expected `usize`, found struct `ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6f9_8ovz.rs:13:44\n   |\n13 |\
    \                 s.insert(c.to_uppercase(), c.to_lowercase());\n   |        \
    \                                    ^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.is_lowercase() { c } else { c.to_uppercase() })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpb2wswacg.rs:6:51\n\
    \  |\n6 |         .map(|c| if c.is_lowercase() { c } else { c.to_uppercase() })\n\
    \  |                                        -          ^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `ToUppercase`\n  |                                    \
    \    |\n  |                                        expected because of this\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.chars() {\n\
    \        chars => chars.map(|c| match c {\n            c @ b'A' => b'Z' |\n  \
    \          c @ b'a' => b'z' |\n            c          => c,\n        }).collect(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `@`\n --> /tmp/tmphp84cz0f.rs:8:15\n  |\n7 |             c @ b'A' => b'Z'\
    \ |\n  |                      -- while parsing the `match` arm starting here\n\
    8 |             c @ b'a' => b'z' |\n  |               ^ expected one of 8 possible\
    \ tokens\n\nerror[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `()`\n    --> /tmp/tmphp84cz0f.rs:10:12\n     |\n10  \
    \ |         }).collect(),\n     |            ^^^^^^^ value of type `String` cannot\
    \ be built from `std::iter::Iterator<Item=()>`\n     |\n     = help: the trait\
    \ `FromIterator<()>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| c.to_lowercase().to_uppercase())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_uppercase` found for struct `ToLowercase`\
    \ in the current scope\n --> /tmp/tmpn6es8zlo.rs:7:35\n  |\n7 |         .map(|c|\
    \ c.to_lowercase().to_uppercase())\n  |                                   ^^^^^^^^^^^^\
    \ method not found in `ToLowercase`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut result = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push('_');\n\
    \            result.push(c);\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"H_e_l_l_o!\"`,\n right: `\"hELLO!\"`', /tmp/tmpisw37x4p.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.into_lowercase().into_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_lowercase` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpn8x95gqx.rs:5:12\n  |\n5 |     string.into_lowercase().into_uppercase()\n\
    \  |            ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `to_lowercase`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_string().to_lowercase().to_uppercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpc830wnk8.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' ... 'z' => c + '_',\n        'A' ... 'Z' => c + '_',\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "warning: `...` range patterns are deprecated\n --> /tmp/tmps7qzm_k4.rs:6:13\n\
    \  |\n6 |         'a' ... 'z' => c + '_',\n  |             ^^^ help: use `..=`\
    \ for an inclusive range\n  |\n  = note: `#[warn(ellipsis_inclusive_range_patterns)]`\
    \ on by default\n  = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2021!\n  = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n --> /tmp/tmps7qzm_k4.rs:7:13\n\
    \  |\n7 |         'A' ... 'Z' => c + '_',\n  |             ^^^ help: use `..=`\
    \ for an inclusive range\n  |\n  = warning: this is accepted in the current edition\
    \ (Rust 2015) but is a hard error in Rust 2021!\n  = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmps7qzm_k4.rs:6:26\n \
    \ |\n6 |         'a' ... 'z' => c + '_',\n  |                        - ^ --- char\n\
    \  |                        |\n  |                        char\n\nerror[E0369]:\
    \ cannot add `char` to `char`\n --> /tmp/tmps7qzm_k4.rs:7:26\n  |\n7 |       \
    \  'A' ... 'Z' => c + '_',\n  |                        - ^ --- char\n  |     \
    \                   |\n  |                        char\n\nerror: aborting due\
    \ to 2 previous errors; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string.length()\
    \ {\n        0 => \"\",\n        _ => {\n            let mut string = string;\n\
    \            for c in &mut string {\n                if c.is_lowercase() {\n \
    \                   c.to_uppercase();\n                } else {\n            \
    \        c.to_lowercase();\n                }\n            }\n            string\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp4x2pvw_c.rs:5:18\n  |\n5 |     match string.length()\
    \ {\n  |                  ^^^^^^ help: there is an associated function with a\
    \ similar name: `len`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4x2pvw_c.rs:6:14\n\
    \  |\n4 | fn flip_case(string: String) -> String {\n  |                      \
    \           ------ expected `String` because of return type\n5 |     match string.length()\
    \ {\n6 |         0 => \"\",\n  |              ^^- help: try using a conversion\
    \ method: `.to_string()`\n  |              |\n  |              expected struct\
    \ `String`, found `&str`\n\nerror[E0277]: `String` is not an iterator\n --> /tmp/tmp4x2pvw_c.rs:9:22\n\
    \  |\n9 |             for c in &mut string {\n  |                      ^^^^^^^^^^^\
    \ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n  |\n  =\
    \ help: the trait `Iterator` is not implemented for `String`\n  = note: required\
    \ because of the requirements on the impl of `Iterator` for `&mut String`\n  =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `&mut String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .chain(string.chars().map(|c| match c {\n            c @ b'a' as 'A' | 'a'\
    \ => b'A' | b'a' as 'a' | 'z' => b'a' | 'A' | b'A' as 'z' | 'a' =>\n         \
    \       b'a' | 'a' as 'A' | 'A' as 'z',\n            _ => c,\n        }))\n  \
    \      .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found keyword\
    \ `as`\n --> /tmp/tmpg1p0u2az.rs:7:22\n  |\n7 |             c @ b'a' as 'A' |\
    \ 'a' => b'A' | b'a' as 'a' | 'z' => b'a' | 'A' | b'A' as 'z' | 'a' =>\n  |  \
    \                    ^^ expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| if c == 'A' { c } else if c == 'a' { c.to_ascii_lowercase()\
    \ } else { c.to_ascii_uppercase() })\n        .collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpnzhue4jc.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    match string\n       \
    \ .chars()\n        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            _ => c,\n        })\n        .collect::<String>() {\n        \"\"\
    \ => \"\",\n        s => s,\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp0h0gpnt1.rs:9:18\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    9  | |             _ => c,\n   | |                  ^ expected struct `ToUppercase`,\
    \ found `char`\n10 | |         })\n   | |_________- `match` arms have incompatible\
    \ types\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0h0gpnt1.rs:12:9\n  \
    \ |\n5  |       match string\n   |  ___________-\n6  | |         .chars()\n7 \
    \ | |         .map(|c| match c {\n8  | |             c if c.is_lowercase() =>\
    \ c.to_uppercase(),\n9  | |             _ => c,\n10 | |         })\n11 | |   \
    \      .collect::<String>() {\n   | |____________________________- this expression\
    \ has type `String`\n12 |           \"\" => \"\",\n   |           ^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0h0gpnt1.rs:12:15\n\
    \   |\n4  | fn flip_case(string: String) -> String {\n   |                   \
    \              ------ expected `String` because of return type\n...\n12 |    \
    \     \"\" => \"\",\n   |               ^^- help: try using a conversion method:\
    \ `.to_string()`\n   |               |\n   |               expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().filter_map(|c|\
    \ match c {\n        'A' .. 'Z' => Some('A' + c.to_ascii_lowercase().chars().next().unwrap()),\n\
    \        'a' .. 'z' => Some('a' + c.to_ascii_lowercase().chars().next().unwrap()),\n\
    \        _ => None,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpbvcdc5t8.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => Some('A' + c.to_ascii_lowercase().chars().next().unwrap()),\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpbvcdc5t8.rs:7:9\n  |\n7 |         'a' .. 'z' => Some('a' + c.to_ascii_lowercase().chars().next().unwrap()),\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `chars` found for type\
    \ `char` in the current scope\n --> /tmp/tmpbvcdc5t8.rs:6:57\n  |\n6 |       \
    \  'A' .. 'Z' => Some('A' + c.to_ascii_lowercase().chars().next().unwrap()),\n\
    \  |                                                         ^^^^^ method not\
    \ found in `char`\n\nerror[E0599]: no method named `chars` found for type `char`\
    \ in the current scope\n --> /tmp/tmpbvcdc5t8.rs:7:57\n  |\n7 |         'a' ..\
    \ 'z' => Some('a' + c.to_ascii_lowercase().chars().next().unwrap()),\n  |    \
    \                                                     ^^^^^ method not found in\
    \ `char`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_ascii_lowercase()\n\
    \        .to_ascii_uppercase()\n        .to_string()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpxaqcj4le.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c => c.to_lowercase(),\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmph8se0pme.rs:9:18\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    9  | |             c => c.to_lowercase(),\n   | |                  ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' => (c as u8) - 0x20,\n        'A' => (c as u8) + 0x20,\n\
    \        c => (c as u8) as char,\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpcerjaqqr.rs:8:14\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         'a' => (c as u8) - 0x20,\n  | |                ----------------\
    \ this is found to be of type `u8`\n7 | |         'A' => (c as u8) + 0x20,\n \
    \ | |                ---------------- this is found to be of type `u8`\n8 | |\
    \         c => (c as u8) as char,\n  | |              ^^^^^^^^^^^^^^^^^ expected\
    \ `u8`, found `char`\n9 | |     }).collect()\n  | |_____- `match` arms have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ b'A' => b'a'..b'z',\n           \
    \ c @ b'a' => b'A'..b'Z',\n            c @ b'_' => b'_',\n            _ => c,\n\
    \        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpasedozb_.rs:8:17\n  |\n7 |\
    \         .map(|c| match c {\n  |                        - this expression has\
    \ type `char`\n8 |             c @ b'A' => b'a'..b'z',\n  |                 ^^^^\
    \ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpasedozb_.rs:9:17\n\
    \  |\n7 |         .map(|c| match c {\n  |                        - this expression\
    \ has type `char`\n8 |             c @ b'A' => b'a'..b'z',\n9 |             c\
    \ @ b'a' => b'A'..b'Z',\n  |                 ^^^^ expected `char`, found `u8`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpasedozb_.rs:10:17\n   |\n7  |\
    \         .map(|c| match c {\n   |                        - this expression has\
    \ type `char`\n...\n10 |             c @ b'_' => b'_',\n   |                 ^^^^\
    \ expected `char`, found `u8`\n\nerror[E0308]: `match` arms have incompatible\
    \ types\n  --> /tmp/tmpasedozb_.rs:10:25\n   |\n7  |           .map(|c| match\
    \ c {\n   |  __________________-\n8  | |             c @ b'A' => b'a'..b'z',\n\
    \   | |                         ---------- this is found to be of type `std::ops::Range<u8>`\n\
    9  | |             c @ b'a' => b'A'..b'Z',\n   | |                         ----------\
    \ this is found to be of type `std::ops::Range<u8>`\n10 | |             c @ b'_'\
    \ => b'_',\n   | |                         ^^^^ expected struct `std::ops::Range`,\
    \ found `u8`\n11 | |             _ => c,\n12 | |         })\n   | |_________-\
    \ `match` arms have incompatible types\n   |\n   = note: expected struct `std::ops::Range<u8>`\n\
    \                found type `u8`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a' => (char::A as u8),\n        'b' => (char::B as u8),\n\
    \        'c' => (char::C as u8),\n        'd' => (char::D as u8),\n        'e'\
    \ => (char::E as u8),\n        'f' => (char::F as u8),\n        'g' => (char::G\
    \ as u8),\n        'h' => (char::H as u8),\n        'i' => (char::I as u8),\n\
    \        'j' => (char::J as u8),\n        'k' => (char::K as u8),\n        'l'\
    \ => (char::L as u8),\n        'm' => (char::M as u8),\n        'n' => (char::N\
    \ as u8),\n        'o' => (char::O as u8),\n        'p' => (char::P as u8),\n\
    \        'q' => (char::Q as u8),\n        'r' => (char::R as u8),\n        's'\
    \ => (char::S as u8),\n        't' => (char::T as u8),\n        'u' => (char::U\
    \ as u8),\n        'v' => (char::V as u8),\n        'w' => (char::W as u8),\n\
    \        'x' => (char::X as u8),\n        'y' => (char::Y as u8),\n        'z'\
    \ => (char::Z as u8),\n        _ => c,\n    }).collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no associated item named `A` found for type `char` in the\
    \ current scope\n --> /tmp/tmpgibzqrxc.rs:6:23\n  |\n6 |         'a' => (char::A\
    \ as u8),\n  |                       ^ associated item not found in `char`\n\n\
    error[E0599]: no associated item named `B` found for type `char` in the current\
    \ scope\n --> /tmp/tmpgibzqrxc.rs:7:23\n  |\n7 |         'b' => (char::B as u8),\n\
    \  |                       ^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `C` found for type `char` in the current scope\n -->\
    \ /tmp/tmpgibzqrxc.rs:8:23\n  |\n8 |         'c' => (char::C as u8),\n  |    \
    \                   ^ associated item not found in `char`\n\nerror[E0599]: no\
    \ associated item named `D` found for type `char` in the current scope\n --> /tmp/tmpgibzqrxc.rs:9:23\n\
    \  |\n9 |         'd' => (char::D as u8),\n  |                       ^ associated\
    \ item not found in `char`\n\nerror[E0599]: no associated item named `E` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpgibzqrxc.rs:10:23\n   |\n\
    10 |         'e' => (char::E as u8),\n   |                       ^ associated\
    \ item not found in `char`\n\nerror[E0599]: no associated item named `F` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpgibzqrxc.rs:11:23\n   |\n\
    11 |         'f' => (char::F as u8),\n   |                       ^ associated\
    \ item not found in `char`\n\nerror[E0599]: no associated item named `G` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpgibzqrxc.rs:12:23\n   |\n\
    12 |         'g' => (char::G as u8),\n   |                       ^ associated\
    \ item not found in `char`\n\nerror[E0599]: no associated item named `H` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpgibzqrxc.rs:13:23\n   |\n\
    13 |         'h' => (char::H as u8),\n   |                       ^ associated\
    \ item not found in `char`\n\nerror[E0599]: no associated item named `I` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpgibzqrxc.rs:14:23\n   |\n\
    14 |         'i' => (char::I as u8),\n   |                       ^ associated\
    \ item not found in `char`\n\nerror[E0599]: no associated item n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut buf = [0u8; string.len()];\n\
    \    for &c in string.as_bytes_mut() {\n        let x = c as u8;\n        match\
    \ x {\n            c if c >= 'a' && c <= 'z' => (c as u8 + 'A' as u8) as u8,\n\
    \            c if c >= 'A' && c <= 'Z' => (c as u8 + 'a' as u8) as u8,\n     \
    \       _ => x,\n        }\n    }\n    String::from_utf8(buf).unwrap()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmpchppqr9b.rs:5:25\n\
    \  |\n4 | fn flip_case(string: String) -> String {\n  |              ------ this\
    \ would need to be a `const`\n5 |     let mut buf = [0u8; string.len()];\n  |\
    \                         ^^^^^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpchppqr9b.rs:6:9\n\
    \  |\n6 |     for &c in string.as_bytes_mut() {\n  |         ^^    ---------------------\
    \ this expression has type `Option<&mut u8>`\n  |         |\n  |         types\
    \ differ in mutability\n  |         help: you can probably remove the explicit\
    \ borrow: `c`\n  |\n  = note: expected mutable reference `&mut u8`\n         \
    \            found reference `&_`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpchppqr9b.rs:9:23\n\
    \  |\n9 |             c if c >= 'a' && c <= 'z' => (c as u8 + 'A' as u8) as u8,\n\
    \  |                       ^^^ expected `u8`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpchppqr9b.rs:9:35\n  |\n9 |             c if c >= 'a' &&\
    \ c <= 'z' => (c as u8 + 'A' as u8) as u8,\n  |                              \
    \     ^^^ expected `u8`, found `char`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpchppqr9b.rs:10:23\n   |\n10 |             c if c >= 'A' && c <= 'Z'\
    \ => (c as u8 + 'a' as u8) as u8,\n   |                       ^^^ expected `u8`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchppqr9b.rs:10:35\n\
    \   |\n10 |             c if c >= 'A' && c <= 'Z' => (c as u8 + 'a' as u8) as\
    \ u8,\n   |                                   ^^^ expected `u8`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpchppqr9b.rs:8:9\n   |\n8  | /\
    \         match x {\n9  | |             c if c >= 'a' && c <= 'z' => (c as u8\
    \ + 'A' as u8) as u8,\n10 | |             c if c >= 'A' && c <= 'Z' => (c as u8\
    \ + 'a' as u8) as u8,\n11 | |             _ => x,\n12 | |         }\n   | |  \
    \       ^- help: consider using a semicolon here: `;`\n   | |_________|\n   |\
    \           expected `()`, found `u8`\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error,"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            'a' => {\n                char::From('A').from_ascii()\n\
    \            }\n            'b' => {\n                char::From('B').from_ascii()\n\
    \            }\n            'c' => {\n                char::From('C').from_ascii()\n\
    \            }\n            'd' => {\n                char::From('D').from_ascii()\n\
    \            }\n            'e' => {\n                char::From('E').from_ascii()\n\
    \            }\n            'f' => {\n                char::From('F').from_ascii()\n\
    \            }\n            'g' => {\n                char::From('G').from_ascii()\n\
    \            }\n            'h' => {\n                char::From('H').from_ascii()\n\
    \            }\n            'i' => {\n                char::From('I').from_ascii()\n\
    \            }\n            'j' => {\n                char::From('J').from_ascii()\n\
    \            }\n            'k' => {\n                char::From('K').from_ascii()\n\
    \            }\n            'l' => {\n                char::From('L').from_ascii()\n\
    \            }\n            'm' => {\n                char::From('M').from_ascii()\n\
    \            }\n            'n' => {\n                char::From('N').from_ascii()\n\
    \            }\n            'o' => {\n                char::From('O').from_ascii()\n\
    \            }\n            'p' => {\n                char::From('P').from_ascii()\n\
    \            }\n            'q' => {\n                char::From('Q').from_ascii()\n\
    \            }\n            'r' => {\n                char::From('R').from_ascii()\n\
    \            }\n            's' => {\n                char::From('S').from_ascii()\n\
    \            }\n            't' => {\n                char::From('T').from_ascii()\n\
    \            }\n            'u' => {\n                char::From('U').from_ascii()\n\
    \            }\n            'v' => {\n                char::From('V').from_ascii()\n\
    \            }\n            'w' => {\n                char::From('W').from_ascii()\n\
    \            }\n            'x' => {\n                char::From('X').from_ascii()\n\
    \            }\n            'y' => {\n                char::From('Y').from_ascii()\n\
    \            }\n            'z' => {\n                char::From('Z').from_ascii()\n\
    \            }\n            _ => {\n                char::From(c).from_ascii()\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no associated item named `From` found for type `char` in\
    \ the current scope\n --> /tmp/tmpkuabe81v.rs:8:23\n  |\n8 |                 char::From('A').from_ascii()\n\
    \  |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --> /tmp/tmpkuabe81v.rs:11:23\n   |\n11 |                 char::From('B').from_ascii()\n\
    \   |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --> /tmp/tmpkuabe81v.rs:14:23\n   |\n14 |                 char::From('C').from_ascii()\n\
    \   |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --> /tmp/tmpkuabe81v.rs:17:23\n   |\n17 |                 char::From('D').from_ascii()\n\
    \   |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --> /tmp/tmpkuabe81v.rs:20:23\n   |\n20 |                 char::From('E').from_ascii()\n\
    \   |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --> /tmp/tmpkuabe81v.rs:23:23\n   |\n23 |                 char::From('F').from_ascii()\n\
    \   |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --> /tmp/tmpkuabe81v.rs:26:23\n   |\n26 |                 char::From('G').from_ascii()\n\
    \   |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --> /tmp/tmpkuabe81v.rs:29:23\n   |\n29 |                 char::From('H').from_ascii()\n\
    \   |                       ^^^^ associated item not found in `char`\n\nerror[E0599]:\
    \ no associated item named `From` found for type `char` in the current scope\n\
    \  --"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars().enumerate().map(|(i,\
    \ c)| {\n        if c.is_lowercase() {\n            c.to_uppercase()\n       \
    \ } else {\n            c.to_lowercase()\n        }\n    }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp77vzsucp.rs:9:13\n\
    \   |\n6  | /         if c.is_lowercase() {\n7  | |             c.to_uppercase()\n\
    \   | |             ---------------- expected because of this\n8  | |        \
    \ } else {\n9  | |             c.to_lowercase()\n   | |             ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n10 | |         }\n\
    \   | |_________- `if` and `else` have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    if string.len() <= 1 {\n\
    \        string\n    } else {\n        let mut flipped = String::from(string);\n\
    \        flipped.chars().for_each(|c|\n            if c.is_uppercase() {\n   \
    \             flipped.replace(c.to_ascii_lowercase(), c.to_ascii_uppercase())\n\
    \            } else if c.is_lowercase() {\n                flipped.replace(c.to_ascii_uppercase(),\
    \ c.to_ascii_lowercase())\n            }\n        );\n        flipped\n    }\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpecv0lsj4.rs:11:57\n   |\n\
    11 |                 flipped.replace(c.to_ascii_lowercase(), c.to_ascii_uppercase())\n\
    \   |                                                         ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpecv0lsj4.rs:11:17\n\
    \   |\n10 | /             if c.is_uppercase() {\n11 | |                 flipped.replace(c.to_ascii_lowercase(),\
    \ c.to_ascii_uppercase())\n   | |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `String`\n12 | |             } else if c.is_lowercase()\
    \ {\n13 | |                 flipped.replace(c.to_ascii_uppercase(), c.to_ascii_lowercase())\n\
    14 | |             }\n   | |_____________- expected this to be `()`\n   |\nhelp:\
    \ consider using a semicolon here\n   |\n11 |                 flipped.replace(c.to_ascii_lowercase(),\
    \ c.to_ascii_uppercase());\n   |                                             \
    \                                   +\nhelp: consider using a semicolon here\n\
    \   |\n14 |             };\n   |              +\nhelp: you might have meant to\
    \ return this value\n   |\n11 |                 return flipped.replace(c.to_ascii_lowercase(),\
    \ c.to_ascii_uppercase());\n   |                 ++++++                      \
    \                                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpecv0lsj4.rs:13:57\n   |\n13 |                 flipped.replace(c.to_ascii_uppercase(),\
    \ c.to_ascii_lowercase())\n   |                                              \
    \           ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpecv0lsj4.rs:13:17\n   |\n12 |              \
    \ } else if c.is_lowercase() {\n   |  ____________________-\n13 | |          \
    \       flipped.replace(c.to_ascii_uppercase(), c.to_ascii_lowercase())\n   |\
    \ |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `String`\n14 | |             }\n   | |_____________-\
    \ expected this to be `()`\n   |\nhelp: consider using"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    if string.is_empty() {\n\
    \        \"\".to_string()\n    } else {\n        let mut buffer = String::from(\"\
    \\\"\");\n        for ch in string.chars() {\n            match ch {\n       \
    \         'a' => (ch as i32 + ('A' as i32)).to_string(),\n                'A'\
    \ => (ch as i64 - ('A' as i64))\n                    .to_string(),\n         \
    \       _ => buffer.push_char(ch),\n            }\n        }\n        buffer.push_str(\"\
    \\\"\").to_string()\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_char` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpil4_8ddd.rs:14:29\n   |\n14 |             \
    \    _ => buffer.push_char(ch),\n   |                             ^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `push_str`\n\nerror[E0599]:\
    \ `()` doesn't implement `std::fmt::Display`\n  --> /tmp/tmpil4_8ddd.rs:17:31\n\
    \   |\n17 |         buffer.push_str(\"\\\"\").to_string()\n   |              \
    \                 ^^^^^^^^^ `()` cannot be formatted with the default formatter\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ std::fmt::Display`\n           which is required by `(): ToString`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| if c.is_lowercase() then c.into().into().to_string().to_uppercase()\
    \ else c.into())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmp0j76ee62.rs:6:38\n  |\n\
    6 |         .map(|c| if c.is_lowercase() then c.into().into().to_string().to_uppercase()\
    \ else c.into())\n  |                  --                  ^^^^ expected `{`\n\
    \  |                  |\n  |                  this `if` expression has a condition,\
    \ but no block\n  |\nhelp: try placing this code inside a block\n  |\n6 |    \
    \     .map(|c| if c.is_lowercase() { then } c.into().into().to_string().to_uppercase()\
    \ else c.into())\n  |                                      +      +\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut buffer = String::with_capacity(string.len());\n\
    \    let mut prev_case = false;\n    for ch in string.chars() {\n        match\
    \ ch {\n            c if prev_case && c.is_upper() => buffer.push_char(c.to_ascii_lowercase()),\n\
    \            c if !prev_case && c.is_lower() => buffer.push_char(c.to_ascii_uppercase()),\n\
    \            _ => buffer.push_char(ch),\n        }\n        prev_case = c.is_upper();\n\
    \    }\n    buffer\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp13_40zt7.rs:13:21\n\
    \   |\n13 |         prev_case = c.is_upper();\n   |                     ^ help:\
    \ a local variable with a similar name exists: `ch`\n\nerror[E0599]: no method\
    \ named `is_upper` found for type `char` in the current scope\n --> /tmp/tmp13_40zt7.rs:9:33\n\
    \  |\n9 |             c if prev_case && c.is_upper() => buffer.push_char(c.to_ascii_lowercase()),\n\
    \  |                                 ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_uppercase`\n\nerror[E0599]: no method named `push_char`\
    \ found for struct `String` in the current scope\n --> /tmp/tmp13_40zt7.rs:9:54\n\
    \  |\n9 |             c if prev_case && c.is_upper() => buffer.push_char(c.to_ascii_lowercase()),\n\
    \  |                                                      ^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `push_str`\n\nerror[E0599]: no\
    \ method named `is_lower` found for type `char` in the current scope\n  --> /tmp/tmp13_40zt7.rs:10:34\n\
    \   |\n10 |             c if !prev_case && c.is_lower() => buffer.push_char(c.to_ascii_uppercase()),\n\
    \   |                                  ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_lowercase`\n\nerror[E0599]: no method named `push_char`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp13_40zt7.rs:10:55\n\
    \   |\n10 |             c if !prev_case && c.is_lower() => buffer.push_char(c.to_ascii_uppercase()),\n\
    \   |                                                       ^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `push_str`\n\nerror[E0599]: no\
    \ method named `push_char` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp13_40zt7.rs:11:25\n   |\n11 |             _ => buffer.push_char(ch),\n\
    \   |                         ^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `push_str`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            c if c.is_lowercase() => c.to_uppercase(),\n            _ => c,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp1px0aowh.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_uppercase() => c.to_lowercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToLowercase`\n\
    8  | |             c if c.is_lowercase() => c.to_uppercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToLowercase`,\
    \ found struct `ToUppercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ b'A' as b'a' => b'A' as b'a',\n \
    \           c @ b'a' as b'A' => b'a' as b'A',\n            _ => c,\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found keyword\
    \ `as`\n --> /tmp/tmp96flysho.rs:8:22\n  |\n8 |             c @ b'A' as b'a' =>\
    \ b'A' as b'a',\n  |                      ^^ expected one of `...`, `..=`, `..`,\
    \ `=>`, `if`, or `|`\n\nerror[E0277]: a value of type `String` cannot be built\
    \ from an iterator over elements of type `()`\n    --> /tmp/tmp96flysho.rs:12:10\n\
    \     |\n12   |         .collect()\n     |          ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=()>`\n     |\n     = help: the\
    \ trait `FromIterator<()>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .into_iter()\n\
    \        .map(|c| match c.to_lowercase() {\n            Some(c) => c,\n      \
    \      _ => c.to_uppercase(),\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpu9ka4xfq.rs:6:10\n    |\n6 \
    \  |           .into_iter()\n    |            ^^^^^^^^^\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `String: IntoIterator`\n            `&String:\
    \ Iterator`\n            which is required by `&String: IntoIterator`\n      \
    \      `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut new = string.to_string();\n\
    \    for c in new.chars() {\n        if c.is_lowercase() {\n            new.set_char(c,\
    \ c.to_uppercase());\n        } else {\n            new.set_char(c, c.to_lowercase());\n\
    \        }\n    }\n    new\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `set_char` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp14quxxwm.rs:8:17\n  |\n8 |             new.set_char(c,\
    \ c.to_uppercase());\n  |                 ^^^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `set_char` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp14quxxwm.rs:10:17\n   |\n10 |             new.set_char(c,\
    \ c.to_lowercase());\n   |                 ^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            c => c,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp4chz7xqi.rs:9:38\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    9  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n10 | |             c => c,\n11 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| if c.is_lowercase() then c.to_uppercase() else c.to_lowercase())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmpsne71u21.rs:7:38\n  |\n\
    7 |         .map(|c| if c.is_lowercase() then c.to_uppercase() else c.to_lowercase())\n\
    \  |                  --                  ^^^^ expected `{`\n  |             \
    \     |\n  |                  this `if` expression has a condition, but no block\n\
    \  |\nhelp: try placing this code inside a block\n  |\n7 |         .map(|c| if\
    \ c.is_lowercase() { then } c.to_uppercase() else c.to_lowercase())\n  |     \
    \                                 +      +\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c @ b'a' | b'A' => c @ b'A' | b'a',\n\
    \            _ => c,\n        })\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `@`\n --> /tmp/tmpzkvj3jz6.rs:8:34\n  |\n8 |             c @ b'a' | b'A'\
    \ => c @ b'A' | b'a',\n  |                             --   ^ expected one of\
    \ 8 possible tokens\n  |                             |\n  |                  \
    \           while parsing the `match` arm starting here\n\nerror[E0277]: a value\
    \ of type `String` cannot be built from an iterator over elements of type `()`\n\
    \    --> /tmp/tmpzkvj3jz6.rs:11:10\n     |\n11   |         .collect::<String>()\n\
    \     |          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=()>`\n\
    \     |\n     = help: the trait `FromIterator<()>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.into_bytes().to_vec()\n\
    \        .iter()\n        .map(|b| b as char).enumerate()\n        .map(|(i, c)|\
    \ (c as u8 >> i as usize) as char)\n        .collect()\n        .to_string()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmph_r15hj1.rs:9:10\n\
    \  |\n9 |         .collect()\n  |          ^^^^^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `collect`\n  |\n  = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n  |\n9 |         .collect::<B>()\n  |                 +++++\n\
    \nerror[E0606]: casting `&u8` as `char` is invalid\n --> /tmp/tmph_r15hj1.rs:7:18\n\
    \  |\n7 |         .map(|b| b as char).enumerate()\n  |                  -^^^^^^^^\n\
    \  |                  |\n  |                  cannot cast `&u8` as `char`\n  |\
    \                  help: dereference the expression: `*b`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0282, E0606.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.to_lowercase()\n\
    \        .chars()\n        .map(|c| match c {\n            c @ b'a' => c @ b'A'\
    \ as char,\n            _ => c,\n        })\n        .collect::<String>()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `@`\n --> /tmp/tmpo1sngycb.rs:8:27\n  |\n8 |             c @ b'a' => c\
    \ @ b'A' as char,\n  |                      --   ^ expected one of 8 possible\
    \ tokens\n  |                      |\n  |                      while parsing the\
    \ `match` arm starting here\n\nerror[E0277]: a value of type `String` cannot be\
    \ built from an iterator over elements of type `()`\n    --> /tmp/tmpo1sngycb.rs:11:10\n\
    \     |\n11   |         .collect::<String>()\n     |          ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=()>`\n     |\n\
    \     = help: the trait `FromIterator<()>` is not implemented for `String`\n \
    \    = help: the following other types implement trait `FromIterator<A>`:\n  \
    \             <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string.chars()\n     \
    \   .map(|c| match c {\n            'a' => ('A' as u8),\n            'b' => ('B'\
    \ as u8),\n            'c' => ('C' as u8),\n            'd' => ('D' as u8),\n\
    \            'e' => ('E' as u8),\n            'f' => ('F' as u8),\n          \
    \  'g' => ('G' as u8),\n            'h' => ('H' as u8),\n            'i' => ('I'\
    \ as u8),\n            'j' => ('J' as u8),\n            'k' => ('K' as u8),\n\
    \            'l' => ('L' as u8),\n            'm' => ('M' as u8),\n          \
    \  'n' => ('N' as u8),\n            'o' => ('O' as u8),\n            'p' => ('P'\
    \ as u8),\n            'q' => ('Q' as u8),\n            'r' => ('R' as u8),\n\
    \            's' => ('S' as u8),\n            't' => ('T' as u8),\n          \
    \  'u' => ('U' as u8),\n            'v' => ('V' as u8),\n            'w' => ('W'\
    \ as u8),\n            'x' => ('X' as u8),\n            'y' => ('Y' as u8),\n\
    \            'z' => ('Z' as u8),\n            'A' => ('A' as u8),\n          \
    \  'B' => ('B' as u8),\n            'C' => ('C' as u8),\n            'D' => ('D'\
    \ as u8),\n            'E' => ('E' as u8),\n            'F' => ('F' as u8),\n\
    \            'G' => ('G' as u8),\n            'H' => ('H' as u8),\n          \
    \  'I' => ('I' as u8),\n            'J' => ('J' as u8),\n            'K' => ('K'\
    \ as u8),\n            'L' => ('L' as u8),\n            'M' => ('M' as u8),\n\
    \            'N' => ('N' as u8),\n            'O' => ('O' as u8),\n          \
    \  'P' => ('P' as u8),\n            'Q' => ('Q' as u8),\n            'R' => ('R'\
    \ as u8),\n            'S' => ('S' as u8),\n            'T' => ('T' as u8),\n\
    \            'U' => ('U' as u8),\n            'V' => ('V' as u8),\n          \
    \  'W' => ('W' as u8),\n            'X' => ('X' as u8),\n            'Y' => ('Y'\
    \ as u8),\n            'Z' => ('Z' as u8),\n            _ => c.to_ascii_uppercase(),\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp4bv87om7.rs:59:18\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           'a' => ('A' as u8),\n8  | |             'b' => ('B' as u8),\n9  |\
    \ |             'c' => ('C' as u8),\n...  |\n58 | |             'Z' => ('Z' as\
    \ u8),\n   | |                    ----------- this and all prior arms are found\
    \ to be of type `u8`\n59 | |             _ => c.to_ascii_uppercase(),\n   | |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^ expected `u8`, found `char`\n60 | |\
    \         })\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    string\n        .chars()\n\
    \        .map(|c| match c {\n            c => match c.to_ascii_lowercase().to_string().as_str()\
    \ {\n                \"a\" => \"A\",\n                _ => c.to_ascii_uppercase().to_string().as_str().to_ascii_lowercase().to_string(),\n\
    \            },\n            _ => c,\n        })\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpervs4jts.rs:10:22\n\
    \   |\n8  |               c => match c.to_ascii_lowercase().to_string().as_str()\
    \ {\n   |  __________________-\n9  | |                 \"a\" => \"A\",\n   | |\
    \                        --- this is found to be of type `&str`\n10 | |      \
    \           _ => c.to_ascii_uppercase().to_string().as_str().to_ascii_lowercase().to_string(),\n\
    \   | |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n11 | |             },\n   | |_____________-\
    \ `match` arms have incompatible types\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
    hELLO\")\nfn flip_case(string: String) -> String {\n    let mut s = string.to_lowercase();\n\
    \    s.replace(s.chars().filter(|c| *c != 'A' && *c != 'a').cloned().collect::<String>(),\
    \ \"A\").to_uppercase()\n}\n\nfn main() {\n    let candidate = flip_case;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmpbdzukxlu.rs:6:32:\
    \ 6:58]> as Iterator>::Item == &_`\n    --> /tmp/tmpbdzukxlu.rs:6:60\n     |\n\
    6    |     s.replace(s.chars().filter(|c| *c != 'A' && *c != 'a').cloned().collect::<String>(),\
    \ \"A\").to_uppercase()\n     |                                              \
    \              ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpbdzukxlu.rs:6:32: 6:58]>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpbdzukxlu.rs:6:69\n   |\n6  |        s.replace(s.chars().filter(|c|\
    \ *c != 'A' && *c != 'a').cloned().collect::<String>(), \"A\").to_uppercase()\n\
    \   |                                                                        ^^^^^^^\
    \ method cannot be called on `Cloned<Filter<Chars<'_>, [closure@/tmp/tmpbdzukxlu.rs:6:32:\
    \ 6:58]>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Filter<Chars<'_>, [closure@/tmp/tmpbdzukxlu.rs:6:32:\
    \ 6:58]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpbdzukxlu.rs:6:32: 6:58]>>: Iterator`\n           `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpbdzukxlu.rs:6:32: 6:58]>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Filter<Chars<'_>, [closure@/tmp/tmpbdzukxlu.rs:6:32: 6:58]>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976122
