language: rs
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut pile_len = n;\n  \
    \  while pile_len > 0 {\n        if n & 1 == 0 {\n            pile_len = pile_len\
    \ / 2;\n            pile.push(pile_len);\n        }\n        else {\n        \
    \    pile_len = pile_len / 2;\n            pile.push(pile_len);\n        }\n \
    \       n = n >> 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmprqgk4x75.rs:23:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n23 |         n = n >> 1;\n\
    \   |         ^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n + 1);\n    if n %\
    \ 2 == 0 {\n        stones.push(n - 1);\n    } else {\n        stones.push(n -\
    \ 1 + &[2..n].iter().cloned().cloned());\n    }\n    stones\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptdvvovwg.rs:12:41\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n + 1);\n   |                   \
    \                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     let mut stones = Vec::with_capacity((n + 1).try_into().unwrap());\n\
    \   |                                         +     +++++++++++++++++++++\n\n\
    error[E0271]: type mismatch resolving `<std::slice::Iter<'_, std::ops::Range<isize>>\
    \ as Iterator>::Item == &&_`\n    --> /tmp/tmptdvvovwg.rs:16:53\n     |\n16  \
    \ |         stones.push(n - 1 + &[2..n].iter().cloned().cloned());\n     |   \
    \                                                  ^^^^^^ expected reference,\
    \ found struct `std::ops::Range`\n     |\n     = note: expected reference `&&_`\n\
    \                found reference `&std::ops::Range<isize>`\n     = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ std::ops::Range<isize>>>`\nnote: required by a bound in `cloned`\n\nerror[E0277]:\
    \ cannot add `&Cloned<Cloned<std::slice::Iter<'_, std::ops::Range<isize>>>>` to\
    \ `isize`\n  --> /tmp/tmptdvvovwg.rs:16:27\n   |\n16 |         stones.push(n -\
    \ 1 + &[2..n].iter().cloned().cloned());\n   |                           ^ no\
    \ implementation for `isize + &Cloned<Cloned<std::slice::Iter<'_, std::ops::Range<isize>>>>`\n\
    \   |\n   = help: the trait `Add<&Cloned<Cloned<std::slice::Iter<'_, std::ops::Range<isize>>>>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0277, E0308.\nFor more information about\
    \ an error, try "
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     // n is even\n        stones.push(n - 1);\n        if n % 2 != 0 {\n   \
    \         // n is odd\n            let mut last_odd = n / 2;\n            for\
    \ i in 1..=last_odd {\n                stones.push(2 * i);\n            }\n  \
    \      }\n    } else {\n        // n is odd\n        let mut last_even = n / 2;\n\
    \        for i in 1..=last_even {\n            stones.push(2 * i);\n        }\n\
    \    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmp1df27hac.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n - 1];\n    for i in 0..n / 2 {\n\
    \        pile[i] = i + 1;\n    }\n    for i in n..(n - 1) / 2 {\n        if i\
    \ % 2 == 0 {\n            pile[i] = pile[i / 2] + (i / 2);\n        } else {\n\
    \            pile[i] = pile[i / 2] + (i + 1);\n        }\n    }\n    pile\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0r8kuxxg.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n - 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n - 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp0r8kuxxg.rs:14:9\n   |\n14 |         pile[i]\
    \ = i + 1;\n   |         ^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp0r8kuxxg.rs:18:13\n   |\n18 |             pile[i]\
    \ = pile[i / 2] + (i / 2);\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0r8kuxxg.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i / 2] + (i / 2);\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0r8kuxxg.rs:20:13\n\
    \   |\n20 |             pile[i] = pile[i / 2] + (i + 1);\n   |             ^^^^^^^\
    \ slice indices are of type `usize`"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n - 1];\n    let mut level = vec![n\
    \ - 1];\n    let mut i = 0;\n    while i < n.len() {\n        if i % 2 == 0 {\n\
    \            stones.push(level[i / 2]);\n        } else {\n            stones.push(level[i\
    \ / 2] + 1);\n        }\n        i += 1;\n        level[i / 2] = stones.len();\n\
    \    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmph2vlh94a.rs:15:17\n   |\n15 |     while i < n.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph2vlh94a.rs:22:24\n   |\n22 |         level[i / 2] = stones.len();\n\
    \   |         ------------   ^^^^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |         |\n   |         expected due to the type of this binding\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    debug_assert!(n % 2 == 0);\n    let mut stones = Vec::new();\n\
    \    for i in 0..n / 2 {\n        stones.push(2 * (i + 1));\n    }\n    for i\
    \ in 0..n % 2 {\n        stones.push(2 * (i + 1));\n    }\n    stones\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 2 == 0'', /tmp/tmplyldmad2.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n\n    let level = n - 1;\n  \
    \  let next_odd = if n % 2 == 0 { n / 2 } else { 3 };\n    let next_even = if\
    \ n % 2 == 0 { 1 } else { 2 };\n\n    for i in 1..(level + 1) {\n        result.push(next_odd\
    \ + (i - 1) * next_even);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpdq85s05d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 1 {\n        return vec![n];\n    }\n    let mut\
    \ stones = vec![n];\n    for i in 0..stones.len() {\n        stones[i] += stones[i+1]\
    \ + stones[i+2];\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp1y9o4yt6.rs:17:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n\n    let mut stones: Vec<isize>\
    \ = vec![0; n+1];\n    if n % 2 == 0 {\n        stones[n..n+2] = stones[n..n+2].iter().cloned().map(|x|\
    \ x*2).sum();\n    } else {\n        stones[n..n+2] = stones[n..n+2].iter().cloned().map(|x|\
    \ x*2 + 1).sum();\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp8rcxma95.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8rcxma95.rs:14:42\n   |\n14 |     let mut stones: Vec<isize>\
    \ = vec![0; n+1];\n   |                                          ^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     let mut stones:\
    \ Vec<isize> = vec![0; (n+1).try_into().unwrap()];\n   |                     \
    \                     +   +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp8rcxma95.rs:16:9\n\
    \   |\n16 |         stones[n..n+2] = stones[n..n+2].iter().cloned().map(|x| x*2).sum();\n\
    \   |         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `std::ops::Range<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <std::ops::Range<usize> as SliceIndex<[T]>>\n             <std::ops::Range<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<std::ops::Range<isize>>` for `Vec<isize>`\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp8rcxma95.rs:16:26\n\
    \   |\n16 |         stones[n..n+2] = stones[n..n+2].iter().cloned().map(|x| x*2).sum();\n\
    \   |                          ^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `std::ops::Range<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<isize>`\n\nerror[E0277]: the type `[isize]` "
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0i32; n + 1];\n    for i in 0..n {\n\
    \        pile[i] = if n % 2 == 0 { n } else { n * 3 };\n        n /= 2;\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp63dm8s6x.rs:12:31\n   |\n\
    12 |     let mut pile = vec![0i32; n + 1];\n   |                             \
    \  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut pile = vec![0i32; (n + 1).try_into().unwrap()];\n   |                  \
    \             +     +++++++++++++++++++++\n\nerror[E0277]: the type `[i32]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp63dm8s6x.rs:14:9\n   |\n14 |         pile[i]\
    \ = if n % 2 == 0 { n } else { n * 3 };\n   |         ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp63dm8s6x.rs:17:5\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \          ---------- expected `Vec<isize>` because of return type\n...\n17 |\
    \     pile\n   |     ^^^^ expected `isize`, found `i32`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<i32>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_pile(n).into_iter().map(|x| x + 1).collect()\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_pile` in this scope\n  --> /tmp/tmp2dkey7zi.rs:12:5\n\
    \   |\n12 |     make_pile(n).into_iter().map(|x| x + 1).collect()\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_a_pile_impl(n as usize)\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_a_pile_impl` in this scope\n \
    \ --> /tmp/tmpd0qxz33i.rs:12:5\n   |\n12 |     make_a_pile_impl(n as usize)\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     stones.insert(n, n);\n    } else {\n        let mut odd_count = 1;\n   \
    \     let mut even_count = 1;\n\n        for _ in 0..n {\n            if n % 2\
    \ == 0 {\n                stones.insert(odd_count, odd_count + even_count);\n\
    \                odd_count += 1;\n                even_count += 1;\n         \
    \   } else {\n                stones.insert(even_count, even_count + odd_count);\n\
    \                even_count += 1;\n                odd_count += 1;\n         \
    \   }\n        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5j76xfhz.rs:14:23\n   |\n\
    14 |         stones.insert(n, n);\n   |                       ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |         stones.insert(n.try_into().unwrap(),\
    \ n);\n   |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5j76xfhz.rs:21:42\n   |\n21 |                 stones.insert(odd_count,\
    \ odd_count + even_count);\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n21 |           \
    \      stones.insert(odd_count, (odd_count + even_count).try_into().unwrap());\n\
    \   |                                          +                      +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5j76xfhz.rs:25:43\n   |\n25 |\
    \                 stones.insert(even_count, even_count + odd_count);\n   |   \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n25 |                 stones.insert(even_count,\
    \ (even_count + odd_count).try_into().unwrap());\n   |                       \
    \                    +                      +++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut num_stones = Vec::new();\n\n    if n % 2 == 1 {\n\
    \        let num_stones = num_stones + n;\n    } else {\n        let mut num_odd_stones\
    \ = 0;\n        let mut num_even_stones = n;\n\n        while num_even_stones\
    \ % 2 == 0 {\n            num_even_stones /= 2;\n            num_odd_stones +=\
    \ 1;\n        }\n        num_stones = num_stones + num_odd_stones;\n    }\n  \
    \  num_stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `isize` to `Vec<_>`\n  --> /tmp/tmpu_0ywy6m.rs:15:37\n\
    \   |\n15 |         let num_stones = num_stones + n;\n   |                   \
    \       ---------- ^ - isize\n   |                          |\n   |          \
    \                Vec<_>\n\nerror[E0369]: cannot add `{integer}` to `Vec<_>`\n\
    \  --> /tmp/tmpu_0ywy6m.rs:24:33\n   |\n24 |         num_stones = num_stones +\
    \ num_odd_stones;\n   |                      ---------- ^ -------------- {integer}\n\
    \   |                      |\n   |                      Vec<_>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    for i in 1..n {\n     \
    \   if i % 2 == 0 {\n            pile.push(i);\n        } else {\n           \
    \ pile.push((2 * i) + 1);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpbn3rg0np.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n];\n    let mut level = vec![stones.len()+1];\n\
    \n    for _ in 0..n {\n        if n % 2 == 0 {\n            stones.push(stones.last().checked_add(isize::odd()).unwrap());\n\
    \        } else {\n            stones.push(stones.last().checked_add(isize::even()).unwrap());\n\
    \        }\n        level[0] = stones.len();\n    }\n\n    level[0] += 1;\n  \
    \  for level in level.iter().cloned().rev() {\n        let count = stones.iter().filter(|&n|\
    \ n <= level).count();\n        stones.append(count.cloned());\n    }\n\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi1gha5mn.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut stones\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0599]: no method named `checked_add` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpi1gha5mn.rs:17:39\n   |\n17 |             stones.push(stones.last().checked_add(isize::odd()).unwrap());\n\
    \   |                                       ^^^^^^^^^^^ method not found in `Option<&{integer}>`\n\
    \nerror[E0599]: no function or associated item named `odd` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpi1gha5mn.rs:17:58\n   |\n17 |          \
    \   stones.push(stones.last().checked_add(isize::odd()).unwrap());\n   |     \
    \                                                     ^^^ function or associated\
    \ item not found in `isize`\n\nerror[E0599]: no method named `checked_add` found\
    \ for enum `Option` in the current scope\n  --> /tmp/tmpi1gha5mn.rs:19:39\n  \
    \ |\n19 |             stones.push(stones.last().checked_add(isize::even()).unwrap());\n\
    \   |                                       ^^^^^^^^^^^ method not found in `Option<&{integer}>`\n\
    \nerror[E0599]: no function or associated item named `even` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpi1gha5mn.rs:19:58\n   |\n19 |          \
    \   stones.push(stones.last().checked_add(isize::even()).unwrap());\n   |    \
    \                                                      ^^^^ function or associated\
    \ item not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi1gha5mn.rs:26:52\n\
    \   |\n26 |         let count = stones.iter().filter(|&n| n <= level).count();\n\
    \   |                                                    ^^^^^\n   |         \
    \                                           |\n   |                          \
    \                          expected reference, found `usize`\n   |           \
    \               "
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    if n % 2 == 1 {\n       \
    \ result.push(n / 2);\n    } else {\n        result.push((n + 1) / 2);\n    }\n\
    \    result.push((n + 1) / 2);\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmphrhfxze9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        // Even\n        vec![n % 2 +\
    \ 1, n / 2]\n    } else {\n        // Odd\n        vec![\n            (n - 1)\
    \ / (2 * (n - 1) % 2),\n            ((n - 1) % 2) * n,\n            (n - 1) /\
    \ 2,\n        ]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to divide by zero'', /tmp/tmpb0s517uo.rs:18:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    for _ in 0..n {\n        let\
    \ n = match n % 2 {\n            0 => n+1,\n            1 => n-1,\n          \
    \  _ => n\n        };\n        pile.push(n);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp5ogn7ykb.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec = vec![];\n    for _ in 0..n {\n        vec.push(0);\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[3, 5, 7]`', /tmp/tmp1opfku_k.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        make_a_pile_odd(n)\n    } else\
    \ {\n        make_a_pile_even(n)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_a_pile_odd` in this scope\n  -->\
    \ /tmp/tmpxamh7iml.rs:13:9\n   |\n13 |         make_a_pile_odd(n)\n   |      \
    \   ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `make_a_pile_even` in this scope\n  --> /tmp/tmpxamh7iml.rs:15:9\n   |\n15 |\
    \         make_a_pile_even(n)\n   |         ^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut result = vec![];\n   \
    \     for _ in 0..n / 2 {\n            result.push(2 * n);\n        }\n      \
    \  result.push(n * 2);\n    } else {\n        let mut result = vec![];\n     \
    \   for _ in 0..n / 2 {\n            result.push(n);\n        }\n        result.push(2\
    \ * n);\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `result` in this scope\n  --> /tmp/tmpv7hdlwcd.rs:25:5\n\
    \   |\n25 |     result\n   |     ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1, n * 3 + 1]\n  \
    \  } else {\n        vec![n, n - 1, 2 * n + 1]\n    }\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 7]`,\n right: `[3, 5, 7]`', /tmp/tmpe6l2lnao.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n / 2];\n    if n % 2 == 1 {\n \
    \       // We need to add an odd number of stones to the top\n        pile.push(n\
    \ - pile[0]);\n    }\n    for _ in 0..n / 2 {\n        pile.push(n / 2);\n   \
    \ }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6dpazy7t.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n / 2];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n / 2).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::with_capacity(n);\n    if\
    \ n % 2 == 1 {\n        for i in 0..n {\n            vec.push(i + 1);\n      \
    \  }\n    } else {\n        for i in 0..n {\n            if i % 2 == 0 {\n   \
    \             vec.push(i + 1);\n            }\n        }\n    }\n    vec\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc_wkm4w1.rs:12:50\n   |\n\
    12 |     let mut vec: Vec<isize> = Vec::with_capacity(n);\n   |              \
    \                                    ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |     let mut vec: Vec<isize> = Vec::with_capacity(n.try_into().unwrap());\n\
    \   |                                                   ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push((pile.last().unwrap() + 1) / 2);\n      \
    \  }\n    } else {\n        for _ in 0..n {\n            pile.push(pile.last().unwrap()\
    \ + 1);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 5, 6]`,\n right: `[3, 5, 7]`', /tmp/tmp_e2v4osa.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        make_a_pile_odd(n)\n    } else\
    \ {\n        make_a_pile_even(n)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_a_pile_odd` in this scope\n  -->\
    \ /tmp/tmpxamh7iml.rs:13:9\n   |\n13 |         make_a_pile_odd(n)\n   |      \
    \   ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `make_a_pile_even` in this scope\n  --> /tmp/tmpxamh7iml.rs:15:9\n   |\n15 |\
    \         make_a_pile_even(n)\n   |         ^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    for _ in 0..n {\n      \
    \  ret.push(n);\n        if n % 2 == 0 {\n            ret.push(n + 2);\n     \
    \   } else {\n            ret.push(n + 1);\n        }\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 3, 4, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmph9u6gl7f.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    if n % 2 == 1 {\n      \
    \  stones.push(stones.iter().cloned().next().unwrap());\n    }\n    for &stone\
    \ in &stones {\n        if stones.len() > 1 {\n            if stones.len() % 2\
    \ == 1 {\n                stones.push(stones.iter().cloned().next().unwrap());\n\
    \            }\n            if stones.len() > 2 {\n                stones.push(stones.iter().cloned().next().unwrap());\n\
    \            }\n        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `stone`\n  --> /tmp/tmpa8ecgu0m.rs:16:10\n  \
    \ |\n16 |     for &stone in &stones {\n   |          ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_stone`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `stones` as mutable because it\
    \ is also borrowed as immutable\n  --> /tmp/tmpa8ecgu0m.rs:19:17\n   |\n16 | \
    \    for &stone in &stones {\n   |                   -------\n   |           \
    \        |\n   |                   immutable borrow occurs here\n   |        \
    \           immutable borrow later used here\n...\n19 |                 stones.push(stones.iter().cloned().next().unwrap());\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable\
    \ borrow occurs here\n\nerror[E0502]: cannot borrow `stones` as mutable because\
    \ it is also borrowed as immutable\n  --> /tmp/tmpa8ecgu0m.rs:22:17\n   |\n16\
    \ |     for &stone in &stones {\n   |                   -------\n   |        \
    \           |\n   |                   immutable borrow occurs here\n   |     \
    \              immutable borrow later used here\n...\n22 |                 stones.push(stones.iter().cloned().next().unwrap());\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable\
    \ borrow occurs here\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut answer = vec![n];\n    answer[1] = if n % 2 ==\
    \ 0 {\n        2 * n / 2\n    } else {\n        2 * n / 2 + 1\n    };\n    for\
    \ i in 2..answer.len() {\n        answer[i] = answer[i - 1] - answer[i - 1] /\
    \ 2 if i % 2 == 0;\n    }\n    answer\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n  --> /tmp/tmpfo4af8_b.rs:19:55\n   |\n19 |         answer[i] = answer[i\
    \ - 1] - answer[i - 1] / 2 if i % 2 == 0;\n   |                              \
    \                         ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut arr: Vec<isize> = Vec::new();\n    let mut level\
    \ = 0;\n    let mut i = 0;\n    while i < n {\n        if n % 2 == 0 {\n     \
    \       arr.push(n - i);\n        } else {\n            arr.push(i);\n       \
    \ }\n        i += 2;\n        level += 1;\n    }\n    arr\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp13qjufqp.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut count = vec![0; (n + 1) / 2]; // level 0\n    for\
    \ i in 1..n {\n        count += if n % i == 0 { 1 } else { -1 };\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5olr_i_y.rs:12:29\n   |\n\
    12 |     let mut count = vec![0; (n + 1) / 2]; // level 0\n   |              \
    \               ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut count = vec![0; ((n + 1) / 2).try_into().unwrap()]; //\
    \ level 0\n   |                             +           +++++++++++++++++++++\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<{integer}>`\n\
    \  --> /tmp/tmp5olr_i_y.rs:14:9\n   |\n14 |         count += if n % i == 0 { 1\
    \ } else { -1 };\n   |         -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\
    \         |\n   |         cannot use `+=` on type `Vec<{integer}>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        let mut stones = Vec::new();\n\
    \        for i in 0..n {\n            if i % 2 == 1 {\n                stones.push(2\
    \ * i);\n            } else {\n                stones.push(i);\n            }\n\
    \        }\n        return stones;\n    } else {\n        let mut stones = Vec::new();\n\
    \        for i in 0..n {\n            stones.push(i);\n        }\n        return\
    \ stones;\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpu4fs13hz.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = vec![n];\n    if n % 2 == 0\
    \ {\n        pile[0] = n / 2;\n        pile[1] = n / 2;\n    } else {\n      \
    \  let n1 = n - 1;\n        pile[0] = n1 / 2;\n        pile[1] = n1 % 2;\n   \
    \ }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp2tzk2254.rs:19:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n > 0);\n    let mut pile = vec![];\n    pile.push(n\
    \ % 2);\n    for i in 0..(n + 1) {\n        let num_stones = i + 1;\n        if\
    \ num_stones % 2 == 0 {\n            pile.push(num_stones / 2);\n        } else\
    \ {\n            pile.push(num_stones);\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp8f88k57m.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    if n % 2 == 1 {\n   \
    \     result.push(n);\n    }\n    for i in 1..=n / 2 {\n        let level = i\
    \ as isize;\n        if level % 2 == 0 {\n            result.push(level);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpdun7c_tl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for _ in 0..n\
    \ {\n        v.push((n % 2 == 0) ? n : n / 2);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `n`\n\
    \  --> /tmp/tmpduvs3fsr.rs:14:31\n   |\n14 |         v.push((n % 2 == 0) ? n :\
    \ n / 2);\n   |                              -^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n   |                              |\n   |             \
    \                 help: missing `,`\n\nerror[E0573]: expected type, found local\
    \ variable `n`\n  --> /tmp/tmpduvs3fsr.rs:14:35\n   |\n14 |         v.push((n\
    \ % 2 == 0) ? n : n / 2);\n   |                                   ^ expecting\
    \ a type here because of type ascription\n\nerror[E0277]: the `?` operator can\
    \ only be applied to values that implement `Try`\n  --> /tmp/tmpduvs3fsr.rs:14:16\n\
    \   |\n14 |         v.push((n % 2 == 0) ? n : n / 2);\n   |                ^^^^^^^^^^^^^^\
    \ the `?` operator cannot be applied to type `bool`\n   |\n   = help: the trait\
    \ `Try` is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tmpduvs3fsr.rs:14:29\n   |\n11 | / fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n12 | |     let mut v: Vec<isize> = Vec::new();\n\
    13 | |     for _ in 0..n {\n14 | |         v.push((n % 2 == 0) ? n : n / 2);\n\
    \   | |                             ^ cannot use the `?` operator in a function\
    \ that returns `Vec<isize>`\n15 | |     }\n16 | |     v\n17 | | }\n   | |_- this\
    \ function should return `Result` or `Option` to accept `?`\n   |\n   = help:\
    \ the trait `FromResidual<_>` is not implemented for `Vec<isize>`\n\nerror[E0061]:\
    \ this function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpduvs3fsr.rs:14:11\n\
    \     |\n14   |         v.push((n % 2 == 0) ? n : n / 2);\n     |           ^^^^\
    \ -------------- --------- supplied 2 arguments\n     |           |\n     |  \
    \         expected 1 argument\n     |\nnote: associated function defined here\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0573.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    let mut n_pile\
    \ = n + 1;\n    vec.push(n_pile);\n    while n_pile > 2 {\n        if n_pile %\
    \ 2 == 0 {\n            vec.push(n_pile / 2);\n            n_pile /= 2;\n    \
    \    } else {\n            vec.push((n_pile - 1) / 2);\n            n_pile -=\
    \ n_pile / 2;\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp_qvv4_yt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut nums = vec![0; n + 1];\n    for i in 0..n {\n \
    \       if i % 2 == 0 {\n            nums[2] += nums[i];\n        } else {\n \
    \           nums[1] += nums[i];\n        }\n    }\n    nums\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq3cacrc7.rs:12:28\n   |\n\
    12 |     let mut nums = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ nums = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpq3cacrc7.rs:15:24\n   |\n15 |         \
    \    nums[2] += nums[i];\n   |                        ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpq3cacrc7.rs:17:24\n   |\n17 |  \
    \           nums[1] += nums[i];\n   |                        ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    for _ in 0..n {\n   \
    \     stones.push(stones.last().unwrap() + 1);\n    }\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpkdjyzvz5.rs:14:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counter = Vec::new();\n    for i in 0..n {\n  \
    \      counter.push(i);\n        if i % 2 == 0 {\n            counter.push(counter.last().checked_add(i));\n\
    \        } else {\n            counter.push(counter.last().checked_add(i).checked_add(1));\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmp1lh13dgo.rs:16:41\n   |\n16 |             counter.push(counter.last().checked_add(i));\n\
    \   |                                         ^^^^^^^^^^^ method not found in\
    \ `Option<&isize>`\n\nerror[E0599]: no method named `checked_add` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmp1lh13dgo.rs:18:41\n   |\n18 | \
    \            counter.push(counter.last().checked_add(i).checked_add(1));\n   |\
    \                                         ^^^^^^^^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 { vec![0] }\n    let mut num_levels = vec![0];\n\
    \    loop {\n        let level = if n % 2 == 1 {\n            num_levels.clone().push(num_levels.len()\
    \ * 2 - (num_levels.len() + 1) as isize)\n        } else {\n            num_levels.clone().push(num_levels.len()\
    \ + 1 as isize)\n        };\n        n -= level;\n        num_levels = level;\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9__czwer.rs:12:17\n   |\n\
    12 |     if n == 0 { vec![0] }\n   |     ------------^^^^^^^--\n   |     |   \
    \        |\n   |     |           expected `()`, found struct `Vec`\n   |     expected\
    \ this to be `()`\n   |\n   = note: expected unit type `()`\n                \
    \ found struct `Vec<{integer}>`\n   = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp:\
    \ consider using a semicolon here\n   |\n12 |     if n == 0 { vec![0] };\n   |\
    \                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9__czwer.rs:16:60\n\
    \   |\n16 |             num_levels.clone().push(num_levels.len() * 2 - (num_levels.len()\
    \ + 1) as isize)\n   |                                                       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp9__czwer.rs:16:58\n   |\n\
    16 |             num_levels.clone().push(num_levels.len() * 2 - (num_levels.len()\
    \ + 1) as isize)\n   |                                                       \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9__czwer.rs:18:56\n\
    \   |\n18 |             num_levels.clone().push(num_levels.len() + 1 as isize)\n\
    \   |                                                        ^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp9__czwer.rs:18:54\n   |\n18 |             num_levels.clone().push(num_levels.len()\
    \ + 1 as isize)\n   |                                                      ^ no\
    \ implementa"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    let mut pile = Vec::new();\n\
    \n    if n % 2 == 0 {\n        for i in 0..n {\n            pile.push(i + 1);\n\
    \        }\n    } else {\n        for i in 0..n {\n            pile.push(i + n\
    \ - 1);\n        }\n    }\n\n    for _ in 0..n {\n        ret.push(pile.pop().unwrap());\n\
    \    }\n\n    ret\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpg8xvy4ve.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        pile.push(n / 2);\n    } else {\n        for i in 0..n {\n          \
    \  if i % 2 == 0 {\n                pile.push((i + 1) * 2 + 1);\n            }\
    \ else {\n                pile.push(i + 1);\n            }\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 7]`,\n right: `[3, 5, 7]`', /tmp/tmp3w9_hk8w.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut vec: Vec<isize> = vec![n];\n\
    \        for i in 1..n {\n            vec.push(i + (i - 1) / 2);\n        }\n\
    \        vec\n    } else {\n        let mut vec: Vec<isize> = vec![n];\n     \
    \   for i in 1..n {\n            vec.push(i + 1);\n        }\n        vec\n  \
    \  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpbkrsjp86.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        return vec![n / 2, n / 2 + 1];\n\
    \    } else {\n        return vec![n / 2 + 1, n / 2];\n    }\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp74z2nod8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        n\n    } else {\n        (n -\
    \ 1) / 2\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwj41v0wz.rs:13:9\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n12 |     if n % 2\
    \ == 0 {\n13 |         n\n   |         ^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwj41v0wz.rs:15:9\n   |\n11 | fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n   |                             ----------\
    \ expected `Vec<isize>` because of return type\n...\n15 |         (n - 1) / 2\n\
    \   |         ^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975695
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    debug_assert_eq!(n, 0);\n\n    let mut res = Vec::new();\n\
    \    if n % 2 == 1 {\n        res.push((n + 1) - (n / 2));\n    } else {\n   \
    \     res.push((n + 3) - (n / 2));\n    }\n    if n / 2 != 0 {\n        res.push(n\
    \ / 2);\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmp3z1jxakx.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    Vec::new()\n        .push(n)\n        .push(n / 2)\n  \
    \      .push(n / 3)\n        .push(n % 3)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmp_sn87mgt.rs:14:10\n   |\n14 |         .push(n / 2)\n  \
    \ |          ^^^^ method not found in `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 || n % 2 == 1 {\n        return Vec::new();\n\
    \    }\n    if n % 2 == 0 {\n        return vec![n / 2];\n    }\n    let mut ret\
    \ = vec![n / 2];\n    let mut cnt = 0;\n    while n != 0 {\n        if n % 2 ==\
    \ 0 {\n            cnt += n;\n            n /= 2;\n        } else {\n        \
    \    cnt += n / 2;\n            n -= 1;\n        }\n    }\n    ret.append(&cnt);\n\
    \    ret\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsiy3lua0.rs:29:16\n   |\n\
    29 |     ret.append(&cnt);\n   |                ^^^^ types differ in mutability\n\
    \   |\n   = note: expected mutable reference `&mut Vec<isize>`\n             \
    \         found reference `&isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for _ in 0..n {\n        pile.push(n\
    \ - 1);\n    }\n\n    for _ in 0..n {\n        pile.push((n % 2 != 0) ? n + 1\
    \ : n);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `n`\n\
    \  --> /tmp/tmpp2pxw691.rs:18:34\n   |\n18 |         pile.push((n % 2 != 0) ?\
    \ n + 1 : n);\n   |                                 -^ expected one of `)`, `,`,\
    \ `.`, `?`, or an operator\n   |                                 |\n   |     \
    \                            help: missing `,`\n\nerror[E0573]: expected type,\
    \ found local variable `n`\n  --> /tmp/tmpp2pxw691.rs:18:42\n   |\n18 |      \
    \   pile.push((n % 2 != 0) ? n + 1 : n);\n   |                               \
    \           ^ expecting a type here because of type ascription\n\nerror[E0277]:\
    \ the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpp2pxw691.rs:18:19\n\
    \   |\n18 |         pile.push((n % 2 != 0) ? n + 1 : n);\n   |               \
    \    ^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n   |\n\
    \   = help: the trait `Try` is not implemented for `bool`\n\nerror[E0277]: the\
    \ `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n  --> /tmp/tmpp2pxw691.rs:18:32\n\
    \   |\n11 | / fn make_a_pile(n: isize) -> Vec<isize> {\n12 | |     let mut pile\
    \ = vec![];\n13 | |     for _ in 0..n {\n14 | |         pile.push(n - 1);\n...\
    \  |\n18 | |         pile.push((n % 2 != 0) ? n + 1 : n);\n   | |            \
    \                    ^ cannot use the `?` operator in a function that returns\
    \ `Vec<isize>`\n19 | |     }\n20 | |     pile\n21 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<_>` is not implemented for `Vec<isize>`\n\nerror[E0061]: this\
    \ function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpp2pxw691.rs:18:14\n\
    \     |\n18   |         pile.push((n % 2 != 0) ? n + 1 : n);\n     |         \
    \     ^^^^ -------------- --------- supplied 2 arguments\n     |             \
    \ |\n     |              expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0061, E0277, E0573.\nFor more infor"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counters = Vec::new();\n    for i in 0..n {\n \
    \       if i % 2 == 0 {\n            counters.push(n - i);\n        } else {\n\
    \            counters.push(i + (n - i) / 2);\n        }\n    }\n    counters\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpkv8_hgap.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    while n >= 2 {\n    \
    \    if n % 2 == 1 {\n            stones.push(n - 1);\n        } else {\n    \
    \        stones.push((n - 3) / 2);\n        }\n        n /= 2;\n    }\n    stones.push(1);\n\
    \    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpww8_jbpj.rs:19:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n - 1]\n    } else {\n\
    \        vec![n]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpgk1gfsoc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vals = vec![0; n + 1];\n    for j in 2..=n {\n\
    \        if n%2 == 0 {\n            vals[j] = j;\n        } else {\n         \
    \   vals[j] = j + 2;\n        }\n    }\n    vals\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp079frdv1.rs:12:28\n   |\n\
    12 |     let mut vals = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ vals = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp079frdv1.rs:15:13\n   |\n15 |         \
    \    vals[j] = j;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp079frdv1.rs:17:13\n   |\n17 |  \
    \           vals[j] = j + 2;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n >= 0);\n    let mut result = Vec::new();\n  \
    \  if n % 2 == 0 {\n        result.push(n / 2);\n        result.push(n % 2);\n\
    \    } else {\n        let n = n * 2;\n        result.push(n / 2);\n        result.push((n\
    \ - 1) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpwqrviy0p.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut stones = Vec::new();\n\
    \        stones.push(n / 2);\n        for i in 0..n {\n            if i % 2 ==\
    \ 0 {\n                stones.push(n / 2);\n            } else {\n           \
    \     stones.push((i + 1) / 2);\n            }\n        }\n        return stones;\n\
    \    } else {\n        let mut stones = Vec::new();\n        stones.push((n +\
    \ 1) / 2);\n        for i in 0..n {\n            stones.push((i + 1) / 2);\n \
    \       }\n        return stones;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 0, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpynnldcxe.rs:35:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n as isize];\n    if n % 2 == 0 {\n\
    \        result.push(n / 2);\n    }\n    for i in 1 .. n / 2 {\n        result.push(i\
    \ + n % 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpekajmf4l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n as isize, ((n + 1) & !n)\
    \ as isize]\n    } else {\n        vec![n as isize, ((n - 1) & !n) as isize]\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpry4otjul.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 2 {\n        return vec![n];\n    }\n\n    let mut\
    \ nums = vec![n];\n    let mut i = 1;\n    let mut even = true;\n\n    while i\
    \ < n {\n        if even == false {\n            nums.insert(nums.iter().skip(i).sum(),\
    \ i);\n        } else {\n            nums.insert(nums.iter().skip(i).sum() % 2,\
    \ i);\n        }\n        i += 1;\n        even = !even;\n    }\n\n    nums\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo_mbfeqm.rs:22:42\n   |\n\
    22 |             nums.insert(nums.iter().skip(i).sum(), i);\n   |            \
    \                              ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n22 |             nums.insert(nums.iter().skip(i.try_into().unwrap()).sum(),\
    \ i);\n   |                                           ++++++++++++++++++++\n\n\
    error[E0277]: the trait bound `usize: Sum<&isize>` is not satisfied\n    --> /tmp/tmpo_mbfeqm.rs:22:45\n\
    \     |\n22   |             nums.insert(nums.iter().skip(i).sum(), i);\n     |\
    \                                             ^^^ the trait `Sum<&isize>` is not\
    \ implemented for `usize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo_mbfeqm.rs:24:42\n   |\n24 |             nums.insert(nums.iter().skip(i).sum()\
    \ % 2, i);\n   |                                          ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n24 |             nums.insert(nums.iter().skip(i.try_into().unwrap()).sum()\
    \ % 2, i);\n   |                                           ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = Vec::new();\n    if n % 2 ==\
    \ 1 {\n        pile.push(n / 2);\n    }\n    for i in 1..n / 2 {\n        if i\
    \ % 2 == 0 {\n            pile.push(i + 2);\n        } else {\n            pile.push(i);\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmpj8pz26fq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n\n    let mut\
    \ pile = vec![n];\n    let mut odd_stones = n - 1;\n    let mut even_stones =\
    \ n / 2;\n\n    while odd_stones % 2 == 0 {\n        pile[odd_stones + 1] = odd_stones;\n\
    \        odd_stones -= 1;\n    }\n\n    while even_stones % 2 == 0 {\n       \
    \ pile[even_stones + 1] = even_stones;\n        even_stones -= 1;\n    }\n\n \
    \   pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqvdkudxa.rs:21:9\n\
    \   |\n21 |         pile[odd_stones + 1] = odd_stones;\n   |         ^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqvdkudxa.rs:26:9\n\
    \   |\n26 |         pile[even_stones + 1] = even_stones;\n   |         ^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![];\n\n    while n != 0 {\n      \
    \  if n % 2 == 0 {\n            stones.push(n);\n        }\n        n /= 2;\n\
    \    }\n\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n   \
    \ assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpas7n0lxx.rs:18:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n18 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n  \
    \      vec.push(0);\n    }\n    if n == 1 {\n        vec.push(1);\n    }\n   \
    \ if n % 2 == 1 {\n        vec.push(2);\n    }\n    vec.push(n / 2);\n    for\
    \ rest in make_a_pile(n - 1) {\n        let n = rest + 1;\n        vec.push(n);\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975701
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec = Vec::new();\n    for _ in 0..n {\n      \
    \  vec.push(n);\n    }\n\n    vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpm1hhlkzh.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![(n + 1) / 2]\n    } else\
    \ {\n        vec![(n - 1) / 2]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmpudyjwg0z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n);\n    for i in 0..n\
    \ {\n        if i % 2 == 0 {\n            stones.push((i + 1)*2);\n        } else\
    \ {\n            stones.push((i + 1)*1);\n        }\n    }\n    stones\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_9daeja2.rs:12:41\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n);\n   |                       \
    \                  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n.try_into().unwrap());\n   |   \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n as usize + 1);\n\n\
    \    if n % 2 == 0 {\n        for _ in 0..n {\n            stones.push(n - 1);\n\
    \        }\n    } else {\n        for _ in 0..n {\n            stones.push(n -\
    \ 2);\n        }\n    }\n\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpk8c7m4yc.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 2 {\n        return vec![];\n    }\n\n    let mut\
    \ stones: Vec<isize> = Vec::new();\n    let mut i: isize = 1;\n\n    loop {\n\
    \        if n % 2 == 0 {\n            stones.push(i);\n        }\n\n        i\
    \ += 1;\n\n        if i >= n {\n            break;\n        }\n\n        i +=\
    \ 1;\n    }\n\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmp_3aa23j_.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    for x in\
    \ 1..n {\n        if n % 2 == 0 {\n            result.push(x);\n        } else\
    \ {\n            result.push(n / 2);\n        }\n    }\n\n    result\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpt0_rhlew.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones: Vec<isize> = Vec::new();\n    if n % 2\
    \ == 0 {\n        for _ in 0..n {\n            stones.push(n / 2);\n        }\n\
    \    } else {\n        for _ in 0..n {\n            stones.push((n / 2) + ((n\
    \ / 2) % 2));\n        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp80wdbfe4.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    stones[0] += 1;\n\
    \    stones[1] += 1;\n\n    if n % 2 == 0 {\n        stones[2] += 1;\n    }\n\n\
    \    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbusk53r.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![0; n];\n    v[0] += n;\n    for i in 1..n-1\
    \ {\n        v[i] = v[i - 1] + v[i - 2] * 2;\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpki81os8c.rs:12:25\n   |\n\
    12 |     let mut v = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut v = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpki81os8c.rs:15:9\n   |\n\
    15 |         v[i] = v[i - 1] + v[i - 2] * 2;\n   |         ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpki81os8c.rs:15:16\n   |\n15 |         v[i]\
    \ = v[i - 1] + v[i - 2] * 2;\n   |                ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpki81os8c.rs:15:27\n   |\n15 |         v[i]\
    \ = v[i - 1] + v[i - 2] * 2;\n   |                           ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = vec![];\n    for i in 1..n {\n\
    \        if i % 2 == 1 {\n            pile.push(i + 1);\n        } else {\n  \
    \          pile.push(i / 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp64t33_fy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut levels = vec![vec![n]];\n\
    \    for level in levels.iter() {\n        let current_level = level.clone();\n\
    \        let num_stones = match n % 2 {\n            0 => current_level.len()\
    \ * 2,\n            1 => current_level.len() * 2 + 1,\n        };\n        current_level.push(num_stones);\n\
    \        pile.push(current_level);\n        n = n - num_stones;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpki_tq7xr.rs:20:28\n   |\n\
    20 |         current_level.push(num_stones);\n   |                           \
    \ ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n20 |     \
    \    current_level.push(num_stones.try_into().unwrap());\n   |               \
    \                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpki_tq7xr.rs:22:17\n   |\n22 |         n = n - num_stones;\n   |\
    \                 ^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract `usize` from `isize`\n  --> /tmp/tmpki_tq7xr.rs:22:15\n   |\n\
    22 |         n = n - num_stones;\n   |               ^ no implementation for `isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpki_tq7xr.rs:24:5\n   |\n11 | fn make_a_pile(n:\
    \ isize) -> Vec<isize> {\n   |                             ---------- expected\
    \ `Vec<isize>` because of return type\n...\n24 |     pile\n   |     ^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Vec<isize>>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        panic!(\"Number of stones need to be\
    \ positive.\")\n    }\n    let mut next_level = [n];\n    let mut ans = vec![next_level[0]];\n\
    \n    for i in 0..n {\n        if i % 2 == 0 {\n            ans.push(next_level[0]);\n\
    \            next_level.push((next_level[0] as isize) + 1);\n        } else {\n\
    \            next_level.push((next_level[0] as isize) - 1);\n        }\n    }\n\
    \    ans\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpybsi4mcj.rs:21:24\n   |\n21 |             next_level.push((next_level[0]\
    \ as isize) + 1);\n   |                        ^^^^ method not found in `[isize;\
    \ 1]`\n\nerror[E0599]: no method named `push` found for array `[isize; 1]` in\
    \ the current scope\n  --> /tmp/tmpybsi4mcj.rs:23:24\n   |\n23 |             next_level.push((next_level[0]\
    \ as isize) - 1);\n   |                        ^^^^ method not found in `[isize;\
    \ 1]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n - 1]\n    } else {\n  \
    \      vec![n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8]\n    }\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 0, -1, -2, -3, -4, -5]`,\n right: `[3, 5, 7]`', /tmp/tmp0b51jzcn.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n + 1]\n    } else {\n\
    \        vec![n]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmpqqw38scr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 0 {\n        vec![n]\n    }\n    else {\n      \
    \  let mut res = vec![n];\n        let mut level = 1;\n        let mut cur_odd\
    \ = 0;\n        while level * 2 < n {\n            cur_odd += 2; // the next odd\
    \ number\n            cur_odd += n % cur_odd; // the next even number\n      \
    \      res.push(cur_odd);\n            level += 1;\n            n -= cur_odd;\n\
    \        }\n        res.push(n - level);\n        res\n    }\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpbm89n9uz.rs:24:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n24 |             n -= cur_odd;\n\
    \   |             ^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counter = vec![0; n + 1];\n    if n % 2 == 0 {\n\
    \        for _ in 0..n {\n            counter[0] += 1;\n            counter[1]\
    \ = counter[0] % 2;\n            counter[2] += counter[1];\n        }\n    } else\
    \ {\n        for _ in 0..n {\n            counter[0] += 1;\n            counter[1]\
    \ = counter[0] % 3;\n            counter[2] += counter[1];\n        }\n    }\n\
    \    counter\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp19gpfqqy.rs:12:31\n   |\n\
    12 |     let mut counter = vec![0; n + 1];\n   |                             \
    \  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut counter = vec![0; (n + 1).try_into().unwrap()];\n   |                  \
    \             +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = Vec::new();\n    levels.push(n);\n   \
    \ let mut i = 1;\n    while levels.len() > i {\n        let mut num_stones = levels[i];\n\
    \        if i % 2 == 0 {\n            num_stones += levels[i - 2];\n        }\n\
    \        i += 1;\n        levels.insert(0, num_stones);\n    }\n    levels\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpiclln88f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![n];\n    let mut num_levels = 1;\n\
    \    while levels.len() < n {\n        if n % 2 == 0 {\n            levels.push(num_levels);\n\
    \            num_levels += 1;\n        } else {\n            levels.push(num_levels);\n\
    \            num_levels += 1;\n            num_levels += 1;\n        }\n     \
    \   n /= 2;\n    }\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5soaa6sj.rs:14:26\n   |\n\
    14 |     while levels.len() < n {\n   |                          ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while levels.len() < n.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = (n as i32).div(2).ceil() as i32 + vec![1isize];\n\
    \    let mut i = 0;\n    while i < v.len() {\n        let next = if v[i] == n\
    \ {\n            i += 2\n        } else {\n            i += 1;\n        };\n \
    \       v.extend(vec![next]);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `div` found for type `i32` in the current\
    \ scope\n   --> /tmp/tmppy4cil5n.rs:12:28\n    |\n12  |     let mut v = (n as\
    \ i32).div(2).ceil() as i32 + vec![1isize];\n    |                           \
    \ ^^^ method not found in `i32`\n    |\n    = help: items from traits can only\
    \ be used if the trait is in scope\nhelp: the following trait is implemented but\
    \ not in scope; perhaps add a `use` for it:\n    |\n1   | use std::ops::Div;\n\
    \    |\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![n];\n    stones.iter_mut().cloned().for_each(|mut\
    \ stone| {\n        if stone % 2 == 0 {\n            stone = (stone + 1) as isize;\n\
    \        } else {\n            stone = (stone + 2) as isize;\n        }\n    });\n\
    \    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpdeitox_u.rs:13:23\n     |\n13   |\
    \     stones.iter_mut().cloned().for_each(|mut stone| {\n     |              \
    \         ^^^^^^ types differ in mutability\n     |\n     = note:      expected\
    \ reference `&_`\n             found mutable reference `&mut isize`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct\
    \ `Cloned<std::slice::IterMut<'_, isize>>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpdeitox_u.rs:13:32\n    |\n13  |       stones.iter_mut().cloned().for_each(|mut\
    \ stone| {\n    |                                  ^^^^^^^^ method cannot be called\
    \ on `Cloned<std::slice::IterMut<'_, isize>>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `<std::slice::IterMut<'_, isize> as Iterator>::Item = &_`\n            which\
    \ is required by `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n        \
    \    `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n            which is\
    \ required by `&mut Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 1 {\n        pile.push(1);\n\
    \    } else {\n        let mut count = 1;\n        while n % 2 == 0 {\n      \
    \      pile.push(*count + 1);\n            n /= 2;\n            count += 1;\n\
    \        }\n        pile.push(*count + 1);\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpi2flsexc.rs:18:23\n\
    \   |\n18 |             pile.push(*count + 1);\n   |                       ^^^^^^\n\
    \nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpi2flsexc.rs:22:19\n\
    \   |\n22 |         pile.push(*count + 1);\n   |                   ^^^^^^\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = [0; 2 * n];\n    for i in 0..levels.len()\
    \ {\n        levels[i] = if n % 2 == 0 {\n            levels[i as usize] + 1\n\
    \        } else {\n            levels[i as usize] - 1\n        };\n    }\n   \
    \ levels.into_iter().map(|x| x as isize).collect()\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp8h653czo.rs:12:30\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n   |                - this would need to be a `const`\n12 |     let mut levels\
    \ = [0; 2 * n];\n   |                              ^\n\nerror[E0606]: casting\
    \ `&{integer}` as `isize` is invalid\n  --> /tmp/tmp8h653czo.rs:20:32\n   |\n\
    20 |     levels.into_iter().map(|x| x as isize).collect()\n   |              \
    \                  -^^^^^^^^^\n   |                                |\n   |   \
    \                             cannot cast `&{integer}` as `isize`\n   |      \
    \                          help: dereference the expression: `*x`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0435, E0606.\n\
    For more information about an error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_pile(n, n)\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_pile` in this scope\n  --> /tmp/tmpjfwv7hot.rs:12:5\n\
    \   |\n12 |     make_pile(n, n)\n   |     ^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![n];\n    }\n    let odd_count\
    \ = n % 2;\n    let even_count = (n - odd_count) / 2;\n    vec![odd_count + even_count,\
    \ odd_count + even_count, even_count + odd_count]\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpeu0ata6s.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut num_levels = if n % 2 == 0 {\n        n\n    }\
    \ else {\n        n + 1\n    };\n    let mut levels = Vec::with_capacity(num_levels);\n\
    \    for i in 0..num_levels {\n        levels.push(\n            if n % 2 == 0\
    \ {\n                n - i\n            } else {\n                i\n        \
    \    }\n        );\n    }\n    return levels\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3575iq4r.rs:17:41\n   |\n\
    17 |     let mut levels = Vec::with_capacity(num_levels);\n   |              \
    \                           ^^^^^^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n17 |     let mut levels = Vec::with_capacity(num_levels.try_into().unwrap());\n\
    \   |                                                   ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![n as isize; n];\n    if n % 2 == 0 {\n\
    \        for _ in 0..(n/2) {\n            v.push(v.iter().filter(|&i| i % 2 ==\
    \ 0).sum::<isize>());\n        }\n    } else {\n        for _ in 0..(n/2) {\n\
    \            v.push(v.iter().filter(|&i| i % 2 == 1).sum::<isize>());\n      \
    \  }\n    }\n    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjkf_pi07.rs:12:34\n   |\n\
    12 |     let mut v = vec![n as isize; n];\n   |                              \
    \    ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut v = vec![n as isize; n.try_into().unwrap()];\n   |                     \
    \              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n    }\n    if n ==\
    \ 1 {\n        return vec![n, n];\n    }\n    let mut pile = vec![];\n    if n\
    \ % 2 == 1 {\n        for _ in 0..(n - 1) {\n            pile.push(n);\n     \
    \   }\n    } else {\n        for _ in 0..(n - 1) {\n            pile.push(n);\n\
    \        }\n    }\n    for _ in 0..(n - 1) {\n        pile.push(n + (2 * pile[pile.len()\
    \ - 1]));\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 9, 21]`,\n right: `[3, 5, 7]`', /tmp/tmpbu4b11i6.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n\n    fn even(n:\
    \ isize) -> isize {\n        if n % 2 == 0 {\n            n\n        } else {\n\
    \            n - 1\n        }\n    }\n\n    fn odd(n: isize) -> isize {\n    \
    \    if n % 2 == 0 {\n            n - 1\n        } else {\n            n + 1\n\
    \        }\n    }\n\n    let mut n = n;\n\n    let mut ans = vec![];\n    while\
    \ n > 1 {\n        if n % 2 == 0 {\n            ans.push(even(n));\n        }\
    \ else {\n            ans.push(odd(n));\n        }\n        n -= 1;\n    }\n \
    \   ans\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2]`,\n right: `[3, 5, 7]`', /tmp/tmphjsr0n4t.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ pile = vec![n];\n    let mut pile_prev = vec![n];\n    if n % 2 == 1 {\n   \
    \     for index in 0..n / 2 {\n            pile[index] += pile[index + n];\n \
    \       }\n        pile_prev[index + n] += pile_prev[index];\n    }\n    for index\
    \ in 0..n / 2 {\n        pile[index] += pile_prev[index + n];\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `index` in this scope\n  --> /tmp/tmp4b1vyg6b.rs:21:19\n\
    \   |\n21 |         pile_prev[index + n] += pile_prev[index];\n   |          \
    \         ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `index`\
    \ in this scope\n  --> /tmp/tmp4b1vyg6b.rs:21:43\n   |\n21 |         pile_prev[index\
    \ + n] += pile_prev[index];\n   |                                           ^^^^^\
    \ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp4b1vyg6b.rs:19:13\n   |\n19 |             pile[index]\
    \ += pile[index + n];\n   |             ^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4b1vyg6b.rs:19:28\n   |\n19 |            \
    \ pile[index] += pile[index + n];\n   |                            ^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4b1vyg6b.rs:24:9\n\
    \   |\n24 |         pile[index] += pile_prev[index + n];\n   |         ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4b1vyg6b.rs:24:24\n\
    \   |\n24 |         pile[index] += pile_prev[index + n];\n   |               \
    \         ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile : Vec<isize> = vec![0; n];\n    for _ in 0..n\
    \ {\n        if n % 2 != 0 {\n            pile.push(odd);\n        } else {\n\
    \            pile.push(even);\n        }\n        n -= 1;\n    }\n    pile\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `odd` in this scope\n  --> /tmp/tmpwmlbaacd.rs:15:23\n\
    \   |\n15 |             pile.push(odd);\n   |                       ^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `even` in this scope\n  -->\
    \ /tmp/tmpwmlbaacd.rs:17:23\n   |\n17 |             pile.push(even);\n   |   \
    \                    ^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwmlbaacd.rs:12:41\n   |\n12 |     let mut pile : Vec<isize>\
    \ = vec![0; n];\n   |                                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut pile : Vec<isize>\
    \ = vec![0; n.try_into().unwrap()];\n   |                                    \
    \      ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n\n    if n % 2 == 0 {\n   \
    \     pile[n/2..].push(n - n/2);\n    } else {\n        pile[n/2..].push(n/2);\n\
    \    }\n\n    for i in pile.iter().cloned() {\n        *i += 1;\n    }\n\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphpgt5k9g.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmphpgt5k9g.rs:15:9\n   |\n15 |         pile[n/2..].push(n - n/2);\n\
    \   |         ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `RangeFrom<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeFrom<usize> as SliceIndex<[T]>>\n             <RangeFrom<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeFrom<isize>>` for `Vec<{integer}>`\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmphpgt5k9g.rs:17:9\n\
    \   |\n17 |         pile[n/2..].push(n/2);\n   |         ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `RangeFrom<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<{integer}>`\n\
    \nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmphpgt5k9g.rs:21:9\n\
    \   |\n21 |         *i += 1;\n   |         ^^\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n\n    if n % 2 == 0 {\n      \
    \  make_a_pile_by_odd_number(n)\n    } else {\n        make_a_pile_by_even_number(n)\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_a_pile_by_odd_number` in this\
    \ scope\n  --> /tmp/tmpgm7mb911.rs:15:9\n   |\n15 |         make_a_pile_by_odd_number(n)\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `make_a_pile_by_even_number` in this scope\n  --> /tmp/tmpgm7mb911.rs:17:9\n\
    \   |\n17 |         make_a_pile_by_even_number(n)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nwarning: unused import: `std::cmp::Ordering`\n  -->\
    \ /tmp/tmpgm7mb911.rs:12:9\n   |\n12 |     use std::cmp::Ordering;\n   |     \
    \    ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    if n % 2\
    \ == 1 {\n        for i in 0..n / 2 {\n            result.push(i as isize);\n\
    \        }\n        for i in 0..n / 2 {\n            result.push(2 * i as isize);\n\
    \        }\n    } else {\n        for i in 0..n / 2 {\n            result.push(i\
    \ as isize);\n        }\n        for i in 0..n / 2 {\n            result.push(2\
    \ * i as isize);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpnw021hyo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    debug_assert!(n >= 0);\n    let mut stones_left = n;\n\
    \    let mut stones = Vec::new();\n    let mut odd_stones = 1;\n    while stones_left\
    \ > 0 {\n        let mut evens = 0;\n        while stones_left >= odd_stones {\n\
    \            stones_left -= odd_stones;\n            odd_stones += 2;\n      \
    \      evens += 1;\n        }\n        let mut odd_stones_next = odd_stones;\n\
    \        let mut evens_next = evens;\n        if n % 2 == 1 {\n            odd_stones_next\
    \ += 1;\n            evens_next += 1;\n        }\n        stones.push(evens_next);\n\
    \        stones.push(odd_stones_next);\n    }\n    stones\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975702
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    if n % 2 == 1 {\n     \
    \   let mut n = n - 1;\n        let mut odd = n.checked_sub(2);\n        while\
    \ n != 0 {\n            if n & 1 == 0 {\n                odd += n;\n         \
    \   }\n            pile[i] = odd;\n            n /= 2;\n            i += 1;\n\
    \        }\n    } else {\n        let mut n = n - 1;\n        let mut even = n.checked_sub(2);\n\
    \        while n != 0 {\n            if n & 1 == 1 {\n                even +=\
    \ n;\n            }\n            pile[i] = even;\n            n /= 2;\n      \
    \      i += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp3o_0k_ri.rs:20:18\n\
    \   |\n20 |             pile[i] = odd;\n   |                  ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror[E0425]: cannot find value\
    \ `i` in this scope\n  --> /tmp/tmp3o_0k_ri.rs:22:13\n   |\n22 |             i\
    \ += 1;\n   |             ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp3o_0k_ri.rs:31:18\n\
    \   |\n31 |             pile[i] = even;\n   |                  ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror[E0425]: cannot find value\
    \ `i` in this scope\n  --> /tmp/tmp3o_0k_ri.rs:33:13\n   |\n33 |             i\
    \ += 1;\n   |             ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3o_0k_ri.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<isize>`\n\
    \  --> /tmp/tmp3o_0k_ri.rs:18:17\n   |\n18 |                 odd += n;\n   | \
    \                ---^^^^^\n   |                 |\n   |                 cannot\
    \ use `+=` on type `Option<isize>`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Option<isize>`\n  --> /tmp/tmp3o_0k_ri.rs:29:17\n\
    \   |\n29 |                 even += n;\n   |                 ----^^^^^\n   | \
    \                |\n   |                 cannot use `+=` on type `Option<isize>`\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n\n    // Start off by making a\
    \ pile of n stones, 1 stone level\n    let mut pile = vec![1; n + 1];\n\n    //\
    \ If n is even, all stones get added to the first level\n    // and all but the\
    \ first (odd) stone are removed and the\n    // new first stone is added\n   \
    \ if n % 2 == 1 {\n        pile.push(pile[..n].iter().skip(1).sum());\n    }\n\
    \n    // If n is odd, the stone that should be removed is\n    // the one that\
    \ follows the last (even) stone and\n    // everything after that is added to\
    \ the first level\n    else {\n        pile.push(pile[..n].iter().rev().skip(1).sum());\n\
    \    }\n\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpyu6c2893.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyu6c2893.rs:15:28\n   |\n15 |     let mut pile = vec![1;\
    \ n + 1];\n   |                            ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |     let mut pile = vec![1; (n + 1).try_into().unwrap()];\n\
    \   |                            +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpyu6c2893.rs:21:19\n\
    \   |\n21 |         pile.push(pile[..n].iter().skip(1).sum());\n   |         \
    \          ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `RangeTo<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize> as\
    \ SliceIndex<str>>\n   = note: required because of the requirements on the impl\
    \ of `Index<RangeTo<isize>>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpyu6c2893.rs:28:19\n   |\n\
    28 |         pile.push(pile[..n].iter().rev().skip(1).sum());\n   |          \
    \         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `RangeTo<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize> as\
    \ SliceIndex<str>>\n   = note: required because of the requirements on the impl\
    \ of `Index<RangeTo<isize>>` for `Vec<{integer}>`\n\nerror: aborting due to 3\
    \ previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n + 1, n + 1]\n    } else\
    \ {\n        vec![n, n + 2, n + 3]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 6]`,\n right: `[3, 5, 7]`', /tmp/tmpcjvap044.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    pile[n - 1].cloned()\n   \
    \     .filter_map(|&x| if x % 2 == 0 { Some(x * 2) } else { Some(x * 3) })\n \
    \       .cloned()\n        .for_each(|x| {\n            pile[x - 1].cloned()\n\
    \                .filter_map(|&y| if y % 2 == 0 { Some(y) } else { None })\n \
    \               .cloned()\n                .for_each(|y| {\n                 \
    \   pile[x - 1].cloned()\n                        .filter_map(|&z| if z % 2 ==\
    \ 0 { Some(z) } else { None })\n                        .cloned()\n          \
    \              .for_each(|z| {\n                            pile[x - 1].cloned()\n\
    \                                .filter_map(|&q| if q % 2 == 0 { Some(q) } else\
    \ { None })\n                                .cloned()\n                     \
    \           .for_each(|q| {\n                                    pile[x - 1].cloned()\n\
    \                                        .filter_map(|&r| if r % 2 == 0 { Some(r)\
    \ } else { None })\n                                        .cloned()\n      \
    \                                  .for_each(|r| {\n                         \
    \                   pile[x - 1].cloned()\n                                   \
    \             .filter_map(|&s| if s % 2 == 0 { Some(s) } else { None })\n    \
    \                                            .cloned()\n                     \
    \                           .for_each(|s| {\n                                \
    \                    pile[x - 1].cloned()\n                                  \
    \                      .filter_map(|&t| if t % 2 == 0 { Some(t) } else { None\
    \ })\n                                                        .cloned()\n    \
    \                                                    .for_each(|t| {\n       \
    \                                                     pile[x - 1].cloned()\n \
    \                                                               .filter_map(|&u|\
    \ if u % 2 == 0 { Some(u) } else { None })\n                                 \
    \                               .cloned()\n                                  \
    \                              .for_each(|u| {\n                             \
    \                                       pile[x - 1].cloned()\n               \
    \                                                         .filter_map(|&v| if\
    \ v % 2 == 0 { Some(v) } else { None })\n                                    \
    \                                    .cloned()\n                             \
    \                                           .for_each(|v| {\n                \
    \                                                            pile[x - 1].cloned()\n\
    \                                                                            \
    \    .filter_map(|&w| if w % 2 == 0 { Some(w) } else { None })\n             \
    \                                                                   .cloned()\n\
    \                                                                            \
    \    .for_each(|w| {\n                                                       \
    \                             pile[x - 1].cloned()\n                         \
    \                                                               .filter_map(|&x|\
    \ if x == 1 { Some(x) } else { None })\n                                     \
    \                                                   .cloned()\n              \
    \                                                                          .for_each(|x|\
    \ {\n                                                                        \
    \                    pi\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7txzdhez.rs:67:3\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \                     - unclosed delimiter\n...\n16 |         .for_each(|x| {\n\
    \   |                  -    - unclosed delimiter\n   |                  |\n  \
    \ |                  unclosed delimiter\n...\n20 |                 .for_each(|y|\
    \ {\n   |                          -    - unclosed delimiter\n   |           \
    \               |\n   |                          unclosed delimiter\n...\n24 |\
    \                         .for_each(|z| {\n   |                              \
    \    -    - unclosed delimiter\n   |                                  |\n   |\
    \                                  unclosed delimiter\n...\n28 |             \
    \                    .for_each(|q| {\n   |                                   \
    \       -    - unclosed delimiter\n   |                                      \
    \    |\n   |                                          unclosed delimiter\n...\n\
    32 |                                         .for_each(|r| {\n   |           \
    \                                       -    - unclosed delimiter\n   |      \
    \                                            |\n   |                         \
    \                         unclosed delimiter\n...\n36 |                      \
    \                           .for_each(|s| {\n   |                            \
    \                              -    - unclosed delimiter\n   |               \
    \                                           |\n   |                          \
    \                                unclosed delimiter\n...\n40 |               \
    \                                          .for_each(|t| {\n   |             \
    \                                                     -    - unclosed delimiter\n\
    \   |                                                                  |\n   |\
    \                                                                  unclosed delimiter\n\
    ...\n44 |                                                                 .for_each(|u|\
    \ {\n   |                                                                  "
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    for i in 0..n\
    \ {\n        let mut temp: isize = n;\n        if n % 2 == 0 {\n            temp\
    \ += 1;\n        }\n        vec.push(temp);\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpz4iixs02.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 2 {\n        return vec![1];\n    }\n    let mut\
    \ levels = vec![0; n];\n    if n % 2 == 1 {\n        levels[0 as usize] = n +\
    \ 1; // Level 0\n    }\n    for i in 1..(n + 1).min(n as usize) {\n        if\
    \ i % 2 == 1 {\n            levels[i/2] += 1;\n        } else {\n            levels[i]\
    \ -= 1;\n        }\n    }\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_lop5mxv.rs:15:30\n   |\n\
    15 |     let mut levels = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     let mut levels\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_lop5mxv.rs:19:29\n   |\n19 |\
    \     for i in 1..(n + 1).min(n as usize) {\n   |                            \
    \ ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n19 |     for\
    \ i in 1..(n + 1).min((n as usize).try_into().unwrap()) {\n   |              \
    \               +          +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_lop5mxv.rs:21:13\n   |\n21 |  \
    \           levels[i/2] += 1;\n   |             ^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_lop5mxv.rs:23:13\n   |\n23 |            \
    \ levels[i] -= 1;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        return vec![n, n / 2];\n    }\n\
    \n    let mut vec =\n        vec![vec![n / 2]; n / 2 - 1];\n    for i in 0..n\
    \ / 2 {\n        vec[i] = vec[n - i - 2];\n    }\n\n    return vec;\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbmmv8hk_.rs:17:27\n   |\n\
    17 |         vec![vec![n / 2]; n / 2 - 1];\n   |                           ^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n17 |         vec![vec![n\
    \ / 2]; (n / 2 - 1).try_into().unwrap()];\n   |                           +  \
    \       +++++++++++++++++++++\n\nerror[E0277]: the type `[Vec<isize>]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpbmmv8hk_.rs:19:9\n   |\n19 |         vec[i]\
    \ = vec[n - i - 2];\n   |         ^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[Vec<isize>]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<Vec<isize>>`\n\nerror[E0277]: the type `[Vec<isize>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbmmv8hk_.rs:19:18\n   |\n19 |  \
    \       vec[i] = vec[n - i - 2];\n   |                  ^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[Vec<isize>]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<Vec<isize>>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbmmv8hk_.rs:22:12\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n   |                             ---------- expected `Vec<isize>` because\
    \ of return type\n...\n22 |     return vec;\n   |            ^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Vec<Vec<isize>>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for _ in 0..n {\n        pile.push(make_next_pile())\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_next_pile` in this scope\n  -->\
    \ /tmp/tmpv5wz01kn.rs:14:19\n   |\n14 |         pile.push(make_next_pile())\n\
    \   |                   ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        panic!(\"n must be positive\");\n \
    \   }\n    let mut pile: Vec<isize> = Vec::new();\n    pile.push(n);\n    while\
    \ pile.len() > 0 {\n        let mut levels = Vec::new();\n        for _ in 0..pile.len()\
    \ {\n            if pile.len() == 0 {\n                levels.clear();\n     \
    \           break;\n            }\n            let mut level = pile.len() as isize;\n\
    \            if n % 2 == 0 {\n                level += 1;\n                pile.pop();\n\
    \            }\n            levels.push(level);\n        }\n        pile.clear();\n\
    \        pile.extend(levels);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975702
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        if n % 2 != 0 {\n            return\
    \ vec![n - 1 as isize];\n        } else {\n            return vec![n - 1 as isize;\
    \ 1];\n        }\n    } else {\n        let even = n / 2;\n        return vec![even\
    \ as isize; even as isize; even as isize; 1];\n    }\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: no rules expected the token `;`\n  --> /tmp/tmphlg42xmn.rs:20:49\n\
    \   |\n20 |         return vec![even as isize; even as isize; even as isize; 1];\n\
    \   |                                                 ^ no rules expected this\
    \ token in macro call\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![0];\n    }\n    let mut\
    \ nums = vec![n - 1];\n    if n % 2 == 0 {\n        let last_odd = nums.last_mut().unwrap();\n\
    \        last_odd += n;\n    } else {\n        let last_even = nums.last_mut().unwrap();\n\
    \        last_even += n / 2;\n    }\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&mut isize`\n  --> /tmp/tmpuj5v9ahj.rs:18:9\n   |\n18 |         last_odd +=\
    \ n;\n   |         --------^^^^^\n   |         |\n   |         cannot use `+=`\
    \ on type `&mut isize`\n   |\nhelp: `+=` can be used on `isize`, you can dereference\
    \ `last_odd`\n   |\n18 |         *last_odd += n;\n   |         +\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&mut isize`\n  -->\
    \ /tmp/tmpuj5v9ahj.rs:21:9\n   |\n21 |         last_even += n / 2;\n   |     \
    \    ---------^^^^^^^^^\n   |         |\n   |         cannot use `+=` on type\
    \ `&mut isize`\n   |\nhelp: `+=` can be used on `isize`, you can dereference `last_even`\n\
    \   |\n21 |         *last_even += n / 2;\n   |         +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0368`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.resize(n.checked_mul(2).unwrap(),\
    \ 0);\n    stones[1..=(n.checked_mul(2).unwrap())].iter().enumerate().for_each(|(i,\
    \ _)| {\n        if i.is_odd() {\n            stones[i + 1..].iter().for_each(|_|\
    \ stones[i + 2..].iter().for_each(|_| stones[i + 3..].iter().for_each(|_| stones.extend_from_slice(vec![])));\n\
    \        } else {\n            stones[i + 1..].iter().for_each(|_| stones[i +\
    \ 2..].iter().for_each(|_| stones[i + 3..].iter().for_each(|_| stones.extend_from_slice(vec![stones[i\
    \ + 1]]))));\n        }\n    });\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n\
    \  --> /tmp/tmpwcsm5fls.rs:16:44\n   |\n16 | ....for_each(|_| stones[i + 2..].iter().for_each(|_|\
    \ stones[i + 3..].iter().for_each(|_| stones.extend_from_slice(vec![])));\n  \
    \ |             ^ unclosed delimiter                                         \
    \                                                  ^ help: `)` may belong here\n\
    \nerror: expected expression, found `)`\n  --> /tmp/tmpwcsm5fls.rs:17:9\n   |\n\
    17 |         } else {\n   |         ^ expected expression\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwcsm5fls.rs:13:19\n   |\n13 |     stones.resize(n.checked_mul(2).unwrap(),\
    \ 0);\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |     stones.resize(n.checked_mul(2).unwrap().try_into().unwrap(),\
    \ 0);\n   |                                            ++++++++++++++++++++\n\n\
    error[E0277]: the type `[{integer}]` cannot be indexed by `RangeInclusive<isize>`\n\
    \  --> /tmp/tmpwcsm5fls.rs:14:5\n   |\n14 |     stones[1..=(n.checked_mul(2).unwrap())].iter().enumerate().for_each(|(i,\
    \ _)| {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `RangeInclusive<isize>`\n   = help: the following other\
    \ types implement trait `SliceIndex<T>`:\n             <RangeInclusive<usize>\
    \ as SliceIndex<[T]>>\n             <RangeInclusive<usize> as SliceIndex<str>>\n\
    \   = note: required because of the requirements on the impl of `Index<RangeInclusive<isize>>`\
    \ for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwcsm5fls.rs:18:146\n\
    \   |\n18 | ..._each(|_| stones.extend_from_slice(vec![stones[i + 1]]))));\n \
    \  |                                       ^^^^^^^^^^^^^^^^^^^ expected `&[{integer}]`,\
    \ found struct `Vec`\n   |\n   = note: expected reference `&[{integer}]`\n   \
    \              found struct `Vec<_, _>`\n   = note: this error originates"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![\n        (if n % 2 == 0 { (n - 1) / 2 } else { n\
    \ }),\n        (if n % 2 == 0 { (n - 1) / 2 + 1 } else { n / 2 }),\n        (if\
    \ n % 2 == 0 { (n - 1) / 2 + 2 } else { n / 2 }),\n        (if n % 2 == 0 { (n\
    \ - 1) / 2 + 3 } else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 4 }\
    \ else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 5 } else { n / 2 }),\n\
    \        (if n % 2 == 0 { (n - 1) / 2 + 6 } else { n / 2 }),\n        (if n %\
    \ 2 == 0 { (n - 1) / 2 + 7 } else { n / 2 }),\n        (if n % 2 == 0 { (n - 1)\
    \ / 2 + 8 } else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 9 } else\
    \ { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 10 } else { n / 2 }),\n\
    \        (if n % 2 == 0 { (n - 1) / 2 + 11 } else { n / 2 }),\n        (if n %\
    \ 2 == 0 { (n - 1) / 2 + 12 } else { n / 2 }),\n        (if n % 2 == 0 { (n -\
    \ 1) / 2 + 13 } else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 14 }\
    \ else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 15 } else { n / 2 }),\n\
    \        (if n % 2 == 0 { (n - 1) / 2 + 16 } else { n / 2 }),\n        (if n %\
    \ 2 == 0 { (n - 1) / 2 + 17 } else { n / 2 }),\n        (if n % 2 == 0 { (n -\
    \ 1) / 2 + 18 } else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 19 }\
    \ else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 20 } else { n / 2 }),\n\
    \        (if n % 2 == 0 { (n - 1) / 2 + 21 } else { n / 2 }),\n        (if n %\
    \ 2 == 0 { (n - 1) / 2 + 22 } else { n / 2 }),\n        (if n % 2 == 0 { (n -\
    \ 1) / 2 + 23 } else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 24 }\
    \ else { n / 2 }),\n        (if n % 2 == 0 { (n - 1) / 2 + 25 } else { n / 2 }),\n\
    \        (if n % 2 == 0 { (n - 1) / 2 + 26 } else { n / 2 }),\n        (if n %\
    \ 2 == 0 { (n - 1) / 2 + 27 } else { n / 2 }),\n        (if n % 2 == 0 { (n -\
    \ \n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6v916f84.rs:51:3\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \                     - unclosed delimiter\n12 |     vec![\n   |         - unclosed\
    \ delimiter\n...\n41 |         (if n % 2 == 0 { (n - \n   |         - unclosed\
    \ delimiter\n...\n51 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n\
    \  --> /tmp/tmp6v916f84.rs:41:26\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n   |                                        - closing delimiter possibly\
    \ meant for this\n...\n41 |         (if n % 2 == 0 { (n - \n   |             \
    \             ^ unclosed delimiter\n42 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: expected expression, found `)`\n  --> /tmp/tmp6v916f84.rs:42:1\n   |\n\
    42 | }\n   | ^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`,\
    \ `else`, or an operator, found keyword `fn`\n  --> /tmp/tmp6v916f84.rs:44:1\n\
    \   |\n42 | }\n   |  - expected one of `)`, `,`, `.`, `?`, `else`, or an operator\n\
    43 | \n44 | fn main() {\n   | ^^ unexpected token\n\nerror: no rules expected\
    \ the token `fn`\n  --> /tmp/tmp6v916f84.rs:44:1\n   |\n44 | fn main() {\n   |\
    \ ^^ no rules expected this token in macro call\n\nerror: aborting due to 5 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ans = vec![0i32; n / 2];\n\n    if n % 2 == 0 {\n\
    \        ans[0::2] = n..(n / 2 - (n / 2) % 2).map(|i| {\n            i + 1\n \
    \       });\n    } else {\n        ans[0::2] = n..(n / 2).map(|i| {\n        \
    \    i + 1\n        });\n    }\n\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `?`, `]`, or an operator, found `::`\n  -->\
    \ /tmp/tmpi6nb1g6p.rs:15:14\n   |\n15 |         ans[0::2] = n..(n / 2 - (n / 2)\
    \ % 2).map(|i| {\n   |              ^^ expected one of `.`, `?`, `]`, or an operator\n\
    \nerror: expected one of `.`, `?`, `]`, or an operator, found `::`\n  --> /tmp/tmpi6nb1g6p.rs:19:14\n\
    \   |\n19 |         ans[0::2] = n..(n / 2).map(|i| {\n   |              ^^ expected\
    \ one of `.`, `?`, `]`, or an operator\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpi6nb1g6p.rs:12:30\n   |\n12 |     let mut ans = vec![0i32; n / 2];\n\
    \   |                              ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |     let mut ans = vec![0i32; (n / 2).try_into().unwrap()];\n\
    \   |                              +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi6nb1g6p.rs:24:5\n   |\n11 | fn make_a_pile(n:\
    \ isize) -> Vec<isize> {\n   |                             ---------- expected\
    \ `Vec<isize>` because of return type\n...\n24 |     ans\n   |     ^^^ expected\
    \ `isize`, found `i32`\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \        found struct `Vec<i32>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < n {\n        if n % 2 == 0 {\n            pile[j] = i;\n\
    \            i += 1;\n            j += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmp9zixjq35.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut stones = vec![n];\n  \
    \      let mut next_odd_stones = vec![n - 1];\n        while n >= 2 {\n      \
    \      n -= 2;\n            next_odd_stones.push(n - 1);\n        }\n        stones.push(next_odd_stones);\n\
    \        return stones;\n    }\n\n    let mut stones = vec![n];\n    let mut next_even_stones\
    \ = vec![n];\n    while n >= 2 {\n        n -= 2;\n        next_even_stones.push(n\
    \ - 1);\n    }\n    stones.push(next_even_stones);\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnm29t1eg.rs:19:21\n   |\n\
    19 |         stones.push(next_odd_stones);\n   |                     ^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n\
    \            found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnm29t1eg.rs:29:17\n   |\n29 |     stones.push(next_even_stones);\n \
    \  |                 ^^^^^^^^^^^^^^^^ expected `isize`, found struct `Vec`\n \
    \  |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(1); pile.push(2);\
    \ pile.push(3);\n    pile.push(4); pile.push(5); pile.push(6);\n    pile.push(7);\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5, 6, 7]`,\n right: `[3, 5, 7]`', /tmp/tmpaodeu8zk.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1:\n        return vec![1];\n    if n % 2 == 1\
    \ {\n        return vec![n, n / 2];\n    }\n    return vec![n / 2, n];\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `return`\n  --> /tmp/tmp_5di8fna.rs:13:9\n\
    \   |\n13 |         return vec![1];\n   |         ^^^^^^ expected identifier,\
    \ found keyword\n\nerror: expected type, found keyword `return`\n  --> /tmp/tmp_5di8fna.rs:13:9\n\
    \   |\n12 |     if n == 1:\n   |              - help: try using a semicolon: `;`\n\
    13 |         return vec![1];\n   |         ^^^^^^ expected type\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n\n    if n % 2 == 0 {\n      \
    \  for i in 1..(n - 1) {\n            if i % 2 != 0 {\n                pile[i\
    \ - 1] = pile[i - 1] + 1;\n            } else {\n                pile[i - 1] =\
    \ pile[i - 1] - 1;\n            }\n        }\n    } else {\n        for i in 1..(n\
    \ - 1) {\n            if i % 2 == 0 {\n                pile[i - 1] = pile[i -\
    \ 1] + 1;\n            } else {\n                pile[i - 1] = pile[i - 1] - 1;\n\
    \            }\n        }\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpf8v3w6d1.rs:17:17\n\
    \   |\n17 |                 pile[i - 1] = pile[i - 1] + 1;\n   |             \
    \    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpf8v3w6d1.rs:17:31\n\
    \   |\n17 |                 pile[i - 1] = pile[i - 1] + 1;\n   |             \
    \                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpf8v3w6d1.rs:19:17\n   |\n19 |                 pile[i - 1] = pile[i\
    \ - 1] - 1;\n   |                 ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpf8v3w6d1.rs:19:31\n   |\n19 |            \
    \     pile[i - 1] = pile[i - 1] - 1;\n   |                               ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpf8v3w6d1.rs:25:17\n\
    \   |\n2"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![0; n + 1];\n\n    if n % 2 == 0 {\n\
    \        let next_odd = (n + 1) / 2;\n        res.insert(1, next_odd);\n     \
    \   res.insert(n, next_odd);\n    } else {\n        let next_even = (n + 1) /\
    \ 2;\n        res.insert(1, next_even);\n        res.insert(n, next_even);\n \
    \   }\n\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkrcn1ukd.rs:12:27\n   |\n\
    12 |     let mut res = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut res = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkrcn1ukd.rs:17:20\n   |\n17 |\
    \         res.insert(n, next_odd);\n   |                    ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |         res.insert(n.try_into().unwrap(),\
    \ next_odd);\n   |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkrcn1ukd.rs:21:20\n   |\n21 |         res.insert(n, next_even);\n\
    \   |                    ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n21 |         res.insert(n.try_into().unwrap(), next_even);\n   |      \
    \               ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = 0;\n    while n != 0 {\n        stones\
    \ += (n & 1) != 0;\n        n /= 2;\n    }\n    vec![stones]\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpj707e48s.rs:14:16\n\
    \   |\n14 |         stones += (n & 1) != 0;\n   |                ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![n];\n    for i in 0..levels.len()\
    \ {\n        let next_level = if n % 2 == 1 {\n            levels[i / 2] + 2\n\
    \        } else {\n            levels[i / 2] + 1\n        };\n        levels[i]\
    \ = next_level;\n        n = next_level;\n    }\n    levels\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwu2ocod2.rs:20:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |         n = next_level;\n\
    \   |         ^^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    stones[0] = stones[1]\
    \ = stones[2] = n + 1;\n\n    if n % 2 == 0 {\n        stones[2] = stones[2] /\
    \ 2;\n    }\n\n    for &stone in &stones[3..] {\n        stone += stones.len()\
    \ as isize;\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_h5i9sx.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1_h5i9sx.rs:13:29\n\
    \   |\n13 |     stones[0] = stones[1] = stones[2] = n + 1;\n   |             \
    \    ---------   ^^^^^^^^^^^^^^^^^ expected `isize`, found `()`\n   |        \
    \         |\n   |                 expected due to the type of this binding\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1_h5i9sx.rs:13:17\n   |\n13 |  \
    \   stones[0] = stones[1] = stones[2] = n + 1;\n   |     ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `()`\n   |     |\n   |     expected due to the type\
    \ of this binding\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n\n    for i in 0..n {\n\
    \        if i % 2 == 1 {\n            pile[i / 2] = pile[i / 2] + 1;\n       \
    \ } else {\n            pile[i / 2] = pile[i / 2] + 2;\n        }\n    }\n\n \
    \   pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7l63982.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpu7l63982.rs:16:13\n   |\n16 |         \
    \    pile[i / 2] = pile[i / 2] + 1;\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpu7l63982.rs:16:27\n   |\n16 |  \
    \           pile[i / 2] = pile[i / 2] + 1;\n   |                           ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpu7l63982.rs:18:13\n\
    \   |\n18 |             pile[i / 2] = pile[i / 2] + 2;\n   |             ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpu7l63982.rs:18:27\n\
    \   |\n18 |             pile[i / 2] = pile[i / 2] + 2;\n   |                 \
    \        "
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(make_a_level(n));\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_a_level` in this scope\n  -->\
    \ /tmp/tmp2a4c1cpc.rs:13:15\n   |\n13 |     pile.push(make_a_level(n));\n   |\
    \               ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n);\n    for _ in 0..n\
    \ {\n        if n % 2 == 1 {\n            stones.push(3);\n        }\n       \
    \ if n % 2 == 0 {\n            stones.push(5);\n        }\n        stones.push(7);\n\
    \    }\n    return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxa0avtfe.rs:12:41\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n);\n   |                       \
    \                  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n.try_into().unwrap());\n   |   \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        panic!(\"n must be positive\")\n  \
    \  }\n\n    let mut pile = vec![n - 1];\n\n    if n % 2 == 0 {\n        for i\
    \ in 1..n {\n            pile.push(i % 2 * n + i);\n        }\n    } else {\n\
    \        for i in 1..n {\n            pile.push(i % 2 + i);\n        }\n    }\n\
    \n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpmzpydscu.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile : Vec<isize> = Vec::new();\n    let mut max_level\
    \ = n % 2;\n    pile += max_level;\n    while n > 0 {\n        if n & 1 == 1 {\n\
    \            pile += max_level;\n        }\n        max_level = max_level * 2;\n\
    \        pile += max_level;\n        n >>= 1;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmp84_gp1vh.rs:14:5\n   |\n14 |     pile += max_level;\n\
    \   |     ----^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp84_gp1vh.rs:17:13\n   |\n17 |             pile += max_level;\n\
    \   |             ----^^^^^^^^^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp84_gp1vh.rs:20:9\n   |\n\
    20 |         pile += max_level;\n   |         ----^^^^^^^^^^^^^\n   |        \
    \ |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0368`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::{Eq, PartialEq};\n\n    let mut stones =\
    \ vec![n];\n    if n % 2 == 0 {\n        stones.push(n - 1);\n    } else {\n \
    \       stones.push(n / 2);\n        stones.push(n - stones[0]);\n    }\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmptn82u0x4.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \n    if n % 2 == 0 {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap()\
    \ + 1);\n        }\n    } else {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap()\
    \ + 2);\n        }\n    }\n\n    stones\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpjk33mw9f.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n % 2 == 0);\n    let mut n = n - 1;\n    let mut\
    \ stones = Vec::with_capacity(n);\n    if n % 2 == 0 {\n        while n / 2 >\
    \ 0 {\n            let mut next = n / 2;\n            if n % 2 == 0 {\n      \
    \          next += 1;\n            }\n            stones.push(next);\n       \
    \     n -= next;\n        }\n    } else {\n        while n / 2 > 0 {\n       \
    \     let mut next = n / 2;\n            if n % 2 == 1 {\n                next\
    \ += 1;\n            }\n            stones.push(next);\n            n -= next;\n\
    \        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zyfdw6u.rs:14:41\n   |\n\
    14 |     let mut stones = Vec::with_capacity(n);\n   |                       \
    \                  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    14 |     let mut stones = Vec::with_capacity(n.try_into().unwrap());\n   |   \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n > 0);\n    let mut pile = vec![0i32; n];\n  \
    \  pile[n..].push(0);\n    for i in n..=n+2 {\n        if i % 2 == 0 {\n     \
    \       pile[n..].push(i*2);\n        } else {\n            pile[n..].push(i*2+1);\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmponszzh74.rs:13:31\n   |\n\
    13 |     let mut pile = vec![0i32; n];\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     let mut pile =\
    \ vec![0i32; n.try_into().unwrap()];\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `RangeFrom<isize>`\n  -->\
    \ /tmp/tmponszzh74.rs:14:5\n   |\n14 |     pile[n..].push(0);\n   |     ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[i32]>` is not implemented for `RangeFrom<isize>`\n   = help:\
    \ the following other types implement trait `SliceIndex<T>`:\n             <RangeFrom<usize>\
    \ as SliceIndex<[T]>>\n             <RangeFrom<usize> as SliceIndex<str>>\n  \
    \ = note: required because of the requirements on the impl of `Index<RangeFrom<isize>>`\
    \ for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmponszzh74.rs:17:13\n   |\n17 |             pile[n..].push(i*2);\n\
    \   |             ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for `RangeFrom<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeFrom<usize> as SliceIndex<[T]>>\n             <RangeFrom<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeFrom<isize>>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]`\
    \ cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmponszzh74.rs:19:13\n \
    \  |\n19 |             pile[n..].push(i*2+1);\n   |             ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[i32]>` is not implemented for `RangeFrom<isize>`\n   = help: the\
    \ following other types implement trait `SliceIndex<T>`:\n             <RangeFrom<usize>\
    \ as SliceIndex<[T]>>\n             <RangeFrom<usize> as SliceIndex<str"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut next_level =\
    \ Vec::new();\n    for i in 0..n {\n        if i % 2 == 0 {\n            next_level.append(2\
    \ * i);\n        } else {\n            next_level.append(i);\n        }\n    }\n\
    \    for level in next_level.iter().rev() {\n        result.append(*level);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdk7d23qo.rs:16:31\n   |\n\
    16 |             next_level.append(2 * i);\n   |                             \
    \  ^^^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdk7d23qo.rs:18:31\n   |\n18 |             next_level.append(i);\n\
    \   |                               ^ expected `&mut Vec<_>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<_>`\n                 \
    \          found type `isize`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    if n <= 0 {\n\
    \        return vec;\n    }\n    vec.push(n);\n\n    if n % 2 == 1 {\n       \
    \ vec.push(n - 1);\n    } else {\n        let n: isize = n - 1;\n        let m:\
    \ isize = n - 2;\n        for _ in 0..m+1 {\n            vec.push(n);\n      \
    \      n = (n + 1) / 2;\n        }\n    }\n\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp4hwqx35t.rs:25:13\n\
    \   |\n21 |         let n: isize = n - 1;\n   |             -\n   |          \
    \   |\n   |             first assignment to `n`\n   |             help: consider\
    \ making this binding mutable: `mut n`\n...\n25 |             n = (n + 1) / 2;\n\
    \   |             ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n\n    result.push(n);\n \
    \   if n % 2 == 0 {\n        let next_odd: (usize, usize) = if n / 2 == 0 { (1,\
    \ 1) } else { (n / 2, n % 2) };\n        result.push(...make_a_pile(next_odd));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `...`\n  --> /tmp/tmpu_80q5s8.rs:17:21\n   |\n\
    17 |         result.push(...make_a_pile(next_odd));\n   |                    \
    \ ^^^\n   |\nhelp: use `..` for an exclusive range\n   |\n17 |         result.push(..make_a_pile(next_odd));\n\
    \   |                     ~~\nhelp: or `..=` for an inclusive range\n   |\n17\
    \ |         result.push(..=make_a_pile(next_odd));\n   |                     ~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu_80q5s8.rs:16:73\n   |\n16 |\
    \         let next_odd: (usize, usize) = if n / 2 == 0 { (1, 1) } else { (n /\
    \ 2, n % 2) };\n   |                                                         \
    \                ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    16 |         let next_odd: (usize, usize) = if n / 2 == 0 { (1, 1) } else { ((n\
    \ / 2).try_into().unwrap(), n % 2) };\n   |                                  \
    \                                       +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu_80q5s8.rs:16:80\n   |\n16 |         let next_odd:\
    \ (usize, usize) = if n / 2 == 0 { (1, 1) } else { (n / 2, n % 2) };\n   |   \
    \                                                                            \
    \ ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n16 |      \
    \   let next_odd: (usize, usize) = if n / 2 == 0 { (1, 1) } else { (n / 2, (n\
    \ % 2).try_into().unwrap()) };\n   |                                         \
    \                                       +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu_80q5s8.rs:17:36\n   |\n17 |         result.push(...make_a_pile(next_odd));\n\
    \   |                                    ^^^^^^^^ expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(usize, usize)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu_80q5s8.rs:17:21\n   |\n17 |\
    \         result.push(...make_a_pile(next_odd));\n   |                     ^^^^^^^^"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut answer = vec![];\n    let even = (n % 2 == 0);\n\
    \    answer.push(n + (even ? 1 : 0));\n    for i in 2..n {\n        if i % 2 ==\
    \ 0 {\n            answer.push(i + (even ? 1 : 0));\n        } else {\n      \
    \      answer.push(i + (even ? 0 : 1));\n        }\n    }\n    answer\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n\
    \  --> /tmp/tmp32n0633j.rs:14:29\n   |\n14 |     answer.push(n + (even ? 1 : 0));\n\
    \   |                             ^ expected one of `)`, `,`, `.`, `?`, or an\
    \ operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `,`, `...`,\
    \ `.`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`,\
    \ `unsafe`, `~`, an operator, lifetime, or path, found `0`\n  --> /tmp/tmp32n0633j.rs:14:33\n\
    \   |\n14 |     answer.push(n + (even ? 1 : 0));\n   |                       \
    \         -^ expected one of 25 possible tokens\n   |                        \
    \        |\n   |                                help: missing `,`\n\nerror: expected\
    \ one of `.`, `;`, `?`, `}`, or an operator, found `)`\n  --> /tmp/tmp32n0633j.rs:14:35\n\
    \   |\n14 |     answer.push(n + (even ? 1 : 0));\n   |                       \
    \            ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmp32n0633j.rs:13:16\n\
    \   |\n13 |     let even = (n % 2 == 0);\n   |                ^          ^\n \
    \  |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n13 -     let even = (n % 2 == 0);\n13 +     let even = n % 2 == 0;\n  \
    \ | \n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n\
    \    use std::cmp::Ordering::*;\n\n    let mut pile =\n        Vec::<isize>::with_capacity(n\
    \ + 1);\n    if n <= 1 {\n        pile.push(1);\n    } else if n % 2 == 0 {\n\
    \        pile += vec![*make_a_pile((n - 1) / 2) as usize, 1];\n    } else {\n\
    \        pile += vec![*make_a_pile((n - 1) as usize / 2) as usize, 1];\n    }\n\
    \n    pile += vec![*make_a_pile((n - 1) as usize / 2) as usize, 1];\n\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpi15n9tpx.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nwarning: the item `PartialOrd`\
    \ is imported redundantly\n   --> /tmp/tmpi15n9tpx.rs:13:9\n    |\n13  |     use\
    \ std::cmp::PartialOrd;\n    |         ^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused\
    \ import: `std::cmp::PartialOrd`\n  --> /tmp/tmpi15n9tpx.rs:13:9\n   |\n13 | \
    \    use std::cmp::PartialOrd;\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nwarning:\
    \ unused import: `std::cmp::Ordering::*`\n  --> /tmp/tmpi15n9tpx.rs:14:9\n   |\n\
    14 |     use std::cmp::Ordering::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi15n9tpx.rs:17:37\n   |\n17 |         Vec::<isize>::with_capacity(n\
    \ + 1);\n   |                                     ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |         Vec::<isize>::with_capacity((n\
    \ + 1).try_into().unwrap());\n   |                                     +     +++++++++++++++++++++\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmpi15n9tpx.rs:21:9\n   |\n21 |         pile += vec![*make_a_pile((n\
    \ - 1) / 2) as usize, 1];\n   |         ----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi15n9tpx.rs:23:35\n   |\n23 |         pile +=\
    \ vec![*make_a_pile((n - 1) as usize / 2) as usize, 1];\n   |                \
    \                   ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n23 |         pile += vec![*make_a_pile(((n - 1) as usize\
    \ / 2).try_into().unwrap()) as usize, 1];\n   |                              \
    \     +                    +++++++++++++++++++++\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/t"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    loop {\n        if n % 2 == 0 {\n            return Vec::new();\n\
    \        }\n        n -= 1;\n        vec![n]\n    }\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb57lbdtk.rs:17:9\n   |\n\
    17 |         vec![n]\n   |         ^^^^^^^ expected `()`, found struct `Vec`\n\
    \   |\n   = note: expected unit type `()`\n                 found struct `Vec<isize>`\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![n];\n    if n % 2 == 0 {\n        res.insert(n,\
    \ 1);\n        res.insert(n + 1, n - 1);\n    } else {\n        res.insert(n,\
    \ n - 1);\n        res.insert(n + 1, 2, n - 2);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vbl7dkl.rs:14:20\n   |\n\
    14 |         res.insert(n, 1);\n   |                    ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n14 |         res.insert(n.try_into().unwrap(),\
    \ 1);\n   |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8vbl7dkl.rs:15:20\n   |\n15 |         res.insert(n + 1,\
    \ n - 1);\n   |                    ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |         res.insert((n + 1).try_into().unwrap(), n -\
    \ 1);\n   |                    +     +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8vbl7dkl.rs:17:20\n   |\n17 |         res.insert(n, n -\
    \ 1);\n   |                    ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |         res.insert(n.try_into().unwrap(), n - 1);\n   |    \
    \                 ++++++++++++++++++++\n\nerror[E0061]: this function takes 2\
    \ arguments but 3 arguments were supplied\n    --> /tmp/tmp8vbl7dkl.rs:18:13\n\
    \     |\n18   |         res.insert(n + 1, 2, n - 2);\n     |             ^^^^^^\
    \ -----  -  ----- supplied 3 arguments\n     |             |\n     |         \
    \    expected 2 arguments\n     |\nnote: associated function defined here\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counts: Vec<isize> = Vec::with_capacity(n as usize);\n\
    \    let mut level = 1;\n    while n >= level {\n        let next = (n % 2 ==\
    \ 0) ? (n - 1) as isize : (n + 1) as isize;\n        let mut next_count = counts.len();\n\
    \        for _ in 0..n {\n            counts.push(next_count);\n        }\n  \
    \      n /= 2;\n        level <<= 1;\n    }\n    counts\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or\
    \ path, found `1`\n  --> /tmp/tmp7tkjwdhu.rs:15:59\n   |\n15 |         let next\
    \ = (n % 2 == 0) ? (n - 1) as isize : (n + 1) as isize;\n   |                \
    \                                    -      ^ expected one of 9 possible tokens\n\
    \   |                                                    |\n   |             \
    \                                       tried to parse a type due to this\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for _ in 0..n {\n   \
    \     result.push(n);\n        if n % 2 == 0 {\n            result.push(n % 2\
    \ + 1);\n        } else {\n            result.push(n % 2 + 1);\n        }\n  \
    \      n /= 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp5pxyqnk6.rs:20:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975696
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counter = 0;\n    let mut pile: Vec<isize> = Vec::new();\n\
    \n    for i in 0..n {\n        if i % 2 == 0 {\n            counter = counter\
    \ + (i+1);\n        } else {\n            pile.push(counter);\n            counter\
    \ = 0;\n        }\n    }\n\n    pile.push(counter);\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp5o6ns3tr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i + 1);\n        } else {\n            pile.push(i\
    \ + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpuvd29oyn.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1]\n    } else {\n\
    \        vec![n, n + 1]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmpw5iqp4b1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 2 {\n        return vec![];\n    }\n    if n % 2\
    \ == 0 {\n        return vec![n];\n    }\n    let mut pile = vec![n];\n    pile.push(pile[n\
    \ - 1]);\n    for i in 0..n / 2 {\n        pile.push(pile[n - 1 - i] + pile[n\
    \ - 1 - i + 1]);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7dwxjylz.rs:19:15\n\
    \   |\n19 |     pile.push(pile[n - 1]);\n   |               ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7dwxjylz.rs:21:19\n   |\n21 |  \
    \       pile.push(pile[n - 1 - i] + pile[n - 1 - i + 1]);\n   |              \
    \     ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7dwxjylz.rs:21:37\n\
    \   |\n21 |         pile.push(pile[n - 1 - i] + pile[n - 1 - i + 1]);\n   |  \
    \                                   ^^^^^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n\n    if n % 2 == 0 {\n   \
    \     for _ in 0..n {\n            pile[n / 2] = pile[n / 2] + 2;\n        }\n\
    \    } else {\n        for _ in 0..n {\n            pile[n / 2] = pile[n / 2]\
    \ + 1;\n        }\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppxp_7jit.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmppxp_7jit.rs:16:13\n\
    \   |\n16 |             pile[n / 2] = pile[n / 2] + 2;\n   |             ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmppxp_7jit.rs:16:27\n\
    \   |\n16 |             pile[n / 2] = pile[n / 2] + 2;\n   |                 \
    \          ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmppxp_7jit.rs:20:13\n\
    \   |\n20 |             pile[n / 2] = pile[n / 2] + 1;\n   |             ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmppxp_7jit.rs:20:27\n\
    \   |\n20 |             pile[n / 2] = pile[n / 2] + 1;\n   |                 \
    \          ^^^^^^^^^^^ slice "
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_pile(&n, true, vec![0; n])\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_pile` in this scope\n  --> /tmp/tmpw8sqk8md.rs:12:5\n\
    \   |\n12 |     make_pile(&n, true, vec![0; n])\n   |     ^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8sqk8md.rs:12:33\n\
    \   |\n12 |     make_pile(&n, true, vec![0; n])\n   |                        \
    \         ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     make_pile(&n,\
    \ true, vec![0; n.try_into().unwrap()])\n   |                                \
    \  ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n >= 1);\n    let mut res: Vec<isize> = vec![];\n\
    \    if n&1 == 0 {\n        for i in 0..n {\n            res[i] = i;\n       \
    \ }\n    } else {\n        for i in 0..n {\n            res[i] = n + 2 * (i +\
    \ 1) - 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwolnox0t.rs:16:13\n\
    \   |\n16 |             res[i] = i;\n   |             ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpwolnox0t.rs:20:13\n   |\n20 |            \
    \ res[i] = n + 2 * (i + 1) - 1;\n   |             ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![n as isize];\n    }\n\
    \    let mut stones_left = n;\n    let mut stones_right = stones_left + n;\n\n\
    \    // The loop invariant is: \"stones_left - stones_right\" is a multiple of\
    \ n.\n    // If n is even and stones_left is odd, then stones_left is odd.\n \
    \   // If n is odd and stones_left is even, then stones_left is even.\n    loop\
    \ {\n        // The loop invariant is: \"stones_left - stones_right\" is a multiple\
    \ of n.\n        if stones_left > stones_right {\n            break;\n       \
    \ }\n\n        // If stones_left is even, there is one stone left.\n        //\
    \ If stones_left is odd, there is one stone left.\n        // The first stone\
    \ left is stones_left - 2.\n        stones_left -= 2;\n        if stones_left\
    \ % 2 == 1 {\n            stones_left += 1;\n        }\n\n        // If stones_right\
    \ is odd, there will be two stones left.\n        // If stones_right is even,\
    \ there is one stone left.\n        // The first stone left is stones_right -\
    \ 2.\n        stones_right -= 2;\n        if stones_right % 2 == 1 {\n       \
    \     stones_right += 1;\n        }\n    }\n    let mut result = vec![stones_left\
    \ as isize];\n\n    for stones in result.iter_mut() {\n        *stones = stones\
    \ + stones_right as isize;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `isize` to `&mut isize`\n  --> /tmp/tmp0x42hlvs.rs:46:26\n\
    \   |\n46 |         *stones = stones + stones_right as isize;\n   |          \
    \         ------ ^ --------------------- isize\n   |                   |\n   |\
    \                   &mut isize\n   |\nhelp: `+` can be used on `isize`, you can\
    \ dereference `stones`\n   |\n46 |         *stones = *stones + stones_right as\
    \ isize;\n   |                   +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![0; n * 2 + 1];\n    for level in\
    \ 0..levels.len() {\n        let mut current_level = 0;\n        let level = levels[level];\n\
    \        while current_level < level {\n            levels[level] = levels[level]\
    \ + 2;\n            level = levels[level];\n            current_level += 1\n \
    \       }\n    }\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmped9kh5id.rs:12:30\n   |\n\
    12 |     let mut levels = vec![0; n * 2 + 1];\n   |                          \
    \    ^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12\
    \ |     let mut levels = vec![0; (n * 2 + 1).try_into().unwrap()];\n   |     \
    \                         +         +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmped9kh5id.rs:22:5\n   |\n11 | fn make_a_pile(n: isize) ->\
    \ Vec<isize> {\n   |                             ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     levels\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 1 {\n   \
    \     stones.push(n - 1);\n    } else {\n        let mut odd_num = n / 2;\n  \
    \      stones.push(odd_num);\n        while odd_num > 0 {\n            odd_num\
    \ = odd_num - 2;\n            stones.push(odd_num);\n        }\n    }\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpf8mw63de.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, 2 * n - 1, 2 * n - 2]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpxl0bxzms.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    if n % 2 == 0 {\n      \
    \  for i in 0..n / 2 {\n            result[i+1] += i + 1;\n        }\n    } else\
    \ {\n        for i in 0..n / 2 {\n            result[i+1] += i + 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbfuoebp3.rs:15:13\n\
    \   |\n15 |             result[i+1] += i + 1;\n   |             ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbfuoebp3.rs:19:13\n   |\n19 |  \
    \           result[i+1] += i + 2;\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n,\
    \ n, n, n, n, n, n]\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]`,\n right:\
    \ `[3, 5, 7]`', /tmp/tmpbjz6g_bs.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for _ in 0..n {\n        v.push((n\
    \ % 2 == 0) ? n : n + 1);\n        n = n / 2;\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `n`\n\
    \  --> /tmp/tmpw552z59e.rs:14:31\n   |\n14 |         v.push((n % 2 == 0) ? n :\
    \ n + 1);\n   |                              -^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n   |                              |\n   |             \
    \                 help: missing `,`\n\nerror[E0573]: expected type, found local\
    \ variable `n`\n  --> /tmp/tmpw552z59e.rs:14:35\n   |\n14 |         v.push((n\
    \ % 2 == 0) ? n : n + 1);\n   |                                   ^ expecting\
    \ a type here because of type ascription\n\nerror[E0277]: the `?` operator can\
    \ only be applied to values that implement `Try`\n  --> /tmp/tmpw552z59e.rs:14:16\n\
    \   |\n14 |         v.push((n % 2 == 0) ? n : n + 1);\n   |                ^^^^^^^^^^^^^^\
    \ the `?` operator cannot be applied to type `bool`\n   |\n   = help: the trait\
    \ `Try` is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tmpw552z59e.rs:14:29\n   |\n11 | / fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n12 | |     let mut v = Vec::new();\n\
    13 | |     for _ in 0..n {\n14 | |         v.push((n % 2 == 0) ? n : n + 1);\n\
    \   | |                             ^ cannot use the `?` operator in a function\
    \ that returns `Vec<isize>`\n...  |\n17 | |     v\n18 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<_>` is not implemented for `Vec<isize>`\n\nerror[E0061]: this\
    \ function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpw552z59e.rs:14:11\n\
    \     |\n14   |         v.push((n % 2 == 0) ? n : n + 1);\n     |           ^^^^\
    \ -------------- --------- supplied 2 arguments\n     |           |\n     |  \
    \         expected 1 argument\n     |\nnote: associated function defined here\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0573.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n\n    loop {\n        pile.push(n);\n\
    \        if n%2 == 0 {\n            n /= 2;\n        } else {\n            n *=\
    \ 2;\n        }\n\n        if n == 0 {\n            break;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpmpgla4uq.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpmpgla4uq.rs:19:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |             n *= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push_back(n);\n\
    \n    while stones.len() > 2 {\n        let next_level_size = stones[stones.len()\
    \ - 1] % 2 == 0 ? stones[stones.len() - 2] : stones[stones.len() - 1] + 1;\n \
    \       stones.truncate(stones.len() - 1);\n        stones.push(next_level_size);\n\
    \    }\n\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n   \
    \ assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `stones`\n\
    \  --> /tmp/tmp_ehs555n.rs:16:67\n   |\n16 |         let next_level_size = stones[stones.len()\
    \ - 1] % 2 == 0 ? stones[stones.len() - 2] : stones[stones.len() - 1] + 1;\n \
    \  |                                                                   ^^^^^^\
    \ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0599]: no method\
    \ named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp_ehs555n.rs:13:12\n\
    \   |\n13 |     stones.push_back(n);\n   |            ^^^^^^^^^ method not found\
    \ in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones: Vec<isize> = Vec::new();\n    let mut level_count\
    \ = 0;\n    let mut level_stones = 1;\n    while level_count < n {\n        if\
    \ n % 2 == 0 {\n            stones.push(level_stones);\n            level_stones\
    \ += 2;\n        } else {\n            stones.push(level_stones);\n          \
    \  level_stones += 1;\n        }\n        level_count = level_stones;\n    }\n\
    \    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpe9rs3wti.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    while n >= 2 {\n    \
    \    stones.push(n);\n        n -= 2;\n    }\n    if n % 2 == 1 {\n        stones.push(n\
    \ - 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpoo256jz0.rs:15:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n15 |         n -= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    let mut nums: Vec<isize> =\
    \ vec![0; n + 1];\n    for i in 0..(n + 1) {\n        if i % 2 == 0 {\n      \
    \      nums[i] = nums[i - 1] + nums[i / 2];\n        } else {\n            nums[i]\
    \ = nums[i - 1];\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp18fy47zd.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp18fy47zd.rs:13:40\n   |\n13 |     let mut nums: Vec<isize>\
    \ = vec![0; n + 1];\n   |                                        ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     let mut nums: Vec<isize>\
    \ = vec![0; (n + 1).try_into().unwrap()];\n   |                              \
    \          +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp18fy47zd.rs:16:13\n   |\n16 |         \
    \    nums[i] = nums[i - 1] + nums[i / 2];\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp18fy47zd.rs:16:23\n   |\n16 |            \
    \ nums[i] = nums[i - 1] + nums[i / 2];\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp18fy47zd.rs:16:37\n\
    \   |\n16 |             nums[i] = nums[i - 1] + nums[i / 2];\n   |           \
    \                          ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        panic!(\"The input cannot be less than\
    \ 1.\")\n    }\n    let mut stones = Vec::new();\n    for i in 0..n / 2 {\n  \
    \      stones.push(i);\n    }\n    for i in n..=n / 2 {\n        stones.push(i\
    \ * 2 + 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmpid5u7ztd.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec = vec![0; n];\n    if n % 2 == 0 {\n      \
    \  vec[n / 2..n / 2 + 1] += 1;\n    } else {\n        vec[n / 2..n / 2] += 1;\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp61t6g2hi.rs:12:27\n   |\n\
    12 |     let mut vec = vec![0; n];\n   |                           ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut vec = vec![0;\
    \ n.try_into().unwrap()];\n   |                            ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp61t6g2hi.rs:14:9\n   |\n14 |         vec[n / 2..n / 2 + 1] += 1;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by\
    \ `std::ops::Range<isize>`\n  --> /tmp/tmp61t6g2hi.rs:16:9\n   |\n16 |       \
    \  vec[n / 2..n / 2] += 1;\n   |         ^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `std::ops::Range<isize>`\n   = help: the following other\
    \ types implement trait `SliceIndex<T>`:\n             <std::ops::Range<usize>\
    \ as SliceIndex<[T]>>\n             <std::ops::Range<usize> as SliceIndex<str>>\n\
    \   = note: required because of the requirements on the impl of `Index<std::ops::Range<isize>>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    match n % 2 {\n        0 => vec![n, n * 3, n * 6],\n  \
    \      1 => vec![n, n * 2],\n        _ => vec![n, n * 3, n * 4, n * 6, n * 8],\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 6]`,\n right: `[3, 5, 7]`', /tmp/tmpvxwe5hv7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return Vec::new();\n    }\n\n    let\
    \ mut res = vec![0; n - 1];\n    let mut last = res.len() - 1;\n\n    for &n in\
    \ &res {\n        *n = *last;\n        if n % 2 == 0 {\n            *last += 1;\n\
    \        } else {\n            *last -= 1;\n        }\n\n        last--;\n   \
    \ }\n\n    return res;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpgo2idbhc.rs:27:15\n\
    \   |\n27 |         last--;\n   |               ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgo2idbhc.rs:16:27\n   |\n16 |     let mut res\
    \ = vec![0; n - 1];\n   |                           ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n16 |     let mut res = vec![0; (n - 1).try_into().unwrap()];\n\
    \   |                           +     +++++++++++++++++++++\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmpgo2idbhc.rs:20:9\n   |\n20\
    \ |         *n = *last;\n   |         ^^\n\nerror[E0614]: type `usize` cannot\
    \ be dereferenced\n  --> /tmp/tmpgo2idbhc.rs:20:14\n   |\n20 |         *n = *last;\n\
    \   |              ^^^^^\n\nerror[E0614]: type `usize` cannot be dereferenced\n\
    \  --> /tmp/tmpgo2idbhc.rs:22:13\n   |\n22 |             *last += 1;\n   |   \
    \          ^^^^^\n\nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpgo2idbhc.rs:24:13\n\
    \   |\n24 |             *last -= 1;\n   |             ^^^^^\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones: Vec<isize> = vec![];\n    for _ in 0..n\
    \ {\n        if n % 2 == 1 {\n            stones.push(stones.len());\n       \
    \ } else if n % 2 == 0 {\n            stones.push(stones.len() * 2);\n       \
    \ } else {\n            stones.push(stones.len() * 3);\n        }\n    }\n   \
    \ stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf3gy4rwe.rs:15:25\n   |\n\
    15 |             stones.push(stones.len());\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n15 |           \
    \  stones.push(stones.len().try_into().unwrap());\n   |                      \
    \               ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpf3gy4rwe.rs:17:25\n   |\n17 |             stones.push(stones.len() *\
    \ 2);\n   |                         ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |             stones.push((stones.len() * 2).try_into().unwrap());\n\
    \   |                         +                +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf3gy4rwe.rs:19:25\n   |\n19 |             stones.push(stones.len()\
    \ * 3);\n   |                         ^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |             stones.push((stones.len()\
    \ * 3).try_into().unwrap());\n   |                         +                +++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    make_pile(n,\
    \ 1).iter()\n        .cloned()\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_pile` in this scope\n  --> /tmp/tmpbghqbyd4.rs:15:5\n\
    \   |\n15 |     make_pile(n, 1).iter()\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n\n    let mut\
    \ number_of_piles = vec![n];\n    let mut current_level: isize = 1;\n    while\
    \ number_of_piles[current_level] != n {\n        if n % current_level == 0 {\n\
    \            current_level += 1\n        } else {\n            current_level +=\
    \ 2;\n        }\n        number_of_piles[current_level] += 1;\n    }\n\n    number_of_piles\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcbj72bfq.rs:18:11\n\
    \   |\n18 |     while number_of_piles[current_level] != n {\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcbj72bfq.rs:24:9\n\
    \   |\n24 |         number_of_piles[current_level] += 1;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut a = vec![n];\n    let mut sum = 0;\n    for i in\
    \ 1..n {\n        if i %2 != 0 {\n            sum += i;\n        } else {\n  \
    \          sum += (i + 1);\n        }\n        a[i] = sum;\n    }\n    a\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpwx7nla2x.rs:18:20\n\
    \   |\n18 |             sum += (i + 1);\n   |                    ^     ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n18 -             sum += (i + 1);\n18 +             sum += i + 1;\n   |\
    \ \n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwx7nla2x.rs:20:9\n\
    \   |\n20 |         a[i] = sum;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error; 1\
    \ warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = Vec::new();\n    let mut current_level\
    \ = 0;\n    let mut current_level_stones = 0;\n    while current_level_stones\
    \ + n < n {\n        current_level_stones += n;\n        current_level += 1;\n\
    \        pile.push(current_level_stones);\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpxcci46iw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec = Vec::new();\n    let mut pile = n;\n    while\
    \ pile > 0 {\n        if pile % 2 == 0 {\n            pile = pile.next_odd();\n\
    \        } else {\n            pile = pile.next_even();\n        }\n        vec.push(pile);\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `next_odd` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpvlpsc9sd.rs:16:25\n   |\n16 |             pile\
    \ = pile.next_odd();\n   |                         ^^^^^^^^ method not found in\
    \ `isize`\n\nerror[E0599]: no method named `next_even` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpvlpsc9sd.rs:18:25\n   |\n18 |          \
    \   pile = pile.next_even();\n   |                         ^^^^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = 0;\n    if n % 2 == 0 {\n        stones\
    \ += n / 2\n    } else {\n        stones += n * (n - 1) / 2\n    }\n    stones.into_iter().map(|n|\
    \ n + 1)\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpy052kge4.rs:18:12\n\
    \   |\n18 |     stones.into_iter().map(|n| n + 1)\n   |            ^^^^^^^^^ `isize`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `isize: Iterator`\n           which is required by `isize: IntoIterator`\n\
    \           `&isize: Iterator`\n           which is required by `&isize: IntoIterator`\n\
    \           `&mut isize: Iterator`\n           which is required by `&mut isize:\
    \ IntoIterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    debug_assert!(n > 0);\n    let mut ret = vec![];\n    while\
    \ n != 0 {\n        n -= 1;\n        if n % 2 == 1 {\n            ret.push((n\
    \ + 1) as isize);\n        } else {\n            ret.push((n / 2) as isize);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp43s9180n.rs:15:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n15 |         n -= 1;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n > 0);\n\n    let mut pile: Vec<isize> = vec![];\n\
    \    for _ in 0..n {\n        let n = n * 2;\n\n        if n <= 0 {\n        \
    \    break;\n        }\n\n        let mut next_odd_n: isize = 0;\n        let\
    \ mut next_even_n: isize = 0;\n\n        if n % 2 == 0 {\n            next_odd_n\
    \ = n;\n        } else {\n            next_even_n = n;\n        }\n\n        if\
    \ next_odd_n > next_even_n {\n            pile.push(next_odd_n);\n        } else\
    \ {\n            pile.push(next_even_n);\n        }\n    }\n\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 6, 6]`,\n right: `[3, 5, 7]`', /tmp/tmpo2m4otd6.rs:43:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut a = vec![0];\n\n    while n != 0 {\n        if\
    \ n % 2 == 0 {\n            a.push(n % 2);\n            n /= 2;\n        } else\
    \ {\n            a.push((n % 2) + 1);\n            n /= 2;\n        }\n    }\n\
    \n    a\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdcbr23gi.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpdcbr23gi.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n    match\
    \ n % 2 {\n        0 => vec![n - 1, n, n - 2],\n        1 => vec![n - 1, n - 2],\n\
    \        _ => vec![n - 2, n - 1],\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmps6d8x30t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        make_a_pile_oddn(&n, vec![n])\n\
    \    } else {\n        make_a_pile_even(&n, vec![n])\n    }\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `make_a_pile_oddn` in this scope\n \
    \ --> /tmp/tmpep7mqpvq.rs:13:9\n   |\n13 |         make_a_pile_oddn(&n, vec![n])\n\
    \   |         ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `make_a_pile_even` in this scope\n  --> /tmp/tmpep7mqpvq.rs:15:9\n\
    \   |\n15 |         make_a_pile_even(&n, vec![n])\n   |         ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    pile.push(n);\n    for _ in\
    \ 1 .. n / 2 {\n        pile.push(n);\n    }\n    for _ in 1 .. n / 2 {\n    \
    \    pile.push(n - 1);\n    }\n    for _ in 1 .. n / 2 {\n        pile.push(n\
    \ - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpecffb3f9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    for i in 0..n {\n   \
    \     let is_odd = i & 0x1;\n        let n = i & 0x3;\n        stones.push(if\
    \ is_odd { 2*n } else { n });\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiuxj47y7.rs:16:24\n   |\n\
    16 |         stones.push(if is_odd { 2*n } else { n });\n   |                \
    \        ^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n\n    if n % 2 == 0 {\n      \
    \  let next_odd_num = n - 1;\n        for _ in 0..n {\n            pile.poll_next_odd(&mut\
    \ pile);\n        }\n        let next_even_num = n - 1;\n        for _ in 0..n\
    \ {\n            pile.poll_next_even(&mut pile);\n        }\n    } else {\n  \
    \      let next_even_num = n - 1;\n        for _ in 0..n {\n            pile.poll_next_even(&mut\
    \ pile);\n        }\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `poll_next_odd` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp6yzgs2a1.rs:17:18\n   |\n17 |          \
    \   pile.poll_next_odd(&mut pile);\n   |                  ^^^^^^^^^^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0599]: no method named `poll_next_even`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp6yzgs2a1.rs:21:18\n\
    \   |\n21 |             pile.poll_next_even(&mut pile);\n   |                \
    \  ^^^^^^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method\
    \ named `poll_next_even` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmp6yzgs2a1.rs:26:18\n   |\n26 |             pile.poll_next_even(&mut\
    \ pile);\n   |                  ^^^^^^^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n\n    if n % 2 == 0 {\n   \
    \     pile.push(n - 1);\n    } else {\n        let n = n - 1;\n        let mut\
    \ odd = 1;\n\n        for _ in 0..n / 2 {\n            odd*=2;\n        }\n\n\
    \        odd = odd;\n\n        let mut even = 1;\n\n        for _ in 0..n / 2\
    \ {\n            even*=2;\n        }\n\n        even = even;\n\n        pile.push(odd);\n\
    \        pile.push(even);\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpjt4acxgl.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n as isize]\n    } else {\n\
    \        vec![\n            (n / 2) as isize,\n            ((n / 2) as isize)\
    \ + 1,\n            ((n / 2) as isize) + 2,\n        ]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmp6w9kevgs.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0isize; n];\n    for _i in 0..n {\n\
    \        if n % 2 == 1 {\n            stones[_i as usize] += 1;\n        }\n \
    \       n = n + 1;\n        if n % 2 == 0 {\n            stones[_i as usize] +=\
    \ 1;\n        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsqwcojd.rs:12:35\n   |\n\
    12 |     let mut stones = vec![0isize; n];\n   |                             \
    \      ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut stones = vec![0isize; n.try_into().unwrap()];\n   |                    \
    \                ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 0
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    let mut odd_cnt\
    \ = 0;\n    let mut even_n = 0;\n    if n % 2 == 0 {\n        even_n = n;\n  \
    \  } else {\n        odd_cnt = n;\n    }\n\n    for _ in 0..n {\n        let mut\
    \ current_odd_cnt = odd_cnt;\n        if odd_cnt % 2 == 0 {\n            current_odd_cnt\
    \ += even_n;\n        }\n        vec.push(current_odd_cnt);\n        odd_cnt +=\
    \ 2;\n    }\n\n    vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let max_stones = n.ceil()\
    \ as isize;\n    for i in 1..max_stones {\n        if i % 2 == 1 {\n         \
    \   stones.push(i);\n        } else {\n            stones.push(i % 3);\n     \
    \   }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ceil` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmph_unrtma.rs:13:24\n   |\n13 |     let max_stones = n.ceil()\
    \ as isize;\n   |                        ^^^^ help: there is an associated function\
    \ with a similar name: `div_ceil`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = vec![0; n + 1];\n    if n % 2\
    \ == 1 {\n        vec[1] = vec![n];\n    } else {\n        let mut i: isize =\
    \ 2;\n        while i + 1 < n + 1 {\n            vec[i + 1] = vec![i / 2, i -\
    \ i / 2];\n            i += 2;\n        }\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmwdo8lr1.rs:12:39\n   |\n\
    12 |     let mut vec: Vec<isize> = vec![0; n + 1];\n   |                     \
    \                  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut vec: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                       +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmwdo8lr1.rs:14:18\n   |\n14 |         vec[1]\
    \ = vec![n];\n   |         ------   ^^^^^^^ expected `isize`, found struct `Vec`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    \   = note: expected type `isize`\n            found struct `Vec<isize>`\n   =\
    \ note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpmwdo8lr1.rs:18:13\n   |\n18 |         \
    \    vec[i + 1] = vec![i / 2, i - i / 2];\n   |             ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![0; n + 1];\n    levels[0] += 1;\n\
    \    levels[1] += 1;\n    for i in 2..=n {\n        levels[i] += if n % 2 == 0\
    \ {\n            levels[i - 1]\n        } else {\n            levels[i - 2]\n\
    \        };\n    }\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0_4dra9x.rs:12:30\n   |\n\
    12 |     let mut levels = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ levels = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp0_4dra9x.rs:16:9\n   |\n16 |         levels[i]\
    \ += if n % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0_4dra9x.rs:17:13\n   |\n17 |  \
    \           levels[i - 1]\n   |             ^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0_4dra9x.rs:19:13\n   |\n19 |  \
    \           levels[i - 2]\n   |             ^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut nlevels = if n % 2 == 0 {\n        n as isize\n\
    \    } else {\n        (n as i32).ceil() as isize\n    };\n\n    let mut ret =\
    \ vec![nlevels];\n    for j in 0 .. nlevels-1 {\n        let mut count = 0;\n\
    \        let mut cur = n;\n        for i in 0..nlevels {\n            if i % 2\
    \ == 0 {\n                count += cur as isize;\n            } else {\n     \
    \           count += (cur % 2 == 0) as isize;\n                cur /= 2;\n   \
    \         }\n        }\n        ret[j] = count;\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ceil` found for type `i32` in the current\
    \ scope\n  --> /tmp/tmpug_pmn2r.rs:15:20\n   |\n15 |         (n as i32).ceil()\
    \ as isize\n   |                    ^^^^ help: there is an associated function\
    \ with a similar name: `div_ceil`\n\nerror[E0271]: type mismatch resolving `<isize\
    \ as Sub>::Output == usize`\n  --> /tmp/tmpug_pmn2r.rs:19:26\n   |\n19 |     for\
    \ j in 0 .. nlevels-1 {\n   |                          ^ expected `isize`, found\
    \ `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec = Vec::new();\n    if n % 2 == 1 {\n      \
    \  vec.push(n - 1);\n    } else {\n        vec.push((2 * n) - 1);\n    }\n   \
    \ vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpm2_unytp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    while n > 0 {\n        if n\
    \ % 2 == 0 {\n            pile.push(n / 2);\n            n = n / 2;\n        }\
    \ else if n % 2 == 1 {\n            pile.push(n / 2 + 1);\n            n = n /\
    \ 2;\n        } else {\n            pile.push(n / 2 + 1);\n            n = n /\
    \ 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpd5xkymft.rs:16:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n = n /\
    \ 2;\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpd5xkymft.rs:19:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |             n = n /\
    \ 2;\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpd5xkymft.rs:22:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n22 |             n = n /\
    \ 2;\n   |             ^^^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n];\n    if n % 2 == 1 {\n   \
    \     stones[..(n - 1)].push(n - 1);\n        stones[n - 1] += n - 1;\n    } else\
    \ {\n        stones[..(n - 1)].push((n - 1) / 2);\n        stones[n - 1] += (n\
    \ - 1) / 2;\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9x85jbzo.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut stones\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp9x85jbzo.rs:14:9\n   |\n14 |         stones[..(n - 1)].push(n -\
    \ 1);\n   |         ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `RangeTo<isize>`\n   = help: the following other types implement trait `SliceIndex<T>`:\n\
    \             <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeTo<isize>>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9x85jbzo.rs:15:9\n\
    \   |\n15 |         stones[n - 1] += n - 1;\n   |         ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmp9x85jbzo.rs:17:9\n\
    \   |\n17 |         stones[..(n - 1)].push((n - 1) / 2);\n   |         ^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `RangeTo<isize>`\n  \
    \ = help: the following other types implement trait `SliceIndex<T>`:\n       \
    \      <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize> as SliceIndex<str>>\n\
    \   = note: required because of the requirements on the impl of `Index<R"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    if n % 2 == 1 {\n     \
    \   pile.push(n - 1);\n    }\n    for _ in 1..n / 2 {\n        pile.push(pile.last().unwrap()\
    \ + 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpbryy4frh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    let mut pile: Vec<isize> =\
    \ Vec::new();\n    pile.push(n);\n    if n == 1 {\n        pile.push(1);\n   \
    \ }\n    else if n % 2 == 0 {\n        for _ in 0..n {\n            pile.push((pile[pile.len()\
    \ - 1] as usize + 1) % (*n as usize));\n        }\n    }\n    else {\n       \
    \ for _ in 0..n {\n            pile.push((pile[pile.len() - 1] as usize + 1) /\
    \ 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp561gphr4.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp561gphr4.rs:20:62\n   |\n20 |        \
    \     pile.push((pile[pile.len() - 1] as usize + 1) % (*n as usize));\n   |  \
    \                                                            ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp561gphr4.rs:20:23\n   |\n20 |             pile.push((pile[pile.len()\
    \ - 1] as usize + 1) % (*n as usize));\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n20 |           \
    \  pile.push(((pile[pile.len() - 1] as usize + 1) % (*n as usize)).try_into().unwrap());\n\
    \   |                       +                                                \
    \   +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp561gphr4.rs:25:23\n\
    \   |\n25 |             pile.push((pile[pile.len() - 1] as usize + 1) / 2);\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n25 |             pile.push(((pile[pile.len()\
    \ - 1] as usize + 1) / 2).try_into().unwrap());\n   |                       +\
    \                                       +++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    match n % 2 {\n        0 => vec![n, n],\n        1 => vec![n,\
    \ n + 1],\n        _ => vec![n - 1, n + 1, 2 * n - 1, 2 * n + 1],\n    }\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmpwh94oskc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n\n    let mut\
    \ pile = vec![];\n    let mut level = vec![0];\n\n    while pile.len() < n {\n\
    \        pile.push(level.last().unwrap() + 1);\n        if n % 2 == 0 {\n    \
    \        level += vec![(level[0] + 1) as isize..level.last().unwrap()];\n    \
    \    } else {\n            level += vec![level[0] as isize..(level.last().unwrap()\
    \ + 1)];\n        }\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp78kq3tqd.rs:19:24\n   |\n\
    19 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp78kq3tqd.rs:22:52\n   |\n22 |             level += vec![(level[0]\
    \ + 1) as isize..level.last().unwrap()];\n   |                               \
    \                     ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&{integer}`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n22 |             level +=\
    \ vec![(level[0] + 1) as isize..*level.last().unwrap()];\n   |               \
    \                                     +\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Vec<{integer}>`\n  --> /tmp/tmp78kq3tqd.rs:22:13\n\
    \   |\n22 |             level += vec![(level[0] + 1) as isize..level.last().unwrap()];\n\
    \   |             -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<{integer}>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<{integer}>`\n\
    \  --> /tmp/tmp78kq3tqd.rs:24:13\n   |\n24 |             level += vec![level[0]\
    \ as isize..(level.last().unwrap() + 1)];\n   |             -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    if n %\
    \ 2 == 1 {\n        return vec![n, n - 1];\n    }\n    let mut stones = vec![];\n\
    \    for i in 1..(n + 1).step_by(2) {\n        stones.push(i as isize);\n    }\n\
    \    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpsqcsdtoa.rs:19:25\n\
    \   |\n19 |     for i in 1..(n + 1).step_by(2) {\n   |                       \
    \  ^^^^^^^ `isize` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `isize: Iterator`\n           which is required\
    \ by `&mut isize: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones_at: Vec<isize> = Vec::new();\n    let mut\
    \ current_level = 1;\n    while n >= current_level {\n        stones_at.push(n\
    \ / 2);\n        if n % 2 == 1 {\n            stones_at.push(n % 2);\n       \
    \ }\n        current_level = stones_at.last().unwrap() + 1;\n    }\n    stones_at\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659975702
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in (1..n).rev().take_while(|&x|\
    \ *x != 0) {\n        match i {\n            x if x % 2 == 0 => {\n          \
    \      result.push((x % 2).into());\n            },\n            x if x % 2 !=\
    \ 0 => {\n                result.push((x / 2).into());\n            },\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp2ta29xw9.rs:13:43\n\
    \   |\n13 |     for i in (1..n).rev().take_while(|&x| *x != 0) {\n   |       \
    \                                    ^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut current_level: Vec<isize> = vec![0; n + 1];\n \
    \   let mut current_level_size: isize = 1;\n\n    for level in current_level.iter_mut()\
    \ {\n        if n & 1 == 0 {\n            *level = current_level_size;\n     \
    \       current_level_size += 1;\n        } else if n & 1 == 1 {\n           \
    \ *level = current_level_size;\n            current_level_size += 1;\n       \
    \ } else {\n            *level += 1;\n        }\n    }\n    current_level\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplw713697.rs:12:49\n   |\n\
    12 |     let mut current_level: Vec<isize> = vec![0; n + 1];\n   |           \
    \                                      ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |     let mut current_level: Vec<isize> = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                                        \
    \         +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![0; n + 1];\n    res[0] += n;\n    for\
    \ i in 1..=n {\n        res[i] += 1;\n        if i % 2 == 0 {\n            res[i]\
    \ += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprwua3s2x.rs:12:27\n   |\n\
    12 |     let mut res = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut res = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprwua3s2x.rs:15:9\n\
    \   |\n15 |         res[i] += 1;\n   |         ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprwua3s2x.rs:17:13\n   |\n17 |            \
    \ res[i] += 1;\n   |             ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n&1 == 1 {\n        vec![n, n-1, n-1, n-1, n-1]\n  \
    \  } else {\n        vec![n, n, n-1, n-1, n-1, n-1, n-1, n-1, n-1, n-1, n-1, n-1,\
    \ n-1, n-1, n-1, n-1]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpmsenubh2.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n    }\n\n    match\
    \ n % 2 {\n        0 => {\n            let mut stones = vec![n];\n\n         \
    \   while stones.len() > 2 {\n                stones.pop_back();\n           \
    \     stones.pop_back();\n            }\n\n            stones.len()\n        }\n\
    \        1 => n,\n        _ => {\n            let mut stones = vec![n - 1];\n\n\
    \            while stones.len() > 2 {\n                stones.pop_back();\n  \
    \              stones.pop_back();\n            }\n\n            stones.len()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pop_back` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp6rcnyjm5.rs:21:24\n   |\n21 |          \
    \       stones.pop_back();\n   |                        ^^^^^^^^ method not found\
    \ in `Vec<isize>`\n\nerror[E0599]: no method named `pop_back` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmp6rcnyjm5.rs:22:24\n   |\n22\
    \ |                 stones.pop_back();\n   |                        ^^^^^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rcnyjm5.rs:25:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \          ---------- expected `Vec<isize>` because of return type\n...\n25 |\
    \             stones.len()\n   |             ^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `usize`\n\nerror[E0599]: no method named `pop_back` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmp6rcnyjm5.rs:32:24\n   |\n32\
    \ |                 stones.pop_back();\n   |                        ^^^^^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0599]: no method named `pop_back` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp6rcnyjm5.rs:33:24\n\
    \   |\n33 |                 stones.pop_back();\n   |                        ^^^^^^^^\
    \ method not found in `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rcnyjm5.rs:36:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \          ---------- expected `Vec<isize>` because of return type\n...\n36 |\
    \             stones.len()\n   |             ^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `usize`\n\nerror: aborting due to 6 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975697
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a vector,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    match n % 2 {\n        0 => vec![n],\n        _ => vec![n,\
    \ n - 1, n - 2],\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpf29jnihe.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975697
