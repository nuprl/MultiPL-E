language: rs
name: HumanEval_51_remove_vowels
results:
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !vowels.contains(&c.to_string()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpy3tpyja0.rs:14:22\n\
    \   |\n14 |         .filter(|c| !vowels.contains(&c.to_string()))\n   |      \
    \                ^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = \"aeiou\";\n    vowels.remove_prefix(\"a\");\n    vowels.remove_suffix(\"\
    u\");\n    text.chars().filter(|c| vowels.contains(&c.to_string())).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_prefix` found for reference `&str`\
    \ in the current scope\n  --> /tmp/tmpo_fsabq3.rs:14:12\n   |\n14 |     vowels.remove_prefix(\"\
    a\");\n   |            ^^^^^^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `remove_suffix` found for reference `&str` in the current scope\n\
    \  --> /tmp/tmpo_fsabq3.rs:15:12\n   |\n15 |     vowels.remove_suffix(\"u\");\n\
    \   |            ^^^^^^^^^^^^^ method not found in `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text\n        .chars()\n        .filter_map(|c| if c.is_lowercase() ||\
    \ c.is_uppercase() || c.is_digit() || c.is_punctuation() {\n            Some(c)\n\
    \        } else {\n            None\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmphxnacsdm.rs:15:70\n    |\n15  |         .filter_map(|c| if c.is_lowercase()\
    \ || c.is_uppercase() || c.is_digit() || c.is_punctuation() {\n    |         \
    \                                                             ^^^^^^^^- supplied\
    \ 0 arguments\n    |                                                         \
    \             |\n    |                                                       \
    \               expected 1 argument\n    |\nnote: associated function defined\
    \ here\n\nerror[E0599]: no method named `is_punctuation` found for type `char`\
    \ in the current scope\n  --> /tmp/tmphxnacsdm.rs:15:86\n   |\n15 |         .filter_map(|c|\
    \ if c.is_lowercase() || c.is_uppercase() || c.is_digit() || c.is_punctuation()\
    \ {\n   |                                                                    \
    \                  ^^^^^^^^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_ascii_punctuation`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u')\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpz89pulrj.rs:14:23\n\
    \   |\n14 |         .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u')\n   |                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpz89pulrj.rs:14:35\n   |\n14 |   \
    \      .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n\
    \   |                                   ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpz89pulrj.rs:14:47\n   |\n14 |   \
    \      .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n\
    \   |                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpz89pulrj.rs:14:59\n   |\n14\
    \ |         .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n\
    \   |                                                           ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpz89pulrj.rs:14:71\n\
    \   |\n14 |         .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u')\n   |                                                            \
    \           ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror: aborting due to 5 previous errors\n\nFor\
    \ more information about this"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    match text {\n        text => text.chars().filter(|c|\n            c.is_alphabetic()\
    \ ||\n            c.is_lowercase() ||\n            c.is_uppercase() ||\n     \
    \       c.is_digit() ||\n            c.is_punctuation() ||\n            c.is_whitespace()\n\
    \        ).collect(),\n        _ => text,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp7dvd2_m_.rs:18:15\n    |\n18  |             c.is_digit() ||\n\
    \    |               ^^^^^^^^- supplied 0 arguments\n    |               |\n \
    \   |               expected 1 argument\n    |\nnote: associated function defined\
    \ here\n\nerror[E0599]: no method named `is_punctuation` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp7dvd2_m_.rs:19:15\n   |\n19 |          \
    \   c.is_punctuation() ||\n   |               ^^^^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `is_ascii_punctuation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| *c != 'a' && *c != 'e' && *c != 'i'\
    \ && *c != 'o' && *c != 'u')\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpcq02gxku.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpy5p9m10a.rs:13:5\n   |\n13 |     remove_vowels_impl(text)\n   |\
    \     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // Create a set of allowed characters to remove and use that as a \"\
    whitelist\"\n    // for the filter\n    let mut allowed = text\n        .chars()\n\
    \        .filter(|c| !c.is_alphabetic(char::Z))\n        .filter(|c| !c.is_alphabetic(char::Y))\n\
    \        .filter(|c| !c.is_alphabetic(char::X));\n\n    // Iterate through the\
    \ text and replace the characters that we removed\n    let mut new_text;\n   \
    \ loop {\n        if !allowed.is_empty() {\n            let c = allowed.pop();\n\
    \            new_text = new_text.chars().filter(|c| *c != c);\n        }\n   \
    \     else {\n            break;\n        }\n    }\n    new_text.to_owned()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no associated item named `Z` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpc8t8yc3k.rs:17:44\n   |\n17 |         .filter(|c|\
    \ !c.is_alphabetic(char::Z))\n   |                                           \
    \ ^ associated item not found in `char`\n\nerror[E0061]: this function takes 0\
    \ arguments but 1 argument was supplied\n   --> /tmp/tmpc8t8yc3k.rs:17:24\n  \
    \  |\n17  |         .filter(|c| !c.is_alphabetic(char::Z))\n    |            \
    \            ^^^^^^^^^^^^^ ------- supplied 1 argument\n    |                \
    \        |\n    |                        expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0599]: no associated item named `Y` found for\
    \ type `char` in the current scope\n  --> /tmp/tmpc8t8yc3k.rs:18:44\n   |\n18\
    \ |         .filter(|c| !c.is_alphabetic(char::Y))\n   |                     \
    \                       ^ associated item not found in `char`\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpc8t8yc3k.rs:18:24\n\
    \    |\n18  |         .filter(|c| !c.is_alphabetic(char::Y))\n    |          \
    \              ^^^^^^^^^^^^^ ------- supplied 1 argument\n    |              \
    \          |\n    |                        expected 0 arguments\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no associated item named `X`\
    \ found for type `char` in the current scope\n  --> /tmp/tmpc8t8yc3k.rs:19:44\n\
    \   |\n19 |         .filter(|c| !c.is_alphabetic(char::X));\n   |            \
    \                                ^ associated item not found in `char`\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpc8t8yc3k.rs:19:24\n\
    \    |\n19  |         .filter(|c| !c.is_alphabetic(char::X));\n    |         \
    \               ^^^^^^^^^^^^^ ------- supplied 1 argument\n    |             \
    \           |\n    |                        expected 0 arguments\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_empty`\
    \ found for struct `Filter` in the current scope\n  --> /tmp/tmpc8t8yc3k.rs:24:21\n\
    \   |\n24 |         if !allowed.is_empty() {\n   | "
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut text = text.to_string();\n    for ch in text.chars() {\n    \
    \    if let Some(i) = text\n            .char_indices()\n            .iter()\n\
    \            .find(|&(_, index)| index == 0 || text[index] != *ch)\n        {\n\
    \            text = &text[..i];\n        }\n    }\n    text\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `CharIndices` in\
    \ the current scope\n  --> /tmp/tmpq8ir3suo.rs:17:14\n   |\n17 |             .iter()\n\
    \   |              ^^^^ private field, not a method\n\nerror[E0614]: type `char`\
    \ cannot be dereferenced\n  --> /tmp/tmpq8ir3suo.rs:18:62\n   |\n18 |        \
    \     .find(|&(_, index)| index == 0 || text[index] != *ch)\n   |            \
    \                                                  ^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq8ir3suo.rs:20:20\n   |\n13 |     let mut text = text.to_string();\n\
    \   |                    ---------------- expected due to this value\n...\n20\
    \ |             text = &text[..i];\n   |                    ^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n \
    \  |\n20 |             text = (&text[..i]).to_string();\n   |                \
    \    +          +++++++++++++\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut to_return = text;\n    for ch in to_return {\n        if !is_vowel(ch)\
    \ {\n            to_return.replace(ch as usize, 1, \"\");\n        }\n    }\n\
    \    to_return\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpiyo7epew.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpiyo7epew.rs:14:15\n\
    \   |\n14 |     for ch in to_return {\n   |               ^^^^^^^^^ `String` is\
    \ not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0061]:\
    \ this function takes 2 arguments but 3 arguments were supplied\n   --> /tmp/tmpiyo7epew.rs:16:23\n\
    \    |\n16  |             to_return.replace(ch as usize, 1, \"\");\n    |    \
    \                   ^^^^^^^ -----------  -  -- supplied 3 arguments\n    |   \
    \                    |\n    |                       expected 2 arguments\n   \
    \ |\nnote: associated function defined here\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0277, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_helper(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmp5lpoxvz4.rs:13:5\n   |\n13 |     remove_vowels_helper(text)\n \
    \  |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut new_text = text;\n    for vowel in &Vowels {\n        new_text\
    \ = new_text.iter().filter(|c| *c != *vowel).collect();\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `Vowels` in this scope\n  --> /tmp/tmpm7d1q1sa.rs:14:19\n\
    \   |\n14 |     for vowel in &Vowels {\n   |                   ^^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `iter` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpm7d1q1sa.rs:15:29\n   |\n15 |         new_text\
    \ = new_text.iter().filter(|c| *c != *vowel).collect();\n   |                \
    \             ^^^^ method not found in `String`\n   |\nhelp: because of the in-memory\
    \ representation of `&str`, to obtain an `Iterator` over each of its codepoint\
    \ use method `chars`\n   |\n15 |         new_text = new_text.chars().filter(|c|\
    \ *c != *vowel).collect();\n   |                             ~~~~~\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut new_text\
    \ = text;\n    for ch in text.chars() {\n        if vowels.contains(ch) {\n  \
    \          new_text.push(ch);\n        }\n    }\n    new_text\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd53hidop.rs:16:28\n   |\n\
    16 |         if vowels.contains(ch) {\n   |                            ^^\n  \
    \ |                            |\n   |                            expected `&char`,\
    \ found `char`\n   |                            help: consider borrowing here:\
    \ `&ch`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::with_capacity(text.len());\n    let mut vowels\
    \ = HashSet::new();\n    for c in text {\n        if vowels.contains(&c) {\n \
    \           result.append(&mut c);\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpqmvqt7e9.rs:14:22\n   |\n14 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0277]:\
    \ `String` is not an iterator\n  --> /tmp/tmpqmvqt7e9.rs:15:14\n   |\n15 |   \
    \  for c in text {\n   |              ^^^^ `String` is not an iterator; try calling\
    \ `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `String`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `String`\n\nerror[E0599]: no method named `append` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpqmvqt7e9.rs:17:20\n\
    \   |\n17 |             result.append(&mut c);\n   |                    ^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels: Vec<&str> = vec![];\n    for ch in text.chars() {\n \
    \       if !vowels.contains(&*ch) {\n            vowels.push(ch);\n        }\n\
    \    }\n    String::from_utf8(\n        text.chars().skip_while(|&ch| vowels.contains(&*ch)).cloned().collect(),\n\
    \    )\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpa85cs5wa.rs:15:30\n\
    \   |\n15 |         if !vowels.contains(&*ch) {\n   |                        \
    \      ^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa85cs5wa.rs:16:25\n\
    \   |\n16 |             vowels.push(ch);\n   |                         ^^ expected\
    \ `&str`, found `char`\n\nerror[E0614]: type `char` cannot be dereferenced\n \
    \ --> /tmp/tmpa85cs5wa.rs:20:56\n   |\n20 |         text.chars().skip_while(|&ch|\
    \ vowels.contains(&*ch)).cloned().collect(),\n   |                           \
    \                             ^^^\n\nerror[E0271]: type mismatch resolving `<SkipWhile<Chars<'_>,\
    \ [closure@/tmp/tmpa85cs5wa.rs:20:33: 20:60]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmpa85cs5wa.rs:20:62\n     |\n20   |         text.chars().skip_while(|&ch|\
    \ vowels.contains(&*ch)).cloned().collect(),\n     |                         \
    \                                     ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<SkipWhile<Chars<'_>, [closure@/tmp/tmpa85cs5wa.rs:20:33:\
    \ 20:60]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpa85cs5wa.rs:20:71\n\
    \   |\n20 |            text.chars().skip_while(|&ch| vowels.contains(&*ch)).cloned().collect(),\n\
    \   |                                                                        \
    \  ^^^^^^^ method cannot be called on `Cloned<SkipWhile<Chars<'_>, [closure@/tmp/tmpa85cs5wa.rs:20:33:\
    \ 20:60]>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<SkipWhile<Chars<'_>, [closure@/tmp/tmpa85cs5wa.rs:20:33:\
    \ 20:60]> as Iterator>::Item = &_`\n           which is required by `Cloned<SkipWhile<Chars<'_>,\
    \ [closure@/tmp/tmpa85cs5wa.rs:20:33: 20:60]>>: Iterator`\n           `Cloned<SkipWhile<Chars<'_>,\
    \ [closure@/tmp/tmpa85cs5wa.rs:20:33: 20:60]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<SkipWhile<Chars<'_>, [closure@/tmp/tmpa85cs5wa.rs:2"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut text = text;\n    let mut vowels: Vec<&str> = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    for v in vowels.iter() {\n        text = text.to_owned().replace(v,\
    \ String::new());\n    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_8hxcry.rs:16:43\n   |\n\
    16 |         text = text.to_owned().replace(v, String::new());\n   |         \
    \                                  ^^^^^^^^^^^^^\n   |                       \
    \                    |\n   |                                           expected\
    \ `&str`, found struct `String`\n   |                                        \
    \   help: consider borrowing here: `&String::new()`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut s = text;\n    s.chars().filter_map(|c|\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            None\n      \
    \  } else {\n            Some(c)\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpzxjyv_gk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| *c != 'a' && *c != 'e' && *c != 'i'\
    \ && *c != 'o' && *c != 'u')\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpcq02gxku.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    String::from(text).lines().rev().filter_map(|line| line.chars().filter_map(|c|\
    \ {\n        match c {\n            c if c.is_uppercase() => Some(c),\n      \
    \      _ => None,\n        }\n    }).collect()).collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Option<_>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpp34sk8iz.rs:18:8\n     |\n18 \
    \  |     }).collect()).collect()\n     |        ^^^^^^^ value of type `Option<_>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Option<_>`\n     = help:\
    \ the trait `FromIterator<Option<A>>` is implemented for `Option<V>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c.is_alphabetic())\n        .filter(|c|\
    \ !c.is_lowercase())\n        .filter(|c| !c.is_uppercase())\n        .filter(|c|\
    \ !c.is_digit())\n        .filter(|c| !c.is_punct())\n        .filter(|c| !c.is_whitespace())\n\
    \        .filter(|c| !c.is_ascii_alphanumeric())\n        .collect::<Vec<_>>()\n\
    \        .into_iter()\n        .map(char::from)\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmptsfoiox6.rs:17:24\n    |\n17  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punct`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmptsfoiox6.rs:18:24\n\
    \   |\n18 |         .filter(|c| !c.is_punct())\n   |                        ^^^^^^^^\
    \ method not found in `&char`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_rec(text, \"\")\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_rec` in this scope\n\
    \  --> /tmp/tmpid7zkck1.rs:13:5\n   |\n13 |     remove_vowels_rec(text, \"\")\n\
    \   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .cloned()\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmpm3sghw61.rs:14:17:\
    \ 14:44]> as Iterator>::Item == &_`\n    --> /tmp/tmpm3sghw61.rs:15:10\n     |\n\
    15   |         .cloned()\n     |          ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<Filter<Chars<'_>, [closure@/tmp/tmpm3sghw61.rs:14:17:\
    \ 14:44]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpm3sghw61.rs:16:10\n\
    \   |\n16 |            .collect::<String>()\n   |             ^^^^^^^ method cannot\
    \ be called on `Cloned<Filter<Chars<'_>, [closure@/tmp/tmpm3sghw61.rs:14:17: 14:44]>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<Filter<Chars<'_>, [closure@/tmp/tmpm3sghw61.rs:14:17:\
    \ 14:44]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpm3sghw61.rs:14:17: 14:44]>>: Iterator`\n           `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpm3sghw61.rs:14:17: 14:44]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<Chars<'_>, [closure@/tmp/tmpm3sghw61.rs:14:17:\
    \ 14:44]>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter_map(|c| match c {\n            c if c ==\
    \ 'a' | c == 'e' | c == 'i' | c == 'o' | c == 'u' => Some(c),\n            _ =>\
    \ None,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp8vkvr0hj.rs:15:20\n\
    \   |\n15 |             c if c == 'a' | c == 'e' | c == 'i' | c == 'o' | c ==\
    \ 'u' => Some(c),\n   |                    ^^         ^^\n   |\nhelp: split the\
    \ comparison into two\n   |\n15 |             c if c == 'a' | c && 'a' | c ==\
    \ 'e' | c == 'i' | c == 'o' | c == 'u' => Some(c),\n   |                     \
    \          ++++++++++\n\nerror: comparison operators cannot be chained\n  -->\
    \ /tmp/tmp8vkvr0hj.rs:15:31\n   |\n15 |             c if c == 'a' | c == 'e' |\
    \ c == 'i' | c == 'o' | c == 'u' => Some(c),\n   |                           \
    \    ^^         ^^\n   |\nhelp: split the comparison into two\n   |\n15 |    \
    \         c if c == 'a' | c == 'e' | c && 'e' | c == 'i' | c == 'o' | c == 'u'\
    \ => Some(c),\n   |                                          ++++++++++\n\nerror:\
    \ comparison operators cannot be chained\n  --> /tmp/tmp8vkvr0hj.rs:15:42\n  \
    \ |\n15 |             c if c == 'a' | c == 'e' | c == 'i' | c == 'o' | c == 'u'\
    \ => Some(c),\n   |                                          ^^         ^^\n \
    \  |\nhelp: split the comparison into two\n   |\n15 |             c if c == 'a'\
    \ | c == 'e' | c == 'i' | c && 'i' | c == 'o' | c == 'u' => Some(c),\n   |   \
    \                                                  ++++++++++\n\nerror: comparison\
    \ operators cannot be chained\n  --> /tmp/tmp8vkvr0hj.rs:15:53\n   |\n15 |   \
    \          c if c == 'a' | c == 'e' | c == 'i' | c == 'o' | c == 'u' => Some(c),\n\
    \   |                                                     ^^         ^^\n   |\n\
    help: split the comparison into two\n   |\n15 |             c if c == 'a' | c\
    \ == 'e' | c == 'i' | c == 'o' | c && 'o' | c == 'u' => Some(c),\n   |       \
    \                                                         ++++++++++\n\nerror[E0369]:\
    \ no implementation for `char | char`\n  --> /tmp/tmp8vkvr0hj.rs:15:27\n   |\n\
    15 |             c if c == 'a' | c == 'e' | c == 'i' | c == 'o' | c == 'u' =>\
    \ Some(c),\n   |                       --- ^ - char\n   |                    \
    \   |\n   |                       char\n\nerror[E0369]: no implementation for\
    \ `char | "
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| *c != 'a' && *c != 'e' && *c != 'i'\
    \ && *c != 'o' && *c != 'u')\n        .collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpxqsjg9hw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    match text {\n        s @ \"\" | s @ \" \" => s,\n        _ => {\n  \
    \          let mut s = text;\n            for (i, c) in s.chars().enumerate()\
    \ {\n                if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ {\n                    s.insert(i, c);\n                }\n            }\n \
    \           s\n        }\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5_my0q_w.rs:14:13\n   |\n\
    13 |     match text {\n   |           ---- this expression has type `String`\n\
    14 |         s @ \"\" | s @ \" \" => s,\n   |             ^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5_my0q_w.rs:14:22\n\
    \   |\n13 |     match text {\n   |           ---- this expression has type `String`\n\
    14 |         s @ \"\" | s @ \" \" => s,\n   |                      ^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        String::from(\"\")\n    }\n\n    // TODO(turnip):\
    \ Replace with std::iter::filter_map once stable Rust is updated.\n    let mut\
    \ vowels = String::new();\n    for c in text.chars() {\n        match c {\n  \
    \          'a' => vowels.push('e'),\n            'e' => vowels.push('i'),\n  \
    \          'i' => vowels.push('o'),\n            'o' => vowels.push('u'),\n  \
    \          'u' => vowels.push('a'),\n            _ => (),\n        }\n    }\n\n\
    \    String::from(&vowels[..])\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpksng4wuz.rs:14:9\n   |\n\
    13 | /     if text.is_empty() {\n14 | |         String::from(\"\")\n   | |   \
    \      ^^^^^^^^^^^^^^^^ expected `()`, found struct `String`\n15 | |     }\n \
    \  | |_____- expected this to be `()`\n   |\nhelp: consider using a semicolon\
    \ here\n   |\n14 |         String::from(\"\");\n   |                         +\n\
    help: consider using a semicolon here\n   |\n15 |     };\n   |      +\nhelp: you\
    \ might have meant to return this value\n   |\n14 |         return String::from(\"\
    \");\n   |         ++++++                 +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut s = text;\n    remove_vowels(&mut s);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4m9b1kfd.rs:14:19\n   |\n\
    14 |     remove_vowels(&mut s);\n   |                   ^^^^^^ expected struct\
    \ `String`, found `&mut String`\n   |\nhelp: consider removing the borrow\n  \
    \ |\n14 -     remove_vowels(&mut s);\n14 +     remove_vowels(s);\n   | \n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| c.is_uppercase()).map(|c| c).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpkgukwi_q.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    match text {\n        &String::new(_) => text,\n        _ => {\n    \
    \        let mut letters = vec![];\n            let mut vowels = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n            let mut last = 0;\n            for ch\
    \ in text.chars() {\n                let mut current = ch;\n                while\
    \ vowels.contains(&current) {\n                    current = *ch;\n          \
    \      }\n                letters.push(current);\n                if last == ch\
    \ {\n                    break;\n                }\n                last++;\n\
    \            }\n            String::from_utf8(letters).unwrap()\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpw1sh20su.rs:28:21\n\
    \   |\n28 |                 last++;\n   |                     ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n28 |                 { let tmp\
    \ = last; last += 1; tmp };\n   |                 +++++++++++     ~~~~~~~~~~~~~~~~~~\n\
    28 -                 last++;\n28 +                 last += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw1sh20su.rs:14:9\n   |\n13 |     match text\
    \ {\n   |           ---- this expression has type `String`\n14 |         &String::new(_)\
    \ => text,\n   |         ^^^^^^^^^^^^^^^ expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::new`\n  --> /tmp/tmpw1sh20su.rs:14:10\n   |\n14 |         &String::new(_)\
    \ => text,\n   |          ^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n\
    \   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw1sh20su.rs:21:39\n   |\n21 |\
    \                 while vowels.contains(&current) {\n   |                    \
    \                   ^^^^^^^^ expected `&str`, found `char`\n   |\n   = note: expected\
    \ reference `&&str`\n              found reference `&char`\n\nerror[E0614]: type\
    \ `char` cannot be dereferenced\n  --> /tmp/tmpw1sh20su.rs:22:31\n   |\n22 | \
    \                    current = *ch;\n   |                               ^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpw1sh20su.rs:25:28\n   |\n25 |  \
    \               if last == ch {\n   |                            ^^ expected integer,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw1sh20su.rs:30:31\n\
    \   |\n30 |             String::from_utf8(letters).unwrap()\n   |            \
    \                   ^^^^^^^ expected `u8`, found `char`\n   |\n   = note: expected\
    \ struct `Vec<u8>`\n              found struct `Vec<char>`\n\nerror[E0277]: can't\
    \ compare `{integer}` with `char`\n  --> /tmp/tmpw1sh20su.rs:25:25\n   |\n25 |\
    \          "
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.to_lowercase().chars().filter_map(|c|\n        if c.is_ascii_alphanumeric()\
    \ || c.to_ascii_lowercase()\n            .chars().any(|l| l.is_ascii_alphanumeric())\
    \ {\n            Some(c)\n        } else {\n            None\n        }\n    ).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_1m2aoxj.rs:15:14\n   |\n15 |             .chars().any(|l|\
    \ l.is_ascii_alphanumeric()) {\n   |              ^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut string = text.to_owned();\n    string.remove('a');\n    string.remove('e');\n\
    \    string.remove('i');\n    string.remove('o');\n    string.remove('u');\n \
    \   string\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjvfep50t.rs:14:19\n   |\n\
    14 |     string.remove('a');\n   |                   ^^^ expected `usize`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjvfep50t.rs:15:19\n\
    \   |\n15 |     string.remove('e');\n   |                   ^^^ expected `usize`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjvfep50t.rs:16:19\n\
    \   |\n16 |     string.remove('i');\n   |                   ^^^ expected `usize`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjvfep50t.rs:17:19\n\
    \   |\n17 |     string.remove('o');\n   |                   ^^^ expected `usize`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjvfep50t.rs:18:19\n\
    \   |\n18 |     string.remove('u');\n   |                   ^^^ expected `usize`,\
    \ found `char`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    match text {\n        \"\" => text,\n        str => str\n           \
    \ .chars()\n            .filter(|c| !c.is_ascii_lowercase)\n            .filter(|c|\
    \ !c.is_ascii_uppercase)\n            .collect::<String>()\n            .join(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2g_btmc8.rs:14:9\n   |\n\
    13 |     match text {\n   |           ---- this expression has type `String`\n\
    14 |         \"\" => text,\n   |         ^^ expected struct `String`, found `&str`\n\
    \nerror[E0615]: attempted to take value of method `is_ascii_lowercase` on type\
    \ `&char`\n  --> /tmp/tmp2g_btmc8.rs:17:28\n   |\n17 |             .filter(|c|\
    \ !c.is_ascii_lowercase)\n   |                            ^^^^^^^^^^^^^^^^^^ method,\
    \ not a field\n   |\nhelp: use parentheses to call the method\n   |\n17 |    \
    \         .filter(|c| !c.is_ascii_lowercase())\n   |                         \
    \                     ++\n\nerror[E0615]: attempted to take value of method `is_ascii_uppercase`\
    \ on type `&char`\n  --> /tmp/tmp2g_btmc8.rs:18:28\n   |\n18 |             .filter(|c|\
    \ !c.is_ascii_uppercase)\n   |                            ^^^^^^^^^^^^^^^^^^ method,\
    \ not a field\n   |\nhelp: use parentheses to call the method\n   |\n18 |    \
    \         .filter(|c| !c.is_ascii_uppercase())\n   |                         \
    \                     ++\n\nerror[E0599]: no method named `join` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp2g_btmc8.rs:20:14\n   |\n20 | \
    \            .join(),\n   |              ^^^^ method not found in `String`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0615.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|&c| !c.is_ascii_lowercase() && !c.is_ascii_uppercase()\
    \ &&\n            (c.is_ascii_letter() || c.is_ascii_digit()))\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for type `char` in\
    \ the current scope\n  --> /tmp/tmpg4hw2cvs.rs:15:16\n   |\n15 |             (c.is_ascii_letter()\
    \ || c.is_ascii_digit()))\n   |                ^^^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `is_ascii`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        return text;\n    }\n\n    let mut letters\
    \ = text.chars();\n    let mut out: String = String::new();\n    let mut vowels\
    \ = vec!['a'..'z'];\n\n    while let Some(pos) = vowels.find(|x| x == letters.next().unwrap())\
    \ {\n        out.append(&mut letters.next());\n    }\n\n    out\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `find` found for struct `Vec<std::ops::Range<char>>`\
    \ in the current scope\n  --> /tmp/tmp_t5c_0ic.rs:21:34\n   |\n21 |     while\
    \ let Some(pos) = vowels.find(|x| x == letters.next().unwrap()) {\n   |      \
    \                            ^^^^ method not found in `Vec<std::ops::Range<char>>`\n\
    \nerror[E0599]: no method named `append` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp_t5c_0ic.rs:22:13\n   |\n22 |         out.append(&mut letters.next());\n\
    \   |             ^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_helper(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmp5lpoxvz4.rs:13:5\n   |\n13 |     remove_vowels_helper(text)\n \
    \  |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c.is_alphabetic())\n        .filter(|c|\
    \ !c.is_uppercase())\n        .filter(|c| !c.is_lowercase())\n        .filter(|c|\
    \ !c.is_digit())\n        .map(|c| c.to_uppercase())\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpq00n9a_6.rs:17:24\n    |\n17  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: a value of type `String` cannot\
    \ be built from an iterator over elements of type `ToUppercase`\n    --> /tmp/tmpq00n9a_6.rs:19:10\n\
    \     |\n19   |         .collect()\n     |          ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=ToUppercase>`\n     |\n     =\
    \ help: the trait `FromIterator<ToUppercase>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // TODO: Remove vowels with regex\n    if text.chars().any(|c| c.is_uppercase())\
    \ {\n        text\n    } else {\n        text\n            .chars()\n        \
    \    .filter(|c| !c.is_uppercase())\n            .collect::<String>()\n      \
    \      .join()\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpqmmt1sxx.rs:21:14\n   |\n21 |             .join()\n   |\
    \              ^^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut s = text;\n    for c in text.chars() {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n            || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            *s = String::new();\n\
    \        }\n        s.push(c);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptvlj7i4.rs:17:18\n   |\n\
    17 |             *s = String::new();\n   |             --   ^^^^^^^^^^^^^ expected\
    \ `str`, found struct `String`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n  --> /tmp/tmpptvlj7i4.rs:17:13\n\
    \   |\n17 |             *s = String::new();\n   |             ^^ doesn't have\
    \ a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `str`\n   = note: the left-hand-side of an assignment must have a statically\
    \ known size\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut buffer = String::from(\"\");\n    for ch in text {\n        if\
    \ !ch.is_lowercase() || ch.is_whitespace() {\n            buffer.push_str(&ch.to_lowercase());\n\
    \        } else {\n            let mut pos = 0;\n            while pos < buffer.len()\
    \ && buffer[pos] != ch {\n                pos = pos + 1;\n            }\n    \
    \        buffer.push_str(&buffer[..pos]);\n        }\n    }\n    buffer\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpkoaby_bf.rs:14:15\n\
    \   |\n14 |     for ch in text {\n   |               ^^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `String`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpkoaby_bf.rs:19:41\n   |\n19 |  \
    \           while pos < buffer.len() && buffer[pos] != ch {\n   |            \
    \                             ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // remove all vowels and all non-letters characters\n    let regex =\
    \ Regex::new(r\"[aeiouAEIOU]+\").unwrap();\n    match regex.replace_all(text,\
    \ \"_\").unwrap() {\n        Ok(text) => text,\n        Err(_) => text,\n    }\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n  -->\
    \ /tmp/tmpjxm5kdq0.rs:14:17\n   |\n14 |     let regex = Regex::new(r\"[aeiouAEIOU]+\"\
    ).unwrap();\n   |                 ^^^^^ use of undeclared type `Regex`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::from(\"\");\n    for char in text.chars() {\n\
    \        if let Some(vowel) = vowels().find(|v| char == v) {\n            result\
    \ += char;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `vowels` in this scope\n  --> /tmp/tmp0sngwqvt.rs:15:30\n\
    \   |\n15 |         if let Some(vowel) = vowels().find(|v| char == v) {\n   |\
    \                              ^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0sngwqvt.rs:16:23\n   |\n16 |             result\
    \ += char;\n   |                       ^^^^ expected `&str`, found `char`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut builder = StringBuilder::new();\n    let mut vowels = Set::new(\"\
    AEIOUaeiou\".to_lowercase());\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            builder.push(c);\n        }\n    }\n    builder.into_boxed_str()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `StringBuilder`\n\
    \  --> /tmp/tmp03fmv089.rs:13:23\n   |\n13 |     let mut builder = StringBuilder::new();\n\
    \   |                       ^^^^^^^^^^^^^ use of undeclared type `StringBuilder`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp03fmv089.rs:14:22\n\
    \   |\n14 |     let mut vowels = Set::new(\"AEIOUaeiou\".to_lowercase());\n  \
    \ |                      ^^^ use of undeclared type `Set`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = vec!['a'..'z', '\xC0'..'\xD6', '\xC4'..'\xDF', '\xCC\
    '..'\xCF', '\xD2'..'\xD6', '\xD5'..'\xDC', '\xD9'..'\xDB', '\xD8'..'\xDE', '\xE6\
    '..'\xE7', '\xF5'..'\xF8', '\xD9'..'\xDB', '\xDC'..'\xDF', '\xE4'..'\xE5', '\xE8\
    '..'\xE9', '\xF8'..'\xE5', '\xC4'..'\xD6', '\xF6'..'\xFC', '\xD6'..'\xDF', '\xFF\
    '..'\xFF', '\xE2'..'\xE4', '\xEA'..'\xEB', '\xEE'..'\xEF', '\xF4'..'\xF6', '\xF9\
    '..'\xFA', '\xFB'..'\xFC', '\xDC'..'\xDF', '\xD0'..'\xF0', '\xDE'..'\xFE', '\xD0\
    '..'\xF0', '\xE2'..'\xE4', '\xE9'..'\xE8', '\xE4'..'\xE5', '\xEA'..'\xEB', '\xEB\
    '..'\xEA', '\xEE'..'\xEF', '\xF4'..'\xF6', '\xF4'..'\xF6', '\xF9'..'\xFA', '\xFC\
    '..'\xFC', '\xF4'..'\xF6', '\xF4'..'\xF6', '\xE2'..'\xE4', '\xEA'..'\xEB', '\xEE\
    '..'\xEF', '\xF4'..'\xF6', '\xF9'..'\xFA', '\xFC'..'\xFC', '\xE2'..'\xE4', '\xEA\
    '..'\xEB', '\xEE'..'\xEF', '\xF4'..'\xF6', '\xE2'..'\xE4', '\xEA'..'\xEB', '\xEE\
    '..'\xEF', '\xF4'..'\xF6', '\xE2'..'\xE4', '\xEA'..'\xEB', '\xEE'..'\xEF', '\xF4\
    '..'\xF6', '\xE2'..'\xE4', '\xEA'..'\xEB', '\xEE'..'\xEF', '\xF4'..'\xF6', '\xE2\
    '..'\xE4', '\xEA'..'\xEB', '\xEE'..'\xEF', '\xF4'..'\xF6', '\xE2'..'\xE4', '\xEA\
    '..'\xEB', '\xEE'..'\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpygzjmf3r.rs:13:722\n\
    \   |\n13 | ... '\xE2'..'\xE4', '\xEA'..'\xEB', '\xEE'..'\xEF', '\xF4'..'\xF6\
    ', '\xE2'..'\xE4', '\xEA'..'\xEB', '\xEE'...\n   |                           \
    \                                           ^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| !Vowels.contains(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `Vowels` in this scope\n  --> /tmp/tmpjbvmiyfx.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !Vowels.contains(c)).collect()\n   | \
    \                             ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text == \"\" {\n        return text;\n    }\n    if let Some(vowels)\
    \ = text.chars().filter(|c| c.is_ascii_lowercase()).map(|c| c).collect::<HashSet<String>>()\
    \ {\n        text.replace(text.chars().filter(|c| !vowels.contains(c)).cloned().collect::<String>(),\
    \ \"\").to_string()\n    } else {\n        text\n    }\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp56hrz_ut.rs:16:96\n\
    \   |\n16 |     if let Some(vowels) = text.chars().filter(|c| c.is_ascii_lowercase()).map(|c|\
    \ c).collect::<HashSet<String>>() {\n   |                                    \
    \                                                            ^^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmp56hrz_ut.rs:17:42:\
    \ 17:65]> as Iterator>::Item == &_`\n    --> /tmp/tmp56hrz_ut.rs:17:67\n     |\n\
    17   |         text.replace(text.chars().filter(|c| !vowels.contains(c)).cloned().collect::<String>(),\
    \ \"\").to_string()\n     |                                                  \
    \                 ^^^^^^ expected reference, found `char`\n     |\n     = note:\
    \ expected reference `&_`\n                     found type `char`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp56hrz_ut.rs:17:42: 17:65]>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmp56hrz_ut.rs:17:76\n   |\n\
    17 |            text.replace(text.chars().filter(|c| !vowels.contains(c)).cloned().collect::<String>(),\
    \ \"\").to_string()\n   |                                                    \
    \                           ^^^^^^^ method cannot be called on `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp56hrz_ut.rs:17:42: 17:65]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp56hrz_ut.rs:17:42: 17:65]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp56hrz_ut.rs:17:42:\
    \ 17:65]>>: Iterator`\n           `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp56hrz_ut.rs:17:42:\
    \ 17:65]>>: Iterator`\n           which is required by `&mut Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp56hrz_ut.rs:17:42: 17:65]>>: Iterator`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors ha"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.len() > 2 && text[1] == 'a' && text[2] == 'a' && text[3] == 'a'\
    \ {\n        String::from(text[0..2].to_owned())\n    } else {\n        text\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmp6oth7f7d.rs:13:26\n   |\n13 |     if text.len() > 2 && text[1] == 'a'\
    \ && text[2] == 'a' && text[3] == 'a' {\n   |                          ^^^^^^^\
    \ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmp6oth7f7d.rs:13:44\n   |\n13 |     if text.len() > 2 && text[1]\
    \ == 'a' && text[2] == 'a' && text[3] == 'a' {\n   |                         \
    \                   ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n\
    \   = help: the trait `Index<{integer}>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmp6oth7f7d.rs:13:62\n   |\n13 |     if text.len() > 2 && text[1]\
    \ == 'a' && text[2] == 'a' && text[3] == 'a' {\n   |                         \
    \                                     ^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \      "
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c !='a' && c !='e' && c !='i' && c\
    \ !='o' && c !='u')\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpbtke__d6.rs:14:23\n\
    \   |\n14 |         .filter(|c| c !='a' && c !='e' && c !='i' && c !='o' && c\
    \ !='u')\n   |                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpbtke__d6.rs:14:34\n   |\n14 |   \
    \      .filter(|c| c !='a' && c !='e' && c !='i' && c !='o' && c !='u')\n   |\
    \                                  ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpbtke__d6.rs:14:45\n   |\n14 |   \
    \      .filter(|c| c !='a' && c !='e' && c !='i' && c !='o' && c !='u')\n   |\
    \                                             ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpbtke__d6.rs:14:56\n   |\n14\
    \ |         .filter(|c| c !='a' && c !='e' && c !='i' && c !='o' && c !='u')\n\
    \   |                                                        ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpbtke__d6.rs:14:67\n\
    \   |\n14 |         .filter(|c| c !='a' && c !='e' && c !='i' && c !='o' && c\
    \ !='u')\n   |                                                               \
    \    ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.len() == 0 {\n        String::new()\n    } else {\n        let\
    \ mut result = String::new();\n        let mut current: Vec<&str> = text.chars().collect();\n\
    \        for &c in current {\n            if c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u' && c != 'y' {\n                result.push(c);\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ result\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpn0btirxf.rs:17:51\n     |\n17\
    \   |         let mut current: Vec<&str> = text.chars().collect();\n     |   \
    \                                                ^^^^^^^ value of type `Vec<&str>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n  --> /tmp/tmpn0btirxf.rs:18:14\n   |\n18 |  \
    \       for &c in current {\n   |              ^ doesn't have a size known at\
    \ compile-time\n   |\n   = help: the trait `Sized` is not implemented for `str`\n\
    \   = note: all local variables must have a statically known size\n   = help:\
    \ unsized locals are gated as an unstable feature\n\nerror[E0277]: can't compare\
    \ `str` with `char`\n  --> /tmp/tmpn0btirxf.rs:19:18\n   |\n19 |             if\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n   |\
    \                  ^^ no implementation for `str == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `str`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n\
    \             <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: can't compare `str` with `char`\n  -->\
    \ /tmp/tmpn0btirxf.rs:19:30\n   |\n19 |             if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n   |                       \
    \       ^^ no implementation for `str == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `str`\n   = help: th"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|&x| !vowels.contains(x))\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmp439lr2z2.rs:14:23\n\
    \   |\n14 |         .filter(|&x| !vowels.contains(x))\n   |                  \
    \     ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpxi8_zuu9.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = HashSet::new();\n    vowels.insert(char::from('a'));\n\
    \    vowels.insert(char::from('e'));\n    vowels.insert(char::from('i'));\n  \
    \  vowels.insert(char::from('o'));\n    vowels.insert(char::from('u'));\n\n  \
    \  if let Some(ref mut c) = text.as_bytes().last() {\n        while !vowels.contains(c)\
    \ {\n            if let Some(pos) = text.find(&c, text.len() - 1) {\n        \
    \        text = &text[..pos];\n            } else {\n                break;\n\
    \            }\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp0fuyugew.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0061]:\
    \ this function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmp0fuyugew.rs:22:37\n\
    \     |\n22   |             if let Some(pos) = text.find(&c, text.len() - 1) {\n\
    \     |                                     ^^^^ --  -------------- supplied 2\
    \ arguments\n     |                                     |\n     |            \
    \                         expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0fuyugew.rs:23:24\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \       ------ expected due to this parameter type\n...\n23 |                \
    \ text = &text[..pos];\n   |                        ^^^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\nhelp: try using a conversion method\n   |\n23\
    \ |                 text = (&text[..pos]).to_string();\n   |                 \
    \       +            +++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut chars: Vec<Char> = text.chars().collect();\n\n    for c in chars\
    \ {\n        match c {\n            c if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' => {\n                chars.remove(chars.iter().position(|x|\
    \ x == c));\n            }\n        }\n    }\n    String::from_utf8(chars).unwrap()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `Char` in this scope\n  --> /tmp/tmprtjhyzhe.rs:13:24\n\
    \   |\n13 |     let mut chars: Vec<Char> = text.chars().collect();\n   |     \
    \                   ^^^^\n   |\nhelp: a builtin type with a similar name exists\n\
    \   |\n13 |     let mut chars: Vec<char> = text.chars().collect();\n   |     \
    \                   ~~~~\nhelp: you might be missing a type parameter\n   |\n\
    12 | fn remove_vowels<Char>(text: String) -> String {\n   |                 ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| c.is_uppercase()).filter(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp77hadimh.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::with_capacity(text.len());\n    for ch in text.chars()\
    \ {\n        if !is_vowel(ch) {\n            result.push_str(&ch.to_string());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpayb40bv5.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        String::from(\"\")\n    } else {\n    \
    \    let mut buf = [0; text.len()];\n        for (i, c) in text.chars().enumerate()\
    \ {\n            if !is_vowel(c) {\n                buf[i] = c;\n            }\n\
    \        }\n        String::from_utf8(buf).unwrap()\n    }\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp6od5swxd.rs:16:27\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                  ---- this would need to be a `const`\n...\n16 |   \
    \      let mut buf = [0; text.len()];\n   |                           ^^^^\n\n\
    error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp6od5swxd.rs:18:17\n\
    \   |\n18 |             if !is_vowel(c) {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0435.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !vowels.contains(c))\n        .collect::<String>(\"\
    \")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmp9krd_gfh.rs:14:22\n\
    \   |\n14 |         .filter(|c| !vowels.contains(c))\n   |                   \
    \   ^^^^^^ not found in this scope\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmp9krd_gfh.rs:15:10\n     |\n15 \
    \  |         .collect::<String>(\"\")\n     |          ^^^^^^^           -- supplied\
    \ 1 argument\n     |          |\n     |          expected 0 arguments\n     |\n\
    note: associated function defined here\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    fn remove_vowels(text: &String) -> &String {\n        let mut new_text\
    \ = String::new();\n        for ch in text.chars().filter(|c| c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u') {\n            new_text.push(ch);\n\
    \        }\n        new_text\n    }\n    remove_vowels(&text)\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph_ri5oto.rs:20:5\n   |\n\
    12 | fn remove_vowels(text: String) -> String {\n   |                        \
    \           ------ expected `String` because of return type\n...\n20 |     remove_vowels(&text)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |     |\n   |     expected struct `String`, found `&String`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmph_ri5oto.rs:15:45\n   |\n15\
    \ |         for ch in text.chars().filter(|c| c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n   |                                           \
    \  ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmph_ri5oto.rs:15:57\n\
    \   |\n15 |         for ch in text.chars().filter(|c| c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n   |                                  \
    \                       ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmph_ri5oto.rs:15:69\n   |\n15 |         for ch in text.chars().filter(|c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n   |          \
    \                                                           ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmph_ri5oto.rs:15:81\n\
    \   |\n15 |         for ch in text.chars().filter(|c| c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n   |                                  \
    \                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemente"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut counter = 0;\n    for char in text {\n        if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            counter\
    \ += 1;\n        }\n    }\n    if counter == 0 {\n        text\n    } else {\n\
    \        text.to_string().chars()\n            .filter(|c| !c.is_vowel())\n  \
    \          .collect::<String>()\n            .join(\"\")\n    }\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpolpswc21.rs:14:17\n\
    \   |\n14 |     for char in text {\n   |                 ^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait\
    \ `Iterator` is not implemented for `String`\n   = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no\
    \ method named `is_vowel` found for reference `&char` in the current scope\n \
    \ --> /tmp/tmpolpswc21.rs:23:28\n   |\n23 |             .filter(|c| !c.is_vowel())\n\
    \   |                            ^^^^^^^^ method not found in `&char`\n\nerror[E0599]:\
    \ no method named `join` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpolpswc21.rs:25:14\n   |\n25 |             .join(\"\")\n   |        \
    \      ^^^^ method not found in `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // Split string by vowel separator\n    let words: Vec<String> = text\n\
    \        .split_by_chars(|c: char| vowel_separator(c))\n        .collect();\n\n\
    \    // Remove vowels from words\n    let mut result = String::new();\n    for\
    \ w in words {\n        result.push_str(&w.strip_ascii_lowercase());\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `vowel_separator` in this scope\n  -->\
    \ /tmp/tmpsabu3ru3.rs:15:35\n   |\n15 |         .split_by_chars(|c: char| vowel_separator(c))\n\
    \   |                                   ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `split_by_chars` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpsabu3ru3.rs:15:10\n   |\n15 |         .split_by_chars(|c:\
    \ char| vowel_separator(c))\n   |          ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `split_at`\n\nerror[E0599]: no method named `strip_ascii_lowercase`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpsabu3ru3.rs:21:28\n\
    \   |\n21 |         result.push_str(&w.strip_ascii_lowercase());\n   |       \
    \                     ^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_ascii_lowercase`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c.is_ascii_lowercase())\n        .filter(|c|\
    \ !vowels.contains(c))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpbmnqpa_c.rs:15:22\n\
    \   |\n15 |         .filter(|c| !vowels.contains(c))\n   |                   \
    \   ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.len() == 0 {\n        String::from(\"\");\n    } else {\n   \
    \     text.chars().filter(|c| !is_vowel(c)).collect()\n    }\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpmxjdmeoq.rs:16:34\n\
    \   |\n16 |         text.chars().filter(|c| !is_vowel(c)).collect()\n   |    \
    \                              ^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmxjdmeoq.rs:13:24\n   |\n13 |       if text.len()\
    \ == 0 {\n   |  ________________________^\n14 | |         String::from(\"\");\n\
    \   | |                         - help: remove this semicolon\n15 | |     } else\
    \ {\n   | |_____^ expected struct `String`, found `()`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpjs88ije4.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // We use 'hashmap' to keep track of vowels and then filter out vowels.\n\
    \    let mut hashmap: HashMap<u8, usize> = HashMap::new();\n    for ch in text.chars()\
    \ {\n        if hashmap.contains(&ch) {\n            hashmap.insert(ch, hashmap.get(&ch)\
    \ + 1);\n        } else {\n            hashmap.insert(ch, 1);\n        }\n   \
    \ }\n    let mut hashmap_new = hashmap;\n    hashmap_new.retain(|&(&key, count)|\
    \ count != 0);\n    let mut string = String::new();\n    for vowel in hashmap_new.keys()\
    \ {\n        string.push(vowel);\n    }\n    string\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmp2iiideo1.rs:14:22\n\
    \   |\n14 |     let mut hashmap: HashMap<u8, usize> = HashMap::new();\n   |  \
    \                    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmp2iiideo1.rs:14:43\n\
    \   |\n14 |     let mut hashmap: HashMap<u8, usize> = HashMap::new();\n   |  \
    \                                         ^^^^^^^ not found in this scope\n  \
    \ |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = String::new();\n    vowels.push_str(\"aeiou\".to_lowercase());\n\
    \    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\"\
    .to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"\
    aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n   \
    \ vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n\
    \    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\"\
    .to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"\
    aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n   \
    \ vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n\
    \    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\"\
    .to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"\
    aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n   \
    \ vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n\
    \    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\"\
    .to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"\
    aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n   \
    \ vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n\
    \    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\"\
    .to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"\
    aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n   \
    \ vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n\
    \    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\"\
    .to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n    vowels.push_str(\"\
    aeiou\".to_lowercase());\n    vowels.push_str(\"aeiou\".to_lowercase());\n   \
    \ vowels.push_str(\"aeiou\".to_lowercase\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp8a3g0us4.rs:55:20\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n55\
    \ |     vowels.push_str(\"aeiou\".to_lowercase\n   |                    ^ unclosed\
    \ delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8a3g0us4.rs:14:21\n   |\n14 |     vowels.push_str(\"aeiou\"\
    .to_lowercase());\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n   |     \
    \                |\n   |                     expected `&str`, found struct `String`\n\
    \   |                     help: consider borrowing here: `&\"aeiou\".to_lowercase()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8a3g0us4.rs:15:21\n   |\n15 |\
    \     vowels.push_str(\"aeiou\".to_lowercase());\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&str`, found struct\
    \ `String`\n   |                     help: consider borrowing here: `&\"aeiou\"\
    .to_lowercase()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8a3g0us4.rs:16:21\n\
    \   |\n16 |     vowels.push_str(\"aeiou\".to_lowercase());\n   |             \
    \        ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&str`, found struct `String`\n   |                     help:\
    \ consider borrowing here: `&\"aeiou\".to_lowercase()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8a3g0us4.rs:17:21\n   |\n17 |     vowels.push_str(\"aeiou\"\
    .to_lowercase());\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n   |     \
    \                |\n   |                     expected `&str`, found struct `String`\n\
    \   |                     help: consider borrowing here: `&\"aeiou\".to_lowercase()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8a3g0us4.rs:18:21\n   |\n18 |\
    \     vowels.push_str(\"aeiou\".to_lowercase());\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&str`, found struct\
    \ `String`\n   |                     help: consider borrowing here: `&\"aeiou\"\
    .to_lowerca"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjqp49o1o.rs:14:23\n\
    \   |\n14 |         .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n   |                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpjqp49o1o.rs:14:35\n   |\n14 |   \
    \      .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \   |                                   ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpjqp49o1o.rs:14:47\n   |\n14 |   \
    \      .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \   |                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjqp49o1o.rs:14:59\n   |\n14\
    \ |         .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \   |                                                           ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjqp49o1o.rs:14:71\n\
    \   |\n14 |         .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n   |                                                            \
    \           ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror: aborting due to 5 previous errors\n\nFor\
    \ more information about this"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut new_text = text;\n    let mut vowels = Set::new();\n    vowels.insert('a',\
    \ 'z');\n    vowels.insert('A', 'Z');\n    vowels.insert('0', '9');\n    vowels.insert('!',\
    \ '~');\n\n    for (i, ch) in new_text.chars().enumerate() {\n        if vowels.contains(ch)\
    \ {\n            new_text = new_text.split_off(i);\n            break;\n     \
    \   }\n    }\n\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp92ocbxct.rs:14:22\n\
    \   |\n14 |     let mut vowels = Set::new();\n   |                      ^^^ use\
    \ of undeclared type `Set`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut chars = text.chars().collect::<Vec<_>>();\n    let mut vowels\
    \ = vec!['A', 'B', 'Z', 'a', 'b', 'z'];\n    vowels.sort();\n    chars.retain(|c|\
    \ !vowels.contains(c));\n    String::from_utf8_lossy(&chars)\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp28f1na77.rs:17:29\n   |\n\
    17 |     String::from_utf8_lossy(&chars)\n   |                             ^^^^^^\
    \ expected slice `[u8]`, found struct `Vec`\n   |\n   = note: expected reference\
    \ `&[u8]`\n              found reference `&Vec<char>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp28f1na77.rs:17:5\n   |\n12 | fn remove_vowels(text: String)\
    \ -> String {\n   |                                   ------ expected `String`\
    \ because of return type\n...\n17 |     String::from_utf8_lossy(&chars)\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |     |\n   |     expected struct `String`, found enum `Cow`\n   |\n   = note:\
    \ expected struct `String`\n                found enum `Cow<'_, str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut newText = String::from(\"\");\n    for ch in text.chars() {\n\
    \        match ch {\n            'a' => newText.push('a'),\n            'e' =>\
    \ newText.push('e'),\n            'i' => newText.push('i'),\n            'o' =>\
    \ newText.push('o'),\n            'u' => newText.push('u'),\n            'A' =>\
    \ newText.push('A'),\n            'E' => newText.push('E'),\n            'I' =>\
    \ newText.push('I'),\n            'O' => newText.push('O'),\n            'U' =>\
    \ newText.push('U'),\n            _ => newText.push(ch),\n        }\n    }\n \
    \   newText\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp3mexux4e.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| !VOWELS.contains(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpfr2qu66p.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !VOWELS.contains(c)).collect()\n   | \
    \                             ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        String::from(\"\")\n    } else {\n    \
    \    let mut builder = String::new();\n\n        for c in text {\n           \
    \ if !is_vowel(c) {\n                builder.push(c);\n            } else {\n\
    \                break;\n            }\n        }\n\n        builder\n    }\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpw7ngefk0.rs:19:17\n\
    \   |\n19 |             if !is_vowel(c) {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpw7ngefk0.rs:18:18\n\
    \   |\n18 |         for c in text {\n   |                  ^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait\
    \ `Iterator` is not implemented for `String`\n   = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpbtqe9bzo.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n    let\
    \ mut text_without_vowels = text;\n    let mut found_vowel = false;\n    while\
    \ text_without_vowels.chars().any(|c| vowels.contains(&c)) {\n        vowels.remove(&vowels.iter().position(|&x|\
    \ x == &c).unwrap());\n        found_vowel = true;\n    }\n    if found_vowel\
    \ {\n        text_without_vowels.retain(|c| vowels.contains(&c));\n    }\n   \
    \ text_without_vowels\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp8ohv947u.rs:18:58\n\
    \   |\n18 |         vowels.remove(&vowels.iter().position(|&x| x == &c).unwrap());\n\
    \   |                                                          ^ help: a local\
    \ variable with a similar name exists: `x`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8ohv947u.rs:17:63\n   |\n17 |     while text_without_vowels.chars().any(|c|\
    \ vowels.contains(&c)) {\n   |                                               \
    \                ^^ expected `&str`, found `char`\n   |\n   = note: expected reference\
    \ `&&str`\n              found reference `&char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8ohv947u.rs:18:23\n   |\n18 |         vowels.remove(&vowels.iter().position(|&x|\
    \ x == &c).unwrap());\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `&usize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n18 -         vowels.remove(&vowels.iter().position(|&x| x == &c).unwrap());\n\
    18 +         vowels.remove(vowels.iter().position(|&x| x == &c).unwrap());\n \
    \  | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ohv947u.rs:22:56\n   |\n\
    22 |         text_without_vowels.retain(|c| vowels.contains(&c));\n   |      \
    \                                                  ^^ expected `&str`, found `char`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&char`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_fn(text).0\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_fn` in this scope\n \
    \ --> /tmp/tmp4rb5yce5.rs:13:5\n   |\n13 |     remove_vowels_fn(text).0\n   |\
    \     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !is_vowel(*c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmph2_4cxsx.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(*c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text, &mut Vec::new())\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpzzixsv8h.rs:13:5\n   |\n13 |     remove_vowels_impl(text, &mut\
    \ Vec::new())\n   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut builder = Builder::new_with_backtrace(text.len() * 2);\n    for\
    \ c in text.chars() {\n        match c.to_ascii_lowercase() {\n            \"\
    a\"..\"e\" | \"o\"..\"u\" | \"i\"..\"o\" | \"y\"..\"\xFF\" => {}\n           \
    \ c => builder.append_char(c),\n        }\n    }\n    builder.finish()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Builder`\n  -->\
    \ /tmp/tmptu4jpv08.rs:13:23\n   |\n13 |     let mut builder = Builder::new_with_backtrace(text.len()\
    \ * 2);\n   |                       ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::thread::Builder;\n   |\n\
    \nerror[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmptu4jpv08.rs:16:13\n\
    \   |\n16 |             \"a\"..\"e\" | \"o\"..\"u\" | \"i\"..\"o\" | \"y\"..\"\
    \xFF\" => {}\n   |             ^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmptu4jpv08.rs:16:24\n   |\n16 |             \"a\"..\"e\" | \"o\"\
    ..\"u\" | \"i\"..\"o\" | \"y\"..\"\xFF\" => {}\n   |                        ^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmptu4jpv08.rs:16:35\n   |\n16 |             \"a\"..\"e\" | \"o\"\
    ..\"u\" | \"i\"..\"o\" | \"y\"..\"\xFF\" => {}\n   |                         \
    \          ^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmptu4jpv08.rs:16:46\n   |\n16 |             \"a\"..\"e\" | \"o\"\
    ..\"u\" | \"i\"..\"o\" | \"y\"..\"\xFF\" => {}\n   |                         \
    \                     ^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0029]: only `char` and numeric types are allowed\
    \ in range patterns\n  --> /tmp/tmptu4jpv08.rs:16:13\n   |\n16 |             \"\
    a\"..\"e\" | \"o\"..\"u\" | \"i\"..\"o\" | \"y\"..\"\xFF\" => {}\n   |       \
    \      ---^^---\n   |             |    |\n   |             |    this is of type\
    \ `&'static str` but it should be `char` or numeric\n   |             this is\
    \ of type `&'static str` but it should be `char` or numeric\n\nerror[E0029]: only\
    \ `char` and numeric types are allowed in range patterns\n  --> /tmp/tmptu4jpv"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .map(|c| if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' {\n            c\n        } else {\n            None\n\
    \        })\n        .filter(|c| c\n            .ok()\n            .map(|c| if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n               \
    \ c\n            } else {\n                false\n            })\n           \
    \ .unwrap_or(true)\n        )\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpu_8hunka.rs:17:13\n\
    \   |\n14 |           .map(|c| if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n   |  __________________-\n15 | |             c\n   | |     \
    \        - expected because of this\n16 | |         } else {\n17 | |         \
    \    None\n   | |             ^^^^ expected `char`, found enum `Option`\n18 |\
    \ |         })\n   | |_________- `if` and `else` have incompatible types\n   |\n\
    \   = note: expected type `char`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `bool` with `char`\n  --> /tmp/tmpu_8hunka.rs:21:27\n   |\n21\
    \ |             .map(|c| if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n   |                           ^^ no implementation for `bool == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `bool`\n\
    \   = help: the trait `PartialEq` is implemented for `bool`\n\nerror[E0277]: can't\
    \ compare `bool` with `char`\n  --> /tmp/tmpu_8hunka.rs:21:39\n   |\n21 |    \
    \         .map(|c| if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n   |                                       ^^ no implementation for `bool\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `bool`\n   = help: the trait `PartialEq` is implemented for `bool`\n\nerror[E0277]:\
    \ can't compare `bool` with `char`\n  --> /tmp/tmpu_8hunka.rs:21:51\n   |\n21\
    \ |             .map(|c| if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n   |                                                   ^^ no implementation\
    \ for `bool == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `bool`\n   = help: the trait `PartialEq` is implemented for `bool`\n\nerror[E0277]:\
    \ can't compare `bool` with `char`\n  --> /tmp/tmpu_8hunka.rs:21:63\n   |\n21\
    \ |             .map(|c| if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n   |                                                             \
    \  ^^ no implementation for `bool == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `bool`"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter_map(|c| {\n        if c.is_vowel() {\n          \
    \  None\n        } else {\n            Some(c.to_ascii_lowercase())\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5xilqxis.rs:14:14\n   |\n14 |         if c.is_vowel() {\n\
    \   |              ^^^^^^^^ method not found in `char`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.chars().any(|c| c.is_ascii()) {\n        // `chars` is already\
    \ ASCII-encoded.\n        text\n    } else {\n        text\n            .chars()\n\
    \            .filter(|c| !c.is_ascii())\n            .collect::<String>()\n  \
    \          .join()\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp086ewclt.rs:21:14\n   |\n21 |             .join()\n   |\
    \              ^^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.chars().all(|c| !is_vowel(c)) {\n        text.to_owned()\n  \
    \  } else {\n        text.chars()\n            .filter(|c| !is_vowel(c))\n   \
    \         .collect::<String>()\n            .join()\n            .to_owned()\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpgb60my81.rs:13:30\n\
    \   |\n13 |     if text.chars().all(|c| !is_vowel(c)) {\n   |                \
    \              ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `is_vowel` in this scope\n  --> /tmp/tmpgb60my81.rs:17:26\n   |\n17 |      \
    \       .filter(|c| !is_vowel(c))\n   |                          ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0599]: no method named `join` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpgb60my81.rs:19:14\n   |\n19 | \
    \            .join()\n   |              ^^^^ method not found in `String`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = Vec::new();\n    vowels.push(String::from(\"a\"));\n\
    \    vowels.push(String::from(\"e\"));\n    vowels.push(String::from(\"i\"));\n\
    \    vowels.push(String::from(\"o\"));\n    vowels.push(String::from(\"u\"));\n\
    \n    let mut result = String::new();\n\n    for ch in text.chars() {\n      \
    \  if vowels.iter().any(|v| v.eq_ignore_ascii_case(ch)) {\n            result.push_str(&ch);\n\
    \        } else {\n            result.push_str(&ch.to_string());\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1vh3g6ck.rs:23:57\n   |\n\
    23 |         if vowels.iter().any(|v| v.eq_ignore_ascii_case(ch)) {\n   |    \
    \                                                     ^^ expected `&str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1vh3g6ck.rs:24:29\n\
    \   |\n24 |             result.push_str(&ch);\n   |                          \
    \   ^^^ expected `str`, found `char`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&char`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.to_ascii_lowercase()\n        .chars()\n        .filter_map(|c|\
    \ match c {\n            'a' => Some('e'),\n            'b' => Some('u'),\n  \
    \          'c' => Some('i'),\n            'd' => Some('o'),\n            'e' =>\
    \ Some('o'),\n            'f' => Some('o'),\n            'g' => Some('o'),\n \
    \           'h' => Some('e'),\n            'i' => Some('i'),\n            'j'\
    \ => Some('u'),\n            'k' => Some('u'),\n            'l' => Some('a'),\n\
    \            'm' => Some('u'),\n            'n' => Some('u'),\n            'o'\
    \ => Some('u'),\n            'p' => Some('o'),\n            'q' => Some('u'),\n\
    \            'r' => Some('u'),\n            's' => Some('s'),\n            't'\
    \ => Some('t'),\n            'u' => Some('u'),\n            'v' => Some('u'),\n\
    \            'w' => Some('u'),\n            'x' => Some('u'),\n            'y'\
    \ => Some('u'),\n            'z' => Some('z'),\n            _ => None,\n     \
    \   })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"euiooooeiuuau\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpbtn3uibe.rs:50:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = HashSet::new();\n    for &vowel in &Vowels {\n     \
    \   vowels.insert(vowel);\n    }\n\n    text.chars().filter(|c| !vowels.contains(c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpkem373dh.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `Vowels` in this scope\n  --> /tmp/tmpkem373dh.rs:14:20\n\
    \   |\n14 |     for &vowel in &Vowels {\n   |                    ^^^^^^ help:\
    \ a local variable with a similar name exists (notice the capitalization): `vowels`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_emoji_from_string(text.as_bytes(), true)\n}\n\nfn main() {\n \
    \   let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_emoji_from_string` in this scope\n\
    \  --> /tmp/tmpn36jus57.rs:13:5\n   |\n13 |     remove_emoji_from_string(text.as_bytes(),\
    \ true)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // TODO: Implement me\n    String::from(\"\")\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpigwgj42k.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.chars().any(|c| c.is_vowel()) {\n        text\n            .chars()\n\
    \            .filter(|c| !c.is_vowel())\n            .collect()\n    } else {\n\
    \        text\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpebonbqxz.rs:13:31\n   |\n13 |     if text.chars().any(|c|\
    \ c.is_vowel()) {\n   |                               ^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0599]: no method named `is_vowel` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpebonbqxz.rs:16:28\n   |\n16 |          \
    \   .filter(|c| !c.is_vowel())\n   |                            ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.to_lowercase().filter_map(|c| if c.is_alphabetic() {\n        c\
    \ == 'a'\n            || c == 'e'\n            || c == 'i'\n            || c ==\
    \ 'o'\n            || c == 'u'\n            || (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U')\n    } else {\n        false\n    })\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpl96ezpd4.rs:13:25\n\
    \    |\n13  |       text.to_lowercase().filter_map(|c| if c.is_alphabetic() {\n\
    \    |                           ^^^^^^^^^^ `String` is not an iterator; try calling\
    \ `.chars()` or `.bytes()`\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `&mut String: Iterator`\n            `str: Iterator`\n            which is\
    \ required by `&mut str: Iterator`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c.to_ascii_lowercase()\n          \
    \  .chars()\n            .any(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || c == 'y'))\n        .collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n  --> /tmp/tmppgpeylnp.rs:15:14\n   |\n15 |             .chars()\n  \
    \ |              ^^^^^ method not found in `char`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl::<_, String>(text)\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmp7wmxz20a.rs:13:5\n   |\n13 |     remove_vowels_impl::<_, String>(text)\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpy5p9m10a.rs:13:5\n   |\n13 |     remove_vowels_impl(text)\n   |\
    \     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .map(|c| if c.is_uppercase() || c.is_lowercase()\
    \ || c.is_ascii_letter() || c.is_digit() { \"a\" } else { c })\n        .filter(|c|\
    \ !is_vowel(c))\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpea2ml5ju.rs:15:22\n\
    \   |\n15 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `is_ascii_letter` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpea2ml5ju.rs:14:63\n   |\n\
    14 |         .map(|c| if c.is_uppercase() || c.is_lowercase() || c.is_ascii_letter()\
    \ || c.is_digit() { \"a\" } else { c })\n   |                                \
    \                               ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0061]: this function takes 1 argument\
    \ but 0 arguments were supplied\n   --> /tmp/tmpea2ml5ju.rs:14:86\n    |\n14 \
    \ |         .map(|c| if c.is_uppercase() || c.is_lowercase() || c.is_ascii_letter()\
    \ || c.is_digit() { \"a\" } else { c })\n    |                               \
    \                                                       ^^^^^^^^- supplied 0 arguments\n\
    \    |                                                                       \
    \               |\n    |                                                     \
    \                                 expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: `if` and `else` have incompatible types\n\
    \  --> /tmp/tmpea2ml5ju.rs:14:112\n   |\n14 |         .map(|c| if c.is_uppercase()\
    \ || c.is_lowercase() || c.is_ascii_letter() || c.is_digit() { \"a\" } else {\
    \ c })\n   |                                                                 \
    \                                  ---          ^ expected `&str`, found `char`\n\
    \   |                                                                        \
    \                           |\n   |                                          \
    \                                                         expected because of\
    \ this\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0308, E0425, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_ascii())\n        .filter(|c|\
    \ !c.is_lowercase())\n        .filter(|c| !c.is_uppercase())\n        .filter(|c|\
    \ !c.is_digit())\n        .filter(|c| !c.is_punctuation())\n        .filter(|c|\
    \ !c.is_whitespace())\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp84d42_rs.rs:17:24\n    |\n17  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp84d42_rs.rs:18:24\n\
    \   |\n18 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // \"z\" -> \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"z\"\n    let\
    \ mut chars: Vec<_> = vec![text[0], text[1], text[2], text[3], text[4], text[5],\
    \ text[6]];\n    for c in chars.iter_mut() {\n        if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            *c = 'z';\n        }\n  \
    \  }\n    String::from(chars.iter().cloned().collect())\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpf_k8asff.rs:14:34\n   |\n14 |     let mut chars: Vec<_> = vec![text[0],\
    \ text[1], text[2], text[3], text[4], text[5], text[6]];\n   |               \
    \                   ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n\
    \   = help: the trait `Index<{integer}>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpf_k8asff.rs:14:43\n   |\n14 |     let mut chars: Vec<_> = vec![text[0],\
    \ text[1], text[2], text[3], text[4], text[5], text[6]];\n   |               \
    \                            ^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpf_k8asff.rs:14:52\n   |\n14 |     let mut chars: Vec<_> = vec![text[0],\
    \ text[1], text[2], text[3], text[4], text[5], text[6]];\n   |               \
    \                                     ^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usi"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // Use a set for faster lookup\n    let mut set = String::new();\n\n\
    \    // Iterate over each char except the first\n    for &c in text.chars().skip(1)\
    \ {\n        // Get ASCII code of char\n        let a = c.to_ascii_lowercase();\n\
    \n        // If it's not in the set, add it to the set and continue\n        if\
    \ !set.is_member(&a) {\n            set += &a;\n            continue;\n      \
    \  }\n\n        // Else, remove vowel from set and continue\n        set.clear();\n\
    \    }\n\n    // Convert the set back to a String and return\n    String::from(set.to_ascii_lowercase())\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppkpsp8m4.rs:17:9\n   |\n\
    17 |     for &c in text.chars().skip(1) {\n   |         ^^    --------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0599]: no method named `is_member` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmppkpsp8m4.rs:22:17\n   |\n22 |         if\
    \ !set.is_member(&a) {\n   |                 ^^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut out = String::new();\n    for c in text.chars() {\n        if\
    \ !is_vowel(c) {\n            out.push(c);\n        }\n    }\n    out\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpj7pevg57.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978076
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut new = String::new();\n\n    for c in text.chars() {\n       \
    \ if !is_vowel(c) && c != ' ' {\n            new.push(c);\n        }\n    }\n\n\
    \    new\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp1e_dayfc.rs:16:13\n\
    \   |\n16 |         if !is_vowel(c) && c != ' ' {\n   |             ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| {\n            c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y'\n        })\n        .collect::<String>()\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp62jzkubf.rs:15:15\n\
    \   |\n15 |             c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'y'\n   |               ^^ no implementation for `&char == char`\n \
    \  |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmp62jzkubf.rs:15:27\n   |\n15 |   \
    \          c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y'\n\
    \   |                           ^^ no implementation for `&char == char`\n   |\n\
    \   = help: the trait `PartialEq<char>` is not implemented for `&char`\n   = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare\
    \ `&char` with `char`\n  --> /tmp/tmp62jzkubf.rs:15:39\n   |\n15 |           \
    \  c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y'\n   |\
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmp62jzkubf.rs:15:51\n   |\n15 |   \
    \          c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y'\n\
    \   |                                                   ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp62jzkubf.rs:15:63\n\
    \   |\n15 |             c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'y'\n   |                                                          \
    \     ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp62jzkubf.rs:15:75\n\
    \   |\n15 |         "
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_helper(text).0\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpe1ihe366.rs:13:5\n   |\n13 |     remove_vowels_helper(text).0\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::with_capacity(text.len());\n    let mut letters\
    \ = text;\n\n    for letter in letters.chars().filter(|&c| c == &'a' || c == &'e'\
    \ || c == &'i' || c == &'o' || c == &'u') {\n        result.append(&*letter);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxsakxss9.rs:16:52\n   |\n\
    16 |     for letter in letters.chars().filter(|&c| c == &'a' || c == &'e' || c\
    \ == &'i' || c == &'o' || c == &'u') {\n   |                                 \
    \                   ^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n16 -     for letter in letters.chars().filter(|&c|\
    \ c == &'a' || c == &'e' || c == &'i' || c == &'o' || c == &'u') {\n16 +     for\
    \ letter in letters.chars().filter(|&c| c == 'a' || c == &'e' || c == &'i' ||\
    \ c == &'o' || c == &'u') {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxsakxss9.rs:16:65\n\
    \   |\n16 |     for letter in letters.chars().filter(|&c| c == &'a' || c == &'e'\
    \ || c == &'i' || c == &'o' || c == &'u') {\n   |                            \
    \                                     ^^^^ expected `char`, found `&char`\n  \
    \ |\nhelp: consider removing the borrow\n   |\n16 -     for letter in letters.chars().filter(|&c|\
    \ c == &'a' || c == &'e' || c == &'i' || c == &'o' || c == &'u') {\n16 +     for\
    \ letter in letters.chars().filter(|&c| c == &'a' || c == 'e' || c == &'i' ||\
    \ c == &'o' || c == &'u') {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxsakxss9.rs:16:78\n\
    \   |\n16 |     for letter in letters.chars().filter(|&c| c == &'a' || c == &'e'\
    \ || c == &'i' || c == &'o' || c == &'u') {\n   |                            \
    \                                                  ^^^^ expected `char`, found\
    \ `&char`\n   |\nhelp: consider removing the borrow\n   |\n16 -     for letter\
    \ in letters.chars().filter(|&c| c == &'a' || c == &'e' || c == &'i' || c == &'o'\
    \ || c == &'u') {\n16 +     for letter in letters.chars().filter(|&c| c == &'a'\
    \ || c == &'e' || c == 'i' || c == &'o' || c == &'u') {\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxsakxss9.rs:16:91\n   |\n16 |     for letter\
    \ in letters.chars().filter(|&c| c == &'a' || c == &'e' || c == &'i' || c == &'o'\
    \ || c == &'u') {\n   |                                                      \
    \                                     ^^^^ expected `char`, found `&char`\n  \
    \ |\nhelp: consid"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        return text;\n    }\n    let mut counter\
    \ = text.chars().count();\n    let mut builder = String::with_capacity(text.len()\
    \ * 2);\n    let mut buffer = char::Ascii::new();\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    while counter > 0 {\n        let a = counter % 5;\n\
    \        let b = counter / 5;\n        counter -= 1;\n        if a != 0 {\n  \
    \          buffer.copy_from_slice(&vowels[a]);\n        }\n        builder.append(&buffer);\n\
    \        if b != 0 {\n            buffer.copy_from_slice(&vowels[b]);\n      \
    \  }\n        builder.append(&buffer);\n    }\n    builder.to_owned()\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0223]: ambiguous associated type\n  --> /tmp/tmp6opoyoor.rs:18:22\n\
    \   |\n18 |     let mut buffer = char::Ascii::new();\n   |                   \
    \   ^^^^^^^^^^^ help: use fully-qualified syntax: `<char as Trait>::Ascii`\n\n\
    error[E0599]: no method named `append` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp6opoyoor.rs:27:17\n   |\n27 |         builder.append(&buffer);\n\
    \   |                 ^^^^^^ method not found in `String`\n\nerror[E0599]: no\
    \ method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp6opoyoor.rs:31:17\n   |\n31 |         builder.append(&buffer);\n   |\
    \                 ^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0223, E0599.\n\
    For more information about an error, try `rustc --explain E0223`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut out = String::new();\n    let mut vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    text.chars().for_each(|c| {\n        if !vowels.contains(&c)\
    \ {\n            out.push(c);\n        }\n    });\n    out\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpo0cyt75g.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text\n        .chars()\n        .filter(|c| c.is_alphabetic() || c.is_digit()\
    \ || c == '_' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c\
    \ == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L'\
    \ || c == 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c\
    \ == 'S' || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X' || c == 'Y'\
    \ || c == 'Z')\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpnmk3ef5r.rs:15:44\n    |\n15  | ...   .filter(|c| c.is_alphabetic()\
    \ || c.is_digit() || c == '_' || c == 'A' || c == 'B' || c == 'C' || c == 'D'\
    \ || c == 'E' || c == 'F' |...\n    |                                        \
    \  ^^^^^^^^- supplied 0 arguments\n    |                                     \
    \     |\n    |                                          expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0277]: can't compare\
    \ `&char` with `char`\n  --> /tmp/tmpnmk3ef5r.rs:15:60\n   |\n15 | ...   .filter(|c|\
    \ c.is_alphabetic() || c.is_digit() || c == '_' || c == 'A' || c == 'B' || c ==\
    \ 'C' || c == 'D' || c == 'E' || c == 'F' |...\n   |                         \
    \                                 ^^ no implementation for `&char == char`\n \
    \  |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpnmk3ef5r.rs:15:72\n   |\n15 | ...\
    \   .filter(|c| c.is_alphabetic() || c.is_digit() || c == '_' || c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' |...\n   |          \
    \                                                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpnmk3ef5r.rs:15:84\n\
    \   |\n15 | ...   .filter(|c| c.is_alphabetic() || c.is_digit() || c == '_' ||\
    \ c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' |...\n\
    \   |                                                                        \
    \          ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpnmk3ef5r.rs:15:96\n   |\n15 | ...   .filter("
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_alphanumeric())\n        .filter(|c|\
    \ !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp6xcmxusd.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut lowercase = text;\n    lowercase.remove('a', 'e', 'i', 'o', 'u');\n\
    \    lowercase.remove('o', 'u');\n    lowercase.remove('u');\n    lowercase\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 5 arguments were supplied\n\
    \    --> /tmp/tmp60wo2ips.rs:14:15\n     |\n14   |     lowercase.remove('a', 'e',\
    \ 'i', 'o', 'u');\n     |               ^^^^^^ ---  ---  ---  ---  --- supplied\
    \ 5 arguments\n     |               |\n     |               expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmp60wo2ips.rs:15:15\n\
    \     |\n15   |     lowercase.remove('o', 'u');\n     |               ^^^^^^ ---\
    \  --- supplied 2 arguments\n     |               |\n     |               expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp60wo2ips.rs:16:22\n   |\n16 |     lowercase.remove('u');\n\
    \   |                      ^^^ expected `usize`, found `char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels(text).as_ref()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgmcagebq.rs:13:5\n   |\n\
    12 | fn remove_vowels(text: String) -> String {\n   |                        \
    \           ------ expected `String` because of return type\n13 |     remove_vowels(text).as_ref()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |     |\n   |     expected struct `String`, found reference\n   |\n   = note:\
    \ expected struct `String`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl!(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `remove_vowels_impl` in this scope\n  --> /tmp/tmpl6se2my6.rs:13:5\n\
    \   |\n13 |     remove_vowels_impl!(text)\n   |     ^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter_map(|c| c.to_ascii_lowercase().chars().any(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpo5yp_e9w.rs:14:48\n   |\n14 |         .filter_map(|c| c.to_ascii_lowercase().chars().any(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'))\n   |           \
    \                                     ^^^^^ method not found in `char`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result: String = String::from(text).to_owned();\n    let mut\
    \ vowels: Vec<&'static str> = vec![\n        b\"a\",\n        b\"e\",\n      \
    \  b\"i\",\n        b\"o\",\n        b\"u\",\n    ];\n    vowels.sort_unstable();\n\
    \    vowels.into_iter().for_each(|x| {\n        if let Ok(pos) = result.find(x)\
    \ {\n            result.insert(pos, \"\".into());\n        }\n    });\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21iixj5z.rs:15:9\n   |\n\
    15 |         b\"a\",\n   |         ^^^^ expected `str`, found array `[u8; 1]`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&'static\
    \ [u8; 1]`\nhelp: consider removing the leading `b`\n   |\n15 -         b\"a\"\
    ,\n15 +         \"a\",\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp21iixj5z.rs:23:16\n\
    \   |\n23 |         if let Ok(pos) = result.find(x) {\n   |                ^^^^^^^\
    \   -------------- this expression has type `Option<usize>`\n   |            \
    \    |\n   |                expected enum `Option`, found enum `Result`\n   |\n\
    \   = note: expected enum `Option<usize>`\n              found enum `Result<_,\
    \ _>`\n\nerror[E0277]: the trait bound `char: From<&str>` is not satisfied\n \
    \ --> /tmp/tmp21iixj5z.rs:24:35\n   |\n24 |             result.insert(pos, \"\"\
    .into());\n   |                                   ^^^^ the trait `From<&str>`\
    \ is not implemented for `char`\n   |\n   = help: the trait `From<u8>` is implemented\
    \ for `char`\n   = note: required because of the requirements on the impl of `Into<char>`\
    \ for `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.into_iter().filter_map(|c| if c.is_vowel() { None } else { Some(c)\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpulk8r1fh.rs:13:10\n    |\n13\
    \  |       text.into_iter().filter_map(|c| if c.is_vowel() { None } else { Some(c)\
    \ }).collect()\n    |            ^^^^^^^^^\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `String: IntoIterator`\n            `&String: Iterator`\n   \
    \         which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Sized`\n            which is required by `str: IntoIterator`\n\
    \            `str: Iterator`\n            which is required by `str: IntoIterator`\n\
    \            `&str: Iterator`\n            which is required by `&str: IntoIterator`\n\
    \            `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text\n        .chars()\n        .filter(|c| !vowels.contains(c))\n  \
    \      .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpl5zntulr.rs:15:22\n\
    \   |\n15 |         .filter(|c| !vowels.contains(c))\n   |                   \
    \   ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if let Some(vowels) = text.chars().filter_map(|c| is_vowel(c)).collect()\
    \ {\n        text.chars()\n            .filter(|c| !vowels.contains(c))\n    \
    \        .collect()\n    } else {\n        text\n    }\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp1hlew5cr.rs:13:55\n\
    \   |\n13 |     if let Some(vowels) = text.chars().filter_map(|c| is_vowel(c)).collect()\
    \ {\n   |                                                       ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut s = String::from(text);\n    remove_vowels_helper(&mut s);\n\
    \    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpy71oyahf.rs:14:5\n   |\n14 |     remove_vowels_helper(&mut s);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut it = text.char_indices();\n    let mut result = String::new();\n\
    \    for (i, c) in it.by_ref().take(text.len() - 1) {\n        if *c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c !=\
    \ 'I' && c != 'O' && c != 'U' {\n            result.push(*c);\n        } else\
    \ {\n            break;\n        }\n    }\n    result.push(text.chars().last().unwrap());\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpysw0lp7s.rs:16:12\n\
    \   |\n16 |         if *c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U' {\n   |        \
    \    ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpysw0lp7s.rs:17:25\n\
    \   |\n17 |             result.push(*c);\n   |                         ^^\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.len() == 0 {\n        return text;\n    }\n    let mut vowels\
    \ = HashSet::new();\n    vowels.insert(\n        'a',\n        'u',\n        'o',\n\
    \        'e',\n        'i',\n        'o',\n        'a',\n        'u',\n      \
    \  'o',\n        'e',\n        'i',\n        'o',\n    );\n    for &c in text.chars()\
    \ {\n        if vowels.contains(&c) {\n            text = text.to_lowercase();\n\
    \            text = &text.remove(c);\n        }\n    }\n    text\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp_p7sidjx.rs:16:22\n   |\n16 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_p7sidjx.rs:31:9\n   |\n31 |     for &c in text.chars()\
    \ {\n   |         ^^    ------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `c`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_p7sidjx.rs:34:20\n   |\n12 | fn remove_vowels(text: String) ->\
    \ String {\n   |                        ------ expected due to this parameter\
    \ type\n...\n34 |             text = &text.remove(c);\n   |                  \
    \  ^^^^^^^^^^^^^^^ expected struct `String`, found `&char`\n   |\nhelp: try using\
    \ a conversion method\n   |\n34 |             text = (&text.remove(c)).to_string();\n\
    \   |                    +               +++++++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut chars = String::new();\n    let mut i = 0;\n    while i < text.len()\
    \ {\n        let mut j = i;\n        while j + 1 < text.len() {\n            if\
    \ text.chars().nth(j).unwrap() == text.chars().nth(j + 1).unwrap() {\n       \
    \         chars.push_str(&text.chars().nth(j).unwrap());\n                j +=\
    \ 1;\n            } else {\n                break;\n            }\n        }\n\
    \        i += 1;\n    }\n    chars\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpboinklb_.rs:19:32\n   |\n\
    19 |                 chars.push_str(&text.chars().nth(j).unwrap());\n   |    \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found\
    \ `char`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = HashSet::new();\n\n    for c in text.chars() {\n   \
    \     if vowels.contains(c){\n            continue;\n        }\n        vowels.insert(c);\n\
    \    }\n    text\n        .chars()\n        .filter(|c| !vowels.contains(c))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpq04n_i31.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .collect::<String>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp1n2pgqek.rs:16:10\n   |\n16 |         .join(\"\")\n   |\
    \          ^^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // Convert string to lower case and remove all vowels.\n    let mut lowercase\
    \ = text\n        .to_string()\n        .to_lowercase()\n        .chars()\n  \
    \      .filter(|c| !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'))\n\
    \        .collect::<String>();\n    // Rebuild the string from the filtered characters.\n\
    \    lowercase.rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp06nlfpp_.rs:18:25\n\
    \   |\n18 |         .filter(|c| !(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'))\n   |                         ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmp06nlfpp_.rs:18:37\n   |\n18\
    \ |         .filter(|c| !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u'))\n   |                                     ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmp06nlfpp_.rs:18:49\n   |\n18\
    \ |         .filter(|c| !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u'))\n   |                                                 ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp06nlfpp_.rs:18:61\n\
    \   |\n18 |         .filter(|c| !(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'))\n   |                                                        \
    \     ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp06nlfpp_.rs:18:73\n\
    \   |\n18 |         .filter(|c| !(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'))\n   |                                                        \
    \                 ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0599]: `String` is not an iterator\n\
    \   -->"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| is_vowel(c)).collect()\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmprsptvd3a.rs:13:29\n\
    \   |\n13 |     text.chars().filter(|c| is_vowel(c)).collect()\n   |         \
    \                    ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| c.is_ascii() && c != 'a' && c != 'A' && c !=\
    \ 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c != 'O' && c != 'u'\
    \ && c != 'U').collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpnxififa2.rs:13:47\n\
    \   |\n13 |     text.chars().filter(|c| c.is_ascii() && c != 'a' && c != 'A' &&\
    \ c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c != 'O' ...\n \
    \  |                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpnxififa2.rs:13:59\n   |\n13\
    \ |     text.chars().filter(|c| c.is_ascii() && c != 'a' && c != 'A' && c != 'e'\
    \ && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c != 'O' ...\n   |      \
    \                                                     ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpnxififa2.rs:13:71\n\
    \   |\n13 |     text.chars().filter(|c| c.is_ascii() && c != 'a' && c != 'A' &&\
    \ c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c != 'O' ...\n \
    \  |                                                                       ^^\
    \ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpnxififa2.rs:13:83\n\
    \   |\n13 |     text.chars().filter(|c| c.is_ascii() && c != 'a' && c != 'A' &&\
    \ c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c != 'O' ...\n \
    \  |                                                                         \
    \          ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpnxififa2.rs:13:95\n   |\n13 |     text.chars().filter(|c| c.is_ascii()\
    \ && c != 'a' &"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter_map(|c| if c.is_vowel() { None } else { Some(c) }).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbgagd_pu.rs:13:38\n   |\n13 |     text.chars().filter_map(|c|\
    \ if c.is_vowel() { None } else { Some(c) }).collect()\n   |                 \
    \                     ^^^^^^^^ method not found in `char`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut output = String::from(text);\n    output.chars()\n        .filter(|c|\
    \ !is_vowel(c))\n        .cloned()\n        .for_each(|c| output.remove(c));\n\
    \    output\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpgdxzv3_i.rs:15:22\n\
    \   |\n15 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror[E0271]: type mismatch resolving `<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpgdxzv3_i.rs:15:17: 15:33]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmpgdxzv3_i.rs:16:10\n     |\n16   |         .cloned()\n     |        \
    \  ^^^^^^ expected reference, found `char`\n     |\n     = note: expected reference\
    \ `&_`\n                     found type `char`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `for_each` exists for struct `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpgdxzv3_i.rs:15:17: 15:33]>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpgdxzv3_i.rs:17:10\n   |\n17 |            .for_each(|c|\
    \ output.remove(c));\n   |             ^^^^^^^^ method cannot be called on `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpgdxzv3_i.rs:15:17: 15:33]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpgdxzv3_i.rs:15:17: 15:33]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<Chars<'_>, [closure@/tmp/tmpgdxzv3_i.rs:15:17:\
    \ 15:33]>>: Iterator`\n           `Cloned<Filter<Chars<'_>, [closure@/tmp/tmpgdxzv3_i.rs:15:17:\
    \ 15:33]>>: Iterator`\n           which is required by `&mut Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmpgdxzv3_i.rs:15:17: 15:33]>>: Iterator`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0425,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter_map(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmprreyg9em.rs:14:26\n\
    \   |\n14 |         .filter_map(|c| !is_vowel(c))\n   |                      \
    \    ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c != 'a' || c != 'e' || c != 'i' ||\
    \ c != 'o' || c != 'u')\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpr7xg_5pm.rs:14:23\n\
    \   |\n14 |         .filter(|c| c != 'a' || c != 'e' || c != 'i' || c != 'o' ||\
    \ c != 'u')\n   |                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpr7xg_5pm.rs:14:35\n   |\n14 |   \
    \      .filter(|c| c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u')\n\
    \   |                                   ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpr7xg_5pm.rs:14:47\n   |\n14 |   \
    \      .filter(|c| c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u')\n\
    \   |                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpr7xg_5pm.rs:14:59\n   |\n14\
    \ |         .filter(|c| c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u')\n\
    \   |                                                           ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpr7xg_5pm.rs:14:71\n\
    \   |\n14 |         .filter(|c| c != 'a' || c != 'e' || c != 'i' || c != 'o' ||\
    \ c != 'u')\n   |                                                            \
    \           ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror: aborting due to 5 previous errors\n\nFor\
    \ more information about this"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut s = text;\n    s.chars().filter(|c| c.is_lowercase()).cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmp2d2kytcw.rs:14:22:\
    \ 14:42]> as Iterator>::Item == &_`\n    --> /tmp/tmp2d2kytcw.rs:14:44\n     |\n\
    14   |     s.chars().filter(|c| c.is_lowercase()).cloned().collect::<String>()\n\
    \     |                                            ^^^^^^ expected reference,\
    \ found `char`\n     |\n     = note: expected reference `&_`\n               \
    \      found type `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp2d2kytcw.rs:14:22:\
    \ 14:42]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp2d2kytcw.rs:14:53\n\
    \   |\n14 |        s.chars().filter(|c| c.is_lowercase()).cloned().collect::<String>()\n\
    \   |                                                        ^^^^^^^ method cannot\
    \ be called on `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp2d2kytcw.rs:14:22: 14:42]>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<Filter<Chars<'_>, [closure@/tmp/tmp2d2kytcw.rs:14:22:\
    \ 14:42]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp2d2kytcw.rs:14:22: 14:42]>>: Iterator`\n           `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp2d2kytcw.rs:14:22: 14:42]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<Chars<'_>, [closure@/tmp/tmp2d2kytcw.rs:14:22:\
    \ 14:42]>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::new();\n    let mut it = text.chars();\n   \
    \ let mut has_vowels = false;\n\n    for c in it {\n        if c.is_alphabetic()\
    \ {\n            if c.is_vowel() {\n                if has_vowels {\n        \
    \            result.push_str(&*it);\n                    break;\n            \
    \    } else {\n                    has_vowels = true;\n                }\n   \
    \         } else {\n                if !has_vowels {\n                    result.push_str(&*it);\n\
    \                    break;\n                } else {\n                    has_vowels\
    \ = false;\n                }\n            }\n        } else {\n            result.push_str(&*it);\n\
    \            break;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpieobufxk.rs:19:18\n   |\n19 |             if c.is_vowel()\
    \ {\n   |                  ^^^^^^^^ method not found in `char`\n\nerror[E0614]:\
    \ type `Chars<'_>` cannot be dereferenced\n  --> /tmp/tmpieobufxk.rs:21:38\n \
    \  |\n21 |                     result.push_str(&*it);\n   |                  \
    \                    ^^^\n\nerror[E0614]: type `Chars<'_>` cannot be dereferenced\n\
    \  --> /tmp/tmpieobufxk.rs:28:38\n   |\n28 |                     result.push_str(&*it);\n\
    \   |                                      ^^^\n\nerror[E0614]: type `Chars<'_>`\
    \ cannot be dereferenced\n  --> /tmp/tmpieobufxk.rs:35:30\n   |\n35 |        \
    \     result.push_str(&*it);\n   |                              ^^^\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpjs88ije4.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| is_vowel(c)\n            || (c.is_lowercase()\
    \ && !is_vowel(c.to_ascii_lowercase()))\n            || (c.is_uppercase() && !is_vowel(c.to_ascii_uppercase())))\n\
    \        .collect::<String>(\"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmptc_x8v5q.rs:14:21\n\
    \   |\n14 |         .filter(|c| is_vowel(c)\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `is_vowel` in\
    \ this scope\n  --> /tmp/tmptc_x8v5q.rs:15:38\n   |\n15 |             || (c.is_lowercase()\
    \ && !is_vowel(c.to_ascii_lowercase()))\n   |                                \
    \      ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `is_vowel` in this scope\n  --> /tmp/tmptc_x8v5q.rs:16:38\n   |\n16 |      \
    \       || (c.is_uppercase() && !is_vowel(c.to_ascii_uppercase())))\n   |    \
    \                                  ^^^^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmptc_x8v5q.rs:17:10\n\
    \     |\n17   |         .collect::<String>(\"\")\n     |          ^^^^^^^    \
    \       -- supplied 1 argument\n     |          |\n     |          expected 0\
    \ arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_recursive(text, vec![])\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_recursive` in this scope\n\
    \  --> /tmp/tmpyfd7m7pt.rs:13:5\n   |\n13 |     remove_vowels_recursive(text,\
    \ vec![])\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels(text, |c: char| char.ascii_lowercase().contains(&c))\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0423]: expected value, found builtin type `char`\n  --> /tmp/tmpoa4rddcp.rs:13:35\n\
    \   |\n13 |     remove_vowels(text, |c: char| char.ascii_lowercase().contains(&c))\n\
    \   |                                   ^^^^ not a value\n\nerror[E0061]: this\
    \ function takes 1 argument but 2 arguments were supplied\n  --> /tmp/tmpoa4rddcp.rs:13:5\n\
    \   |\n13 |     remove_vowels(text, |c: char| char.ascii_lowercase().contains(&c))\n\
    \   |     ^^^^^^^^^^^^^ ----  --------------------------------------------- supplied\
    \ 2 arguments\n   |     |\n   |     expected 1 argument\n   |\nnote: function\
    \ defined here\n  --> /tmp/tmpoa4rddcp.rs:12:4\n   |\n12 | fn remove_vowels(text:\
    \ String) -> String {\n   |    ^^^^^^^^^^^^^ ------------\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0423.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    match text.chars() {\n        None => text,\n        Some(mut c) => remove_vowels_helper(c,\
    \ \"\"),\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpha1_sqxz.rs:15:24\n   |\n15 |         Some(mut c) => remove_vowels_helper(c,\
    \ \"\"),\n   |                        ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpha1_sqxz.rs:14:9\n   |\n13 | \
    \    match text.chars() {\n   |           ------------ this expression has type\
    \ `Chars<'_>`\n14 |         None => text,\n   |         ^^^^ expected struct `Chars`,\
    \ found enum `Option`\n   |\n   = note: expected struct `Chars<'_>`\n        \
    \        found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpha1_sqxz.rs:15:9\n\
    \   |\n13 |     match text.chars() {\n   |           ------------ this expression\
    \ has type `Chars<'_>`\n14 |         None => text,\n15 |         Some(mut c) =>\
    \ remove_vowels_helper(c, \"\"),\n   |         ^^^^^^^^^^^ expected struct `Chars`,\
    \ found enum `Option`\n   |\n   = note: expected struct `Chars<'_>`\n        \
    \        found enum `Option<_>`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|&c| !is_vowel(c)).collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmprx69z97e.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|&c| !is_vowel(c)).collect()\n   |       \
    \                        ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if !text.contains(\"aeiouAEIOU\") {\n        text.to_owned()\n    } else\
    \ {\n        let mut to_remove = String::new();\n        let mut vowels = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n        let mut pos = 0;\n        for &c in\
    \ text.chars() {\n            if !vowels.contains(&c) {\n                to_remove.push(c);\n\
    \            } else {\n                vowels.remove(&c);\n                pos\
    \ += 1;\n            }\n        }\n        to_remove.truncate(pos);\n        to_remove\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86812p3a.rs:19:13\n   |\n\
    19 |         for &c in text.chars() {\n   |             ^^    ------------ this\
    \ expression has type `Option<char>`\n   |             |\n   |             expected\
    \ `char`, found reference\n   |             help: you can probably remove the\
    \ explicit borrow: `c`\n   |\n   = note:   expected type `char`\n           found\
    \ reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86812p3a.rs:21:32\n\
    \   |\n21 |                 to_remove.push(c);\n   |                         \
    \       ^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp86812p3a.rs:23:31\n   |\n23 |                 vowels.remove(&c);\n \
    \  |                               ^^ expected `usize`, found `&&str`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // Remove vowels\n    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpqciivnv6.rs:15:22\n\
    \   |\n15 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if !text.is_ascii() {\n        text.to_lowercase()\n    }\n    text.chars().filter_map(|c|\
    \ c.is_vowel()).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp60deucf0.rs:14:9\n   |\n\
    13 | /     if !text.is_ascii() {\n14 | |         text.to_lowercase()\n   | | \
    \        ^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `String`\n15 | |    \
    \ }\n   | |_____- expected this to be `()`\n   |\nhelp: consider using a semicolon\
    \ here\n   |\n14 |         text.to_lowercase();\n   |                        \
    \    +\nhelp: consider using a semicolon here\n   |\n15 |     };\n   |      +\n\
    help: you might have meant to return this value\n   |\n14 |         return text.to_lowercase();\n\
    \   |         ++++++                    +\n\nerror[E0599]: no method named `is_vowel`\
    \ found for type `char` in the current scope\n  --> /tmp/tmp60deucf0.rs:16:35\n\
    \   |\n16 |     text.chars().filter_map(|c| c.is_vowel()).collect()\n   |    \
    \                               ^^^^^^^^ method not found in `char`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| is_vowel(c)).collect()\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmprsptvd3a.rs:13:29\n\
    \   |\n13 |     text.chars().filter(|c| is_vowel(c)).collect()\n   |         \
    \                    ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut s = text;\n    s.chars()\n        .filter(|c| c.is_vowel())\n\
    \        .cloned()\n        .collect::<String>() + s.chars().filter(|c| !c.is_vowel()).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp6kdfoa3e.rs:15:23\n   |\n15 |         .filter(|c|\
    \ c.is_vowel())\n   |                       ^^^^^^^^ method not found in `&char`\n\
    \nerror[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmp6kdfoa3e.rs:15:17:\
    \ 15:33]> as Iterator>::Item == &_`\n    --> /tmp/tmp6kdfoa3e.rs:16:10\n     |\n\
    16   |         .cloned()\n     |          ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp6kdfoa3e.rs:15:17:\
    \ 15:33]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp6kdfoa3e.rs:17:10\n\
    \   |\n17 |            .collect::<String>() + s.chars().filter(|c| !c.is_vowel()).cloned().collect()\n\
    \   |             ^^^^^^^ method cannot be called on `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp6kdfoa3e.rs:15:17: 15:33]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp6kdfoa3e.rs:15:17: 15:33]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp6kdfoa3e.rs:15:17:\
    \ 15:33]>>: Iterator`\n           `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp6kdfoa3e.rs:15:17:\
    \ 15:33]>>: Iterator`\n           which is required by `&mut Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp6kdfoa3e.rs:15:17: 15:33]>>: Iterator`\n\nerror[E0599]: no\
    \ method named `is_vowel` found for reference `&char` in the current scope\n \
    \ --> /tmp/tmp6kdfoa3e.rs:17:56\n   |\n17 |         .collect::<String>() + s.chars().filter(|c|\
    \ !c.is_vowel()).cloned().collect()\n   |                                    \
    \                    ^^^^^^^^ method not found in `&char`\n\nerror[E0271]: type\
    \ mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmp6kdfoa3e.rs:17:49: 17:66]>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp6kdfoa3e.rs:17:68\n     |\n17   |\
    \         .c"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpgcbw5m6i.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| VOWELS.contains(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpxc8b2k_e.rs:13:29\n\
    \   |\n13 |     text.chars().filter(|c| VOWELS.contains(c)).collect()\n   |  \
    \                           ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text).to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpj845y1w4.rs:13:5\n   |\n13 |     remove_vowels_impl(text).to_owned()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_re(text).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_re` in this scope\n \
    \ --> /tmp/tmppo_zi29y.rs:13:5\n   |\n13 |     remove_vowels_re(text).unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_helper(text, \"\", \"\")\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpxgp554yd.rs:13:5\n   |\n13 |     remove_vowels_helper(text, \"\"\
    , \"\")\n   |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::with_capacity(text.len());\n    for c in text.chars()\
    \ {\n        if !c.is_vowel() {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_vyqoyn6.rs:15:15\n   |\n15 |         if !c.is_vowel()\
    \ {\n   |               ^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| !c.is_ascii_letter()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp57o2foxr.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect()\n   |                                ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut text = text;\n    for ch in text.chars().filter_map(|c| {\n \
    \       if c.is_vowel() {\n            None\n        } else {\n            Some(c)\n\
    \        }\n    }) {\n        text = text.chars().filter(|c| !c.is_vowel()).collect::<String>();\n\
    \    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp__7m8xtw.rs:15:14\n   |\n15 |         if c.is_vowel() {\n\
    \   |              ^^^^^^^^ method not found in `char`\n\nerror[E0599]: no method\
    \ named `is_vowel` found for reference `&char` in the current scope\n  --> /tmp/tmp__7m8xtw.rs:21:43\n\
    \   |\n21 |         text = text.chars().filter(|c| !c.is_vowel()).collect::<String>();\n\
    \   |                                           ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut to_return = text.to_string();\n    to_return.chars()\n      \
    \  .filter(|c| c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_lowercase().is_ascii_uppercase())\n\
    \        .cloned()\n        .for_each(|c| to_return.push(c));\n    to_return\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_uppercase` found for type `bool`\
    \ in the current scope\n  --> /tmp/tmp8mt1rvr_.rs:16:45\n   |\n16 |         .filter(|c|\
    \ !c.is_ascii_lowercase().is_ascii_uppercase())\n   |                        \
    \                     ^^^^^^^^^^^^^^^^^^ method not found in `bool`\n\nerror[E0271]:\
    \ type mismatch resolving `<Filter<Filter<Chars<'_>, [closure@/tmp/tmp8mt1rvr_.rs:15:17:\
    \ 15:43]>, [closure@/tmp/tmp8mt1rvr_.rs:16:17: 16:65]> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmp8mt1rvr_.rs:17:10\n     |\n17   |         .cloned()\n     | \
    \         ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct `Cloned<Filter<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp8mt1rvr_.rs:15:17: 15:43]>, [closure@/tmp/tmp8mt1rvr_.rs:16:17:\
    \ 16:65]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp8mt1rvr_.rs:18:10\n\
    \   |\n18 |            .for_each(|c| to_return.push(c));\n   |             ^^^^^^^^\
    \ method cannot be called on `Cloned<Filter<Filter<Chars<'_>, [closure@/tmp/tmp8mt1rvr_.rs:15:17:\
    \ 15:43]>, [closure@/tmp/tmp8mt1rvr_.rs:16:17: 16:65]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Filter<Chars<'_>, [closure@/tmp/tmp8mt1rvr_.rs:15:17: 15:43]>,\
    \ [closure@/tmp/tmp8mt1rvr_.rs:16:17: 16:65]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<Filter<Chars<'_>, [closure@/tmp/tmp8mt1rvr_.rs:15:17:\
    \ 15:43]>, [closure@/tmp/tmp8mt1rvr_.rs:16:17: 16:65]>>: Iterator`\n         \
    \  `Cloned<Filter<Filter<Chars<'_>, [closure@/tmp/tmp8mt1rvr_.rs:15:17: 15:43]>,\
    \ [closure@/tmp/tmp8mt1rvr_.rs:16:17: 16:65]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<Filter<Chars<'_>, [closure@/tmp/tmp8mt1rvr_.rs:15:17:\
    \ 15:43]>, [closure@/tmp/tmp8mt1rvr_.rs:16:17: 16:65]>>: Iterator`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more informat"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| {\n            c.is_ascii()\n     \
    \   })\n        .filter(|c| {\n            c.is_uppercase()\n        })\n    \
    \    .filter(|c| {\n            c.is_lowercase()\n        })\n        .filter(|c|\
    \ {\n            !c.is_letter()\n        })\n        .filter(|c| {\n         \
    \   !c.is_digit()\n        })\n        .filter(|c| {\n            !c.is_whitespace()\n\
    \        })\n        .filter(|c| {\n            !c.is_punctuation()\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_letter` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpyoulfv8p.rs:24:16\n   |\n24 |             !c.is_letter()\n\
    \   |                ^^^^^^^^^ method not found in `&char`\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpyoulfv8p.rs:27:16\n\
    \    |\n27  |             !c.is_digit()\n    |                ^^^^^^^^- supplied\
    \ 0 arguments\n    |                |\n    |                expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0599]: no method named\
    \ `is_punctuation` found for reference `&char` in the current scope\n  --> /tmp/tmpyoulfv8p.rs:33:16\n\
    \   |\n33 |             !c.is_punctuation()\n   |                ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii_punctuation`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c.is_uppercase())\n        .map(|c|\
    \ {\n            c.to_lowercase();\n            if c.is_ascii_lowercase() {\n\
    \                c\n            } else {\n                0\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpktep1p4s.rs:20:17\n\
    \   |\n17 | /             if c.is_ascii_lowercase() {\n18 | |                \
    \ c\n   | |                 - expected because of this\n19 | |             } else\
    \ {\n20 | |                 0\n   | |                 ^ expected `char`, found\
    \ integer\n21 | |             }\n   | |_____________- `if` and `else` have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c >= 'a' && c <= 'z')\n        .filter(|c|\
    \ c >= 'A' && c <= 'Z')\n        .map(|c| c as char).collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt5tz75ao.rs:14:26\n   |\n\
    14 |         .filter(|c| c >= 'a' && c <= 'z')\n   |                         \
    \ ^^^\n   |                          |\n   |                          expected\
    \ `&char`, found `char`\n   |                          help: consider borrowing\
    \ here: `&'a'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt5tz75ao.rs:14:38\n\
    \   |\n14 |         .filter(|c| c >= 'a' && c <= 'z')\n   |                  \
    \                    ^^^\n   |                                      |\n   |  \
    \                                    expected `&char`, found `char`\n   |    \
    \                                  help: consider borrowing here: `&'z'`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt5tz75ao.rs:15:26\n   |\n15 |         .filter(|c|\
    \ c >= 'A' && c <= 'Z')\n   |                          ^^^\n   |             \
    \             |\n   |                          expected `&char`, found `char`\n\
    \   |                          help: consider borrowing here: `&'A'`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt5tz75ao.rs:15:38\n   |\n15 |         .filter(|c|\
    \ c >= 'A' && c <= 'Z')\n   |                                      ^^^\n   | \
    \                                     |\n   |                                \
    \      expected `&char`, found `char`\n   |                                  \
    \    help: consider borrowing here: `&'Z'`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if !text.chars().all(|c| c.is_vowel()) {\n        String::from(\"\")\n\
    \    } else {\n        text\n            .chars()\n            .filter(|c| c.is_vowel())\n\
    \            .collect()\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp384e93yu.rs:13:32\n   |\n13 |     if !text.chars().all(|c|\
    \ c.is_vowel()) {\n   |                                ^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0599]: no method named `is_vowel` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp384e93yu.rs:18:27\n   |\n18 |          \
    \   .filter(|c| c.is_vowel())\n   |                           ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut new_str = text;\n    for ch in text.chars() {\n        if !is_vowel(ch)\
    \ {\n            new_str.push(*ch);\n        }\n    }\n    new_str\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpvkqolwzm.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpvkqolwzm.rs:16:26\n\
    \   |\n16 |             new_str.push(*ch);\n   |                          ^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0614.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::new();\n    for c in text.chars() {\n      \
    \  if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpc74dofuo.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = vec!['a'..'z'];\n    vowels.sort();\n    let mut text\
    \ = text;\n    for v in vowels.iter() {\n        text = text.chars().filter(|c|\
    \ *c != v).collect();\n    }\n    text\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmp2twg5_0p.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2twg5_0p.rs:17:46\n   |\n17 |         text =\
    \ text.chars().filter(|c| *c != v).collect();\n   |                          \
    \                    ^ expected `char`, found reference\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&std::ops::Range<char>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::new();\n    let mut vowels = vec![\"a\".to_owned(),\
    \ \"e\".to_owned(), \"i\".to_owned(), \"o\".to_owned(), \"u\".to_owned()];\n \
    \   for c in text.chars() {\n        if !vowels.contains(c) {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_8l1_w4d.rs:16:29\n   |\n\
    16 |         if !vowels.contains(c) {\n   |                             ^ expected\
    \ `&String`, found `char`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.chars().any(|c| is_vowel(c)) {\n        text.chars()\n      \
    \      .filter(|c| !is_vowel(c))\n            .collect::<String>()\n    } else\
    \ {\n        text\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpk2470d5z.rs:13:29\n\
    \   |\n13 |     if text.chars().any(|c| is_vowel(c)) {\n   |                 \
    \            ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `is_vowel` in this scope\n  --> /tmp/tmpk2470d5z.rs:15:26\n   |\n15 |      \
    \       .filter(|c| !is_vowel(c))\n   |                          ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter_map(|c|\n        match c {\n            'a' | 'e'\
    \ | 'i' | 'o' | 'u' => Some(c),\n            _ => None,\n        }\n        .collect::<String>()\n\
    \    ).collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<char>` is not an iterator\n   --> /tmp/tmp96oq5ugm.rs:18:10\n\
    \    |\n18  |           .collect::<String>()\n    |            ^^^^^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if let Some(ref mut s) = text {\n        let mut vowels = String::new();\n\
    \        for &letter in s.chars() {\n            if letter == 'a' || letter ==\
    \ 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n                vowels.push_str(&letter);\n\
    \            }\n        }\n        String::from(&vowels)\n    } else {\n     \
    \   String::from(\"\")\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcfw_z4sc.rs:13:12\n   |\n\
    13 |     if let Some(ref mut s) = text {\n   |            ^^^^^^^^^^^^^^^   ----\
    \ this expression has type `String`\n   |            |\n   |            expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<_>`\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n  --> /tmp/tmpcfw_z4sc.rs:15:14\n\
    \   |\n15 |         for &letter in s.chars() {\n   |              ^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\n\nerror[E0277]:\
    \ can't compare `str` with `char`\n  --> /tmp/tmpcfw_z4sc.rs:16:23\n   |\n16 |\
    \             if letter == 'a' || letter == 'e' || letter == 'i' || letter ==\
    \ 'o' || letter == 'u' {\n   |                       ^^ no implementation for\
    \ `str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `str` with `char`\n  --> /tmp/tmpcfw_z4sc.rs:16:40\n   |\n16 |             if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n   |                                        ^^ no implementation for\
    \ `str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \         "
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if let Some(vowels) = VOWELS.iter().filter(|v| text.contains(v)).next()\
    \ {\n        return text.trim_suffix(vowels.len());\n    }\n\n    text\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmp6nx1cse9.rs:13:27\n\
    \   |\n13 |     if let Some(vowels) = VOWELS.iter().filter(|v| text.contains(v)).next()\
    \ {\n   |                           ^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `trim_suffix` found for struct `String` in the current scope\n\
    \  --> /tmp/tmp6nx1cse9.rs:14:21\n   |\n14 |         return text.trim_suffix(vowels.len());\n\
    \   |                     ^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `strip_suffix`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        String::from(\"\")\n    } else {\n    \
    \    text.chars()\n            .filter(|c| !c.is_ascii_lowercase())\n        \
    \    .collect()\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp53k9uujz.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text).to_string()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpv5_3ufv8.rs:13:5\n   |\n13 |     remove_vowels_impl(text).to_string()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = String::new();\n    for (i, char) in text.chars().enumerate()\
    \ {\n        if !CHAR_Vowels.contains(char) {\n            vowels.append(char);\n\
    \        }\n    }\n    vowels\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `CHAR_Vowels` in this scope\n  --> /tmp/tmpa3q7_c5y.rs:15:13\n\
    \   |\n15 |         if !CHAR_Vowels.contains(char) {\n   |             ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `append` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpa3q7_c5y.rs:16:20\n   |\n\
    16 |             vowels.append(char);\n   |                    ^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| *c !='a' && *c !='e' && *c !='i' && *c !='o'\
    \ && *c !='u'\n        && *c !='y').collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpoe9iyp7p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::with_capacity(text.len());\n    for (i, c) in\
    \ text.chars().enumerate() {\n        if !c.is_vowel() {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpv2ownbos.rs:15:15\n   |\n15 |         if !c.is_vowel()\
    \ {\n   |               ^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut to_return = text;\n    for vowel in VOWELS.iter() {\n       \
    \ to_return = to_return.strip_prefix(vowel);\n    }\n    for vowel in VOWELS.iter()\
    \ {\n        to_return = to_return.strip_suffix(vowel);\n    }\n    to_return\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpkxqety8r.rs:14:18\n\
    \   |\n14 |     for vowel in VOWELS.iter() {\n   |                  ^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `VOWELS` in this scope\n\
    \  --> /tmp/tmpkxqety8r.rs:17:18\n   |\n17 |     for vowel in VOWELS.iter() {\n\
    \   |                  ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkxqety8r.rs:15:21\n   |\n13 |     let mut to_return = text;\n\
    \   |                         ---- expected due to this value\n14 |     for vowel\
    \ in VOWELS.iter() {\n15 |         to_return = to_return.strip_prefix(vowel);\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found enum `Option`\n   |\n   = note: expected struct `String`\n           \
    \     found enum `Option<&str>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkxqety8r.rs:18:21\n\
    \   |\n13 |     let mut to_return = text;\n   |                         ---- expected\
    \ due to this value\n...\n18 |         to_return = to_return.strip_suffix(vowel);\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found enum `Option`\n   |\n   = note: expected struct `String`\n           \
    \     found enum `Option<&str>`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_helper(text, 0, text.len())\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpgaslq75m.rs:13:5\n   |\n13 |     remove_vowels_helper(text, 0,\
    \ text.len())\n   |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result: String = text;\n\n    for ch in &mut result {\n     \
    \   if !is_vowel(ch) {\n            *ch = char::to_upper(ch);\n        }\n   \
    \ }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp39wqhgrd.rs:16:13\n\
    \   |\n16 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp39wqhgrd.rs:15:15\n\
    \   |\n15 |     for ch in &mut result {\n   |               ^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `&mut String`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&mut\
    \ String`\n\nerror[E0599]: no function or associated item named `to_upper` found\
    \ for type `char` in the current scope\n  --> /tmp/tmp39wqhgrd.rs:17:25\n   |\n\
    17 |             *ch = char::to_upper(ch);\n   |                         ^^^^^^^^\n\
    \   |                         |\n   |                         function or associated\
    \ item not found in `char`\n   |                         help: there is an associated\
    \ function with a similar name: `to_uppercase`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut input = text.to_owned();\n    let mut vowels = String::new();\n\
    \n    if input.chars().any(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n        vowels.push_str(\"a\");\n    }\n\n    if input.chars().any(|c|\
    \ c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n        vowels.push_str(\"\
    A\");\n    }\n\n    if input.chars().any(|c| c == 'b' || c == 'c' || c == 'd'\
    \ || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c\
    \ == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'z') {\n        vowels.push_str(\"\
    b\");\n    }\n\n    if input.chars().any(|c| c == 'B' || c == 'C' || c == 'D'\
    \ || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c\
    \ == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T'\
    \ || c == 'V' || c == 'W' || c == 'X' || c == 'Z') {\n        vowels.push_str(\"\
    B\");\n    }\n\n    if input.chars().any(|c| c == 'y' || c == 'z') {\n       \
    \ vowels.push_str(\"y\");\n    }\n\n    if input.chars().any(|c| c == 'Y' || c\
    \ == 'Z') {\n        vowels.push_str(\"Y\");\n    }\n\n    if vowels.is_empty()\
    \ {\n        input = input.remove(0);\n    }\n\n    input.remove(0) + &vowels\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcxsk512e.rs:41:17\n   |\n\
    13 |     let mut input = text.to_owned();\n   |                     ---------------\
    \ expected due to this value\n...\n41 |         input = input.remove(0);\n   |\
    \                 ^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                 |\n   |                 expected struct `String`, found\
    \ `char`\n\nerror[E0369]: cannot add `&String` to `char`\n  --> /tmp/tmpcxsk512e.rs:44:21\n\
    \   |\n44 |     input.remove(0) + &vowels\n   |     --------------- ^ -------\
    \ &String\n   |     |\n   |     char\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_repeated_chars(text, remove_vowels_fn);\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_repeated_chars` in this scope\n\
    \  --> /tmp/tmpdm8oipwn.rs:13:5\n   |\n13 |     remove_repeated_chars(text, remove_vowels_fn);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `remove_vowels_fn` in this scope\n  --> /tmp/tmpdm8oipwn.rs:13:33\n\
    \   |\n13 |     remove_repeated_chars(text, remove_vowels_fn);\n   |         \
    \                        ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdm8oipwn.rs:12:35\n   |\n12 | fn remove_vowels(text:\
    \ String) -> String {\n   |    -------------                  ^^^^^^ expected\
    \ struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        return text;\n    }\n\n    let mut vowels\
    \ = String::new();\n    let mut text_without_vowels = text;\n\n    for c in text.chars()\
    \ {\n        if c.is_uppercase() {\n            vowels.push_str(&c.to_lowercase());\n\
    \        } else {\n            vowels.push_str(&c.to_uppercase());\n        }\n\
    \    }\n\n    while vowels.len() > 0 {\n        let index = text_without_vowels.chars().next().unwrap();\n\
    \n        // if the letter at current index in vowels is uppercase, then replace\
    \ it\n        // by its lowercase\n        if text_without_vowels[index].is_uppercase()\
    \ {\n            text_without_vowels[index] = text_without_vowels[index].to_lowercase();\n\
    \        }\n    }\n\n    text_without_vowels\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp06q5e8s0.rs:22:29\n   |\n\
    22 |             vowels.push_str(&c.to_lowercase());\n   |                   \
    \          ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&ToLowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp06q5e8s0.rs:24:29\n   |\n24 |\
    \             vowels.push_str(&c.to_uppercase());\n   |                      \
    \       ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n \
    \  = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `char`\n  --> /tmp/tmp06q5e8s0.rs:33:12\n\
    \   |\n33 |         if text_without_vowels[index].is_uppercase() {\n   |     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `char`\n   |\n\
    \   = help: the trait `Index<char>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `char`\n  --> /tmp/tmp06q5e8s0.rs:34:13\n\
    \   |\n34 |             text_without_vowels[index] = text_without_vowels[index].to_lowercase();\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `char`\n\
    \   |\n   = help: the trait `Index<char>` is not implemented for `String`\n  \
    \ = help: the following other types implement trait `Index<Idx>`:\n          \
    \   <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ I"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl::<S>(text)\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmptsvedh05.rs:13:5\n   |\n13 |     remove_vowels_impl::<S>(text)\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0412]: cannot find\
    \ type `S` in this scope\n  --> /tmp/tmptsvedh05.rs:13:26\n   |\n12 | fn remove_vowels(text:\
    \ String) -> String {\n   |                 - help: you might be missing a type\
    \ parameter: `<S>`\n13 |     remove_vowels_impl::<S>(text)\n   |             \
    \             ^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0412, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text\n        .chars()\n        .filter(|c| !Vowels.contains(c))\n  \
    \      .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `Vowels` in this scope\n  --> /tmp/tmpga4yd3ex.rs:15:22\n\
    \   |\n15 |         .filter(|c| !Vowels.contains(c))\n   |                   \
    \   ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text).to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpj845y1w4.rs:13:5\n   |\n13 |     remove_vowels_impl(text).to_owned()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    String::from(text)\n        .to_lowercase()\n        .chars()\n     \
    \   .filter_map(|c| if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n            Some(c)\n        } else {\n            None\n        })\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"aei\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp8rikbsv7.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.to_lowercase().replace(&mut String::new(), |&mut s| {\n        use\
    \ std::ascii::AsciiExt;\n        match s.as_bytes().iter().any(|&c| c >= b'a'\
    \ && c <= b'z' || c >= b'A' && c <= b'Z') {\n            false => (),\n      \
    \      _ => (),\n        }\n        \"\".to_string()\n    })\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::ascii::AsciiExt`\n  --> /tmp/tmpb6csdbt9.rs:14:13\n\
    \   |\n14 |         use std::ascii::AsciiExt;\n   |             ^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nwarning: use of deprecated\
    \ trait `std::ascii::AsciiExt`: use inherent methods instead\n  --> /tmp/tmpb6csdbt9.rs:14:25\n\
    \   |\n14 |         use std::ascii::AsciiExt;\n   |                         ^^^^^^^^\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n   --> /tmp/tmpb6csdbt9.rs:13:33\n\
    \    |\n13  |     text.to_lowercase().replace(&mut String::new(), |&mut s| {\n\
    \    |                         ------- ^^^^^^^^^^^^^^^^^^ expected an `FnMut<(char,)>`\
    \ closure, found `String`\n    |                         |\n    |            \
    \             required by a bound introduced by this call\n    |\n    = help:\
    \ the trait `FnMut<(char,)>` is not implemented for `String`\n    = help: the\
    \ following other types implement trait `Pattern<'a>`:\n              &'b String\n\
    \              &'b str\n              &'c &'b str\n    = note: required because\
    \ of the requirements on the impl of `FnOnce<(char,)>` for `&mut String`\n   \
    \ = note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `&mut String`\nnote: required by a bound in `str::<impl str>::replace`\n\nerror:\
    \ aborting due to previous error; 2 warnings emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpy5p9m10a.rs:13:5\n   |\n13 |     remove_vowels_impl(text)\n   |\
    \     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // remove all vowels from text and create new string\n    let mut new_text\
    \ = text;\n    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove(&mut Vec::from(text.chars()));\n\
    \    new_text.remove(&mut Vec::from(text.chars()));\n    new_text.remove(&mut\
    \ Vec::from(text.chars()));\n    new_text.remove\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `Vec<_, _>: From<Chars<'_>>` is not satisfied\n\
    \  --> /tmp/tmp0cvcjvm4.rs:15:26\n   |\n15 |     new_text.remove(&mut Vec::from(text.chars()));\n\
    \   |                          ^^^^^^^^^ the trait `From<Chars<'_>>` is not implemented\
    \ for `Vec<_, _>`\n   |\n   = help: the following other types implement trait\
    \ `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T,\
    \ A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n         \
    \    <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n\
    \             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T;\
    \ N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0cvcjvm4.rs:15:21\n   |\n15 |     new_text.remove(&mut\
    \ Vec::from(text.chars()));\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `&mut Vec<_, _>`\n   |\n   = note:           expected\
    \ type `usize`\n           found mutable reference `&mut Vec<_, _>`\n\nerror[E0277]:\
    \ the trait bound `Vec<_, _>: From<Chars<'_>>` is not satisfied\n  --> /tmp/tmp0cvcjvm4.rs:16:26\n\
    \   |\n16 |     new_text.remove(&mut Vec::from(text.chars()));\n   |         \
    \                 ^^^^^^^^^ the trait `From<Chars<'_>>` is not implemented for\
    \ `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T,\
    \ A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut\
    \ [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as\
    \ From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8>\
    \ as From<&str>>\n           and 2 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0cvcjvm4.rs:16:21\n   |\n16 |     new_text.remove(&mut Vec::from(text.chars()));\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found\
    \ `&mut Vec<_, _>`\n   |\n   = note:           expected type `usize`\n       \
    \    found mutable reference `&mut Vec<_, _>`\n\nerror["
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_ascii())\n        .filter(|c|\
    \ !c.is_uppercase())\n        .filter(|c| !c.is_lowercase())\n        .map(|c|\
    \ c.to_string())\n        .collect::<String>(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp3gimnfxk.rs:18:10\n     |\n18   |         .collect::<String>(\"\
    \")\n     |          ^^^^^^^           -- supplied 1 argument\n     |        \
    \  |\n     |          expected 0 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c.is_ascii_lowercase() || c.is_ascii_uppercase())\n\
    \        .map(|c| if c.is_ascii_lowercase() then c.to_string().to_lowercase()\
    \ else c.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `then`\n  --> /tmp/tmpsgkw97ga.rs:15:44\n  \
    \ |\n15 |         .map(|c| if c.is_ascii_lowercase() then c.to_string().to_lowercase()\
    \ else c.to_string())\n   |                  --                        ^^^^ expected\
    \ `{`\n   |                  |\n   |                  this `if` expression has\
    \ a condition, but no block\n   |\nhelp: try placing this code inside a block\n\
    \   |\n15 |         .map(|c| if c.is_ascii_lowercase() { then } c.to_string().to_lowercase()\
    \ else c.to_string())\n   |                                            +     \
    \ +\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut s = String::new();\n    for c in text.chars() {\n        if c.is_vowel()\
    \ {\n            continue;\n        }\n        s.push(c.to_string());\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpsszqi5zp.rs:15:14\n   |\n15 |         if c.is_vowel() {\n\
    \   |              ^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsszqi5zp.rs:18:16\n   |\n18 |         s.push(c.to_string());\n\
    \   |                ^^^^^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_inner(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_inner` in this scope\n\
    \  --> /tmp/tmpcd9a8c94.rs:13:5\n   |\n13 |     remove_vowels_inner(text)\n  \
    \ |     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_impl(text.chars()).to_string()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmpo148hate.rs:13:5\n   |\n13 |     remove_vowels_impl(text.chars()).to_string()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter(|c| {\n        match c {\n            c if c.is_ascii_letter()\
    \ => true,\n            c if c.is_ascii_digit() => true,\n            _ => false,\n\
    \        }\n    }).collect::<String>().to_string()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp1rqu0y_9.rs:15:20\n   |\n15 |          \
    \   c if c.is_ascii_letter() => true,\n   |                    ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    if text.is_empty() {\n        return text;\n    }\n    let mut chars\
    \ = text;\n    let mut iter = chars.chars().enumerate();\n    let mut vowel_iters\
    \ = Vowels.iter().cloned();\n    let mut new_chars = String::with_capacity(text.length());\n\
    \    for (i, char) in iter.enumerate() {\n        let vowels = vowel_iters.next();\n\
    \        if vowels.is_none() {\n            new_chars.push_char(char);\n     \
    \       continue;\n        }\n        let vowel = vowels.unwrap();\n        let\
    \ next = iter.next();\n        if next.is_none() {\n            new_chars.push_char(char);\n\
    \            continue;\n        }\n        let other_char = next.unwrap();\n \
    \       if char == vowel || char == other_char {\n            new_chars.push_char(char);\n\
    \        }\n    }\n    new_chars\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `Vowels` in this scope\n  --> /tmp/tmpaqcmnkyk.rs:18:27\n\
    \   |\n18 |     let mut vowel_iters = Vowels.iter().cloned();\n   |          \
    \                 ^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `length` found for struct `String` in the current scope\n  --> /tmp/tmpaqcmnkyk.rs:19:52\n\
    \   |\n19 |     let mut new_chars = String::with_capacity(text.length());\n  \
    \ |                                                    ^^^^^^ help: there is an\
    \ associated function with a similar name: `len`\n\nerror[E0599]: no method named\
    \ `push_char` found for struct `String` in the current scope\n  --> /tmp/tmpaqcmnkyk.rs:23:23\n\
    \   |\n23 |             new_chars.push_char(char);\n   |                     \
    \  ^^^^^^^^^ help: there is an associated function with a similar name: `push_str`\n\
    \nerror[E0599]: no method named `push_char` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpaqcmnkyk.rs:29:23\n   |\n29 |             new_chars.push_char(char);\n\
    \   |                       ^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `push_str`\n\nerror[E0599]: no method named `push_char` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpaqcmnkyk.rs:34:23\n\
    \   |\n34 |             new_chars.push_char(char);\n   |                     \
    \  ^^^^^^^^^ help: there is an associated function with a similar name: `push_str`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text\n        .chars()\n        .filter(|c| c.is_alphabetic() || c ==\
    \ ' ')\n        .map(|c| c.to_lowercase())\n        .filter(|c| !c.is_alphabetic()\
    \ || !c.is_uppercase())\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp5bms03tg.rs:15:44\n\
    \   |\n15 |         .filter(|c| c.is_alphabetic() || c == ' ')\n   |         \
    \                                   ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0599]: no\
    \ method named `is_alphabetic` found for reference `&ToLowercase` in the current\
    \ scope\n  --> /tmp/tmp5bms03tg.rs:17:24\n   |\n17 |         .filter(|c| !c.is_alphabetic()\
    \ || !c.is_uppercase())\n   |                        ^^^^^^^^^^^^^ method not\
    \ found in `&ToLowercase`\n\nerror[E0599]: no method named `is_uppercase` found\
    \ for reference `&ToLowercase` in the current scope\n  --> /tmp/tmp5bms03tg.rs:17:46\n\
    \   |\n17 |         .filter(|c| !c.is_alphabetic() || !c.is_uppercase())\n   |\
    \                                              ^^^^^^^^^^^^ method not found in\
    \ `&ToLowercase`\n\nerror[E0277]: a value of type `String` cannot be built from\
    \ an iterator over elements of type `ToLowercase`\n    --> /tmp/tmp5bms03tg.rs:18:10\n\
    \     |\n18   |         .collect()\n     |          ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=ToLowercase>`\n     |\n     =\
    \ help: the trait `FromIterator<ToLowercase>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut result = String::with_capacity(text.len());\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpt05yfcle.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c.is_uppercase())\n        .filter(|c|\
    \ !c.is_ascii_lowercase())\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpae4yhqj0.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .map(|c|\
    \ c.to_ascii_lowercase())\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpjp5q3oc8.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_helper(text, |char| char != 'a' && char != 'e' && char\
    \ != 'i' && char != 'o' && char != 'u')\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmp7znk1ejj.rs:13:5\n   |\n13 |     remove_vowels_helper(text, |char|\
    \ char != 'a' && char != 'e' && char != 'i' && char != 'o' && char != 'u')\n \
    \  |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut vowels = String::new();\n    vowels.push_str(\"a\");\n    vowels.push_str(\"\
    e\");\n    vowels.push_str(\"i\");\n    vowels.push_str(\"o\");\n    vowels.push_str(\"\
    u\");\n    text.chars().filter(|c| !vowels.contains(&c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n    --> /tmp/tmpeyv72yiw.rs:19:46\n\
    \     |\n19   |     text.chars().filter(|c| !vowels.contains(&c)).collect()\n\
    \     |                                     -------- ^^ expected an `Fn<(char,)>`\
    \ closure, found `char`\n     |                                     |\n     |\
    \                                     required by a bound introduced by this call\n\
    \     |\n     = help: the trait `Fn<(char,)>` is not implemented for `char`\n\
    \     = help: the trait `Pattern<'a>` is implemented for `char`\n     = note:\
    \ required because of the requirements on the impl of `FnOnce<(char,)>` for `&char`\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `&&char`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    remove_vowels_helper(text, |i| |j| |c: char| c.is_vowel())\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpprhg27_0.rs:13:5\n   |\n13 |     remove_vowels_helper(text, |i|\
    \ |j| |c: char| c.is_vowel())\n   |     ^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0599]: no method named `is_vowel` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpprhg27_0.rs:13:52\n   |\n13 |     remove_vowels_helper(text,\
    \ |i| |j| |c: char| c.is_vowel())\n   |                                      \
    \              ^^^^^^^^ method not found in `char`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c !=\
    \ 'U')\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpg6b6idir.rs:14:23\n\
    \   |\n14 |         .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n   |\
    \                       ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmpg6b6idir.rs:14:35\n   |\n14 |         .filter(|c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c !=\
    \ 'E' && c != 'I' && c != 'O' && c != 'U')\n   |                             \
    \      ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpg6b6idir.rs:14:47\n\
    \   |\n14 |         .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n   |\
    \                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpg6b6idir.rs:14:59\n   |\n14\
    \ |         .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n   |         \
    \                                                  ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpg6b6idir.rs:14:71\n   |\n14\
    \ |         .filter(|c| c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n   |         \
    \           "
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    let mut chars = text.chars();\n    let mut result = String::from(\"\"\
    );\n    while let Some(next) = chars.next() {\n        match next {\n        \
    \    None => (),\n            Some(c) if !c.is_vowel() => {\n                result.append(c);\n\
    \            }\n            _ => {\n                chars = chars.by_ref().chain(text.chars().skip(1));\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppav166f5.rs:17:13\n   |\n\
    16 |         match next {\n   |               ---- this expression has type `char`\n\
    17 |             None => (),\n   |             ^^^^ expected `char`, found enum\
    \ `Option`\n   |\n   = note: expected type `char`\n              found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppav166f5.rs:18:13\n   |\n16 |\
    \         match next {\n   |               ---- this expression has type `char`\n\
    17 |             None => (),\n18 |             Some(c) if !c.is_vowel() => {\n\
    \   |             ^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note:\
    \ expected type `char`\n              found enum `Option<_>`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmppav166f5.rs:19:24\n   |\n19 |                 result.append(c);\n  \
    \ |                        ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppav166f5.rs:22:25\n   |\n13 |     let mut chars\
    \ = text.chars();\n   |                     ------------ expected due to this\
    \ value\n...\n22 |                 chars = chars.by_ref().chain(text.chars().skip(1));\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Chars`, found struct `std::iter::Chain`\n   |\n   = note: expected struct\
    \ `Chars<'_>`\n              found struct `std::iter::Chain<&mut Chars<'_>, Skip<Chars<'_>>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c|\n            c.is_ascii_lowercase()\
    \ ||\n                match c {\n                    'a', 'e', 'i', 'o', 'u' =>\
    \ true,\n                    _ => false,\n                })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmp7yu6cx0h.rs:17:24\n   |\n\
    17 |                     'a', 'e', 'i', 'o', 'u' => true,\n   |              \
    \          ^\n   |\nhelp: try adding parentheses to match on a tuple...\n   |\n\
    17 |                     ('a', 'e', 'i', 'o', 'u') => true,\n   |            \
    \         +                       +\nhelp: ...or a vertical bar to match on multiple\
    \ alternatives\n   |\n17 |                     'a' | 'e' | 'i' | 'o' | 'u' =>\
    \ true,\n   |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text\n        .chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpwokd_ye2.rs:15:22\n\
    \   |\n15 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text\n        .chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpwokd_ye2.rs:15:22\n\
    \   |\n15 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    // check input\n    if text.len() == 0 {\n        return text;\n    }\n\
    \    let mut input = text;\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'];\n    loop {\n        // find first vowel in input\n\
    \        let mut start = 0;\n        let mut end = 0;\n        while start < input.len()\
    \ {\n            end = input.rfind('a', start);\n            if end == None\n\
    \                || end == start\n                || input[end as usize] == 'z'\n\
    \            {\n                break;\n            }\n            start = end;\n\
    \        }\n        if start == input.len() {\n            break;\n        }\n\
    \        let mut result = String::new();\n        let mut i = start;\n       \
    \ while i < (start + 1) {\n            let mut j = i;\n            while j < (i\
    \ + 1) {\n                if input[j] != 'a' && input[j] != 'e' && input[j] !=\
    \ 'i' && input[j] != 'o' && input[j] != 'u' {\n                    break;\n  \
    \              }\n                j += 1;\n            }\n            if j ==\
    \ i {\n                break;\n            }\n            result.push(input[j\
    \ - start as usize]);\n            i += 1;\n        }\n        if result.len()\
    \ == 0 {\n            return text;\n        }\n        input.truncate(end);\n\
    \        input.push_str(&mut result);\n    }\n    text\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmper7va7p4.rs:24:25\n     |\n24   |             end = input.rfind('a',\
    \ start);\n     |                         ^^^^^ ---  ----- supplied 2 arguments\n\
    \     |                         |\n     |                         expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmper7va7p4.rs:24:19\n   |\n22 |         let mut end = 0;\n   |  \
    \                     - expected due to this value\n23 |         while start <\
    \ input.len() {\n24 |             end = input.rfind('a', start);\n   |       \
    \            ^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found enum `Option`\n \
    \  |\n   = note: expected type `{integer}`\n              found enum `Option<usize>`\n\
    \nerror[E0277]: can't compare `{integer}` with `Option<_>`\n  --> /tmp/tmper7va7p4.rs:25:20\n\
    \   |\n25 |             if end == None\n   |                    ^^ no implementation\
    \ for `{integer} == Option<_>`\n   |\n   = help: the trait `PartialEq<Option<_>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmper7va7p4.rs:27:20\n   |\n27 |         \
    \        || input[end as usize] == 'z'\n   |                    ^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be inde"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter_map(|c| {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            None\n        } else {\n        \
    \    Some(c)\n        }\n    }).collect::<String>(\"\")\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpuk5ftd4n.rs:19:8\n     |\n19   |     }).collect::<String>(\"\"\
    )\n     |        ^^^^^^^           -- supplied 1 argument\n     |        |\n \
    \    |        expected 0 arguments\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    match text {\n        \"\" => text,\n        _ => text.chars().filter(|&c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').collect()\n    }\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbg_6uhdy.rs:14:9\n   |\n\
    13 |     match text {\n   |           ---- this expression has type `String`\n\
    14 |         \"\" => text,\n   |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars()\n        .filter(|c| !c.is_vowel())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp14bnbyfp.rs:14:24\n   |\n14 |         .filter(|c|\
    \ !c.is_vowel())\n   |                        ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 101
  program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n\
    /// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n\
    /// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>>\
    \ remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"\
    zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String\
    \ {\n    text.chars().filter_map(|c|\n        match c {\n            'a' => Some('c'),\n\
    \            'e' => Some('g'),\n            'i' => Some('k'),\n            'o'\
    \ => Some('j'),\n            'u' => Some('z'),\n            _ => None,\n     \
    \   })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cgk\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpbrzjqkkz.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659978166
