language: rs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    while shift > 0 {\n        if shift < x.len() {\n          \
    \  s.push_str(&x[shift % x.len()]);\n        } else {\n            s.push_str(&format!(\"\
    {:0>2}\", x[x.len() - 1]));\n            carry = 1;\n        }\n        shift\
    \ /= 10;\n    }\n    if carry > 0 {\n        s.push('1');\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpw3lj5la1.rs:12:22\n   |\n12 |         if shift < x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpw3lj5la1.rs:13:37\n\
    \   |\n13 |             s.push_str(&x[shift % x.len()]);\n   |               \
    \                      ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpw3lj5la1.rs:13:25\n   |\n\
    13 |             s.push_str(&x[shift % x.len()]);\n   |                      \
    \   ^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpw3lj5la1.rs:15:47\n   |\n15 |          \
    \   s.push_str(&format!(\"{:0>2}\", x[x.len() - 1]));\n   |                  \
    \                             ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift < x.len() {\n        let mut\
    \ result = String::new();\n        let mut shift = shift;\n        let mut x =\
    \ x;\n\n        while shift > 0 {\n            if shift < x.len() {\n        \
    \        result += '0' + (x % 10);\n            }\n            x /= 10;\n    \
    \        shift -= 1;\n        }\n        result += '0' + x;\n    }\n    String::from(result)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `result` in this scope\n  --> /tmp/tmp1g08ngjm.rs:23:18\n\
    \   |\n23 |     String::from(result)\n   |                  ^^^^^^ not found in\
    \ this scope\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp1g08ngjm.rs:9:18\n  |\n9 |     if shift < x.len()\
    \ {\n  |                  ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmp1g08ngjm.rs:15:26\n\
    \   |\n15 |             if shift < x.len() {\n   |                          ^^^\
    \ method not found in `isize`\n\nerror[E0369]: cannot add `isize` to `char`\n\
    \  --> /tmp/tmp1g08ngjm.rs:16:31\n   |\n16 |                 result += '0' + (x\
    \ % 10);\n   |                           --- ^ -------- isize\n   |          \
    \                 |\n   |                           char\n\nerror[E0369]: cannot\
    \ add `isize` to `char`\n  --> /tmp/tmp1g08ngjm.rs:21:23\n   |\n21 |         result\
    \ += '0' + x;\n   |                   --- ^ - isize\n   |                   |\n\
    \   |                   char\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0369, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    if\
    \ shift < x.len() {\n        let mut reverse = x.len() - 1;\n        while reverse\
    \ > shift {\n            result.append(&x[0..reverse]);\n            reverse =\
    \ reverse - 1;\n        }\n        result.append(&x[0..shift]);\n    } else {\n\
    \        result.reverse();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpz763zddy.rs:10:18\n   |\n10 |     if shift < x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpz763zddy.rs:11:29\n\
    \   |\n11 |         let mut reverse = x.len() - 1;\n   |                     \
    \        ^^^ method not found in `isize`\n\nerror[E0599]: no method named `append`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpz763zddy.rs:13:20\n\
    \   |\n13 |             result.append(&x[0..reverse]);\n   |                 \
    \   ^^^^^^ method not found in `String`\n\nerror[E0608]: cannot index into a value\
    \ of type `isize`\n  --> /tmp/tmpz763zddy.rs:13:28\n   |\n13 |             result.append(&x[0..reverse]);\n\
    \   |                            ^^^^^^^^^^^^^\n\nerror[E0599]: no method named\
    \ `append` found for struct `String` in the current scope\n  --> /tmp/tmpz763zddy.rs:16:16\n\
    \   |\n16 |         result.append(&x[0..shift]);\n   |                ^^^^^^ method\
    \ not found in `String`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpz763zddy.rs:16:24\n   |\n16 |         result.append(&x[0..shift]);\n\
    \   |                        ^^^^^^^^^^^\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpz763zddy.rs:18:16\n\
    \   |\n18 |         result.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift >= x.len() {\n        x.to_string().reverse()\n\
    \    } else {\n        x.to_string().split_at(shift)\n            .map(|s| s[..shift])\n\
    \            .collect::<Vec<_>>()\n            .join()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpdxrts4wy.rs:9:19\n  |\n9 |     if shift >= x.len() {\n \
    \ |                   ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpdxrts4wy.rs:10:23\n\
    \   |\n10 |         x.to_string().reverse()\n   |                       ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdxrts4wy.rs:12:32\n   |\n12 |         x.to_string().split_at(shift)\n\
    \   |                                ^^^^^ expected `usize`, found `isize`\n \
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |         x.to_string().split_at(shift.try_into().unwrap())\n\
    \   |                                     ++++++++++++++++++++\n\nerror[E0599]:\
    \ `(&str, &str)` is not an iterator\n  --> /tmp/tmpdxrts4wy.rs:13:14\n   |\n13\
    \ |             .map(|s| s[..shift])\n   |              ^^^ `(&str, &str)` is\
    \ not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(&str, &str): Iterator`\n           which is required by `&mut (&str,\
    \ &str): Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift < x.len() {\n        let mut\
    \ result = \"0\";\n        result += &x[..(x.len() - shift)];\n        result\
    \ += &x[shift..];\n        result\n    } else {\n        \"0\".repeat(shift) +\
    \ &x[..x.len()-shift]\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpwomrg8nm.rs:9:18\n  |\n9 |     if shift < x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpwomrg8nm.rs:11:27\n\
    \   |\n11 |         result += &x[..(x.len() - shift)];\n   |                 \
    \          ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpwomrg8nm.rs:11:20\n   |\n11 |       \
    \  result += &x[..(x.len() - shift)];\n   |                    ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpwomrg8nm.rs:12:20\n\
    \   |\n12 |         result += &x[shift..];\n   |                    ^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwomrg8nm.rs:13:9\n   |\n8  | fn\
    \ circular_shift(x: isize, shift: isize) -> String {\n   |                   \
    \                           ------ expected `String` because of return type\n\
    ...\n13 |         result\n   |         ^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |         |\n   |         expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwomrg8nm.rs:15:20\n\
    \   |\n15 |         \"0\".repeat(shift) + &x[..x.len()-shift]\n   |          \
    \          ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    15 |         \"0\".repeat(shift.try_into().unwrap()) + &x[..x.len()-shift]\n \
    \  |                         ++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmpwomrg8nm.rs:15:36\n\
    \   |\n15 |         \"0\".repeat(shift) + &x[..x.len()-shift]\n   |          \
    \                          ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpwomrg8nm.rs:15:30\n   |\n\
    15 |         \"0\".repeat(shift) + &x[..x.len()-shift]\n   |                 \
    \             ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 8 pre"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::with_capacity(x +\
    \ 1);\n    let mut n = x.to_str().unwrap();\n    loop {\n        if shift > n.len()\
    \ {\n            return s.reverse();\n        }\n        if shift >= 0 {\n   \
    \         s.push_str(&n[..shift]);\n        } else {\n            s.push_str(&n[shift..]);\n\
    \        }\n        shift -= 1;\n        if n == 0 {\n            break;\n   \
    \     }\n        n = *n / 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyic1ioo.rs:9:39\n  |\n9 |\
    \     let mut s = String::with_capacity(x + 1);\n  |                         \
    \              ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     let mut s = String::with_capacity((x + 1).try_into().unwrap());\n  | \
    \                                      +     +++++++++++++++++++++\n\nerror[E0599]:\
    \ no method named `to_str` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpbyic1ioo.rs:10:19\n   |\n10 |     let mut n = x.to_str().unwrap();\n\
    \   |                   ^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpbyic1ioo.rs:13:22\n   |\n13 |             return s.reverse();\n   |\
    \                      ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift < 0 {\n        let mut s = String::new();\n\
    \        for &d in x.chars() {\n            s.push_str(&*d);\n        }\n    \
    \    s.reverse();\n        return s;\n    }\n    if shift > x.len() {\n      \
    \  let mut s = String::new();\n        for &d in x.chars().rev() {\n         \
    \   s.push_str(&*d);\n        }\n        return s;\n    }\n    let mut s = String::new();\n\
    \    s.push_str(&x[shift..]);\n    s.push_str(&x[0..-shift]);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp2pempyvr.rs:11:21\n   |\n11 |         for &d in x.chars()\
    \ {\n   |                     ^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp2pempyvr.rs:14:11\n   |\n14 |         s.reverse();\n   |       \
    \    ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp2pempyvr.rs:17:18\n   |\n17 |     if shift > x.len() {\n   |  \
    \                ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `chars` found for type `isize` in the current scope\n  --> /tmp/tmp2pempyvr.rs:19:21\n\
    \   |\n19 |         for &d in x.chars().rev() {\n   |                     ^^^^^\
    \ method not found in `isize`\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmp2pempyvr.rs:25:17\n   |\n25 |     s.push_str(&x[shift..]);\n\
    \   |                 ^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of\
    \ type `isize`\n  --> /tmp/tmp2pempyvr.rs:26:17\n   |\n26 |     s.push_str(&x[0..-shift]);\n\
    \   |                 ^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ num = x;\n    loop {\n        s += num % 10 + '0';\n        num -= num % 10;\n\
    \        if num == 0 {\n            break;\n        }\n        if num > 0 {\n\
    \            s += '0';\n        }\n    }\n    let len = s.len();\n    loop {\n\
    \        if shift > len {\n            shift -= len;\n            s += '0';\n\
    \        } else {\n            break;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmpg_5b1hi3.rs:12:23\n\
    \   |\n12 |         s += num % 10 + '0';\n   |                       ^ no implementation\
    \ for `isize + char`\n   |\n   = help: the trait `Add<char>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg_5b1hi3.rs:18:18\n\
    \   |\n18 |             s += '0';\n   |                  ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n18 |             s += \"0\";\n   |                  ~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg_5b1hi3.rs:23:20\n   |\n23 |         if shift\
    \ > len {\n   |                    ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n23 |         if shift > len.try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg_5b1hi3.rs:24:22\n   |\n24 |             shift -= len;\n   | \
    \                     ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ subtract-assign `usize` from `isize`\n  --> /tmp/tmpg_5b1hi3.rs:24:19\n   |\n\
    24 |             shift -= len;\n   |                   ^^ no implementation for\
    \ `isize -= usize`\n   |\n   = help: the trait `SubAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n     "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    debug_assert!(shift >= 0);\n    let mut\
    \ s = String::new();\n    let mut len = x.len();\n    for c in x.chars().take(len)\
    \ {\n        s.push_str(c.to_string());\n        if len > shift {\n          \
    \  s.push_str(&c[len - shift..].to_string());\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpfusnkbxc.rs:11:21\n   |\n11 |     let mut len = x.len();\n\
    \   |                     ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `chars` found for type `isize` in the current scope\n  --> /tmp/tmpfusnkbxc.rs:12:16\n\
    \   |\n12 |     for c in x.chars().take(len) {\n   |                ^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if x <= 0 {\n        return String::new();\n\
    \    }\n    let mut result = String::new();\n    let mut digits = x;\n    while\
    \ digits > 0 {\n        let last_digit = digits % 10;\n        result .push_str(&last_digit.to_string());\n\
    \        digits /= 10;\n    }\n    let mut shifts = shift;\n    while shifts >\
    \ 0 {\n        let last_digit = digits % 10;\n        result .push_str(&last_digit.to_string());\n\
    \        digits /= 10;\n        shifts /= 10;\n    }\n    result.reverse()\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpiy2jvjkh.rs:26:12\n   |\n26 |     result.reverse()\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    while\
    \ x != 0 {\n        if x & 1 != 0 {\n            s.push('1');\n        } else\
    \ {\n            s.push('0');\n        }\n        x >>= 1;\n    }\n    if shift\
    \ > s.len() {\n        s[s.len() - shift - 1] = '1';\n    } else {\n        s[shift]\
    \ = '1';\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjrcy_1j1.rs:18:16\n   |\n\
    18 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjrcy_1j1.rs:19:21\n   |\n19 |         s[s.len() - shift\
    \ - 1] = '1';\n   |                     ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpjrcy_1j1.rs:19:19\n\
    \   |\n19 |         s[s.len() - shift - 1] = '1';\n   |                   ^ no\
    \ implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpjrcy_1j1.rs:19:9\n   |\n19 |         s[s.len() - shift\
    \ - 1] = '1';\n   |         ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpjrcy_1j1.rs:21:9\n   |\n21 |         s[shift] = '1';\n   |    \
    \     ^^^^^^^^ `String` cannot be indexed by `isize`\n "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string().chars().nth(shift);\n\
    \    digits.reverse();\n    String::from(digits.as_slice())\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq0zm8mnw.rs:9:48\n  |\n9 |\
    \     let mut digits = x.to_string().chars().nth(shift);\n  |                \
    \                                ^^^^^ expected `usize`, found `isize`\n  |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n  |\n9 |     let mut digits = x.to_string().chars().nth(shift.try_into().unwrap());\n\
    \  |                                                     ++++++++++++++++++++\n\
    \nerror[E0599]: no method named `reverse` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpq0zm8mnw.rs:10:12\n   |\n10 |     digits.reverse();\n \
    \  |            ^^^^^^^ method not found in `Option<char>`\n\nerror[E0599]: no\
    \ method named `as_slice` found for enum `Option` in the current scope\n  -->\
    \ /tmp/tmpq0zm8mnw.rs:11:25\n   |\n11 |     String::from(digits.as_slice())\n\
    \   |                         ^^^^^^^^ method not found in `Option<char>`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result: String = String::new();\n\
    \    for d in x.to_digits() {\n        if d >= shift {\n            result.push((d\
    \ - shift).to_string());\n        } else {\n            result.push(d);\n    \
    \    }\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpi0w0vu53.rs:10:16\n   |\n10 |     for d in x.to_digits()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ can't compare `char` with `isize`\n  --> /tmp/tmpi0w0vu53.rs:11:14\n   |\n11\
    \ |         if d >= shift {\n   |              ^^ no implementation for `char\
    \ < isize` and `char > isize`\n   |\n   = help: the trait `PartialOrd<isize>`\
    \ is not implemented for `char`\n   = help: the trait `PartialOrd` is implemented\
    \ for `char`\n\nerror[E0277]: cannot subtract `isize` from `char`\n  --> /tmp/tmpi0w0vu53.rs:12:28\n\
    \   |\n12 |             result.push((d - shift).to_string());\n   |          \
    \                  ^ no implementation for `char - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `char`\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpi0w0vu53.rs:17:12\n\
    \   |\n17 |     result.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift == 0 { return String::from(x);\
    \ }\n    if shift < 0 { x.to_string().reverse(); return circular_shift(x, -shift);\
    \ }\n    let mut rs = x.to_string();\n    rs.reverse(move |idx| {\n        if\
    \ idx == 0 { return 0; }\n        if idx > shift { idx -= shift; }\n        let\
    \ result = rs.chars().nth(idx).unwrap() as u8;\n        let carry = if result\
    \ != 0 { (result as usize + 1) & 255 } else { 0 };\n        if carry > 0 {\n \
    \           rs = String::from_utf8(vec![0x80].iter().map(|x| *x).collect()).unwrap();\n\
    \        }\n        result\n    });\n    rs.reverse();\n    rs\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \ --> /tmp/tmpqcqrrd73.rs:9:28\n  |\n9 |     if shift == 0 { return String::from(x);\
    \ }\n  |                            ^^^^^^^^^^^^ the trait `From<isize>` is not\
    \ implemented for `String`\n  |\n  = help: the following other types implement\
    \ trait `From<T>`:\n            <String as From<&String>>\n            <String\
    \ as From<&mut str>>\n            <String as From<&str>>\n            <String\
    \ as From<Box<str>>>\n            <String as From<Cow<'a, str>>>\n           \
    \ <String as From<char>>\n\nerror[E0599]: no method named `reverse` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpqcqrrd73.rs:10:34\n   |\n\
    10 |     if shift < 0 { x.to_string().reverse(); return circular_shift(x, -shift);\
    \ }\n   |                                  ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpqcqrrd73.rs:12:8\n\
    \   |\n12 |     rs.reverse(move |idx| {\n   |        ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror[E0277]: can't compare\
    \ `usize` with `isize`\n  --> /tmp/tmpqcqrrd73.rs:14:16\n   |\n14 |         if\
    \ idx > shift { idx -= shift; }\n   |                ^ no implementation for `usize\
    \ < isize` and `usize > isize`\n   |\n   = help: the trait `PartialOrd<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot subtract-assign\
    \ `isize` from `usize`\n  --> /tmp/tmpqcqrrd73.rs:14:30\n   |\n14 |         if\
    \ idx > shift { idx -= shift; }\n   |                              ^^ no implementation\
    \ for `usize -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if x <= shift {\n        String::from(format!(\"\
    {}\", x))\n    } else {\n        let mut s = String::from(\"\");\n        while\
    \ x != 0 {\n            s += '0';\n            x >>= shift;\n        }\n     \
    \   s\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1f9wxyrb.rs:14:18\n   |\n\
    14 |             s += '0';\n   |                  ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    14 |             s += \"0\";\n   |                  ~~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    digits.reserve(x\
    \ + shift);\n    let mut power = shift % x;\n    for i in 0..(x + shift) {\n \
    \       if power < 0 {\n            digits.insert(0, digits.pop());\n        \
    \    power = -power;\n        }\n        digits.insert(i, digits[x - 1 - i]);\n\
    \        power += x;\n    }\n    digits\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiixpo1u3.rs:10:20\n   |\n\
    10 |     digits.reserve(x + shift);\n   |                    ^^^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     digits.reserve((x\
    \ + shift).try_into().unwrap());\n   |                    +         +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiixpo1u3.rs:14:30\n   |\n14 |\
    \             digits.insert(0, digits.pop());\n   |                          \
    \    ^^^^^^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<char>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiixpo1u3.rs:17:23\n   |\n17 |         digits.insert(i,\
    \ digits[x - 1 - i]);\n   |                       ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |         digits.insert(i.try_into().unwrap(), digits[x\
    \ - 1 - i]);\n   |                        ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `isize`\n  --> /tmp/tmpiixpo1u3.rs:17:26\n\
    \   |\n17 |         digits.insert(i, digits[x - 1 - i]);\n   |               \
    \           ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n   |\n  \
    \ = help: the trait `Index<isize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    while\
    \ digits.len() > shift {\n        digits = digits[digits.len() - shift as usize..];\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpszuybqpt.rs:10:26\n   |\n\
    10 |     while digits.len() > shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     while digits.len()\
    \ > shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpszuybqpt.rs:11:18\n   |\n9  |\
    \     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n10 |     while digits.len() > shift {\n11 |    \
    \     digits = digits[digits.len() - shift as usize..];\n   |                \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits.chars().enumerate().for_each(|(i,\
    \ &b)|\n        if i > shift {\n            b.to_ascii_lowercase()[i - shift..].to_ascii_lowercase().to_string().into_owned();\n\
    \        }\n        else if i < shift {\n            b.to_ascii_uppercase()[i\
    \ - shift..].to_ascii_uppercase().to_string().into_owned();\n        }\n     \
    \   else {\n            b.to_string().into_owned();\n        }\n    );\n    String::from(digits)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgn50m1rj.rs:10:46\n   |\n\
    10 |     digits.chars().enumerate().for_each(|(i, &b)|\n   |                 \
    \                             ^^- expected due to this\n   |                 \
    \                             |\n   |                                        \
    \      expected `char`, found reference\n   |                                \
    \              help: you can probably remove the explicit borrow: `b`\n   |\n\
    \   = note:   expected type `char`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgn50m1rj.rs:11:16\n   |\n11 |         if i >\
    \ shift {\n   |                ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |         if i > shift.try_into().unwrap() {\n   |           \
    \          ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgn50m1rj.rs:12:40\n\
    \   |\n12 |             b.to_ascii_lowercase()[i - shift..].to_ascii_lowercase().to_string().into_owned();\n\
    \   |                                        ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpgn50m1rj.rs:12:38\n\
    \   |\n12 |             b.to_ascii_lowercase()[i - shift..].to_ascii_lowercase().to_string().into_owned();\n\
    \   |                                      ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgn50m1rj.rs:14:21\n   |\n14 |         else if\
    \ i < shift {\n   |                     ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and pan"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    for\
    \ i in 0..shift {\n        digits = digits[..digits.len() - i].to_string() + digits[i..].to_string();\n\
    \    }\n    String::from(digits)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0bgl3rvb.rs:11:42\n   |\n\
    11 |         digits = digits[..digits.len() - i].to_string() + digits[i..].to_string();\n\
    \   |                                          ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp0bgl3rvb.rs:11:40\n\
    \   |\n11 |         digits = digits[..digits.len() - i].to_string() + digits[i..].to_string();\n\
    \   |                                        ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmp0bgl3rvb.rs:11:59\n\
    \   |\n11 |         digits = digits[..digits.len() - i].to_string() + digits[i..].to_string();\n\
    \   |                                                           ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    for\
    \ &d in x.to_string().chars().take(shift as usize) {\n        result.push(d);\n\
    \    }\n    if shift < x.len() {\n        result.swap(result, move |s| {\n   \
    \         s.reverse().to_string()\n        });\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6urz9odr.rs:10:9\n   |\n\
    10 |     for &d in x.to_string().chars().take(shift as usize) {\n   |        \
    \ ^^    ------------------------------------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `d`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmp6urz9odr.rs:13:18\n\
    \   |\n13 |     if shift < x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `swap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp6urz9odr.rs:14:16\n   |\n14 |         result.swap(result,\
    \ move |s| {\n   |                ^^^^ method not found in `String`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    if shift\
    \ > x.len() {\n        s.push(b'0');\n        while shift > s.len() {\n      \
    \      s.insert(0, b'0');\n            shift -= s.len();\n        }\n    } else\
    \ {\n        while shift > s.len() {\n            s.insert(0, b'0');\n       \
    \     shift -= s.len();\n        }\n    }\n    s.rotate_left(shift);\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp7prn42n0.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7prn42n0.rs:11:16\n   |\n11 |         s.push(b'0');\n \
    \  |                ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7prn42n0.rs:12:23\n   |\n12 |         while shift > s.len()\
    \ {\n   |                       ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |         while shift > s.len().try_into().unwrap() {\n\
    \   |                              ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7prn42n0.rs:13:25\n   |\n13 |             s.insert(0, b'0');\n\
    \   |                         ^^^^ expected `char`, found `u8`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7prn42n0.rs:14:22\n   |\n14 |             shift\
    \ -= s.len();\n   |                      ^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  --> /tmp/tmp7prn42n0.rs:14:19\n\
    \   |\n14 |             shift -= s.len();\n   |                   ^^ no implementation\
    \ for `isize -= usize`\n   |\n   = help: the trait `SubAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7prn42n0.rs:17:23\n\
    \   |\n17 |         while shift > s.len() {\n   |                       ^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |         while\
    \ shift > s.len().try_into().unwr"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut n = x;\n    let mut s = shift;\n\
    \    while s > 0 {\n        n <<= s;\n        s -= 1;\n    }\n    while n != 0\
    \ {\n        s -= 1;\n        n >>= 1;\n    }\n    format!(\"{}\", x)\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpyiz4a49o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        let reversed\
    \ = x.rev();\n        reversed.len().saturating_sub(shift).rev().to_string()\n\
    \    } else {\n        let reversed = x.rev();\n        reversed.len().saturating_sub(shift).to_string()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpm_w6bxt4.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: `isize` is\
    \ not an iterator\n  --> /tmp/tmpm_w6bxt4.rs:10:26\n   |\n10 |         let reversed\
    \ = x.rev();\n   |                          ^^^ `isize` is not an iterator\n \
    \  |\n   = note: the following trait bounds were not satisfied:\n           `isize:\
    \ Iterator`\n           which is required by `&mut isize: Iterator`\n\nerror[E0599]:\
    \ `isize` is not an iterator\n  --> /tmp/tmpm_w6bxt4.rs:13:26\n   |\n13 |    \
    \     let reversed = x.rev();\n   |                          ^^^ `isize` is not\
    \ an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `isize: Iterator`\n           which is required by `&mut isize: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    if shift > digits.len() {\n        digits = digits.reverse();\n    }\n  \
    \  String::from_utf8(digits.as_slice()).unwrap()[..]\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkgix15bl.rs:10:16\n   |\n\
    10 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkgix15bl.rs:11:18\n   |\n9  |     let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \   |                      ----------------------------------------- expected\
    \ due to this value\n10 |     if shift > digits.len() {\n11 |         digits =\
    \ digits.reverse();\n   |                  ^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<char>`\n           found unit\
    \ type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkgix15bl.rs:13:23\n\
    \   |\n13 |     String::from_utf8(digits.as_slice()).unwrap()[..]\n   |      \
    \                 ^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `&[char]`\n \
    \  |\n   = note: expected struct `Vec<u8>`\n           found reference `&[char]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkgix15bl.rs:13:5\n   |\n8  | fn\
    \ circular_shift(x: isize, shift: isize) -> String {\n   |                   \
    \                           ------ expected `String` because of return type\n\
    ...\n13 |     String::from_utf8(digits.as_slice()).unwrap()[..]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |     |\n   |     expected\
    \ struct `String`, found `str`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    while\
    \ x >= shift {\n        s += &x.to_string()[shift as usize - 1..shift as usize].to_string();\n\
    \        x -= shift;\n    }\n    s += &x.to_string()[shift as usize - 1..].to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpfgktp2n6.rs:12:9\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n12 |\
    \         x -= shift;\n   |         ^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // Convert the number to string in base\
    \ 10\n    let mut digits = String::new();\n    while x != 0 {\n        digits.push(x.digits(10).nth(0));\n\
    \        x = x >> shift;\n    }\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp9h7m1vr9.rs:12:23\n   |\n12 |         digits.push(x.digits(10).nth(0));\n\
    \   |                       ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits\
    \ = digits[..(shift % digits.len())].to_string();\n    digits.reverse();\n   \
    \ digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6rnh6u_6.rs:10:32\n   |\n\
    10 |     digits = digits[..(shift % digits.len())].to_string();\n   |        \
    \                        ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot mod `isize` by `usize`\n  --> /tmp/tmp6rnh6u_6.rs:10:30\n   |\n10 | \
    \    digits = digits[..(shift % digits.len())].to_string();\n   |            \
    \                  ^ no implementation for `isize % usize`\n   |\n   = help: the\
    \ trait `Rem<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmp6rnh6u_6.rs:10:14\n\
    \   |\n10 |     digits = digits[..(shift % digits.len())].to_string();\n   | \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp6rnh6u_6.rs:11:12\n   |\n11 |     digits.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n\n    // Iterate from last to first digit\n    for i in x.rev()\
    \ {\n        let val = i as i32;\n        let digit = if val <= 0 {\n        \
    \    0\n        } else if val <= shift {\n            val // this digit will become\
    \ the least significant digit\n        } else {\n            val >> (shift)\n\
    \        };\n        s += digit.to_string();\n\n        if val < shift {\n   \
    \         carry = 1;\n        }\n    }\n\n    if carry != 0 {\n        s += carry;\n\
    \    }\n\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpdfzdlxec.rs:13:16\n\
    \   |\n13 |     for i in x.rev() {\n   |                ^^^ `isize` is not an\
    \ iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `isize: Iterator`\n           which is required by `&mut isize: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdfzdlxec.rs:17:26\n   |\n17 |\
    \         } else if val <= shift {\n   |                          ^^^^^ expected\
    \ `i32`, found `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and\
    \ panic if the converted value doesn't fit\n   |\n17 |         } else if val <=\
    \ shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdfzdlxec.rs:22:14\n   |\n22 |\
    \         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n   | \
    \             |\n   |              expected `&str`, found struct `String`\n  \
    \ |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdfzdlxec.rs:24:18\n   |\n24 |         if val\
    \ < shift {\n   |                  ^^^^^ expected `i32`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `i32` and panic if the converted value\
    \ doesn't fit\n   |\n24 |         if val < shift.try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdfzdlxec.rs:30:14\n   |\n30 |         s += carry;\n   |       \
    \       ^^^^^ expected `&str`, found integer\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    if i >= 10 {\n        i += 1;\n    }\n    while i >= 10 {\n    \
    \    s.push_str(&format!(\"{}\", i%10));\n        i = i / 10;\n    }\n    s.append(&format!(\"\
    {}\", i%10));\n    if shift > s.len() {\n        s.append(&format!(\"{}\", i%10));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpbafdcooj.rs:18:7\n   |\n18 |     s.append(&format!(\"\
    {}\", i%10));\n   |       ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbafdcooj.rs:19:16\n   |\n19 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n19 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0599]: no method named `append`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpbafdcooj.rs:20:11\n\
    \   |\n20 |         s.append(&format!(\"{}\", i%10));\n   |           ^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars().enumerate().map(|(i,\
    \ &c)| if i == shift { c } else { c }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprw8whjs8.rs:9:48\n  |\n9 |\
    \     x.to_string().chars().enumerate().map(|(i, &c)| if i == shift { c } else\
    \ { c }).collect()\n  |                                                ^^- expected\
    \ due to this\n  |                                                |\n  |     \
    \                                           expected `char`, found reference\n\
    \  |                                                help: you can probably remove\
    \ the explicit borrow: `c`\n  |\n  = note:   expected type `char`\n          found\
    \ reference `&_`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprw8whjs8.rs:9:61\n\
    \  |\n9 |     x.to_string().chars().enumerate().map(|(i, &c)| if i == shift {\
    \ c } else { c }).collect()\n  |                                             \
    \                ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     x.to_string().chars().enumerate().map(|(i, &c)| if i == shift.try_into().unwrap()\
    \ { c } else { c }).collect()\n  |                                           \
    \                       ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        let shift\
    \ = x.len() - shift;\n        let mut result = String::new();\n        for i in\
    \ 0..shift {\n            result += '0';\n        }\n        for i in 0..shift\
    \ {\n            result += x[i];\n        }\n        result.reverse();\n     \
    \   return result;\n    }\n\n    let mut result = String::from(\"0\");\n    let\
    \ mut digit = x.len() - shift;\n    for c in x.chars() {\n        result += *c;\n\
    \        if digit == 0 {\n            result.reverse();\n            return result;\n\
    \        }\n        result += '0';\n        digit -= 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpjiok8igu.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpjiok8igu.rs:10:23\n\
    \   |\n10 |         let shift = x.len() - shift;\n   |                       ^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjiok8igu.rs:13:23\n\
    \   |\n13 |             result += '0';\n   |                       ^^^ expected\
    \ `&str`, found `char`\n   |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n   |\n13 |             result += \"0\";\n   |               \
    \        ~~~\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmpjiok8igu.rs:16:23\n   |\n16 |             result += x[i];\n   |    \
    \                   ^^^^\n\nerror[E0599]: no method named `reverse` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpjiok8igu.rs:18:16\n   |\n\
    18 |         result.reverse();\n   |                ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpjiok8igu.rs:23:23\n\
    \   |\n23 |     let mut digit = x.len() - shift;\n   |                       ^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `chars` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpjiok8igu.rs:24:16\n   |\n24\
    \ |     for c in x.chars() {\n   |                ^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpjiok8igu.rs:27:20\n   |\n27 |             result.reverse();\n\
    \   |                    ^^^^^^^ help: there is an associated function with a\
    \ similar name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjiok8igu.rs:30:19\n\
    \   |\n30 |         result += '0';\n   |                   ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n30 |        "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    match x.checked_mul(pow(2, shift).unwrap()).ok()\
    \ {\n        Some(x) => x.to_string(),\n        None => x.to_string().reverse(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in this scope\n --> /tmp/tmp5_8bwl1h.rs:9:25\n\
    \  |\n9 |     match x.checked_mul(pow(2, shift).unwrap()).ok() {\n  |        \
    \                 ^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `ok` found for enum `Option` in the current scope\n --> /tmp/tmp5_8bwl1h.rs:9:49\n\
    \  |\n9 |     match x.checked_mul(pow(2, shift).unwrap()).ok() {\n  |        \
    \                                         ^^ help: there is an associated function\
    \ with a similar name: `or`\n\nerror[E0599]: no method named `reverse` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmp5_8bwl1h.rs:11:31\n   |\n\
    11 |         None => x.to_string().reverse(),\n   |                          \
    \     ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    for\
    \ _ in 0..shift {\n        digits = &digits[1..] + (&digits[0] + '0');\n    }\n\
    \    digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpn940x9sx.rs:11:35\n   |\n11 |         digits = &digits[1..] + (&digits[0]\
    \ + '0');\n   |                                   ^^^^^^^^^ `String` cannot be\
    \ indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: cannot add `char` to `&_`\n  --> /tmp/tmpn940x9sx.rs:11:45\n\
    \   |\n11 |         digits = &digits[1..] + (&digits[0] + '0');\n   |        \
    \                                     ^ no implementation for `&_ + char`\n  \
    \ |\n   = help: the trait `Add<char>` is not implemented for `&_`\n\nerror[E0369]:\
    \ cannot add `_` to `&str`\n  --> /tmp/tmpn940x9sx.rs:11:31\n   |\n11 |      \
    \   digits = &digits[1..] + (&digits[0] + '0');\n   |                  ------------\
    \ ^ ------------------ _\n   |                  |\n   |                  &str\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpn940x9sx.rs:13:12\n   |\n13 |     digits.reverse()\n  \
    \ |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x[x.len()\
    \ - 1].rev()\n    } else {\n        let mut result = String::new();\n        let\
    \ mut n = x;\n        loop {\n            let res = n % 10;\n            n /=\
    \ 10;\n            if n == 0 {\n                break;\n            }\n      \
    \      result.rev().push(res);\n        }\n        result + &result[shift..].to_owned()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpktcdumhd.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpktcdumhd.rs:10:13\n\
    \   |\n10 |         x[x.len() - 1].rev()\n   |             ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmpktcdumhd.rs:20:20\n\
    \    |\n20  |               result.rev().push(res);\n    |                   \
    \   ^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n  \
    \  |\n    = note: the following trait bounds were not satisfied:\n           \
    \ `String: Iterator`\n            which is required by `&mut String: Iterator`\n\
    \            `str: Iterator`\n            which is required by `&mut str: Iterator`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n  -->\
    \ /tmp/tmpktcdumhd.rs:22:19\n   |\n22 |         result + &result[shift..].to_owned()\n\
    \   |                   ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // The easiest way is to convert it to\
    \ an `i128` so that it\n    // can be left shifted.\n    let x_i128 = i128::from_str_radix(x,\
    \ 10);\n\n    // Add or subtract shift to `i128` to shift to the correct place.\n\
    \    let (left, right) = x_i128.div_mod_i128(shift);\n\n    // Convert to an `i64`\
    \ so that it can be converted back to an `i128`\n    // for printing.\n    let\
    \ right = i64::from_i128(right);\n\n    // Now convert to a `String`.\n    String::from_utf8_lossy(\n\
    \        left.to_str_radix(10) + String::from_utf8_lossy(right.to_str_radix(10)),\n\
    \    )\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph5e0qxq8.rs:11:39\n   |\n\
    11 |     let x_i128 = i128::from_str_radix(x, 10);\n   |                     \
    \                  ^ expected `&str`, found `isize`\n\nerror[E0599]: no method\
    \ named `div_mod_i128` found for enum `Result` in the current scope\n  --> /tmp/tmph5e0qxq8.rs:14:32\n\
    \   |\n14 |     let (left, right) = x_i128.div_mod_i128(shift);\n   |        \
    \                        ^^^^^^^^^^^^ method not found in `Result<i128, ParseIntError>`\n\
    \nerror[E0599]: no function or associated item named `from_i128` found for type\
    \ `i64` in the current scope\n  --> /tmp/tmph5e0qxq8.rs:18:22\n   |\n18 |    \
    \ let right = i64::from_i128(right);\n   |                      ^^^^^^^^^\n  \
    \ |                      |\n   |                      function or associated item\
    \ not found in `i64`\n   |                      help: there is an associated function\
    \ with a similar name: `from_be`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph5e0qxq8.rs:21:5\n\
    \   |\n8  |   fn circular_shift(x: isize, shift: isize) -> String {\n   |    \
    \                                            ------ expected `String` because\
    \ of return type\n...\n21 | /     String::from_utf8_lossy(\n22 | |         left.to_str_radix(10)\
    \ + String::from_utf8_lossy(right.to_str_radix(10)),\n23 | |     )\n   | |   \
    \  ^- help: try using a conversion method: `.to_string()`\n   | |_____|\n   |\
    \       expected struct `String`, found enum `Cow`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Cow<'_, str>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::with_capacity(x.abs()\
    \ + 1);\n    if shift > x.abs() {\n        result.reserve(x.abs() + 1);\n    }\n\
    \    for digit in x.abs() {\n        result.push_str(&format!(\"{:0>2}\", digit\
    \ % 10));\n        digit /= 10;\n    }\n    result.push_str(&format!(\"{:0>2}\"\
    , digit % 10));\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digit` in this scope\n  --> /tmp/tmpclrnncgj.rs:17:40\n\
    \   |\n17 |     result.push_str(&format!(\"{:0>2}\", digit % 10));\n   |     \
    \                                   ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpclrnncgj.rs:9:44\n  |\n9 |     let mut result\
    \ = String::with_capacity(x.abs() + 1);\n  |                                 \
    \           ^^^^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     let mut result = String::with_capacity((x.abs() + 1).try_into().unwrap());\n\
    \  |                                            +           +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpclrnncgj.rs:11:24\n   |\n11 |\
    \         result.reserve(x.abs() + 1);\n   |                        ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n11 |         result.reserve((x.abs()\
    \ + 1).try_into().unwrap());\n   |                        +           +++++++++++++++++++++\n\
    \nerror[E0277]: `isize` is not an iterator\n  --> /tmp/tmpclrnncgj.rs:13:18\n\
    \   |\n13 |     for digit in x.abs() {\n   |                  ^^^^^^^ `isize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `isize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut n = x;\n    while n != 0 {\n        if let Some(rem)\
    \ = n % 10 {\n            s.push(rem);\n            carry += 1;\n        }\n \
    \       n /= 10;\n    }\n    while carry != 0 {\n        s.push(carry % 10);\n\
    \        carry /= 10;\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgqnmci9q.rs:13:16\n   |\n\
    13 |         if let Some(rem) = n % 10 {\n   |                ^^^^^^^^^   ------\
    \ this expression has type `isize`\n   |                |\n   |              \
    \  expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgqnmci9q.rs:20:16\n   |\n20 |         s.push(carry % 10);\n   |    \
    \            ^^^^^^^^^^ expected `char`, found integer\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    let mut k = shift;\n    while n > 0 {\n        let tmp = n % 10;\n\
    \        s.insert(0, &tmp);\n        n /= 10;\n        k -= 1;\n    }\n    if\
    \ k < 0 {\n        s.reverse();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp94ijat17.rs:14:21\n   |\n\
    14 |         s.insert(0, &tmp);\n   |                     ^^^^ expected `char`,\
    \ found `&isize`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp94ijat17.rs:19:11\n   |\n19 |         s.reverse();\n\
    \   |           ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if x == 0 || shift > x {\n        return\
    \ String::new();\n    }\n\n    if shift > x.len() {\n        shift = x.len();\n\
    \    }\n\n    let mut s = String::new();\n    let mut n = x;\n    let mut shift2\
    \ = shift;\n    let mut carry = 0;\n\n    while n > 0 {\n        let digit = n\
    \ % 10;\n        n /= 10;\n        let digit2 = (n + digit).mod_mul(10).cloned();\n\
    \        let digit3 = digit2.mod_mul(10).cloned();\n\n        let digit4 = digit3.cloned();\n\
    \        let digit5 = digit4.cloned();\n\n        let digit6 = digit5.cloned();\n\
    \        let digit7 = digit6.cloned();\n\n        let digit8 = digit7.cloned();\n\
    \n        if shift > 0 {\n            carry = digit8 + carry;\n        }\n\n \
    \       if shift <= 8 {\n            s.insert(0, digit8);\n        }\n\n     \
    \   shift -= 8;\n\n        if shift > 0 {\n            s.insert(0, digit7 + carry);\n\
    \        }\n\n        if shift <= 8 {\n            s.insert(0, digit6);\n    \
    \    }\n\n        shift -= 8;\n\n        if shift > 0 {\n            s.insert(0,\
    \ digit5 + carry);\n        }\n\n        if shift <= 8 {\n            s.insert(0,\
    \ digit4 + carry);\n        }\n\n        if shift > 0 {\n            s.insert(0,\
    \ digit3 + carry);\n        }\n\n        if shift <= 8 {\n            s.insert(0,\
    \ digit2 + carry);\n        }\n\n        shift -= 8;\n\n        if shift > 0 {\n\
    \            s.insert(0, digit);\n        }\n    }\n\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmwcbv93z.rs:13:18\n   |\n13 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpmwcbv93z.rs:14:19\n\
    \   |\n14 |         shift = x.len();\n   |                   ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `mod_mul` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpmwcbv93z.rs:25:34\n   |\n25 |         let\
    \ digit2 = (n + digit).mod_mul(10).cloned();\n   |                           \
    \       ^^^^^^^ method not found in `isize`\n\nerror[E0277]: cannot add `{integer}`\
    \ to `char`\n  --> /tmp/tmpmwcbv93z.rs:37:28\n   |\n37 |             carry = digit8\
    \ + carry;\n   |                            ^ no implementation for `char + {integer}`\n\
    \   |\n   = help: the trait `Add<{integer}>` is not implemented for `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmwcbv93z.rs:75:25\n   |\n75 |  \
    \           s.insert(0, digit);\n   |                         ^^^^^ expected `char`,\
    \ found `isize`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if x <= 0 {\n        String::from(\"\"\
    );\n    } else if shift <= 0 {\n        String::from(x.to_string());\n    } else\
    \ {\n        let mut s = String::new();\n        let mut n = (x % 10);\n     \
    \   let mut k = shift - 1;\n        while n != 0 {\n            s.push((n % 10).to_string());\n\
    \            n /= 10;\n            k -= 1;\n        }\n        s.push((k%10).to_string());\n\
    \        String::from(s)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpzpyeihse.rs:15:21\n\
    \   |\n15 |         let mut n = (x % 10);\n   |                     ^      ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n15 -         let mut n = (x % 10);\n15 +         let mut n = x % 10;\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzpyeihse.rs:9:15\n   |\n\
    9  |       if x <= 0 {\n   |  _______________^\n10 | |         String::from(\"\
    \");\n   | |                         - help: remove this semicolon\n11 | |   \
    \  } else if shift <= 0 {\n   | |_____^ expected struct `String`, found `()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzpyeihse.rs:11:26\n   |\n11 |\
    \       } else if shift <= 0 {\n   |  __________________________^\n12 | |    \
    \     String::from(x.to_string());\n   | |                                   \
    \ - help: remove this semicolon\n13 | |     } else {\n   | |_____^ expected struct\
    \ `String`, found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzpyeihse.rs:18:20\n\
    \   |\n18 |             s.push((n % 10).to_string());\n   |                  \
    \  ^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzpyeihse.rs:22:16\n   |\n22 |         s.push((k%10).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 4 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    while\
    \ shift > 0 {\n        if shift > x.len() {\n            s.reverse();\n      \
    \      shift -= x.len();\n        } else {\n            let mut i = shift;\n \
    \           while i >= x.len() {\n                s.insert(0, x);\n          \
    \      i -= x.len();\n            }\n            s = s.split_first_mut(i - shift).collect();\n\
    \        }\n    }\n    s.reverse();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpjy5tfvk4.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpjy5tfvk4.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpjy5tfvk4.rs:13:24\n   |\n13 |             shift\
    \ -= x.len();\n   |                        ^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpjy5tfvk4.rs:16:26\n   |\n16 |             while i >= x.len() {\n\
    \   |                          ^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjy5tfvk4.rs:17:29\n   |\n17 |              \
    \   s.insert(0, x);\n   |                             ^ expected `char`, found\
    \ `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpjy5tfvk4.rs:18:24\n   |\n18 |                 i\
    \ -= x.len();\n   |                        ^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `split_first_mut` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpjy5tfvk4.rs:20:19\n   |\n20 |             s = s.split_first_mut(i\
    \ - shift).collect();\n   |                   ^^^^^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `split_at_mut`\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpjy5tfvk4.rs:23:7\n   |\n23 |     s.reverse();\n   |       ^^^^^^^ help:\
    \ there is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x\n    }\
    \ else {\n        let mut digits = x.to_digits();\n        for _ in 0..shift {\n\
    \            digits.next();\n        }\n        String::from(reverse(&digits))\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpyv0cfh06.rs:16:22\n\
    \   |\n16 |         String::from(reverse(&digits))\n   |                     \
    \ ^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n --> /tmp/tmpyv0cfh06.rs:9:18\n  |\n\
    9 |     if shift > x.len() {\n  |                  ^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyv0cfh06.rs:10:9\n   |\n8  | fn\
    \ circular_shift(x: isize, shift: isize) -> String {\n   |                   \
    \                           ------ expected `String` because of return type\n\
    9  |     if shift > x.len() {\n10 |         x\n   |         ^- help: try using\
    \ a conversion method: `.to_string()`\n   |         |\n   |         expected struct\
    \ `String`, found `isize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpyv0cfh06.rs:12:28\n   |\n12\
    \ |         let mut digits = x.to_digits();\n   |                            ^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift >= x.len() {\n        // shift\
    \ >= x => return digits reversed\n        x.reverse();\n        return String::from(x);\n\
    \    }\n\n    let mut rv = String::new();\n    let mut rest = x;\n\n    for i\
    \ in 0..shift {\n        let mut n = rest;\n        rv.push(n[0]);\n        rest\
    \ = n[1];\n    }\n\n    rv.push(rest);\n    rv.reverse();\n    rv\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp4outg52u.rs:9:19\n  |\n9 |     if shift >= x.len() {\n \
    \ |                   ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for type `isize` in the current scope\n  --> /tmp/tmp4outg52u.rs:11:11\n\
    \   |\n11 |         x.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reverse_bits`\n\nerror[E0277]: the trait bound\
    \ `String: From<isize>` is not satisfied\n  --> /tmp/tmp4outg52u.rs:12:16\n  \
    \ |\n12 |         return String::from(x);\n   |                ^^^^^^^^^^^^ the\
    \ trait `From<isize>` is not implemented for `String`\n   |\n   = help: the following\
    \ other types implement trait `From<T>`:\n             <String as From<&String>>\n\
    \             <String as From<&mut str>>\n             <String as From<&str>>\n\
    \             <String as From<Box<str>>>\n             <String as From<Cow<'a,\
    \ str>>>\n             <String as From<char>>\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmp4outg52u.rs:20:17\n   |\n20 |       \
    \  rv.push(n[0]);\n   |                 ^^^^\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmp4outg52u.rs:21:16\n   |\n21 |       \
    \  rest = n[1];\n   |                ^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4outg52u.rs:24:13\n   |\n24 |     rv.push(rest);\n   |        \
    \     ^^^^ expected `char`, found `isize`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp4outg52u.rs:25:8\n\
    \   |\n25 |     rv.reverse();\n   |        ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 7 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = vec![0; 10];\n    digits.copy_from_slice(&x.to_string());\n\
    \    digits[9..].copy_from_slice(&digits.clone());\n    digits[shift..].copy_from_slice(&digits.clone());\n\
    \    String::from_utf8_lossy(&digits[shift..]).to_owned()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv31vpdoq.rs:10:28\n   |\n\
    10 |     digits.copy_from_slice(&x.to_string());\n   |                       \
    \     ^^^^^^^^^^^^^^ expected slice `[{integer}]`, found struct `String`\n   |\n\
    \   = note: expected reference `&[{integer}]`\n              found reference `&String`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpv31vpdoq.rs:12:5\n   |\n12 |     digits[shift..].copy_from_slice(&digits.clone());\n\
    \   |     ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `RangeFrom<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeFrom<usize> as SliceIndex<[T]>>\n             <RangeFrom<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeFrom<isize>>` for `Vec<{integer}>`\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpv31vpdoq.rs:13:30\n\
    \   |\n13 |     String::from_utf8_lossy(&digits[shift..]).to_owned()\n   |   \
    \                           ^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `RangeFrom<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<{integer}>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv31vpdoq.rs:13:5\n   |\n8  | fn\
    \ circular_shift(x: isize, shift: isize) -> String {\n   |                   \
    \                           ------ expected `String` because of return type\n\
    ...\n13 |     String::from_utf8_lossy(&digits[shift..]).to_owned()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |     |\n   |     expected\
    \ struct `String`, fou"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::with_capacity(x.clone());\n\
    \    for (i, d) in\n        x.digits().enumerate()\n            .filter(|&(_,\
    \ d)| d != 0)\n            .zip(x.digits().iter().rev())\n    {\n        if i\
    \ != 0 {\n            s.push('0');\n        }\n        s.push(d);\n    }\n   \
    \ if shift > x.len() {\n        let mut q = x;\n        for i in 0..shift {\n\
    \            q = q.rotate_left(1);\n        }\n        let s = s.split_at(q);\n\
    \        let mut r = s;\n        r.reverse();\n        for n in r.into_iter().take(shift)\
    \ {\n            s.push(n);\n        }\n    } else {\n        for n in x.into_iter().take(shift)\
    \ {\n            s.push(n);\n        }\n    }\n    String::from(s)\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkk2wfl_f.rs:9:39\n  |\n9 |\
    \     let mut s = String::with_capacity(x.clone());\n  |                     \
    \                  ^^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n9 |     let mut s = String::with_capacity(x.clone().try_into().unwrap());\n\
    \  |                                                ++++++++++++++++++++\n\nerror[E0599]:\
    \ no method named `digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpkk2wfl_f.rs:11:11\n   |\n11 |         x.digits().enumerate()\n   | \
    \          ^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `digits` found for type `isize` in the current scope\n  --> /tmp/tmpkk2wfl_f.rs:13:20\n\
    \   |\n13 |             .zip(x.digits().iter().rev())\n   |                  \
    \  ^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpkk2wfl_f.rs:20:18\n   |\n\
    20 |     if shift > x.len() {\n   |                  ^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkk2wfl_f.rs:25:28\n   |\n25 |\
    \         let s = s.split_at(q);\n   |                            ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n25 |         let s = s.split_at(q.try_into().unwrap());\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for tuple `(&str, &str)` in the current scope\n  --> /tmp/tmpkk2wfl_f.rs:27:11\n\
    \   |\n27 |         r.reverse();\n   |           ^^^^^^^ method not found in `(&str,\
    \ &str)`\n\nerror[E0599]: the method `into_iter` exists for tuple `(&str, &str)`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpkk2wfl_f.rs:28:20\n \
    \  |\n28 |         for n in r.into_iter().take(shift) {\n   |                \
    \    ^^^^^^^^^ method cannot be called on `(&str, &str)` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().rotate_left(shift).to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n --> /tmp/tmp2no0cw6e.rs:9:19\n  |\n9 |     x.to_string().rotate_left(shift).to_string()\n\
    \  |                   ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars().enumerate().map(|(i,\
    \ d)| (i + shift) % 10 + d).collect()\n        .map(char::from)\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp97ntn1r_.rs:9:57\n  |\n9 |\
    \     x.to_string().chars().enumerate().map(|(i, d)| (i + shift) % 10 + d).collect()\n\
    \  |                                                         ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmp97ntn1r_.rs:9:55\n\
    \  |\n9 |     x.to_string().chars().enumerate().map(|(i, d)| (i + shift) % 10\
    \ + d).collect()\n  |                                                       ^\
    \ no implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n  = help: the following other types implement\
    \ trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as\
    \ Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n\
    \            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n      \
    \      <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and\
    \ 48 others\n\nerror[E0277]: cannot add `char` to `usize`\n --> /tmp/tmp97ntn1r_.rs:9:69\n\
    \  |\n9 |     x.to_string().chars().enumerate().map(|(i, d)| (i + shift) % 10\
    \ + d).collect()\n  |                                                        \
    \             ^ no implementation for `usize + char`\n  |\n  = help: the trait\
    \ `Add<char>` is not implemented for `usize`\n  = help: the following other types\
    \ implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n           \
    \ <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a\
    \ i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as\
    \ Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n\
    \          and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::from(\"0\");\n   \
    \ let mut carry = 0;\n    for i in x.to_digits().iter() {\n        let digit =\
    \ i.unwrap();\n        s += if digit >= shift {\n            String::from(\"1\"\
    .to_string())\n        } else {\n            String::from(\"0\".to_string())\n\
    \        };\n        if carry > 0 {\n            s += String::from(\"1\".to_string());\n\
    \        } else {\n            s += String::from(\"0\".to_string());\n       \
    \ }\n        carry += digit >= shift;\n    }\n    if carry > 0 {\n        s +=\
    \ String::from(\"1\".to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpe348ow27.rs:11:16\n   |\n11 |     for i in x.to_digits().iter()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe348ow27.rs:14:13\n   |\n14 |             String::from(\"\
    1\".to_string())\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |       \
    \      |\n   |             expected `&str`, found struct `String`\n   |      \
    \       help: consider borrowing here: `&String::from(\"1\".to_string())`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpe348ow27.rs:16:13\n   |\n16 |  \
    \           String::from(\"0\".to_string())\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             expected `&str`, found struct `String`\n\
    \   |             help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpe348ow27.rs:19:18\n   |\n19 |\
    \             s += String::from(\"1\".to_string());\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                  |\n   |                  expected `&str`, found struct\
    \ `String`\n   |                  help: consider borrowing here: `&String::from(\"\
    1\".to_string())`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe348ow27.rs:21:18\n\
    \   |\n21 |             s += String::from(\"0\".to_string());\n   |          \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                  |\n   |        \
    \          expected `&str`, found struct `String`\n   |                  help:\
    \ consider borrowing here: `&String::from(\"0\".to_string())`\n\nerror[E0277]:\
    \ cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpe348ow27.rs:23:15\n \
    \  |\n23 |         carry += digit >= shift;\n   |               ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut r = String::from(\"0\");\n   \
    \ r.push_str(x.to_string());\n    r.push_str(&mut *(&mut r[..(shift)]));\n   \
    \ r\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5dx7tdpt.rs:10:16\n   |\n\
    10 |     r.push_str(x.to_string());\n   |                ^^^^^^^^^^^^^\n   | \
    \               |\n   |                expected `&str`, found struct `String`\n\
    \   |                help: consider borrowing here: `&x.to_string()`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmp5dx7tdpt.rs:11:28\n\
    \   |\n11 |     r.push_str(&mut *(&mut r[..(shift)]));\n   |                 \
    \           ^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n\
    \   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut acc = String::from(\"0\");\n \
    \   for digit in x.to_string().chars().skip(shift) {\n        acc.push(digit as\
    \ char);\n    }\n    acc\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppzn7gs9p.rs:10:45\n   |\n\
    10 |     for digit in x.to_string().chars().skip(shift) {\n   |              \
    \                               ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n10 |     for digit in x.to_string().chars().skip(shift.try_into().unwrap())\
    \ {\n   |                                                  ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut xs = x.to_string();\n    for _\
    \ in 0..(shift + 1) {\n        xs = String::from(xs.chars().next().unwrap()).rjust(shift,\
    \ '0');\n    }\n    xs\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rjust` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpa5hyu60f.rs:11:55\n   |\n11 |         xs = String::from(xs.chars().next().unwrap()).rjust(shift,\
    \ '0');\n   |                                                       ^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::with_capacity(x.len()\
    \ * 2);\n    for i in 0..x.len() {\n        if i < (shift as usize) {\n      \
    \      s.push(*x.clone());\n        }\n        x += i;\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpm76tawyc.rs:9:41\n  |\n9 |     let mut s = String::with_capacity(x.len()\
    \ * 2);\n  |                                         ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpm76tawyc.rs:10:19\n   |\n10 |     for i in 0..x.len() {\n   | \
    \                  ^^^ method not found in `isize`\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpm76tawyc.rs:12:20\n   |\n12 |        \
    \     s.push(*x.clone());\n   |                    ^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm76tawyc.rs:14:14\n   |\n14 |         x += i;\n\
    \   |              ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add-assign\
    \ `usize` to `isize`\n  --> /tmp/tmpm76tawyc.rs:14:11\n   |\n14 |         x +=\
    \ i;\n   |           ^^ no implementation for `isize += usize`\n   |\n   = help:\
    \ the trait `AddAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x.to_digits().to_string().rev()\n\
    \    } else {\n        x.to_digits().to_string() + &(\"0\".repeat(shift as usize\
    \ - x.len())).to_string()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpa8_rb480.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `to_digits` found for type `isize` in the current scope\n  --> /tmp/tmpa8_rb480.rs:10:11\n\
    \   |\n10 |         x.to_digits().to_string().rev()\n   |           ^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `to_digits` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpa8_rb480.rs:12:11\n   |\n\
    12 |         x.to_digits().to_string() + &(\"0\".repeat(shift as usize - x.len())).to_string()\n\
    \   |           ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpa8_rb480.rs:12:69\n\
    \   |\n12 |         x.to_digits().to_string() + &(\"0\".repeat(shift as usize\
    \ - x.len())).to_string()\n   |                                              \
    \                       ^^^ method not found in `isize`\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut xs = String::new();\n    if x\
    \ > 0 {\n        let y = x % shift;\n        xs.push_str(&digits[y]);\n      \
    \  x /= shift;\n    }\n    while x > 0 {\n        let y = x % shift;\n       \
    \ xs.push_str(&digits[y]);\n        x /= shift;\n    }\n    xs\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digits` in this scope\n  --> /tmp/tmp6znslzht.rs:12:22\n\
    \   |\n12 |         xs.push_str(&digits[y]);\n   |                      ^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `digits` in this\
    \ scope\n  --> /tmp/tmp6znslzht.rs:17:22\n   |\n17 |         xs.push_str(&digits[y]);\n\
    \   |                      ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut carry = 0;\n    let mut digits = 0;\n    loop {\n        // add carry and\
    \ get digits needed\n        let needed = shift - digits;\n        let digit =\
    \ x % 10;\n        digits += 1;\n        let x = x / 10;\n        // get the carry\
    \ and move digits right by 1\n        let carry = x % 10;\n        x = x / 10;\n\
    \        if needed <= 0 {\n            break;\n        }\n        // add carry\
    \ and move digits left by 1\n        if carry > 0 {\n            let mut next\
    \ = String::new();\n            next.push_str(&format!(\"{:0>2}\", digit) + &format!(\"\
    {:0>2}\", carry));\n            carry = 1;\n            digits = 2;\n        \
    \    result += next;\n        }\n        if digits > 0 {\n            let mut\
    \ next = String::new();\n            next.push_str(&format!(\"{:0>2}\", digit));\n\
    \            result += next;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&String` to `&String`\n  --> /tmp/tmp0dav1rec.rs:27:53\n\
    \   |\n27 |             next.push_str(&format!(\"{:0>2}\", digit) + &format!(\"\
    {:0>2}\", carry));\n   |                           ------------------------- ^\
    \ ------------------------- &String\n   |                           |        \
    \                 |\n   |                           |                        \
    \ `+` cannot be used to concatenate two `&str` strings\n   |                 \
    \          &String\n   |\n   = note: string concatenation requires an owned `String`\
    \ on the left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0dav1rec.rs:30:23\n\
    \   |\n30 |             result += next;\n   |                       ^^^^\n   |\
    \                       |\n   |                       expected `&str`, found struct\
    \ `String`\n   |                       help: consider borrowing here: `&next`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0dav1rec.rs:35:23\n   |\n35 |\
    \             result += next;\n   |                       ^^^^\n   |         \
    \              |\n   |                       expected `&str`, found struct `String`\n\
    \   |                       help: consider borrowing here: `&next`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        // Shift\
    \ exceeds the number of digits\n        x.to_string() + '0'.repeat(shift..x.len()).to_string()\n\
    \    } else {\n        x.to_string().chars().enumerate().map(|(i, c)| {\n    \
    \        if i < shift {\n                c\n            } else {\n           \
    \     c * &x[i - shift] + '0'.repeat(shift - i)\n            }\n        }).collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpa_htmzfk.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `repeat` found for type `char` in the current scope\n  --> /tmp/tmpa_htmzfk.rs:11:29\n\
    \   |\n11 |         x.to_string() + '0'.repeat(shift..x.len()).to_string()\n \
    \  |                             ^^^^^^ method not found in `char`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpa_htmzfk.rs:11:45\n\
    \   |\n11 |         x.to_string() + '0'.repeat(shift..x.len()).to_string()\n \
    \  |                                             ^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa_htmzfk.rs:14:20\n   |\n14 |\
    \             if i < shift {\n   |                    ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |             if i < shift.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa_htmzfk.rs:17:28\n   |\n17 |                 c * &x[i\
    \ - shift] + '0'.repeat(shift - i)\n   |                            ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpa_htmzfk.rs:17:22\n   |\n17 |                 c * &x[i - shift]\
    \ + '0'.repeat(shift - i)\n   |                      ^^^^^^^^^^^^\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpa_htmzfk.rs:17:26\n   |\n\
    17 |                 c * &x[i - shift] + '0'.repeat(shift - i)\n   |         \
    \                 ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::with_capacity(x.powf(shift).floor());\n\
    \n    for i in 0..shift {\n        result.push(x%10);\n        x = x/10;\n   \
    \ }\n\n    for i in 0..shift {\n        result.push(x%10);\n        x = x/10;\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `powf` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpv_ud5b5b.rs:9:46\n  |\n9 |     let mut result = String::with_capacity(x.powf(shift).floor());\n\
    \  |                                              ^^^^ help: there is an associated\
    \ function with a similar name: `pow`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpv_ud5b5b.rs:12:21\n   |\n12 |         result.push(x%10);\n   |     \
    \                ^^^^ expected `char`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv_ud5b5b.rs:17:21\n   |\n17 |         result.push(x%10);\n\
    \   |                     ^^^^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x.reverse()\n\
    \    }\n    String::from_utf8(x).rotate_left(shift)\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpd8_lpmpe.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for type `isize` in the current scope\n  --> /tmp/tmpd8_lpmpe.rs:10:11\n\
    \   |\n10 |         x.reverse()\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reverse_bits`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd8_lpmpe.rs:12:23\n   |\n12 |     String::from_utf8(x).rotate_left(shift)\n\
    \   |                       ^ expected struct `Vec`, found `isize`\n   |\n   =\
    \ note: expected struct `Vec<u8>`\n                found type `isize`\n\nerror[E0599]:\
    \ no method named `rotate_left` found for enum `Result` in the current scope\n\
    \  --> /tmp/tmpd8_lpmpe.rs:12:26\n   |\n12 |     String::from_utf8(x).rotate_left(shift)\n\
    \   |                          ^^^^^^^^^^^ method not found in `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars().enumerate().filter_map(|(_,\
    \ i)| {\n        i < shift || (i < (shift + x.to_string().len()))\n    }).map(|i|\
    \ (x.to_string().chars()[i as usize]).to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86uv87ml.rs:10:13\n   |\n\
    10 |         i < shift || (i < (shift + x.to_string().len()))\n   |          \
    \   ^^^^^ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp86uv87ml.rs:10:36\n   |\n10 |         i < shift || (i < (shift +\
    \ x.to_string().len()))\n   |                                    ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86uv87ml.rs:10:27\n\
    \   |\n10 |         i < shift || (i < (shift + x.to_string().len()))\n   |   \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86uv87ml.rs:10:9\n\
    \   |\n10 |         i < shift || (i < (shift + x.to_string().len()))\n   |   \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `bool`\n   |\n   = note: expected enum `Option<_>`\n              found\
    \ type `bool`\nhelp: try wrapping the expression in `Some`\n   |\n10 |       \
    \  Some(i < shift || (i < (shift + x.to_string().len())))\n   |         +++++\
    \                                                +\n\nerror[E0277]: cannot add\
    \ `usize` to `isize`\n  --> /tmp/tmp86uv87ml.rs:10:34\n   |\n10 |         i <\
    \ shift || (i < (shift + x.to_string().len()))\n   |                         \
    \         ^ no implementation for `isize + usize`\n   |\n   = help: the trait\
    \ `Add<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0608]: cannot index\
    \ into a value of type `Chars<'_>`\n  --> /tmp/tmp86uv87ml.rs:11:16\n   |\n11\
    \ |     }).map(|i| (x.to_string().chars()[i as usize]).to_string()).collect()\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to 6 previ"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let digits = x.to_string();\n\n    let\
    \ remainder = digits % shift;\n    let digits = digits - remainder;\n\n    let\
    \ mut buffer = String::new();\n    for c in digits {\n        buffer.push_str(&format!(\"\
    {}{}\", c, ' ' * (shift - remainder)));\n    }\n    buffer.to_string()\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `String` by `isize`\n  --> /tmp/tmpnkhqjzft.rs:11:28\n\
    \   |\n11 |     let remainder = digits % shift;\n   |                     ------\
    \ ^ ----- isize\n   |                     |\n   |                     String\n\
    \nerror[E0369]: cannot subtract `_` from `String`\n  --> /tmp/tmpnkhqjzft.rs:12:25\n\
    \   |\n12 |     let digits = digits - remainder;\n   |                  ------\
    \ ^ --------- _\n   |                  |\n   |                  String\n\nerror[E0369]:\
    \ cannot multiply `char` by `_`\n  --> /tmp/tmpnkhqjzft.rs:16:49\n   |\n16 | \
    \        buffer.push_str(&format!(\"{}{}\", c, ' ' * (shift - remainder)));\n\
    \   |                                             --- ^ ------------------- _\n\
    \   |                                             |\n   |                    \
    \                         char\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    loop\
    \ {\n        match x {\n            0 => result.push('-'),\n            x => result.push((x\
    \ % 10).to_string()),\n        }\n        x >>= shift;\n        if x == 0 {\n\
    \            break;\n        }\n        result.push((x % 10).to_string());\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5v96y6xz.rs:13:30\n   |\n\
    13 |             x => result.push((x % 10).to_string()),\n   |               \
    \               ^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5v96y6xz.rs:19:21\n   |\n19 |  \
    \       result.push((x % 10).to_string());\n   |                     ^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use std::cmp::Ordering;\n    x.to_string().into_iter().cloned().collect::<Vec<_>>().into_iter().zip(\n\
    \        (0 as usize..(x as usize)).collect::<Vec<_>>().into_iter(),\n    )\n\
    \    .fold(\"\", |mut acc, &(acc, i)| {\n        if i < shift {\n            acc\
    \ += acc as char;\n            return acc;\n        }\n        let j = i.saturating_sub(shift);\n\
    \        acc + j.to_string().into_iter().cloned().collect::<Vec<_>>().into_iter().fold(\n\
    \            acc as char,\n            |acc, &(acc, _)| {\n                *acc\
    \ -= acc as char;\n                acc\n            },\n        );\n    })\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `acc` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpffjgdj04.rs:13:27\n   |\n13 |     .fold(\"\", |mut acc,\
    \ &(acc, i)| {\n   |                           ^^^ used as parameter more than\
    \ once\n\nerror[E0415]: identifier `acc` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpffjgdj04.rs:21:21\n   |\n21 |             |acc, &(acc, _)|\
    \ {\n   |                     ^^^ used as parameter more than once\n\nwarning:\
    \ unused import: `std::cmp::Ordering`\n --> /tmp/tmpffjgdj04.rs:9:9\n  |\n9 |\
    \     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n  = note:\
    \ `#[warn(unused_imports)]` on by default\n\nerror[E0599]: the method `into_iter`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmpffjgdj04.rs:10:19\n    |\n10  |       x.to_string().into_iter().cloned().collect::<Vec<_>>().into_iter().zip(\n\
    \    |                     ^^^^^^^^^\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            `str:\
    \ Sized`\n            which is required by `str: IntoIterator`\n            `str:\
    \ Iterator`\n            which is required by `str: IntoIterator`\n          \
    \  `&str: Iterator`\n            which is required by `&str: IntoIterator`\n \
    \           `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror[E0277]: cannot add `_` to `()`\n  --> /tmp/tmpffjgdj04.rs:19:13\n\
    \   |\n19 |         acc + j.to_string().into_iter().cloned().collect::<Vec<_>>().into_iter().fold(\n\
    \   |             ^ no implementation for `() + _`\n   |\n   = help: the trait\
    \ `Add<_>` is not implemented for `()`\n\nerror[E0277]: cannot add-assign `char`\
    \ to `()`\n  --> /tmp/tmpffjgdj04.rs:15:17\n   |\n15 |             acc += acc\
    \ as char;\n   |                 ^^ no implementation for `() += char`\n   |\n\
    \   = help: "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let s = if shift == 0 {\n        String::from(x)\n\
    \    } else {\n        let mut rs = String::new();\n        for _ in 0..shift\
    \ {\n            rs.push_str(&x.to_string());\n            x = rs[rs.len() - 1].to_digit(10);\n\
    \        }\n        rs\n    };\n    rs.reverse();\n    rs\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `rs` in this scope\n  --> /tmp/tmpf5e48lw2.rs:19:5\n\
    \   |\n19 |     rs.reverse();\n   |     ^^ help: a local variable with a similar\
    \ name exists: `s`\n\nerror[E0425]: cannot find value `rs` in this scope\n  -->\
    \ /tmp/tmpf5e48lw2.rs:20:5\n   |\n20 |     rs\n   |     ^^ help: a local variable\
    \ with a similar name exists: `s`\n\nerror[E0277]: the trait bound `String: From<isize>`\
    \ is not satisfied\n  --> /tmp/tmpf5e48lw2.rs:10:9\n   |\n10 |         String::from(x)\n\
    \   |         ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for `String`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpf5e48lw2.rs:15:17\n\
    \   |\n15 |             x = rs[rs.len() - 1].to_digit(10);\n   |             \
    \    ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    for\
    \ _ in 0..shift {\n        digits.reverse();\n    }\n    digits\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp7b_nb5sm.rs:11:16\n   |\n11 |         digits.reverse();\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars().enumerate().map(|(i,\
    \ digit)| {\n        let val = x as i32;\n        ((i + 1) * shift) + digit\n\
    \    }).fold(String::new(), |mut acc, x| {\n        acc.push_str(&format!(\"{}{}\"\
    , x.to_string(10), &digits[x % 10]));\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digits` in this scope\n  --> /tmp/tmpa0koov2q.rs:13:57\n\
    \   |\n13 |         acc.push_str(&format!(\"{}{}\", x.to_string(10), &digits[x\
    \ % 10]));\n   |                                                         ^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa0koov2q.rs:11:20\n\
    \   |\n11 |         ((i + 1) * shift) + digit\n   |                    ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot multiply `usize` by `isize`\n\
    \  --> /tmp/tmpa0koov2q.rs:11:18\n   |\n11 |         ((i + 1) * shift) + digit\n\
    \   |                  ^ no implementation for `usize * isize`\n   |\n   = help:\
    \ the trait `Mul<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ add `char` to `usize`\n  --> /tmp/tmpa0koov2q.rs:11:27\n   |\n11 |         ((i\
    \ + 1) * shift) + digit\n   |                           ^ no implementation for\
    \ `usize + char`\n   |\n   = help: the trait `Add<char>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let len = x.len();\n    let mut digits\
    \ = String::new();\n    for i in 0..shift {\n        digits.append(&x[len - 1\
    \ - i]);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp7fnv6dak.rs:9:17\n  |\n9 |     let len = x.len();\n  | \
    \                ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `append` found for struct `String` in the current scope\n  --> /tmp/tmp7fnv6dak.rs:12:16\n\
    \   |\n12 |         digits.append(&x[len - 1 - i]);\n   |                ^^^^^^\
    \ method not found in `String`\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmp7fnv6dak.rs:12:24\n   |\n12 |         digits.append(&x[len\
    \ - 1 - i]);\n   |                        ^^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift < x.len() {\n        let mut\
    \ result = String::with_capacity(x.len() + shift);\n        for x in 0..shift\
    \ {\n            let j = x.len();\n            result.append(&mut x.chars()[j..j\
    \ + shift].iter().cloned().collect::<String>());\n        }\n        result.append(&mut\
    \ x.chars()[shift..].iter().cloned().collect::<String>());\n        result\n \
    \   } else {\n        x\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpvmxc9we5.rs:9:18\n  |\n9 |     if shift < x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpvmxc9we5.rs:10:50\n\
    \   |\n10 |         let mut result = String::with_capacity(x.len() + shift);\n\
    \   |                                                  ^^^ method not found in\
    \ `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpvmxc9we5.rs:12:23\n   |\n12 |             let j\
    \ = x.len();\n   |                       ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpvmxc9we5.rs:13:20\n   |\n13 |             result.append(&mut x.chars()[j..j\
    \ + shift].iter().cloned().collect::<String>());\n   |                    ^^^^^^\
    \ method not found in `String`\n\nerror[E0599]: no method named `chars` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpvmxc9we5.rs:13:34\n   |\n\
    13 |             result.append(&mut x.chars()[j..j + shift].iter().cloned().collect::<String>());\n\
    \   |                                  ^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpvmxc9we5.rs:15:16\n   |\n15 |         result.append(&mut x.chars()[shift..].iter().cloned().collect::<String>());\n\
    \   |                ^^^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `chars` found for type `isize` in the current scope\n  --> /tmp/tmpvmxc9we5.rs:15:30\n\
    \   |\n15 |         result.append(&mut x.chars()[shift..].iter().cloned().collect::<String>());\n\
    \   |                              ^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvmxc9we5.rs:18:9\n   |\n8  | fn circular_shift(x:\
    \ isize, shift: isize) -> String {\n   |                                     \
    \         ------ expected `String` because of return type\n...\n18 |         x\n\
    \   | "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::from(x);\n    let\
    \ digits = s.chars().count();\n    let shift = digits - shift;\n    if shift <\
    \ 0 {\n        digits = -digits;\n        shift -= digits;\n    }\n    s.push_str(&mut\
    \ s.chars()[shift..]);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \ --> /tmp/tmpeq_aw8n8.rs:9:17\n  |\n9 |     let mut s = String::from(x);\n  |\
    \                 ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <String as From<&String>>\n            <String as From<&mut str>>\n\
    \            <String as From<&str>>\n            <String as From<Box<str>>>\n\
    \            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeq_aw8n8.rs:11:26\n   |\n11 |\
    \     let shift = digits - shift;\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpeq_aw8n8.rs:11:24\n   |\n11 |     let shift = digits - shift;\n\
    \   |                        ^ no implementation for `usize - isize`\n   |\n \
    \  = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `usize`\n  --> /tmp/tmpeq_aw8n8.rs:13:18\n\
    \   |\n13 |         digits = -digits;\n   |                  ^^^^^^^ cannot apply\
    \ unary operator `-`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0608]:\
    \ cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpeq_aw8n8.rs:16:21\n\
    \   |\n16 |     s.push_str(&mut s.chars()[shift..]);\n   |                   \
    \  ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0600, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x.to_string().chars().enumerate().filter_map(|(i,\
    \ c| *i as usize > i as usize).map(|i| *i as usize)\n            .collect::<Vec<_>>().rev().collect()\n\
    \    } else {\n        x.to_string().chars().enumerate().filter_map(|(i, c| *i\
    \ as usize < i as usize).map(|i| *i as usize)\n            .collect::<Vec<_>>().rev().collect::<Vec<_>>().iter().rev()\n\
    \    }.collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .cloned()\n\
    \        .zip(x.to_string().chars().enumerate().filter_map(|(i, c| *i as usize\
    \ >= i as usize).map(|i| *i as usize)\n            .collect::<Vec<_>>().rev().collect::<Vec<_>>().iter().rev().cloned().cloned().collect::<Vec<_>>())\n\
    \        .filter_map(|(&c, &x)| *x == 0)\n        .fold(String::new(), |s, &(_,\
    \ &x)| {\n            let len = s.len();\n            *s.as_ptr().add((len as\
    \ usize) - (x as usize) + 1).copy_from_slice(&c.to_string().chars());\n      \
    \      *s.as_ptr().add(len as usize).copy_from_slice(&x.to_string().chars());\n\
    \            s\n        })\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `*`\n  --> /tmp/tmp0au5657h.rs:10:62\n \
    \  |\n10 |         x.to_string().chars().enumerate().filter_map(|(i, c| *i as\
    \ usize > i as usize).map(|i| *i as usize)\n   |                             \
    \                              -  ^ expected pattern\n   |                   \
    \                                        |\n   |                             \
    \                              while parsing this or-pattern starting here\n\n\
    error: expected pattern, found `*`\n  --> /tmp/tmp0au5657h.rs:13:62\n   |\n13\
    \ |         x.to_string().chars().enumerate().filter_map(|(i, c| *i as usize <\
    \ i as usize).map(|i| *i as usize)\n   |                                     \
    \                      -  ^ expected pattern\n   |                           \
    \                                |\n   |                                     \
    \                      while parsing this or-pattern starting here\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp0au5657h.rs:10:53\n   |\n9  |     if shift\
    \ > x.len() {\n   |                        - closing delimiter possibly meant\
    \ for this\n10 |         x.to_string().chars().enumerate().filter_map(|(i, c|\
    \ *i as usize > i as usize).map(|i| *i as usize)\n   |                       \
    \                              ^ unclosed delimiter\n11 |             .collect::<Vec<_>>().rev().collect()\n\
    12 |     } else {\n   |     ^ mismatched closing delimiter\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp0au5657h.rs:13:53\n   |\n12 |     } else\
    \ {\n   |            - closing delimiter possibly meant for this\n13 |       \
    \  x.to_string().chars().enumerate().filter_map(|(i, c| *i as usize < i as usize).map(|i|\
    \ *i as usize)\n   |                                                     ^ unclosed\
    \ delimiter\n14 |             .collect::<Vec<_>>().rev().collect::<Vec<_>>().iter().rev()\n\
    15 |     }.collect::<Vec<_>>()\n   |     ^ mismatched closing delimiter\n\nerror:\
    \ mismatched closing delimiter: `}`\n  --> /tmp/tmp0au5657h.rs:19:13\n   |\n8\
    \  | fn circular_shift(x: isize, shift: isize) -> String {\n   |             \
    \                            "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift < 0 {\n        x.to_string().rev().chars().enumerate().map(|(i,\
    \ _)| {\n            let (v, f) = x.digits(i);\n            f.to_string() + v.to_string()\n\
    \        }).collect::<Vec<_>>()\n    } else {\n        x.to_string().chars().enumerate().map(|(i,\
    \ _)| {\n            let (v, f) = x.digits(i);\n            f.to_string() + v.to_string()\n\
    \        }).collect::<Vec<_>>()\n            .iter()\n            .map(|n| n.to_string().as_str().to_owned()\
    \ + n.to_string().as_str().to_owned())\n            .collect::<Vec<_>>()\n   \
    \         .concat()\n            .to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpq43dgimz.rs:10:23\n\
    \    |\n10  |           x.to_string().rev().chars().enumerate().map(|(i, _)| {\n\
    \    |                         ^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror[E0599]: no method named `digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpq43dgimz.rs:11:28\n   |\n11 |          \
    \   let (v, f) = x.digits(i);\n   |                            ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpq43dgimz.rs:16:28\n   |\n16 |          \
    \   let (v, f) = x.digits(i);\n   |                            ^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for d\
    \ in x.to_string().chars().skip(shift % x.len()) {\n        s.push(*d);\n    }\n\
    \    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpibnzqxi7.rs:10:51\n   |\n10 |     for d in x.to_string().chars().skip(shift\
    \ % x.len()) {\n   |                                                   ^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpibnzqxi7.rs:10:41\n\
    \   |\n10 |     for d in x.to_string().chars().skip(shift % x.len()) {\n   | \
    \                                        ^^^^^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n10 |     for d in x.to_string().chars().skip((shift\
    \ % x.len()).try_into().unwrap()) {\n   |                                    \
    \     +               +++++++++++++++++++++\n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n  --> /tmp/tmpibnzqxi7.rs:11:16\n   |\n11 |         s.push(*d);\n\
    \   |                ^^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    if\
    \ shift > x.len() {\n        for r in x.iter().rev() {\n            result.push(r);\n\
    \        }\n    } else {\n        for r in x.iter().rev().nth(shift).rev() {\n\
    \            result.push(r);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpb1p76_oa.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpb1p76_oa.rs:11:20\n\
    \   |\n11 |         for r in x.iter().rev() {\n   |                    ^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `iter` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpb1p76_oa.rs:15:20\n   |\n15 |  \
    \       for r in x.iter().rev().nth(shift).rev() {\n   |                    ^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    while\
    \ x >= 10 {\n        *s = x.to_string();\n        x += 10;\n        *s = *s.chars().next().unwrap().to_string();\n\
    \        x += 10;\n        s += '0';\n    }\n\n    while x < 10 {\n        *s\
    \ = x.to_string();\n        x -= 10;\n        *s = *s.chars().next().unwrap().to_string();\n\
    \        x -= 10;\n        s += '0';\n    }\n\n    *s = x.to_string();\n    *s\
    \ = *s.chars().last().unwrap().to_string();\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppf20ykua.rs:11:14\n   |\n\
    11 |         *s = x.to_string();\n   |         --   ^^^^^^^^^^^^^ expected `str`,\
    \ found struct `String`\n   |         |\n   |         expected due to the type\
    \ of this binding\n\nerror[E0277]: the size for values of type `str` cannot be\
    \ known at compilation time\n  --> /tmp/tmppf20ykua.rs:11:9\n   |\n11 |      \
    \   *s = x.to_string();\n   |         ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n   = note: the\
    \ left-hand-side of an assignment must have a statically known size\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmppf20ykua.rs:13:9\n   |\n13 |         *s = *s.chars().next().unwrap().to_string();\n\
    \   |         ^^ doesn't have a size known at compile-time\n   |\n   = help: the\
    \ trait `Sized` is not implemented for `str`\n   = note: the left-hand-side of\
    \ an assignment must have a statically known size\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppf20ykua.rs:15:14\n   |\n15 |         s += '0';\n   | \
    \             ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n15 |         s += \"0\";\n   |   \
    \           ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppf20ykua.rs:19:14\n\
    \   |\n19 |         *s = x.to_string();\n   |         --   ^^^^^^^^^^^^^ expected\
    \ `str`, found struct `String`\n   |         |\n   |         expected due to the\
    \ type of this binding\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n  --> /tmp/tmppf20ykua.rs:19:9\n   |\n19 |   \
    \      *s = x.to_string();\n   |         ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n   = note: the\
    \ left-hand-side of an assignment must have a statically known size\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmppf20ykua.rs:21:9\n   |\n21 |         *s = *s.chars().next().unwrap().to_string();\n\
    \   |         ^^ doesn't have a si"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        let mut\
    \ z = x.len();\n        while z > shift {\n            z -= 1;\n        }\n  \
    \      let mut result = String::new();\n        for i in 0..z {\n            result.push(x[z..check]);\n\
    \            result.push(0);\n        }\n        result.reverse();\n        result.to_owned()\n\
    \    } else {\n        let mut result = String::from(\"0\");\n        for i in\
    \ x.len() - shift..x.len() {\n            result.push(x[i]);\n        }\n    \
    \    result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `check` in this scope\n  --> /tmp/tmppmngvzuc.rs:16:30\n\
    \   |\n16 |             result.push(x[z..check]);\n   |                      \
    \        ^^^^^ not found in this scope\n\nerror[E0599]: no method named `len`\
    \ found for type `isize` in the current scope\n --> /tmp/tmppmngvzuc.rs:9:18\n\
    \  |\n9 |     if shift > x.len() {\n  |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmppmngvzuc.rs:10:23\n   |\n10 |         let mut\
    \ z = x.len();\n   |                       ^^^ method not found in `isize`\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmppmngvzuc.rs:16:25\n\
    \   |\n16 |             result.push(x[z..check]);\n   |                      \
    \   ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppmngvzuc.rs:17:25\n\
    \   |\n17 |             result.push(0);\n   |                         ^ expected\
    \ `char`, found `u8`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmppmngvzuc.rs:19:16\n   |\n19 | \
    \        result.reverse();\n   |                ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0599]: no method named `len`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmppmngvzuc.rs:23:20\n\
    \   |\n23 |         for i in x.len() - shift..x.len() {\n   |                \
    \    ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmppmngvzuc.rs:23:37\n   |\n\
    23 |         for i in x.len() - shift..x.len() {\n   |                       \
    \              ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmppmngvzuc.rs:24:25\n   |\n24 |       \
    \      result.push(x[i]);\n   |                         ^^^^\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    match x.checked_mul(*shift) {\n      \
    \  Some(x) => x.to_string(),\n        _ => unimplemented!(),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpsyow79_m.rs:9:25\n\
    \  |\n9 |     match x.checked_mul(*shift) {\n  |                         ^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::from(\"0\");\n   \
    \ for _ in 0..shift {\n        let index = s.len();\n        s = String::from_utf8(s.as_bytes()).unwrap().to_string();\n\
    \        *s.as_bytes()[index..].copy_from_slice(&x.to_digit(10).unwrap());\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4kyfl2bv.rs:12:31\n   |\n\
    12 |         s = String::from_utf8(s.as_bytes()).unwrap().to_string();\n   | \
    \                              ^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_vec()`\n   |                               |\n   |                    \
    \           expected struct `Vec`, found `&[u8]`\n   |\n   = note: expected struct\
    \ `Vec<u8>`\n           found reference `&[u8]`\n\nerror[E0599]: no method named\
    \ `to_digit` found for type `isize` in the current scope\n  --> /tmp/tmp4kyfl2bv.rs:13:51\n\
    \   |\n13 |         *s.as_bytes()[index..].copy_from_slice(&x.to_digit(10).unwrap());\n\
    \   |                                                   ^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0614]: type `()` cannot be dereferenced\n  --> /tmp/tmp4kyfl2bv.rs:13:9\n\
    \   |\n13 |         *s.as_bytes()[index..].copy_from_slice(&x.to_digit(10).unwrap());\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ digits = x.to_string().chars();\n    let mut i = shift - 1;\n    for digit in\
    \ digits {\n        if i < 0 {\n            break;\n        }\n        i += digit.digit;\n\
    \        result.push((digit as char).to_string());\n    }\n    if i < 0 {\n  \
    \      result.push_str(&digits[digits.len() - shift as usize..].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `char` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmp3mldov0m.rs:16:20\n   |\n16 |         i += digit.digit;\n   | \
    \                   ^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3mldov0m.rs:17:21\n\
    \   |\n17 |         result.push((digit as char).to_string());\n   |          \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmp3mldov0m.rs:20:40\n   |\n20 |         result.push_str(&digits[digits.len()\
    \ - shift as usize..].to_string());\n   |                                    \
    \    ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a\
    \ value of type `Chars<'_>`\n  --> /tmp/tmp3mldov0m.rs:20:26\n   |\n20 |     \
    \    result.push_str(&digits[digits.len() - shift as usize..].to_string());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0608, E0610.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    match x {\n        0 | 1 | 2 | 3 | 4 |\
    \ 5 | 6 | 7 | 8 | 9 => String::from(\"0\"),\n        10 | 11 | 12 | 13 | 14 |\
    \ 15 | 16 => String::from(\"10\"),\n        17 | 18 | 19 | 20 | 21 => String::from(\"\
    11\"),\n        22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 => String::from(\"\
    12\"),\n        32 => String::from(\"13\"),\n        33 => String::from(\"14\"\
    ),\n        34 => String::from(\"15\"),\n        35 => String::from(\"16\"),\n\
    \        36 => String::from(\"17\"),\n        37 | 38 | 39 => String::from(\"\
    18\"),\n        40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 => String::from(\"\
    19\"),\n        50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 => String::from(\"\
    20\"),\n        60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 => String::from(\"\
    21\"),\n        70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 => String::from(\"\
    22\"),\n        80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 => String::from(\"\
    23\"),\n        90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 => String::from(\"\
    24\"),\n        _ => unreachable!(),\n    }\n    x.to_string().split_ascii_lowercase().iter().zip(shift.to_string().chars().cloned().zip(x.to_string().chars().cloned()).flat_map(|(a,\
    \ b)| {\n        b.to_digit(10).map(|b| {\n            String::from(a[..b] + a.chars().nth(b\
    \ + 1).unwrap())\n        })\n    }).map(|(a, b)| {\n        b.to_digit(10).map(|b|\
    \ {\n            String::from(a[..b] + b.to_string().chars().nth(b + 1).unwrap())\n\
    \        })\n    }).collect_vec().flatten().collect())\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsa09xsft.rs:9:5\n   |\n9\
    \  | /     match x {\n10 | |         0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 =>\
    \ String::from(\"0\"),\n11 | |         10 | 11 | 12 | 13 | 14 | 15 | 16 => String::from(\"\
    10\"),\n12 | |         17 | 18 | 19 | 20 | 21 => String::from(\"11\"),\n...  |\n\
    26 | |         _ => unreachable!(),\n27 | |     }\n   | |     ^- help: consider\
    \ using a semicolon here\n   | |_____|\n   |       expected `()`, found struct\
    \ `String`\n\nerror[E0599]: no method named `split_ascii_lowercase` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpsa09xsft.rs:28:19\n   |\n\
    28 |     x.to_string().split_ascii_lowercase().iter().zip(shift.to_string().chars().cloned().zip(x.to_string().chars().cloned()).flat_map(|(a,...\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_ascii_lowercase`\n\nerror[E0271]: type mismatch resolving\
    \ `<Chars<'_> as Iterator>::Item == &_`\n    --> /tmp/tmpsa09xsft.rs:28:80\n \
    \    |\n28   |     x.to_string().split_ascii_lowercase().iter().zip(shift.to_string().chars().cloned().zip(x.to_string().chars().cloned()).flat_map(|(a,...\n\
    \     |                                                                      \
    \          ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<Chars<'_>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpsa09xsft.rs:28:89\n \
    \  |\n28 |   ...string().chars().cloned().zip(x.to_string().chars().cloned()).flat_map(|(a,\
    \ b)| {\n   |                                ^^^ method cannot be called on `Cloned<Chars<'_>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<Chars<'_> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Chars<'_>>: Iterator`\n           `Cloned<Chars<'_>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Chars<'_>>: Iterator`\n\
    \nerror[E0271]: type mi"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        String::from(reverse_digits(&x.to_digits()[..shift]))\n\
    \    } else {\n        String::from(reverse_digits(&x.to_digits()[shift..]))\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `reverse_digits` in this scope\n  -->\
    \ /tmp/tmpfqnmb0k5.rs:10:22\n   |\n10 |         String::from(reverse_digits(&x.to_digits()[..shift]))\n\
    \   |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `reverse_digits` in this scope\n  --> /tmp/tmpfqnmb0k5.rs:12:22\n\
    \   |\n12 |         String::from(reverse_digits(&x.to_digits()[shift..]))\n  \
    \ |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n --> /tmp/tmpfqnmb0k5.rs:9:18\n\
    \  |\n9 |     if shift > x.len() {\n  |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `to_digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpfqnmb0k5.rs:10:40\n   |\n10 |         String::from(reverse_digits(&x.to_digits()[..shift]))\n\
    \   |                                        ^^^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `to_digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpfqnmb0k5.rs:12:40\n   |\n12 |         String::from(reverse_digits(&x.to_digits()[shift..]))\n\
    \   |                                        ^^^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::with_capacity(x.to_string().len());\n\
    \    while x >= 10 {\n        let rem = x % 10;\n        x /= 10;\n        s.push(rem.to_string());\n\
    \    }\n    let mut len = s.len();\n    if shift > len {\n        len = shift;\n\
    \    }\n    for i in 0..shift {\n        let index = len - 1 - i;\n        s.push(x[index].to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnxegjr2r.rs:13:16\n   |\n\
    13 |         s.push(rem.to_string());\n   |                ^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnxegjr2r.rs:16:16\n\
    \   |\n16 |     if shift > len {\n   |                ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n16 |     if shift > len.try_into().unwrap()\
    \ {\n   |                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnxegjr2r.rs:17:15\n   |\n15 |     let mut len = s.len();\n   |\
    \                   ------- expected due to this value\n16 |     if shift > len\
    \ {\n17 |         len = shift;\n   |               ^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnxegjr2r.rs:20:31\n\
    \   |\n20 |         let index = len - 1 - i;\n   |                           \
    \    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpnxegjr2r.rs:20:29\n   |\n20 |         let index\
    \ = len - 1 - i;\n   |                             ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpnxegjr2r.rs:21:16\n\
    \   |\n21 |         s.push(x[index].to_string());\n   |                ^^^^^^^^\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0608.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    format!(\"{}\", (x * x) % MOD).to_string().chars().nth(shift)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MOD` in this scope\n --> /tmp/tmp7sbb1bfs.rs:9:29\n\
    \  |\n9 |     format!(\"{}\", (x * x) % MOD).to_string().chars().nth(shift)\n\
    \  |                             ^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x.reverse()\n\
    \    }\n    x.to_string() + &x[shift..].to_string()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp0jdzbzos.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for type `isize` in the current scope\n  --> /tmp/tmp0jdzbzos.rs:10:11\n\
    \   |\n10 |         x.reverse()\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reverse_bits`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmp0jdzbzos.rs:12:22\n   |\n12 |     x.to_string()\
    \ + &x[shift..].to_string()\n   |                      ^^^^^^^^^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x[x.len()\
    \ - 1]\n    } else {\n        let mut s = String::new();\n        for c in x.chars().nth(shift)\
    \ {\n            s.push_str(&String::from(c as char));\n        }\n        for\
    \ c in x.chars().nth(x.len() - shift + 1) {\n            s.push_str(&String::from(c\
    \ as char));\n        }\n        s\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmphxkkk748.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmphxkkk748.rs:10:13\n\
    \   |\n10 |         x[x.len() - 1]\n   |             ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `chars` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmphxkkk748.rs:13:20\n   |\n13 |         for c in x.chars().nth(shift)\
    \ {\n   |                    ^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `chars` found for type `isize` in the current scope\n  --> /tmp/tmphxkkk748.rs:16:20\n\
    \   |\n16 |         for c in x.chars().nth(x.len() - shift + 1) {\n   |      \
    \              ^^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmphxkkk748.rs:16:34\n\
    \   |\n16 |         for c in x.chars().nth(x.len() - shift + 1) {\n   |      \
    \                            ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    match shift {\n        0 => String::from(x),\n\
    \        shift => {\n            let n = x.bit_length() - shift;\n           \
    \ let mut res = String::new();\n            res.push_str(&x.to_string().into_iter().take(n).collect::<String>());\n\
    \            res.push_str(&x.to_string().reverse().into_iter().take(n).collect::<String>());\n\
    \            res\n        }\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpagnbt51_.rs:10:14\n   |\n10 |         0 => String::from(x),\n \
    \  |              ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0599]: no method named `bit_length` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpagnbt51_.rs:12:23\n   |\n12 |             let n = x.bit_length()\
    \ - shift;\n   |                       ^^^^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: the method `into_iter` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpagnbt51_.rs:14:41\n    |\n14  |  \
    \             res.push_str(&x.to_string().into_iter().take(n).collect::<String>());\n\
    \    |                                           ^^^^^^^^^\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `String: IntoIterator`\n            `&String:\
    \ Iterator`\n            which is required by `&String: IntoIterator`\n      \
    \      `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpagnbt51_.rs:15:41\n\
    \   |\n15 |             res.push_str(&x.to_string().reverse().into_iter().take(n).collect::<String>());\n\
    \   |                                         ^^^^^^^ help: there is an associated\
    \ function"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut n = x.to_string();\n    let mut\
    \ digits = n.chars().skip(shift)\n        .take(x)\n        .collect::<Vec<_>>();\n\
    \    digits.reverse();\n    String::from(digits.join(\"\"));\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyl5ofg63.rs:10:37\n   |\n\
    10 |     let mut digits = n.chars().skip(shift)\n   |                        \
    \             ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    10 |     let mut digits = n.chars().skip(shift.try_into().unwrap())\n   |    \
    \                                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyl5ofg63.rs:11:15\n   |\n11 |         .take(x)\n   |  \
    \             ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n11\
    \ |         .take(x.try_into().unwrap())\n   |                ++++++++++++++++++++\n\
    \nerror[E0599]: the method `join` exists for struct `Vec<char>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpyl5ofg63.rs:14:25\n   |\n14 |     String::from(digits.join(\"\
    \"));\n   |                         ^^^^ method cannot be called on `Vec<char>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `[char]: Join<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyl5ofg63.rs:8:46\n   |\n8  | fn circular_shift(x: isize,\
    \ shift: isize) -> String {\n   |    --------------                          \
    \  ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n14 |     String::from(digits.join(\"\
    \"));\n   |                                  - help: remove this semicolon\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    x.to_string().split_ascii_numeric(|x|\
    \ {\n        match x {\n            x if x > 0 => Some((x % 10 + shift) % 10),\n\
    \            x if x < 0 => Some((-x % 10 + shift) % 10),\n            _ => None,\n\
    \        }\n    })\n    .for_each(|digit| result.push(*digit).unwrap());\n   \
    \ result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `split_ascii_numeric` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp304bitpb.rs:10:19\n   |\n10 |     x.to_string().split_ascii_numeric(|x|\
    \ {\n   |                   ^^^^^^^^^^^^^^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `unwrap` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmp304bitpb.rs:17:43\n   |\n17 |     .for_each(|digit| result.push(*digit).unwrap());\n\
    \   |                                           ^^^^^^ method not found in `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        if i > x.len() {\n            break;\n        }\n   \
    \     s += String::from(x[x.len() - i - 1].to_digit(10));\n    }\n    for _ in\
    \ 0..shift {\n        if s.len() <= x.len() {\n            break;\n        }\n\
    \        s += '0';\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp0k3z1pr5.rs:11:18\n   |\n11 |         if i > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp0k3z1pr5.rs:14:31\n\
    \   |\n14 |         s += String::from(x[x.len() - i - 1].to_digit(10));\n   |\
    \                               ^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0k3z1pr5.rs:14:14\n   |\n14 |         s += String::from(x[x.len()\
    \ - i - 1].to_digit(10));\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&String::from(x[x.len() - i\
    \ - 1].to_digit(10))`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp0k3z1pr5.rs:17:25\n   |\n17 |         if\
    \ s.len() <= x.len() {\n   |                         ^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0k3z1pr5.rs:20:14\n   |\n20 |\
    \         s += '0';\n   |              ^^^ expected `&str`, found `char`\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n20 |   \
    \      s += \"0\";\n   |              ~~~\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use std::ops::{Add, Sub};\n\n    let mut\
    \ digits: Vec<isize> = x.to_string().chars().take(shift).collect();\n    if shift\
    \ > x.len() {\n        digits.reverse();\n    }\n    String::from_utf8_lossy(&digits)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused imports: `Add`, `Sub`\n --> /tmp/tmpn898tr23.rs:9:20\n\
    \  |\n9 |     use std::ops::{Add, Sub};\n  |                    ^^^  ^^^\n  |\n\
    \  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn898tr23.rs:11:61\n   |\n11 |     let mut digits: Vec<isize>\
    \ = x.to_string().chars().take(shift).collect();\n   |                       \
    \                                      ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     let mut digits: Vec<isize> = x.to_string().chars().take(shift.try_into().unwrap()).collect();\n\
    \   |                                                                  ++++++++++++++++++++\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpn898tr23.rs:11:68\n     |\n11\
    \   |     let mut digits: Vec<isize> = x.to_string().chars().take(shift).collect();\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpn898tr23.rs:12:18\n   |\n12 |  \
    \   if shift > x.len() {\n   |                  ^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn898tr23.rs:15:29\n   |\n15 |\
    \     String::from_utf8_lossy(&digits)\n   |                             ^^^^^^^\
    \ expected slice `[u8]`, found struct `Vec`\n   |\n   = note: expected reference\
    \ `&[u8]`\n              found reference `&Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn898tr23.rs:15:5\n   |\n8  | fn circular_shift(x: isize,\
    \ shift: isize) -> String {\n   |                                            \
    \  ------ expected `String` because of return type\n...\n15 |"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ len = 0;\n    while x != 0 {\n        if len + shift >= s.len() {\n        \
    \    s.push_str(&format!(\"{}{}\", x%10, digits[len]));\n            len += 1;\n\
    \        } else {\n            s.push_str(&format!(\"{}{}\", digits[len], x%10));\n\
    \            len += 1;\n        }\n        x /= 10;\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digits` in this scope\n  --> /tmp/tmpbpyy1j7j.rs:13:47\n\
    \   |\n13 |             s.push_str(&format!(\"{}{}\", x%10, digits[len]));\n \
    \  |                                               ^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `digits` in this scope\n  --> /tmp/tmpbpyy1j7j.rs:16:41\n\
    \   |\n16 |             s.push_str(&format!(\"{}{}\", digits[len], x%10));\n \
    \  |                                         ^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbpyy1j7j.rs:12:27\n   |\n12 |  \
    \       if len + shift >= s.len() {\n   |                           ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |         if len + shift\
    \ >= s.len().try_into().unwrap() {\n   |                                  ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    for\
    \ _ in 0..shift {\n        digits = digits[..digits.len() - 1];\n    }\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_kpb20_s.rs:11:18\n   |\n\
    9  |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n10 |     for _ in 0..shift {\n11 |         digits\
    \ = digits[..digits.len() - 1];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  |\n\
    \   |                  expected struct `String`, found `str`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    assert!(shift < std::mem::size_of::<i32>());\n\
    \    let mut s = String::new();\n    loop {\n        if shift > x.len() {\n  \
    \          s.push_str(&x[x.len()..]);\n            return s;\n        }\n    \
    \    let mut last = s.len();\n        let mut cur = std::mem::transmute::<isize>(x);\n\
    \        for i in 0..shift {\n            cur.rotate_left();\n            if cur.is_zero()\
    \ {\n                cur.rotate_left();\n                break;\n            }\n\
    \        }\n        s.push_str(&x[last..]);\n        x >>= shift;\n    }\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk8ybm5mf.rs:9:21\n  |\n9 |\
    \     assert!(shift < std::mem::size_of::<i32>());\n  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     assert!(shift\
    \ < std::mem::size_of::<i32>().try_into().unwrap());\n  |                    \
    \                           ++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmpk8ybm5mf.rs:12:22\n\
    \   |\n12 |         if shift > x.len() {\n   |                      ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpk8ybm5mf.rs:13:29\n   |\n13 |          \
    \   s.push_str(&x[x.len()..]);\n   |                             ^^^ method not\
    \ found in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpk8ybm5mf.rs:13:25\n   |\n13 |             s.push_str(&x[x.len()..]);\n\
    \   |                         ^^^^^^^^^^^^\n\nerror[E0107]: this function takes\
    \ 2 generic arguments but 1 generic argument was supplied\n  --> /tmp/tmpk8ybm5mf.rs:17:33\n\
    \   |\n17 |         let mut cur = std::mem::transmute::<isize>(x);\n   |     \
    \                            ^^^^^^^^^   ----- supplied 1 generic argument\n \
    \  |                                 |\n   |                                 expected\
    \ 2 generic arguments\n   |\nhelp: add missing generic argument\n   |\n17 |  \
    \       let mut cur = std::mem::transmute::<isize, U>(x);\n   |              \
    \                                    +++\n\nerror[E0608]: cannot index into a\
    \ value of type `isize`\n  --> /tmp/tmpk8ybm5mf.rs:25:21\n   |\n25 |         s.push_str(&x[last..]);\n\
    \   |                     ^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0107, E0308, E0599, E0608.\nFor more\
    \ information about an error, try `rustc --explain E0107`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    debug_assert!(shift >= 0);\n    let mut\
    \ result = String::new();\n    result.push_str(&x.to_string());\n    let mut pos\
    \ = result.len() - 1;\n    while pos > 0 {\n        result.swap(0, pos);\n   \
    \     result.swap(pos + 1, result.len());\n        pos = (pos - 1) % shift;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpfz_69ik5.rs:14:16\n   |\n14 |         result.swap(0, pos);\n\
    \   |                ^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `swap` found for struct `String` in the current scope\n  --> /tmp/tmpfz_69ik5.rs:15:16\n\
    \   |\n15 |         result.swap(pos + 1, result.len());\n   |                ^^^^\
    \ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfz_69ik5.rs:16:27\n\
    \   |\n16 |         pos = (pos - 1) % shift;\n   |                           ^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n\
    \  --> /tmp/tmpfz_69ik5.rs:16:25\n   |\n16 |         pos = (pos - 1) % shift;\n\
    \   |                         ^ no implementation for `usize % isize`\n   |\n\
    \   = help: the trait `Rem<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Rem<Rhs>`:\n             <&'a f32\
    \ as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as\
    \ Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n\
    \             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n      \
    \       <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        match x {\n            0 => break,\n            _ => {\n            \
    \    s.push_str(&format!(\"{}{:02}\", &x.remainder(10_u32.pow((shift + 1).into())),\
    \ &x.quotient(10_u32)));\n                x %= 10_u32;\n            }\n      \
    \  }\n        shift += 1;\n        if shift > 3 {\n            shift -= 3;\n \
    \       }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remainder` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpxpc1begt.rs:14:51\n   |\n14 |                 s.push_str(&format!(\"\
    {}{:02}\", &x.remainder(10_u32.pow((shift + 1).into())), &x.quotient(10_u32)));\n\
    \   |                                                   ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0277]: the trait bound `u32: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpxpc1begt.rs:14:84\n   |\n14 |                 s.push_str(&format!(\"\
    {}{:02}\", &x.remainder(10_u32.pow((shift + 1).into())), &x.quotient(10_u32)));\n\
    \   |                                                                        \
    \            ^^^^ the trait `From<isize>` is not implemented for `u32`\n   |\n\
    \   = help: the following other types implement trait `From<T>`:\n           \
    \  <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32 as From<u16>>\n\
    \             <f32 as From<u8>>\n             <f64 as From<f32>>\n           \
    \  <f64 as From<i16>>\n             <f64 as From<i32>>\n             <f64 as From<i8>>\n\
    \           and 67 others\n   = note: required because of the requirements on\
    \ the impl of `Into<u32>` for `isize`\n\nerror[E0599]: no method named `quotient`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpxpc1begt.rs:14:97\n\
    \   |\n14 |                 s.push_str(&format!(\"{}{:02}\", &x.remainder(10_u32.pow((shift\
    \ + 1).into())), &x.quotient(10_u32)));\n   |                                \
    \                                                                 ^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpc1begt.rs:15:22\n\
    \   |\n15 |                 x %= 10_u32;\n   |                      ^^^^^^ expected\
    \ `isize`, found `u32`\n\nerror[E0277]: cannot mod-assign `isize` by `u32``\n\
    \  --> /tmp/tmpxpc1begt.rs:15:19\n   |\n15 |                 x %= 10_u32;\n  \
    \ |                   ^^ no implementation for `isize %= u32`\n   |\n   = help:\
    \ the trait `RemAssign<u32>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `RemAssign<Rhs>`:\n             <f32 as RemAssi"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::with_capacity(x.powf(shift));\
    \ // String with enough capacity\n    let mut i = x.to_digits();\n    for i in\
    \ i.rev() {\n        s[i] = *i;\n        s += s[i];\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `powf` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp9_bjrqk0.rs:9:41\n  |\n9 |     let mut s = String::with_capacity(x.powf(shift));\
    \ // String with enough capacity\n  |                                        \
    \ ^^^^ help: there is an associated function with a similar name: `pow`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp9_bjrqk0.rs:10:19\n   |\n10 |     let mut i = x.to_digits();\n   | \
    \                  ^^^^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    for\
    \ &d in x.to_string().chars().iter() {\n        digits.push_str(&digits[digits.len()\
    \ - 1] + &d.to_string());\n    }\n    digits.rotate_left(shift);\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmpvh3mahjy.rs:10:37\n   |\n10 |     for &d in x.to_string().chars().iter()\
    \ {\n   |                                     ^^^^ private field, not a method\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvh3mahjy.rs:11:26\n\
    \   |\n11 |         digits.push_str(&digits[digits.len() - 1] + &d.to_string());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `rotate_left` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpvh3mahjy.rs:13:12\n   |\n13 |     digits.rotate_left(shift);\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x.to_string()\
    \ + x.to_string().rev()\n    } else {\n        x.to_string() + x.to_string().chars()\n\
    \            .skip(shift)\n            .collect()\n    }\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp_e13mw_p.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: `String` is\
    \ not an iterator\n   --> /tmp/tmp_e13mw_p.rs:10:39\n    |\n10  |           x.to_string()\
    \ + x.to_string().rev()\n    |                                         ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_e13mw_p.rs:13:19\n   |\n13 |             .skip(shift)\n\
    \   |                   ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |             .skip(shift.try_into().unwrap())\n   |         \
    \               ++++++++++++++++++++\n\nerror[E0277]: a value of type `&str` cannot\
    \ be built from an iterator over elements of type `char`\n    --> /tmp/tmp_e13mw_p.rs:14:14\n\
    \     |\n14   |             .collect()\n     |              ^^^^^^^ value of type\
    \ `&str` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     =\
    \ help: the trait `FromIterator<char>` is not implemented for `&str`\n     = help:\
    \ the following other types implement trait `FromIterator<A>`:\n             \
    \  <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits\
    \ = digits.chars().nth(shift).cloned()\n        .collect::<String>()\n       \
    \ .reverse();\n    String::from(digits)\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprcpd7vf_.rs:10:33\n   |\n\
    10 |     digits = digits.chars().nth(shift).cloned()\n   |                   \
    \              ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    10 |     digits = digits.chars().nth(shift.try_into().unwrap()).cloned()\n   |\
    \                                      ++++++++++++++++++++\n\nerror[E0599]: `Option<char>`\
    \ is not an iterator\n   --> /tmp/tmprcpd7vf_.rs:10:40\n    |\n10  |       digits\
    \ = digits.chars().nth(shift).cloned()\n    |                                \
    \          ^^^^^^ `Option<char>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<char>: Iterator`\n   \
    \         which is required by `&mut Option<char>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift < x.len() {\n        let len\
    \ = x.len() - shift;\n        x[len..].to_string().reverse()\n    } else {\n \
    \       let len = x.len() - shift;\n        x[len..].to_string()\n    }\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpzz2jjodj.rs:9:18\n  |\n9 |     if shift < x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpzz2jjodj.rs:10:21\n\
    \   |\n10 |         let len = x.len() - shift;\n   |                     ^^^ method\
    \ not found in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpzz2jjodj.rs:11:9\n   |\n11 |         x[len..].to_string().reverse()\n\
    \   |         ^^^^^^^^\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpzz2jjodj.rs:13:21\n   |\n13 |         let\
    \ len = x.len() - shift;\n   |                     ^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpzz2jjodj.rs:14:9\n\
    \   |\n14 |         x[len..].to_string()\n   |         ^^^^^^^^\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::with_capacity(x\
    \ + shift);\n    for (i, digit) in x.iter().enumerate() {\n        if shift ==\
    \ i {\n            digits.push(*digit);\n        } else {\n            digits.push(digits[i\
    \ - shift].to_string());\n        }\n    }\n    digits\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppl3ff14r.rs:9:44\n  |\n9 |\
    \     let mut digits = String::with_capacity(x + shift);\n  |                \
    \                            ^^^^^^^^^ expected `usize`, found `isize`\n  |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n  |\n9 |     let mut digits = String::with_capacity((x + shift).try_into().unwrap());\n\
    \  |                                            +         +++++++++++++++++++++\n\
    \nerror[E0599]: no method named `iter` found for type `isize` in the current scope\n\
    \  --> /tmp/tmppl3ff14r.rs:10:25\n   |\n10 |     for (i, digit) in x.iter().enumerate()\
    \ {\n   |                         ^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `isize`\n  --> /tmp/tmppl3ff14r.rs:14:25\n\
    \   |\n14 |             digits.push(digits[i - shift].to_string());\n   |    \
    \                     ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n\
    \   |\n   = help: the trait `Index<isize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut res = String::new();\n    let\
    \ mut carry = 0;\n    for digit in x.to_string().chars().enumerate().rev() {\n\
    \        // Shift left\n        if digit + shift <= res.len() {\n            res.insert(digit\
    \ + shift, carry);\n            carry = 0;\n        }\n        // Shift right\n\
    \        if digit - shift >= 0 {\n            carry = *(res.chars().nth(digit\
    \ - shift).unwrap() + carry);\n            res.insert(digit - shift, carry);\n\
    \        }\n    }\n    if carry > 0 {\n        res.insert(0, carry);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpulew88i4.rs:11:52\n     |\n11   |     for digit in x.to_string().chars().enumerate().rev()\
    \ {\n     |                                                    ^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\n     = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Enumerate<Chars<'_>>`\nnote: required by a bound in `rev`\n\nerror[E0277]:\
    \ the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n  --> /tmp/tmpulew88i4.rs:11:18\n\
    \   |\n11 |     for digit in x.to_string().chars().enumerate().rev() {\n   | \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n   |\n   = help: the following other types\
    \ implement trait `ExactSizeIterator`:\n             &mut I\n             Args\n\
    \             ArgsOs\n             ArrayChunks<'_, T, N>\n             ArrayChunksMut<'_,\
    \ T, N>\n             ArrayWindows<'_, T, N>\n             Box<I, A>\n       \
    \      Chunks<'_, T>\n           and 109 others\n   = note: required because of\
    \ the requirements on the impl of `DoubleEndedIterator` for `Enumerate<Chars<'_>>`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Rev<Enumerate<Chars<'_>>>`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `Rev<Enumerate<Chars<'_>>>`\n\nerror[E0369]:\
    \ cannot add `isize` to `(usize, char)`\n  --> /tmp/tmpulew88i4.rs:13:18\n   |\n\
    13 |         if digit + shift <= res.len() {\n   |            ----- ^ ----- isize\n\
    \   |            |\n   |            (usize, char)\n\nerror[E0369]: cannot add\
    \ `isize` to `(usize, char)`\n  --> /tmp/tmp"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    if\
    \ x <= 0 {\n        result.push('-');\n        x = -x;\n    }\n    let mut digits\
    \ = x;\n    let mut rest = digits;\n    while rest > 0 {\n        let mut carry\
    \ = 0;\n        while rest >= 10 {\n            let mut digit = rest % 10;\n \
    \           rest -= digit;\n            digit = digit << shift | carry;\n    \
    \        carry = (digit >> shift) as u32;\n            result.push(digit as char);\n\
    \        }\n        digits = digits;\n    }\n    result.reverse();\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptkhbladg.rs:22:21\n   |\n\
    17 |         let mut carry = 0;\n   |                         - expected due to\
    \ this value\n...\n22 |             carry = (digit >> shift) as u32;\n   |   \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `u32`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmptkhbladg.rs:27:12\n   |\n27 |     result.reverse();\n   |      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmptkhbladg.rs:23:25\n\
    \   |\n23 |             result.push(digit as char);\n   |                    \
    \     ^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead (via\
    \ a `u32`)\n  --> /tmp/tmptkhbladg.rs:23:25\n   |\n23 |             result.push(digit\
    \ as char);\n   |                         ^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0604.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x.reverse();\n\
    \    }\n\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x[i]);\n\
    \    }\n    for i in (0..shift).rev() {\n        s.push(String::new());\n    }\n\
    \n    s.reverse();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpxg3fymri.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for type `isize` in the current scope\n  --> /tmp/tmpxg3fymri.rs:10:11\n\
    \   |\n10 |         x.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reverse_bits`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpxg3fymri.rs:15:16\n   |\n15 |       \
    \  s.push(x[i]);\n   |                ^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxg3fymri.rs:18:16\n   |\n18 |         s.push(String::new());\n\
    \   |                ^^^^^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpxg3fymri.rs:21:7\n   |\n21 |     s.reverse();\n   |   \
    \    ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use core::fmt::Write;\n\n    let mut digits\
    \ = String::new();\n    let mut reversed_digits = String::new();\n    let mut\
    \ i = 0;\n\n    while i < shift {\n        let digit = x % 10;\n        x += 1;\n\
    \        reversed_digits += digit.to_string();\n        digits.push(digit.to_string());\n\
    \        i += 1;\n    }\n\n    digits.append(&reversed_digits[..]);\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n --> /tmp/tmpxqjjscg8.rs:9:9\n\
    \  |\n9 |     use core::fmt::Write;\n  |         ^^^^ maybe a missing crate `core`?\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxqjjscg8.rs:18:28\n   |\n18 |\
    \         reversed_digits += digit.to_string();\n   |                        \
    \    ^^^^^^^^^^^^^^^^^\n   |                            |\n   |              \
    \              expected `&str`, found struct `String`\n   |                  \
    \          help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxqjjscg8.rs:19:21\n   |\n19 |         digits.push(digit.to_string());\n\
    \   |                     ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0599]: no method named `append` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpxqjjscg8.rs:23:12\n   |\n23 |     digits.append(&reversed_digits[..]);\n\
    \   |            ^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    s.push_str(&x.to_string());\n\
    \    s.push_str(&(\"0\".repeat(shift)).to_string());\n    s.to_string()\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2kw_mame.rs:11:29\n   |\n\
    11 |     s.push_str(&(\"0\".repeat(shift)).to_string());\n   |               \
    \              ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    11 |     s.push_str(&(\"0\".repeat(shift.try_into().unwrap())).to_string());\n\
    \   |                                  ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for &n\
    \ in &[x, x >> shift as usize] {\n        *s.push_str(n.to_string());\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvs89i2sy.rs:11:21\n   |\n\
    11 |         *s.push_str(n.to_string());\n   |                     ^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&str`, found struct\
    \ `String`\n   |                     help: consider borrowing here: `&n.to_string()`\n\
    \nerror[E0614]: type `()` cannot be dereferenced\n  --> /tmp/tmpvs89i2sy.rs:11:9\n\
    \   |\n11 |         *s.push_str(n.to_string());\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().rotate_left(shift).to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n --> /tmp/tmp2no0cw6e.rs:9:19\n  |\n9 |     x.to_string().rotate_left(shift).to_string()\n\
    \  |                   ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        let s =\
    \ x.len() - shift;\n        x.to_string().split_ascii_whitespace().reverse()[..s].join(\"\
    \")\n    } else {\n        x.to_string().split_ascii_whitespace()[shift..].join(\"\
    \")\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp38eqju7f.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp38eqju7f.rs:10:19\n\
    \   |\n10 |         let s = x.len() - shift;\n   |                   ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `SplitAsciiWhitespace` in the current scope\n  --> /tmp/tmp38eqju7f.rs:11:48\n\
    \   |\n11 |         x.to_string().split_ascii_whitespace().reverse()[..s].join(\"\
    \")\n   |                                                ^^^^^^^ method not found\
    \ in `SplitAsciiWhitespace<'_>`\n\nerror[E0608]: cannot index into a value of\
    \ type `SplitAsciiWhitespace<'_>`\n  --> /tmp/tmp38eqju7f.rs:13:9\n   |\n13 |\
    \         x.to_string().split_ascii_whitespace()[shift..].join(\"\")\n   |   \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        return x.to_digits().collect();\n\
    \    }\n    x.to_digits()[shift..].iter().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpx7ev092j.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `to_digits` found for type `isize` in the current scope\n  --> /tmp/tmpx7ev092j.rs:10:18\n\
    \   |\n10 |         return x.to_digits().collect();\n   |                  ^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `to_digits` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpx7ev092j.rs:12:7\n   |\n\
    12 |     x.to_digits()[shift..].iter().cloned().collect()\n   |       ^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::with_capacity(x);\n\
    \    for i in 0..shift {\n        result.push(x.to_string()[..i + 1]);\n    }\n\
    \    for i in 0..shift {\n        result.push(x.to_string()[i + shift..]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpysiku_x1.rs:9:44\n  |\n9 |\
    \     let mut result = String::with_capacity(x);\n  |                        \
    \                    ^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     let mut result = String::with_capacity(x.try_into().unwrap());\n  |  \
    \                                           ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpysiku_x1.rs:11:21\n\
    \   |\n11 |         result.push(x.to_string()[..i + 1]);\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpysiku_x1.rs:14:21\n   |\n14 |         result.push(x.to_string()[i\
    \ + shift..]);\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for ch\
    \ in x.to_string().chars() {\n        if s.is_empty() {\n            s.push_str(&ch);\n\
    \            continue;\n        }\n        s.push(&*ch >> shift);\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjacizr3w.rs:12:24\n   |\n\
    12 |             s.push_str(&ch);\n   |                        ^^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror[E0614]: type `char` cannot be dereferenced\n  -->\
    \ /tmp/tmpjacizr3w.rs:15:17\n   |\n15 |         s.push(&*ch >> shift);\n   | \
    \                ^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    for\
    \ digit in x.to_string().chars() {\n        result.push_str(digit.to_string().reverse());\n\
    \        if shift > result.len() {\n            result.push_str(digit.to_string());\n\
    \        } else {\n            result.push_str(&result[shift..]);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpxc2h6xi5.rs:11:43\n   |\n11 |         result.push_str(digit.to_string().reverse());\n\
    \   |                                           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxc2h6xi5.rs:12:20\n   |\n12 |         if shift > result.len() {\n\
    \   |                    ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |         if shift > result.len().try_into().unwrap()\
    \ {\n   |                                ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc2h6xi5.rs:13:29\n   |\n13 |             result.push_str(digit.to_string());\n\
    \   |                             ^^^^^^^^^^^^^^^^^\n   |                    \
    \         |\n   |                             expected `&str`, found struct `String`\n\
    \   |                             help: consider borrowing here: `&digit.to_string()`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n  -->\
    \ /tmp/tmpxc2h6xi5.rs:15:30\n   |\n15 |             result.push_str(&result[shift..]);\n\
    \   |                              ^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ c = x;\n    let mut i = shift;\n    while i > 0 {\n        if c >= 1000 {\n\
    \            s.push('0' + (c / 1000));\n            c %= 1000;\n        } else\
    \ {\n            s.push('0');\n        }\n        i -= 1;\n    }\n    s.push(c::to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `c`\n\
    \  --> /tmp/tmp_i9vgba1.rs:21:12\n   |\n21 |     s.push(c::to_string());\n   |\
    \            ^ use of undeclared crate or module `c`\n\nerror[E0369]: cannot add\
    \ `isize` to `char`\n  --> /tmp/tmp_i9vgba1.rs:14:24\n   |\n14 |             s.push('0'\
    \ + (c / 1000));\n   |                    --- ^ ---------- isize\n   |       \
    \             |\n   |                    char\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0369, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // TODO implement circular shift on isize\n\
    \    // TODO the test cases should be more realistic\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut n = digits;\n    let mut j =\
    \ shift;\n    while j > 0 {\n        let digit = n % 10;\n        if let Some(next_digit)\
    \ = digits.chars().next_back() {\n            if digit == next_digit {\n     \
    \           break;\n            }\n        }\n        s.insert(0, digit as char);\n\
    \        digits = digits.chars().next().unwrap().to_string();\n        j -= 1;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `String` by `{integer}`\n  --> /tmp/tmpyssnaarl.rs:16:23\n\
    \   |\n16 |         let digit = n % 10;\n   |                     - ^ -- {integer}\n\
    \   |                     |\n   |                     String\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits\
    \ = digits[..shift].to_string();\n    digits = digits[..digits.len()].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp03xilu6a.rs:10:14\n   |\n10 |     digits = digits[..shift].to_string();\n\
    \   |              ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_str().to_owned()\n        .chars().enumerate()\n\
    \        .filter(|(_, c)| c.is_ascii_digit())\n        .map(|(index, c)| {\n \
    \           if index > shift {\n                c.to_string()\n            } else\
    \ {\n                c.to_ascii_digit().to_string()\n            }\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_str` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpgymyoo1b.rs:9:7\n  |\n9 |     x.to_str().to_owned()\n  |\
    \       ^^^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::from(x);\n    s.rotate_right(shift);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \ --> /tmp/tmp3zdtrd9d.rs:9:17\n  |\n9 |     let mut s = String::from(x);\n  |\
    \                 ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <String as From<&String>>\n            <String as From<&mut str>>\n\
    \            <String as From<&str>>\n            <String as From<Box<str>>>\n\
    \            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\
    \nerror[E0599]: no method named `rotate_right` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp3zdtrd9d.rs:10:7\n   |\n10 |     s.rotate_right(shift);\n\
    \   |       ^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `trim_right`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let digits\
    \ = x.to_digits();\n    for i in 0..shift {\n        if i > digits.len() {\n \
    \           break;\n        }\n        s.push_str(&digits[digits.length - 1 -\
    \ i]);\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp334ig8d9.rs:10:20\n   |\n10 |     let digits =\
    \ x.to_digits();\n   |                    ^^^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut x = x;\n    let mut carry = 0;\n\
    \    for i in 0..shift {\n        carry = x % 10;\n        x /= 10;\n        x\
    \ += carry;\n    }\n    if carry != 0 {\n        x.to_string()\n    } else {\n\
    \        x.to_reverse().to_string()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_reverse` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpo8dkcfu_.rs:19:11\n   |\n19 |         x.to_reverse().to_string()\n\
    \   |           ^^^^^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for d\
    \ in x.digits() {\n        s.push_str(d.to_string());\n        if s.len() > shift\
    \ {\n            s.swap(0, s.len() - shift);\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1o9v4670.rs:10:16\n   |\n10 |     for d in x.digits() {\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1o9v4670.rs:12:22\n   |\n12 |         if s.len() > shift\
    \ {\n   |                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |         if s.len() > shift.try_into().unwrap() {\n   |     \
    \                      ++++++++++++++++++++\n\nerror[E0599]: no method named `swap`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp1o9v4670.rs:13:15\n\
    \   |\n13 |             s.swap(0, s.len() - shift);\n   |               ^^^^ method\
    \ not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1o9v4670.rs:13:33\n\
    \   |\n13 |             s.swap(0, s.len() - shift);\n   |                    \
    \             ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp1o9v4670.rs:13:31\n   |\n13 |          \
    \   s.swap(0, s.len() - shift);\n   |                               ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut carry = 0;\n    let mut digit = 0;\n    while shift != 0 {\n        if carry\
    \ > 0 {\n            if digit < 10 {\n                result.push(*digit as char);\n\
    \            }\n            carry %= 10;\n        } else {\n            if digit\
    \ < 10 {\n                result.push(*digit as char);\n            }\n      \
    \      digit = x;\n        }\n        shift -= 10;\n        if shift > 0 {\n \
    \           x = x << 1;\n        }\n    }\n    result.push(carry as char);\n \
    \   result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpeuop0zli.rs:15:29\n\
    \   |\n15 |                 result.push(*digit as char);\n   |               \
    \              ^^^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmpeuop0zli.rs:20:29\n   |\n20 |                 result.push(*digit\
    \ as char);\n   |                             ^^^^^^\n\nerror[E0604]: only `u8`\
    \ can be cast as `char`, not `{integer}`\n  --> /tmp/tmpeuop0zli.rs:29:17\n  \
    \ |\n29 |     result.push(carry as char);\n   |                 ^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmpeuop0zli.rs:29:17\n   |\n29 |     result.push(carry as char);\n   |\
    \                 ^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0604, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0604`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut rem = 0;\n    while x > 0 {\n        rem = x % 10;\n        digits.insert(0,\
    \ &*rem.to_string());\n        x /= 10;\n    }\n    for _ in 0..shift {\n    \
    \    digits.insert(0, '0');\n    }\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0uulv2kq.rs:13:26\n   |\n\
    13 |         digits.insert(0, &*rem.to_string());\n   |                      \
    \    ^^^^^^^^^^^^^^^^^ expected `char`, found `&str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ shifts = String::new();\n    let mut len = x.len() as isize;\n\n    while len\
    \ > 0 {\n        if shift > len - 1 {\n            shifts.push_str(&s[len - shift\
    \ - 1]);\n            len = len;\n        }\n        if len == 0 {\n         \
    \   break;\n        }\n        if shift > len - 1 {\n            shifts.push_str(&s[len\
    \ - shift - 1]);\n            len = len;\n        }\n\n        let mut carry =\
    \ 0;\n        let mut result = len % shift;\n        if len % shift != 0 {\n \
    \           s.push_str(&s[len]);\n            len -= result + 1;\n        } else\
    \ {\n            s.push_str(&s[len]);\n            len -= result;\n        }\n\
    \        if carry != 0 {\n            shifts.push_str(&s[len + shift]);\n    \
    \    }\n        len -= result;\n\n        if len == 0 {\n            break;\n\
    \        }\n        let mut digit = x[len];\n        shift -= 1;\n        if shift\
    \ > len - 1 {\n            shifts.push_str(&s[len - shift - 1]);\n           \
    \ len = len;\n        }\n        if carry != 0 {\n            shifts.push_str(&s[len\
    \ + shift]);\n        }\n        len -= 1;\n        let mut x = x[len];\n    \
    \    digit = (digit * 10 + x) as usize;\n        let mut y = digit;\n        carry\
    \ = (digit / 10) as usize;\n        digit %= 10;\n        if carry != 0 {\n  \
    \          shifts.push_str(&s[len + shift]);\n        }\n        len -= 1;\n\n\
    \        if len == 0 {\n            break;\n        }\n        let mut carry =\
    \ 0;\n        let mut digit = x[len];\n        shift -= 1;\n        if shift >\
    \ len - 1 {\n            shifts.push_str(&s[len - shift - 1]);\n            len\
    \ = len;\n        }\n        if carry != 0 {\n            shifts.push_str(&s[len\
    \ + shift]);\n        }\n        len -= 1;\n        let mut x = x[len];\n    \
    \    digit = (digit * 10 + x) as usize;\n        let mut y = digit;\n        carry\
    \ = (digit / 10) as usize;\n        digit %= 10;\n        if carry != 0 {\n  \
    \          shifts.push_str(&s[len + shift]);\n        }\n        len -= 1;\n\n\
    \        if len == 0 {\n            break;\n        }\n        let mut carry =\
    \ 0;\n        let mut digit = x[len];\n        shift -= 1;\n        if shift >\
    \ len - 1 {\n            shifts.push_str(&s[len - shift - 1]);\n            len\
    \ = len;\n\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpcpwxv3r4.rs:106:3\n\
    \    |\n8   | fn circular_shift(x: isize, shift: isize) -> String {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    13  |     while len > 0 {\n    |                   - unclosed delimiter\n...\n\
    93  |         if shift > len - 1 {\n    |                            - this delimiter\
    \ might not be properly closed...\n...\n97  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n106 | }\n    |   ^\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpcpwxv3r4.rs:11:21\n\
    \   |\n11 |     let mut len = x.len() as isize;\n   |                     ^^^\
    \ method not found in `isize`\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpcpwxv3r4.rs:43:25\n   |\n43 |         let mut digit =\
    \ x[len];\n   |                         ^^^^^^\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpcpwxv3r4.rs:53:21\n   |\n53 |       \
    \  let mut x = x[len];\n   |                     ^^^^^^\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpcpwxv3r4.rs:13:5\n    |\n8   |   fn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    |                                    \
    \            ------ expected `String` because of return type\n...\n13  | /   \
    \  while len > 0 {\n14  | |         if shift > len - 1 {\n15  | |            \
    \ shifts.push_str(&s[len - shift - 1]);\n16  | |             len = len;\n... \
    \  |\n105 | |     assert_eq!(candidate(11, 101), String::from(\"11\"));\n106 |\
    \ | }\n    | |__^ expected struct `String`, found `()`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if x == 0 {\n            break;\n        }\n        s += char::from_digit(x\
    \ % 10, 10);\n        x /= 10;\n        x %= 10;\n    }\n    if shift > s.len()\
    \ {\n        for _ in 0..shift {\n            s.insert(0, '.');\n        }\n \
    \   } else {\n        s.insert(0, '.');\n        for _ in 0..shift - s.len() {\n\
    \            s.insert(0, '.');\n        }\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54t31uxy.rs:14:31\n   |\n\
    14 |         s += char::from_digit(x % 10, 10);\n   |                        \
    \       ^^^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `u32` and panic if the converted value doesn't fit\n   |\n14 |        \
    \ s += char::from_digit((x % 10).try_into().unwrap(), 10);\n   |             \
    \                  +      +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp54t31uxy.rs:14:14\n   |\n14 |         s += char::from_digit(x %\
    \ 10, 10);\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&str`\n                \
    \   found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54t31uxy.rs:18:16\n\
    \   |\n18 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp54t31uxy.rs:24:29\n   |\n24 |         for _ in 0..shift\
    \ - s.len() {\n   |                             ^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmp54t31uxy.rs:24:27\n\
    \   |\n24 |         for _ in 0..shift - s.len() {\n   |                      \
    \     ^ no implementation for `isize - usize`\n   |\n   = help: the trait `Sub<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --ex"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use self::digits::*;\n    x.digits(shift,\
    \ |d| d + digit { value: 0 })\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `self::digits`\n --> /tmp/tmpn5ca9yup.rs:9:15\n\
    \  |\n9 |     use self::digits::*;\n  |               ^^^^^^ maybe a missing crate\
    \ `digits`?\n\nerror[E0422]: cannot find struct, variant or union type `digit`\
    \ in this scope\n  --> /tmp/tmpn5ca9yup.rs:10:29\n   |\n10 |     x.digits(shift,\
    \ |d| d + digit { value: 0 })\n   |                             ^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpn5ca9yup.rs:10:7\n   |\n10 |     x.digits(shift,\
    \ |d| d + digit { value: 0 })\n   |       ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0422, E0432, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0422`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string().chars().skip(shift\
    \ % x.len());\n    if shift > x.len() {\n        digits.reverse();\n    }\n  \
    \  String::from(digits)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmptxfwszr7.rs:9:59\n  |\n9 |     let mut digits = x.to_string().chars().skip(shift\
    \ % x.len());\n  |                                                           ^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptxfwszr7.rs:9:49\n\
    \  |\n9 |     let mut digits = x.to_string().chars().skip(shift % x.len());\n\
    \  |                                                 ^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut digits = x.to_string().chars().skip((shift\
    \ % x.len()).try_into().unwrap());\n  |                                      \
    \           +               +++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmptxfwszr7.rs:10:18\n\
    \   |\n10 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `reverse` found for struct `Skip`\
    \ in the current scope\n  --> /tmp/tmptxfwszr7.rs:11:16\n   |\n11 |         digits.reverse();\n\
    \   |                ^^^^^^^ method not found in `Skip<Chars<'_>>`\n\nerror[E0277]:\
    \ the trait bound `String: From<Skip<Chars<'_>>>` is not satisfied\n  --> /tmp/tmptxfwszr7.rs:13:5\n\
    \   |\n13 |     String::from(digits)\n   |     ^^^^^^^^^^^^ the trait `From<Skip<Chars<'_>>>`\
    \ is not implemented for `String`\n   |\n   = help: the following other types\
    \ implement trait `From<T>`:\n             <String as From<&String>>\n       \
    \      <String as From<&mut str>>\n             <String as From<&str>>\n     \
    \        <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n\
    \             <String as From<char>>\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    if\
    \ shift > x.len() {\n        result.push_str(x.reverse());\n        return result;\n\
    \    }\n    for n in x.iter().cloned().rev().enumerate().take(shift).map(|(n,\
    \ _)| x.clone()) {\n        result += \"{}{}\", n, *n as char;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n\
    \  --> /tmp/tmpj00zwl2j.rs:15:25\n   |\n15 |         result += \"{}{}\", n, *n\
    \ as char;\n   |                         ^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpj00zwl2j.rs:10:18\n   |\n10 |     if shift\
    \ > x.len() {\n   |                  ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpj00zwl2j.rs:11:27\n   |\n11 |         result.push_str(x.reverse());\n\
    \   |                           ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reverse_bits`\n\nerror[E0599]: no method named `iter`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpj00zwl2j.rs:14:16\n\
    \   |\n14 |     for n in x.iter().cloned().rev().enumerate().take(shift).map(|(n,\
    \ _)| x.clone()) {\n   |                ^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    if\
    \ shift >= digits.len() {\n        // digits reversed\n        digits = digits.chars().collect::<Vec<_>>().reverse().collect::<String>();\n\
    \        digits.from_ascii_chars()\n    } else {\n        digits = digits.chars().nth(shift).collect::<Vec<_>>().collect();\n\
    \    }\n    String::from_utf8(digits.into_bytes())\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3i6ni03k.rs:10:17\n   |\n\
    10 |     if shift >= digits.len() {\n   |                 ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     if shift >= digits.len().try_into().unwrap()\
    \ {\n   |                             ++++++++++++++++++++\n\nerror[E0599]: `()`\
    \ is not an iterator\n  --> /tmp/tmp3i6ni03k.rs:12:63\n   |\n12 |         digits\
    \ = digits.chars().collect::<Vec<_>>().reverse().collect::<String>();\n   |  \
    \                                                             ^^^^^^^ `()` is\
    \ not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): Iterator`\n           which is required by `&mut (): Iterator`\n\
    \nerror[E0599]: no method named `from_ascii_chars` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp3i6ni03k.rs:13:16\n   |\n13 |         digits.from_ascii_chars()\n\
    \   |                ^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3i6ni03k.rs:15:37\n   |\n15 |         digits\
    \ = digits.chars().nth(shift).collect::<Vec<_>>().collect();\n   |           \
    \                          ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |         digits = digits.chars().nth(shift.try_into().unwrap()).collect::<Vec<_>>().collect();\n\
    \   |                                          ++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<char>` is not an iterator\n   --> /tmp/tmp3i6ni03k.rs:15:44\n    |\n\
    15  |           digits = digits.chars().nth(shift).collect::<Vec<_>>().collect();\n\
    \    |                                              ^^^^^^^ `Option<char>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3i6ni03k.rs:17:5\n\
    \   |\n8  | fn circular_shift(x: isize, s"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut carry = 0;\n    for n in x.checked_mul(shift) {\n        result .push_str(n.to_string());\n\
    \        carry += n;\n    }\n    if carry > 0 {\n        result .push_str(&format!(\"\
    {}\", carry.to_string()));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwe334uae.rs:12:26\n   |\n\
    12 |         result .push_str(n.to_string());\n   |                          ^^^^^^^^^^^^^\n\
    \   |                          |\n   |                          expected `&str`,\
    \ found struct `String`\n   |                          help: consider borrowing\
    \ here: `&n.to_string()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    x.to_string().chars().enumerate().for_each(|(i,\
    \ c)| {\n        if i < shift {\n            s.push(c);\n        } else {\n  \
    \          s.push('0');\n        }\n    });\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpajxjz17t.rs:11:16\n   |\n\
    11 |         if i < shift {\n   |                ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i < shift.try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use core::fmt::{self, Write};\n    let\
    \ mut xs = x.to_string();\n    let mut result = String::new();\n    let mut power\
    \ = 1;\n    let mut shift = shift % x.len();\n    while shift != 0 {\n       \
    \ let mut to_add = x.len() - shift;\n        if to_add < 0 {\n            to_add\
    \ = 0;\n        }\n        if to_add > xs.len() {\n            to_add = xs.len();\n\
    \        }\n        xs = &xs[..to_add] + &xs[to_add..];\n        result = xs.into_iter().fold(String::new(),\
    \ |mut acc, x| {\n            acc.push(*x);\n            acc.push('0');\n    \
    \        acc\n        });\n        if shift < x.len() {\n            power = shift;\n\
    \        }\n        shift -= power;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n --> /tmp/tmpzbyto8uk.rs:9:9\n\
    \  |\n9 |     use core::fmt::{self, Write};\n  |         ^^^^ maybe a missing\
    \ crate `core`?\n\nerror[E0432]: unresolved import `core`\n --> /tmp/tmpzbyto8uk.rs:9:9\n\
    \  |\n9 |     use core::fmt::{self, Write};\n  |         ^^^^ maybe a missing\
    \ crate `core`?\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpzbyto8uk.rs:13:31\n   |\n13 |     let mut\
    \ shift = shift % x.len();\n   |                               ^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpzbyto8uk.rs:15:28\n   |\n15 |         let\
    \ mut to_add = x.len() - shift;\n   |                            ^^^ method not\
    \ found in `isize`\n\nerror[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpzbyto8uk.rs:22:28\n\
    \   |\n22 |         xs = &xs[..to_add] + &xs[to_add..];\n   |              -------------\
    \ ^ ------------- &str\n   |              |             |\n   |              |\
    \             `+` cannot be used to concatenate two `&str` strings\n   |     \
    \         &str\n   |\n   = note: string concatenation requires an owned `String`\
    \ on the left\nhelp: remove the borrow to obtain an owned `String`\n   |\n22 -\
    \         xs = &xs[..to_add] + &xs[to_add..];\n22 +         xs = xs[..to_add]\
    \ + &xs[to_add..];\n   | \n\nerror[E0599]: the method `into_iter` exists for struct\
    \ `String`, but its trait bounds were not satisfied\n   --> /tmp/tmpzbyto8uk.rs:23:21\n\
    \    |\n23  |           result = xs.into_iter().fold(String::new(), |mut acc,\
    \ x| {\n    |                       ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Sized`\n            which is required by `str: IntoIterator`\n\
    \            `str: I"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits\
    \ = digits.chars().skip(shift).collect::<String>();\n    digits.reverse();\n \
    \   digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplkqf4uys.rs:10:34\n   |\n\
    10 |     digits = digits.chars().skip(shift).collect::<String>();\n   |      \
    \                            ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     digits = digits.chars().skip(shift.try_into().unwrap()).collect::<String>();\n\
    \   |                                       ++++++++++++++++++++\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmplkqf4uys.rs:11:12\n   |\n11 |     digits.reverse();\n   |      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::with_capacity(x.to_string().len());\n\
    \    for d in x.to_string().chars().cloned().rev() {\n        let mut c = String::new();\n\
    \        c.push(d);\n        if c.len() > shift {\n            c.pop();\n    \
    \        s.push_str(&c.to_string());\n        } else {\n            s.push_str(&d);\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmp7ro1mpke.rs:10:36\n     |\n10   |     for d in x.to_string().chars().cloned().rev()\
    \ {\n     |                                    ^^^^^^ expected reference, found\
    \ `char`\n     |\n     = note: expected reference `&_`\n                     found\
    \ type `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `rev` exists for struct `Cloned<Chars<'_>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmp7ro1mpke.rs:10:45\n   |\n10 |       for d in x.to_string().chars().cloned().rev()\
    \ {\n   |                                               ^^^ method cannot be called\
    \ on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `<Chars<'_> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<Chars<'_>>: Iterator`\n     \
    \      `Cloned<Chars<'_>>: Iterator`\n           which is required by `&mut Cloned<Chars<'_>>:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ro1mpke.rs:13:22\n\
    \   |\n13 |         if c.len() > shift {\n   |                      ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |         if c.len()\
    \ > shift.try_into().unwrap() {\n   |                           ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7ro1mpke.rs:17:24\n   |\n17 |\
    \             s.push_str(&d);\n   |                        ^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    match shift {\n        0 => x.to_string(),\n\
    \        _ => x.to_string().chars().enumerate().map(|(i, c)| if i == shift {\n\
    \            let mut n = x;\n            for _ in 0..shift {\n               \
    \ n = n.to_string().chars().nth(i - 1).unwrap();\n            }\n            n\n\
    \        } else {\n            c\n        }).collect::<String>().reverse().collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqh5gwpf4.rs:11:69\n   |\n\
    11 |         _ => x.to_string().chars().enumerate().map(|(i, c)| if i == shift\
    \ {\n   |                                                                    \
    \ ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n11 |      \
    \   _ => x.to_string().chars().enumerate().map(|(i, c)| if i == shift.try_into().unwrap()\
    \ {\n   |                                                                    \
    \      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqh5gwpf4.rs:14:21\n\
    \   |\n12 |             let mut n = x;\n   |                         - expected\
    \ due to this value\n13 |             for _ in 0..shift {\n14 |              \
    \   n = n.to_string().chars().nth(i - 1).unwrap();\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `char`\n\nerror[E0308]: `if` and `else` have incompatible\
    \ types\n  --> /tmp/tmpqh5gwpf4.rs:18:13\n   |\n11 |           _ => x.to_string().chars().enumerate().map(|(i,\
    \ c)| if i == shift {\n   |  _____________________________________________________________-\n\
    12 | |             let mut n = x;\n13 | |             for _ in 0..shift {\n14\
    \ | |                 n = n.to_string().chars().nth(i - 1).unwrap();\n15 | | \
    \            }\n16 | |             n\n   | |             - expected because of\
    \ this\n17 | |         } else {\n18 | |             c\n   | |             ^ expected\
    \ `isize`, found `char`\n19 | |         }).collect::<String>().reverse().collect()\n\
    \   | |_________- `if` and `else` have incompatible types\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpqh5gwpf4.rs:19:32\n   |\n19 |         }).collect::<String>().reverse().collect()\n\
    \   |                                ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift == 0 {\n        String::from(x)\n\
    \    } else if shift == 1 {\n        x.to_string()\n    } else {\n        let\
    \ mut out = String::from(x);\n        for i in 0..shift {\n            out.chars().pop();\n\
    \        }\n        out\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpmtd3g4ea.rs:10:9\n   |\n10 |         String::from(x)\n   |    \
    \     ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for `String`\n \
    \  |\n   = help: the following other types implement trait `From<T>`:\n      \
    \       <String as From<&String>>\n             <String as From<&mut str>>\n \
    \            <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0277]: the trait bound `String: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpmtd3g4ea.rs:14:23\n   |\n14 |         let mut out = String::from(x);\n\
    \   |                       ^^^^^^^^^^^^ the trait `From<isize>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0599]: no method named `pop` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmpmtd3g4ea.rs:16:25\n   |\n16 |             out.chars().pop();\n\
    \   |                         ^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    x.to_digits().for_each(|digit|\
    \ {\n        let value = digit as usize;\n        // Shift right\n        if value\
    \ >> shift > 0 {\n            result.push((value >> shift) % 10);\n        } else\
    \ {\n            result.push((value >> shift - 10) % 10);\n            result.push((value\
    \ >> shift - 10) % 10);\n        }\n    });\n    result\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp3gbyema6.rs:10:7\n   |\n10 |     x.to_digits().for_each(|digit|\
    \ {\n   |       ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3gbyema6.rs:14:25\n   |\n14 |             result.push((value\
    \ >> shift) % 10);\n   |                         ^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3gbyema6.rs:16:25\n\
    \   |\n16 |             result.push((value >> shift - 10) % 10);\n   |       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3gbyema6.rs:17:25\n   |\n17 |\
    \             result.push((value >> shift - 10) % 10);\n   |                 \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `usize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use std::fmt::{self, Display};\n    let\
    \ mut s = String::from(\"0\");\n    let mut carry = 0;\n    while shift > s.len()\
    \ {\n        carry += x;\n        s += format!(\"{:0>2}\", x) + &format!(\"{}\"\
    , &*s.last().unwrap());\n        shift -= s.len();\n    }\n    if carry > 0 {\n\
    \        s += &format!(\"{}\", &*s.last().unwrap());\n    }\n    &s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused imports: `Display`, `self`\n --> /tmp/tmpdk_nj7mv.rs:9:20\n\
    \  |\n9 |     use std::fmt::{self, Display};\n  |                    ^^^^  ^^^^^^^\n\
    \  |\n  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdk_nj7mv.rs:12:19\n   |\n12 |     while shift > s.len()\
    \ {\n   |                   ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     while shift > s.len().try_into().unwrap() {\n   |      \
    \                    ++++++++++++++++++++\n\nerror[E0599]: `String` is not an\
    \ iterator\n   --> /tmp/tmpdk_nj7mv.rs:14:56\n    |\n14  |           s += format!(\"\
    {:0>2}\", x) + &format!(\"{}\", &*s.last().unwrap());\n    |                 \
    \                                         ^^^^ `String` is not an iterator; try\
    \ calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `&mut String: Iterator`\n            `str: Iterator`\n            which is\
    \ required by `&mut str: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdk_nj7mv.rs:14:14\n\
    \   |\n14 |         s += format!(\"{:0>2}\", x) + &format!(\"{}\", &*s.last().unwrap());\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&(format!(\"{:0>2}\", x) +\
    \ &format!(\"{}\", &*s.last().unwrap()))`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdk_nj7mv.rs:15:18\n   |\n15 |         shift -= s.len();\n   | \
    \                 ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ subtract-assign `usize` from `isize`\n  --> /tmp/tmpdk_nj7mv.rs:15:15\n   |\n\
    15 |         shift -= s.len();\n   |               ^^ no implementation for `isize\
    \ -= usize`\n   |\n   = help: the trait `SubAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssi"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10 as char);\n        x /= 10;\n    }\n    s.push(x%10\
    \ as char);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `isize` by `char`\n  --> /tmp/tmpm1fhytfs.rs:11:17\n\
    \   |\n11 |         s.push(x%10 as char);\n   |                 ^ no implementation\
    \ for `isize % char`\n   |\n   = help: the trait `Rem<char>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot mod `isize` by `char`\n  --> /tmp/tmpm1fhytfs.rs:14:13\n\
    \   |\n14 |     s.push(x%10 as char);\n   |             ^ no implementation for\
    \ `isize % char`\n   |\n   = help: the trait `Rem<char>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::with_capacity(x.to_string().len()\
    \ + shift as usize);\n    let mut i = x.to_string().len();\n    while i >= shift\
    \ {\n        digits.insert(0, x.to_string()[i..]);\n        i -= shift;\n    }\n\
    \    digits.insert(0, x.to_string()[i..]);\n    digits\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkpljdlmx.rs:11:16\n   |\n\
    11 |     while i >= shift {\n   |                ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |     while i >= shift.try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkpljdlmx.rs:12:26\n   |\n12 |         digits.insert(0,\
    \ x.to_string()[i..]);\n   |                          ^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkpljdlmx.rs:13:14\n\
    \   |\n13 |         i -= shift;\n   |              ^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract-assign `isize` from `usize`\n  -->\
    \ /tmp/tmpkpljdlmx.rs:13:11\n   |\n13 |         i -= shift;\n   |           ^^\
    \ no implementation for `usize -= isize`\n   |\n   = help: the trait `SubAssign<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n           \
    \  <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64\
    \ as SubAssign>\n             <i128 as SubAssign<&i128>>\n             <i128 as\
    \ SubAssign>\n             <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkpljdlmx.rs:15:22\n\
    \   |\n15 |     digits.insert(0, x.to_string()[i..]);\n   |                  \
    \    ^^^^^^^^^^^^^^^^^^ expected `char`, found `str`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // shift is always positive\n    if shift\
    \ > x.len() {\n        String::from(x[x.len() - shift..].to_owned())\n    } else\
    \ {\n        let mut s = String::with_capacity(x.len() * 2);\n        for i in\
    \ 0..shift {\n            s.push_str(x[i..].to_owned());\n        }\n        s.push_str(x.to_owned());\n\
    \        s\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp0zvv40hg.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp0zvv40hg.rs:11:26\n\
    \   |\n11 |         String::from(x[x.len() - shift..].to_owned())\n   |      \
    \                    ^^^ method not found in `isize`\n\nerror[E0608]: cannot index\
    \ into a value of type `isize`\n  --> /tmp/tmp0zvv40hg.rs:11:22\n   |\n11 |  \
    \       String::from(x[x.len() - shift..].to_owned())\n   |                  \
    \    ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp0zvv40hg.rs:13:45\n   |\n13 |  \
    \       let mut s = String::with_capacity(x.len() * 2);\n   |                \
    \                             ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmp0zvv40hg.rs:15:24\n\
    \   |\n15 |             s.push_str(x[i..].to_owned());\n   |                 \
    \       ^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0zvv40hg.rs:17:20\n\
    \   |\n17 |         s.push_str(x.to_owned());\n   |                    ^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // This code has been copied directly\
    \ from the stdlib and adapted for use with isize.\n    let mut xv = x;\n    let\
    \ mut digits = Vec::new();\n    if xv < 10 {\n        digits.push(String::from(String::from(xv)));\n\
    \    } else {\n        let mut i = 0;\n        while xv > 0 {\n            xv\
    \ /= 10;\n            digits.push(String::from(String::from(xv)));\n         \
    \   i += 1;\n        }\n        digits.push(digits[digits.len() - shift]);\n \
    \       digits.push(digits[digits.len() - shift]);\n        digits.push(String::from(\"\
    0\".to_string()));\n    }\n    String::from(digits[digits.len() - shift])\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpg3qqi51y.rs:13:34\n   |\n13 |         digits.push(String::from(String::from(xv)));\n\
    \   |                                  ^^^^^^^^^^^^ the trait `From<isize>` is\
    \ not implemented for `String`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <String as From<&String>>\n             <String\
    \ as From<&mut str>>\n             <String as From<&str>>\n             <String\
    \ as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n          \
    \   <String as From<char>>\n\nerror[E0277]: the trait bound `String: From<isize>`\
    \ is not satisfied\n  --> /tmp/tmpg3qqi51y.rs:18:38\n   |\n18 |             digits.push(String::from(String::from(xv)));\n\
    \   |                                      ^^^^^^^^^^^^ the trait `From<isize>`\
    \ is not implemented for `String`\n   |\n   = help: the following other types\
    \ implement trait `From<T>`:\n             <String as From<&String>>\n       \
    \      <String as From<&mut str>>\n             <String as From<&str>>\n     \
    \        <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n\
    \             <String as From<char>>\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpg3qqi51y.rs:21:43\n   |\n21 |         digits.push(digits[digits.len()\
    \ - shift]);\n   |                                           ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpg3qqi51y.rs:21:41\n\
    \   |\n21 |         digits.push(digits[digits.len() - shift]);\n   |         \
    \                                ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerro"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    assert!(shift > 0);\n    let mut res =\
    \ String::new();\n    if shift > x.len() {\n        res.reverse();\n        res.push_str(&x[x.len()\
    \ - shift..]);\n    } else {\n        res.push_str(&x[0..shift]);\n        res.push_str(&x[shift..]);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpjjkn6ypy.rs:11:18\n   |\n11 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpjjkn6ypy.rs:12:13\n\
    \   |\n12 |         res.reverse();\n   |             ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpjjkn6ypy.rs:13:27\n\
    \   |\n13 |         res.push_str(&x[x.len() - shift..]);\n   |               \
    \            ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpjjkn6ypy.rs:13:23\n   |\n13 |       \
    \  res.push_str(&x[x.len() - shift..]);\n   |                       ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpjjkn6ypy.rs:15:23\n\
    \   |\n15 |         res.push_str(&x[0..shift]);\n   |                       ^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpjjkn6ypy.rs:16:23\n\
    \   |\n16 |         res.push_str(&x[shift..]);\n   |                       ^^^^^^^^^^\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    assert!(shift <= x.len());\n    String::from(&x[x.len()\
    \ - x.len() + shift..])\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpvffeq9j3.rs:9:24\n  |\n9 |     assert!(shift <= x.len());\n\
    \  |                        ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpvffeq9j3.rs:10:23\n\
    \   |\n10 |     String::from(&x[x.len() - x.len() + shift..])\n   |          \
    \             ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmpvffeq9j3.rs:10:33\n\
    \   |\n10 |     String::from(&x[x.len() - x.len() + shift..])\n   |          \
    \                       ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpvffeq9j3.rs:10:19\n   |\n\
    10 |     String::from(&x[x.len() - x.len() + shift..])\n   |                 \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // We will use borrowing rules to get\
    \ a pointer to the string and then\n    // use ptr::copy_mut on the pointer we\
    \ obtained previously.\n    let mut s = String::new();\n    ptr::copy_mut_slice(&x.to_string(),\
    \ &mut s, s.len() + shift, shift);\n    s.reverse();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `ptr`\n\
    \  --> /tmp/tmp496q1kk8.rs:12:5\n   |\n12 |     ptr::copy_mut_slice(&x.to_string(),\
    \ &mut s, s.len() + shift, shift);\n   |     ^^^ use of undeclared crate or module\
    \ `ptr`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp496q1kk8.rs:12:59\n \
    \  |\n12 |     ptr::copy_mut_slice(&x.to_string(), &mut s, s.len() + shift, shift);\n\
    \   |                                                           ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp496q1kk8.rs:12:49\n   |\n12 |     ptr::copy_mut_slice(&x.to_string(),\
    \ &mut s, s.len() + shift, shift);\n   |     -------------------             \
    \            ^^^^^^^^^^^^^^^ no implementation for `usize + isize`\n   |     |\n\
    \   |     required by a bound introduced by this call\n   |\n   = help: the trait\
    \ `Add<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp496q1kk8.rs:13:7\n\
    \   |\n13 |     s.reverse();\n   |       ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    // TODO: Implement me\n    let mut s =\
    \ String::new();\n    s.push(i);\n    s.rotate_left(shift);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpiwpg5w11.rs:11:12\n\
    \   |\n11 |     s.push(i);\n   |            ^ help: a local variable with a similar\
    \ name exists: `s`\n\nerror[E0599]: no method named `rotate_left` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpiwpg5w11.rs:12:7\n   |\n12 |  \
    \   s.rotate_left(shift);\n   |       ^^^^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars().enumerate().take(shift).fold(String::new(),\
    \ |s, (i, _)| {\n        let (digit, remainder) = i.to_string().parse::<isize>().unwrap();\n\
    \        if s.chars().last().unwrap() != digit {\n            s.push_str(digit.to_string());\n\
    \        } else {\n            s.push_str(&remainder);\n        }\n        s\n\
    \    })\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3k_0wpfd.rs:9:44\n  |\n9 |\
    \     x.to_string().chars().enumerate().take(shift).fold(String::new(), |s, (i,\
    \ _)| {\n  |                                            ^^^^^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n9 |     x.to_string().chars().enumerate().take(shift.try_into().unwrap()).fold(String::new(),\
    \ |s, (i, _)| {\n  |                                                 ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3k_0wpfd.rs:10:13\n   |\n10 |\
    \         let (digit, remainder) = i.to_string().parse::<isize>().unwrap();\n\
    \   |             ^^^^^^^^^^^^^^^^^^   ---------------------------------------\
    \ this expression has type `isize`\n   |             |\n   |             expected\
    \ `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found\
    \ tuple `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = (x << shift) as u16;\n\
    \    result.rotate_left(shift as usize - 1);\n    format!(\"{:X}\", result)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ti8i4ak.rs:10:24\n   |\n\
    10 |     result.rotate_left(shift as usize - 1);\n   |                       \
    \ ^^^^^^^^^^^^^^^^^^ expected `u32`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to a `u32` and panic if the converted value doesn't fit\n   |\n10\
    \ |     result.rotate_left((shift as usize - 1).try_into().unwrap());\n   |  \
    \                      +                  +++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut carry = 0;\n\n    for _ in 0..shift {\n        if carry != 0 {\n       \
    \     digits.push(&*carry.to_digit(10));\n            carry = digits[digits.length()\
    \ - 1].to_digit(10);\n        }\n\n        if x >= 10 {\n            digits.push(&*x.to_digit(10));\n\
    \            carry = digits[digits.length() - 1].to_digit(10);\n            x\
    \ /= 10;\n        } else {\n            digits.push(&*x.to_digit(10));\n     \
    \       digits.push(&*carry.to_digit(10));\n            break;\n        }\n  \
    \  }\n\n    if carry != 0 {\n        digits.push(&*carry.to_digit(10));\n    }\n\
    \n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `{integer}` in\
    \ the current scope\n  --> /tmp/tmpek_485e6.rs:14:33\n   |\n14 |             digits.push(&*carry.to_digit(10));\n\
    \   |                                 ^^^^^^^^ method not found in `{integer}`\n\
    \nerror[E0599]: no method named `length` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpek_485e6.rs:15:35\n   |\n15 |             carry = digits[digits.length()\
    \ - 1].to_digit(10);\n   |                                   ^^^^^^ help: there\
    \ is an associated function with a similar name: `len`\n\nerror[E0599]: no method\
    \ named `to_digit` found for type `isize` in the current scope\n  --> /tmp/tmpek_485e6.rs:19:29\n\
    \   |\n19 |             digits.push(&*x.to_digit(10));\n   |                 \
    \            ^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `length` found for struct `String` in the current scope\n  --> /tmp/tmpek_485e6.rs:20:35\n\
    \   |\n20 |             carry = digits[digits.length() - 1].to_digit(10);\n  \
    \ |                                   ^^^^^^ help: there is an associated function\
    \ with a similar name: `len`\n\nerror[E0599]: no method named `to_digit` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpek_485e6.rs:23:29\n   |\n\
    23 |             digits.push(&*x.to_digit(10));\n   |                        \
    \     ^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_digit`\
    \ found for type `{integer}` in the current scope\n  --> /tmp/tmpek_485e6.rs:24:33\n\
    \   |\n24 |             digits.push(&*carry.to_digit(10));\n   |             \
    \                    ^^^^^^^^ method not found in `{integer}`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `{integer}` in the current scope\n\
    \  --> /tmp/tmpek_485e6.rs:30:29\n   |\n30 |         digits.push(&*carry.to_digit(10));\n\
    \   |                             ^^^^^^^^ method not found in `{integer}`\n\n\
    error: aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    match shift {\n        0 => String::from(x),\n\
    \        i => x % 10 + circular_shift(x / 10, i - 1).to_string(),\n    }\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpchgrjc9k.rs:10:14\n   |\n10 |         0 => String::from(x),\n \
    \  |              ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0277]: cannot add `String` to `isize`\n  --> /tmp/tmpchgrjc9k.rs:11:21\n\
    \   |\n11 |         i => x % 10 + circular_shift(x / 10, i - 1).to_string(),\n\
    \   |                     ^ no implementation for `isize + String`\n   |\n   =\
    \ help: the trait `Add<String>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift == 0 {\n        String::from(\"\
    0\")\n    } else {\n        let mut s = String::from(\"0\");\n        for i in\
    \ 0..(x.len() + shift) {\n            s.push_str(&x[i % (x.len())]);\n       \
    \ }\n        String::from(&s)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpklm9hpqm.rs:13:24\n   |\n13 |         for i in 0..(x.len()\
    \ + shift) {\n   |                        ^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpklm9hpqm.rs:14:34\n   |\n14 |             s.push_str(&x[i % (x.len())]);\n\
    \   |                                  ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpklm9hpqm.rs:14:25\n\
    \   |\n14 |             s.push_str(&x[i % (x.len())]);\n   |                 \
    \        ^^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut n = x.to_string();\n    for i\
    \ in 0..shift {\n        n = &*n.chars().nth(i);\n    }\n    String::from(n)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnyv7f9vt.rs:11:29\n   |\n\
    11 |         n = &*n.chars().nth(i);\n   |                             ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |         n = &*n.chars().nth(i.try_into().unwrap());\n\
    \   |                              ++++++++++++++++++++\n\nerror[E0614]: type\
    \ `Option<char>` cannot be dereferenced\n  --> /tmp/tmpnyv7f9vt.rs:11:14\n   |\n\
    11 |         n = &*n.chars().nth(i);\n   |              ^^^^^^^^^^^^^^^^^\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    format!(\"{}{}\", x.to_digits()[..shift].to_string()\
    \ + x.to_digits()[shift..].to_string(),\n            x.to_digits()[shift .. ].to_string()\
    \ + x.to_digits()[..shift].to_string())\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpv3x5gsw4.rs:9:23\n  |\n9 |     format!(\"{}{}\"\
    , x.to_digits()[..shift].to_string() + x.to_digits()[shift..].to_string(),\n \
    \ |                       ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n -->\
    \ /tmp/tmpv3x5gsw4.rs:9:60\n  |\n9 |     format!(\"{}{}\", x.to_digits()[..shift].to_string()\
    \ + x.to_digits()[shift..].to_string(),\n  |                                 \
    \                           ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpv3x5gsw4.rs:10:15\n   |\n10 |             x.to_digits()[shift .. ].to_string()\
    \ + x.to_digits()[..shift].to_string())\n   |               ^^^^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `to_digits` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpv3x5gsw4.rs:10:54\n   |\n10 |  \
    \           x.to_digits()[shift .. ].to_string() + x.to_digits()[..shift].to_string())\n\
    \   |                                                      ^^^^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars()\n        .enumerate()\n\
    \        .filter_map(|(i, char)| {\n            if i > shift {\n             \
    \   Some(char.to_string().to_string())\n            } else {\n               \
    \ None\n            }\n        })\n        .fold(String::from(\"0\"), |acc, x|\
    \ {\n            acc.push_str(x.to_string());\n            acc\n        })\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppvfrkqm_.rs:12:20\n   |\n\
    12 |             if i > shift {\n   |                    ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |             if i > shift.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppvfrkqm_.rs:19:26\n   |\n19 |             acc.push_str(x.to_string());\n\
    \   |                          ^^^^^^^^^^^^^\n   |                          |\n\
    \   |                          expected `&str`, found struct `String`\n   |  \
    \                        help: consider borrowing here: `&x.to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let len = x.len();\n    let mut str =\
    \ String::new();\n    let mut carry = 0;\n\n    for idx in 0..len {\n        let\
    \ digit = if idx < len { x[idx] } else { 0 };\n        let carry = (digit >> shift)\
    \ as isize;\n        str.push_str(&format!(\"{}{}\", digit & !carry, digit));\n\
    \    }\n    str.into()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp4maj96i7.rs:9:17\n  |\n9 |     let len = x.len();\n  | \
    \                ^^^ method not found in `isize`\n\nerror[E0608]: cannot index\
    \ into a value of type `isize`\n  --> /tmp/tmp4maj96i7.rs:14:36\n   |\n14 |  \
    \       let digit = if idx < len { x[idx] } else { 0 };\n   |                \
    \                    ^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s = s.chars().next().unwrap().to_string().to_string()\
    \ + &*s.chars().next().unwrap();\n    }\n    for i in x.chars().rev() {\n    \
    \    s = s.to_string().to_string() + i.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp5hvgtbn6.rs:11:66\n\
    \   |\n11 |         s = s.chars().next().unwrap().to_string().to_string() + &*s.chars().next().unwrap();\n\
    \   |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `chars` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5hvgtbn6.rs:13:16\n   |\n13 |     for i in x.chars().rev()\
    \ {\n   |                ^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 1..shift {\n        s.push(x.to_string());\n        x >>= 1;\n    }\n   \
    \ s.push(x.to_string());\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7y6fbn6e.rs:11:16\n   |\n\
    11 |         s.push(x.to_string());\n   |                ^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7y6fbn6e.rs:14:12\n\
    \   |\n14 |     s.push(x.to_string());\n   |            ^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    for\
    \ i in 0..shift {\n        digits.push_str(&format!(\"{:0>2}\", x % 10));\n  \
    \      x /= 10;\n    }\n    digits.push_str(&format!(\"{:0>2}\", x));\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmp6o99fajb.rs:10:9\n   |\n10\
    \ |     for i in 0..shift {\n   |         ^ help: if this is intentional, prefix\
    \ it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on\
    \ by default\n\nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp6o99fajb.rs:12:9\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n12 |\
    \         x /= 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    if\
    \ shift > x.len() {\n        digits = &x[x.len() - shift as usize..x.len() - shift\
    \ as usize];\n    } else {\n        digits = &x[0..shift];\n    }\n    digits.reverse();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpgeiyrso_.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpgeiyrso_.rs:11:23\n\
    \   |\n11 |         digits = &x[x.len() - shift as usize..x.len() - shift as usize];\n\
    \   |                       ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpgeiyrso_.rs:11:49\n\
    \   |\n11 |         digits = &x[x.len() - shift as usize..x.len() - shift as usize];\n\
    \   |                                                 ^^^ method not found in\
    \ `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpgeiyrso_.rs:11:19\n\
    \   |\n11 |         digits = &x[x.len() - shift as usize..x.len() - shift as usize];\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpgeiyrso_.rs:13:19\n\
    \   |\n13 |         digits = &x[0..shift];\n   |                   ^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpgeiyrso_.rs:15:12\n   |\n15 |     digits.reverse();\n \
    \  |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0608.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    while\
    \ shift > 0 {\n        if shift >= x.len() {\n            result += &x[x.len()\
    \ - 1];\n            shift -= x.len() - 1;\n        } else {\n            result\
    \ += &x[shift];\n            shift -= 1;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpz2jngrqd.rs:11:23\n   |\n11 |         if shift >= x.len()\
    \ {\n   |                       ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpz2jngrqd.rs:12:28\n\
    \   |\n12 |             result += &x[x.len() - 1];\n   |                     \
    \       ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpz2jngrqd.rs:13:24\n\
    \   |\n13 |             shift -= x.len() - 1;\n   |                        ^^^\
    \ method not found in `isize`\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpz2jngrqd.rs:15:24\n   |\n15 |             result += &x[shift];\n\
    \   |                        ^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::with_capacity(x.max(shift\
    \ as usize + 1));\n    fn push_digit(digit: char) {\n        if let Ok(digit)\
    \ = digit as u32 {\n            result.push((digit as usize - digit % 10) as char);\n\
    \        }\n    }\n    if shift >= x.len() {\n        for x in x.iter() {\n  \
    \          push_digit(x);\n        }\n    } else {\n        for digit in x.iter()\
    \ {\n            push_digit(digit);\n            if digit > 0 {\n            \
    \    for _ in 0..(shift - digit) {\n                    result.push('0');\n  \
    \              }\n                result.push((digit - digit % 10) as char);\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmp9_df2j01.rs:12:13\n\
    \   |\n12 |             result.push((digit as usize - digit % 10) as char);\n\
    \   |             ^^^^^^\n   |\n   = help: use the `|| { ... }` closure form instead\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp9_df2j01.rs:9:50\n  |\n9 |    \
    \ let mut result = String::with_capacity(x.max(shift as usize + 1));\n  |    \
    \                                              ^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n9 |     let mut result = String::with_capacity(x.max((shift\
    \ as usize + 1).try_into().unwrap()));\n  |                                  \
    \                +                  +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9_df2j01.rs:9:44\n  |\n9 |     let mut result = String::with_capacity(x.max(shift\
    \ as usize + 1));\n  |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = String::with_capacity(x.max(shift as usize + 1).try_into().unwrap());\n  |\
    \                                                                     ++++++++++++++++++++\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp9_df2j01.rs:15:19\n   |\n15 |     if shift >= x.len() {\n   | \
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp9_df2j01.rs:16:20\n\
    \   |\n16 |         for x in x.iter() {\n   |                    ^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `iter` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp9_df2j01.rs:20:24\n   |\n20 |         for\
    \ digit in x.iter() {\n   |                        ^^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9_df2j01.rs:22:24\n   |\n22 |\
    \             if digit > 0 {\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    for\
    \ _ in 0..shift {\n        digits = digits.chars().nth(digits.len() - 1) + digits.chars().nth(digits.len()\
    \ - 2);\n    }\n    String::from(digits)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Option<char>` to `Option<char>`\n  --> /tmp/tmph74udnn1.rs:11:55\n\
    \   |\n11 |         digits = digits.chars().nth(digits.len() - 1) + digits.chars().nth(digits.len()\
    \ - 2);\n   |                  ------------------------------------ ^ ------------------------------------\
    \ Option<char>\n   |                  |\n   |                  Option<char>\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use std::borrow::Borrow;\n    let mut\
    \ s = String::new();\n    let mut len = 0;\n    for d in &x as usize {\n     \
    \   s = format!(\"{}{}\", s, if shift > len { &d[len - shift] } else { \"\" });\n\
    \        len += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::borrow::Borrow`\n --> /tmp/tmpu3uzj3zx.rs:9:9\n\
    \  |\n9 |     use std::borrow::Borrow;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n\
    \  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0277]: `usize` is\
    \ not an iterator\n  --> /tmp/tmpu3uzj3zx.rs:12:14\n   |\n12 |     for d in &x\
    \ as usize {\n   |              ^^^^^^^^^^^ `usize` is not an iterator\n   |\n\
    \   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if\
    \ you want to iterate between `start` until a value `end`, use the exclusive range\
    \ syntax `start..end` or the inclusive range syntax `start..=end`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `usize`\n\
    \nerror[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmpu3uzj3zx.rs:12:14\n\
    \   |\n12 |     for d in &x as usize {\n   |              --^^^^^^^^^\n   |  \
    \            |\n   |              cannot cast `&isize` as `usize`\n   |      \
    \        help: dereference the expression: `*&x`\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let len = x.checked_mul(10).unwrap();\n\
    \    let mut s = String::with_capacity(len.into());\n    for d in x.checked_div_rem(shift)\
    \ {\n        s.push(*d % 10);\n        *d /= 10;\n    }\n    s.reverse()\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: From<isize>` is not satisfied\n \
    \ --> /tmp/tmpmp1t7lg9.rs:10:43\n   |\n10 |     let mut s = String::with_capacity(len.into());\n\
    \   |                                           ^^^^ the trait `From<isize>` is\
    \ not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <f32 as From<i16>>\n             <f32 as From<i8>>\n\
    \             <f32 as From<u16>>\n             <f32 as From<u8>>\n           \
    \  <f64 as From<f32>>\n             <f64 as From<i16>>\n             <f64 as From<i32>>\n\
    \             <f64 as From<i8>>\n           and 67 others\n   = note: required\
    \ because of the requirements on the impl of `Into<usize>` for `isize`\n\nerror[E0599]:\
    \ no method named `checked_div_rem` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpmp1t7lg9.rs:11:16\n   |\n11 |     for d in x.checked_div_rem(shift)\
    \ {\n   |                ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `checked_div`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpmp1t7lg9.rs:15:7\n\
    \   |\n15 |     s.reverse()\n   |       ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    for\
    \ _ in 0..shift {\n        digits = digits.chars().next().unwrap().to_string();\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmp7ulquzhl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits.push_str(&mut\
    \ \"\");\n    for _ in 0..shift {\n        let next = digits.chars().nth(digits.len()\
    \ - 1);\n        digits.push_str(&*next);\n    }\n    digits.into()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Option<char>` cannot be dereferenced\n  --> /tmp/tmppt2kmrff.rs:13:26\n\
    \   |\n13 |         digits.push_str(&*next);\n   |                          ^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ shift = shift % 10;\n    let mut digits = x % 10;\n    while shift > 0 {\n \
    \       s.push((digits as u8 + shift as u8 + '0').to_string());\n        shift\
    \ -= 10;\n        digits = x % 10;\n    }\n    s.push((digits as u8 + '0').to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `char` to `u8`\n  --> /tmp/tmpd7h10n1e.rs:13:44\n\
    \   |\n13 |         s.push((digits as u8 + shift as u8 + '0').to_string());\n\
    \   |                                            ^ no implementation for `u8 +\
    \ char`\n   |\n   = help: the trait `Add<char>` is not implemented for `u8`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `char` to `u8`\n  --> /tmp/tmpd7h10n1e.rs:17:26\n   |\n17 |     s.push((digits\
    \ as u8 + '0').to_string());\n   |                          ^ no implementation\
    \ for `u8 + char`\n   |\n   = help: the trait `Add<char>` is not implemented for\
    \ `u8`\n   = help: the following other types implement trait `Add<Rhs>`:\n   \
    \          <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n       \
    \      <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n         \
    \    <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a\
    \ i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if x.abs() < 10 {\n        return String::from(format!(\"\
    {:0>{}}\", x, shift));\n    }\n    let mut digits: Vec<isize> = x.to_string().chars().collect();\n\
    \    digits[shift..].copy_from_slice(&mut digits.into_iter().rev().take(shift));\n\
    \    String::from_utf8(digits.into_iter().collect())\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpzb3ueil_.rs:10:42\n\
    \   |\n10 |         return String::from(format!(\"{:0>{}}\", x, shift));\n   |\
    \                                      -   ^ expected `}` in format string\n \
    \  |                                      |\n   |                            \
    \          because of this opening brace\n   |\n   = note: if you intended to\
    \ print `{`, you can escape it using `{{`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `char`\n    --> /tmp/tmpzb3ueil_.rs:12:56\n\
    \     |\n12   |     let mut digits: Vec<isize> = x.to_string().chars().collect();\n\
    \     |                                                        ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=char>`\n  \
    \   |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `RangeFrom<isize>`\n  --> /tmp/tmpzb3ueil_.rs:13:5\n   |\n13 |     digits[shift..].copy_from_slice(&mut\
    \ digits.into_iter().rev().take(shift));\n   |     ^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `RangeFrom<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzb3ueil_.rs:13:72\n   |\n13 |\
    \     digits[shift..].copy_from_slice(&mut digits.into_iter().rev().take(shift));\n\
    \   |                                                                        ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n13 |     digits[shift..].copy_from_slice(&"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut str = String::new();\n    let\
    \ mut i = x.to_digits();\n    i.rotate_left(shift);\n    while i != 0 {\n    \
    \    i += i;\n        i += i;\n        let digit = i % 10;\n        str += &format!(\"\
    {}\", digit);\n        i /= 10;\n    }\n    str.reverse();\n    str\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp7d1fqi4j.rs:10:19\n   |\n10 |     let mut i = x.to_digits();\n\
    \   |                   ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp7d1fqi4j.rs:19:9\n   |\n19 |     str.reverse();\n   |         ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut ret: String = \"\";\n    while\
    \ x > 0 {\n        if shift == 0 {\n            break;\n        }\n        shift\
    \ -= 1;\n        ret += x.to_string();\n        x = x >> shift;\n    }\n    ret.reverse();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxtwyfjmr.rs:9:27\n  |\n9 |\
    \     let mut ret: String = \"\";\n  |                  ------   ^^- help: try\
    \ using a conversion method: `.to_string()`\n  |                  |        |\n\
    \  |                  |        expected struct `String`, found `&str`\n  |   \
    \               expected due to this\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxtwyfjmr.rs:15:16\n   |\n15 |         ret += x.to_string();\n   |  \
    \              ^^^^^^^^^^^^^\n   |                |\n   |                expected\
    \ `&str`, found struct `String`\n   |                help: consider borrowing\
    \ here: `&x.to_string()`\n\nerror[E0599]: no method named `reverse` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpxtwyfjmr.rs:18:9\n   |\n\
    18 |     ret.reverse();\n   |         ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_64sudis.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_64sudis.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut res = String::with_capacity(x.bit_length()\
    \ + shift + 1);\n    res.push_str(&x.to_string());\n    for i in 0..shift {\n\
    \        res.push_str(&res[x.len() - i - 1]);\n    }\n    res.push_str(&res[x.len()\
    \ - shift..]);\n    res\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `bit_length` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpmf_lr757.rs:9:43\n  |\n9 |     let mut res = String::with_capacity(x.bit_length()\
    \ + shift + 1);\n  |                                           ^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpmf_lr757.rs:12:29\n   |\n12 |         res.push_str(&res[x.len()\
    \ - i - 1]);\n   |                             ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpmf_lr757.rs:14:25\n   |\n14 |     res.push_str(&res[x.len() - shift..]);\n\
    \   |                         ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut remainder = x;\n    let mut bits = 1;\n    let mut digits = x.digits();\n\
    \n    while shift != 0 {\n        let next_digits = digits % shift;\n        remainder\
    \ -= next_digits;\n        shift -= next_digits;\n        let digits = next_digits;\n\
    \        bits = next_digits;\n        result += &format!(\"{:0{}b}\", digits,\
    \ bits);\n    }\n\n    if remainder != 0 {\n        let digits = remainder;\n\
    \        result += &format!(\"{:0{}b}\", digits, bits);\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpw5ugq095.rs:20:32\n\
    \   |\n20 |         result += &format!(\"{:0{}b}\", digits, bits);\n   |     \
    \                        -  ^ expected `}` in format string\n   |            \
    \                 |\n   |                             because of this opening\
    \ brace\n   |\n   = note: if you intended to print `{`, you can escape it using\
    \ `{{`\n\nerror: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpw5ugq095.rs:25:32\n\
    \   |\n25 |         result += &format!(\"{:0{}b}\", digits, bits);\n   |     \
    \                        -  ^ expected `}` in format string\n   |            \
    \                 |\n   |                             because of this opening\
    \ brace\n   |\n   = note: if you intended to print `{`, you can escape it using\
    \ `{{`\n\nerror[E0599]: no method named `digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpw5ugq095.rs:12:24\n   |\n12 |     let mut digits\
    \ = x.digits();\n   |                        ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    use std::fmt::{self, Debug};\n    if shift\
    \ > x.len() {\n        fmt::Debug::fmt(self.clone()).unwrap()\n    } else {\n\
    \        let mut res = String::new();\n        res.push_str(&x[shift..].iter().cloned().map(|x|\
    \ x.to_string()).collect::<Vec<_>>());\n        res.push_str(&x[..shift].iter().cloned().map(|x|\
    \ x.to_string()).collect::<Vec<_>>());\n        res\n    }\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0424]: expected value, found module `self`\n  --> /tmp/tmpbhuln0fk.rs:11:25\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |    --------------\
    \ this function can't have a `self` parameter\n...\n11 |         fmt::Debug::fmt(self.clone()).unwrap()\n\
    \   |                         ^^^^ `self` value is a keyword only available in\
    \ methods with a `self` parameter\n\nwarning: unused import: `Debug`\n --> /tmp/tmpbhuln0fk.rs:9:26\n\
    \  |\n9 |     use std::fmt::{self, Debug};\n  |                          ^^^^^\n\
    \  |\n  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpbhuln0fk.rs:10:18\n\
    \   |\n10 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0061]: this function takes 2 arguments but 1 argument was\
    \ supplied\n   --> /tmp/tmpbhuln0fk.rs:11:9\n    |\n11  |         fmt::Debug::fmt(self.clone()).unwrap()\n\
    \    |         ^^^^^^^^^^^^^^^ ------------ supplied 1 argument\n    |       \
    \  |\n    |         expected 2 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbhuln0fk.rs:11:9\n   |\n\
    8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |             \
    \                                 ------ expected `String` because of return type\n\
    ...\n11 |         fmt::Debug::fmt(self.clone()).unwrap()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n\nerror[E0608]: cannot index into a value\
    \ of type `isize`\n  --> /tmp/tmpbhuln0fk.rs:14:23\n   |\n14 |         res.push_str(&x[shift..].iter().cloned().map(|x|\
    \ x.to_string()).collect::<Vec<_>>());\n   |                       ^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpbhuln0fk.rs:15:23\n\
    \   |\n15 |         res.push_str(&x[..shift].iter().cloned().map(|x| x.to_string()).collect::<Vec<_>>());\n\
    \   |                       ^^^^^^^^^^\n\nerror: aborting due to 6 previous errors;\
    \ 1 warning emitted\n\nSome errors have detailed explanations: E0061, E0308, E"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut buffer = String::with_capacity(x.max(shift)\
    \ + 1);\n    for i in 0..shift {\n        buffer.push(x[x.len() - 1 - i]);\n \
    \   }\n    buffer.reverse();\n    buffer\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8o7g9w1w.rs:9:44\n  |\n9 |\
    \     let mut buffer = String::with_capacity(x.max(shift) + 1);\n  |         \
    \                                   ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |     let mut buffer = String::with_capacity((x.max(shift)\
    \ + 1).try_into().unwrap());\n  |                                            +\
    \                +++++++++++++++++++++\n\nerror[E0599]: no method named `len`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp8o7g9w1w.rs:11:25\n\
    \   |\n11 |         buffer.push(x[x.len() - 1 - i]);\n   |                   \
    \      ^^^ method not found in `isize`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp8o7g9w1w.rs:13:12\n\
    \   |\n13 |     buffer.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let digits = x as usize;\n\n    if digits\
    \ == 0 {\n        String::from(\"0\")\n    } else {\n        let mut x = x;\n\
    \        for i in 0..shift {\n            x = x << 1;\n        }\n        let\
    \ x = x >> 1;\n\n        let mut result = String::new();\n        while x >= digits\
    \ as usize {\n            let digit = x % digits as usize;\n            result\
    \ += '0' + digit;\n            x = x / digits as usize;\n        }\n        result\
    \ += '0' + x as i32;\n        if shift > digits as usize {\n            String::from(&result[2..])\n\
    \        } else {\n            String::from(&result[1..])\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnpyzp7zv.rs:21:20\n   |\n\
    21 |         while x >= digits as usize {\n   |                    ^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n21 |         while\
    \ x >= (digits as usize).try_into().unwrap() {\n   |                    +    \
    \           +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnpyzp7zv.rs:22:29\n\
    \   |\n22 |             let digit = x % digits as usize;\n   |               \
    \              ^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot mod `isize` by `usize`\n  --> /tmp/tmpnpyzp7zv.rs:22:27\n   |\n22 | \
    \            let digit = x % digits as usize;\n   |                          \
    \ ^ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\n\nerror[E0369]: cannot add `isize` to `char`\n  --> /tmp/tmpnpyzp7zv.rs:23:27\n\
    \   |\n23 |             result += '0' + digit;\n   |                       ---\
    \ ^ ----- isize\n   |                       |\n   |                       char\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnpyzp7zv.rs:24:21\n   |\n24 |\
    \             x = x / digits as usize;\n   |                     ^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot divide `isize` by `usize`\n\
    \  --> /tmp/tmpnpyzp7zv.rs:24:19\n   |\n24 |             x = x / digits as usize;\n\
    \   |                   ^ no implementation for `isize / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    if shift\
    \ > x.len() {\n        s.push('0');\n        let shift_index = x.len() - shift;\n\
    \        for i in 0..shift_index {\n            s.push('0');\n        }\n    }\
    \ else {\n        let shift_index = shift;\n        for i in 0..shift_index {\n\
    \            s.push('0');\n        }\n    }\n    for i in x.to_digits().iter()\
    \ {\n        s.push(*i);\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpe_8pfrwt.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpe_8pfrwt.rs:12:29\n\
    \   |\n12 |         let shift_index = x.len() - shift;\n   |                 \
    \            ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `to_digits` found for type `isize` in the current scope\n  --> /tmp/tmpe_8pfrwt.rs:22:16\n\
    \   |\n22 |     for i in x.to_digits().iter() {\n   |                ^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    result.push_str(x.to_string());\n\
    \    let mut shift = (x.leading_zeros() * shift).floor() as usize;\n    result.push_str(\"\
    -\".repeat(shift.to_string()));\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_eg5p9dr.rs:10:21\n   |\n\
    10 |     result.push_str(x.to_string());\n   |                     ^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&str`, found struct\
    \ `String`\n   |                     help: consider borrowing here: `&x.to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_eg5p9dr.rs:11:42\n   |\n11 |\
    \     let mut shift = (x.leading_zeros() * shift).floor() as usize;\n   |    \
    \                                      ^^^^^ expected `u32`, found `isize`\n\n\
    error[E0599]: no method named `floor` found for type `u32` in the current scope\n\
    \  --> /tmp/tmp_eg5p9dr.rs:11:49\n   |\n11 |     let mut shift = (x.leading_zeros()\
    \ * shift).floor() as usize;\n   |                                           \
    \      ^^^^^ help: there is an associated function with a similar name: `div_floor`\n\
    \nerror[E0277]: cannot multiply `u32` by `isize`\n  --> /tmp/tmp_eg5p9dr.rs:11:40\n\
    \   |\n11 |     let mut shift = (x.leading_zeros() * shift).floor() as usize;\n\
    \   |                                        ^ no implementation for `u32 * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `u32`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_eg5p9dr.rs:12:21\n   |\n12 |     result.push_str(\"-\"\
    .repeat(shift.to_string()));\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&str`, found struct\
    \ `String`\n   |                     help: consider borrowing here: `&\"-\".repeat(shift.to_string())`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if x.abs() < shift {\n        String::from(x.to_digits().iter().rev().collect())\n\
    \    } else {\n        let mut n = 0;\n        let mut s = String::new();\n  \
    \      while x >= shift {\n            s = s.push_str(x.to_digits().as_slice().to_ascii_lowercase());\n\
    \            n += 1;\n            x -= shift;\n        }\n        s = s.push_str(x.to_digits().as_slice().to_ascii_lowercase());\n\
    \        if n < shift {\n            s.prepend(\"0\");\n        }\n        s\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp7d7eu4in.rs:10:24\n   |\n10 |         String::from(x.to_digits().iter().rev().collect())\n\
    \   |                        ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp7d7eu4in.rs:15:30\n   |\n15 |             s = s.push_str(x.to_digits().as_slice().to_ascii_lowercase());\n\
    \   |                              ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7d7eu4in.rs:15:17\n   |\n13 |         let mut\
    \ s = String::new();\n   |                     ------------- expected due to this\
    \ value\n14 |         while x >= shift {\n15 |             s = s.push_str(x.to_digits().as_slice().to_ascii_lowercase());\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `push_str` modifies\
    \ its receiver in-place\n  --> /tmp/tmp7d7eu4in.rs:15:19\n   |\n15 |         \
    \    s = s.push_str(x.to_digits().as_slice().to_ascii_lowercase());\n   |    \
    \             - ^^^^^^^^ this call modifies `s` in-place\n   |               \
    \  |\n   |                 you probably want to use this value after calling the\
    \ method...\n   = note: ...instead of the `()` output of method `push_str`\n\n\
    error[E0599]: no method named `to_digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp7d7eu4in.rs:19:26\n   |\n19 |         s = s.push_str(x.to_digits().as_slice().to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7d7eu4in.rs:19:13\n   |\n13 |         let mut\
    \ s = String::new();\n   |                     ------------- expected due to this\
    \ value\n...\n19 |         s = s.push_str(x.to_digits().as_slice().to_ascii_lowercase());\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `()`\n   |\nnote: method `push_str` modifies its receiver\
    \ in-place\n  --> /tmp"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::from(\"0\");\n   \
    \ for i in 1..shift {\n        s = s.chars().nth(i).unwrap().to_string().append(s);\n\
    \    }\n    for i in 0..shift {\n        s = s.chars().nth(shift + i).unwrap().to_string().append(s);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoiu5zv6_.rs:11:27\n   |\n\
    11 |         s = s.chars().nth(i).unwrap().to_string().append(s);\n   |      \
    \                     ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    11 |         s = s.chars().nth(i.try_into().unwrap()).unwrap().to_string().append(s);\n\
    \   |                            ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `append` found for struct `String` in the current scope\n  --> /tmp/tmpoiu5zv6_.rs:11:51\n\
    \   |\n11 |         s = s.chars().nth(i).unwrap().to_string().append(s);\n   |\
    \                                                   ^^^^^^ method not found in\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoiu5zv6_.rs:14:27\n\
    \   |\n14 |         s = s.chars().nth(shift + i).unwrap().to_string().append(s);\n\
    \   |                           ^^^^^^^^^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |         s = s.chars().nth((shift + i).try_into().unwrap()).unwrap().to_string().append(s);\n\
    \   |                           +         +++++++++++++++++++++\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpoiu5zv6_.rs:14:59\n   |\n14 |         s = s.chars().nth(shift + i).unwrap().to_string().append(s);\n\
    \   |                                                           ^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars().enumerate().fold(String::new(),\
    \ |s, (i, _)| {\n        if i > ((x.len() - 1) * shift) {\n            s.reverse();\n\
    \        } else {\n            let d = i % shift;\n            let n = x - i *\
    \ d;\n            let n = n / d;\n            s.append(String::from_utf8_lossy(n));\n\
    \        }\n        s\n    })\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpsvb9b6rd.rs:10:20\n   |\n10 |         if i > ((x.len()\
    \ - 1) * shift) {\n   |                    ^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpsvb9b6rd.rs:11:15\n   |\n11 |             s.reverse();\n\
    \   |               ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvb9b6rd.rs:13:25\n\
    \   |\n13 |             let d = i % shift;\n   |                         ^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n\
    \  --> /tmp/tmpsvb9b6rd.rs:13:23\n   |\n13 |             let d = i % shift;\n\
    \   |                       ^ no implementation for `usize % isize`\n   |\n  \
    \ = help: the trait `Rem<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsvb9b6rd.rs:14:25\n   |\n14 |             let n = x - i\
    \ * d;\n   |                         ^^^^^ expected `isize`, found `usize`\n\n\
    error[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmpsvb9b6rd.rs:14:23\n\
    \   |\n14 |             let n = x - i * d;\n   |                       ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<is"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut buf = String::new();\n    let\
    \ mut carry = 0;\n    let mut digits = x.to_string().chars().enumerate().map(|(i,\
    \ x)| (x.to_string(), i));\n    let len = if shift > x.len() {\n        shift\
    \ - x.len()\n    } else {\n        shift\n    };\n    for i in 0..len {\n    \
    \    let (digit, i) = digits.get(i as usize).unwrap();\n        let len = digit.len();\n\
    \        let new_len = len + shift;\n        let (mut x, mut i) = (digit + &buf[i\
    \ as usize], i + 1);\n        if new_len > buf.len() {\n            buf.resize(new_len\
    \ as usize, '0');\n        }\n        x = x.rotate_left(len + shift);\n      \
    \  buf[i as usize] = *x;\n        carry += *x;\n    }\n    let x = if carry >\
    \ 0 {\n        buf.reverse()\n    } else {\n        String::from(\"0\")\n    };\n\
    \    String::from(x)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpazmomrav.rs:12:28\n   |\n12 |     let len = if shift >\
    \ x.len() {\n   |                            ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpazmomrav.rs:13:19\n   |\n13 |         shift - x.len()\n   |   \
    \                ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `get` found for struct `Map` in the current scope\n  --> /tmp/tmpazmomrav.rs:18:33\n\
    \   |\n18 |         let (digit, i) = digits.get(i as usize).unwrap();\n   |  \
    \                               ^^^ method not found in `Map<Enumerate<Chars<'_>>,\
    \ [closure@/tmp/tmpazmomrav.rs:11:60: 11:87]>`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpazmomrav.rs:21:40\n   |\n21 |  \
    \       let (mut x, mut i) = (digit + &buf[i as usize], i + 1);\n   |        \
    \                                ^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `resize` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpazmomrav.rs:23:17\n   |\n23 |          \
    \   buf.resize(new_len as usize, '0');\n   |                 ^^^^^^ method not\
    \ found in `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpazmomrav.rs:26:9\n   |\n26 |         buf[i as usize] = *x;\n  \
    \ |         ^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let len = x.len();\n    if shift > len\
    \ {\n        String::from(x.clone())\n    } else if shift == len {\n        String::from(\"\
    0\")\n    } else {\n        let mut result = String::from(\"0\");\n        for\
    \ &i in x.chars().rev() {\n            if i >= (len - shift) {\n             \
    \   result.push(i);\n            } else {\n                result.push(i as char);\n\
    \                result.push((len - shift) - i);\n            }\n        }\n \
    \       result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpyga_9qqv.rs:9:17\n  |\n9 |     let len = x.len();\n  | \
    \                ^^^ method not found in `isize`\n\nerror[E0277]: the trait bound\
    \ `String: From<isize>` is not satisfied\n  --> /tmp/tmpyga_9qqv.rs:11:9\n   |\n\
    11 |         String::from(x.clone())\n   |         ^^^^^^^^^^^^ the trait `From<isize>`\
    \ is not implemented for `String`\n   |\n   = help: the following other types\
    \ implement trait `From<T>`:\n             <String as From<&String>>\n       \
    \      <String as From<&mut str>>\n             <String as From<&str>>\n     \
    \        <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n\
    \             <String as From<char>>\n\nerror[E0599]: no method named `chars`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpyga_9qqv.rs:16:21\n\
    \   |\n16 |         for &i in x.chars().rev() {\n   |                     ^^^^^\
    \ method not found in `isize`\n\nerror[E0277]: can't compare `char` with `isize`\n\
    \  --> /tmp/tmpyga_9qqv.rs:17:18\n   |\n17 |             if i >= (len - shift)\
    \ {\n   |                  ^^ no implementation for `char < isize` and `char >\
    \ isize`\n   |\n   = help: the trait `PartialOrd<isize>` is not implemented for\
    \ `char`\n   = help: the trait `PartialOrd` is implemented for `char`\n\nerror[E0277]:\
    \ cannot subtract `char` from `isize`\n  --> /tmp/tmpyga_9qqv.rs:21:43\n   |\n\
    21 |                 result.push((len - shift) - i);\n   |                   \
    \                        ^ no implementation for `isize - char`\n   |\n   = help:\
    \ the trait `Sub<char>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    match shift {\n        0 => String::from(x.to_string()),\n\
    \        shift if shift > x.len() => x.to_string().chars().enumerate().map(|(i,\
    \ c)| {\n            match i {\n                i if i % (shift + 1) == 0 => c.to_string(),\n\
    \                i if i % (shift + 2) != 0 => c.to_string() + c.to_string()[i/(shift\
    \ + 2)].to_string()\n            }\n        }).collect::<Vec<_>>().to_string()\
    \ + String::from(\"0\"),\n        shift if shift > x.len() - 1 => x.to_string().chars().enumerate().map(|(i,\
    \ c)| {\n            match i {\n                i if i % (shift + 1) == (x.len()\
    \ - 1)\n                    || (i % (shift + 2) != 0 && i % (shift + 2) == (x.len()\
    \ - 1)) => c.to_string(),\n                i if i % (shift + 2) != 0 => c.to_string()\
    \ + c.to_string()[i/(shift + 2)].to_string()\n            }\n        }).collect::<Vec<_>>().to_string()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpzmpdoa0g.rs:11:28\n   |\n11 |         shift if shift >\
    \ x.len() => x.to_string().chars().enumerate().map(|(i, c)| {\n   |          \
    \                  ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzmpdoa0g.rs:13:26\n   |\n13 |                 i if i %\
    \ (shift + 1) == 0 => c.to_string(),\n   |                          ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n\
    \  --> /tmp/tmpzmpdoa0g.rs:13:24\n   |\n13 |                 i if i % (shift +\
    \ 1) == 0 => c.to_string(),\n   |                        ^ no implementation for\
    \ `usize % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzmpdoa0g.rs:14:26\n\
    \   |\n14 |                 i if i % (shift + 2) != 0 => c.to_string() + c.to_string()[i/(shift\
    \ + 2)].to_string()\n   |                          ^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmpzmpdoa0g.rs:14:24\n\
    \   |\n14 |                 i if i % (shift + 2) != 0 => c.to_string() + c.to_string()[i/(shift\
    \ + 2)].to_string()\n   |                        ^ no implementation for `usize\
    \ % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Rem<Rhs>`:\n          \
    \   <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift == 0 {\n        String::from(\"\
    0\")\n    } else {\n        let mut digits = String::from(\"0\");\n        for\
    \ n in x.digits() { // n >= 0\n            if n >= shift {\n                digits.append(n\
    \ as u32 - shift as u32).to_string();\n            } else {\n                digits.append(n\
    \ as u32).to_string();\n            }\n        }\n        digits\n    }\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwkx_vepm.rs:13:20\n   |\n13 |         for n in x.digits()\
    \ { // n >= 0\n   |                    ^^^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `append` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpwkx_vepm.rs:15:24\n   |\n15 |                 digits.append(n\
    \ as u32 - shift as u32).to_string();\n   |                        ^^^^^^ method\
    \ not found in `String`\n\nerror[E0599]: no method named `append` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpwkx_vepm.rs:17:24\n   |\n17 | \
    \                digits.append(n as u32).to_string();\n   |                  \
    \      ^^^^^^ method not found in `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let digits = x.digits();\n    let mut\
    \ result = String::with_capacity(digits);\n    let mut carry = 0;\n\n    for i\
    \ in 1..digits {\n        let carry = digit as usize;\n        if carry > shift\
    \ {\n            result.push_str(&digits[i - 1..]);\n            break;\n    \
    \    }\n        let digit = digits[i - 1];\n        result.push_str(&format!(\"\
    {}{}\", digit as char, digit >> shift as char));\n    }\n    if carry > shift\
    \ {\n        result.push_str(&digits[digits..]);\n    }\n\n    result\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digit` in this scope\n  --> /tmp/tmp3g99b26u.rs:14:21\n\
    \   |\n14 |         let carry = digit as usize;\n   |                     ^^^^^\
    \ help: a local variable with a similar name exists: `digits`\n\nerror[E0599]:\
    \ no method named `digits` found for type `isize` in the current scope\n --> /tmp/tmp3g99b26u.rs:9:20\n\
    \  |\n9 |     let digits = x.digits();\n  |                    ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0608]: cannot index into a value of type `usize`\n\
    \  --> /tmp/tmp3g99b26u.rs:16:30\n   |\n16 |             result.push_str(&digits[i\
    \ - 1..]);\n   |                              ^^^^^^^^^^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `usize`\n  --> /tmp/tmp3g99b26u.rs:19:21\n\
    \   |\n19 |         let digit = digits[i - 1];\n   |                     ^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `usize`\n  --> /tmp/tmp3g99b26u.rs:23:26\n\
    \   |\n23 |         result.push_str(&digits[digits..]);\n   |                \
    \          ^^^^^^^^^^^^^^^^\n\nerror[E0604]: only `u8` can be cast as `char`,\
    \ not `isize`\n  --> /tmp/tmp3g99b26u.rs:20:66\n   |\n20 |         result.push_str(&format!(\"\
    {}{}\", digit as char, digit >> shift as char));\n   |                       \
    \                                           ^^^^^^^^^^^^^ invalid cast\n   |\n\
    help: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmp3g99b26u.rs:20:66\n\
    \   |\n20 |         result.push_str(&format!(\"{}{}\", digit as char, digit >>\
    \ shift as char));\n   |                                                     \
    \             ^^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599, E0604, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift == 0 { return String::from(\"\
    0\") };\n    let mut result = String::new();\n    let mut remainder = x;\n   \
    \ for i in 0..shift {\n        if remainder < 10 { result.push((remainder % 10)\
    \ + \"\") };\n        remainder = (remainder / 10).floor();\n    }\n    if remainder\
    \ > 0 { result.push((remainder % 10) + \"\") };\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&str` to `isize`\n  --> /tmp/tmp9jrlo3qa.rs:13:58\n\
    \   |\n13 |         if remainder < 10 { result.push((remainder % 10) + \"\") };\n\
    \   |                                                          ^ no implementation\
    \ for `isize + &str`\n   |\n   = help: the trait `Add<&str>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0599]: no method named `floor` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp9jrlo3qa.rs:14:38\n   |\n14 |         remainder\
    \ = (remainder / 10).floor();\n   |                                      ^^^^^\
    \ help: there is an associated function with a similar name: `div_floor`\n\nerror[E0277]:\
    \ cannot add `&str` to `isize`\n  --> /tmp/tmp9jrlo3qa.rs:16:53\n   |\n16 |  \
    \   if remainder > 0 { result.push((remainder % 10) + \"\") };\n   |         \
    \                                            ^ no implementation for `isize +\
    \ &str`\n   |\n   = help: the trait `Add<&str>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    while n > 0 {\n        s += char::from_u32(n).unwrap().to_string();\n\
    \        n = (n >> shift) as usize;\n    }\n    s + '0'\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphxty5tbg.rs:12:29\n   |\n\
    12 |         s += char::from_u32(n).unwrap().to_string();\n   |              \
    \               ^ expected `u32`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n12 |\
    \         s += char::from_u32(n.try_into().unwrap()).unwrap().to_string();\n \
    \  |                              ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphxty5tbg.rs:12:14\n   |\n12 |         s += char::from_u32(n).unwrap().to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |              |\n\
    \   |              expected `&str`, found struct `String`\n   |              help:\
    \ consider borrowing here: `&char::from_u32(n).unwrap().to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphxty5tbg.rs:13:13\n   |\n10 |     let mut n\
    \ = x;\n   |                 - expected due to this value\n...\n13 |         n\
    \ = (n >> shift) as usize;\n   |             ^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphxty5tbg.rs:15:9\n\
    \   |\n15 |     s + '0'\n   |         ^^^ expected `&str`, found `char`\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n15 |   \
    \  s + \"0\"\n   |         ~~~\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        // Rotate\
    \ to the right.\n        if shift - x.len() < 0 {\n            return String::from(\"\
    0\".to_string());\n        }\n        let mut result = String::new();\n      \
    \  result.push_str(&x[shift - x.len()..]);\n        result.push_str(&x[0..shift]);\n\
    \        result\n    } else {\n        // Rotate to the left.\n        let mut\
    \ result = String::from(\"0\".to_string());\n        for c in x.chars().rev()\
    \ {\n            result.push_str(&c[0..shift]);\n            result.push_str(&c[shift..]);\n\
    \        }\n        result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpxz8pyy1q.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpxz8pyy1q.rs:11:22\n\
    \   |\n11 |         if shift - x.len() < 0 {\n   |                      ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpxz8pyy1q.rs:15:38\n   |\n15 |         result.push_str(&x[shift\
    \ - x.len()..]);\n   |                                      ^^^ method not found\
    \ in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmpxz8pyy1q.rs:15:26\n   |\n15 |         result.push_str(&x[shift - x.len()..]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index\
    \ into a value of type `isize`\n  --> /tmp/tmpxz8pyy1q.rs:16:26\n   |\n16 |  \
    \       result.push_str(&x[0..shift]);\n   |                          ^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `chars` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpxz8pyy1q.rs:21:20\n   |\n21 |         for c in x.chars().rev()\
    \ {\n   |                    ^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x\n    }\
    \ else {\n        x.to_string().chars().enumerate().rev().map(|(i, x)| (i + shift)\
    \ % x.len()).chain(|| x.to_string()).collect()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpdyd_16j5.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdyd_16j5.rs:10:9\n   |\n8  | fn circular_shift(x: isize,\
    \ shift: isize) -> String {\n   |                                            \
    \  ------ expected `String` because of return type\n9  |     if shift > x.len()\
    \ {\n10 |         x\n   |         ^- help: try using a conversion method: `.to_string()`\n\
    \   |         |\n   |         expected struct `String`, found `isize`\n\nerror[E0277]:\
    \ the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n    --> /tmp/tmpdyd_16j5.rs:12:43\n\
    \     |\n12   |         x.to_string().chars().enumerate().rev().map(|(i, x)| (i\
    \ + shift) % x.len()).chain(|| x.to_string()).collect()\n     |              \
    \                             ^^^ the trait `ExactSizeIterator` is not implemented\
    \ for `Chars<'_>`\n     |\n     = help: the following other types implement trait\
    \ `ExactSizeIterator`:\n               &mut I\n               Args\n         \
    \      ArgsOs\n               ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_,\
    \ T, N>\n               ArrayWindows<'_, T, N>\n               Box<I, A>\n   \
    \            Chunks<'_, T>\n             and 109 others\n     = note: required\
    \ because of the requirements on the impl of `DoubleEndedIterator` for `Enumerate<Chars<'_>>`\n\
    note: required by a bound in `rev`\n\nerror[E0599]: the method `map` exists for\
    \ struct `Rev<Enumerate<Chars<'_>>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpdyd_16j5.rs:12:49\n   |\n12 |           x.to_string().chars().enumerate().rev().map(|(i,\
    \ x)| (i + shift) % x.len()).chain(|| x.to_string()).collect()\n   |         \
    \                                          ^^^ method cannot be called on `Rev<Enumerate<Chars<'_>>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `Enumerate<Chars<'_>>: DoubleEndedIterator`\n\
    \           which is required by `Rev<Enumerat"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift > x.len() {\n        x.to_string().rev()\n\
    \    } else {\n        x.to_string().parse::<i64>().unwrap()\n            .to_string()\n\
    \            .parse::<usize>()\n            .unwrap()\n            .to_ascii_uppercase()\n\
    \            .to_string()\n            .parse::<isize>()\n            .unwrap()\n\
    \            .to_string()\n            .to_ascii_lowercase()\n            .to_string()\n\
    \            .parse::<isize>()\n            .unwrap()\n            .to_string()\n\
    \            .rev()\n            .to_string()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpf7niwrn6.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: `String` is\
    \ not an iterator\n   --> /tmp/tmpf7niwrn6.rs:10:23\n    |\n10  |           x.to_string().rev()\n\
    \    |                         ^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror[E0599]: no method named `to_ascii_uppercase` found for\
    \ type `usize` in the current scope\n  --> /tmp/tmpf7niwrn6.rs:16:14\n   |\n16\
    \ |             .to_ascii_uppercase()\n   |              ^^^^^^^^^^^^^^^^^^ method\
    \ not found in `usize`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut out = String::new();\n    let\
    \ mut n = x;\n    while n > 0 {\n        out.push((n % 10) as char);\n       \
    \ n /= 10;\n    }\n    if shift > out.len() {\n        out.reverse();\n    }\n\
    \    out\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo1e9fimf.rs:15:16\n   |\n\
    15 |     if shift > out.len() {\n   |                ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |     if shift > out.len().try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpo1e9fimf.rs:16:13\n\
    \   |\n16 |         out.reverse();\n   |             ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror[E0604]: only `u8`\
    \ can be cast as `char`, not `isize`\n  --> /tmp/tmpo1e9fimf.rs:12:18\n   |\n\
    12 |         out.push((n % 10) as char);\n   |                  ^^^^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmpo1e9fimf.rs:12:18\n   |\n12 |         out.push((n % 10) as char);\n\
    \   |                  ^^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    while\
    \ x >= shift {\n        *s.rev() = x.rev_digits().as_digits();\n        x -= shift;\n\
    \    }\n    *s.rev() = x.rev_digits().as_digits();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp9i70pgt6.rs:11:12\n\
    \    |\n11  |           *s.rev() = x.rev_digits().as_digits();\n    |        \
    \      ^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `&mut String: Iterator`\n\
    \            `str: Iterator`\n            which is required by `&mut str: Iterator`\n\
    \nerror[E0599]: no method named `rev_digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp9i70pgt6.rs:11:22\n   |\n11 |         *s.rev() = x.rev_digits().as_digits();\n\
    \   |                      ^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ `String` is not an iterator\n   --> /tmp/tmp9i70pgt6.rs:14:8\n    |\n14  | \
    \      *s.rev() = x.rev_digits().as_digits();\n    |          ^^^ `String` is\
    \ not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror[E0599]: no method\
    \ named `rev_digits` found for type `isize` in the current scope\n  --> /tmp/tmp9i70pgt6.rs:14:18\n\
    \   |\n14 |     *s.rev() = x.rev_digits().as_digits();\n   |                 \
    \ ^^^^^^^^^^ method not found in `isize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = 0;\n\n    for digit in x.digits() {\n     \
    \   if digits < shift {\n            s.push((digit as u8).to_string());\n    \
    \    } else {\n            s.push((carry % 10 as u8).to_string());\n         \
    \   carry = carry / 10;\n        }\n        digits += 1;\n    }\n    if digits\
    \ < shift {\n        s.push((carry % 10 as u8).to_string());\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp0r6gp7xg.rs:13:20\n   |\n13 |     for digit in x.digits()\
    \ {\n   |                    ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0r6gp7xg.rs:15:20\n   |\n15 |             s.push((digit\
    \ as u8).to_string());\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0r6gp7xg.rs:17:20\n\
    \   |\n17 |             s.push((carry % 10 as u8).to_string());\n   |        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0r6gp7xg.rs:23:16\n   |\n23 |\
    \         s.push((carry % 10 as u8).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    if shift < 0 {\n        // Shift negative.\n\
    \        let zeros: usize = -shift;\n        let reverse: usize = x.len() - shift\
    \ + zeros;\n        if reverse == 0 {\n            return String::new();\n   \
    \     }\n        let mut digits = x.to_digits(reverse).unwrap();\n        digits.rotate_left(shift);\n\
    \        let mut s = String::from(\"0\");\n        for i in 0..shift {\n     \
    \       s = s.push_str(&digits[i]);\n        }\n        return s;\n    }\n   \
    \ let zeros: usize = shift;\n    let reverse: usize = x.len() + shift + zeros;\n\
    \    if reverse == 0 {\n        return String::from(\"0\");\n    }\n    let mut\
    \ digits = x.to_digits(reverse).unwrap();\n    digits.rotate_right(shift);\n \
    \   let mut s = String::from(\"0\");\n    for i in 0..shift {\n        s = s.push_str(&digits[i]);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzm9fe9fq.rs:11:28\n   |\n\
    11 |         let zeros: usize = -shift;\n   |                    -----   ^^^^^^\
    \ expected `usize`, found `isize`\n   |                    |\n   |           \
    \         expected due to this\n   |\n   = note: `-shift` cannot fit into type\
    \ `usize`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpzm9fe9fq.rs:12:32\n   |\n12 |         let reverse:\
    \ usize = x.len() - shift + zeros;\n   |                                ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpzm9fe9fq.rs:16:28\n   |\n16\
    \ |         let mut digits = x.to_digits(reverse).unwrap();\n   |            \
    \                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzm9fe9fq.rs:20:17\n   |\n18 |         let mut s = String::from(\"\
    0\");\n   |                     ----------------- expected due to this value\n\
    19 |         for i in 0..shift {\n20 |             s = s.push_str(&digits[i]);\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n\
    \   |\nnote: method `push_str` modifies its receiver in-place\n  --> /tmp/tmpzm9fe9fq.rs:20:19\n\
    \   |\n20 |             s = s.push_str(&digits[i]);\n   |                 - ^^^^^^^^\
    \ this call modifies `s` in-place\n   |                 |\n   |              \
    \   you probably want to use this value after calling the method...\n   = note:\
    \ ...instead of the `()` output of method `push_str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzm9fe9fq.rs:24:24\n   |\n24 |     let zeros: usize = shift;\n\
    \   |                -----   ^^^^^ expected `usize`, found `isize`\n   |     \
    \           |\n   |                expected due to this\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    24 |     let zeros: usize = shift.try_into().unwrap();\n   |                 \
    \            ++++++++++++++++++++\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  "
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = 0;\n    loop {\n        let n = x % 10;\n        s += String::from_str(&format!(\"\
    {}{}\", &digits, &n));\n        digits += 1;\n        if digits > shift {\n  \
    \          s += String::from_str(&format!(\"{}\", &n % 10));\n            digits\
    \ -= 1;\n        }\n        if digits == 0 {\n            break;\n        }\n\
    \        x /= 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_str` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmph8nudmcb.rs:13:22\n   |\n\
    13 |         s += String::from_str(&format!(\"{}{}\", &digits, &n));\n   |   \
    \                   ^^^^^^^^ function or associated item not found in `String`\n\
    \   |\n   = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n   |\n1  | use std::str::FromStr;\n   |\n\nerror[E0599]: no function\
    \ or associated item named `from_str` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmph8nudmcb.rs:16:26\n   |\n16 |             s += String::from_str(&format!(\"\
    {}\", &n % 10));\n   |                          ^^^^^^^^ function or associated\
    \ item not found in `String`\n   |\n   = help: items from traits can only be used\
    \ if the trait is in scope\nhelp: the following trait is implemented but not in\
    \ scope; perhaps add a `use` for it:\n   |\n1  | use std::str::FromStr;\n   |\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    x.to_string().chars().nth(shift).chain(|x|\
    \ *x).collect::<String>()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4oxy5jcz.rs:9:31\n  |\n9 |\
    \     x.to_string().chars().nth(shift).chain(|x| *x).collect::<String>()\n  |\
    \                               ^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |     x.to_string().chars().nth(shift.try_into().unwrap()).chain(|x|\
    \ *x).collect::<String>()\n  |                                    ++++++++++++++++++++\n\
    \nerror[E0599]: `Option<char>` is not an iterator\n   --> /tmp/tmp4oxy5jcz.rs:9:38\n\
    \    |\n9   |       x.to_string().chars().nth(shift).chain(|x| *x).collect::<String>()\n\
    \    |                                        ^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    s.push(String::from_str(x.to_string()));\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt19l6k9a.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0599]: no function or associated item named `from_str` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpt19l6k9a.rs:14:20\n   |\n14 | \
    \    s.push(String::from_str(x.to_string()));\n   |                    ^^^^^^^^\
    \ function or associated item not found in `String`\n   |\n   = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::str::FromStr;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    s.push_str(&x.to_string());\n\
    \    if shift < s.len() {\n        let (mut x, mut y) = (x, 0);\n        for i\
    \ in 0..shift - 1 {\n            x <<= 1;\n            y <<= 1;\n            if\
    \ x == 0 {\n                x = 0;\n                y <<= 1;\n            }\n\
    \            s.push(*y.to_string());\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbjar7dnp.rs:11:16\n   |\n\
    11 |     if shift < s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |     if shift < s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbjar7dnp.rs:20:20\n   |\n20 |             s.push(*y.to_string());\n\
    \   |                    ^^^^^^^^^^^^^^ expected `char`, found `str`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let digits = x.to_string();\n    let mut\
    \ s = \"\";\n    let mut carry = 0;\n    for &c in digits {\n        let digit\
    \ = (x.leading_zeros() - &c + carry).wrapping_mul(10).unwrap();\n        if digit\
    \ < 10 { s += &format!(\"{}\", digit).to_string(); }\n        else {\n       \
    \     s += &format!(\"{}\", digit).reverse();\n            carry = 0;\n      \
    \  }\n    }\n\n    if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmp7a4jap4v.rs:12:15\n\
    \   |\n12 |     for &c in digits {\n   |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait\
    \ `Iterator` is not implemented for `String`\n   = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `u32` in the current scope\n  --> /tmp/tmp7a4jap4v.rs:13:71\n\
    \   |\n13 |         let digit = (x.leading_zeros() - &c + carry).wrapping_mul(10).unwrap();\n\
    \   |                                                                       ^^^^^^\
    \ method not found in `u32`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `&str`\n  --> /tmp/tmp7a4jap4v.rs:14:25\n   |\n14\
    \ |         if digit < 10 { s += &format!(\"{}\", digit).to_string(); }\n   |\
    \                         -^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |       \
    \                  |\n   |                         cannot use `+=` on type `&str`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp7a4jap4v.rs:16:40\n   |\n16 |             s += &format!(\"\
    {}\", digit).reverse();\n   |                                        ^^^^^^^ help:\
    \ there is an associated function with a similar name: `reserve`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp7a4jap4v.rs:22:9\n\
    \   |\n22 |         s += &format!(\"{}\", carry).to_string();\n   |         -^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7a4jap4v.rs:24:5\n   |\n8  | fn circular_shift(x:\
    \ isize, shift: isize) -> String {\n   |                                     \
    \         ------ expected `String` because of return type\n...\n24 |     s\n \
    \  |     ^- help: try using a conversion method: `.to_string()`\n   |     |\n\
    \   |     expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    loop\
    \ {\n        if shift > x.len() {\n            result += &x[x.len() - shift..];\n\
    \            shift -= x.len() - shift;\n        } else {\n            result +=\
    \ &x[..shift];\n            shift -= shift;\n        }\n        if shift < 0 {\n\
    \            break;\n        }\n        result += &x[shift..x.len()];\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpnkusxnmg.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpnkusxnmg.rs:12:28\n\
    \   |\n12 |             result += &x[x.len() - shift..];\n   |               \
    \             ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpnkusxnmg.rs:12:24\n   |\n12 |       \
    \      result += &x[x.len() - shift..];\n   |                        ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpnkusxnmg.rs:13:24\n   |\n13 |             shift -= x.len() - shift;\n\
    \   |                        ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpnkusxnmg.rs:15:24\n\
    \   |\n15 |             result += &x[..shift];\n   |                        ^^^^^^^^^^\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpnkusxnmg.rs:21:31\n   |\n21 |         result += &x[shift..x.len()];\n\
    \   |                               ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpnkusxnmg.rs:21:20\n\
    \   |\n21 |         result += &x[shift..x.len()];\n   |                    ^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let n = x.abs();\n\n    let mut digits\
    \ = String::new();\n    let mut reversed_digits = String::new();\n\n    for i\
    \ in 0..shift {\n        let digit = if n >= 0 {\n            n % 10\n       \
    \ } else {\n            (n - 10) % 10\n        };\n\n        reversed_digits.push(digit.to_string());\n\
    \        digits.push(digit.to_string());\n\n        n = n / 10;\n    }\n\n   \
    \ if reverse {\n        reversed_digits.reverse();\n        digits.reverse();\n\
    \    }\n\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `reverse` in this scope\n  --> /tmp/tmpcgaequov.rs:27:8\n\
    \   |\n27 |     if reverse {\n   |        ^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpcgaequov.rs:21:30\n   |\n21 |  \
    \       reversed_digits.push(digit.to_string());\n   |                       \
    \       ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcgaequov.rs:22:21\n   |\n22 |         digits.push(digit.to_string());\n\
    \   |                     ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpcgaequov.rs:28:25\n   |\n28 |         reversed_digits.reverse();\n\
    \   |                         ^^^^^^^ help: there is an associated function with\
    \ a similar name: `reserve`\n\nerror[E0599]: no method named `reverse` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpcgaequov.rs:29:16\n   |\n\
    29 |         digits.reverse();\n   |                ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
