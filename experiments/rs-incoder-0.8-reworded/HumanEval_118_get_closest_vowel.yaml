name: HumanEval_118_get_closest_vowel
language: rs
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
  yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"\
  ))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n\
  /// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\
  \")\nfn get_closest_vowel(word: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
  yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
  )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
  \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")),\
  \ String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n  \
  \  assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\"\
  )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
  o\"));\n}\n"
completions: ["    // convert word into vector\n    let mut word_vec = word.chars().collect::<Vec<_>>();\n\
    \    word_vec.reverse();\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    // find first vowel from the right side of the word\n    let vowels_idx\
    \ = word_vec.iter().position(|c|\n                                    vowels.iter().position(|v|\n\
    \                                                    c == v\n                \
    \                                    )\n                                    );\n\
    \    if vowels_idx < 0 {\n        return String::from(\"\");\n    }\n    // find\
    \ the closest consonant pair\n    let mut closest_pairs = Vec::new();\n    closest_pairs.push(vowels_idx);\n\
    \    let vowels_idx = word_vec.iter().position(|c|\n                         \
    \           vowels.iter().position(|v|\n                                     \
    \               c == v\n                                                    )\n\
    \                                    );\n    while vowels_idx != -1 {\n      \
    \  let mut next_idx = vowels_idx + 1;\n        let mut pairs = Vec::new();\n \
    \       while next_idx != word_vec.len() {\n            pairs.push(next_idx);\n\
    \            next_idx = word_vec.iter().position(|c|\n                       \
    \                     vowels.iter().position(|v|\n                           \
    \                                 c == v\n                                   \
    \                         )\n                                            );\n\
    \        }\n        if pairs.len() > closest_pairs.len() {\n            closest_pairs\
    \ = pairs;\n        }\n        vowels_idx = word_vec.iter().position(|c|\n   \
    \                                     vowels.iter().position(|v|\n           \
    \                                             c == v\n                       \
    \                                 )\n                                        );\n\
    \    }\n    if closest_pairs.len() == 0 {\n        return String::from(\"\");\n\
    \    }\n    // convert closest_pairs into String\n    let mut pairs = String::from(\"\
    \");\n    for &idx in closest_pairs {\n        pairs.push_str(&vowels[idx].to_ascii_lowercase());\n\
    \    }\n    pairs", "    let mut result = String::from(\"\");\n    let mut vowels\
    \ = vec![\"a\",\"e\",\"i\",\"o\",\"u\"];\n    for vowel in vowels.rev() {\n  \
    \      let mut vowel_len = word.len();\n        let mut vowel_start = word.rfind(vowel,\
    \ &vowel_len);\n        let mut vowel_end = word.rfind(vowel.clone(), &vowel_len);\n\
    \        let mut consonant_start = vowel_start + 1;\n        let mut consonant_end\
    \ = vowel_end + 1;\n        // find next consonant\n        while consonant_end\
    \ < word.len() {\n            if word[consonant_end].is_uppercase() {\n      \
    \          consonant_end += 1;\n            } else {\n                break;\n\
    \            }\n        }\n        // find previous consonant\n        while consonant_start\
    \ > 0 {\n            if word[consonant_start - 1].is_uppercase() {\n         \
    \       consonant_start -= 1;\n            } else {\n                break;\n\
    \            }\n        }\n        // return closest vowel\n        if consonant_start\
    \ < consonant_end {\n            let mut vowel_len = word.len() - vowel_end +\
    \ consonant_start;\n            let mut vowel_start = vowel_end + 1;\n       \
    \     let mut vowel_end = vowel_start + 1;\n            while vowel_start < vowel_end\
    \ {\n                if word[vowel_start].is_uppercase() {\n                 \
    \   vowel_start += 1;\n                } else {\n                    break;\n\
    \                }\n            }\n            while vowel_end < word.len() {\n\
    \                if word[vowel_end].is_uppercase() {\n                    vowel_end\
    \ += 1;\n                } else {\n                    break;\n              \
    \  }\n            }\n            result = if vowel_start < vowel_end {\n     \
    \           String::from(word[vowel_start..vowel_end].to_lowercase())\n      \
    \      } else if consonant_start < consonant_end {\n                String::from(word[consonant_start..consonant_end].to_lowercase())\n\
    \            } else {\n                String::from(\"\")\n            };\n  \
    \          break;\n        }\n    }\n    result", "    let word = word.to_lowercase();\n\
    \    let mut index = word.len() - 1;\n    let mut index = word\n        .chars()\n\
    \        .skip_while(|c| {\n            c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u'\n        })\n        .position(|c| {\n            c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n        })\n        .unwrap()\
    \ - 1;\n\n    if index < 0 {\n        index = 0;\n    }\n\n    if word[..index].contains(|&c|\
    \ {\n        c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\n    })\
    \ {\n        index = word.len() - 1;\n    }\n\n    let mut vowel = String::new();\n\
    \    let mut vowel_index = -1;\n    let mut vowel_start = -1;\n    let mut vowel_end\
    \ = -1;\n    let mut vowel_len = word.len() - index;\n    while index < word.len()\
    \ {\n        if word[..index].contains(|&c| {\n            c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u'\n        }) {\n            break;\n    \
    \    }\n\n        if index < word.len() - 1 {\n            if word[index] == word[index\
    \ + 1] {\n                index += 1;\n                vowel_len = index - vowel_start;\n\
    \                vowel_start = index;\n            } else {\n                break;\n\
    \            }\n        } else {\n            vowel_len = index - vowel_start;\n\
    \            vowel_start = index;\n            vowel_end = index - 1;\n      \
    \  }\n\n        if vowel_len < 0 {\n            break;\n        }\n\n        index\
    \ = vowel_end + 1;\n        if index > word.len() - 2 {\n            break;\n\
    \        }\n\n        if word[..index].contains(|&c| {\n            c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u'\n        }) {\n            break;\n\
    \        }\n\n        vowel = word[index..];\n        vowel_index = index - 1;\n\
    \        break;\n    }\n\n    vowel", "    let mut vowels = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut i = 0;\n    vowels.sort_by_key(|&x| word.chars().position(|&y|\
    \ x == y).unwrap());\n    let mut found = 0;\n    while i < word.len() && found\
    \ < 4 {\n        if vowels[found + 1] == word[i] {\n            found += 1;\n\
    \        }\n        i += 1;\n    }\n    found == 4 ? String::from(\"\") : String::from(vowels[found\
    \ - 1] + vowels[found + 1])", "    let mut index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut vowel_to_be_found = \"\".to_string();\n    let mut first_consonant_found\
    \ = false;\n    let mut second_consonant_found = false;\n    \n    // Iterate\
    \ over the string and find all vowels\n    while index < word.len() {\n      \
    \  if word.chars().any(|c| c == b'a' || c == b'e' || c == b'i' || c == b'o' ||\
    \ c == b'u') {\n            vowel_found = true;\n            vowel_to_be_found\
    \ = word.chars().nth(index).unwrap();\n        }\n        if word.chars().any(|c|\
    \ c == b'b' || c == b'c' || c == b'd' || c == b'f' || c == b'g' || c == b'h' ||\
    \ c == b'j' || c == b'k' || c == b'l' || c == b'm' || c == b'n' || c == b'p' ||\
    \ c == b'q' || c == b'r' || c == b's' || c == b't' || c == b'v' || c == b'w' ||\
    \ c == b'x' || c == b'y' || c == b'z') {\n            vowel_found = true;\n  \
    \          vowel_to_be_found = word.chars().nth(index).unwrap();\n        }\n\
    \        // If the first letter is consonant and vowel not already found, add\
    \ the first vowel\n        if word.chars().any(|c| c == b'a' || c == b'e' || c\
    \ == b'i' || c == b'o' || c == b'u') && !first_consonant_found && vowel_found\
    \ {\n            first_consonant_found = true;\n            vowel_to_be_found\
    \ = word.chars().nth(index).unwrap();\n        }\n        // If the second letter\
    \ is consonant and vowel not already found, add the first vowel\n        if word.chars().any(|c|\
    \ c == b'b' || c == b'c' || c == b'd' || c == b'f' || c == b'g' || c == b'h' ||\
    \ c == b'j' || c == b'k' || c == b'l' || c == b'm' || c == b'n' || c == b'p' ||\
    \ c == b'q' || c == b'r' || c == b's' || c == b't' || c == b'v' || c == b'w' ||\
    \ c == b'x' || c == b'y' || c == b'z') && !second_consonant_found && vowel_found\
    \ {\n            second_consonant_found = true;\n            vowel_to_be_found\
    \ = word.chars().nth(index).unwrap();\n        }\n        \n        // Break if\
    \ there are no more vowels\n        if !vowel_found {\n            break;\n  \
    \      }\n        \n        // If the first consonant found is vowel, skip the\
    \ vowel and \n        // increment the index\n        if first_consonant_found\
    \ && vowel", "    \n    let vowels_set = Set::new();\n    \n    for c in word.chars()\
    \ {\n        if c >= 'a' && c <= 'z' {\n            continue;\n        }\n   \
    \     if c >= 'A' && c <= 'Z' {\n            continue;\n        }\n        vowels_set.insert(c);\n\
    \    }\n    \n    let mut first_vowel = vowels_set.iter().next().unwrap();\n \
    \   let mut second_vowel = vowels_set.iter().next().unwrap();\n    \n    if word.len()\
    \ >= 2 {\n        if first_vowel < second_vowel {\n            first_vowel = second_vowel;\n\
    \            second_vowel = vowels_set.iter().next().unwrap();\n        }\n  \
    \  }\n    \n    String::from(&first_vowel)", "    let vowels = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let mut i = word.len();\n    loop {\n        let\
    \ mut j = i;\n        loop {\n            let mut vowel_pos = 0;\n           \
    \ if j == 0 {\n                vowel_pos = 0;\n            }\n            let\
    \ char = word.chars().nth(j).unwrap();\n            if char == 'a' || char ==\
    \ 'e' || char == 'i' || char == 'o' || char == 'u' {\n                return word.chars().nth(vowel_pos\
    \ + 1).unwrap();\n            }\n            vowel_pos += 1;\n            j -=\
    \ 1;\n            if j == 0 {\n                return String::new();\n       \
    \     }\n        }\n        i = j;\n    }", "    let mut vowels = vec![\"A\",\
    \ \"E\", \"I\", \"O\", \"U\"];\n    let vowel_count = word.chars().filter(|c|\
    \ vowels.contains(&c.to_string())).count();\n    let vowel_idx = vowels.iter().position(|c|\
    \ word.chars().contains(&c)).unwrap_or_else(|| 0);\n    let vowel_start = vowel_idx\
    \ + 1;\n    if vowel_start > vowel_count {\n        vowel_start = 0;\n    }\n\
    \    let vowel_end = vowel_idx + 1;\n    if vowel_end > vowel_count {\n      \
    \  vowel_end = vowel_count;\n    }\n    if word.chars().any(|c| vowels[c].is_uppercase())\
    \ {\n        vowel_end += 1;\n    }\n    let vowel = &vowels[vowel_end - vowel_start];\n\
    \    String::from(vowel)", "    let mut vowel_index = String::new();\n\n    let\
    \ mut vowels: Vec<String> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n    for\
    \ vowel in vowels.iter_mut() {\n        if word.ends_with(vowel.to_string()) {\n\
    \            return vowel.to_string();\n        }\n    }\n\n    vowels.sort();\n\
    \n    if word.ends_with('u') {\n        vowel_index.push(\"u\");\n    }\n    if\
    \ word.ends_with('e') {\n        vowel_index.push(\"e\");\n    }\n    if word.ends_with('i')\
    \ {\n        vowel_index.push(\"i\");\n    }\n    if word.ends_with('o') {\n \
    \       vowel_index.push(\"o\");\n    }\n    if word.ends_with('u') {\n      \
    \  vowel_index.push(\"u\");\n    }\n\n    for vowel in vowel_index.iter() {\n\
    \        if word.ends_with(vowel.to_string()) {\n            return vowel.to_string();\n\
    \        }\n    }\n\n    \"\".to_string()", "    fn get_closest_vowel(word: String)\
    \ -> String {\n        let mut vowels = Vec::new();\n        for ch in word.chars().rrev()\
    \ {\n            if ch.is_ascii_uppercase() {\n                vowels.push(ch);\n\
    \            }\n        }\n        let mut left = word.len() - 2;\n        let\
    \ mut right = word.len() - 1;\n        let mut index = vowels.len();\n       \
    \ while index > 0 {\n            if left == -1 {\n                index--;\n \
    \               break;\n            }\n            if right == word.len() - 1\
    \ {\n                index--;\n                break;\n            }\n       \
    \     if word.chars().nth(left).unwrap().is_ascii_uppercase() &&\n           \
    \     word.chars().nth(right).unwrap().is_ascii_uppercase() {\n              \
    \  vowels.pop();\n                left -= 1;\n                right -= 1;\n  \
    \          } else {\n                index--;\n                left -= 1;\n  \
    \              right -= 1;\n            }\n        }\n        vowels.iter().next().unwrap()\n\
    \    }\n    get_closest_vowel(word)", "    // Write your code here\n    let mut\
    \ vowel_str = \"\";\n    let vowel_end = word.chars().rposition(|&c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    if vowel_end == word.len()\
    \ - 1 {\n        for ii in 0..word.len() {\n            if ii < vowel_end {\n\
    \                if word.chars()[ii].is_uppercase() {\n                    vowel_str\
    \ += &word.chars()[ii];\n                }\n            }\n        }\n    }\n\
    \    return vowel_str;", "    fn is_vowel(c: char) -> bool {\n        (c >= 'A'\
    \ && c <= 'Z') || (c >= 'a' && c <= 'z')\n    }\n    let vowels = vec!['A', 'a',\
    \ 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u', 'a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ vowel = String::from(\"\");\n    let mut consonants = word.chars();\n    let\
    \ mut consonants = consonants.filter(|&c| !is_vowel(c));\n    while vowels.len()\
    \ < consonants.len() {\n        let left = consonants.len() - vowels.len();\n\
    \        let right = consonants.len() - vowels.len() - 1;\n        if left >=\
    \ 0 {\n            if vowels[left] == consonants[left] {\n                vowel\
    \ = vowels[left];\n                consonants = consonants[left..right];\n   \
    \         } else {\n                break;\n            }\n        } else {\n\
    \            if vowels[right] == consonants[right] {\n                vowel =\
    \ vowels[right];\n                consonants = consonants[0..left..right];\n \
    \           } else {\n                break;\n            }\n        }\n    }\n\
    \    consonants.collect::<String>()", "    let mut vowels: Vec<&str> = vec![\"\
    \", \"a\", \"e\", \"i\", \"o\", \"u\"];\n    for i in word.rchars().rrev() {\n\
    \        if let Some(&vowel) = vowels.iter().position(|&a| &a == i {\n       \
    \     return vowel;\n        }) {\n            vowels.remove(vowel);\n       \
    \ }\n    }\n    \"\"", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    let mut vowel_indexes = vec![0, 1, 2, 3, 4];\n    let mut vowel_index\
    \ = -1;\n\n    for (index, char) in word.chars().enumerate() {\n        if let\
    \ Some(&vowel) = vowels.iter().find(|&i| i == char) {\n            vowel_indexes.push(index);\n\
    \            vowel_index = vowel;\n        }\n    }\n    let mut previous_vowel_found\
    \ = vowel_indexes.iter().find(|&i| i != vowel_index);\n\n    while vowel_indexes.len()\
    \ > vowel_index {\n        if vowel_indexes.len() < vowel_index {\n          \
    \  let index = vowel_indexes.iter().position(|&i| i == vowel_index).unwrap();\n\
    \            vowel_indexes.push(index);\n        }\n\n        let index = vowel_indexes.iter().position(|&i|\
    \ i == vowel_index).unwrap();\n        let current_vowel_index = vowel_indexes.iter().position(|&i|\
    \ i == index).unwrap();\n        vowel_indexes.remove(current_vowel_index);\n\n\
    \        if vowel_indexes.len() < vowel_index {\n            vowel_index = vowel_indexes.iter().position(|&i|\
    \ i == vowel_index).unwrap();\n        }\n\n        if vowel_indexes.len() ==\
    \ 0 {\n            break;\n        }\n\n        let previous_vowel_index = vowel_indexes.iter().position(|&i|\
    \ i == vowel_index).unwrap();\n        let previous_vowel_found = vowel_indexes.iter().position(|&i|\
    \ i == previous_vowel_index).unwrap();\n\n        if previous_vowel_found != previous_vowel_index\
    \ {\n            vowel_index = vowel_indexes.iter().position(|&i| i == vowel_index).unwrap();\n\
    \        }\n\n        let current_vowel_index = vowel_indexes.iter().position(|&i|\
    \ i == index).unwrap();\n        vowel_indexes.remove(current_vowel_index);\n\
    \    }\n\n    if vowel_indexes.len() > vowel_index {\n        String::from(\"\"\
    )\n    } else {\n        String::from(vowels[vowel_index])\n    }", "    if word.len()\
    \ == 0 {\n        return String::from(\"\");\n    }\n    let mut last_consonant\
    \ = false;\n    let mut current_consonant = false;\n    let mut first_vowel =\
    \ false;\n    let mut vowel_index = 0;\n    let mut vowel_char = String::from(\"\
    u\");\n    let mut current_char = String::from(\"u\");\n    for c in word.chars()\
    \ {\n        current_char = c.to_string();\n        if current_consonant {\n \
    \           if c == String::from(\"z\") {\n                last_consonant = true;\n\
    \            }\n            else if c == String::from(\"Z\") {\n             \
    \   first_vowel = true;\n            }\n            else if c != String::from(\"\
    y\") && (c != String::from(\"Y\")) {\n                if last_consonant {\n  \
    \                  if current_consonant && first_vowel && vowel_index < word.len()\
    \ - 1 {\n                        current_char = String::from(\"\");\n        \
    \                vowel_index += 1;\n                        last_consonant = false;\n\
    \                        vowel_char = String::from(\"\");\n                  \
    \      current_consonant = false;\n                        first_vowel = false;\n\
    \                    }\n                    else {\n                        if\
    \ c != String::from(\"y\") && (c != String::from(\"Y\")) {\n                 \
    \           vowel_char = String::from(\"\");\n                        }\n    \
    \                }\n                }\n            }\n        }\n        current_consonant\
    \ = !current_consonant;\n        if current_char == \"y\" || current_char == \"\
    Y\" {\n            first_vowel = true;\n        }\n        if current_char ==\
    \ \"a\" || current_char == \"A\" {\n            first_vowel = false;\n       \
    \ }\n    }\n    return vowel_char;", "    if word.len() < 3 || word.len() > word.chars().count()\
    \ + 3 {\n        return String::from(\"\");\n    }\n    let mut vowels = vec![String::from(\"\
    a\"), String::from(\"e\"), String::from(\"i\"), String::from(\"o\"), String::from(\"\
    u\")];\n    for letter in word.chars() {\n        if let Some(vowel) = vowels.iter().position(|&vowel|\
    \ vowel == letter) {\n            if vowels.iter().position(|&vowel| vowel ==\
    \ letter + &letter && vowel != vowels.last())\n                .unwrap_or(0) >\
    \ 0\n            {\n                return vowel;\n            }\n        }\n\
    \    }\n    String::from(\"\")", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\"];\n    let mut consonants = vec![\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\"];\n    let mut index = 0;\n    let mut\
    \ len = word.len();\n    while index < len {\n        if word[len - index - 1]\
    \ == consonants.last() {\n            vowels.push(consonants.last());\n      \
    \      index = len - 1;\n        }\n        else {\n            index += 1;\n\
    \        }\n    }\n    vowels.last().to_string()", "    let mut min_dist = 0;\n\
    \    let mut min_index = -1;\n    let mut max_dist = std::cmp::min::<i32>(word.len(),\
    \ 5);\n    let mut max_index = -1;\n    for i in 1..word.len() {\n        if !is_vowel(word[i\
    \ - 2]) && word[i - 2] != word[i] {\n            min_dist = std::cmp::max::<i32>(min_dist,i);\n\
    \            min_index = i - 1;\n        }\n        if !is_vowel(word[i - 1])\
    \ && word[i - 1] != word[i] {\n            max_dist = std::cmp::max::<i32>(max_dist,i);\n\
    \            max_index = i;\n        }\n    }\n    let mut min_index = max_index;\n\
    \    if min_dist > max_dist {\n        min_index = min_index;\n    }\n    if min_index\
    \ >= 0 {\n        return String::from(word[min_index]);\n    }\n    \"\"", " \
    \   word.chars().enumerate().filter_map(|(&i, c)| {\n        if c.to_ascii_lowercase().contains(\"\
    a\"..\"e\") && (i >= word.len() - 2 || c != word.chars()[i + 1]) {\n         \
    \   Some(c.to_ascii_lowercase())\n        } else {\n            None\n       \
    \ }\n    }).min()\n    .unwrap_or_else(|| \"\")", "    let mut vowels = \"AEIOUaeiou\"\
    .to_string();\n    vowels.splice(vowels.len() - vowels.chars().count(), vowels.len());\n\
    \n    let mut index = 0;\n    let mut prev = 0;\n    while index < word.len()\
    \ {\n        if word.chars().nth(index).unwrap() == vowels.chars().nth(prev).unwrap()\
    \ {\n            prev += 1;\n        }\n        index += 1;\n    }\n\n    if prev\
    \ >= vowels.len() {\n        return String::from(\"\");\n    }\n    word.chars().nth(prev).unwrap()",
  "    let mut vowels: Vec<&str> = vec![];\n    let mut word_chars: Vec<&str> = word.chars().collect();\n\
    \    let mut cur_char: usize = 0;\n    while cur_char < word_chars.len() {\n \
    \       let mut has_vowel = false;\n        let mut has_consonant = false;\n \
    \       for n in 1..=26 {\n            if word_chars[cur_char + n - 1] == 'a'\
    \ || word_chars[cur_char + n - 1] == 'e' || word_chars[cur_char + n - 1] == 'i'\
    \ || word_chars[cur_char + n - 1] == 'o' || word_chars[cur_char + n - 1] == 'u'\
    \ {\n                has_vowel = true;\n                break;\n            }\n\
    \        }\n        for n in 1..=26 {\n            if word_chars[cur_char + n]\
    \ == 'a' || word_chars[cur_char + n] == 'e' || word_chars[cur_char + n] == 'i'\
    \ || word_chars[cur_char + n] == 'o' || word_chars[cur_char + n] == 'u' {\n  \
    \              has_consonant = true;\n                break;\n            }\n\
    \        }\n        if has_consonant && has_vowel {\n            vowels.push(&word_chars[cur_char]);\n\
    \        }\n        cur_char += 1;\n    }\n    if vowels.len() == 0 {\n      \
    \  return String::from(\"\");\n    }\n    let mut vowel = String::from(\"\");\n\
    \    for &vowel_str in vowels {\n        if vowel_str.len() < word.len() {\n \
    \           if !vowel.empty() {\n                return vowel;\n            }\n\
    \            vowel = vowel_str;\n        }\n    }\n    vowel", "    word.chars()\n\
    \        .chain(word.chars().skip_while(|&c| *c != 'a' && *c != 'A'))\n      \
    \  .chain(word.chars().skip_while(|&c| *c != 'e' && *c != 'E'))\n        .chain(word.chars().skip_while(|&c|\
    \ *c != 'i' && *c != 'I'))\n        .chain(word.chars().skip_while(|&c| *c !=\
    \ 'o' && *c != 'O'))\n        .chain(word.chars().skip_while(|&c| *c != 'u' &&\
    \ *c != 'U'))\n        .chain(word.chars().skip_while(|&c| *c != 'y' && *c !=\
    \ 'Y'))\n        .chain(word.chars().skip_while(|&c| *c != 'i'))\n        .collect::<Vec<char>>()\n\
    \        .iter()\n        .cloned()\n        .enumerate()\n        .filter_map(|(_,\
    \ i)| {\n            if i.0 == 0 || *i.0 != 'a' || *i.0 != 'A' {\n           \
    \     None\n            } else {\n                Some(\n                    i.0\
    \ as usize\n                )\n            }\n        })\n        .filter(|&_|\
    \ *_ != 0)\n        .map(|i|\n            if *i.0 > i.1 || *i.0 < i.1 {\n    \
    \            i.0 as usize\n            } else {\n                i.1 as usize\n\
    \            })\n        .min().unwrap_or(0)\n        .to_string()", "    word.split_ascii_lowercase().fold(\"\
    \", |memo, letter| {\n        memo\n            .iter()\n            .fold(String::from(\"\
    \"), |memo, next| {\n                if let Some(next) = letter.get_next_letter()\
    \ {\n                    if memo.len() < next.len() {\n                      \
    \  let mut vowels = \"aeiou\".chars().skip(1).collect::<String>();\n         \
    \               if memo.contains(vowels.next()) {\n                          \
    \  memo = memo.clone() + next.to_uppercase();\n                        }\n   \
    \                 }\n                }\n                memo\n            })\n\
    \    })", "    // write your code here\n    let mut consonants: Vec<&str> = word.chars().filter_map(|c|\
    \ c.is_alphabetic()).collect();\n    consonants.push(\"\");\n    consonants.sort_by(|a,\
    \ b| a.cmp(b));\n    consonants.last_mut().unwrap().to_string()", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for &vowel in vowels.iter()\
    \ {\n        let pos = word.rfind(vowel);\n        if pos == word.len() - 1 ||\
    \ pos < 0 {\n            continue;\n        }\n        let vowel_start = word.rfind(\"\
    a\", pos);\n        let vowel_end = word.rfind(\"e\", pos);\n        if vowel_start\
    \ == -1 || vowel_end == -1 {\n            continue;\n        }\n        if word[vowel_end]\
    \ == vowel {\n            return word.into_string_lossy();\n        }\n      \
    \  if word[vowel_start] != vowel {\n            return word.into_string_lossy();\n\
    \        }\n    }\n    word.to_owned()", "    let vowels: Vec<&str> = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n\n    word.chars().fold(\"\", (|s| {\n    \
    \    let idx = vowels.iter().position(|&x| x.to_lowercase() == s);\n        idx\
    \ if idx >= 0\n    }))", "    use std::cmp::Ordering;\n\n    let mut result: String\
    \ = String::new();\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    if word.len() == 0 {\n        return result;\n    }\n    let mut consonants:\
    \ Vec<&str> = word\n        .chars()\n        .filter(|c| c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u')\n        .collect();\n    consonants.sort();\n\
    \    for consonant in consonants {\n        let mut current_consonant_index: usize\
    \ = 0;\n        let mut current_consonant_vowel: Vec<&str> = vowels.clone();\n\
    \        let mut current_vowel_index: usize = 0;\n        for vowel in &vowels\
    \ {\n            if vowel.len() > current_consonant_vowel.len() {\n          \
    \      continue;\n            }\n            if !current_consonant_vowel.contains(&vowel)\
    \ {\n                break;\n            }\n            current_vowel_index +=\
    \ 1;\n        }\n        if current_vowel_index < current_consonant_index {\n\
    \            continue;\n        }\n        while current_vowel_index < current_consonant_index\
    \ {\n            current_consonant_index += 1;\n            if current_consonant_index\
    \ > consonants.len() - 1 {\n                break;\n            }\n          \
    \  current_consonant_vowel = consonants[current_consonant_index..].iter().cloned().collect();\n\
    \            for vowel in &vowels {\n                if vowel.len() > current_consonant_vowel.len()\
    \ {\n                    continue;\n                }\n                if !current_consonant_vowel.contains(&vowel)\
    \ {\n                    break;\n                }\n            }\n          \
    \  current_vowel_index += 1;\n        }\n        if current_vowel_index > result.len()\
    \ {\n            result = consonants[current_consonant_index..];\n        }\n\
    \    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    for vowel in vowels.iter() {\n        let mut index = word.len();\n\
    \        let mut c = vowel;\n        let mut found = false;\n        while !found\
    \ && index > 0 {\n            if word[index - 1] == c {\n                found\
    \ = true;\n                index -= 1;\n            } else {\n               \
    \ index -= 1;\n            }\n        }\n        if found {\n            return\
    \ word.chars().skip(index).take(1).collect();\n        }\n    }\n    \"\".to_string()",
  "    let mut vowel_index = word.len() - 1;\n\n    while vowel_index >= 0 && vowel_index\
    \ > 0 && word.chars().skip(vowel_index).find(|c| c == char::from(char::from('a'))))\
    \ {\n        vowel_index -= 1;\n    }\n    while vowel_index < 0 && vowel_index\
    \ + 1 < word.len() && word.chars().skip(vowel_index + 1).find(|c| c == char::from(char::from('a'))))\
    \ {\n        vowel_index += 1;\n    }\n\n    if vowel_index < 0 {\n        return\
    \ String::from(\"\");\n    }\n    let mut vowel_pos = word.chars().skip(vowel_index).find(|c|\
    \ c == char::from(char::from('a')));\n    let mut vowel_length = vowel_pos - vowel_index;\n\
    \n    if vowel_length <= 1 {\n        return String::from(\"\");\n    }\n    let\
    \ mut vowel = String::from(\"\");\n    if word.chars().skip(vowel_index + vowel_length).find(|c|\
    \ c == char::from(char::from('u'))) != None {\n        vowel.clear();\n      \
    \  vowel.push(char::from(char::from('u')));\n    }\n    if word.chars().skip(vowel_index\
    \ - vowel_length).find(|c| c == char::from(char::from('i'))) != None {\n     \
    \   vowel.clear();\n        vowel.push(char::from(char::from('i')));\n    }\n\
    \    if vowel.len() != 0 {\n        return vowel;\n    }\n    let mut consonant_index\
    \ = vowel_index + vowel_length - 1;\n    while consonant_index >= 0 && consonant_index\
    \ < word.len() && word.chars().skip(consonant_index + 1).find(|c| c == char::from(char::from('n')))\
    \ != None {\n        consonant_index += 1;\n    }\n    if consonant_index >= word.len()\
    \ || consonant_index < 0 {\n        return String::from(\"\");\n    }\n    let\
    \ mut consonant_pos = word.chars().skip(consonant_index).find(|c| c == char::from(char::from('n')));\n\
    \    let mut consonant_length = consonant_pos - consonant_index;\n    if consonant_length\
    \ <= 1 {\n        return String::from(\"\");\n    }\n    if word.chars().skip(consonant_index\
    \ + consonant_length).find(|c| c == char::from(char::from('e'))) != None {\n \
    \       vowel.clear();\n        vowel.push(char::from(char::from('e')));\n   \
    \ }\n    if word.chars().skip(consonant_index", "    let mut result = String::new();\n\
    \    let mut counter = 0;\n\n    for i in word.chars() {\n        result += '\\\
    0';\n        counter += 1;\n\n        if i.is_vowel() {\n            result +=\
    \ i.to_lowercase();\n            continue;\n        }\n\n        let mut left_index\
    \ = 0;\n        let mut right_index = word.len() - 1;\n\n        loop {\n    \
    \        let mut index = left_index;\n\n            while index < right_index\
    \ {\n                if word.chars().skip_while(|c| c.is_vowel()).next().unwrap().is_vowel()\
    \ {\n                    break;\n                }\n\n                index +=\
    \ 1;\n            }\n\n            left_index = index;\n\n            index =\
    \ right_index;\n\n            while index > left_index {\n                if word.chars().skip_while(|c|\
    \ c.is_vowel()).next().unwrap().is_vowel() {\n                    break;\n   \
    \             }\n\n                index -= 1;\n            }\n\n            right_index\
    \ = index;\n        }\n\n        let left_vowel = if counter > 0 {\n         \
    \   let mut index = left_index - 1;\n\n            while index >= 0 {\n      \
    \          if word.chars().skip_while(|c| c.is_vowel()).next().unwrap().is_vowel()\
    \ {\n                    break;\n                }\n\n                index -=\
    \ 1;\n            }\n\n            word.chars().skip_while(|c| c.is_vowel()).next().unwrap().to_lowercase()\n\
    \        } else {\n            String::from(\"\")\n        };\n\n        let right_vowel\
    \ = if counter > 0 {\n            let mut index = right_index + 1;\n\n       \
    \     while index < word.len() {\n                if word.chars().skip_while(|c|\
    \ c.is_vowel()).next().unwrap().is_vowel() {\n                    break;\n   \
    \             }\n\n                index += 1;\n            }\n\n            word.chars().skip_while(|c|\
    \ c.is_vowel()).next().unwrap().to_lowercase()\n        } else {\n           \
    \ String::from(\"\")\n        };\n\n        if left_vowel == right_vowel {\n \
    \           if left_vowel != String::from(\"\") {\n                result += '\\\
    0';\n            }\n\n            result += '\\0';\n        } else {\n       \
    \     if left_vowel != String::from(\"\") {\n                result += '\\0';\n\
    \            }\n\n            if right_vowel != String::from(\"\") {\n       \
    \         result += '\\0';\n            }\n\n            result += left_vowel.chars().next().unwrap();\n\
    \            result += right_vowel.chars().next().unwrap();\n        }\n    }\n\
    \n    result", "    if word.is_empty() {\n        String::from(\"\")\n    } else\
    \ {\n        let mut vowel = String::from(\"\");\n        let mut index = word.len()\
    \ - 1;\n        while index > 0 && vowel.contains(\"a\") {\n            index\
    \ -= 1;\n        }\n        while index < word.len() && vowel.contains(\"e\")\
    \ {\n            index += 1;\n        }\n        while index > 0 && vowel.contains(\"\
    o\") {\n            index -= 1;\n        }\n        while index < word.len() &&\
    \ vowel.contains(\"u\") {\n            index += 1;\n        }\n        vowel =\
    \ word.chars().nth(index).unwrap().to_string();\n    }\n    vowel", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.remove(&vowels.iter().position(|&x|\
    \ word.chars().next().unwrap().is_uppercase()).unwrap());\n    vowels.remove(&vowels.iter().position(|&x|\
    \ word.chars().next().unwrap().is_lowercase()).unwrap());\n    word.chars().take_while(|&c|\
    \ vowels.iter().any(|&x|\n        c == x.to_lowercase() || c == x.to_uppercase()\n\
    \    )).last().unwrap()", "    debugln!(\"word is: {}\", word);\n    let mut res\
    \ = String::new();\n    let mut current = word;\n\n    while current.len() > 0\
    \ {\n        if current.starts_with(vowels) {\n            res.clear();\n    \
    \        break;\n        }\n        let current_slice = current.as_slice();\n\
    \        let mut current_len = current_slice.len();\n        let mut found = false;\n\
    \        for i in 0..current_len - 1 {\n            if current_slice[i] == vowels[0]\
    \ {\n                // found the first vowel\n                if current_slice[i\
    \ + 1] == vowels[2] {\n                    found = true;\n                }\n\
    \            }\n        }\n        if found {\n            break;\n        }\n\
    \        res.push_str(&current);\n        current = String::from(\"\");\n    }\n\
    \    debugln!(\"res: {}\", res);\n    res", "    let vowels = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut res = String::from(\"\");\n    let len =\
    \ word.len();\n    if word.chars().any(|c| !vowels.contains(c)) {\n        return\
    \ res;\n    }\n    let (first, last) = word.chars().windows(2).next();\n    if\
    \ let Some(firstc) = first {\n        if let Some(lastc) = last {\n          \
    \  if let Some(firstv) = firstc {\n                if let Some(lastv) = lastc\
    \ {\n                    if firstv > lastv {\n                        let mut\
    \ i = len;\n                        while i > 0u && vowels.contains(word.chars()[i..i].to_string()\
    \ + &lastv) {\n                            i -= 1;\n                        }\n\
    \                        res.push_str(&word.chars()[0..i].to_string() + &firstv);\n\
    \                    } else {\n                        let mut i = len;\n    \
    \                    while i > 0u && vowels.contains(word.chars()[i..i].to_string()\
    \ + &firstv) {\n                            i -= 1;\n                        }\n\
    \                        res.push_str(&word.chars()[0..i].to_string() + &lastv);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   res", "    let mut vowel = String::from(\"\");\n    let mut consonant = String::from(\"\
    \");\n    let mut s = String::from(\"\");\n    word.chars().for_each(|c| {\n \
    \       if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n      \
    \      vowel = String::from(*c.to_string() + \"o\");\n        } else if c == 'b'\
    \ || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c\
    \ == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r'\
    \ || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c\
    \ == 'z' {\n            consonant = String::from(*c.to_string() + \"c\");\n  \
    \      } else {\n            s = String::from(*c.to_string());\n        }\n  \
    \  });\n    vowel.chars().for_each(|c| {\n        if c == 'o' {\n            return\
    \ String::from(\"\");\n        } else if c == 'c' {\n            return String::from(\"\
    \");\n        }\n    });\n    consonant.chars().for_each(|c| {\n        if c ==\
    \ 'c' {\n            return String::from(\"\");\n        }\n    });\n    s + vowel",
  "    if word.len() == 0 {\n        return String::from(\"\");\n    }\n    let mut\
    \ vowels = vec![\"A\",\"E\",\"I\",\"O\",\"U\"];\n    let mut pos = word.len();\n\
    \    let mut vowels_start = word.clone();\n    let mut vowels_end = word.clone();\n\
    \    while pos > 0 {\n        if vowels_start.chars().all(|c| c == vowels[pos..].first())\
    \ {\n            pos = pos - 1;\n            vowels_start = word.clone();\n  \
    \      } else {\n            pos = pos - 1;\n            vowels_end = word.clone();\n\
    \        }\n    }\n    let mut vowels_len = vowels_end.len() - vowels_start.len();\n\
    \    while vowels_len > 0 {\n        let mut index = vowels.len();\n        let\
    \ mut found = false;\n        while !found && index < vowels.len() {\n       \
    \     if vowels[index] == vowels_end.chars().last() {\n                found =\
    \ true;\n            } else {\n                index = index + 1;\n          \
    \  }\n        }\n        if index != vowels.len() {\n            vowels = vowels.remove(index);\n\
    \        }\n        vowels_len = vowels_len - 1;\n    }\n    if vowels_len < 2\
    \ {\n        return String::from(\"\");\n    }\n    let mut vowels_start = vowels.clone();\n\
    \    let mut vowels_end = vowels.clone();\n    while vowels_start.len() > 1 {\n\
    \        let mut index = vowels.len();\n        let mut found = false;\n     \
    \   while !found && index < vowels.len() {\n            if vowels_start.contains(&vowels[index])\
    \ {\n                found = true;\n            } else {\n                index\
    \ = index + 1;\n            }\n        }\n        if index != vowels.len() {\n\
    \            vowels_start = vowels.remove(index);\n        }\n    }\n    return\
    \ String::from(vowels_start.to_owned());", "    let mut vowels = \"aeiouAEIOU\"\
    .chars().skip(1).collect::<Vec<_>>();\n    if word.chars().last().unwrap() ==\
    \ 'Z' {\n        vowels.reverse();\n    }\n    let mut idx = 0;\n    let mut found\
    \ = false;\n    for vowel in vowels.iter().rev() {\n        if let Some(idx) =\
    \ get_index(word, idx, vowel) {\n            found = true;\n            break;\n\
    \        }\n        idx += 1;\n    }\n    if found {\n        return word;\n \
    \   }\n    return String::from(\"\");", "    let mut vowels = vec!['u', 'a', 'o',\
    \ 'i', 'e'];\n    let mut prev_vowel = String::from(\"\");\n    let mut consonants\
    \ = String::from(\"\");\n    for (i, &c) in word.chars().enumerate().rev() {\n\
    \        if !vowels.contains(&c) {\n            consonants = c;\n            if\
    \ i == word.chars().count() - 1 {\n                vowels = vec![];\n        \
    \    } else {\n                prev_vowel = consonants.clone();\n            }\n\
    \        }\n    }\n    vowels\n        .iter()\n        .next()\n        .expect(\"\
    Should have found at least one vowel, got nothing\")\n        .to_string()", " \
    \   let mut vowel = String::from(\"\");\n\n    let mut vowel_iterator = word.chars();\n\
    \    let mut consonant_iterator = vowel_iterator.skip_while(|c| !c.is_ascii_letter());\n\
    \    let mut consonant_iterator = consonant_iterator.skip_while(|c| !c.is_ascii_letter());\n\
    \    let mut consonant_iterator = consonant_iterator.skip_while(|c| !c.is_ascii_letter());\n\
    \n    while let Some(c1) = consonant_iterator.next() {\n        if let Some(c2)\
    \ = consonant_iterator.next() {\n            if let Some(c3) = consonant_iterator.next()\
    \ {\n                if let Some(c4) = consonant_iterator.next() {\n         \
    \           if let Some(c5) = consonant_iterator.next() {\n                  \
    \      if let Some(c6) = consonant_iterator.next() {\n                       \
    \     vowel = word.chars().skip_while( |c| c.is_ascii_letter()).take(1).unwrap();\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    vowel", "    let vowels = \"aeiouAEIOU\".chars();\n\
    \    let mut vowels_set = HashSet::new();\n    for (i, ch) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&ch) {\n            vowels_set.insert(ch);\n \
    \       } else {\n            if i < word.len() - 1 {\n                let ch1\
    \ = word[i - 1];\n                let ch2 = word[i + 1];\n                if ch1\
    \ != ch2 {\n                    if vowels_set.contains(&ch1) && vowels_set.contains(&ch2)\
    \ {\n                        let mut min_distance = std::i32::MAX;\n         \
    \               let mut min_distance = std::i32::MAX;\n                      \
    \  for vowel in vowels.iter() {\n                            let distance = ch1.distance(vowel).unwrap();\n\
    \                            if distance < min_distance {\n                  \
    \              min_distance = distance;\n                                min_vowel\
    \ = vowel;\n                            }\n                        }\n       \
    \                 if min_distance == 0 {\n                            min_vowel\
    \ = ch1;\n                        } else {\n                            min_vowel\
    \ = min_vowel.clone();\n                        }\n                        vowels_set.insert(min_vowel);\n\
    \                    } else {\n                        return String::new();\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   let mut min_vowel = String::new();\n    for vowel in vowels.iter() {\n   \
    \     let distance = word.distance(vowel).unwrap();\n        if distance < min_vowel.len()\
    \ {\n            min_vowel = String::new();\n        }\n        if distance ==\
    \ 0 {\n            min_vowel = vowel.clone();\n        }\n    }\n    min_vowel",
  "    if let Some(pos) = word.rfind('a') {\n        word[..pos].to_string()\n   \
    \ } else if let Some(pos) = word.rfind('e') {\n        word[..pos].to_string()\n\
    \    } else if let Some(pos) = word.rfind('i') {\n        word[..pos].to_string()\n\
    \    } else if let Some(pos) = word.rfind('o') {\n        word[..pos].to_string()\n\
    \    } else if let Some(pos) = word.rfind('u') {\n        word[..pos].to_string()\n\
    \    } else {\n        String::from(\"\")\n    }", "    let mut vowels = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort_by_key(|&x| word.chars().position(|&y|\
    \ y == x).unwrap());\n    let vowel = vowels.iter().next().unwrap();\n    String::from(vowel)",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for vowel in\
    \ vowels.iter() {\n        let mut word_len = word.len();\n        let mut last_consonant_pos\
    \ = word_len-1;\n        let mut last_consonant = word[0];\n        let mut vowel_pos\
    \ = 0;\n        \n        while vowel_pos < word_len && vowels[vowel_pos] == last_consonant\
    \ {\n            last_consonant_pos--;\n            vowel_pos++;\n        }\n\
    \        \n        let mut last_vowel_pos = word_len-1;\n        let mut last_vowel\
    \ = word[word_len-1];\n        \n        while vowel_pos < word_len && vowels[vowel_pos]\
    \ == last_vowel {\n            last_vowel_pos--;\n            vowel_pos++;\n \
    \       }\n        \n        let mut distance = last_consonant_pos + 1;\n    \
    \    if last_vowel_pos < vowel_pos {\n            distance = last_vowel_pos +\
    \ 1;\n        }\n        \n        if distance < word_len {\n            return\
    \ word.clone();\n        }\n    }\n    return word.clone();", "    let vowels\
    \ = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let mut cur_pos\
    \ = word.len();\n    let mut vowel_index = String::new();\n    let mut consonant_index\
    \ = String::new();\n    loop {\n        let mut cons_pos = 0;\n        let mut\
    \ vowel_pos = 0;\n        \n        while cons_pos < word.len() {\n          \
    \  let mut cur_ch = word[cons_pos];\n            \n            if cons_pos ==\
    \ 0 {\n                if cur_ch in consonants {\n                    cons_pos++;\n\
    \                }\n            } else {\n                if cur_ch in vowels\
    \ {\n                    vowel_index.push_str(cur_ch);\n                    vowel_pos++;\n\
    \                }\n            }\n            \n            cons_pos++;\n   \
    \     }\n        \n        if vowel_pos == 0 || cons_pos == 0 {\n            break;\n\
    \        }\n        \n        let mut cons_len = word.len();\n        let mut\
    \ cons_index = String::new();\n        let mut cons_str_len = 0;\n        \n \
    \       while vowel_index.len() > 0 && cons_pos < word.len() {\n            let\
    \ mut cur_ch = word[cons_pos];\n            \n            if vowel_index.len()\
    \ > 0 && cur_ch == vowel_index[0] {\n                cons_str_len += 1;\n    \
    \            cons_index.push_str(vowel_index.clone());\n                cons_pos\
    \ += 1;\n            } else if cons_pos == 0 {\n                if cur_ch in consonants\
    \ {\n                    cons_pos++;\n                }\n            } else {\n\
    \                if cur_ch in vowels {\n                    vowel_index.push_str(cur_ch);\n\
    \                    vowel_pos++;\n                }\n            }\n        \
    \    \n            cons_pos++;\n        }\n        \n        if cons_str_len <\
    \ word.len() {\n            cur_pos += cons_str_len;\n        } else {\n     \
    \       break;\n        }\n        \n        cons_index = cons_index.to_lowercase();\n\
    \        consonant_index = consonant_index.to_lowercase();\n    }\n    \n    if\
    \ cur_pos == word.len() {\n        String::from(\"\")\n    } else {\n        consonant_index\n\
    \    }", "    let mut vowels = vec![\"A\",\"E\",\"I\",\"O\",\"U\"];\n    let mut\
    \ vowel_counter = 1;\n    let mut vowel_start = word.len() - 1;\n    while vowel_start\
    \ > 0 && vowel_start < word.len() - 1 {\n        if word.chars().nth(vowel_start).unwrap().unwrap()\
    \ == vowels[0] {\n            vowel_start = vowel_start - 1;\n        } else {\n\
    \            vowel_start = vowel_start + vowel_counter;\n            vowel_counter\
    \ += 1;\n        }\n        if word.chars().nth(vowel_start).unwrap().unwrap()\
    \ == vowels[4] {\n            vowel_start = vowel_start - 1;\n        } else {\n\
    \            vowel_start = vowel_start + vowel_counter;\n            vowel_counter\
    \ += 1;\n        }\n    }\n    if word.chars().nth(vowel_start).unwrap().unwrap()\
    \ == vowels[0] {\n        String::from(\"\")\n    } else {\n        String::from(vowels[vowel_start\
    \ + vowel_counter - 1])\n    }", "    word.chars().enumerate().filter_map(|(i,\
    \ c)| {\n        if c.is_uppercase() {\n            if c.chars().next().unwrap()\
    \ == 'U'\n                || c.chars().next().unwrap() == 'I'\n              \
    \  || c.chars().next().unwrap() == 'O'\n                || c.chars().next().unwrap()\
    \ == 'A'\n            {\n                Some(i)\n            } else {\n     \
    \           None\n            }\n        } else {\n            None\n        }\n\
    \    }).next()\n        .expect(\"No vowel found!\")\n        .to_string()", '    //
    your solution here', "    let mut consonants = vec![\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let mut vowels = vec![\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n\n    for i\
    \ in consonants.iter() {\n        if word.ends_with(i) {\n            consonants.remove(&i);\n\
    \        }\n    }\n\n    for i in vowels.iter() {\n        if word.ends_with(i)\
    \ {\n            vowels.remove(&i);\n        }\n    }\n\n    if consonants.len()\
    \ > vowels.len() {\n        let i = vowels.iter().cloned().next().unwrap();\n\
    \        return word.clone().replace((word.len() - i).to_string(), i.to_string());\n\
    \    } else {\n        let i = consonants.iter().cloned().next().unwrap();\n \
    \       return word.clone().replace((word.len() - i).to_string(), i.to_string());\n\
    \    }", "    word.chars().enumerate().filter(|&(i,_)| word.chars().skip(i + 1).any(|&(_,\
    \ w)| w == 'a' || w == 'e' || w == 'i' || w == 'o' || w == 'u'))\n        .next()\n\
    \        .expect(\"no vowel found\")\n        .to_string()", "    let mut index\
    \ = word.len() - 1;\n    let mut min: usize = (word[0] as usize + word[1] as usize)\
    \ / 2;\n    loop {\n        if word.len() > 2 && (word[0] as usize + word[1] as\
    \ usize) % 2 == 0 {\n            if word[min] as usize + word[min+1] as usize\
    \ > 0 {\n                min = min + 1;\n            } else {\n              \
    \  index = min;\n            }\n        } else {\n            if word[min] as\
    \ usize > 0 {\n                min = min + 1;\n            } else {\n        \
    \        index = min;\n            }\n        }\n        if index == word.len()\
    \ - 1 {\n            return String::new();\n        }\n    }", "    use std::collections::HashMap;\n\
    \    use std::cmp::Ordering::{Equal, Greater};\n    let mut vowels: HashMap<u8,\
    \ usize> = HashMap::new();\n    vowels.insert(0x55u, 0);\n    vowels.insert(0x5Au,\
    \ 1);\n    vowels.insert(0xA0u, 2);\n    vowels.insert(0xA1u, 3);\n    vowels.insert(0xA2u,\
    \ 4);\n    vowels.insert(0xA3u, 5);\n    vowels.insert(0xA4u, 6);\n    vowels.insert(0xA5u,\
    \ 7);\n    vowels.insert(0xA6u, 8);\n    vowels.insert(0xA7u, 9);\n    vowels.insert(0xA8u,\
    \ 10);\n    vowels.insert(0xA9u, 11);\n    vowels.insert(0xAAu, 12);\n    vowels.insert(0xABu,\
    \ 13);\n    vowels.insert(0xACu, 14);\n    vowels.insert(0xADu, 15);\n    vowels.insert(0xAEu,\
    \ 16);\n    vowels.insert(0xAFu, 17);\n    vowels.insert(0xBAu, 18);\n    vowels.insert(0xBAu,\
    \ 19);\n    vowels.insert(0xBBu, 20);\n    vowels.insert(0xBCu, 21);\n    vowels.insert(0xBDu,\
    \ 22);\n    vowels.insert(0xBEu, 23);\n    vowels.insert(0xBFu, 24);\n    vowels.insert(0xC0u,\
    \ 25);\n    vowels.insert(0xC1u, 26);\n    vowels.insert(0xC2u, 27);\n    vowels.insert(0xC3u,\
    \ 28);\n    vowels.insert(0xC4u, 29);\n    vowels.insert(0xC5u, 30);\n    vowels.insert(0xC6u,\
    \ 31);\n    vowels.insert(0xC7u, 32);\n    vowels.insert(0xC8u, 33);\n    vowels.insert(0xC9u,\
    \ 34);\n    vowels.insert(0xCAu, 35);\n    vowels.insert(0xCBu, 36);\n    vowels.insert(0xCCu,\
    \ 37);\n    vowels.insert(0xCDu, 38);\n    vowels.insert(0xCEu, 39);\n    vowels.insert(0xCFu,\
    \ 40);\n    vowels.insert(0xD0u, 41);\n    vowels.insert(0xD1u, 42);\n    vowels.insert(0xD2u,\
    \ 43);\n    vowels.insert(0xD3u, 44);\n    vowels.insert(0xD4u, 45);\n    vowels.insert(0xD5u,\
    \ 46);\n    vowels.insert(0x", "    let mut vowels: Vec<&str> = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n    let mut consonants:\
    \ Vec<&str> = vec![\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n\n    let mut closest_vowel: Option<&str> = None;\n    for vowel\
    \ in &vowels {\n        if word.contains(&vowel) {\n            closest_vowel\
    \ = Some(vowel);\n            break;\n        }\n    }\n\n    let mut closest_consonant:\
    \ Option<&str> = None;\n    for consonant in &consonants {\n        if word.contains(&consonant)\
    \ {\n            closest_consonant = Some(consonant);\n            break;\n  \
    \      }\n    }\n\n    closest_vowel.as_mut().map(String::from).unwrap_or(\"\"\
    ) + closest_consonant.as_mut().map(String::from).unwrap_or(\"\")", "    if word.len()\
    \ <= 1 {\n        return String::from(\"\");\n    }\n    let mut vowels_end =\
    \ word.chars().filter(|c| c.is_uppercase());\n    let mut vowels_start = vowels_end.rev().take(word.len()\
    \ - 2);\n    let mut vowels_middle = word.chars().filter(|c| !c.is_uppercase());\n\
    \    vowels_end.extend(vowels_middle.cloned());\n    vowels_start.extend(vowels_middle.cloned());\n\
    \    vowels_middle.extend(vowels_end.cloned());\n    if vowels_start.contains(&'a'..=&'z')\
    \ {\n        vowels_start = vowels_start.iter().filter(|c| !c.is_uppercase());\n\
    \    }\n    if vowels_end.contains(&'a'..=&'z') {\n        vowels_end = vowels_end.iter().filter(|c|\
    \ !c.is_uppercase());\n    }\n    if vowels_start.contains(&'a'..=&'z') {\n  \
    \      vowels_middle = vowels_middle.iter().filter(|c| !c.is_uppercase());\n \
    \   }\n    if vowels_end.contains(&'a'..=&'z') {\n        vowels_middle = vowels_middle.iter().filter(|c|\
    \ !c.is_uppercase());\n    }\n    let mut vowels_vec: [&'static; 5] = [&'a'.to_string(),\
    \ &'e'.to_string(), &'i'.to_string(), &'o'.to_string(), &'u'.to_string()];\n \
    \   vowels_vec.extend(vowels_start.clone());\n    vowels_vec.extend(vowels_middle.clone());\n\
    \    vowels_vec.extend(vowels_end.clone());\n    vowels_vec\n        .iter()\n\
    \        .cloned()\n        .filter(|&c| vowels_vec.iter().all(|&v| v == c))\n\
    \        .cloned()\n        .collect()", "    match word.len() {\n        0 =>\
    \ String::from(\"\"),\n        _ => find_vowel_in_word(word),\n    }", "    let\
    \ mut vowel_count = word.chars().map(|c| {\n        if c.is_uppercase() {\n  \
    \          vowel_count += 1;\n        }\n        vowel_count += 0;\n        vowel_count\n\
    \    }).collect();\n    vowel_count.sort();\n    let mut consonant_index = word.length();\n\
    \    let mut consonant_count = word.chars().filter(|c| !c.is_uppercase()).count();\n\
    \    consonant_count.sort_unstable();\n    if consonant_count.len() > vowel_count.len()\
    \ {\n        consonant_index -= consonant_count.len() - vowel_count.len();\n \
    \   }\n    let mut closest_index = consonant_index;\n    while closest_index >\
    \ 0 {\n        if vowel_count.len() < consonant_count {\n            closest_index\
    \ -= consonant_count.len();\n        } else {\n            let mut min_dist =\
    \ std::cmp::max::<u16>(consonant_count, vowel_count.len());\n            let mut\
    \ min_vowel = String::from(\"\");\n            for (vowel, index) in vowel_count.iter().zip(consonant_index.iter())\
    \ {\n                if index > vowel {\n                    break;\n        \
    \        }\n                let distance = std::cmp::max::<u16>(index, vowel -\
    \ min_dist as u16);\n                if distance < min_dist {\n              \
    \      min_dist = distance;\n                    min_vowel = vowel;\n        \
    \        }\n            }\n            return min_vowel;\n        }\n    }\n \
    \   String::from(\"\")", "    if word.is_empty() {\n        return String::from(\"\
    \");\n    }\n\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut consonants = vec![\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let mut index = word.len() - 1;\n    let mut res\
    \ = String::from(\"\");\n\n    while index >= 0 {\n        if vowels.contains(&word[index])\
    \ {\n            res.push_str(&vowels[vowels.iter().position(|&x| x == word[index]).unwrap()]);\n\
    \            vowels.remove(&word[index]);\n        }\n\n        if word[index]\
    \ == consonants[0] {\n            consonants.remove(&word[index]);\n         \
    \   vowels.remove(&vowels[0]);\n            index -= 1;\n        }\n\n       \
    \ if word[index] == consonants[1] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[1]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[2] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[2]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[3] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[3]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[4] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[4]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[5] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[5]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[6] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[6]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[7] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[7]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[8] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[8]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[9] {\n            consonants.remove(&word[index]);\n\
    \            vowels.remove(&vowels[9]);\n            index -= 1;\n        }\n\n\
    \        if word[index] == consonants[10] {\n            consonants.remove(",
  "    let mut vowels_found = Vec::new();\n\n    for i in 0..word.len() {\n      \
    \  let start_index = word.len() - i;\n        let end_index = start_index + 1;\n\
    \        let letter = word[end_index];\n\n        if let Some(found_index) = vowels_found.iter().position(|x|\
    \ x == letter) {\n            let last_vowel_index = vowels_found[found_index];\n\
    \            let last_vowel_length = word.len() - last_vowel_index - 1;\n    \
    \        if start_index >= last_vowel_index && end_index <= last_vowel_index +\
    \ last_vowel_length {\n                vowels_found.pop();\n            }\n  \
    \      }\n    }\n\n    if !vowels_found.is_empty() {\n        let last_vowel_index\
    \ = vowels_found.iter().position(|x| x == word.last()).unwrap();\n        let\
    \ last_vowel_length = word.len() - last_vowel_index - 1;\n        let start =\
    \ word[last_vowel_index];\n        let end = word[last_vowel_index + last_vowel_length];\n\
    \n        String::from(format!(\"{}{}\", start, end))\n    } else {\n        String::from(\"\
    \")\n    }", "    let mut vowel_index = word.rfind(&Vowels)?;\n    if vowel_index\
    \ == 0 {\n        String::from(\"\")\n    } else {\n        let vowel = word.as_str()[vowel_index..];\n\
    \        if vowel.contains(&consonants) {\n            vowel_index -= 1;\n   \
    \     }\n        let vowel = word.as_str()[vowel_index..];\n        if vowel.contains(&consonants)\
    \ {\n            vowel_index -= 1;\n        }\n        let vowel = word.as_str()[vowel_index..];\n\
    \        if vowel.contains(&consonants) {\n            vowel_index -= 1;\n   \
    \     }\n        word.as_str()[vowel_index..]\n    }", "    word.chars()\n   \
    \     .position(|&c| c.is_ascii_lowercase())\n        .unwrap_or_else(|| {\n \
    \           word.chars()\n                .position(|&c| !c.is_ascii_lowercase())\n\
    \                .unwrap_or(0)\n        })\n        .map(|i| {\n            if\
    \ i == 0 {\n                String::from(\"a\")\n            } else {\n      \
    \          word.chars().nth(i - 1).unwrap()\n            }\n        })\n     \
    \   .iter()\n        .cloned()\n        .find(|&c| c.is_ascii_uppercase())\n \
    \       .cloned()\n        .cloned()\n        .unwrap_or(\"\")", "    let mut\
    \ vowel = String::new();\n    let mut prev_vowel = String::new();\n    let mut\
    \ start_idx = 0;\n    let mut end_idx = word.len() - 1;\n\n    // If the word\
    \ contains only one consonant, we simply return an empty string.\n    // Otherwise,\
    \ get the index of the first consonant in the word, and get the vowel\n    //\
    \ that stands between them.\n    while start_idx < word.len() {\n        if word[start_idx]\
    \ == String::from(\"c\") {\n            vowel.push(String::from(\"c\"));\n   \
    \         start_idx += 1;\n        } else {\n            if start_idx == end_idx\
    \ {\n                // If it's the last consonant, simply return an empty string.\n\
    \                vowel.push(String::from(\"\"));\n            } else {\n     \
    \           // If it's not a consonant, get the index of the next consonant,\n\
    \                // get the vowel that stands between them and return the vowel.\n\
    \                let mut idx = start_idx;\n                while idx < end_idx\
    \ {\n                    if word[idx] == String::from(\"c\") {\n             \
    \           // If it's the last consonant, simply return an empty string.\n  \
    \                      vowel.push(String::from(\"\"));\n                     \
    \   break;\n                    }\n                    idx += 1;\n           \
    \     }\n                if idx == end_idx {\n                    // If it's the\
    \ last consonant, simply return an empty string.\n                    vowel.push(String::from(\"\
    \"));\n                } else {\n                    // If it's not the last consonant,\
    \ get the vowel that stands between them\n                    // and return the\
    \ vowel.\n                    prev_vowel = vowel;\n                    let mut\
    \ idx = start_idx;\n                    while idx < end_idx {\n              \
    \          if word[idx] == String::from(\"c\") {\n                           \
    \ // If it's the last consonant, simply return an empty string.\n            \
    \                vowel.push(String::from(\"\"));\n                           \
    \ break;\n                        }\n                        if idx == end_idx\
    \ {\n                            // If it's the last consonant, simply return\
    \ an empty string.\n                            vowel.push(String::from(\"\"));\n\
    \                            break;\n                        }\n             \
    \           if word[idx] == String::from(\"u\") {\n                          \
    \  // If it's the last consonant, simply return an empty string.\n           \
    \                 vowel.push(String::from(\"\"));\n                          \
    \  break;\n                        }\n                        idx += 1;\n    \
    \                }\n                }\n            }\n        }\n    }\n    prev_vowel",
  "    let mut vowels = HashMap::new();\n    let mut index = 0;\n    vowels.insert(\"\
    a\", 1);\n    vowels.insert(\"e\", 1);\n    vowels.insert(\"i\", 1);\n    vowels.insert(\"\
    o\", 1);\n    vowels.insert(\"u\", 1);\n    vowels.insert(\"y\", 1);\n    let\
    \ mut consonants = word.chars().skip_while(|c| !vowels.contains_key(c.to_ascii_lowercase()));\n\
    \    vowels.insert(\"a\", 1);\n    vowels.insert(\"e\", 1);\n    vowels.insert(\"\
    i\", 1);\n    vowels.insert(\"o\", 1);\n    vowels.insert(\"u\", 1);\n    vowels.insert(\"\
    y\", 1);\n    consonants.next().unwrap();\n    loop {\n        let mut min_distance\
    \ = std::cmp::min(consonants.next().unwrap(), word.len());\n        let mut min_distance\
    \ = std::cmp::min(min_distance, index + 1);\n        if min_distance > index {\n\
    \            min_distance = index;\n        }\n        \n        if min_distance\
    \ > word.len() - 1 {\n            break;\n        }\n        \n        let mut\
    \ curr_char = consonants.next().unwrap();\n        while vowels.contains_key(curr_char.to_ascii_lowercase())\
    \ &&\n              vowels.get(curr_char.to_ascii_lowercase()).unwrap() > min_distance\
    \ {\n            min_distance = vowels.get(curr_char.to_ascii_lowercase()).unwrap();\n\
    \            curr_char = consonants.next().unwrap();\n        }\n        \n  \
    \      index += min_distance + 1;\n        if index >= word.len() {\n        \
    \    break;\n        }\n    }\n    \n    format!(\"{}\", word.chars().skip_while(|c|\
    \ !vowels.contains_key(c.to_ascii_lowercase())).next().unwrap().to_ascii_lowercase())",
  "    let mut s = String::from(\"\");\n    let mut vowels = \"aeiouAEIOU\";\n   \
    \ let mut vowels_index = -1;\n    \n    for &c in word.chars() {\n        if vowels.contains(&c.to_lowercase())\
    \ {\n            vowels_index = vowels.find(&c.to_lowercase());\n            \n\
    \            if vowels_index == 0 {\n                s = String::from(\"\");\n\
    \                break;\n            } else if vowels_index == vowels.len() -\
    \ 1 {\n                s = String::from(\"\");\n                break;\n     \
    \       } else {\n                s = s.chars().enumerate().find(|&(i, &x)| x\
    \ == c).unwrap().0;\n                break;\n            }\n        }\n    }\n\
    \    \n    s", "    if word.len() < 2 {\n        return String::from(\"\");\n\
    \    }\n    let mut first = word[0];\n    let mut last = word[word.len() - 1];\n\
    \    \n    for &c in word.chars().rref().rev() {\n        if c == first {\n  \
    \          first = c;\n            continue;\n        }\n        if c == last\
    \ {\n            last = c;\n            continue;\n        }\n        if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n            || (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            return String::from(c);\n\
    \        }\n    }\n    \n    return String::from(\"\");", "    let mut vowels\
    \ = [String::from(\"\")];\n    vowels.push(String::from(\"u\"));\n    vowels.push(String::from(\"\
    i\"));\n    vowels.push(String::from(\"e\"));\n    vowels.push(String::from(\"\
    a\"));\n    vowels.push(String::from(\"o\"));\n    vowels.push(String::from(\"\
    U\"));\n    vowels.push(String::from(\"I\"));\n    vowels.push(String::from(\"\
    E\"));\n    vowels.push(String::from(\"A\"));\n    vowels.push(String::from(\"\
    O\"));\n    for vowel in vowels.iter() {\n        if word.contains(\"U\") {\n\
    \            word.truncate(word.len() - vowel.len());\n        }\n        if word.contains(\"\
    I\") {\n            word.truncate(word.len() - vowel.len());\n        }\n    \
    \    if word.contains(\"E\") {\n            word.truncate(word.len() - vowel.len());\n\
    \        }\n        if word.contains(\"A\") {\n            word.truncate(word.len()\
    \ - vowel.len());\n        }\n        if word.contains(\"O\") {\n            word.truncate(word.len()\
    \ - vowel.len());\n        }\n        if word.contains(\"u\") {\n            word.truncate(word.len()\
    \ - vowel.len());\n        }\n        if word.contains(\"i\") {\n            word.truncate(word.len()\
    \ - vowel.len());\n        }\n        if word.contains(\"e\") {\n            word.truncate(word.len()\
    \ - vowel.len());\n        }\n        if word.contains(\"a\") {\n            word.truncate(word.len()\
    \ - vowel.len());\n        }\n        if word.contains(\"o\") {\n            word.truncate(word.len()\
    \ - vowel.len());\n        }\n    }\n    word.truncate(word.len() - 1);\n    word",
  "    if word.is_empty() {\n        return String::from(\"\");\n    }\n    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_right\
    \ = vec![\"u\", \"e\", \"i\", \"o\", \"a\"];\n    let mut vowels_left = vec![\"\
    u\", \"e\", \"i\", \"o\", \"a\"];\n    if word.len() == 0 {\n        return String::from(\"\
    \");\n    }\n    for c in word.chars() {\n        for v in &vowels {\n       \
    \     if c >= v as u8 {\n                if vowels_right.contains(&v) || vowels_left.contains(&v)\
    \ {\n                    vowels_right = vowels_right.filter(|x| !vowels.contains(x));\n\
    \                    vowels_left = vowels_left.filter(|x| !vowels.contains(x));\n\
    \                    if vowels_right.contains(&v) {\n                        return\
    \ String::from(&v);\n                    } else if vowels_left.contains(&v) {\n\
    \                        return String::from(&v);\n                    }\n   \
    \             }\n                vowels_right = vowels_right.push(v);\n      \
    \          if vowels_right.len() == 4 {\n                    break;\n        \
    \        }\n            }\n        }\n        for v in &vowels_right {\n     \
    \       if c <= v as u8 {\n                if vowels_left.contains(&v) || vowels.contains(&v)\
    \ {\n                    vowels_left = vowels_left.filter(|x| !vowels.contains(x));\n\
    \                    vowels = vowels.filter(|x| !vowels.contains(x));\n      \
    \              if vowels_left.contains(&v) {\n                        return String::from(&v);\n\
    \                    } else if vowels.contains(&v) {\n                       \
    \ return String::from(&v);\n                    }\n                }\n       \
    \         vowels_left = vowels_left.push(v);\n                if vowels_left.len()\
    \ == 4 {\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    String::from(\"\")", "    let mut chars = word.chars();\n  \
    \  let mut vowel_counter = 0;\n    let mut previous_char: &str = \"\";\n    for\
    \ ch in chars.rev() {\n        if !is_vowel(ch) {\n            break;\n      \
    \  }\n        previous_char = ch;\n    }\n    for ch in chars.rev() {\n      \
    \  if !is_vowel(ch) {\n            break;\n        }\n        if ch != previous_char\
    \ {\n            vowel_counter++;\n        }\n    }\n    if vowel_counter < 2\
    \ {\n        return String::from(\"\");\n    }\n    let mut previous_char: &str\
    \ = \"\";\n    for ch in chars.rev() {\n        if !is_vowel(ch) {\n         \
    \   break;\n        }\n        previous_char = ch;\n    }\n    for ch in chars.rev()\
    \ {\n        if !is_vowel(ch) {\n            break;\n        }\n        if ch\
    \ != previous_char {\n            vowel_counter--;\n        }\n    }\n    match\
    \ vowel_counter {\n        0 => String::from(\"\"),\n        1 => String::from(\"\
    u\"),\n        _ => String::from(\"U\")\n    }", "    let mut vowel = String::new();\n\
    \    let mut consonant = String::new();\n    let mut index = 0;\n    for c in\
    \ word{\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            consonant\
    \ = c;\n            index = word.len() - 1;\n            break;\n        }\n \
    \       if index != 0 {\n            vowel = &word[index..index+2];\n        \
    \    break;\n        }\n    }\n    vowel.clone()", "    use std::cmp::Ordering::*;\n\
    \    word.chars().enumerate()\n        .filter(|(_, c)| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n        .filter(|(_, c)| !(c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U'))\n        .filter(|(_, c)| !(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'))\n        .find(|(_, c)|\
    \ c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        .map(|(_,\
    \ c)| c)\n        .map(|c| c.to_string())\n        .unwrap_or(\"\")", "    let\
    \ mut vowels = vec![];\n    word\n        .chars()\n        .enumerate()\n   \
    \     .filter(|&(_, c)| !c.is_vowel())\n        .enumerate()\n        .filter_map(|(_i,\
    \ c)| {\n            vowels.push(c.to_lowercase());\n            Some(true)\n\
    \        })\n        .collect();\n\n    vowels\n        .into_iter()\n       \
    \ .enumerate()\n        .filter(|(_i, vowel)| vowel.len() == word.len())\n   \
    \     .filter(|(_i, vowel)| vowel.len() >= word.len())\n        .find_map(|(_i,\
    \ vowel)| {\n            let mut index = vowel.rfind('a').unwrap_or(vowel.len());\n\
    \            if index == 0 {\n                return Some(vowel.to_lowercase());\n\
    \            }\n            if vowel.len() == index + 1 {\n                return\
    \ Some(vowel.to_lowercase());\n            }\n            Some(vowel[..index])\n\
    \        })\n        .unwrap()", "    let mut vowels: Vec<&'static str> = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    if word.starts_with(vowels.iter().cloned().collect::<Vec<_>>())\
    \ {\n        return String::from(vowels.iter().cloned().collect::<Vec<_>>().last().unwrap());\n\
    \    }\n    if word.ends_with(vowels.iter().cloned().collect::<Vec<_>>()) {\n\
    \        return String::from(vowels.iter().cloned().collect::<Vec<_>>().last().unwrap());\n\
    \    }\n    if word.len() >= 2 && word.ends_with(vowels.iter().cloned().collect::<Vec<_>>())\
    \ {\n        let mut last: Vec<&'static str> = vec![];\n        for (vowel, idx)\
    \ in vowels.iter().cloned().rev().enumerate()\n        {\n            let idx2\
    \ = idx % word.len();\n            if idx == word.len() - 1 {\n              \
    \  last = vec![vowel];\n                break;\n            }\n            if\
    \ idx2 == word.len() - 1 {\n                break;\n            }\n          \
    \  if word.starts_with(vowels.iter().cloned().collect::<Vec<_>>()) {\n       \
    \         last = vec![vowel];\n                break;\n            }\n       \
    \     if idx2 >= 2 && idx2 <= word.len() - 2 && word.ends_with(vowels.iter().cloned().collect::<Vec<_>>())\
    \ {\n                last = vec![vowel];\n                break;\n           \
    \ }\n            if idx2 >= 3 && idx2 <= word.len() - 2 && word.ends_with(vowels.iter().cloned().collect::<Vec<_>>())\
    \ {\n                last = vec![vowel];\n                break;\n           \
    \ }\n        }\n        if last.is_empty() {\n            return String::from(\"\
    \");\n        }\n        return String::from(last.iter().cloned().collect::<Vec<_>>().last().unwrap());\n\
    \    }\n    if word.len() >= 2 && word.starts_with(vowels.iter().cloned().collect::<Vec<_>>())\
    \ {\n        let mut last: Vec<&'static str> = vec![];\n        for (vowel, idx)\
    \ in vowels.iter().cloned().rev().enumerate()\n        {\n            let idx2\
    \ = idx % word.len();\n            if idx == word.len() - 1 {\n              \
    \  last = vec![vowel];\n                break;\n            }\n            if\
    \ idx2 == word.len() - 1 {\n                break;\n            }\n          \
    \  if word.ends_with(vowels.iter().cloned().collect::<Vec<_>>()) {\n         \
    \       last = vec![vowel];\n                break;\n            }\n         \
    \   if idx2 >= 2 && idx2 <= word.len() - ", "    let mut index = 0;\n    let mut\
    \ vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    for i\
    \ in word.chars() {\n        let char = i.to_string();\n        if char.contains(&vowels[(index\
    \ + 1) % vowels.len()]) {\n            return i.to_string();\n        }\n    \
    \    index += 1;\n    }\n    \"\".to_string()", "    // Your code here\n    let\
    \ mut vowels = vec![];\n    let mut word = word.to_string();\n    loop {\n   \
    \     if word.len() <= 1 { break; }\n        vowels.push(word.chars().filter(|&c|\
    \ c.is_vowel()).nth(1).unwrap());\n        word = &word[1..];\n    }\n    word.chars().filter(|&c|\
    \ c.is_vowel()).nth(1).unwrap()", "    let mut len = word.len();\n    let mut\
    \ ans = String::new();\n    if len == 0 {\n        return ans;\n    }\n    let\
    \ mut first_index = len - 1;\n    let mut last_index = len - 1;\n    let mut index\
    \ = len - 1;\n    let mut first = word[0];\n    let mut last = word[0];\n    let\
    \ mut last2 = word[0];\n    let mut last3 = word[0];\n    let mut last4 = word[0];\n\
    \    let mut last5 = word[0];\n    let mut last6 = word[0];\n    let mut last7\
    \ = word[0];\n    let mut last8 = word[0];\n    let mut last9 = word[0];\n   \
    \ let mut last10 = word[0];\n    let mut last11 = word[0];\n    let mut last12\
    \ = word[0];\n    let mut last13 = word[0];\n    let mut last14 = word[0];\n \
    \   let mut last15 = word[0];\n    let mut last16 = word[0];\n    let mut last17\
    \ = word[0];\n    let mut last18 = word[0];\n    let mut last19 = word[0];\n \
    \   let mut last20 = word[0];\n    let mut last21 = word[0];\n    let mut last22\
    \ = word[0];\n    let mut last23 = word[0];\n    let mut last24 = word[0];\n \
    \   let mut last25 = word[0];\n    let mut last26 = word[0];\n    let mut last27\
    \ = word[0];\n    let mut last28 = word[0];\n    let mut last29 = word[0];\n \
    \   let mut last30 = word[0];\n    let mut last31 = word[0];\n    let mut last32\
    \ = word[0];\n    let mut last33 = word[0];\n    let mut last34 = word[0];\n \
    \   let mut last35 = word[0];\n    let mut last36 = word[0];\n    let mut last37\
    \ = word[0];\n    let mut last38 = word[0];\n    let mut last39 = word[0];\n \
    \   let mut last40 = word[0];\n    let mut last41 = word[0];\n    let mut last42\
    \ = word[0];\n    let mut last43 = word[0];\n    let mut last44 = word[0];\n \
    \   let mut last45 = word[0];\n    let mut last46 = word[0];\n    let mut last47\
    \ = word[0];\n    let mut last48 = word[0];\n    let mut last49 = word[0];\n \
    \   let mut last50 = word[0];\n    let mut last51 = word[0];\n    let mut last52\
    \ = word", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n\
    \    word.chars().enumerate().filter(|&(_, c)|\n        if c.to_ascii_lowercase()\
    \ == 'a' || c.to_ascii_lowercase() == 'e' || c.to_ascii_lowercase() == 'i' ||\
    \ c.to_ascii_lowercase() == 'o' || c.to_ascii_lowercase() == 'u'\n        {\n\
    \            vowels.push(c.to_ascii_lowercase());\n            false\n       \
    \ }\n        true\n    ).collect::<Vec<(usize, String)>>();\n\n    vowels.sort_by(|a,\
    \ b| b.cmp(&a));\n\n    vowels.reverse();\n\n    vowels.last_or_default().unwrap()",
  "    \n    // Your code here\n", "    let mut vowel = String::new();\n\n    for\
    \ c in word.chars() {\n        match c {\n            'a'..='z' => vowel.push('z'),\n\
    \            'A'..='Z' => vowel.push('Z'),\n            _ => vowel.push(c),\n\
    \        }\n    }\n\n    let mut right_consonant = 0;\n    vowel.chars().for_each(|c|\
    \ {\n        if *c >= 'a' && *c <= 'z' {\n            right_consonant += 1;\n\
    \        } else if *c >= 'A' && *c <= 'Z' {\n            right_consonant += 2;\n\
    \        }\n    });\n\n    match right_consonant {\n        0 => String::from(\"\
    \"),\n        1 => String::from(\"\"),\n        _ => vowel.chars().nth(right_consonant).unwrap().to_string(),\n\
    \    }", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut vowels_idx = word.len();\n    let mut letter = word[vowels_idx - 1];\n \
    \   while vowels_idx > 0 {\n        letter = word.chars().nth(vowels_idx).unwrap();\n\
    \        if letter.to_lowercase().as_str() in vowels {\n            vowels_idx\
    \ -= 1;\n        } else {\n            break;\n        }\n    }\n    if vowels_idx\
    \ < word.len() {\n        return String::from(\"\");\n    }\n    letter = word.chars().nth(vowels_idx).unwrap();\n\
    \    if letter.to_lowercase().as_str() != \"a\" && letter.to_lowercase().as_str()\
    \ != \"e\" && letter.to_lowercase().as_str() != \"i\" && letter.to_lowercase().as_str()\
    \ != \"o\" && letter.to_lowercase().as_str() != \"u\"{\n        return String::from(\"\
    \");\n    }\n    String::from(vowels[vowels_idx - 1].to_string())", "    // Your\
    \ code here\n    let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut word_idx = 0;\n    let mut closest_idx = -1;\n    let mut last_idx = 0;\n\
    \    let mut first_idx = 0;\n    \n    let mut min_idx = std::cmp::max(1, word.len());\n\
    \    \n    while word_idx < word.len() {\n        if word[word_idx].is_uppercase()\
    \ {\n            closest_idx = 1;\n            last_idx = word.len() - 1;\n  \
    \          first_idx = 0;\n            break;\n        }\n        if word[word_idx].is_lowercase()\
    \ {\n            closest_idx = 1;\n            last_idx = word.len() - 1;\n  \
    \          first_idx = 1;\n            break;\n        }\n        if let Some(idx)\
    \ = vowels.iter().position(|&v| v == word[word_idx]) { \n            if idx >\
    \ closest_idx {\n                closest_idx = idx;\n                first_idx\
    \ = word_idx;\n                last_idx = word_idx;\n            }\n        }\n\
    \        if word[word_idx].is_lowercase() {\n            closest_idx = 1;\n  \
    \          last_idx = word.len() - 1;\n            first_idx = 1;\n          \
    \  break;\n        }\n        if let Some(idx) = vowels.iter().position(|&v| v\
    \ == word[word_idx]) { \n            if idx > closest_idx {\n                closest_idx\
    \ = idx;\n                first_idx = word_idx;\n                last_idx = word_idx;\n\
    \            }\n        }\n        if let Some(idx) = vowels.iter().position(|&v|\
    \ v == word[word_idx]) { \n            if idx > closest_idx {\n              \
    \  closest_idx = idx;\n                first_idx = word_idx;\n               \
    \ last_idx = word_idx;\n            }\n        }\n        if let Some(idx) = vowels.iter().position(|&v|\
    \ v == word[word_idx]) { \n            if idx > closest_idx {\n              \
    \  closest_idx = idx;\n                first_idx = word_idx;\n               \
    \ last_idx = word_idx;\n            }\n        }\n        word_idx += 1;\n   \
    \ }\n    \n    if closest_idx < 1 {\n        return String::from(\"\");\n    }\n\
    \    \n    let mut min_idx = std::cmp::max(1, closest_idx);\n    let mut word_idx\
    \ = first_idx;\n    let mut closest_idx = closest_idx;\n    \n    while word_idx\
    \ < last_idx {\n        if word[word_idx].is_uppercase() {\n            closest_idx\
    \ = closest_idx;\n        } else if word[word_idx].is_lowercase() {\n        \
    \    closest_idx = closest_idx;\n        }\n        if closest_idx > min_idx {\n\
    \            break;\n        }\n        word_idx += 1;\n    }\n    \n", "    let\
    \ mut idx = 0;\n    let mut idx2 = 0;\n    let mut vowels = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\", \"\xE4\", \"\xE5\"];\n    let mut consonants = vec![\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"];\n    loop {\n  \
    \      if idx2 == word.len() {\n            return String::from(vowels[idx]);\n\
    \        }\n        if word[idx2] == vowels[idx] {\n            idx2++;\n    \
    \        if idx2 == word.len() {\n                return String::from(vowels[idx]);\n\
    \            }\n        }\n        if word[idx2] == consonants[idx] {\n      \
    \      idx2++;\n            if idx2 == word.len() {\n                return String::from(vowels[idx]);\n\
    \            }\n        }\n        idx += 1;\n        idx2 += 1;\n    }", "  \
    \  word.chars()\n        .chain(word.chars().skip_while(|c| c.is_uppercase()))\n\
    \        .chain(word.chars().skip_while(|c| c.is_lowercase()))\n        .filter(|c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n        .map(|c|\
    \ if c.is_uppercase() { \"A\".to_string() } else if c.is_lowercase() { \"a\".to_string()\
    \ } else { \"a\".to_string() })\n        .map(|c| if c.is_uppercase() { \"u\"\
    .to_string() } else if c.is_lowercase() { \"u\".to_string() } else { \"u\".to_string()\
    \ })\n        .min(|a,b| a.len() < b.len())\n        .unwrap_or(\"\")", "    let\
    \ mut vowel = String::new();\n\n    let word_without_vowels = word.to_lowercase();\n\
    \    let mut consonants = String::new();\n\n    for c in word_without_vowels.chars().skip_while(|c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        consonants.push_str(c.to_string());\n\
    \    }\n\n    if consonants.chars().any(|c| c == c[0]) {\n        for c in word_without_vowels.chars().skip_while(|c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            if\
    \ !consonants.contains(&c[0]) {\n                vowel.push_str(c.to_string());\n\
    \                break;\n            }\n        }\n    } else {\n        vowel.push_str(\"\
    \");\n    }\n    vowel", "    match word.chars() {\n        \n        // if the\
    \ given word is empty, return empty string\n        None => String::from(\"\"\
    ),\n        \n        // if the given word consists of one consonant, return empty\
    \ string\n        Some(first) => get_closest_vowel(String::from(first)),\n   \
    \     \n        // if there are two consonants, find the first vowel and the first\
    \ consonant \n        // from the right side of the word and use them as boundaries\n\
    \        Some(first) => match first.chars() {\n            \n            // if\
    \ there are one or two consonants, return empty string\n            None => String::from(\"\
    \"),\n            \n            // if there are two consonants, find the first\
    \ vowel and the first consonant \n            // from the right side of the word\
    \ and use them as boundaries\n            Some(first) => match first.chars() {\n\
    \                \n                // if there are two consonants, return empty\
    \ string\n                None => String::from(\"\"),\n                \n    \
    \            // if there are two consonants, find the first vowel and the first\
    \ consonant \n                // from the right side of the word and use them\
    \ as boundaries\n                Some(first) => get_vowel(String::from(first),\
    \ String::from(first)),\n            },\n        },\n    }", "    let mut vowel\
    \ = String::new();\n    let mut vowel_flag = false;\n    let mut current_letter\
    \ = word.len() - 1;\n\n    if current_letter < word.len() / 2 {\n        vowel\
    \ = String::new();\n        vowel_flag = false;\n        current_letter = word.len()\
    \ - 1;\n    }\n    while current_letter >= 0 && current_letter < word.len() {\n\
    \        if word[current_letter].is_lowercase() {\n            if vowel_flag.is_none()\
    \ {\n                vowel = String::from(word[current_letter]);\n           \
    \     vowel_flag = true;\n                continue;\n            }\n        }\n\
    \        if word[current_letter].is_uppercase() {\n            if vowel_flag.is_none()\
    \ {\n                vowel = String::from(word[current_letter]);\n           \
    \     vowel_flag = true;\n                continue;\n            }\n        }\n\
    \        if word[current_letter].is_ascii_uppercase() {\n            if vowel_flag.is_none()\
    \ {\n                vowel = String::from(word[current_letter]);\n           \
    \     vowel_flag = true;\n                continue;\n            }\n        }\n\
    \        if word[current_letter].is_ascii_lowercase() {\n            if vowel_flag.is_none()\
    \ {\n                vowel = String::from(word[current_letter]);\n           \
    \     vowel_flag = true;\n                continue;\n            }\n        }\n\
    \        if word[current_letter].is_ascii_alphanumeric() {\n            if vowel_flag.is_none()\
    \ {\n                vowel = String::from(word[current_letter]);\n           \
    \     vowel_flag = true;\n                continue;\n            }\n        }\n\
    \        if word[current_letter].is_digit() {\n            if vowel_flag.is_none()\
    \ {\n                vowel = String::from(word[current_letter]);\n           \
    \     vowel_flag = true;\n                continue;\n            }\n        }\n\
    \        current_letter -= 1;\n    }\n    vowel", "    \n    let vowels: Vec<&'static\
    \ str> = vec![\n        \"a\", \"e\", \"i\", \"o\", \"u\"\n    ];\n\n    let mut\
    \ cur_vowel: Option<&'static str> = None;\n    let mut next_vowel: Option<&'static\
    \ str> = None;\n\n    let mut cur_index = 0;\n    let mut next_index = 0;\n  \
    \  \n    while cur_index < word.len() {\n        if cur_vowel.is_none() {\n  \
    \          if next_index == word.len() {\n                // we have reach the\
    \ end of this word so return \"\"\n                println!(\"{} is at the end\
    \ of the word\", word);\n                return String::from(\"\");\n        \
    \    }\n            next_vowel = &vowels[next_index as usize];\n        }\n  \
    \      \n        if next_index == word.len() {\n            // we have reached\
    \ the end of the word so break the loop\n            break;\n        }\n     \
    \   \n        if word[cur_index] == next_vowel {\n            // we have found\
    \ a vowel met the conditions\n            cur_vowel = Some(&vowels[cur_index as\
    \ usize]);\n            next_vowel = Some(&vowels[next_index as usize]);\n   \
    \         \n            if cur_index + 1 == word.len() {\n                // we\
    \ have reached the end of the word so break the loop\n                break;\n\
    \            }\n        }\n        \n        cur_index += 1;\n        next_index\
    \ += 1;\n    }\n    \n    cur_vowel.ok_or_else(|| format!(\"could not find any\
    \ vowel for the word {}\", word))?", "    let vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\", \"e\", \"i\", \"o\", \"u\"];\n    let mut word = word.to_lowercase();\n\
    \    let mut vowel = String::new();\n    let mut vowel_start_index = String::new();\n\
    \    let mut vowel_end_index = String::new();\n\n    if word.len() > 1 && vowels.contains(&word[1])\
    \ {\n        vowel_start_index = &word[..word.len() - 1];\n        vowel = &vowels[1..word.len()\
    \ - 1];\n        vowel_end_index = &word[word.len() - 1..];\n    }\n    else {\n\
    \        vowel = &vowels[1..];\n        vowel_start_index = &word[..];\n     \
    \   vowel_end_index = &word[..];\n    }\n\n    let mut left_consonant_index =\
    \ String::new();\n    let mut right_consonant_index = String::new();\n    left_consonant_index\
    \ = vowel.rfind(|x| x == &\"a\"..&\"z\");\n    right_consonant_index = vowel.rfind(|x|\
    \ x == &\"A\"..&\"Z\");\n    if left_consonant_index.is_some() && right_consonant_index.is_some()\
    \ {\n        if left_consonant_index < right_consonant_index {\n            vowel\
    \ = &vowel[left_consonant_index..right_consonant_index];\n        }\n        else\
    \ {\n            vowel = &vowel[left_consonant_index..];\n        }\n    }\n \
    \   else {\n        if left_consonant_index.is_some() {\n            vowel = &vowel[left_consonant_index..];\n\
    \        }\n        if right_consonant_index.is_some() {\n            vowel =\
    \ &vowel[..right_consonant_index];\n        }\n    }\n    vowel", "    let mut\
    \ vowels = String::new();\n    for letter in word.chars().rposition(|c| !is_vowel(c))\
    \ {\n        if vowels.len() > 0 {\n            break;\n        }\n        let\
    \ pos = letter - 2;\n        if pos < 0 || (pos + 1) > word.len() - 1 {\n    \
    \        return String::from(\"\");\n        }\n        let next = word[pos +\
    \ 1];\n        if !is_vowel(next) {\n            break;\n        }\n        vowels.push(next);\n\
    \    }\n    vowels", "    use std::cmp::max;\n    use std::cmp::min;\n\n    let\
    \ mut vowels = String::new();\n\n    let mut last_consonant = word.len();\n  \
    \  let mut last_vowel = min((word.len() - 1), (word.len() - 2));\n    while last_vowel\
    \ >= 0 {\n        vowels.push(word.chars().skip_while(|c| !c.is_ascii_letter()).last().unwrap().to_string());\n\
    \        last_vowel--;\n    }\n\n    last_consonant -= 1;\n    while last_consonant\
    \ >= 0 {\n        vowels.push(word.chars().skip_while(|c| c.is_ascii_letter()).last().unwrap().to_string());\n\
    \        last_consonant--;\n    }\n\n    vowels", "    let mut vowels = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut result = String::new();\n\n   \
    \ word.chars().enumerate().for_each(|(i, c)| {\n        if vowels.contains(c)\
    \ {\n            if i == word.len() - 1 {\n                result.push(c);\n \
    \           }\n        } else {\n            if i == 0 {\n                result.push(c);\n\
    \            }\n        }\n    })\n    \n    result", "    let mut vowel_start_index\
    \ = word.rfind(\"Vowel\").unwrap();\n    let mut vowel_end_index = word.rfind(\"\
    a\").unwrap();\n    let mut vowel_index = word[vowel_start_index..vowel_end_index].chars().filter(|&c|\
    \ c.is_uppercase()).map(|c| c.to_lowercase()).nth(1).unwrap();\n    if vowel_index\
    \ == Some(word.len() - 1) {\n        \"\".to_string()\n    } else {\n        let\
    \ mut new_vowel_index = vowel_index - 1;\n        let mut new_vowel_char = String::new();\n\
    \        while new_vowel_index > 0 {\n            new_vowel_char += word[vowel_end_index..new_vowel_index].chars().filter(|&c|\
    \ c.is_uppercase()).map(|c| c.to_lowercase()).nth(1).unwrap();\n            new_vowel_index\
    \ -= 1;\n        }\n        new_vowel_char\n    }", "    word.chars().enumerate().filter(|&(_,\
    \ &c)| c.to_lowercase() == c).filter(|&(_, _)| c == c).filter(|&(_, c2)| c2 ==\
    \ c).filter_map(|(_, &c)| c.to_lowercase()).collect::<Vec<_>>()\n        .iter()\n\
    \        .filter_map(|(&i, &c)| if c == 'u' || c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u'\n                                || (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') || (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            (i, c)\n        }).min_by_key(|&(i, _)| i)\n      \
    \  .map(|(_, c)| String::from(c)).collect::<String>()", "    let mut vowels =\
    \ vec![\"\"];\n    let mut left = word.chars().skip_while(|c| !c.is_ascii()).collect::<String>();\n\
    \    let mut right = word.chars().skip_while(|c| c.is_ascii()).collect::<String>();\n\
    \    \n    for vowel in &Vowels {\n        if left.contains(vowel) && right.contains(vowel)\
    \ {\n            vowels.push(vowel);\n        }\n    }\n    \n    if !vowels.is_empty()\
    \ {\n        String::from(vowels.iter().min().unwrap())\n    } else {\n      \
    \  String::from(\"\")\n    }", "    match word {\n        Ok(w) => get_closest_vowel_1(w),\n\
    \        _ => String::new(),\n    }", "    let mut vowels = Vec::new();\n    vowels.push('a',\
    \ 'e', 'i', 'o', 'u');\n    let mut consonants = Vec::new();\n    consonants.push('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z');\n    let mut index = word.len();\n    while index > 0 {\n\
    \        let mut vowels_index = vowels.iter().position(|&v| {\n            index\
    \ < word.len() && word.chars().any(|c| {\n                *c >= v && c <= consonants.last()\n\
    \            })\n        });\n        if vowels_index.is_some() {\n          \
    \  return String::from(vowels[vowels_index.unwrap()].to_string());\n        }\n\
    \        index -= 1;\n    }\n    String::from(\"\")", "    let mut res = String::from(\"\
    \");\n    for i in word[word.len() - 1].chars().rev() {\n        if i.is_vowel()\
    \ {\n            res = i;\n            break;\n        }\n    }\n    res", " \
    \   let word = word.to_string();\n    \n    let mut index = 0;\n    while index\
    \ < word.length() - 1 {\n        if let Some(i) = word.char_indices().filter(|(_,\
    \ c)| c.is_uppercase()).find() {\n            let vowels = String::new();\n  \
    \          if i != 0 && (i + 1) < word.length() {\n                if let Some(first)\
    \ = word.chars().nth(i + 1) {\n                    if first != 'A' || first !=\
    \ 'E' || first != 'I' || first != 'O' || first != 'U' {\n                    \
    \    vowels.push(first);\n                    }\n                }\n         \
    \   }\n            if i != word.length() - 1 && (i + 1) < word.length() && let\
    \ Some(last) = word.chars().nth(i + 2) {\n                if last != 'A' || last\
    \ != 'E' || last != 'I' || last != 'O' || last != 'U' {\n                    vowels.push(last);\n\
    \                }\n            }\n            if !vowels.is_empty() {\n     \
    \           let mut vowel = vowels.to_string();\n                while vowel.len()\
    \ > 1 {\n                    if vowel.chars().any(|c| c.is_uppercase()) {\n  \
    \                      vowel = vowel.substr(0, vowel.len());\n               \
    \     } else {\n                        break;\n                    }\n      \
    \          }\n                index += vowel.len();\n                return vowel;\n\
    \            }\n        }\n        index += 1;\n    }\n    \n    \"\".to_string()",
  "    let mut current = word;\n    let mut closest_vowel: Option<String> = None;\n\
    \    for (index, char) in current.chars().enumerate() {\n        match char {\n\
    \            'a' | 'e' | 'i' | 'o' | 'u' => continue,\n            'A' | 'E' |\
    \ 'I' | 'O' | 'U' => closest_vowel = Some(String::from(\"u\") + char.to_string()),\n\
    \            c => match closest_vowel {\n                None => closest_vowel\
    \ = Some(String::from(\"u\") + c.to_string()),\n                Some(last) =>\
    \ if char == last || char == char.swapcase().to_string() {\n                 \
    \   closest_vowel = Some(String::from(\"\") + c.to_string()),\n              \
    \  }\n            },\n        }\n    }\n    closest_vowel.unwrap_or_else(|_| word.to_string())",
  "    let mut vowel_pos = 0;\n    let mut vowel_count = 0;\n    for pos in word.chars().rposition(|&c|\
    \ *c != 'a' && *c != 'e' && *c != 'i' && *c != 'o' && *c != 'u') {\n        vowel_count\
    \ += 1;\n        vowel_pos = pos + 1;\n    }\n    if vowel_count < 2 {\n     \
    \   return String::from(\"\");\n    }\n    word.chars().rposition(|&c| *c != 'a'\
    \ && *c != 'e' && *c != 'i' && *c != 'o' && *c != 'u') {\n        let mut vowel_pos\
    \ = word.chars().rposition(|&c| *c != 'a' && *c != 'e' && *c != 'i' && *c != 'o'\
    \ && *c != 'u');\n        let mut vowel_count = 0;\n        for pos in word.chars().rposition(|&c|\
    \ *c != 'a' && *c != 'e' && *c != 'i' && *c != 'o' && *c != 'u') {\n         \
    \   vowel_count += 1;\n            vowel_pos = pos + 1;\n        }\n        if\
    \ vowel_count > 2 {\n            return String::from(\"\");\n        }\n    }\n\
    \    word.chars().rposition(|&c| *c != 'a' && *c != 'e' && *c != 'i' && *c !=\
    \ 'o' && *c != 'u') {\n        let mut vowel_pos = word.chars().rposition(|&c|\
    \ *c != 'a' && *c != 'e' && *c != 'i' && *c != 'o' && *c != 'u');\n        let\
    \ mut vowel_count = 0;\n        for pos in word.chars().rposition(|&c| *c != 'a'\
    \ && *c != 'e' && *c != 'i' && *c != 'o' && *c != 'u') {\n            vowel_count\
    \ += 1;\n            vowel_pos = pos + 1;\n        }\n        if vowel_count ==\
    \ 0 {\n            return String::from(\"\");\n        }\n    }\n    word.chars().rposition(|&c|\
    \ *c != 'a' && *c != 'e' && *c != 'i' && *c != 'o' && *c != 'u') {\n        let\
    \ mut vowel_pos = word.chars().rposition(|&c| *c != 'a' && *c != 'e' && *c !=\
    \ 'i' && *c != 'o' && *c != 'u');\n        let mut vowel_count = 0;", "    word.chars().enumerate().take_while(|&(_,\
    \ c)| {\n        match c {\n            'a' | 'A' | 'e' | 'E' | 'i' | 'I' | 'o'\
    \ | 'O' | 'u' | 'U' => {\n                true\n            }\n            _ =>\
    \ false\n        }\n    }).collect::<Vec<_>>().iter()\n        .cloned()\n   \
    \     .enumerate()\n        .find_if(|&(_, c)| {\n            match c {\n    \
    \            'a' | 'A' | 'e' | 'E' | 'i' | 'I' | 'o' | 'O' | 'u' | 'U' => {\n\
    \                    true\n                }\n                _ => false\n   \
    \         }\n        }).map(|&(_, c)| c)\n        .map(|c| word.chars().position(|c|\
    \ c == c).unwrap())\n        .map(|i| word.chars()\n            .skip(i)\n   \
    \         .take_while(|&c| {\n                match c {\n                    'a'\
    \ | 'A' | 'e' | 'E' | 'i' | 'I' | 'o' | 'O' | 'u' | 'U' => {\n               \
    \         true\n                    }\n                    _ => false\n      \
    \          }\n            })\n            .collect::<Vec<_>>())\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .enumerate()\n        .take_while(|&(_,\
    \ c)| {\n            match c {\n                'a' | 'A' | 'e' | 'E' | 'i' |\
    \ 'I' | 'o' | 'O' | 'u' | 'U' => {\n                    true\n               \
    \ }\n                _ => false\n            }\n        })\n        .map(|&(_,\
    \ c)| c)\n        .map(|c| word.chars().position(|c| c == c).unwrap())\n     \
    \   .map(|i| word.chars()\n            .skip(i)\n            .take_while(|&c|\
    \ {\n                match c {\n                    'a' | 'A' | 'e' | 'E' | 'i'\
    \ | 'I' | 'o' | 'O' | 'u' | 'U' => {\n                        true\n         \
    \           }\n                    _ => false\n                }\n           \
    \ })\n            .collect::<Vec<_>>())\n        .collect::<Vec<_>>()\n      \
    \  .iter()\n        .cloned()\n        .enumerate()\n        .take_while(|&(_,\
    \ c)| {\n            match c {\n                'a' | 'A' | 'e' | 'E' | 'i' |\
    \ 'I' | 'o' | 'O' | 'u' | 'U' => {\n                    true\n               \
    \ }\n                _ => false\n            }\n        })\n        .map(|&(_,\
    \ c)| c)\n        .map(|c| word.chars().position(|c| c == c).unwrap())\n     \
    \   .", "    let mut vowel_range: Vec<(String, String)> = vec![];\n    let mut\
    \ i: usize = 0;\n    while i < word.len() {\n        if word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n           \
    \ vowel_range.push((\n                String::from(word[word.len()-(i+2)..word.len()-i]),\n\
    \                String::from(word[word.len()-(i+4)..word.len()-(i+2)])\n    \
    \        ));\n            i += 2;\n        }\n        if word[i] == 'A' || word[i]\
    \ == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U' {\n           \
    \ vowel_range.push((\n                String::from(word[word.len()-(i+2)..word.len()-i]),\n\
    \                String::from(word[word.len()-(i+4)..word.len()-(i+2)])\n    \
    \        ));\n            i += 2;\n        }\n        i += 1;\n    }\n\n    if\
    \ vowel_range.len() == 0 {\n        return String::from(\"\");\n    }\n    let\
    \ mut j: usize = 0;\n    vowel_range.sort();\n    for v in vowel_range.iter()\
    \ {\n        if j != v.0\n            && v.0 == v.1\n            && j + 1 < word.len()\n\
    \            && word[j + 1] == v.0\n            && word[j + 2] == v.1 {\n    \
    \        break;\n        }\n        j = v.0 + 1;\n    }\n\n    if j == word.len()\
    \ {\n        return String::from(\"\");\n    }\n\n    String::from(word[j..].to_uppercase())",
  "    use std::cmp::Ordering;\n    let mut vowels: [String; 3] = [String::from(\"\
    A\"), String::from(\"E\"), String::from(\"I\"), String::from(\"O\"), String::from(\"\
    U\")];\n\n    let len = word.len();\n    if len < 3 {\n        return String::from(\"\
    \");\n    }\n\n    let len = word.len();\n    let mut i = len - 1;\n    while\
    \ i >= 0 {\n        let word = word[i].to_lowercase();\n        if word.contains(\"\
    a\") {\n            vowels[0] = word;\n        }\n        if word.contains(\"\
    e\") {\n            vowels[1] = word;\n        }\n        if word.contains(\"\
    i\") {\n            vowels[2] = word;\n        }\n        i -= 1;\n    }\n\n \
    \   let mut vowel_index = -1;\n    let mut vowel_len = vowels.len();\n    let\
    \ mut i = 0; \n    while i < vowel_len {\n        if vowels[i].len() < vowel_len\
    \ - i {\n            break;\n        }\n        if word.starts_with(vowels[i])\
    \ {\n            vowel_index = i;\n            i += 1;\n        }\n        if\
    \ word.ends_with(vowels[i]) {\n            vowel_index = i;\n            i +=\
    \ 1;\n        }\n        i += 1;\n    }\n\n    if vowel_index >= 0 {\n       \
    \ vowels[vowel_index]\n    } else {\n        String::from(\"\")\n    }", "   \
    \ if word.len() < 2 {\n        return String::from(\"\");\n    }\n    let mut\
    \ current_consonant = String::from(\"\");\n    let mut vowel_found = false;\n\
    \    for i in word.len() - 1 {\n        if word[word.len() - 1] == i.chars().next().unwrap()\
    \ {\n            current_consonant = i;\n            vowel_found = true;\n   \
    \         break;\n        }\n    }\n    if !vowel_found {\n        return String::from(\"\
    \");\n    }\n    word.chars().skip(word.len() - current_consonant.len()).fold(String::from(\"\
    \"), |mut acc, char| {\n        if char == current_consonant {\n            acc\
    \ += &char;\n        }\n        acc\n    });", "    let mut vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    for vowel in vowels.iter_mut() {\n        let vowel_pos\
    \ = word.rfind(vowel);\n        let index = vowel_pos + 1;\n        if index >=\
    \ word.len() || index < 0 {\n            continue;\n        }\n        if index\
    \ == word.len() - 1 {\n            return String::from(vowel.to_string());\n \
    \       }\n        let consonant_pos = index + 1;\n        let consonant = &word[consonant_pos];\n\
    \        if consonant == 'a' || consonant == 'e' || consonant == 'i' || consonant\
    \ == 'o' || consonant == 'u' {\n            vowel = consonant.to_string();\n \
    \       }\n    }\n    String::from(\"\")", "    let word = word.to_lowercase();\n\
    \    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"];\n\n    for cons in word.chars() {\n        if vowels.iter().any(|vowel|\
    \ vowel == cons) {\n            return cons;\n        }\n    }\n    \"\"", " \
    \   let mut vowel_from = word.chars();\n    let mut vowel_to = vowel_from.rev();\n\
    \    let mut vowel: String = String::new();\n\n    while vowel_from.any(|c| c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        vowel = String::from(vowel_from.next().unwrap());\n\
    \        vowel_from.next();\n    }\n    vowel_to.next();\n\n    if vowel.chars().any(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        return\
    \ String::from(vowel);\n    } else {\n        return String::new();\n    }", " \
    \   let mut s = String::new();\n    let mut vowel = String::new();\n    for c\
    \ in word.chars() {\n        if c.to_ascii_lowercase() == 'a' || c.to_ascii_lowercase()\
    \ == 'e' ||\n            c.to_ascii_lowercase() == 'i' || c.to_ascii_lowercase()\
    \ == 'o' ||\n            c.to_ascii_lowercase() == 'u' {\n            vowel =\
    \ c;\n            break;\n        }\n    }\n    if vowel.is_empty() {\n      \
    \  \"\".to_string();\n    } else {\n        for c in word.chars() {\n        \
    \    if c.to_ascii_lowercase() != vowel.to_ascii_lowercase() {\n             \
    \   continue;\n            }\n            s.push_str(&vowel);\n            break;\n\
    \        }\n        if s.len() == 0 {\n            \"\".to_string();\n       \
    \ } else {\n            s.to_owned()\n        }\n    }", "    let mut vowel_index\
    \ = 0;\n    let mut vowel: Option<usize> = None;\n    let mut vowel_end = None;\n\
    \    for char in word.chars() {\n        if vowel_end.is_none() {\n          \
    \  if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\
    \ {\n                vowel_index = word.chars().position(|&c| c == char).unwrap();\n\
    \                vowel = Some(vowel_index);\n                vowel_end = word.chars().position(|&c|\
    \ c == char).unwrap();\n            }\n        } else {\n            if char ==\
    \ 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n        \
    \        if vowel_index < vowel_end {\n                    vowel_index = word.chars().position(|&c|\
    \ c == char).unwrap();\n                    vowel = Some(vowel_index);\n     \
    \               vowel_end = word.chars().position(|&c| c == char).unwrap();\n\
    \                }\n            }\n        }\n    }\n    vowel.unwrap_or(word.len())",
  "    let mut vowels = vec![\"\".to_string(), \"\".to_string()];\n    vowels[0] =\
    \ \"A\".to_string();\n    vowels[1] = \"E\".to_string();\n    vowels[2] = \"I\"\
    .to_string();\n    vowels[3] = \"O\".to_string();\n    vowels[4] = \"U\".to_string();\n\
    \    vowels[5] = \"a\".to_string();\n    vowels[6] = \"e\".to_string();\n    vowels[7]\
    \ = \"i\".to_string();\n    vowels[8] = \"o\".to_string();\n    vowels[9] = \"\
    u\".to_string();\n    let mut i = 0;\n    while i < word.len() {\n        let\
    \ c = word[word.len() - 1 - i].to_lowercase();\n        if vowels.iter().any(|&s|\
    \ s.contains(&c)) {\n            return word.to_string();\n        }\n       \
    \ i += 1;\n    }\n    return \"\".to_string();", "    let mut i = word\n     \
    \   .char_indices()\n        .filter_map(|(index, element)| {\n            if\
    \ element.get(0) != None {\n                Some((index as usize, element.get(0)\
    \ as u32))\n            } else {\n                None\n            }\n      \
    \  })\n        .rposition(|(_, index)| {\n            let index = *index;\n  \
    \          word.chars().nth(index).unwrap().to_ascii_lowercase() == String::from(\"\
    a\")\n        })\n        .unwrap();\n    word.chars().nth(*i).unwrap().to_ascii_lowercase()",
  "    \n    let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n    let mut\
    \ cur_letter = word.chars().next();\n\n    cur_letter\n        .unwrap()\n   \
    \     .next()\n        .unwrap()\n        .next()\n        .unwrap()\n       \
    \ .next()\n        .unwrap()\n        .next()\n        .unwrap()\n        .next()\n\
    \        .unwrap()\n        .next()\n        .unwrap()\n        .next()\n    \
    \    .unwrap()\n        .next()\n        .unwrap()\n        .next()\n        .unwrap()\n\
    \        .next()\n        .unwrap();\n\n    for vowel in vowels {\n        if\
    \ cur_letter.unwrap() == vowel {\n            return String::from(vowel);\n  \
    \      }\n        cur_letter = cur_letter.unwrap().next();\n    }\n    String::from(\"\
    \")", "    let mut vowel = String::from(\"\");\n\n    // Check if any of vowels\
    \ are between the consonants\n    let start = word.chars().skip_while(|c| !c.is_uppercase());\n\
    \    let end = word.chars().skip_while(|c| !c.is_lowercase());\n    \n    if start.len()\
    \ == end.len() && start.len() > 0 {\n        for pos in start.rev().take(word.len()\
    \ - 1) {\n            if word.chars().next() != pos.into() {\n               \
    \ break;\n            }\n        }\n\n        if word.chars().next() == pos.into()\
    \ {\n            vowel = word.chars().take(pos + 1).collect();\n        }\n  \
    \  }\n\n    vowel", "    let mut vowel = String::from(\"\");\n    let mut last_pos\
    \ = word.rfind(\"a\").unwrap();\n    let mut first_pos = word.rfind(\"e\").unwrap();\n\
    \    let mut last_consonant = word[last_pos - 1];\n    let mut first_consonant\
    \ = word[first_pos];\n\n    while last_pos >= 0 {\n        if first_pos == 0 {\n\
    \            vowel = word[last_pos];\n            break;\n        }\n        first_pos\
    \ = word.rfind(\"e\").unwrap();\n        last_pos = word.rfind(\"a\").unwrap();\n\
    \        first_consonant = word[first_pos];\n        last_consonant = word[last_pos];\n\
    \    }\n\n    vowel", "    let mut vowels = \"aeiouAEIOU\";\n    vowels.truncate(word);\n\
    \    let mut start = String::new();\n    let mut end = String::new();\n    vowels.iter().cloned().for_each(|letter|\
    \ {\n        if word.contains(&letter) {\n            if word.ends_with(&letter)\
    \ {\n                end = &letter;\n            } else {\n                start\
    \ = &letter;\n            }\n        }\n    });\n    start == \"\" && end == \"\
    \" || \n    word.last_char()\n        .unwrap()\n        .rfind(start)\n     \
    \   .unwrap_or(word.len())\n        .rfind(end)\n        .unwrap_or(word.len())",
  "    let mut vowels: Vec<_> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for\
    \ vowel in vowels {\n        match word.rfind(vowel) {\n            None => continue,\n\
    \            Some(index) => return word.to_string() + vowel.to_string(),\n   \
    \     }\n    }\n    word.to_string()", "    let mut vowel_start = word.chars().skip(1).count();\n\
    \    let mut vowel_end = word.chars().skip_while(|c| !c.is_ascii_lowercase()).count();\n\
    \    let mut pos = word.reverse().find_first_not_ascii_lowercase();\n\n    while\
    \ vowel_start < vowel_end && pos > 0 {\n        if pos == vowel_start {\n    \
    \        vowel_start = word.chars().skip(1).count();\n            continue;\n\
    \        }\n        if pos == vowel_end {\n            vowel_end = word.chars().skip_while(|c|\
    \ !c.is_ascii_lowercase()).count();\n            continue;\n        }\n      \
    \  if word.chars()[pos].is_ascii_lowercase() {\n            vowel_start = word.chars().skip(1).count();\n\
    \            vowel_end = word.chars().skip_while(|c| !c.is_ascii_lowercase()).count();\n\
    \            pos = word.reverse().find_first_not_ascii_lowercase();\n        \
    \    continue;\n        }\n        pos = word.reverse().find_first_not_ascii_lowercase();\n\
    \    }\n    word.chars().take(vowel_start)\n        .iter()\n        .cloned()\n\
    \        .find(|&c| c.is_ascii_lowercase())\n        .unwrap_or(\"\")", "    if\
    \ word.length() > 2 && !word[word.len() - 1].is_ascii_lower() && !word[word.len()\
    \ - 2].is_ascii_lower() {\n        String::from(\"\");\n    } else {\n       \
    \ let mut index = 0;\n        let mut vowels = HashMap::new();\n        for c\
    \ in word.chars() {\n            if let Some(key) = vowels.binary_search_by(|&k|\
    \ {\n                k\n            }) {\n                if key.checked_sub(&c).is_ok()\
    \ {\n                    return String::from(\"\");\n                }\n     \
    \       } else {\n                index += 1;\n                let key = String::from(format!(\"\
    {}{}\", index, c));\n                vowels.insert(key, c).unwrap();\n       \
    \     }\n        }\n\n        let mut last_index = word.len() - 1;\n        let\
    \ mut last_vowel = String::from(\"\");\n        for c in word.chars().rev() {\n\
    \            if let Some(key) = vowels.binary_search_by(|&k| {\n             \
    \   k\n            }) {\n                if key.checked_sub(&c).is_ok() {\n  \
    \                  if last_index == 0 {\n                        last_vowel =\
    \ String::from(\"\");\n                    } else {\n                        last_vowel\
    \ = String::from(key.to_string());\n                    }\n                  \
    \  return last_vowel;\n                }\n            } else {\n             \
    \   if last_index == 0 {\n                    last_vowel = String::from(\"\");\n\
    \                } else {\n                    last_vowel = String::from(format!(\"\
    {}{}\", last_index, c));\n                }\n            }\n            last_index\
    \ = c;\n        }\n        last_vowel\n    }", "    let mut vowels: Vec<&str>\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n    let mut len = word.len();\n\
    \    while len > 0 {\n        let mut cur_pos = word.len() - 1;\n        let mut\
    \ cur_char = word[cur_pos].to_lowercase();\n        let mut vowel_found = false;\n\
    \        while !vowel_found && cur_pos >= 0 {\n            cur_pos += 1;\n   \
    \         cur_char = word[cur_pos].to_lowercase();\n            if cur_char ==\
    \ vowels.last() {\n                vowel_found = true;\n            } else {\n\
    \                let idx = vowels.binary_search(cur_char);\n                if\
    \ idx >= 0 {\n                    let (idx, next_idx) = idx;\n               \
    \     cur_pos = next_idx + 1;\n                } else {\n                    return\
    \ String::from(\"\");\n                }\n            }\n        }\n        len\
    \ -= 1;\n    }\n    return String::from(\"\");", "    let mut vowels = \"aeiouAEIOU\"\
    .chars();\n    vowels.next();\n    let mut consonants = word.chars();\n    vowels.next();\n\
    \    let mut index = word.nth_chars().unwrap();\n    if index >= word.len() {\n\
    \        return String::from(\"\");\n    }\n    while !consonants.next().unwrap().is_ascii_uppercase()\
    \ && !consonants.next().unwrap().is_ascii_lowercase() {\n        index = index\
    \ - 1;\n    }\n    while !consonants.next().unwrap().is_ascii_uppercase() {\n\
    \        index = index - 1;\n    }\n    if index >= word.len() {\n        return\
    \ String::from(\"\");\n    }\n    let mut start = index;\n    if word.chars().next().unwrap().is_ascii_uppercase()\
    \ {\n        start = 1;\n    }\n    while start < word.len() {\n        let mut\
    \ end = index;\n        if word.chars().next().unwrap().is_ascii_uppercase() {\n\
    \            end = 1;\n        }\n        if start < word.len() {\n          \
    \  while consonants.next().unwrap().is_ascii_uppercase() {\n                end\
    \ = end + 1;\n            }\n        }\n        start = start - 1;\n        if\
    \ end > word.len() {\n            end = word.len();\n        }\n        if end\
    \ == 0 {\n            break;\n        }\n        \n        if consonants.next().unwrap().is_ascii_uppercase()\
    \ {\n            if vowels.next().unwrap().is_ascii_uppercase() {\n          \
    \      return word.chars().nth(end - 1).unwrap();\n            }\n        }\n\
    \        index = end + 1;\n    }\n    return String::from(\"\");", "    let mut\
    \ left = word.chars().rposition(|c| !c.is_ascii_lowercase());\n    let mut right\
    \ = word.chars().rposition(|c| !c.is_ascii_lowercase());\n    if left == word.chars().rposition(|c|\
    \ !c.is_ascii_lowercase()) || right == word.chars().rposition(|c| !c.is_ascii_lowercase())\
    \ {\n        \"\".to_string()\n    } else {\n        if left+1 < right {\n   \
    \         word.chars().nth(left+1).unwrap().to_string()\n        } else {\n  \
    \          word.chars().nth(right-1).unwrap().to_string()\n        }\n    }",
  "    use std::cmp::Ordering;\n\n    let mut prev_char = None;\n    let mut cur_char\
    \ = None;\n\n    let mut cur_index = -1;\n    let mut prev_index = -1;\n\n   \
    \ let mut last_vowel = None;\n\n    for (index, ch) in word.chars().enumerate()\
    \ {\n        if prev_char == Some(ch) {\n            // Consonant\n          \
    \  if last_vowel == Some(prev_char) {\n                cur_index += 1;\n     \
    \       } else {\n                let vowel_str = prev_char.to_string();\n   \
    \             if cur_index == 0 {\n                    last_vowel = Some(prev_char);\n\
    \                } else {\n                    let vowel_str = last_vowel.to_string();\n\
    \                    if vowel_str.len() == 1 {\n                        return\
    \ vowel_str.to_string();\n                    } else {\n                     \
    \   let vowel_str = prev_char.to_string();\n                        let vowel_str\
    \ = vowel_str + &vowel_str[1..];\n                        return vowel_str.to_string();\n\
    \                    }\n                }\n            }\n        } else {\n \
    \           // Vowel\n            if cur_char == Some(ch) {\n                prev_index\
    \ += 1;\n            } else {\n                let vowel_str = cur_char.to_string();\n\
    \                if prev_index == 0 {\n                    last_vowel = Some(cur_char);\n\
    \                } else {\n                    let vowel_str = last_vowel.to_string();\n\
    \                    if vowel_str.len() == 1 {\n                        return\
    \ vowel_str.to_string();\n                    } else {\n                     \
    \   let vowel_str = cur_char.to_string();\n                        let vowel_str\
    \ = vowel_str + &vowel_str[1..];\n                        return vowel_str.to_string();\n\
    \                    }\n                }\n            }\n        }\n\n      \
    \  prev_char = Some(ch);\n        cur_char = Some(ch);\n    }\n\n    \"\".to_string()",
  "    word.chars()\n        .skip(2)\n        .filter(|c| c.to_lowercase() == c)\n\
    \        .take_while(|c| c.is_vowel())\n        .map(|c| c.to_uppercase())\n \
    \       .collect()", "    let mut index = 0;\n    let mut current = 0;\n    let\
    \ mut index1 = 0;\n    let mut current1 = 0;\n    let mut index2 = 0;\n    let\
    \ mut current2 = 0;\n    while index < word.len() {\n        index1 = word.len()\
    \ - index;\n        index2 = word.len() - index1;\n        current1 = word[index1]\
    \ as char;\n        current2 = word[index2] as char;\n        current = word[index]\
    \ as char;\n        if current == 'a' || current == 'e' || current == 'i' || current\
    \ == 'o' || current == 'u' || current == 'A' || current == 'E' || current == 'I'\
    \ || current == 'O' || current == 'U' {\n            index = index + 1;\n    \
    \        continue;\n        }\n        if current2 > current1 {\n            index\
    \ = index + 1;\n            continue;\n        }\n        return String::new();\n\
    \    }\n    return String::from();", "    let mut vowels = vec!['I', 'E', 'O',\
    \ 'U'];\n    let mut counter = 0;\n    for i in word[..].chars() {\n        if\
    \ vowels.contains(&i) && vowels.iter().any(|&y| y == i as char) {\n          \
    \  counter++;\n        } else if counter > 1 && i != ' ' {\n            return\
    \ String::new();\n        }\n    }\n    String::new()", "    let mut consonant_index\
    \ = 0;\n    let mut vowel_index = 0;\n    let mut shortest_distance: isize = 0;\n\
    \    let mut shortest_vowel_letter = String::new();\n    let mut shortest_vowel_letter_index\
    \ = -1;\n    let mut current_vowel = String::from(\"u\");\n    for &c in word.chars()\
    \ {\n        if consonant_index < word.len() && c == word.chars().nth(consonant_index\
    \ + 1) {\n            consonant_index = consonant_index + 1;\n            current_vowel\
    \ = String::from(current_vowel.clone());\n        } else {\n            if vowel_index\
    \ < current_vowel.len() && current_vowel == word.chars().nth(vowel_index + 1)\
    \ {\n                vowel_index = vowel_index + 1;\n            }\n        }\n\
    \        if shortest_distance < vowel_index - consonant_index {\n            shortest_distance\
    \ = vowel_index - consonant_index;\n            shortest_vowel_letter = current_vowel;\n\
    \            shortest_vowel_letter_index = vowel_index;\n        }\n    }\n  \
    \  shortest_vowel_letter", "    let mut vowels: Vec<&'static str> = vec![\n  \
    \      \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\", \"\
    A\", \"E\", \"I\", \"O\", \"U\",\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"\
    a\", \"e\", \"i\", \"o\", \"u\", \"e\", \"i\", \"o\", \"u\",\n        \"a\", \"\
    e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"\
    i\", \"o\", \"u\",\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"e\", \"i\", \"\
    o\", \"u\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\",\n        \"U\", \"\
    a\", \"e\", \"i\", \"o\", \"u\", \"a\", \"e\", \"i\", \"o\", \"u\", \"e\", \"\
    i\", \"o\", \"u\",\n    ];\n    vowels.sort();\n    let mut current_vowels: Vec<&'static\
    \ str> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut current_index:\
    \ usize = 0;\n    let mut current_vowel_len = vowels.len();\n    while current_vowel_len\
    \ > 0 && current_index < word.len() {\n        if current_vowel_len >= 2 && word[current_index]\
    \ == vowels[current_vowel_len - 2] {\n            current_vowel_len = current_vowel_len\
    \ - 2;\n            current_vowels.push(vowels[current_vowel_len]);\n        }\
    \ else {\n            current_index += 1;\n        }\n    }\n    if current_vowel_len\
    \ > 0 {\n        if current_index == word.len() {\n            return String::from(\"\
    \");\n        }\n        let current_vowel = current_vowels[current_vowel_len\
    \ - 1];\n        let mut last_vowel = current_vowels[current_vowel_len - 2];\n\
    \        while current_vowel != last_vowel {\n            last_vowel = current_vowel;\n\
    \            current_vowel = current_vowels[current_vowel_len - 2];\n        }\n\
    \        return String::from(current_vowel);\n    } else {\n        return String::from(\"\
    \");\n    }", "    let mut i = word.len();\n    while i >= 0 && is_vowel(&word[i..])\
    \ {\n        i--;\n    }\n    word.to_owned()[i as usize..].chars().next().unwrap()",
  "    let mut iter = word.chars().rposition(|x| x.is_vowel());\n    if iter == word.chars().len()\
    \ {\n        return String::from(\"\");\n    }\n    let mut vowel = String::from(\"\
    \");\n    iter += 1;\n    while iter != word.chars().rposition(|x| x.is_vowel())\
    \ {\n        if iter.index() - word.chars().rposition(|x| x.is_vowel()) <= 2 {\n\
    \            return vowel;\n        }\n        vowel = vowel.clone();\n      \
    \  iter += 1;\n    }\n    vowel", "    let mut vowels = \"AEIOUaeiou\".chars().collect::<Vec<char>>();\n\
    \    vowels.sort();\n    let mut current_vowel = vowels.len() - 1;\n    for &c\
    \ in word.chars() {\n        if c.is_uppercase() {\n            current_vowel\
    \ += 1;\n        }\n        if c == 'U' {\n            current_vowel -= 1;\n \
    \       }\n        if current_vowel == -1 {\n            return String::new();\n\
    \        }\n        if current_vowel == 0 && c == 'U' {\n            current_vowel\
    \ -= 1;\n        }\n        if current_vowel == 0 && c == 'a' {\n            current_vowel\
    \ += 1;\n        }\n        if current_vowel == 0 && c == 'A' {\n            current_vowel\
    \ += 1;\n        }\n    }\n    if current_vowel == -1 {\n        return String::new();\n\
    \    }\n    if current_vowel == 0 && c == 'a' {\n        current_vowel -= 1;\n\
    \    }\n    if current_vowel == 0 && c == 'A' {\n        current_vowel -= 1;\n\
    \    }\n    vowels[current_vowel]", "    \n    if word.len() == 0 {\n        return\
    \ String::from(\"\");\n    }\n    \n    let mut pos = word.len();\n    \n    for\
    \ letter in word.chars().skip_while(|c| *c != 'a' && *c != 'e' && *c != 'i' &&\
    \ *c != 'o' && *c != 'u') {\n        let mut curr_pos = pos;\n        for _ in\
    \ 0..3 {\n            pos = pos - 1;\n            if pos < word.len() {\n    \
    \            if let Some(v) = word[pos].as_ref() {\n                    if let\
    \ Some(vowel) = (*v as char).to_uppercase() {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ pos == word.len() {\n            return String::from(\"\");\n        }\n   \
    \     \n        let mut curr_word = word;\n        \n        let mut prev_vowel\
    \ = String::from(\"\");\n        for _ in 0..3 {\n            curr_word = curr_word.chars().next().unwrap().to_string();\n\
    \            if let Some(v) = curr_word.chars().skip_while(|c| *c != 'a' && *c\
    \ != 'e' && *c != 'i' && *c != 'o' && *c != 'u') {\n                if let Some(vowel)\
    \ = (*v as char).to_uppercase() {\n                    if curr_pos == 0 {\n  \
    \                      prev_vowel = vowel;\n                    } else {\n   \
    \                     if prev_vowel == vowel {\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        if prev_vowel == String::from(\"\") {\n          \
    \  return String::from(\"\");\n        }\n    }\n    \n    return String::from(prev_vowel);",
  "    word.chars().filter_map(|c| c.to_ascii_lowercase().is_vowel())\n        .find(|&c|\
    \ c > 'a')\n        .map(|i| word.chars().take_while(|c| c > 'a' && c <= 'z').nth(i))\n\
    \        .unwrap_or(\"\")", "    let mut vowels: [usize; 2] = [0; 2];\n    vowels[0]\
    \ = 0;\n    vowels[1] = word.len();\n\n    let mut index = 1;\n    let mut closest_vowel\
    \ = String::new();\n\n    while vowels[index] != 0 {\n        let mut current\
    \ = word;\n        current.as_bytes().iter().for_each(|&c| {\n            if *c\
    \ == &vowels[index] {\n                closest_vowel.push(*c);\n             \
    \   vowels[index] -= 1;\n                current.clear();\n            } else\
    \ {\n                current.push(*c);\n            }\n        });\n        index\
    \ += 1;\n    }\n\n    if vowels[1] == 0 {\n        closest_vowel.clear();\n  \
    \  }\n\n    closest_vowel", "    let mut left = 0u;\n    let mut right = word.len();\n\
    \    let mut ans = String::new();\n    while left < right {\n        if word[left].is_uppercase()\
    \ {\n            if word[right-1].is_lowercase() {\n                ans = match\
    \ word[right-1] {\n                    'a' => String::from(\"a\"),\n         \
    \           'e' => String::from(\"e\"),\n                    'i' => String::from(\"\
    i\"),\n                    'o' => String::from(\"o\"),\n                    'u'\
    \ => String::from(\"u\"),\n                    'A' => String::from(\"A\"),\n \
    \                   'E' => String::from(\"E\"),\n                    'I' => String::from(\"\
    I\"),\n                    'O' => String::from(\"O\"),\n                    'U'\
    \ => String::from(\"U\"),\n                    _ => String::from(\"\"),\n    \
    \            };\n                left = left + 1;\n                right = left\
    \ - 1;\n            } else if word[right-1].is_uppercase() {\n               \
    \ ans = match word[right-1] {\n                    'a' => String::from(\"a\"),\n\
    \                    'e' => String::from(\"e\"),\n                    'i' => String::from(\"\
    i\"),\n                    'o' => String::from(\"o\"),\n                    'u'\
    \ => String::from(\"u\"),\n                    'A' => String::from(\"A\"),\n \
    \                   'E' => String::from(\"E\"),\n                    'I' => String::from(\"\
    I\"),\n                    'O' => String::from(\"O\"),\n                    'U'\
    \ => String::from(\"U\"),\n                    _ => String::from(\"\"),\n    \
    \            };\n                left = left + 1;\n                right = right\
    \ - 1;\n            } else if word[left].is_lowercase() {\n                ans\
    \ = match word[left] {\n                    'a' => String::from(\"a\"),\n    \
    \                'e' => String::from(\"e\"),\n                    'i' => String::from(\"\
    i\"),\n                    'o' => String::from(\"o\"),\n                    'u'\
    \ => String::from(\"u\"),\n                    'A' => String::from(\"A\"),\n \
    \                   'E' => String::from(\"E\"),\n                    'I' => String::from(\"\
    I\"),\n                    'O' => String::from(\"O\"),\n                    'U'\
    \ => String::from(\"U\"),\n                    _ => String::from(\"\"),\n    \
    \            };\n                right = right - 1;\n            } else {\n  \
    \              ans = match word[right] {\n                    'a' => String::from(\"\
    a\"),\n                    'e' => String::from(\"e\"),\n                    'i'\
    \ => String::from(\"i\"),\n                    'o' => String::from(\"o\"),", " \
    \   \n    let mut word = word;\n    \n    word.chars()\n        .filter_map(|x|\
    \ {\n            match x {\n                'a' => Some('e'),\n              \
    \  'e' => Some('i'),\n                'i' => Some('o'),\n                'o' =>\
    \ Some('u'),\n                'u' => Some('y'),\n                'y' => Some('g'),\n\
    \                'g' => Some('r'),\n                'r' => Some('p'),\n      \
    \          'p' => Some('t'),\n                't' => Some('s'),\n            \
    \    's' => Some('z'),\n                'z' => Some('k'),\n                'k'\
    \ => Some('l'),\n                'l' => Some('h'),\n                'h' => Some('d'),\n\
    \                'd' => Some('c'),\n                'c' => Some('f'),\n      \
    \          'f' => Some('v'),\n                'v' => Some('B'),\n            \
    \    'B' => Some('N'),\n                'N' => Some('J'),\n                'J'\
    \ => Some('Z'),\n                'Z' => Some('L'),\n                'L' => Some('H'),\n\
    \                'H' => Some('V'),\n                'V' => Some('D'),\n      \
    \          'D' => Some('C'),\n                'C' => Some('F'),\n            \
    \    'F' => Some('V'),\n                'V' => Some('P'),\n                'P'\
    \ => Some('K'),\n                'K' => Some('J'),\n                'J' => Some('Z'),\n\
    \                'Z' => Some('L'),\n                'L' => Some('H'),\n      \
    \          'H' => Some('V'),\n                'V' => Some('D'),\n            \
    \    'D' => Some('C'),\n                'C' => Some('F'),\n                'F'\
    \ => Some('V'),\n                'V' => Some('P'),\n                'P' => Some('K'),\n\
    \                'K' => Some('J'),\n                'J' => Some('Z'),\n      \
    \          'Z' => Some('L'),\n                'L' => Some('H'),\n            \
    \    'H' => Some('V'),\n                'V' => Some('D'),\n                'D'\
    \ => Some('C'),\n                'C' => Some('F'),\n                'F' => Some('V'),\n\
    \                'V' => Some('P'),\n                'P' => Some('K'),\n      \
    \          'K' => Some('J'),\n                'J' => Some('Z'),\n            \
    \    'Z' => Some('L'),\n                'L' => Some('H'),\n                'H'\
    \ => Some('V'),\n                'V' => Some('D'),\n                'D' => Some('C'),\n\
    \                'C' => Some('", "    let mut counter = 0;\n    let mut vowel_index\
    \ = 0;\n    let mut last_vowel_index = 0;\n    let mut letter_counter = 0;\n \
    \   let mut last_letter_index = 0;\n    let mut first_letter_index = 0;\n    let\
    \ mut next_letter_index = 0;\n    \n    for letter in word.as_str().chars().nth(word.len())\
    \ {\n        letter_counter = letter_counter + 1;\n        \n        if letter\
    \ == 'a' || letter == 'A' {\n            if counter == 0 {\n                first_letter_index\
    \ = letter;\n            }\n            counter = counter + 1;\n        }\n  \
    \      \n        if letter == 'e' || letter == 'E' {\n            if counter ==\
    \ 0 {\n                last_letter_index = letter;\n            }\n          \
    \  counter = counter + 1;\n        }\n        \n        if letter == 'u' || letter\
    \ == 'U' {\n            if counter == 0 {\n                next_letter_index =\
    \ letter;\n            }\n            counter = counter + 1;\n        }\n    }\n\
    \    \n    if vowel_index == 0 {\n        return String::from(\"\");\n    }\n\
    \    \n    if letter_counter <= 2 {\n        return String::from(\"\");\n    }\n\
    \    \n    let mut vowel = String::from(\"\");\n    \n    // check first letter\n\
    \    if vowel_index == first_letter_index {\n        vowel = vowel.clone();\n\
    \        vowel = vowel.to_string().push_str(&vowel[vowel.len()-1]);\n    }\n \
    \   \n    // check last letter\n    if vowel_index == last_letter_index {\n  \
    \      vowel = vowel.clone();\n        vowel = vowel.to_string().push_str(&vowel[vowel.len()-1]);\n\
    \    }\n    \n    // check next letter\n    if vowel_index == next_letter_index\
    \ {\n        vowel = vowel.clone();\n        vowel = vowel.to_string().push_str(&vowel[vowel.len()-1]);\n\
    \    }\n    \n    vowel", "    // Your code here\n    let mut vowels = Vec::new();\n\
    \    vowels.push(String::from(\"a\"));\n    vowels.push(String::from(\"e\"));\n\
    \    vowels.push(String::from(\"i\"));\n    vowels.push(String::from(\"o\"));\n\
    \    vowels.push(String::from(\"u\"));\n    vowels.push(String::from(\"A\"));\n\
    \    vowels.push(String::from(\"E\"));\n    vowels.push(String::from(\"I\"));\n\
    \    vowels.push(String::from(\"O\"));\n    vowels.push(String::from(\"U\"));\n\
    \n    let mut current_vowel = String::from(\"\");\n    let mut last_vowel = String::from(\"\
    \");\n\n    for c in word.chars() {\n        if c.to_ascii_lowercase() == 'a'\
    \ {\n            current_vowel = String::from(\"\");\n            last_vowel =\
    \ String::from(\"\");\n        } else if c.to_ascii_lowercase() == 'e' {\n   \
    \         current_vowel = String::from(\"\");\n            last_vowel = String::from(\"\
    \");\n        } else if c.to_ascii_lowercase() == 'i' {\n            current_vowel\
    \ = String::from(\"\");\n            last_vowel = String::from(\"\");\n      \
    \  } else if c.to_ascii_lowercase() == 'o' {\n            current_vowel = String::from(\"\
    \");\n            last_vowel = String::from(\"\");\n        } else if c.to_ascii_lowercase()\
    \ == 'u' {\n            current_vowel = String::from(\"\");\n            last_vowel\
    \ = String::from(\"\");\n        } else if c.to_ascii_lowercase() == 'A' {\n \
    \           current_vowel = String::from(\"\");\n            last_vowel = String::from(\"\
    \");\n        } else if c.to_ascii_lowercase() == 'E' {\n            current_vowel\
    \ = String::from(\"\");\n            last_vowel = String::from(\"\");\n      \
    \  } else if c.to_ascii_lowercase() == 'I' {\n            current_vowel = String::from(\"\
    \");\n            last_vowel = String::from(\"\");\n        } else if c.to_ascii_lowercase()\
    \ == 'O' {\n            current_vowel = String::from(\"\");\n            last_vowel\
    \ = String::from(\"\");\n        } else if c.to_ascii_lowercase() == 'U' {\n \
    \           current_vowel = String::from(\"\");\n            last_vowel = String::from(\"\
    \");\n        } else {\n            let current_vowel = vowels.iter().find(|&vowel|\
    \ vowel == c).unwrap();\n            let last_vowel = vowels.iter().rfind(|&vowel|\
    \ vowel == c).unwrap();\n        }\n\n        if last_vowel > current_vowel {\n\
    \            return String::from(\"\");\n        }\n    }\n    current_vowel",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    vowels.iter().cloned().find(|w| word.chars().any(|c| w[c] as char == c))\n\
    \        .unwrap_or_else(|| word.to_owned())", "    let mut vowel_counts: Vec<i32>\
    \ = vec![];\n    let mut char_counts = word.chars().map(|c| c.to_ascii_lowercase().as_bytes()).collect::<Vec<u8>>();\n\
    \    let vowel = if char_counts.len() == 0 {\n        \"\".to_string()\n    }\
    \ else if char_counts.iter().any(|&b| b == 0x55 || b == 0xAA) {\n        \"a\"\
    \n    } else {\n        \"e\"\n    };\n\n    for &b in &char_counts {\n      \
    \  if *b == vowel {\n            vowel_counts.push(*b);\n        }\n    }\n\n\
    \    let mut min_count = i32::MAX;\n    let mut min_char_index = 0;\n\n    for\
    \ i in 0..vowel_counts.len() {\n        let count = vowel_counts[i];\n       \
    \ if count < min_count {\n            min_count = count;\n            min_char_index\
    \ = i;\n        }\n    }\n\n    word.chars().nth(min_char_index + 1).unwrap()",
  "    let mut vowel_pos: Vec<usize> = vec![];\n    let vowels = vec![\n        'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n\
    \        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    ];\n    let consonants\
    \ = vec![\n        'B', 'C', 'D', 'F', 'G', 'H', 'J', 'L', 'M', 'N', 'P', 'Q',\
    \ 'R', 'S', 'T', 'W',\n        'Y', 'Z'\n    ];\n    for vowel in vowels.iter()\
    \ {\n        if word.contains(&vowel) {\n            vowel_pos.push(vowels.iter().position(|x|\
    \ x == vowel).unwrap());\n        }\n    }\n    if vowel_pos.len() > 0 {\n   \
    \     let vowel_pos = vowel_pos.iter().max().unwrap() as usize;\n        let vowel\
    \ = vowels[vowel_pos as usize];\n        let consonant_pos = word.rfind(' ').unwrap()\
    \ - 1;\n        let mut current_pos = consonant_pos;\n        while current_pos\
    \ >= 0 {\n            if word.contains(&consonants[current_pos]) {\n         \
    \       if current_pos == 0 {\n                    return String::from(vowel);\n\
    \                } else if current_pos == consonant_pos {\n                  \
    \  current_pos -= 1;\n                } else {\n                    current_pos\
    \ += 1;\n                }\n            } else {\n                current_pos\
    \ -= 1;\n            }\n        }\n    }\n    \"\"", "    let mut vowels = HashMap::new();\n\
    \    for letter in word.chars().skip(1).filter(|&c| c.is_uppercase()) {\n    \
    \    vowels.entry(letter).or_insert(0);\n    }\n\n    let vowels_len = vowels.len();\n\
    \    let mut index = word.len() - 1;\n    while vowels.get(&(word.chars()[index].unwrap())).unwrap()\
    \ < vowels_len {\n        index -= 1;\n    }\n    if index < 0 {\n        return\
    \ String::new();\n    }\n\n    let mut start = index;\n    while vowels.get(&(word.chars()[start].unwrap())).unwrap()\
    \ >= vowels_len {\n        start += 1;\n    }\n\n    let mut end = index;\n  \
    \  while vowels.get(&(word.chars()[end].unwrap())).unwrap() >= vowels_len {\n\
    \        end += 1;\n    }\n    let mut result = String::new();\n    while start\
    \ > 0 || end < word.len() - 1 {\n        if vowels.get(&(word.chars()[start].unwrap())).unwrap()\
    \ < vowels_len {\n            start -= 1;\n        } else {\n            end +=\
    \ 1;\n        }\n\n        if vowels.get(&(word.chars()[end].unwrap())).unwrap()\
    \ < vowels_len {\n            end -= 1;\n        } else {\n            result.push_str(&(word.chars()[start].unwrap()));\n\
    \            start = end;\n        }\n    }\n\n    result", "    if word.chars().any(|c|\
    \ !c.is_letter()) {\n        return String::from(\"\");\n    }\n    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut letter_pos: Vec<usize>\
    \ = vec![];\n    for letter in word.chars() {\n        if letter.is_vowel() {\n\
    \            vowels.push(letter);\n        }\n        if letter.is_consonant()\
    \ {\n            letter_pos.push((word.len() - letter.len() - 1, letter));\n \
    \       }\n    }\n    if letter_pos.is_empty() {\n        return String::from(\"\
    \");\n    }\n    let mut min = *letter_pos.last().unwrap();\n    let mut max =\
    \ *letter_pos.last().unwrap();\n    for &(index, letter) in letter_pos {\n   \
    \     if index == 0 {\n            continue;\n        }\n        min = *letter_pos.last().unwrap();\n\
    \        max = *letter_pos.last().unwrap();\n        if min <= max {\n       \
    \     if letter == vowels[min] {\n                return String::from(vowels[min]);\n\
    \            }\n        }\n    }\n    String::from(\"\")", "    let mut vowels\
    \ = vec![\"\"; 5];\n    for (i, c) in word.chars().enumerate() {\n        if c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            return\
    \ String::from(\"\");\n        }\n        if i > 0\n            && i > word.len()\
    \ - c\n            && word.chars().nth(i).unwrap() == 'a'\n            && word.chars().nth(i\
    \ + 1).unwrap() == 'u'\n        {\n            vowels[0] = \"u\".to_string();\n\
    \            vowels[2] = \"U\".to_string();\n            vowels[4] = \"r\".to_string();\n\
    \        }\n        if i > 0\n            && i > word.len() - c\n            &&\
    \ word.chars().nth(i).unwrap() == 'e'\n            && word.chars().nth(i + 1).unwrap()\
    \ == 'i'\n        {\n            vowels[2] = \"i\".to_string();\n            vowels[4]\
    \ = \"e\".to_string();\n            vowels[5] = \"r\".to_string();\n        }\n\
    \        if i > 0\n            && i > word.len() - c\n            && word.chars().nth(i).unwrap()\
    \ == 'o'\n            && word.chars().nth(i + 1).unwrap() == 'u'\n        {\n\
    \            vowels[4] = \"o\".to_string();\n            vowels[5] = \"r\".to_string();\n\
    \            vowels[6] = \"r\".to_string();\n        }\n        if i > 0\n   \
    \         && i > word.len() - c\n            && word.chars().nth(i).unwrap() ==\
    \ 'a'\n            && word.chars().nth(i + 1).unwrap() == 'a'\n        {\n   \
    \         vowels[5] = \"a\".to_string();\n            vowels[6] = \"a\".to_string();\n\
    \            vowels[7] = \"a\".to_string();\n        }\n        if i > 0\n   \
    \         && i > word.len() - c\n            && word.chars().nth(i).unwrap() ==\
    \ 'e'\n            && word.chars().nth(i + 1).unwrap() == 'e'\n        {\n   \
    \         vowels[7] = \"e\".to_string();\n            vowels[9] = \"e\".to_string();\n\
    \            vowels[10] = \"e\".to_string();\n        }\n    }\n    vowels\n \
    \       .iter()\n        .find_map(|&vowel| vowel.to_string())\n        .unwrap_or_else(||\
    \ String::from(\"\"))", "    let mut vowel = String::new();\n    let mut consonant\
    \ = String::new();\n    let mut left_idx = word.rfind(\"a\");\n    let mut right_idx\
    \ = word.rfind(\"z\");\n    while left_idx != String::npos && right_idx != String::npos\
    \ {\n        if left_idx > right_idx {\n            vowel.push(word[left_idx -\
    \ 1]);\n            consonant = word[left_idx - 1];\n        } else {\n      \
    \      vowel.push(word[right_idx - 1]);\n            consonant = word[right_idx\
    \ - 1];\n        }\n        left_idx = word.rfind(\"a\", left_idx + 1);\n    \
    \    right_idx = word.rfind(\"z\", right_idx + 1);\n    }\n    if left_idx ==\
    \ String::npos && right_idx == String::npos {\n        vowel.push(word[0]);\n\
    \        consonant = word[0];\n    } else {\n        vowel.push_str(\"u\");\n\
    \        consonant.push_str(\"U\");\n    }\n    vowel", "    let vowels: Vec<&'static\
    \ str> = vec![\n        \"A\",\"E\",\"I\",\"O\",\"U\",\n    ];\n\n    let mut\
    \ vowel_index = 0;\n    let mut vowel_found = vowels.iter().position(|&x| word.chars().any(|&y|\
    \ y == x));\n\n    if vowel_found == vowels.len() {\n        return \"\".to_string();\n\
    \    }\n\n    if vowel_found < vowels.len() {\n        vowel_index += vowel_found;\n\
    \    } else {\n        vowel_index = vowel_index + vowels.len() - vowels.iter().rposition(|&x|\
    \ word.chars().any(|&y| y == x));\n    }\n\n    vowels[vowel_index..].iter().enumerate().filter(|&(i,\
    \ &x)| word.chars().any(|&y| y == x)).next().unwrap().0", "    let mut vowel_position\
    \ = 0;\n    \n    // Iterate over the word, finding vowels starting from the right\n\
    \    word.chars().for_each(|c|{\n        match c {\n            'A' => vowel_position\
    \ += 1,\n            'E' => vowel_position += 1,\n            'I' => vowel_position\
    \ += 1,\n            'O' => vowel_position += 1,\n            'U' => vowel_position\
    \ += 1,\n            'a' => vowel_position += 1,\n            'e' => vowel_position\
    \ += 1,\n            'i' => vowel_position += 1,\n            'o' => vowel_position\
    \ += 1,\n            'u' => vowel_position += 1,\n            'A' => {\n     \
    \           vowel_position += 2;\n            },\n            'E' => {\n     \
    \           vowel_position += 2;\n            },\n            'I' => {\n     \
    \           vowel_position += 2;\n            },\n            'O' => {\n     \
    \           vowel_position += 2;\n            },\n            'U' => {\n     \
    \           vowel_position += 2;\n            },\n            'a' => {\n     \
    \           vowel_position += 2;\n            },\n            'e' => {\n     \
    \           vowel_position += 2;\n            },\n            'i' => {\n     \
    \           vowel_position += 2;\n            },\n            'o' => {\n     \
    \           vowel_position += 2;\n            },\n            'u' => {\n     \
    \           vowel_position += 2;\n            },\n            _ => ()\n      \
    \  }\n    });\n\n    // If the word contains vowel and there is no other consonant\
    \ at the right side\n    if word.chars().any(|c|{\n        match c {\n       \
    \     'A' => vowel_position += 2,\n            'E' => vowel_position += 2,\n \
    \           'I' => vowel_position += 2,\n            'O' => vowel_position +=\
    \ 2,\n            'U' => vowel_position += 2,\n            'a' => vowel_position\
    \ += 2,\n            'e' => vowel_position += 2,\n            'i' => vowel_position\
    \ += 2,\n            'o' => vowel_position += 2,\n            'u' => vowel_position\
    \ += 2,\n            'A' => {\n                vowel_position += 1;\n        \
    \    },\n            'E' => {\n                vowel_position += 1;\n        \
    \    },\n            'I' => {\n                vowel_position += 1;\n        \
    \    },\n            'O' => {\n                vowel_position += 1;\n        \
    \    },\n            'U' => {\n                vowel_position += 1;\n        \
    \    },\n            'a' => {\n                vowel_position += 1;\n        \
    \    },\n            'e' => {\n                vowel_position += 1;\n        \
    \    },\n            'i' => {\n                vowel_position += 1;\n        \
    \    },\n            'o' => {", "    if let Some(vowel_index) = find_vowel(word)\
    \ {\n        word.split_last_mut().collect::<Vec<&str>>().iter().skip_while(|&c|\
    \ !is_consonant(c)).enumerate().find_map(|&(i, &c)| c ==\n            word.chars().skip(i).take(1).next().unwrap()).unwrap().0\n\
    \    } else {\n        String::from(\"\")\n    }", "    let mut s = String::from(\"\
    u\");\n    if word.len() == 0 {\n        return s;\n    }\n\n    let mut vowels\
    \ = String::from(\"aeiouy\");\n    if let Some(vowel) = vowels.split_last_mut().filter(|&s|\
    \ !s.is_empty()) {\n        if word.len() > vowel.len() {\n            vowels\
    \ = vowel.clone();\n        }\n    }\n\n    let mut s = String::from(\"u\");\n\
    \    if word.len() == 0 {\n        return s;\n    }\n\n    let mut vowels = String::from(\"\
    aeiouy\");\n    if let Some(vowel) = vowels.split_last_mut().filter(|&s| !s.is_empty())\
    \ {\n        if word.len() > vowel.len() {\n            vowels = vowel.clone();\n\
    \        }\n    }\n    for c in word.chars().rev() {\n        if vowels.contains(&c.to_ascii_lowercase())\
    \ {\n            break;\n        }\n        s = c.to_string();\n    }\n    s;",
  "    let mut vowels = vec![];\n    vowels.push_back('u');\n    vowels.push_back('U');\n\
    \    vowels.push_back('e');\n    vowels.push_back('E');\n    vowels.push_back('i');\n\
    \    vowels.push_back('I');\n    vowels.push_back('o');\n    vowels.push_back('O');\n\
    \    vowels.push_back('a');\n    vowels.push_back('A');\n    vowels.push_back('y');\n\
    \    vowels.push_back('Y');\n    vowels.push_back('o');\n    vowels.push_back('O');\n\
    \    vowels.push_back('u');\n    vowels.push_back('U');\n    vowels.push_back('e');\n\
    \    vowels.push_back('E');\n    vowels.push_back('e');\n    vowels.push_back('E');\n\
    \    vowels.push_back('i');\n    vowels.push_back('I');\n    vowels.push_back('i');\n\
    \    vowels.push_back('I');\n    vowels.push_back('o');\n    vowels.push_back('O');\n\
    \    vowels.push_back('o');\n    vowels.push_back('O');\n    vowels.push_back('u');\n\
    \    vowels.push_back('U');\n    vowels.push_back('u');\n    vowels.push_back('U');\n\
    \    vowels.push_back('e');\n    vowels.push_back('E');\n    vowels.push_back('e');\n\
    \    vowels.push_back('E');\n    vowels.push_back('e');\n    vowels.push_back('E');\n\
    \    vowels.push_back('i');\n    vowels.push_back('I');\n    vowels.push_back('i');\n\
    \    vowels.push_back('I');\n    vowels.push_back('o');\n    vowels.push_back('O');\n\
    \    vowels.push_back('o');\n    vowels.push_back('O');\n    vowels.push_back('o');\n\
    \    vowels.push_back('O');\n    vowels.push_back('u');\n    vowels.push_back('U');\n\
    \    vowels.push_back('u');\n    vowels.push_back('U');\n    vowels.push_back('y');\n\
    \    vowels.push_back('Y');\n    vowels.push_back('y');\n    vowels.push_back('Y');\n\
    \    vowels.push_back('y');\n    vowels.push_back('Y');\n    vowels.push_back('y');\n\
    \    vowels.push_back('Y');\n    vowels.push_back('y');\n    vowels.push_back('Y');\n\
    \    vowels.push_back('y');\n    vowels.push_back", "    let mut vowel = String::new();\n\
    \    let mut start = 0;\n    let mut end = word.len() - 1;\n    loop {\n     \
    \   if start == end {\n            if start == 0 {\n                vowel.push('A');\n\
    \            } else {\n                vowel.push('A');\n                vowel.push('B');\n\
    \            }\n            break;\n        }\n        if word.chars().nth(start).unwrap().is_uppercase()\
    \ {\n            vowel.push('A');\n            start += 1;\n        } else {\n\
    \            vowel.push('B');\n            start -= 1;\n        }\n        if\
    \ word.chars().nth(end).unwrap().is_uppercase() {\n            vowel.push('B');\n\
    \            end -= 1;\n        } else {\n            vowel.push('A');\n     \
    \       end += 1;\n        }\n    }\n    vowel.clone() ", "    use std::cmp::Ordering;\n\
    \n    let mut vowels: Vec<&str> = vec![\n        \"a\", \"e\", \"i\", \"o\", \"\
    u\", \"A\", \"E\", \"I\", \"O\", \"U\",\n    ];\n    let mut vowels_end = vec![\n\
    \        \"y\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\",\n    ];\n\n    let mut vowels_end = vowels_end.iter().rev().collect();\n\
    \    let mut vowels_it = vowels.iter();\n    \n    // find first vowel\n    let\
    \ mut vowel = vowels_it.next().unwrap();\n    for _ in 0..word.len() {\n     \
    \   if word.contains(&vowel) {\n            if vowels_it.peek() == Some(&vowel)\
    \ {\n                vowel = vowels_it.next().unwrap();\n            } else {\n\
    \                return String::from(\"\");\n            }\n        }\n    }\n\
    \n    let mut vowel_found = false;\n    // find second vowel\n    let mut vowel_end\
    \ = 0;\n    while !vowel_found && vowel_end + 1 != word.len() {\n        if word.contains(&vowels[vowel_end])\
    \ { // find right most vowel\n            vowel_end = vowels_end.index(&vowels[vowel_end]).unwrap();\n\
    \        } else {\n            vowel_end += 1;\n        }\n        if vowel_end\
    \ + 1 == word.len() { // if end of word, no more vowels\n            vowel_found\
    \ = true;\n        }\n    }\n    if vowel_end == word.len() { // if no second\
    \ vowel, return empty string\n        return String::from(\"\");\n    }\n\n  \
    \  if vowel_end < word.len() {\n        return String::from(\"\");\n    }\n\n\
    \    // find last vowel\n    let mut vowel_end_last = word.len() - 1;\n    while\
    \ !vowel_found && vowel_end_last >= 0 {\n        if word.contains(&vowels[vowel_end_last])\
    \ {\n            vowel_end_last -= 1;\n        } else {\n            vowel_end_last\
    \ -= 1;\n        }\n        vowel = vowels_it.next().unwrap();\n        if vowel_end_last\
    \ >= 0 {\n            if word.contains(&vowels[vowel_end_last]) {\n          \
    \      vowel_end_last -= 1;\n            } else {\n                vowel_end_last\
    \ -= 1;\n            }\n        }\n        if vowel_end_last < 0 {\n         \
    \   vowel_found = true;\n        }\n    }\n\n    if vowel_end_last >= 0 {\n  \
    \      return String::from(\"\");\n    }\n\n    vowel.to_string()", "    // TODO:\
    \ implement function\n    let mut vowel = String::new();\n\n    // find the vowel\n\
    \    let vowels = vec![\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"\n    ];\n    vowels.iter().position(|&vowel| *vowel ==\
    \ word.chars().last().unwrap()).unwrap();\n\n    // get the index of the next\
    \ consonants\n    let mut nextIndex: usize = 0;\n    let mut index = 0;\n    while\
    \ vowel > 0 {\n        nextIndex = (nextIndex + vowel) % vowels.len();\n     \
    \   index += vowels[nextIndex];\n        vowel -= vowels[index];\n    }\n\n  \
    \  // return the found vowel\n    vowel", "    let word = word.to_lowercase();\n\
    \n    let mut vowel = String::new();\n    let mut current = 0;\n    let mut current_vowel\
    \ = String::new();\n\n    for c in word.chars() {\n        match c.to_lowercase().as_str()\
    \ {\n            \"a\" | \"e\" | \"i\" | \"o\" | \"u\" => {\n                if\
    \ current < word.len() - 1 {\n                    current += 1;\n            \
    \        current_vowel = word.chars().nth(current).unwrap();\n               \
    \ }\n                vowel.push_str(current_vowel);\n            }\n         \
    \   \"y\" => {\n                if current < word.len() - 2 {\n              \
    \      current += 1;\n                    current_vowel = word.chars().nth(current).unwrap();\n\
    \                }\n                vowel.push_str(current_vowel);\n         \
    \   }\n            \"u\" => {\n                if current < word.len() - 2 {\n\
    \                    current += 1;\n                    current_vowel = word.chars().nth(current).unwrap();\n\
    \                }\n                vowel.push_str(current_vowel);\n         \
    \   }\n            \"i\" => {\n                if current < word.len() - 1 {\n\
    \                    current += 1;\n                    current_vowel = word.chars().nth(current).unwrap();\n\
    \                }\n                vowel.push_str(current_vowel);\n         \
    \   }\n            \"e\" => {\n                if current < word.len() - 2 {\n\
    \                    current += 1;\n                    current_vowel = word.chars().nth(current).unwrap();\n\
    \                }\n                vowel.push_str(current_vowel);\n         \
    \   }\n            \"o\" => {\n                if current < word.len() - 1 {\n\
    \                    current += 1;\n                    current_vowel = word.chars().nth(current).unwrap();\n\
    \                }\n                vowel.push_str(current_vowel);\n         \
    \   }\n            _ => (),\n        }\n    }\n\n    vowel", "    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut index = word.len();\n\
    \    let mut last_index = -1;\n    while index > 0 {\n        last_index = index\
    \ - 1;\n        index = word.rfind('a', last_index);\n        if index != -1 {\n\
    \            vowels.push(word[index..]);\n        }\n    }\n    \n    for vowel\
    \ in vowels.iter() {\n        if word.contains(vowel) {\n            return vowel;\n\
    \        }\n    }\n    \n    return \"\";", "    let mut vowel_position = 1;\n\
    \    let mut consonant_position = 1;\n    let mut previous_consonant_position\
    \ = 1;\n    let mut previous_vowel_position = 1;\n    let mut closest_vowel =\
    \ String::from(\"\");\n    let mut consonant_flag = false;\n    let mut vowel_flag\
    \ = false;\n    let mut consonant_count = word.len();\n    let mut vowel_count\
    \ = word.len();\n    let mut vowel_index = 0;\n    let mut consonant_index = word.len();\n\
    \    let mut closest_vowel_flag = false;\n    while consonant_index > 0 {\n  \
    \      if consonant_flag {\n            consonant_index -= 1;\n        } else\
    \ {\n            consonant_flag = true;\n            consonant_count -= 1;\n \
    \           if word.chars().nth(consonant_position).unwrap().is_uppercase() {\n\
    \                consonant_count += 1;\n            }\n        }\n        if vowel_index\
    \ > 0 {\n            if vowel_flag {\n                vowel_index -= 1;\n    \
    \        } else {\n                vowel_flag = true;\n                vowel_count\
    \ -= 1;\n                if word.chars().nth(vowel_position).unwrap().is_lowercase()\
    \ {\n                    vowel_count += 1;\n                }\n            }\n\
    \        }\n        if vowel_count <= consonant_count {\n            closest_vowel\
    \ = word.chars().nth(vowel_index).unwrap();\n            break;\n        }\n \
    \       if consonant_count <= vowel_count {\n            closest_vowel = word.chars().nth(consonant_index).unwrap();\n\
    \            break;\n        }\n        if consonant_count < vowel_count {\n \
    \           previous_consonant_position = consonant_position;\n            consonant_position\
    \ = consonant_index + 1;\n            closest_vowel = word.chars().nth(consonant_position).unwrap();\n\
    \            consonant_flag = false;\n            consonant_index -= 1;\n    \
    \    }\n        if vowel_count < consonant_count {\n            previous_vowel_position\
    \ = vowel_position;\n            vowel_position = vowel_index + 1;\n         \
    \   closest_vowel = word.chars().nth(vowel_position).unwrap();\n            vowel_flag\
    \ = false;\n            vowel_index -= 1;\n        }\n        closest_vowel_flag\
    \ = true;\n    }\n    closest_vowel.to_string()", "    let mut vowels = vec![\"\
    a\",\"e\",\"i\",\"o\",\"u\"];\n    let mut first_char = word.chars().next();\n\
    \    let mut last_char = first_char.cloned();\n    let mut i = 0;\n    loop {\n\
    \        \n        if first_char.map_or(false, |c| c.is_uppercase())\n       \
    \ {\n            if let Some(c) = vowels.remove(first_char.clone()) {\n      \
    \          if let Some(next) = vowels.remove(last_char.clone()) {\n          \
    \          return c.to_string();\n                }\n            }\n        }\n\
    \        else if last_char.map_or(false, |c| c.is_uppercase())\n        {\n  \
    \          if let Some(c) = vowels.remove(last_char.clone()) {\n             \
    \   if let Some(next) = vowels.remove(first_char.clone()) {\n                \
    \    return c.to_string();\n                }\n            }\n        }\n    \
    \    last_char = first_char.clone();\n        i = i + 1;\n        first_char =\
    \ word.chars().nth(i).unwrap();\n    }\n    \n    \"\".to_string()", "    fn get_vowel(&mut\
    \ self, i: usize) -> &'static str {\n        if self.word[i] == vowels.as_slice()[i\
    \ - 2] {\n            return &vowels[i - 2];\n        }\n        if self.word[i]\
    \ == vowels.as_slice()[i - 1] {\n            return &vowels[i - 1];\n        }\n\
    \        if self.word[i] == vowels.as_slice()[i] {\n            return &vowels[i];\n\
    \        }\n        if self.word[i] == vowels.as_slice()[i + 1] {\n          \
    \  return &vowels[i + 1];\n        }\n        if self.word[i] == vowels.as_slice()[i\
    \ + 2] {\n            return &vowels[i + 2];\n        }\n        return &vowels[i\
    \ - 1];\n    }\n    if word.is_empty() {\n        return \"\";\n    }\n    let\
    \ mut vowel_index = 1;\n    let mut next_vowel_index = 1;\n    let mut consonant_index\
    \ = -1;\n    let mut current_vowel = get_vowel(vowel_index);\n    for character\
    \ in word.chars().skip_while(|c| {\n        match c {\n            c => c < 'a'\
    \ || c > 'z' || *c != 'a' || *c != 'e' || *c != 'i' || *c != 'o' || *c != 'u'\
    \ || *c != 'y' => {\n                return \"\";\n            },\n          \
    \  _ => {},\n        }\n    }) {\n        if character == current_vowel {\n  \
    \          if next_vowel_index == vowel_index + 1 {\n                vowel_index\
    \ += 1;\n            } else {\n                next_vowel_index += 1;\n      \
    \          consonant_index = vowel_index;\n                vowel_index = next_vowel_index;\n\
    \                next_vowel_index = 1;\n            }\n            current_vowel\
    \ = get_vowel(vowel_index);\n        } else {\n            if next_vowel_index\
    \ == vowel_index + 1 {\n                vowel_index += 1;\n            } else\
    \ {\n                next_vowel_index += 1;\n                consonant_index =\
    \ vowel_index;\n                vowel_index = next_vowel_index;\n            \
    \    next_vowel_index = 1;\n            }\n            current_vowel = get_vowel(vowel_index);\n\
    \        }\n    }\n    if consonant_index == 0 {\n        return \"\";\n    }\n\
    \    get_vowel(consonant_index - 1)", "    let mut result = String::new();\n \
    \   word.chars().skip_while(|c| c != ' ').for_each(|c| {\n        if !c.is_uppercase()\
    \ {\n            result.push(c);\n        }\n    });\n    match result {\n   \
    \     \"\" => \"\",\n        c => {\n            if c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U' {\n                result += 'A';\n         \
    \   }\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n                result += 'E';\n            }\n            if c == 'u' ||\
    \ c == 'a' || c == 'i' || c == 'e' || c == 'o' {\n                result += 'I';\n\
    \            }\n            if c == 'o' || c == 'u' || c == 'a' || c == 'e' ||\
    \ c == 'i' {\n                result += 'O';\n            }\n            if c\
    \ == 'e' || c == 'i' || c == 'u' || c == 'a' || c == 'o' {\n                result\
    \ += 'U';\n            }\n            if c == 'Y' || c == 'y' || c == 'i' || c\
    \ == 'o' || c == 'u' {\n                result += 'y';\n            }\n      \
    \      if c == 'Y' || c == 'y' || c == 'i' || c == 'o' || c == 'u' {\n       \
    \         result += 'Y';\n            }\n            if c == 'O' || c == 'o' ||\
    \ c == 'u' || c == 'a' || c == 'i' {\n                result += 'O';\n       \
    \     }\n            if c == 'o' || c == 'u' || c == 'a' || c == 'i' || c == 'e'\
    \ {\n                result += 'u';\n            }\n            if c == 'O' ||\
    \ c == 'o' || c == 'u' || c == 'a' || c == 'i' {\n                result += 'O';\n\
    \            }\n            if c == 'o' || c == 'u' || c == 'a' || c == 'i' ||\
    \ c == 'e' {\n                result += 'u';\n            }\n            if c\
    \ == 'D' || c == 'd' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \           result += 'd';\n            }\n            if c == 'D' || c == 'd'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                result +=\
    \ 'D';\n            }\n            if c == 'd' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'A' {\n                result += 'A';\n            }\n\
    \            if c == 'd' || c == 'e", "    if word.len() == 0 {\n        return\
    \ String::new();\n    }\n    let mut vowels = [\n        \"a\", \"e\", \"i\",\
    \ \"o\", \"u\", \"y\", \"A\", \"E\", \"I\", \"O\", \"U\", \"y\",\n    ];\n\n \
    \   let mut vowels_idx = 0usize;\n    let mut vowels_cnt = 0usize;\n    let mut\
    \ vowel_str = String::new();\n\n    vowels.iter().try_for_each(|x| {\n       \
    \ if word.starts_with(x) {\n            vowels_idx += 1;\n            vowels_cnt\
    \ += 1;\n        }\n    });\n\n    if vowels_idx > vowels_cnt {\n        return\
    \ String::new();\n    }\n    let vowel_idx = vowels_idx % vowels.len();\n\n  \
    \  let mut vowels_found = String::new();\n    let mut vowels_idx = vowel_idx.to_ascii_lowercase().len()\
    \ - 1;\n    while vowels_idx >= 0 {\n        vowels_found += vowels[vowels_idx].to_string();\n\
    \        if word.starts_with(vowels[vowels_idx]) {\n            vowels_idx -=\
    \ 1;\n        } else {\n            break;\n        }\n    }\n    vowels_found",
  "    let mut vowel_iter = get_vowel_iter();\n\n    let mut word_iter = word.chars();\n\
    \    let mut prev_word = String::new();\n\n    let mut vowel = String::new();\n\
    \    \n    loop {\n        if vowel_iter.next().is_none() {\n            vowel\
    \ = String::new();\n            break;\n        }\n        prev_word = String::from(vowel_iter.next().unwrap());\n\
    \        vowel = String::from(vowel_iter.next().unwrap());\n        vowel = vowel.trim_right();\n\
    \        if vowel.contains(&prev_word[prev_word.len()..]) {\n            break;\n\
    \        }\n    }\n\n    vowel", "    let mut vowels = String::new();\n    let\
    \ mut current_word = word;\n    while current_word.len() > 0 {\n        let mut\
    \ vowel = String::new();\n        for letter in &current_word[1..] {\n       \
    \     if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n                vowel.push(letter);\n            }\n        }\n  \
    \      if vowels.is_empty() {\n            vowels.push_str(vowel);\n        }\
    \ else {\n            vowels.push_str(&vowels[..vowels.len()].iter().collect::<String>());\n\
    \            vowels.push_str(vowel);\n        }\n        current_word = &current_word[0..current_word.len()-1];\n\
    \    }\n    vowels", "    match word.len() {\n        0 => String::from(\"\"),\n\
    \        _ => {\n            let mut pos = word.len() - 1;\n            let mut\
    \ vowel = String::from(\"\");\n            match word.chars().rev().skip(1).next()\
    \ {\n                None => break,\n                Some(c) => {\n          \
    \          if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n   \
    \                     vowel = c;\n                        pos = c - 1;\n     \
    \               }\n                }\n            }\n            word.remove(pos);\n\
    \            word.insert(pos, 'u');\n            word.insert(pos + 1, 'a');\n\
    \            word.insert(pos + 1, 'e');\n            word.insert(pos + 1, 'i');\n\
    \            word.insert(pos + 1, 'o');\n            word.insert(pos + 1, 'u');\n\
    \            word.insert(0, vowel);\n            word\n        }\n    }", "  \
    \  let vowels = [\n        \"a\",\n        \"e\",\n        \"i\",\n        \"\
    o\",\n        \"u\",\n        \"y\",\n    ];\n\n    let mut vowel_position = word.chars().nth(word.len());\n\
    \    let mut vowel_found = false;\n    let mut closest_vowel = String::new();\n\
    \n    for vowel in vowels {\n        vowel_found = false;\n        for _ch in\
    \ word.chars() {\n            if vowel == _ch.to_string().as_str() {\n       \
    \         vowel_found = true;\n                vowel_position = _ch;\n       \
    \     }\n        }\n\n        if !vowel_found {\n            break;\n        }\n\
    \    }\n\n    closest_vowel.clear();\n    if vowel_position == word.chars().nth(word.len()\
    \ - 1) {\n        if vowel_found {\n            closest_vowel.push_str(vowel);\n\
    \        }\n    } else {\n        for _ in 0..word.len() {\n            if vowel_found\
    \ {\n                closest_vowel.push_str(vowels[vowel_position.cmp(vowels[vowels.len()])]);\n\
    \                break;\n            }\n            vowel_position.next();\n \
    \       }\n    }\n\n    closest_vowel", "    fn get_vowels(s: &str) -> Vec<&str>\
    \ {\n        fn is_vowel(v: char) -> bool {\n            v.is_uppercase() && v\
    \ != 'I'\n        }\n        s.chars()\n            .filter(is_vowel)\n      \
    \      .collect::<Vec<&str>>()\n    }\n\n    fn find_vowel(word: &str, i: usize,\
    \ words: &[&str]) -> &str {\n        if i == words.len() {\n            return\
    \ words[i - 1]\n        }\n\n        if words[i - 1].is_uppercase() && words[i\
    \ - 2] == words[i - 1] {\n            find_vowel(word, i + 1, words)\n       \
    \ } else {\n            find_vowel(word, i, words)\n        }\n    }\n\n    let\
    \ vowels = get_vowels(word);\n    let mut min = std::i32::MAX;\n\n    for vowel\
    \ in &vowels {\n        let pos = word.char_indices().position(|&(idx, _)| vowel\
    \ == &word[idx]);\n        if let Some(pos) = pos {\n            let res = find_vowel(word,\
    \ pos, &vowels);\n            if min > res.len() {\n                min = res.len();\n\
    \            }\n        }\n    }\n\n    String::from(vowels[min..].iter().cloned().collect::<String>())",
  "    \n    // The first two characters will always belong to a consonant.\n    //\
    \ If we are at the right side of the word and there are less than 3 consonants,\n\
    \    // we cannot find a vowel between the consonants.\n    if word.len() < 3\
    \ {\n        return String::from(\"\");\n    }\n    \n    let mut min_vowel =\
    \ 0;\n    let mut max_vowel = word.len() - 1;\n    while min_vowel <= max_vowel\
    \ {\n        \n        // If there is a vowel between [min_vowel, max_vowel],\
    \ we can return that.\n        if word.starts_with(vowels[min_vowel..=max_vowel].iter().map(String::from).collect::<Vec<String>>())\
    \ {\n            return word.clone(); \n        }\n        \n        // Otherwise,\
    \ we have to look in the other half of the word.\n        min_vowel += 1;\n  \
    \      max_vowel -= 1;\n    }\n    \n    // If we get here, we didn't find any\
    \ vowels meeting the conditions.\n    return String::from(\"\");", "    let vowels_string\
    \ = if word.chars().any(|c| c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n        format!(\"{}{}{}{}{}{}\", c('A'), 'E', 'i', 'O', 'u', 'U')\n\
    \    } else {\n        format!(\"{}{}{}{}\", c('a'), 'e', 'i', 'o', 'u')\n   \
    \ };\n    word\n        .split_whitespace()\n        .next()\n        .split_ascii_lowercase()\n\
    \        .iter()\n        .zip(word.split_ascii_lowercase().iter())\n        .enumerate()\n\
    \        .take(word.len())\n        .map(|(i, j)| (j - i).abs() as usize - vowels_string.len())\n\
    \        .max()\n        .unwrap_or(0)\n        .to_string()", "    assert!(word.is_ascii_lowercase());\n\
    \n    // init vowels\n    let mut first_vowels = Vec::new();\n    let mut last_vowels\
    \ = Vec::new();\n    let mut second_vowels = Vec::new();\n\n    for ch in word.chars()\
    \ {\n        if !is_vowel(ch) {\n            if first_vowels.len() >= 2 {\n  \
    \              last_vowels.push(first_vowels.last().unwrap());\n            }\
    \ else {\n                break;\n            }\n        } else {\n          \
    \  first_vowels.push(ch);\n        }\n    }\n\n    for ch in word.chars() {\n\
    \        if !is_vowel(ch) {\n            if second_vowels.len() >= 2 {\n     \
    \           first_vowels.push(second_vowels.first().unwrap());\n            }\
    \ else {\n                break;\n            }\n        } else {\n          \
    \  second_vowels.push(ch);\n        }\n    }\n\n    // get closest vowels\n  \
    \  let mut first_vowels_len = first_vowels.len();\n    let mut last_vowels_len\
    \ = last_vowels.len();\n    let mut second_vowels_len = second_vowels.len();\n\
    \n    if first_vowels.len() > 0 {\n        if first_vowels_len < last_vowels_len\
    \ {\n            first_vowels_len = last_vowels_len;\n        }\n    }\n\n   \
    \ if first_vowels.len() > 0 {\n        if first_vowels_len < second_vowels_len\
    \ {\n            first_vowels_len = second_vowels_len;\n        }\n    }\n\n \
    \   if first_vowels.len() > 0 {\n        let mut vowel_one = first_vowels[first_vowels_len\
    \ - 1];\n        let mut vowel_one_prev = last_vowels[last_vowels_len - 1];\n\
    \        let mut vowel_two = second_vowels[second_vowels_len - 1];\n        let\
    \ mut vowel_two_prev = second_vowels[second_vowels_len - 1];\n\n        if vowel_one.cmp(&vowel_two)\
    \ == 0 {\n            vowel_two_prev = vowel_one;\n            vowel_two_prev\
    \ = &vowel_two;\n        }\n\n        let mut min_len = second_vowels_len + first_vowels_len;\n\
    \n        for j in 0..second_vowels_len {\n            if second_vowels[j - 1].cmp(&vowel_two)\
    \ == 0 {\n                let mut min_j = second_vowels.len();\n             \
    \   for i in 0..last_vowels_len {\n                    if second_vowels[i] - &vowel_one_prev\
    \ > &vowel_two_prev - &vowel_one {\n                        min_j = i;\n     \
    \               }\n                }\n                second_vowels[j - 1] = vowel_two;\n\
    \                second_vowels[j] = &second_vowels[min_j];\n                min_len\
    \ = min_j;\n            }\n        }\n\n        for j in 0..first_vowels_len {",
  "    if word.is_empty() {\n        String::from(\"\")\n    } else {\n        let\
    \ mut i = 0;\n        let mut min_i = 1;\n        let mut min_j = word.len();\n\
    \        while i < min_i {\n            while j >= min_j {\n                if\
    \ word[j] == Some(Some('a')) || word[j] == Some(Some('e')) || word[j] == Some(Some('i'))\
    \ || word[j] == Some(Some('o')) || word[j] == Some(Some('u')) || word[j] == Some(Some('y'))\
    \ {\n                    if i == 1 {\n                        min_j = j;\n   \
    \                 } else {\n                        min_i = i;\n             \
    \       }\n                } else {\n                    j -= 1;\n           \
    \     }\n            }\n            i += 1;\n        }\n        if min_i == 1\
    \ {\n            String::from(\"\")\n        } else {\n            word.chars().nth(min_i\
    \ - 1).unwrap().to_string()\n        }\n    }", "    if word.len() > 0 {\n   \
    \     let mut a = word[0];\n        let mut b = word[word.len() - 1];\n\n    \
    \    for i in 0..word.len() - 2 {\n            if a..=b == get_vowels(&word[i]).rev()\
    \ {\n                a = word[i];\n            }\n            b /= 2;\n      \
    \  }\n        String::from(\"\")\n    }\n    return String::from(\"\");", "  \
    \  let mut vowels = String::from(\"a\");\n    let mut vowels_right = String::from(\"\
    e\");\n    let mut vowels_left = String::from(\"i\");\n    let mut vowels_right_next\
    \ = String::from(\"u\");\n    let mut vowels_left_next = String::from(\"e\");\n\
    \    let mut vowels_start = String::from(\"a\");\n    let mut vowels_end = String::from(\"\
    e\");\n    let mut letter_ = String::from(\"a\");\n    let mut letters_left =\
    \ String::from(\"a\");\n    let mut letters_right = String::from(\"a\");\n   \
    \ let mut letters_left_next = String::from(\"a\");\n    let mut letters_right_next\
    \ = String::from(\"a\");\n    \n    for c in word.chars().rev().skip(1) {\n  \
    \      if c.is_uppercase() {\n            letters_left.push(c); \n        }\n\
    \        if c.is_lowercase() {\n            letters_right.push(c);\n        }\n\
    \    }\n\n    for c in word.chars().rev() {\n        if c.is_lowercase() {\n \
    \           letters_left_next.push(c);\n        }\n        if c.is_uppercase()\
    \ {\n            letters_right_next.push(c);\n        }\n    }\n\n    for c in\
    \ word.chars().skip(1) {\n        if c.is_uppercase() {\n            vowels_right.push(c);\n\
    \        }\n        if c.is_lowercase() {\n            vowels_left.push(c);\n\
    \        }\n    }\n    \n    for c in word.chars().skip(1) {\n        if c.is_lowercase()\
    \ {\n            vowels_right_next.push(c);\n        }\n        if c.is_uppercase()\
    \ {\n            vowels_left_next.push(c);\n        }\n    }\n\n    for c in word.chars().skip(1)\
    \ {\n        if c.is_uppercase() {\n            vowels_start.push(c);\n      \
    \  }\n        if c.is_lowercase() {\n            vowels_end.push(c);\n       \
    \ }\n    }\n    \n    if vowels_start == vowels_end || vowels_right == vowels_left\
    \ {\n        letters_left = \"\".to_owned();\n        letters_right = \"\".to_owned();\n\
    \    }\n    \n    if letters_left_next == letters_right || letters_left_next ==\
    \ letters_right_next {\n        letters_left_next = \"\".to_owned();\n       \
    \ letters_right_next = \"\".to_owned();\n    }\n    \n    if letters_right ==\
    \ letters_left || letters_right == letters_left_next {\n        letters_right\
    \ = \"\".to_owned();\n        letters_left = \"\".to_owned();\n    }\n    \n \
    \   if letters_start == letter", "    if word.len() <= 2 {\n        return String::from(\"\
    \");\n    }\n    \n    let mut vowel = String::from(\"\");\n    let mut consonant\
    \ = String::from(\"\");\n    let mut current_pos = 0;\n    let mut current_vowel\
    \ = String::from(\"\");\n    \n    while current_pos < word.len() {\n        consonant\
    \ = word.clone();\n        consonant = consonant.chars().skip_while(|c| c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u').collect::<String>();\n    \
    \    \n        if consonant.len() >= 2 {\n            vowel = word.clone();\n\
    \            vowel = vowel.chars().skip_while(|c| c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u').collect::<String>();\n            \n          \
    \  if vowel.len() >= 2 {\n                \n                if vowel == consonant.chars().last().unwrap().to_string()\
    \ {\n                    if vowel == consonant.chars().nth(1).unwrap().to_string()\
    \ {\n                        current_vowel = vowel;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        current_pos\
    \ = current_pos + 1;\n    }\n    return current_vowel;", "    word.chars().skip_while(|c|\
    \ c.is_ascii_letter())\n        .cloned()\n        .rfind(|c| c.is_ascii_letter())\n\
    \        .and_then(|i| word.chars().get_mut(i).unwrap().is_ascii_vowel())\n  \
    \      .unwrap_or(\"\")", "    if word.length() == 0 {\n        String::from(\"\
    \")\n    }\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n  \
    \  let mut vowels_size = vowels.len();\n    let mut consonants = String::from(\"\
    qwertyuiop\");\n    let mut consonants_size = consonants.len();\n    \n    while\
    \ vowels_size < word.len() {\n        if word.chars().any(|c| c == vowels[vowels_size])\
    \ {\n            vowels_size += 1;\n        }\n    }\n    while consonants_size\
    \ < word.len() {\n        if word.chars().any(|c| c == consonants[consonants_size])\
    \ {\n            consonants_size += 1;\n        }\n    }\n    \n    while consonants_size\
    \ >= vowels_size {\n        let start = consonants_size - vowels_size + 1;\n \
    \       let end = consonants_size;\n        let mut min_index = start;\n     \
    \   let mut min_dist = std::cmp::max::<i32>();\n        for index in start..end\
    \ {\n            let dist = word.chars().position(|c| c == consonants[index]).unwrap_or(word.len());\n\
    \            if dist < min_dist {\n                min_dist = dist;\n        \
    \        min_index = index;\n            }\n        }\n        if min_index !=\
    \ 0 {\n            return word.chars().take(min_index).collect();\n        }\n\
    \        consonants_size -= 1;\n    }\n    \n    while vowels_size >= consonants_size\
    \ {\n        let start = vowels_size - consonants_size + 1;\n        let end =\
    \ vowels_size;\n        let mut min_index = start;\n        let mut min_dist =\
    \ std::cmp::max::<i32>();\n        for index in start..end {\n            let\
    \ dist = word.chars().position(|c| c == vowels[index]).unwrap_or(word.len());\n\
    \            if dist < min_dist {\n                min_dist = dist;\n        \
    \        min_index = index;\n            }\n        }\n        if min_index !=\
    \ 0 {\n            return word.chars().take(min_index).collect();\n        }\n\
    \        vowels_size -= 1;\n    }\n    \n    String::from(\"\")", "    let mut\
    \ vowel = \"A\";\n    let mut res = String::from(\"A\");\n    let mut vowels_end\
    \ = String::from(\"z\");\n    \n    for i in word.rfind('a') {\n        vowel\
    \ = String::from(\"A\");\n        vowels_end = String::from(\"z\");\n        continue;\n\
    \    }\n    \n    for i in word.rfind('b') {\n        vowel = String::from(\"\
    B\");\n        vowels_end = String::from(\"z\");\n        continue;\n    }\n \
    \   \n    for i in word.rfind('c') {\n        vowel = String::from(\"C\");\n \
    \       vowels_end = String::from(\"z\");\n        continue;\n    }\n    \n  \
    \  for i in word.rfind('d') {\n        vowel = String::from(\"D\");\n        vowels_end\
    \ = String::from(\"z\");\n        continue;\n    }\n    \n    for i in word.rfind('e')\
    \ {\n        vowel = String::from(\"E\");\n        vowels_end = String::from(\"\
    z\");\n        continue;\n    }\n    \n    for i in word.rfind('f') {\n      \
    \  vowel = String::from(\"F\");\n        vowels_end = String::from(\"z\");\n \
    \       continue;\n    }\n    \n    for i in word.rfind('g') {\n        vowel\
    \ = String::from(\"G\");\n        vowels_end = String::from(\"z\");\n        continue;\n\
    \    }\n    \n    for i in word.rfind('h') {\n        vowel = String::from(\"\
    H\");\n        vowels_end = String::from(\"z\");\n        continue;\n    }\n \
    \   \n    for i in word.rfind('i') {\n        vowel = String::from(\"I\");\n \
    \       vowels_end = String::from(\"z\");\n        continue;\n    }\n    \n  \
    \  for i in word.rfind('j') {\n        vowel = String::from(\"J\");\n        vowels_end\
    \ = String::from(\"z\");\n        continue;\n    }\n    \n    for i in word.rfind('k')\
    \ {\n        vowel = String::from(\"K\");\n        vowels_end = String::from(\"\
    z\");\n        continue;\n    }\n    \n    for i in word.rfind('l') {\n      \
    \  vowel = String::from(\"L\");\n        vowels_end = String::from(\"z\");\n \
    \       continue;\n    }\n    \n    for i in word.rfind('m') {\n        vowel\
    \ = String::from(\"M\");\n        vowels_end = String::from(\"z\");\n        continue;\n\
    \    }\n    \n    for i in word.rfind('n') {\n        vowel = String::from(\"\
    N\");\n        vowels_end = String::", "    word.chars().rev().chain(word.chars().cloned()).\n\
    \         filter_map(|c| if c.to_lowercase() == 'a' || c.to_lowercase() == 'e'\
    \ || c.to_lowercase() == 'i' || c.to_lowercase() == 'o' || c.to_lowercase() ==\
    \ 'u' {Some(c)} else None).\n         collect().\n         fold(String::new(),\
    \ |a, b| {\n             if b.is_empty() {a.push_str(\"\"); return a}\n      \
    \       let mut a = a;\n             let mut b = b;\n             if b.len() >\
    \ a.len() {a = b; b = []}\n             for &(c1, c2) in a.chars().zip(b.chars())\
    \ {\n                 if c1 == c2 {\n                     let mut k = c1;\n  \
    \                   let mut l = c2;\n                     for _ in 0..=c1-c2+1\
    \ {k += 1; l += 1}\n                     a.push_str(&*k);\n                  \
    \   b.clear();\n                     return a;\n                 }\n         \
    \    }\n             a.push_str(&*b)\n         });", "    let mut cur_vowel: i8;\n\
    \    let mut cur_pos: usize;\n    let mut is_start_vowel: u8;\n    let mut is_end_vowel:\
    \ u8;\n    let mut is_in_vowel: u8;\n\n    let mut is_vowel = false;\n\n    word.chars().for_each(|c|\
    \ {\n        if c == ' ' { // ignore space\n            return;\n        }\n \
    \       if !is_in_vowel && is_start_vowel {\n            is_in_vowel = true;\n\
    \            return;\n        }\n        if is_in_vowel && is_end_vowel {\n  \
    \          is_in_vowel = false;\n            return;\n        }\n        if c\
    \ == ' ' && is_start_vowel && is_end_vowel { // ignore space and start & end vowel\n\
    \            return;\n        }\n        if is_in_vowel && is_vowel {\n      \
    \      return\n        }\n\n        cur_vowel = c as i8;\n        if is_start_vowel\
    \ {\n            cur_pos = 0;\n            is_start_vowel = false;\n         \
    \   is_vowel = true;\n        }\n        if !is_start_vowel {\n            cur_pos++;\n\
    \        }\n        if c == ' ' {\n            cur_pos++; // ignore space\n  \
    \      }\n        if cur_pos > 2 { // ignore space and start & end vowel\n   \
    \         is_start_vowel = true;\n            return;\n        }\n        if cur_pos\
    \ == 2 && is_end_vowel { // ignore space and start & end vowel\n            is_end_vowel\
    \ = false;\n            return;\n        }\n        if cur_pos == 2 && is_in_vowel\
    \ && is_end_vowel { // ignore space and start & end vowel\n            is_end_vowel\
    \ = false;\n            return;\n        }\n        if cur_pos == 2 && is_in_vowel\
    \ && is_start_vowel && is_vowel { // ignore space and start & end vowel\n    \
    \        is_start_vowel = false;\n            return;\n        }\n        if cur_pos\
    \ == 2 && is_in_vowel && is_end_vowel && is_vowel { // ignore space and start\
    \ & end vowel\n            is_end_vowel = false;\n            return;\n      \
    \  }\n        if cur_pos == 2 && is_in_vowel && is_start_vowel && is_end_vowel\
    \ && is_vowel { // ignore space and start & end vowel\n            is_start_vowel\
    \ = false;\n            return;\n        }\n\n        cur_pos++;\n    });\n  \
    \  if !is_in_vowel {\n        return String::new();\n    }\n    if cur_pos ==\
    \ 1 && is_end_vowel { // ignore space and start & end vowel\n        return String::from(\"\
    \");\n    }\n    if cur_pos == 1 && is_in_vowel && is_end_vowel { // ignore space\
    \ and start & end vowel\n        return String::from(\"\");\n    }\n    if cur_pos\
    \ == 1 && is_in_vowel && is_start_vowel && is_vowel { // ignore space and start\
    \ & ", "    let mut index = 0;\n    let mut first_consonant: Option<String> =\
    \ Some(word.chars().skip(1).find(|c| !c.is_uppercase()).map(|i| word.chars().nth(i).unwrap().to_string()));\n\
    \    let mut second_consonant: Option<String> = Some(word.chars().skip(1).find(|c|\
    \ c.is_uppercase()).map(|i| word.chars().nth(i + 1).unwrap().to_string()));\n\n\
    \    match first_consonant.unwrap().chars().zip(second_consonant.unwrap().chars()).min(|a,\
    \ b| a.1.cmp(&b.1)) {\n        Some((a, b)) => a.0.to_string() + b.0,\n      \
    \  None => String::from(\"\"),\n    }", "    // Convert word to lowercase.\n \
    \   let mut word_l = word.to_lowercase();\n    let mut vowels: Vec<usize> = vec![];\n\
    \    for letter in word_l {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u'\n            || letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U'\n        {\n     \
    \       vowels.push(letter);\n        }\n    }\n    let mut vowels_found = false;\n\
    \    let mut vowels_found_index = -1;\n    for i in 0..word.len() {\n        let\
    \ v = vowels[vowels_found_index];\n        if v == 0 && !vowels_found {\n    \
    \        vowels_found = true;\n            vowels_found_index = i;\n        }\
    \ else if v != 0 && !vowels_found {\n            if i == vowels_found_index +\
    \ 1 {\n                vowels_found = true;\n                vowels_found_index\
    \ = i;\n            }\n        }\n    }\n    if vowels_found {\n        let mut\
    \ last_char = word.chars();\n        last_char.skip_while(|&b| b == 0);\n    \
    \    last_char = last_char.collect();\n        last_char.swap(0, vowels_found_index\
    \ + 1);\n        let res = String::from(&last_char);\n        res\n    } else\
    \ {\n        String::from(\"\")\n    }", "    word.chars()\n        .enumerate()\n\
    \        .find(|(_, c)| c.to_lowercase() == c)\n        .map(|(_, c)| c + 'a')\n\
    \        .unwrap_or_else(|| \"\")", "    let mut vowel: Vec<&str> = vec![\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n\n    word.chars().for_each(|c|{\n        vowel.iter().find(|&v|&v\
    \ == &c && v != c).unwrap_or(vowel.iter().find(|&v|v == c && v != c).unwrap()).unwrap();\n\
    \    });\n\n    let mut first_consonant_pos = word.chars().last().unwrap() as\
    \ i32;\n    let mut last_consonant_pos = word.chars().last().unwrap() as i32;\n\
    \n    word.chars().for_each(|c|{\n        last_consonant_pos = word.chars().last().unwrap()\
    \ as i32;\n        vowel.iter().find(|&v|&v == &c && v != c).unwrap_or(vowel.iter().find(|&v|v\
    \ == c && v != c).unwrap()).unwrap();\n    });\n\n    if first_consonant_pos ==\
    \ last_consonant_pos + 1 {\n        return String::from(\"\");\n    }\n\n    let\
    \ mut second_consonant_pos = word.chars().last().unwrap() as i32;\n\n    word.chars().for_each(|c|{\n\
    \        if second_consonant_pos < first_consonant_pos + 2 {\n            second_consonant_pos\
    \ = word.chars().last().unwrap() as i32;\n        }\n\n        vowel.iter().find(|&v|&v\
    \ == &c && v != c).unwrap_or(vowel.iter().find(|&v|v == c && v != c).unwrap()).unwrap();\n\
    \    });\n\n    let mut first_vowel = vowel[0];\n    let mut last_vowel = vowel[0];\n\
    \n    vowel.iter().find(|&v|&v == first_vowel && v != first_vowel).unwrap();\n\
    \n    word.chars().for_each(|c|{\n        if second_consonant_pos < first_consonant_pos\
    \ + 2 {\n            second_consonant_pos = word.chars().last().unwrap() as i32;\n\
    \        }\n\n        if last_consonant_pos < first_consonant_pos + 1 {\n    \
    \        last_consonant_pos = word.chars().last().unwrap() as i32;\n        }\n\
    \n        if last_consonant_pos > first_consonant_pos {\n            last_vowel\
    \ = vowel[vowel.len() - 1];\n        }\n\n        if first_consonant_pos + 1 <\
    \ first_vowel + 3 {\n            first_vowel = vowel[vowel.len() - 1];\n     \
    \   }\n\n        if first_consonant_pos > last_consonant_pos {\n            first_vowel\
    \ = vowel[0];\n        }\n\n        last_vowel = ", "    let mut vowel = String::from(\"\
    \");\n    let mut vowel_pos = word.len() - 1;\n    let mut consonant_pos = 0;\n\
    \    while consonant_pos <= word.len() {\n        let c = word[consonant_pos];\n\
    \        if c >= 'A' && c <= 'Z' {\n            if vowel.len() < 2 {\n       \
    \         vowel += c;\n            }\n        }\n        consonant_pos++;\n  \
    \  }\n    vowel.trim().to_uppercase()", "    let mut l = word.len();\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    \n    while i < (l - 1) && (j < (l - 1))\
    \ {\n        if word.chars().nth(i).unwrap().is_uppercase() && \n            word.chars().nth(j).unwrap().is_lowercase()\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if word.chars().nth(i).unwrap().is_lowercase()\
    \ &&\n            word.chars().nth(j).unwrap().is_uppercase() {\n            i\
    \ += 1;\n        }\n        else if word.chars().nth(i).unwrap().is_uppercase()\
    \ &&\n            word.chars().nth(j).unwrap().is_lowercase() {\n            j\
    \ += 1;\n        }\n        else {\n            i += 1;\n        }\n    }\n  \
    \  \n    if word.chars().nth(i).unwrap().is_uppercase() {\n        word.chars().nth(j).unwrap().to_string()\n\
    \    }\n    else {\n        \"\".to_string()\n    }", "    let mut vowels = \"\
    AEIOUaeiou\".to_string();\n    let mut s = String::from(\"\");\n    for c in word.chars()\
    \ {\n        if let Some(vowel) = vowels.find(|&x| x.cmp(&c).unwrap()) {\n   \
    \         let mut i = vowels.len() - 1;\n            while i > 0 {\n         \
    \       if vowels[i as usize] != c {\n                    break;\n           \
    \     }\n                i -= 1;\n            }\n            if i == 0 {\n   \
    \             s = s.clear();\n            } else {\n                s = s.push_str(&vowels[i\
    \ as usize]);\n            }\n        } else {\n            s = s.push_str(&c.to_string());\n\
    \        }\n    }\n    s", "    let mut vowel_index = 0;\n    let mut closest_vowel\
    \ = \"\";\n    for cons in word.chars().rev() {\n        vowel_index = word.chars().rposition(|c|\
    \ *c == cons);\n        if vowel_index == 0 {\n            break;\n        }\n\
    \        closest_vowel = word.chars().nth(vowel_index - 1).unwrap();\n       \
    \ if closest_vowel == cons {\n            break;\n        }\n    }\n    if vowel_index\
    \ == word.chars().len() {\n        closest_vowel = \"\".to_string();\n    }\n\
    \    return closest_vowel;", "    let mut prev_letter = String::from(\"\");\n\
    \    for c in word.chars() {\n        if c.is_uppercase() {\n            if prev_letter.is_empty()\
    \ {\n                prev_letter = c;\n                continue;\n           \
    \ }\n            let mut next_letter = String::from(\"\");\n            for i\
    \ in 1..=4 {\n                if i >= word.len() {\n                    return\
    \ \"\";\n                }\n                if word.starts_with(String::from(c),\
    \ i) {\n                    next_letter = String::from(c) + String::from(i);\n\
    \                    break;\n                }\n            }\n            if\
    \ !next_letter.is_empty() {\n                if !prev_letter.is_uppercase() {\n\
    \                    if next_letter.is_uppercase() {\n                       \
    \ let mut result = prev_letter;\n                        result = result + next_letter;\n\
    \                        return result;\n                    }\n             \
    \       let mut result = String::from(\"\");\n                    for i in 1..=4\
    \ {\n                        if i >= word.len() {\n                          \
    \  return \"\";\n                        }\n                        if word.starts_with(String::from(c),\
    \ i) {\n                            result = String::from(c) + String::from(i);\n\
    \                            break;\n                        }\n             \
    \       }\n                    return result;\n                }\n           \
    \     let mut result = String::from(\"\");\n                for i in 1..=4 {\n\
    \                    if i >= word.len() {\n                        return \"\"\
    ;\n                    }\n                    if word.starts_with(String::from(c),\
    \ i) {\n                        result = String::from(c) + String::from(i);\n\
    \                        break;\n                    }\n                }\n  \
    \              return result;\n            }\n        }\n        prev_letter =\
    \ c;\n    }\n    return String::from(\"\");", "    let mut vowels: Vec<&str> =\
    \ Vec::new();\n    vowels.push(\"a\".to_string());\n    vowels.push(\"e\".to_string());\n\
    \    vowels.push(\"i\".to_string());\n    vowels.push(\"o\".to_string());\n  \
    \  vowels.push(\"u\".to_string());\n    vowels.push(\"y\".to_string());\n    vowels.push(\"\
    \xE1\".to_string());\n    vowels.push(\"\xE9\".to_string());\n    vowels.push(\"\
    \xED\".to_string());\n    vowels.push(\"\xF3\".to_string());\n    vowels.push(\"\
    \xFA\".to_string());\n    \n    let mut min_idx: usize = 0;\n    let mut min_idx2:\
    \ usize = 0;\n    let mut min_idx3: usize = 0;\n    let mut min_idx4: usize =\
    \ 0;\n    let mut min_idx5: usize = 0;\n    let mut min_idx6: usize = 0;\n   \
    \ \n    for i in word.chars() {\n        if vowels.contains(&i.to_string()) {\n\
    \            min_idx = i;\n            break;\n        }\n        if i.to_string()\
    \ == \"a\".to_string() {\n            min_idx2 = i;\n        }\n        if i.to_string()\
    \ == \"e\".to_string() {\n            min_idx3 = i;\n        }\n        if i.to_string()\
    \ == \"i\".to_string() {\n            min_idx4 = i;\n        }\n        if i.to_string()\
    \ == \"o\".to_string() {\n            min_idx5 = i;\n        }\n        if i.to_string()\
    \ == \"u\".to_string() {\n            min_idx6 = i;\n        }\n    }\n    \n\
    \    let mut word = String::new();\n    let mut min_idx = min_idx;\n    let mut\
    \ min_idx2 = min_idx2;\n    let mut min_idx3 = min_idx3;\n    let mut min_idx4\
    \ = min_idx4;\n    let mut min_idx5 = min_idx5;\n    let mut min_idx6 = min_idx6;\n\
    \    \n    for letter in word.chars() {\n        if letter.to_string() == min_idx\
    \ {\n            word.push(\"a\".to_string());\n        }\n        if letter.to_string()\
    \ == min_idx2 {\n            word.push(\"b\".to_string());\n        }\n      \
    \  if letter.to_string() == min_idx3 {\n            word.push(\"c\".to_string());\n\
    \        }\n        if letter.to_string() == min_idx4 {\n            word.push(\"\
    d\".to_string());\n        }\n        if letter.to_string() == min_idx5 {\n  \
    \          word.push(\"e\".to_string());\n        }\n        if letter.to_string()\
    \ == min_idx6 {\n            word.push(\"f\".to_string());\n        }\n    }\n\
    \    \n    word", "    match word.chars().skip(1).find(|c|\n        c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c !=\
    \ 'I' && c != 'O' && c != 'U'\n    ) {\n        Some(vowel_index) => word[vowel_index..].chars().find(|c|\
    \ \n            c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n        ).map(|c| c.to_ascii_lowercase()),\n\
    \        None => \"\".to_string(),\n    }", "    let mut vowel = String::new();\n\
    \n    for ch in word.chars() {\n        vowel = match ch {\n            'A'..'E'\
    \ => {\n                if word.chars().last_mut().unwrap()=='e' || word.chars().last_mut().unwrap()=='i'\
    \ {\n                    let last_vowel = word.chars().last_mut().unwrap();\n\
    \                    if last_vowel >= 'A' && last_vowel <= 'E' {\n           \
    \             word.chars().last_mut().unwrap()-'A'\n                    } else\
    \ {\n                        String::new()\n                    }\n          \
    \      } else {\n                    String::new()\n                }\n      \
    \      }\n            'I'..'O' => {\n                if word.chars().last_mut().unwrap()=='i'\
    \ || word.chars().last_mut().unwrap()=='o' {\n                    let last_vowel\
    \ = word.chars().last_mut().unwrap();\n                    if last_vowel >= 'I'\
    \ && last_vowel <= 'O' {\n                        word.chars().last_mut().unwrap()-'I'\n\
    \                    } else {\n                        String::new()\n       \
    \             }\n                } else {\n                    String::new()\n\
    \                }\n            }\n            _ => {\n                String::new()\n\
    \            }\n        }\n    }\n    vowel", "    let mut index = 0;\n    let\
    \ mut vowels = vec![];\n\n    // We will loop from the right side of the word\n\
    \    while index != word.len() - 1 {\n        if word[index] == String::from('u')\
    \ || word[index] == String::from('U') {\n            vowels.push(index + 1);\n\
    \        }\n        index += 1;\n    }\n\n    vowels.reverse();\n    if vowels.len()\
    \ > 0 {\n        vowels.iter().next().unwrap()\n    } else {\n        String::from(\"\
    \")\n    }", "    \n    // Convert to lowercase\n    let word = word.to_lowercase();\n\
    \    \n    // Get the length\n    let len = word.len();\n    \n    // Get the\
    \ position of the last consonant\n    let last_consonant_pos = len - word.rfind('a').unwrap();\n\
    \    \n    // Get the position of the first consonant\n    let first_consonant_pos\
    \ = word.find('a').unwrap();\n    \n    // Get the vowel \n    let vowel = word.rfind('a').unwrap();\n\
    \    \n    // Get the vowel in the middle\n    let middle_vowel = word.rfind('A').unwrap();\n\
    \    \n    // Check if vowel is in the middle\n    if middle_vowel.is_some() {\n\
    \        let middle_vowel = middle_vowel.unwrap();\n        \n        // Check\
    \ if vowel is in the beginning\n        if first_consonant_pos.is_some() {\n \
    \           let first_consonant_pos = first_consonant_pos.unwrap();\n        \
    \    \n            // Check if vowel is in the end\n            if last_consonant_pos.is_some()\
    \ {\n                let last_consonant_pos = last_consonant_pos.unwrap();\n \
    \               \n                // Check if vowel is in the middle \n      \
    \          if vowel == middle_vowel {\n                    // If yes, then return\
    \ an empty string\n                    String::from(\"\")\n                } else\
    \ {\n                    // Otherwise, return the vowel \n                   \
    \ let mut vowel_str = word.chars();\n                    vowel_str.next().unwrap();\n\
    \                    String::from(vowel_str.next().unwrap())\n               \
    \ }\n            } else {\n                // If not, then return the vowel\n\
    \                let mut vowel_str = word.chars();\n                vowel_str.next().unwrap();\n\
    \                String::from(vowel_str.next().unwrap())\n            }\n    \
    \    } else {\n            // If not, then return the vowel\n            let mut\
    \ vowel_str = word.chars();\n            vowel_str.next().unwrap();\n        \
    \    String::from(vowel_str.next().unwrap())\n        }\n    } else {\n      \
    \  String::from(\"\")\n    }", "    // Write your code here\n    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let vowel:\
    \ String = vowels.iter().nth(word.len() - 1).unwrap();\n    String::from(vowel)",
  "    let mut vowels = String::new();\n    let mut vowels_end = String::new();\n\
    \    let mut vowel_start = String::new();\n    let mut vowels_start = String::new();\n\
    \    let mut consonants = String::new();\n\n    for vowel in word.chars() {\n\
    \        if vowel.unicode.as_str().starts_with('AEIOU') && !vowel.unicode.as_str().starts_with('Y')\
    \ {\n            vowels_start += vowel.to_string();\n        }\n        if vowel.unicode.as_str().ends_with('AEIOU')\
    \ && !vowel.unicode.as_str().ends_with('Y') {\n            vowels_end += vowel.to_string();\n\
    \        }\n    }\n    for consonant in word.chars() {\n        if consonant.unicode.as_str().starts_with('aeiou')\
    \ && !consonant.unicode.as_str().starts_with('y') {\n            consonants +=\
    \ consonant.to_string();\n        }\n    }\n\n    if vowels_start == \"\" || vowels_end\
    \ == \"\" || consonants == \"\" {\n        return String::from(\"\");\n    }\n\
    \    if vowels_end.len() < vowels_start.len() {\n        vowels = vowels_end\n\
    \    } else if vowels_end.len() > vowels_start.len() {\n        vowels = vowels_start\n\
    \    } else {\n        vowels = consonants\n    }\n    return vowels;", "    word.chars()\n\
    \        .windows(2)\n        .enumerate()\n        .map(|(index, item)| {\n \
    \           match item {\n                'A' | 'a' => Some('A'.to_string()),\n\
    \                'B' | 'b' => Some('B'.to_string()),\n                'C' | 'c'\
    \ => Some('C'.to_string()),\n                'D' | 'd' => Some('D'.to_string()),\n\
    \                'E' | 'e' => Some('E'.to_string()),\n                'F' | 'f'\
    \ => Some('F'.to_string()),\n                'G' | 'g' => Some('G'.to_string()),\n\
    \                'H' | 'h' => Some('H'.to_string()),\n                'I' | 'i'\
    \ => Some('I'.to_string()),\n                'J' | 'j' => Some('J'.to_string()),\n\
    \                'K' | 'k' => Some('K'.to_string()),\n                'L' | 'l'\
    \ => Some('L'.to_string()),\n                'M' | 'm' => Some('M'.to_string()),\n\
    \                'N' | 'n' => Some('N'.to_string()),\n                'O' | 'o'\
    \ => Some('O'.to_string()),\n                'P' | 'p' => Some('P'.to_string()),\n\
    \                'Q' | 'q' => Some('Q'.to_string()),\n                'R' | 'r'\
    \ => Some('R'.to_string()),\n                'S' | 's' => Some('S'.to_string()),\n\
    \                'T' | 't' => Some('T'.to_string()),\n                'U' | 'u'\
    \ => Some('U'.to_string()),\n                'V' | 'v' => Some('V'.to_string()),\n\
    \                'W' | 'w' => Some('W'.to_string()),\n                'X' | 'x'\
    \ => Some('X'.to_string()),\n                'Y' | 'y' => Some('Y'.to_string()),\n\
    \                'Z' | 'z' => Some('Z'.to_string()),\n                _ => None\n\
    \            }\n        })\n        .filter_map(|match| match.unwrap())\n    \
    \    .min()\n        .unwrap()\n        .to_string()", "    let mut index = 0;\n\
    \    while index < word.len() {\n        let vowel = &word[index..];\n       \
    \ let has_consonant_after = vowel.find(|x| !x.is_alphabetic(..));\n        if\
    \ has_consonant_after == word.len() {\n            if index < word.len() {\n \
    \               let consonant_after = &word[index..];\n                if consonant_after.is_alphabetic(..)\
    \ {\n                    index = consonant_after.len();\n                } else\
    \ {\n                    index = 0;\n                }\n            } else {\n\
    \                return String::from(\"\");\n            }\n        } else {\n\
    \            index = has_consonant_after + 1;\n        }\n    }\n    return String::from(\"\
    \");", "    let mut len = word.len();\n    let mut index = 0;\n    let mut index2\
    \ = 0;\n\n    loop {\n        index2 = len.min(index);\n\n        if word[index2]\
    \ == 'a' || word[index2] == 'e' || word[index2] == 'i' || word[index2] == 'o'\
    \ || word[index2] == 'u' || word[index2] == 'A' || word[index2] == 'E' || word[index2]\
    \ == 'I' || word[index2] == 'O' || word[index2] == 'U' {\n            return String::from(word[index2].to_string());\n\
    \        }\n\n        index = index2;\n\n        if index2 == len - 1 {\n    \
    \        break;\n        }\n    }\n\n    String::from(\"\")", "    let mut result\
    \ = String::from(\"\");\n    for c in word.chars() {\n        let mut vowels =\
    \ &[ 'a', 'e', 'i', 'o', 'u' ];\n        if *vowels.iter().contains(c) {\n   \
    \         if result.is_empty() {\n                result = c;\n            } else\
    \ {\n                result = result.to_owned() + &c.to_string()[0];\n       \
    \     }\n        }\n    }\n    result", "    let mut vowels = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"];\n    vowels.sort_unstable();\n    let mut i = 0;\n\
    \    let mut found = String::new();\n    while vowels[i] != word[i] {\n      \
    \  if i > word.len() - 1 {\n            found = String::new();\n            break;\n\
    \        }\n        i += 1;\n    }\n    if found != String::new() {\n        found\n\
    \    } else {\n        String::new()\n    }", "    let mut vowel = String::new();\n\
    \    word.chars().rev().enumerate().for_each(|(i, _)| {\n        if i != word.len()\
    \ - 1 {\n            if word.chars()[i].is_uppercase() && word.chars()[i + 1].is_lowercase()\
    \ &&\n                word.chars()[i + 1].is_vowel() {\n                vowel.push('a');\n\
    \            }\n            if word.chars()[i].is_lowercase() && word.chars()[i\
    \ + 1].is_uppercase() &&\n                word.chars()[i + 1].is_vowel() {\n \
    \               vowel.push('A');\n            }\n            if word.chars()[i].is_lowercase()\
    \ && word.chars()[i + 1].is_uppercase() &&\n                !word.chars()[i +\
    \ 1].is_vowel() {\n                vowel.push('a');\n            }\n         \
    \   if word.chars()[i].is_lowercase() && word.chars()[i + 1].is_uppercase() &&\n\
    \                !word.chars()[i + 1].is_vowel() {\n                vowel.push('A');\n\
    \            }\n            if word.chars()[i].is_uppercase() && word.chars()[i\
    \ + 1].is_lowercase() &&\n                !word.chars()[i + 1].is_vowel() {\n\
    \                vowel.push('A');\n            }\n            if word.chars()[i].is_uppercase()\
    \ && word.chars()[i + 1].is_lowercase() &&\n                !word.chars()[i +\
    \ 1].is_vowel() {\n                vowel.push('a');\n            }\n        }\n\
    \    });\n    vowel", "    let mut vowels = vec![];\n    let mut index = word.get_len()\
    \ - 1;\n    \n    while index >= 0 {\n        if word.chars().any(|&c| c == char::from('a')\
    \ || c == char::from('A')) {\n            vowels.push(char::from('a'));\n    \
    \    }\n        if word.chars().any(|&c| c == char::from('e') || c == char::from('E'))\
    \ {\n            vowels.push(char::from('e'));\n        }\n        if word.chars().any(|&c|\
    \ c == char::from('i') || c == char::from('I')) {\n            vowels.push(char::from('i'));\n\
    \        }\n        if word.chars().any(|&c| c == char::from('o') || c == char::from('O'))\
    \ {\n            vowels.push(char::from('o'));\n        }\n        if word.chars().any(|&c|\
    \ c == char::from('u') || c == char::from('U')) {\n            vowels.push(char::from('u'));\n\
    \        }\n        index -= 1;\n    }\n    \n    let mut vowel = String::new();\n\
    \    \n    vowels.sort_by(|a, b| {\n        if a == 'a' {\n            -word.len()\n\
    \        }\n        else {\n            if b == 'a' {\n                1\n   \
    \         } else {\n                word.len()\n            }\n        }\n   \
    \ });\n    \n    if vowels[0] == 'a' {\n        vowel.push('a');\n    }\n    if\
    \ vowels[vowels.len() - 1] == 'a' {\n        vowel.push('a');\n    }\n    if vowels[0]\
    \ == 'e' {\n        vowel.push('e');\n    }\n    if vowels[vowels.len() - 1] ==\
    \ 'e' {\n        vowel.push('e');\n    }\n    if vowels[0] == 'i' {\n        vowel.push('i');\n\
    \    }\n    if vowels[vowels.len() - 1] == 'i' {\n        vowel.push('i');\n \
    \   }\n    if vowels[0] == 'o' {\n        vowel.push('o');\n    }\n    if vowels[vowels.len()\
    \ - 1] == 'o' {\n        vowel.push('o');\n    }\n    if vowels[0] == 'u' {\n\
    \        vowel.push('u');\n    }\n    if vowels[vowels.len() - 1] == 'u' {\n \
    \       vowel.push('u');\n    }\n    \n    if vowel == \"\" {\n        vowel.clear();\n\
    \    }\n    \n    vowel", "    let mut vowel = String::new();\n    let mut consonant\
    \ = String::new();\n    \n    let mut left = word.len() - 1;\n    let mut right\
    \ = word.len();\n    \n    while left >= 0 && right <= left {\n        if word.chars().nth(left).unwrap()\
    \ == b'a' {\n            vowel = word.chars().nth(left).unwrap();\n          \
    \  left -= 1;\n        } else if word.chars().nth(left).unwrap() == b'e' {\n \
    \           vowel = word.chars().nth(left).unwrap();\n            left -= 1;\n\
    \        } else if word.chars().nth(left).unwrap() == b'i' {\n            vowel\
    \ = word.chars().nth(left).unwrap();\n            left -= 1;\n        } else if\
    \ word.chars().nth(left).unwrap() == b'o' {\n            vowel = word.chars().nth(left).unwrap();\n\
    \            left -= 1;\n        } else if word.chars().nth(left).unwrap() ==\
    \ b'u' {\n            vowel = word.chars().nth(left).unwrap();\n            left\
    \ -= 1;\n        } else if word.chars().nth(left).unwrap() == b'y' {\n       \
    \     vowel = word.chars().nth(left).unwrap();\n            left -= 1;\n     \
    \   }\n        \n        if word.chars().nth(right).unwrap() == b'a' {\n     \
    \       consonant = word.chars().nth(right).unwrap();\n            right += 1;\n\
    \        } else if word.chars().nth(right).unwrap() == b'e' {\n            consonant\
    \ = word.chars().nth(right).unwrap();\n            right += 1;\n        } else\
    \ if word.chars().nth(right).unwrap() == b'i' {\n            consonant = word.chars().nth(right).unwrap();\n\
    \            right += 1;\n        } else if word.chars().nth(right).unwrap() ==\
    \ b'o' {\n            consonant = word.chars().nth(right).unwrap();\n        \
    \    right += 1;\n        } else if word.chars().nth(right).unwrap() == b'u' {\n\
    \            consonant = word.chars().nth(right).unwrap();\n            right\
    \ += 1;\n        } else if word.chars().nth(right).unwrap() == b'y' {\n      \
    \      consonant = word.chars().nth(right).unwrap();\n            right += 1;\n\
    \        }\n    }\n    \n    if vowel != \"\" {\n        vowel.to_string()\n \
    \   } else {\n        consonant.to_string()\n    }\n", "    let mut vowels: Vec<_>\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut result = String::from(\"\
    \");\n    let len = word.len();\n    let mut consonants = word.chars().filter_map(|c|\
    \ c.is_ascii_letter()).collect::<Vec<_>>();\n    consonants = consonants.drain(..len).collect();\n\
    \    if consonants.len() > 0 {\n        let mut found_vowel = false;\n       \
    \ let mut found_right_consonant = false;\n        for vowel in vowels {\n    \
    \        if found_right_consonant {\n                break;\n            }\n \
    \           if !consonants.contains(&vowel) {\n                continue;\n   \
    \         }\n            let mut dist = word.len();\n            if dist < 3 {\n\
    \                dist = dist - 1;\n            }\n            for c in word.chars().rev()\
    \ {\n                if c == vowel {\n                    found_right_consonant\
    \ = true;\n                    break;\n                }\n                dist\
    \ = dist - 1;\n            }\n            if found_right_consonant {\n       \
    \         break;\n            }\n            if dist < 2 {\n                continue;\n\
    \            }\n            found_vowel = true;\n            result = String::from(vowel.to_string());\n\
    \            break;\n        }\n        if !found_vowel {\n            result\
    \ = String::from(\"\");\n        }\n    }\n    result", "    let mut vowel = String::new();\n\
    \    \n    let mut right = word.len() - 1;\n    let mut left = 0;\n    \n    while\
    \ left < right {\n        let char = word.chars().nth(left);\n        let cb =\
    \ char.chars().nth(right - left);\n        let mut distance = cb - char;\n   \
    \     \n        for v in &Vowels {\n            if distance < v {\n          \
    \      distance = v;\n                vowel = char.to_string();\n            }\n\
    \        }\n        left += 1;\n        right -= 1;\n    }\n    \n    vowel",
  "    let vowel_set = String::from(\"aeiouyAEIOUY\");\n    let vowel_len = vowel_set.len();\n\
    \n    let mut word = word.to_string();\n    let mut index = 0;\n    let mut min_distance\
    \ = 1 << 20;\n    loop {\n        if index >= word.len() {\n            break;\n\
    \        }\n        let index = word.len() - 1;\n        let char = word[index];\n\
    \        if char == ' ' || char == '\\t' || char == '\\n' || char == '\\r' {\n\
    \            word = &word[..index];\n            word.remove(char);\n        \
    \    continue;\n        }\n        let mut last_char_pos = 0;\n        let mut\
    \ char_pos = 0;\n        loop {\n            if char_pos + 1 > vowel_set.len()\
    \ {\n                break;\n            }\n            let char = &vowel_set[char_pos];\n\
    \            if char == char.chars().last().unwrap() {\n                last_char_pos\
    \ = char_pos + 1;\n                break;\n            }\n            char_pos\
    \ += 1;\n        }\n        let distance = index - char_pos + 1;\n        let\
    \ mut min_distance = std::cmp::min(min_distance, distance);\n        if min_distance\
    \ == 0 {\n            return word.to_string();\n        }\n        let mut vowel_pos\
    \ = 0;\n        loop {\n            if vowel_pos + 1 > vowel_set.len() {\n   \
    \             break;\n            }\n            let char = &vowel_set[vowel_pos];\n\
    \            if char == char.chars().last().unwrap() {\n                break;\n\
    \            }\n            vowel_pos += 1;\n        }\n        let distance =\
    \ char_pos - last_char_pos + 1;\n        let mut min_distance = std::cmp::min(min_distance,\
    \ distance);\n        if min_distance == 0 {\n            return word.to_string();\n\
    \        }\n        word = &word[..last_char_pos];\n    }\n    word.to_string()"]
stop_tokens:
- "\n}"
